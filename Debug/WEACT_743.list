
WEACT_743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016d1c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000752c  08016fc0  08016fc0  00017fc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801e4ec  0801e4ec  0001f4ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801e4f4  0801e4f4  0001f4f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801e4f8  0801e4f8  0001f4f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000558  24000000  0801e4fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000d0c  24000558  0801ea54  00020558  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24001264  0801ea54  00021264  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020558  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002c519  00000000  00000000  00020586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000061e9  00000000  00000000  0004ca9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002410  00000000  00000000  00052c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001bb3  00000000  00000000  00055098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00046032  00000000  00000000  00056c4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00034400  00000000  00000000  0009cc7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019ae5b  00000000  00000000  000d107d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0026bed8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a964  00000000  00000000  0026bf1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005c  00000000  00000000  00276880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000558 	.word	0x24000558
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016fa4 	.word	0x08016fa4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400055c 	.word	0x2400055c
 80002dc:	08016fa4 	.word	0x08016fa4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_d2lz>:
 8000708:	b508      	push	{r3, lr}
 800070a:	4602      	mov	r2, r0
 800070c:	460b      	mov	r3, r1
 800070e:	ec43 2b17 	vmov	d7, r2, r3
 8000712:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800071a:	d403      	bmi.n	8000724 <__aeabi_d2lz+0x1c>
 800071c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000720:	f000 b80a 	b.w	8000738 <__aeabi_d2ulz>
 8000724:	eeb1 7b47 	vneg.f64	d7, d7
 8000728:	ec51 0b17 	vmov	r0, r1, d7
 800072c:	f000 f804 	bl	8000738 <__aeabi_d2ulz>
 8000730:	4240      	negs	r0, r0
 8000732:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000736:	bd08      	pop	{r3, pc}

08000738 <__aeabi_d2ulz>:
 8000738:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000768 <__aeabi_d2ulz+0x30>
 800073c:	ec41 0b17 	vmov	d7, r0, r1
 8000740:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000770 <__aeabi_d2ulz+0x38>
 8000744:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000748:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800074c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000750:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000754:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000758:	ee16 1a10 	vmov	r1, s12
 800075c:	ee17 0a90 	vmov	r0, s15
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	f3af 8000 	nop.w
 8000768:	00000000 	.word	0x00000000
 800076c:	3df00000 	.word	0x3df00000
 8000770:	00000000 	.word	0x00000000
 8000774:	41f00000 	.word	0x41f00000

08000778 <LCD_Test>:
NULL, 0, lcd_writereg, lcd_readreg, lcd_senddata, lcd_recvdata, lcd_gettick };

ST7735_Object_t st7735_pObj;
uint32_t st7735_id;

void LCD_Test(void) {
 8000778:	b5b0      	push	{r4, r5, r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af02      	add	r7, sp, #8
	uint8_t text[20];
#ifdef TFT96
	ST7735Ctx.Orientation = ST7735_ORIENTATION_PORTRAIT;
 800077e:	4b62      	ldr	r3, [pc, #392]	@ (8000908 <LCD_Test+0x190>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
	ST7735Ctx.Panel = HannStar_Panel;
 8000784:	4b60      	ldr	r3, [pc, #384]	@ (8000908 <LCD_Test+0x190>)
 8000786:	2200      	movs	r2, #0
 8000788:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = ST7735_0_9_inch_screen;
 800078a:	4b5f      	ldr	r3, [pc, #380]	@ (8000908 <LCD_Test+0x190>)
 800078c:	2201      	movs	r2, #1
 800078e:	735a      	strb	r2, [r3, #13]
	#else
	error "Unknown Screen"
	
	#endif

	ST7735_RegisterBusIO(&st7735_pObj, &st7735_pIO);
 8000790:	495e      	ldr	r1, [pc, #376]	@ (800090c <LCD_Test+0x194>)
 8000792:	485f      	ldr	r0, [pc, #380]	@ (8000910 <LCD_Test+0x198>)
 8000794:	f000 fd54 	bl	8001240 <ST7735_RegisterBusIO>
	ST7735_LCD_Driver.Init(&st7735_pObj, ST7735_FORMAT_RBG565, &ST7735Ctx);
 8000798:	4b5e      	ldr	r3, [pc, #376]	@ (8000914 <LCD_Test+0x19c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a5a      	ldr	r2, [pc, #360]	@ (8000908 <LCD_Test+0x190>)
 800079e:	2105      	movs	r1, #5
 80007a0:	485b      	ldr	r0, [pc, #364]	@ (8000910 <LCD_Test+0x198>)
 80007a2:	4798      	blx	r3
	ST7735_LCD_Driver.ReadID(&st7735_pObj, &st7735_id);
 80007a4:	4b5b      	ldr	r3, [pc, #364]	@ (8000914 <LCD_Test+0x19c>)
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	495b      	ldr	r1, [pc, #364]	@ (8000918 <LCD_Test+0x1a0>)
 80007aa:	4859      	ldr	r0, [pc, #356]	@ (8000910 <LCD_Test+0x198>)
 80007ac:	4798      	blx	r3

	LCD_SetBrightness(0);
 80007ae:	2000      	movs	r0, #0
 80007b0:	f000 f8be 	bl	8000930 <LCD_SetBrightness>

#ifdef TFT96
	extern unsigned char WeActStudiologo_160_80[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj, 0, 0, WeActStudiologo_160_80);
 80007b4:	4b57      	ldr	r3, [pc, #348]	@ (8000914 <LCD_Test+0x19c>)
 80007b6:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80007b8:	4b58      	ldr	r3, [pc, #352]	@ (800091c <LCD_Test+0x1a4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	4854      	ldr	r0, [pc, #336]	@ (8000910 <LCD_Test+0x198>)
 80007c0:	47a0      	blx	r4
#elif TFT18
	extern unsigned char WeActStudiologo_128_160[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_128_160);	
	#endif

	uint32_t tick = get_tick();
 80007c2:	f002 f909 	bl	80029d8 <HAL_GetTick>
 80007c6:	6178      	str	r0, [r7, #20]
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 80007c8:	e06c      	b.n	80008a4 <LCD_Test+0x12c>
		delay_ms(10);
 80007ca:	200a      	movs	r0, #10
 80007cc:	f002 f910 	bl	80029f0 <HAL_Delay>

		if (get_tick() - tick <= 1000)
 80007d0:	f002 f902 	bl	80029d8 <HAL_GetTick>
 80007d4:	4602      	mov	r2, r0
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80007de:	d810      	bhi.n	8000802 <LCD_Test+0x8a>
			LCD_SetBrightness((get_tick() - tick) * 300 / 1000);
 80007e0:	f002 f8fa 	bl	80029d8 <HAL_GetTick>
 80007e4:	4602      	mov	r2, r0
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	1ad3      	subs	r3, r2, r3
 80007ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80007ee:	fb02 f303 	mul.w	r3, r2, r3
 80007f2:	4a4b      	ldr	r2, [pc, #300]	@ (8000920 <LCD_Test+0x1a8>)
 80007f4:	fba2 2303 	umull	r2, r3, r2, r3
 80007f8:	099b      	lsrs	r3, r3, #6
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 f898 	bl	8000930 <LCD_SetBrightness>
 8000800:	e050      	b.n	80008a4 <LCD_Test+0x12c>
		else if (get_tick() - tick <= 3000) {
 8000802:	f002 f8e9 	bl	80029d8 <HAL_GetTick>
 8000806:	4602      	mov	r2, r0
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000810:	4293      	cmp	r3, r2
 8000812:	d83e      	bhi.n	8000892 <LCD_Test+0x11a>
			sprintf((char*) &text, "%03d", (int)((get_tick() - tick - 1000) / 10));
 8000814:	f002 f8e0 	bl	80029d8 <HAL_GetTick>
 8000818:	4602      	mov	r2, r0
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000822:	4a40      	ldr	r2, [pc, #256]	@ (8000924 <LCD_Test+0x1ac>)
 8000824:	fba2 2303 	umull	r2, r3, r2, r3
 8000828:	08db      	lsrs	r3, r3, #3
 800082a:	461a      	mov	r2, r3
 800082c:	463b      	mov	r3, r7
 800082e:	493e      	ldr	r1, [pc, #248]	@ (8000928 <LCD_Test+0x1b0>)
 8000830:	4618      	mov	r0, r3
 8000832:	f013 f817 	bl	8013864 <siprintf>
			LCD_ShowString(ST7735Ctx.Width - 30, 1, ST7735Ctx.Width, 16, 16,
 8000836:	4b34      	ldr	r3, [pc, #208]	@ (8000908 <LCD_Test+0x190>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	b29b      	uxth	r3, r3
 800083c:	3b1e      	subs	r3, #30
 800083e:	b298      	uxth	r0, r3
 8000840:	4b31      	ldr	r3, [pc, #196]	@ (8000908 <LCD_Test+0x190>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	b29a      	uxth	r2, r3
 8000846:	463b      	mov	r3, r7
 8000848:	9301      	str	r3, [sp, #4]
 800084a:	2310      	movs	r3, #16
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	2310      	movs	r3, #16
 8000850:	2101      	movs	r1, #1
 8000852:	f000 fb15 	bl	8000e80 <LCD_ShowString>
					text);
			ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, ST7735Ctx.Height - 3,
 8000856:	4b2f      	ldr	r3, [pc, #188]	@ (8000914 <LCD_Test+0x19c>)
 8000858:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 800085a:	4b2b      	ldr	r3, [pc, #172]	@ (8000908 <LCD_Test+0x190>)
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	1edd      	subs	r5, r3, #3
					(get_tick() - tick - 1000) * ST7735Ctx.Width / 2000, 3,
 8000860:	f002 f8ba 	bl	80029d8 <HAL_GetTick>
 8000864:	4602      	mov	r2, r0
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800086e:	4a26      	ldr	r2, [pc, #152]	@ (8000908 <LCD_Test+0x190>)
 8000870:	6812      	ldr	r2, [r2, #0]
 8000872:	fb02 f303 	mul.w	r3, r2, r3
			ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, ST7735Ctx.Height - 3,
 8000876:	4a2a      	ldr	r2, [pc, #168]	@ (8000920 <LCD_Test+0x1a8>)
 8000878:	fba2 2303 	umull	r2, r3, r2, r3
 800087c:	09db      	lsrs	r3, r3, #7
 800087e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000882:	9201      	str	r2, [sp, #4]
 8000884:	2203      	movs	r2, #3
 8000886:	9200      	str	r2, [sp, #0]
 8000888:	462a      	mov	r2, r5
 800088a:	2100      	movs	r1, #0
 800088c:	4820      	ldr	r0, [pc, #128]	@ (8000910 <LCD_Test+0x198>)
 800088e:	47a0      	blx	r4
 8000890:	e008      	b.n	80008a4 <LCD_Test+0x12c>
					0xFFFF);
		} else if (get_tick() - tick > 3000)
 8000892:	f002 f8a1 	bl	80029d8 <HAL_GetTick>
 8000896:	4602      	mov	r2, r0
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	1ad3      	subs	r3, r2, r3
 800089c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d808      	bhi.n	80008b6 <LCD_Test+0x13e>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 80008a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008a8:	4820      	ldr	r0, [pc, #128]	@ (800092c <LCD_Test+0x1b4>)
 80008aa:	f004 f965 	bl	8004b78 <HAL_GPIO_ReadPin>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d18a      	bne.n	80007ca <LCD_Test+0x52>
 80008b4:	e004      	b.n	80008c0 <LCD_Test+0x148>
			break;
 80008b6:	bf00      	nop
	}
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET) {
 80008b8:	e002      	b.n	80008c0 <LCD_Test+0x148>
		delay_ms(10);
 80008ba:	200a      	movs	r0, #10
 80008bc:	f002 f898 	bl	80029f0 <HAL_Delay>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET) {
 80008c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008c4:	4819      	ldr	r0, [pc, #100]	@ (800092c <LCD_Test+0x1b4>)
 80008c6:	f004 f957 	bl	8004b78 <HAL_GPIO_ReadPin>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d0f4      	beq.n	80008ba <LCD_Test+0x142>
	}
	LCD_Light(0, 300);
 80008d0:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80008d4:	2000      	movs	r0, #0
 80008d6:	f000 f847 	bl	8000968 <LCD_Light>

	ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,
 80008da:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <LCD_Test+0x19c>)
 80008dc:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 80008de:	4b0a      	ldr	r3, [pc, #40]	@ (8000908 <LCD_Test+0x190>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <LCD_Test+0x190>)
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	2100      	movs	r1, #0
 80008e8:	9101      	str	r1, [sp, #4]
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	4613      	mov	r3, r2
 80008ee:	2200      	movs	r2, #0
 80008f0:	2100      	movs	r1, #0
 80008f2:	4807      	ldr	r0, [pc, #28]	@ (8000910 <LCD_Test+0x198>)
 80008f4:	47a0      	blx	r4
//	sprintf((char *)&text, "STM32H7xx 0x%x", HAL_GetDEVID());
//	LCD_ShowString(4, 20, ST7735Ctx.Width, 16, 16, text);
//	sprintf((char *)&text, "LCD ID:0x%x", st7735_id);
//	LCD_ShowString(4, 36, ST7735Ctx.Width, 16, 16, text);

	LCD_Light(100, 300);
 80008f6:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80008fa:	2064      	movs	r0, #100	@ 0x64
 80008fc:	f000 f834 	bl	8000968 <LCD_Light>
}
 8000900:	bf00      	nop
 8000902:	3718      	adds	r7, #24
 8000904:	46bd      	mov	sp, r7
 8000906:	bdb0      	pop	{r4, r5, r7, pc}
 8000908:	240005b4 	.word	0x240005b4
 800090c:	24000000 	.word	0x24000000
 8000910:	24000574 	.word	0x24000574
 8000914:	24000024 	.word	0x24000024
 8000918:	240005ac 	.word	0x240005ac
 800091c:	08017c7c 	.word	0x08017c7c
 8000920:	10624dd3 	.word	0x10624dd3
 8000924:	cccccccd 	.word	0xcccccccd
 8000928:	08016fc0 	.word	0x08016fc0
 800092c:	58020800 	.word	0x58020800

08000930 <LCD_SetBrightness>:

void LCD_SetBrightness(uint32_t Brightness) {
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 8000938:	4b04      	ldr	r3, [pc, #16]	@ (800094c <LCD_SetBrightness+0x1c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	24001034 	.word	0x24001034

08000950 <LCD_GetBrightness>:

uint32_t LCD_GetBrightness(void) {
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
	return __HAL_TIM_GetCompare(LCD_Brightness_timer, LCD_Brightness_channel);
 8000954:	4b03      	ldr	r3, [pc, #12]	@ (8000964 <LCD_GetBrightness+0x14>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 800095a:	4618      	mov	r0, r3
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	24001034 	.word	0x24001034

08000968 <LCD_Light>:

// ��Ļ�𽥱������߱䰵
// Brightness_Dis: Ŀ��ֵ
// time: �ﵽĿ��ֵ��ʱ��,��λ: ms
void LCD_Light(uint32_t Brightness_Dis, uint32_t time) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	@ 0x28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
	uint32_t Brightness_Now;
	uint32_t time_now;
	float temp1, temp2;
	float k, set;

	Brightness_Now = LCD_GetBrightness();
 8000972:	f7ff ffed 	bl	8000950 <LCD_GetBrightness>
 8000976:	6278      	str	r0, [r7, #36]	@ 0x24
	time_now = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
	if (Brightness_Now == Brightness_Dis)
 800097c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	429a      	cmp	r2, r3
 8000982:	d05e      	beq.n	8000a42 <LCD_Light+0xda>
		return;

	if (time == time_now)
 8000984:	683a      	ldr	r2, [r7, #0]
 8000986:	6a3b      	ldr	r3, [r7, #32]
 8000988:	429a      	cmp	r2, r3
 800098a:	d05c      	beq.n	8000a46 <LCD_Light+0xde>
		return;

	temp1 = Brightness_Now;
 800098c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800098e:	ee07 3a90 	vmov	s15, r3
 8000992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000996:	edc7 7a07 	vstr	s15, [r7, #28]
	temp1 = temp1 - Brightness_Dis;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	ee07 3a90 	vmov	s15, r3
 80009a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009a4:	ed97 7a07 	vldr	s14, [r7, #28]
 80009a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009ac:	edc7 7a07 	vstr	s15, [r7, #28]
	temp2 = time_now;
 80009b0:	6a3b      	ldr	r3, [r7, #32]
 80009b2:	ee07 3a90 	vmov	s15, r3
 80009b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009ba:	edc7 7a06 	vstr	s15, [r7, #24]
	temp2 = temp2 - time;
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	ee07 3a90 	vmov	s15, r3
 80009c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009c8:	ed97 7a06 	vldr	s14, [r7, #24]
 80009cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009d0:	edc7 7a06 	vstr	s15, [r7, #24]

	k = temp1 / temp2;
 80009d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80009d8:	ed97 7a06 	vldr	s14, [r7, #24]
 80009dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009e0:	edc7 7a05 	vstr	s15, [r7, #20]

	uint32_t tick = get_tick();
 80009e4:	f001 fff8 	bl	80029d8 <HAL_GetTick>
 80009e8:	6138      	str	r0, [r7, #16]
	while (1) {
		delay_ms(1);
 80009ea:	2001      	movs	r0, #1
 80009ec:	f002 f800 	bl	80029f0 <HAL_Delay>

		time_now = get_tick() - tick;
 80009f0:	f001 fff2 	bl	80029d8 <HAL_GetTick>
 80009f4:	4602      	mov	r2, r0
 80009f6:	693b      	ldr	r3, [r7, #16]
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	623b      	str	r3, [r7, #32]

		temp2 = time_now - 0;
 80009fc:	6a3b      	ldr	r3, [r7, #32]
 80009fe:	ee07 3a90 	vmov	s15, r3
 8000a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a06:	edc7 7a06 	vstr	s15, [r7, #24]

		set = Brightness_Now + temp2 * k;
 8000a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a0c:	ee07 3a90 	vmov	s15, r3
 8000a10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a14:	edd7 6a06 	vldr	s13, [r7, #24]
 8000a18:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a24:	edc7 7a03 	vstr	s15, [r7, #12]

		LCD_SetBrightness((uint32_t) set);
 8000a28:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a30:	ee17 0a90 	vmov	r0, s15
 8000a34:	f7ff ff7c 	bl	8000930 <LCD_SetBrightness>

		if (time_now >= time)
 8000a38:	6a3a      	ldr	r2, [r7, #32]
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d204      	bcs.n	8000a4a <LCD_Light+0xe2>
		delay_ms(1);
 8000a40:	e7d3      	b.n	80009ea <LCD_Light+0x82>
		return;
 8000a42:	bf00      	nop
 8000a44:	e002      	b.n	8000a4c <LCD_Light+0xe4>
		return;
 8000a46:	bf00      	nop
 8000a48:	e000      	b.n	8000a4c <LCD_Light+0xe4>
			break;
 8000a4a:	bf00      	nop

	}
}
 8000a4c:	3728      	adds	r7, #40	@ 0x28
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <LCD_ShowChar>:
//num:Ҫ��ʾ���ַ�:" "--->"~"
//size:�����С 12/16
//mode:���ӷ�ʽ(1)���Ƿǵ��ӷ�ʽ(0)  

void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 8000a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a58:	b097      	sub	sp, #92	@ 0x5c
 8000a5a:	af02      	add	r7, sp, #8
 8000a5c:	461e      	mov	r6, r3
 8000a5e:	4603      	mov	r3, r0
 8000a60:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000a62:	460b      	mov	r3, r1
 8000a64:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8000a66:	4613      	mov	r3, r2
 8000a68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8000a6c:	4633      	mov	r3, r6
 8000a6e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8000a72:	466b      	mov	r3, sp
 8000a74:	607b      	str	r3, [r7, #4]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 8000a76:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000a78:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
	uint16_t x0 = x;
 8000a7c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000a7e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	uint16_t colortemp = POINT_COLOR;
 8000a82:	4bb0      	ldr	r3, [pc, #704]	@ (8000d44 <LCD_ShowChar+0x2f0>)
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	uint32_t h, w;

	uint16_t write[size][size == 12 ? 6 : 8];
 8000a8a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000a8e:	2b0c      	cmp	r3, #12
 8000a90:	d101      	bne.n	8000a96 <LCD_ShowChar+0x42>
 8000a92:	2106      	movs	r1, #6
 8000a94:	e000      	b.n	8000a98 <LCD_ShowChar+0x44>
 8000a96:	2108      	movs	r1, #8
 8000a98:	f897 002a 	ldrb.w	r0, [r7, #42]	@ 0x2a
 8000a9c:	1e4b      	subs	r3, r1, #1
 8000a9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8000aa0:	460a      	mov	r2, r1
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	4692      	mov	sl, r2
 8000aa6:	469b      	mov	fp, r3
 8000aa8:	f04f 0200 	mov.w	r2, #0
 8000aac:	f04f 0300 	mov.w	r3, #0
 8000ab0:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8000ab4:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8000ab8:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8000abc:	460b      	mov	r3, r1
 8000abe:	005e      	lsls	r6, r3, #1
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000ac6:	460a      	mov	r2, r1
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61ba      	str	r2, [r7, #24]
 8000acc:	61fb      	str	r3, [r7, #28]
 8000ace:	b2c3      	uxtb	r3, r0
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	623b      	str	r3, [r7, #32]
 8000ad4:	627a      	str	r2, [r7, #36]	@ 0x24
 8000ad6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8000ada:	465b      	mov	r3, fp
 8000adc:	6a3a      	ldr	r2, [r7, #32]
 8000ade:	fb02 fc03 	mul.w	ip, r2, r3
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae4:	4652      	mov	r2, sl
 8000ae6:	fb02 f303 	mul.w	r3, r2, r3
 8000aea:	449c      	add	ip, r3
 8000aec:	4652      	mov	r2, sl
 8000aee:	6a3b      	ldr	r3, [r7, #32]
 8000af0:	fba2 8903 	umull	r8, r9, r2, r3
 8000af4:	eb0c 0309 	add.w	r3, ip, r9
 8000af8:	4699      	mov	r9, r3
 8000afa:	f04f 0200 	mov.w	r2, #0
 8000afe:	f04f 0300 	mov.w	r3, #0
 8000b02:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000b06:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000b0a:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000b0e:	460a      	mov	r2, r1
 8000b10:	2300      	movs	r3, #0
 8000b12:	613a      	str	r2, [r7, #16]
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	b2c3      	uxtb	r3, r0
 8000b18:	2200      	movs	r2, #0
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	60fa      	str	r2, [r7, #12]
 8000b1e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000b22:	464b      	mov	r3, r9
 8000b24:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8000b28:	4652      	mov	r2, sl
 8000b2a:	fb02 fc03 	mul.w	ip, r2, r3
 8000b2e:	465b      	mov	r3, fp
 8000b30:	4642      	mov	r2, r8
 8000b32:	fb02 f303 	mul.w	r3, r2, r3
 8000b36:	449c      	add	ip, r3
 8000b38:	4642      	mov	r2, r8
 8000b3a:	4653      	mov	r3, sl
 8000b3c:	fba2 4503 	umull	r4, r5, r2, r3
 8000b40:	eb0c 0305 	add.w	r3, ip, r5
 8000b44:	461d      	mov	r5, r3
 8000b46:	f04f 0200 	mov.w	r2, #0
 8000b4a:	f04f 0300 	mov.w	r3, #0
 8000b4e:	012b      	lsls	r3, r5, #4
 8000b50:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000b54:	0122      	lsls	r2, r4, #4
 8000b56:	460b      	mov	r3, r1
 8000b58:	4602      	mov	r2, r0
 8000b5a:	fb02 f303 	mul.w	r3, r2, r3
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	3307      	adds	r3, #7
 8000b62:	08db      	lsrs	r3, r3, #3
 8000b64:	00db      	lsls	r3, r3, #3
 8000b66:	ebad 0d03 	sub.w	sp, sp, r3
 8000b6a:	ab02      	add	r3, sp, #8
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	085b      	lsrs	r3, r3, #1
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint16_t count;

	ST7735_GetXSize(&st7735_pObj, &w);
 8000b74:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4873      	ldr	r0, [pc, #460]	@ (8000d48 <LCD_ShowChar+0x2f4>)
 8000b7c:	f001 fcca 	bl	8002514 <ST7735_GetXSize>
	ST7735_GetYSize(&st7735_pObj, &h);
 8000b80:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000b84:	4619      	mov	r1, r3
 8000b86:	4870      	ldr	r0, [pc, #448]	@ (8000d48 <LCD_ShowChar+0x2f4>)
 8000b88:	f001 fcd6 	bl	8002538 <ST7735_GetYSize>

	//���ô���		   
	num = num - ' ';  //�õ�ƫ�ƺ��ֵ
 8000b8c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000b90:	3b20      	subs	r3, #32
 8000b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	count = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

	if (!mode) //�ǵ��ӷ�ʽ
 8000b9c:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	f040 80a8 	bne.w	8000cf6 <LCD_ShowChar+0x2a2>
	{
		for (t = 0; t < size; t++) {
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8000bac:	e09b      	b.n	8000ce6 <LCD_ShowChar+0x292>
			if (size == 12)
 8000bae:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000bb2:	2b0c      	cmp	r3, #12
 8000bb4:	d10e      	bne.n	8000bd4 <LCD_ShowChar+0x180>
				temp = asc2_1206[num][t];  //����1206����
 8000bb6:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8000bba:	f897 104d 	ldrb.w	r1, [r7, #77]	@ 0x4d
 8000bbe:	4863      	ldr	r0, [pc, #396]	@ (8000d4c <LCD_ShowChar+0x2f8>)
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	4413      	add	r3, r2
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	4403      	add	r3, r0
 8000bca:	440b      	add	r3, r1
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8000bd2:	e00a      	b.n	8000bea <LCD_ShowChar+0x196>
			else
				temp = asc2_1608[num][t];		 //����1608����
 8000bd4:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8000bd8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000bdc:	495c      	ldr	r1, [pc, #368]	@ (8000d50 <LCD_ShowChar+0x2fc>)
 8000bde:	0112      	lsls	r2, r2, #4
 8000be0:	440a      	add	r2, r1
 8000be2:	4413      	add	r3, r2
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

			for (t1 = 0; t1 < 8; t1++) {
 8000bea:	2300      	movs	r3, #0
 8000bec:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8000bf0:	e06e      	b.n	8000cd0 <LCD_ShowChar+0x27c>
				if (temp & 0x80)
 8000bf2:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	da0e      	bge.n	8000c18 <LCD_ShowChar+0x1c4>
					POINT_COLOR = (colortemp & 0xFF) << 8 | colortemp >> 8;
 8000bfa:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8000bfe:	021b      	lsls	r3, r3, #8
 8000c00:	b21a      	sxth	r2, r3
 8000c02:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000c06:	0a1b      	lsrs	r3, r3, #8
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	b21b      	sxth	r3, r3
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	b21b      	sxth	r3, r3
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	4b4c      	ldr	r3, [pc, #304]	@ (8000d44 <LCD_ShowChar+0x2f0>)
 8000c14:	801a      	strh	r2, [r3, #0]
 8000c16:	e00e      	b.n	8000c36 <LCD_ShowChar+0x1e2>
				else
					POINT_COLOR = (BACK_COLOR & 0xFF) << 8 | BACK_COLOR >> 8;
 8000c18:	4b4e      	ldr	r3, [pc, #312]	@ (8000d54 <LCD_ShowChar+0x300>)
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	b21b      	sxth	r3, r3
 8000c1e:	021b      	lsls	r3, r3, #8
 8000c20:	b21a      	sxth	r2, r3
 8000c22:	4b4c      	ldr	r3, [pc, #304]	@ (8000d54 <LCD_ShowChar+0x300>)
 8000c24:	881b      	ldrh	r3, [r3, #0]
 8000c26:	0a1b      	lsrs	r3, r3, #8
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	b21b      	sxth	r3, r3
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	b21b      	sxth	r3, r3
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	4b44      	ldr	r3, [pc, #272]	@ (8000d44 <LCD_ShowChar+0x2f0>)
 8000c34:	801a      	strh	r2, [r3, #0]

				write[count][t / 2] = POINT_COLOR;
 8000c36:	0872      	lsrs	r2, r6, #1
 8000c38:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8000c3c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000c40:	085b      	lsrs	r3, r3, #1
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	461c      	mov	r4, r3
 8000c46:	4b3f      	ldr	r3, [pc, #252]	@ (8000d44 <LCD_ShowChar+0x2f0>)
 8000c48:	8818      	ldrh	r0, [r3, #0]
 8000c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c4c:	fb01 f202 	mul.w	r2, r1, r2
 8000c50:	4422      	add	r2, r4
 8000c52:	4601      	mov	r1, r0
 8000c54:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count++;
 8000c58:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				if (count >= size)
 8000c62:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d302      	bcc.n	8000c76 <LCD_ShowChar+0x222>
					count = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

				temp <<= 1;
 8000c76:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
				y++;
 8000c80:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000c82:	3301      	adds	r3, #1
 8000c84:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				if (y > h) {
 8000c86:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d904      	bls.n	8000c98 <LCD_ShowChar+0x244>
					POINT_COLOR = colortemp;
 8000c8e:	4a2d      	ldr	r2, [pc, #180]	@ (8000d44 <LCD_ShowChar+0x2f0>)
 8000c90:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000c94:	8013      	strh	r3, [r2, #0]
					return;
 8000c96:	e0e8      	b.n	8000e6a <LCD_ShowChar+0x416>
				}		 //��������
				if ((y - y0) == size) {
 8000c98:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000c9a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000c9e:	1ad2      	subs	r2, r2, r3
 8000ca0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d10e      	bne.n	8000cc6 <LCD_ShowChar+0x272>
					y = y0;
 8000ca8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000cac:	85bb      	strh	r3, [r7, #44]	@ 0x2c
					x++;
 8000cae:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
					if (x > w) {
 8000cb4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d90e      	bls.n	8000cda <LCD_ShowChar+0x286>
						POINT_COLOR = colortemp;
 8000cbc:	4a21      	ldr	r2, [pc, #132]	@ (8000d44 <LCD_ShowChar+0x2f0>)
 8000cbe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000cc2:	8013      	strh	r3, [r2, #0]
						return;
 8000cc4:	e0d1      	b.n	8000e6a <LCD_ShowChar+0x416>
			for (t1 = 0; t1 < 8; t1++) {
 8000cc6:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000cca:	3301      	adds	r3, #1
 8000ccc:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8000cd0:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000cd4:	2b07      	cmp	r3, #7
 8000cd6:	d98c      	bls.n	8000bf2 <LCD_ShowChar+0x19e>
 8000cd8:	e000      	b.n	8000cdc <LCD_ShowChar+0x288>
					}		 //��������
					break;
 8000cda:	bf00      	nop
		for (t = 0; t < size; t++) {
 8000cdc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8000ce6:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8000cea:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f4ff af5d 	bcc.w	8000bae <LCD_ShowChar+0x15a>
 8000cf4:	e09e      	b.n	8000e34 <LCD_ShowChar+0x3e0>
				}
			}
		}
	} else		 //���ӷ�ʽ
	{
		for (t = 0; t < size; t++) {
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8000cfc:	e093      	b.n	8000e26 <LCD_ShowChar+0x3d2>
			if (size == 12)
 8000cfe:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000d02:	2b0c      	cmp	r3, #12
 8000d04:	d10e      	bne.n	8000d24 <LCD_ShowChar+0x2d0>
				temp = asc2_1206[num][t];  //����1206����
 8000d06:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8000d0a:	f897 104d 	ldrb.w	r1, [r7, #77]	@ 0x4d
 8000d0e:	480f      	ldr	r0, [pc, #60]	@ (8000d4c <LCD_ShowChar+0x2f8>)
 8000d10:	4613      	mov	r3, r2
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	4413      	add	r3, r2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	4403      	add	r3, r0
 8000d1a:	440b      	add	r3, r1
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8000d22:	e00a      	b.n	8000d3a <LCD_ShowChar+0x2e6>
			else
				temp = asc2_1608[num][t];		 //����1608����
 8000d24:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8000d28:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000d2c:	4908      	ldr	r1, [pc, #32]	@ (8000d50 <LCD_ShowChar+0x2fc>)
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	440a      	add	r2, r1
 8000d32:	4413      	add	r3, r2
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			for (t1 = 0; t1 < 8; t1++) {
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8000d40:	e066      	b.n	8000e10 <LCD_ShowChar+0x3bc>
 8000d42:	bf00      	nop
 8000d44:	24000020 	.word	0x24000020
 8000d48:	24000574 	.word	0x24000574
 8000d4c:	08017218 	.word	0x08017218
 8000d50:	0801768c 	.word	0x0801768c
 8000d54:	240005b0 	.word	0x240005b0
				if (temp & 0x80)
 8000d58:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	da1b      	bge.n	8000d98 <LCD_ShowChar+0x344>
					write[count][t / 2] = (POINT_COLOR & 0xFF) << 8
							| POINT_COLOR >> 8;
 8000d60:	4b45      	ldr	r3, [pc, #276]	@ (8000e78 <LCD_ShowChar+0x424>)
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	b21b      	sxth	r3, r3
 8000d66:	021b      	lsls	r3, r3, #8
 8000d68:	b21a      	sxth	r2, r3
 8000d6a:	4b43      	ldr	r3, [pc, #268]	@ (8000e78 <LCD_ShowChar+0x424>)
 8000d6c:	881b      	ldrh	r3, [r3, #0]
 8000d6e:	0a1b      	lsrs	r3, r3, #8
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	b21b      	sxth	r3, r3
 8000d74:	4313      	orrs	r3, r2
 8000d76:	b218      	sxth	r0, r3
					write[count][t / 2] = (POINT_COLOR & 0xFF) << 8
 8000d78:	0872      	lsrs	r2, r6, #1
 8000d7a:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8000d7e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000d82:	085b      	lsrs	r3, r3, #1
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	461c      	mov	r4, r3
							| POINT_COLOR >> 8;
 8000d88:	b280      	uxth	r0, r0
					write[count][t / 2] = (POINT_COLOR & 0xFF) << 8
 8000d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d8c:	fb01 f202 	mul.w	r2, r1, r2
 8000d90:	4422      	add	r2, r4
 8000d92:	4601      	mov	r1, r0
 8000d94:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count++;
 8000d98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				if (count >= size)
 8000da2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d302      	bcc.n	8000db6 <LCD_ShowChar+0x362>
					count = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

				temp <<= 1;
 8000db6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
				y++;
 8000dc0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				if (y >= h) {
 8000dc6:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d304      	bcc.n	8000dd8 <LCD_ShowChar+0x384>
					POINT_COLOR = colortemp;
 8000dce:	4a2a      	ldr	r2, [pc, #168]	@ (8000e78 <LCD_ShowChar+0x424>)
 8000dd0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000dd4:	8013      	strh	r3, [r2, #0]
					return;
 8000dd6:	e048      	b.n	8000e6a <LCD_ShowChar+0x416>
				}		 //��������
				if ((y - y0) == size) {
 8000dd8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000dda:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000dde:	1ad2      	subs	r2, r2, r3
 8000de0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d10e      	bne.n	8000e06 <LCD_ShowChar+0x3b2>
					y = y0;
 8000de8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000dec:	85bb      	strh	r3, [r7, #44]	@ 0x2c
					x++;
 8000dee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000df0:	3301      	adds	r3, #1
 8000df2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
					if (x >= w) {
 8000df4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d30e      	bcc.n	8000e1a <LCD_ShowChar+0x3c6>
						POINT_COLOR = colortemp;
 8000dfc:	4a1e      	ldr	r2, [pc, #120]	@ (8000e78 <LCD_ShowChar+0x424>)
 8000dfe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000e02:	8013      	strh	r3, [r2, #0]
						return;
 8000e04:	e031      	b.n	8000e6a <LCD_ShowChar+0x416>
			for (t1 = 0; t1 < 8; t1++) {
 8000e06:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8000e10:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000e14:	2b07      	cmp	r3, #7
 8000e16:	d99f      	bls.n	8000d58 <LCD_ShowChar+0x304>
 8000e18:	e000      	b.n	8000e1c <LCD_ShowChar+0x3c8>
					}		 //��������
					break;
 8000e1a:	bf00      	nop
		for (t = 0; t < size; t++) {
 8000e1c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000e20:	3301      	adds	r3, #1
 8000e22:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8000e26:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8000e2a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	f4ff af65 	bcc.w	8000cfe <LCD_ShowChar+0x2aa>
				}
			}
		}
	}
	ST7735_FillRGBRect(&st7735_pObj, x0, y0, (uint8_t*) &write,
 8000e34:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8000e38:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 8000e3c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000e40:	2b0c      	cmp	r3, #12
 8000e42:	d101      	bne.n	8000e48 <LCD_ShowChar+0x3f4>
 8000e44:	2306      	movs	r3, #6
 8000e46:	e000      	b.n	8000e4a <LCD_ShowChar+0x3f6>
 8000e48:	2308      	movs	r3, #8
 8000e4a:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8000e4e:	9201      	str	r2, [sp, #4]
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e54:	4602      	mov	r2, r0
 8000e56:	4809      	ldr	r0, [pc, #36]	@ (8000e7c <LCD_ShowChar+0x428>)
 8000e58:	f001 f9ae 	bl	80021b8 <ST7735_FillRGBRect>
			size == 12 ? 6 : 8, size);
	POINT_COLOR = colortemp;
 8000e5c:	4a06      	ldr	r2, [pc, #24]	@ (8000e78 <LCD_ShowChar+0x424>)
 8000e5e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000e62:	8013      	strh	r3, [r2, #0]
 8000e64:	f8d7 d004 	ldr.w	sp, [r7, #4]
 8000e68:	e001      	b.n	8000e6e <LCD_ShowChar+0x41a>
					return;
 8000e6a:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
 8000e6e:	3754      	adds	r7, #84	@ 0x54
 8000e70:	46bd      	mov	sp, r7
 8000e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e76:	bf00      	nop
 8000e78:	24000020 	.word	0x24000020
 8000e7c:	24000574 	.word	0x24000574

08000e80 <LCD_ShowString>:
//x,y:�������
//width,height:�����С  
//size:�����С
//*p:�ַ�����ʼ��ַ
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size, uint8_t *p) {
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b087      	sub	sp, #28
 8000e84:	af02      	add	r7, sp, #8
 8000e86:	4604      	mov	r4, r0
 8000e88:	4608      	mov	r0, r1
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4623      	mov	r3, r4
 8000e90:	80fb      	strh	r3, [r7, #6]
 8000e92:	4603      	mov	r3, r0
 8000e94:	80bb      	strh	r3, [r7, #4]
 8000e96:	460b      	mov	r3, r1
 8000e98:	807b      	strh	r3, [r7, #2]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 8000e9e:	88fb      	ldrh	r3, [r7, #6]
 8000ea0:	73fb      	strb	r3, [r7, #15]
	width += x;
 8000ea2:	887a      	ldrh	r2, [r7, #2]
 8000ea4:	88fb      	ldrh	r3, [r7, #6]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	807b      	strh	r3, [r7, #2]
	height += y;
 8000eaa:	883a      	ldrh	r2, [r7, #0]
 8000eac:	88bb      	ldrh	r3, [r7, #4]
 8000eae:	4413      	add	r3, r2
 8000eb0:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' '))		 //�ж��ǲ��ǷǷ��ַ�!
 8000eb2:	e024      	b.n	8000efe <LCD_ShowString+0x7e>
	{
		if (x > width) {
 8000eb4:	88fa      	ldrh	r2, [r7, #6]
 8000eb6:	887b      	ldrh	r3, [r7, #2]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d907      	bls.n	8000ecc <LCD_ShowString+0x4c>
			x = x0;
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	80fb      	strh	r3, [r7, #6]
			y += size;
 8000ec0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	88bb      	ldrh	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	80bb      	strh	r3, [r7, #4]
		}
		if (y > height)
 8000ecc:	88ba      	ldrh	r2, [r7, #4]
 8000ece:	883b      	ldrh	r3, [r7, #0]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d81d      	bhi.n	8000f10 <LCD_ShowString+0x90>
			break;		 //�˳�
		LCD_ShowChar(x, y, *p, size, 0);
 8000ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed6:	781a      	ldrb	r2, [r3, #0]
 8000ed8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000edc:	88b9      	ldrh	r1, [r7, #4]
 8000ede:	88f8      	ldrh	r0, [r7, #6]
 8000ee0:	2400      	movs	r4, #0
 8000ee2:	9400      	str	r4, [sp, #0]
 8000ee4:	f7ff fdb6 	bl	8000a54 <LCD_ShowChar>
		x += size / 2;
 8000ee8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000eec:	085b      	lsrs	r3, r3, #1
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	88fb      	ldrh	r3, [r7, #6]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	80fb      	strh	r3, [r7, #6]
		p++;
 8000ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000efa:	3301      	adds	r3, #1
 8000efc:	627b      	str	r3, [r7, #36]	@ 0x24
	while ((*p <= '~') && (*p >= ' '))		 //�ж��ǲ��ǷǷ��ַ�!
 8000efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b7e      	cmp	r3, #126	@ 0x7e
 8000f04:	d805      	bhi.n	8000f12 <LCD_ShowString+0x92>
 8000f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b1f      	cmp	r3, #31
 8000f0c:	d8d2      	bhi.n	8000eb4 <LCD_ShowString+0x34>
	}
}
 8000f0e:	e000      	b.n	8000f12 <LCD_ShowString+0x92>
			break;		 //�˳�
 8000f10:	bf00      	nop
}
 8000f12:	bf00      	nop
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd90      	pop	{r4, r7, pc}
	...

08000f1c <lcd_init>:

static int32_t lcd_init(void) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
	int32_t result = ST7735_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
	HAL_TIMEx_PWMN_Start(LCD_Brightness_timer, LCD_Brightness_channel);
 8000f26:	2104      	movs	r1, #4
 8000f28:	4803      	ldr	r0, [pc, #12]	@ (8000f38 <lcd_init+0x1c>)
 8000f2a:	f00c fb59 	bl	800d5e0 <HAL_TIMEx_PWMN_Start>
	return result;
 8000f2e:	687b      	ldr	r3, [r7, #4]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	24001034 	.word	0x24001034

08000f3c <lcd_gettick>:

static int32_t lcd_gettick(void) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000f40:	f001 fd4a 	bl	80029d8 <HAL_GetTick>
 8000f44:	4603      	mov	r3, r0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <lcd_writereg>:

static int32_t lcd_writereg(uint8_t reg, uint8_t *pdata, uint32_t length) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
 8000f58:	73fb      	strb	r3, [r7, #15]
	int32_t result;
	LCD_CS_RESET;
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f60:	481d      	ldr	r0, [pc, #116]	@ (8000fd8 <lcd_writereg+0x8c>)
 8000f62:	f003 fe21 	bl	8004ba8 <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f6c:	481a      	ldr	r0, [pc, #104]	@ (8000fd8 <lcd_writereg+0x8c>)
 8000f6e:	f003 fe1b 	bl	8004ba8 <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(SPI_Drv, &reg, 1, 100);
 8000f72:	f107 010f 	add.w	r1, r7, #15
 8000f76:	2364      	movs	r3, #100	@ 0x64
 8000f78:	2201      	movs	r2, #1
 8000f7a:	4818      	ldr	r0, [pc, #96]	@ (8000fdc <lcd_writereg+0x90>)
 8000f7c:	f00a fd4e 	bl	800ba1c <HAL_SPI_Transmit>
 8000f80:	4603      	mov	r3, r0
 8000f82:	617b      	str	r3, [r7, #20]
	LCD_RS_SET;
 8000f84:	2201      	movs	r2, #1
 8000f86:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f8a:	4813      	ldr	r0, [pc, #76]	@ (8000fd8 <lcd_writereg+0x8c>)
 8000f8c:	f003 fe0c 	bl	8004ba8 <HAL_GPIO_WritePin>
	if (length > 0)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d00c      	beq.n	8000fb0 <lcd_writereg+0x64>
		result += HAL_SPI_Transmit(SPI_Drv, pdata, length, 500);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000f9e:	68b9      	ldr	r1, [r7, #8]
 8000fa0:	480e      	ldr	r0, [pc, #56]	@ (8000fdc <lcd_writereg+0x90>)
 8000fa2:	f00a fd3b 	bl	800ba1c <HAL_SPI_Transmit>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	461a      	mov	r2, r3
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	4413      	add	r3, r2
 8000fae:	617b      	str	r3, [r7, #20]
	LCD_CS_SET;
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fb6:	4808      	ldr	r0, [pc, #32]	@ (8000fd8 <lcd_writereg+0x8c>)
 8000fb8:	f003 fdf6 	bl	8004ba8 <HAL_GPIO_WritePin>
	if (result > 0) {
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	dd03      	ble.n	8000fca <lcd_writereg+0x7e>
		result = -1;
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	e001      	b.n	8000fce <lcd_writereg+0x82>
	} else {
		result = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
	}
	return result;
 8000fce:	697b      	ldr	r3, [r7, #20]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	58021000 	.word	0x58021000
 8000fdc:	24000fa8 	.word	0x24000fa8

08000fe0 <lcd_readreg>:

static int32_t lcd_readreg(uint8_t reg, uint8_t *pdata) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
	int32_t result;
	LCD_CS_RESET;
 8000fec:	2200      	movs	r2, #0
 8000fee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ff2:	481b      	ldr	r0, [pc, #108]	@ (8001060 <lcd_readreg+0x80>)
 8000ff4:	f003 fdd8 	bl	8004ba8 <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ffe:	4818      	ldr	r0, [pc, #96]	@ (8001060 <lcd_readreg+0x80>)
 8001000:	f003 fdd2 	bl	8004ba8 <HAL_GPIO_WritePin>

	result = HAL_SPI_Transmit(SPI_Drv, &reg, 1, 100);
 8001004:	1df9      	adds	r1, r7, #7
 8001006:	2364      	movs	r3, #100	@ 0x64
 8001008:	2201      	movs	r2, #1
 800100a:	4816      	ldr	r0, [pc, #88]	@ (8001064 <lcd_readreg+0x84>)
 800100c:	f00a fd06 	bl	800ba1c <HAL_SPI_Transmit>
 8001010:	4603      	mov	r3, r0
 8001012:	60fb      	str	r3, [r7, #12]
	LCD_RS_SET;
 8001014:	2201      	movs	r2, #1
 8001016:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800101a:	4811      	ldr	r0, [pc, #68]	@ (8001060 <lcd_readreg+0x80>)
 800101c:	f003 fdc4 	bl	8004ba8 <HAL_GPIO_WritePin>
	result += HAL_SPI_Receive(SPI_Drv, pdata, 1, 500);
 8001020:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001024:	2201      	movs	r2, #1
 8001026:	6839      	ldr	r1, [r7, #0]
 8001028:	480e      	ldr	r0, [pc, #56]	@ (8001064 <lcd_readreg+0x84>)
 800102a:	f00a fee5 	bl	800bdf8 <HAL_SPI_Receive>
 800102e:	4603      	mov	r3, r0
 8001030:	461a      	mov	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	4413      	add	r3, r2
 8001036:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8001038:	2201      	movs	r2, #1
 800103a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800103e:	4808      	ldr	r0, [pc, #32]	@ (8001060 <lcd_readreg+0x80>)
 8001040:	f003 fdb2 	bl	8004ba8 <HAL_GPIO_WritePin>
	if (result > 0) {
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	dd03      	ble.n	8001052 <lcd_readreg+0x72>
		result = -1;
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	e001      	b.n	8001056 <lcd_readreg+0x76>
	} else {
		result = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
	}
	return result;
 8001056:	68fb      	ldr	r3, [r7, #12]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	58021000 	.word	0x58021000
 8001064:	24000fa8 	.word	0x24000fa8

08001068 <lcd_senddata>:

static int32_t lcd_senddata(uint8_t *pdata, uint32_t length) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 8001072:	2200      	movs	r2, #0
 8001074:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001078:	480f      	ldr	r0, [pc, #60]	@ (80010b8 <lcd_senddata+0x50>)
 800107a:	f003 fd95 	bl	8004ba8 <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result = HAL_SPI_Transmit(SPI_Drv, pdata, length, 100);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	b29a      	uxth	r2, r3
 8001082:	2364      	movs	r3, #100	@ 0x64
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	480d      	ldr	r0, [pc, #52]	@ (80010bc <lcd_senddata+0x54>)
 8001088:	f00a fcc8 	bl	800ba1c <HAL_SPI_Transmit>
 800108c:	4603      	mov	r3, r0
 800108e:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8001090:	2201      	movs	r2, #1
 8001092:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001096:	4808      	ldr	r0, [pc, #32]	@ (80010b8 <lcd_senddata+0x50>)
 8001098:	f003 fd86 	bl	8004ba8 <HAL_GPIO_WritePin>
	if (result > 0) {
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	dd03      	ble.n	80010aa <lcd_senddata+0x42>
		result = -1;
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	e001      	b.n	80010ae <lcd_senddata+0x46>
	} else {
		result = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
	}
	return result;
 80010ae:	68fb      	ldr	r3, [r7, #12]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	58021000 	.word	0x58021000
 80010bc:	24000fa8 	.word	0x24000fa8

080010c0 <lcd_recvdata>:

static int32_t lcd_recvdata(uint8_t *pdata, uint32_t length) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 80010ca:	2200      	movs	r2, #0
 80010cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010d0:	4810      	ldr	r0, [pc, #64]	@ (8001114 <lcd_recvdata+0x54>)
 80010d2:	f003 fd69 	bl	8004ba8 <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result = HAL_SPI_Receive(SPI_Drv, pdata, length, 500);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	b29a      	uxth	r2, r3
 80010da:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	480d      	ldr	r0, [pc, #52]	@ (8001118 <lcd_recvdata+0x58>)
 80010e2:	f00a fe89 	bl	800bdf8 <HAL_SPI_Receive>
 80010e6:	4603      	mov	r3, r0
 80010e8:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 80010ea:	2201      	movs	r2, #1
 80010ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010f0:	4808      	ldr	r0, [pc, #32]	@ (8001114 <lcd_recvdata+0x54>)
 80010f2:	f003 fd59 	bl	8004ba8 <HAL_GPIO_WritePin>
	if (result > 0) {
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	dd03      	ble.n	8001104 <lcd_recvdata+0x44>
		result = -1;
 80010fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	e001      	b.n	8001108 <lcd_recvdata+0x48>
	} else {
		result = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
	}
	return result;
 8001108:	68fb      	ldr	r3, [r7, #12]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	58021000 	.word	0x58021000
 8001118:	24000fa8 	.word	0x24000fa8

0800111c <Custom_LCD_Printf>:

void Custom_LCD_Printf(int x, int y, const char *text, ...) {
 800111c:	b40c      	push	{r2, r3}
 800111e:	b580      	push	{r7, lr}
 8001120:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8001124:	af02      	add	r7, sp, #8
 8001126:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800112a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800112e:	6018      	str	r0, [r3, #0]
 8001130:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001134:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8001138:	6019      	str	r1, [r3, #0]
	char txt[512] = { 0 };
 800113a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800113e:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8001142:	4618      	mov	r0, r3
 8001144:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001148:	461a      	mov	r2, r3
 800114a:	2100      	movs	r1, #0
 800114c:	f012 fc10 	bl	8013970 <memset>
	va_list args;
	va_start(args, text);
 8001150:	f507 7207 	add.w	r2, r7, #540	@ 0x21c
 8001154:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001158:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800115c:	601a      	str	r2, [r3, #0]
	vsprintf(txt, text, args);
 800115e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001162:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001166:	f107 0010 	add.w	r0, r7, #16
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	f8d7 1218 	ldr.w	r1, [r7, #536]	@ 0x218
 8001170:	f012 fbf4 	bl	801395c <vsiprintf>
	va_end(args);

	LCD_ShowString(8 * x, 16 * y, ST7735Ctx.Width, 8, 16, (uint8_t*) (txt));
 8001174:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001178:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	b29b      	uxth	r3, r3
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	b298      	uxth	r0, r3
 8001184:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001188:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	b29b      	uxth	r3, r3
 8001190:	011b      	lsls	r3, r3, #4
 8001192:	b299      	uxth	r1, r3
 8001194:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <Custom_LCD_Printf+0xa0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	b29a      	uxth	r2, r3
 800119a:	f107 0310 	add.w	r3, r7, #16
 800119e:	9301      	str	r3, [sp, #4]
 80011a0:	2310      	movs	r3, #16
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2308      	movs	r3, #8
 80011a6:	f7ff fe6b 	bl	8000e80 <LCD_ShowString>
}
 80011aa:	bf00      	nop
 80011ac:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 80011b0:	46bd      	mov	sp, r7
 80011b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011b6:	b002      	add	sp, #8
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	240005b4 	.word	0x240005b4

080011c0 <Custom_LCD_Clear>:

void Custom_LCD_Clear() {
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af02      	add	r7, sp, #8
	ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,
 80011c6:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <Custom_LCD_Clear+0x2c>)
 80011c8:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 80011ca:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <Custom_LCD_Clear+0x30>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <Custom_LCD_Clear+0x30>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2100      	movs	r1, #0
 80011d4:	9101      	str	r1, [sp, #4]
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	4613      	mov	r3, r2
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	4805      	ldr	r0, [pc, #20]	@ (80011f4 <Custom_LCD_Clear+0x34>)
 80011e0:	47a0      	blx	r4
			ST7735Ctx.Height, BLACK);
}
 80011e2:	bf00      	nop
 80011e4:	3704      	adds	r7, #4
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd90      	pop	{r4, r7, pc}
 80011ea:	bf00      	nop
 80011ec:	24000024 	.word	0x24000024
 80011f0:	240005b4 	.word	0x240005b4
 80011f4:	24000574 	.word	0x24000574

080011f8 <Set_Color>:

void Set_Color(uint32_t cnt, uint32_t index) {
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
	if (cnt == index) {
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	429a      	cmp	r2, r3
 8001208:	d108      	bne.n	800121c <Set_Color+0x24>
		POINT_COLOR = WHITE;
 800120a:	4b0b      	ldr	r3, [pc, #44]	@ (8001238 <Set_Color+0x40>)
 800120c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001210:	801a      	strh	r2, [r3, #0]
		BACK_COLOR = 0X01B4;
 8001212:	4b0a      	ldr	r3, [pc, #40]	@ (800123c <Set_Color+0x44>)
 8001214:	f44f 72da 	mov.w	r2, #436	@ 0x1b4
 8001218:	801a      	strh	r2, [r3, #0]
	} else {
		POINT_COLOR = WHITE;
		BACK_COLOR = BLACK;
	}
}
 800121a:	e006      	b.n	800122a <Set_Color+0x32>
		POINT_COLOR = WHITE;
 800121c:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <Set_Color+0x40>)
 800121e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001222:	801a      	strh	r2, [r3, #0]
		BACK_COLOR = BLACK;
 8001224:	4b05      	ldr	r3, [pc, #20]	@ (800123c <Set_Color+0x44>)
 8001226:	2200      	movs	r2, #0
 8001228:	801a      	strh	r2, [r3, #0]
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	24000020 	.word	0x24000020
 800123c:	240005b0 	.word	0x240005b0

08001240 <ST7735_RegisterBusIO>:
 * @brief  Register component IO bus
 * @param  pObj Component object pointer
 * @param  pIO  Component IO structure pointer
 * @retval Component status
 */
int32_t ST7735_RegisterBusIO(ST7735_Object_t *pObj, ST7735_IO_t *pIO) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
	int32_t ret;

	if (pObj == NULL) {
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d103      	bne.n	8001258 <ST7735_RegisterBusIO+0x18>
		ret = ST7735_ERROR;
 8001250:	f04f 33ff 	mov.w	r3, #4294967295
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	e03a      	b.n	80012ce <ST7735_RegisterBusIO+0x8e>
	} else {
		pObj->IO.Init = pIO->Init;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	601a      	str	r2, [r3, #0]
		pObj->IO.DeInit = pIO->DeInit;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	605a      	str	r2, [r3, #4]
		pObj->IO.Address = pIO->Address;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	891a      	ldrh	r2, [r3, #8]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	811a      	strh	r2, [r3, #8]
		pObj->IO.WriteReg = pIO->WriteReg;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	68da      	ldr	r2, [r3, #12]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	60da      	str	r2, [r3, #12]
		pObj->IO.ReadReg = pIO->ReadReg;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	691a      	ldr	r2, [r3, #16]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	611a      	str	r2, [r3, #16]
		pObj->IO.SendData = pIO->SendData;
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	695a      	ldr	r2, [r3, #20]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	615a      	str	r2, [r3, #20]
		pObj->IO.RecvData = pIO->RecvData;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	699a      	ldr	r2, [r3, #24]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	619a      	str	r2, [r3, #24]
		pObj->IO.GetTick = pIO->GetTick;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	69da      	ldr	r2, [r3, #28]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	61da      	str	r2, [r3, #28]

		pObj->Ctx.ReadReg = ST7735_ReadRegWrap;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a0f      	ldr	r2, [pc, #60]	@ (80012d8 <ST7735_RegisterBusIO+0x98>)
 800129c:	625a      	str	r2, [r3, #36]	@ 0x24
		pObj->Ctx.WriteReg = ST7735_WriteRegWrap;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a0e      	ldr	r2, [pc, #56]	@ (80012dc <ST7735_RegisterBusIO+0x9c>)
 80012a2:	621a      	str	r2, [r3, #32]
		pObj->Ctx.SendData = ST7735_SendDataWrap;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a0e      	ldr	r2, [pc, #56]	@ (80012e0 <ST7735_RegisterBusIO+0xa0>)
 80012a8:	629a      	str	r2, [r3, #40]	@ 0x28
		pObj->Ctx.RecvData = ST7735_RecvDataWrap;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a0d      	ldr	r2, [pc, #52]	@ (80012e4 <ST7735_RegisterBusIO+0xa4>)
 80012ae:	62da      	str	r2, [r3, #44]	@ 0x2c
		pObj->Ctx.handle = pObj;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	631a      	str	r2, [r3, #48]	@ 0x30

		if (pObj->IO.Init != NULL) {
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d004      	beq.n	80012c8 <ST7735_RegisterBusIO+0x88>
			ret = pObj->IO.Init();
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4798      	blx	r3
 80012c4:	60f8      	str	r0, [r7, #12]
 80012c6:	e002      	b.n	80012ce <ST7735_RegisterBusIO+0x8e>
		} else {
			ret = ST7735_ERROR;
 80012c8:	f04f 33ff 	mov.w	r3, #4294967295
 80012cc:	60fb      	str	r3, [r7, #12]
		}
	}

	return ret;
 80012ce:	68fb      	ldr	r3, [r7, #12]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	08002765 	.word	0x08002765
 80012dc:	0800278d 	.word	0x0800278d
 80012e0:	080027b7 	.word	0x080027b7
 80012e4:	080027db 	.word	0x080027db

080012e8 <ST7735_Init>:
 * @param  ColorCoding RGB mode
 * @param  Orientation Display orientation
 * @retval Component status
 */
int32_t ST7735_Init(ST7735_Object_t *pObj, uint32_t ColorCoding,
		ST7735_Ctx_t *pDriver) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
	uint8_t tmp;
	int32_t ret;

	if (pObj == NULL) {
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d103      	bne.n	8001302 <ST7735_Init+0x1a>
		ret = ST7735_ERROR;
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	e3a6      	b.n	8001a50 <ST7735_Init+0x768>
	} else {
		/* Out of sleep mode, 0 args, delay 120ms */
		tmp = 0x00U;
 8001302:	2300      	movs	r3, #0
 8001304:	74fb      	strb	r3, [r7, #19]
		ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f103 0020 	add.w	r0, r3, #32
 800130c:	f107 0213 	add.w	r2, r7, #19
 8001310:	2300      	movs	r3, #0
 8001312:	2101      	movs	r1, #1
 8001314:	f001 faa0 	bl	8002858 <st7735_write_reg>
 8001318:	6178      	str	r0, [r7, #20]
		(void) ST7735_IO_Delay(pObj, 120);
 800131a:	2178      	movs	r1, #120	@ 0x78
 800131c:	68f8      	ldr	r0, [r7, #12]
 800131e:	f001 fa6e 	bl	80027fe <ST7735_IO_Delay>

		tmp = 0x00U;
 8001322:	2300      	movs	r3, #0
 8001324:	74fb      	strb	r3, [r7, #19]
		ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f103 0020 	add.w	r0, r3, #32
 800132c:	f107 0213 	add.w	r2, r7, #19
 8001330:	2300      	movs	r3, #0
 8001332:	2101      	movs	r1, #1
 8001334:	f001 fa90 	bl	8002858 <st7735_write_reg>
 8001338:	6178      	str	r0, [r7, #20]
		(void) ST7735_IO_Delay(pObj, 120);
 800133a:	2178      	movs	r1, #120	@ 0x78
 800133c:	68f8      	ldr	r0, [r7, #12]
 800133e:	f001 fa5e 	bl	80027fe <ST7735_IO_Delay>

		/* Out of sleep mode, 0 args, no delay */
		tmp = 0x00U;
 8001342:	2300      	movs	r3, #0
 8001344:	74fb      	strb	r3, [r7, #19]
		ret += st7735_write_reg(&pObj->Ctx, ST7735_SLEEP_OUT, &tmp, 1);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f103 0020 	add.w	r0, r3, #32
 800134c:	f107 0213 	add.w	r2, r7, #19
 8001350:	2301      	movs	r3, #1
 8001352:	2111      	movs	r1, #17
 8001354:	f001 fa80 	bl	8002858 <st7735_write_reg>
 8001358:	4602      	mov	r2, r0
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	4413      	add	r3, r2
 800135e:	617b      	str	r3, [r7, #20]

		/* Frame rate ctrl - normal mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D)*/
		ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL1, &tmp, 0);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f103 0020 	add.w	r0, r3, #32
 8001366:	f107 0213 	add.w	r2, r7, #19
 800136a:	2300      	movs	r3, #0
 800136c:	21b1      	movs	r1, #177	@ 0xb1
 800136e:	f001 fa73 	bl	8002858 <st7735_write_reg>
 8001372:	4602      	mov	r2, r0
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	4413      	add	r3, r2
 8001378:	617b      	str	r3, [r7, #20]
		tmp = 0x01U;
 800137a:	2301      	movs	r3, #1
 800137c:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	3320      	adds	r3, #32
 8001382:	f107 0113 	add.w	r1, r7, #19
 8001386:	2201      	movs	r2, #1
 8001388:	4618      	mov	r0, r3
 800138a:	f001 fa7a 	bl	8002882 <st7735_send_data>
 800138e:	4602      	mov	r2, r0
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	4413      	add	r3, r2
 8001394:	617b      	str	r3, [r7, #20]
		tmp = 0x2CU;
 8001396:	232c      	movs	r3, #44	@ 0x2c
 8001398:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	3320      	adds	r3, #32
 800139e:	f107 0113 	add.w	r1, r7, #19
 80013a2:	2201      	movs	r2, #1
 80013a4:	4618      	mov	r0, r3
 80013a6:	f001 fa6c 	bl	8002882 <st7735_send_data>
 80013aa:	4602      	mov	r2, r0
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	4413      	add	r3, r2
 80013b0:	617b      	str	r3, [r7, #20]
		tmp = 0x2DU;
 80013b2:	232d      	movs	r3, #45	@ 0x2d
 80013b4:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	3320      	adds	r3, #32
 80013ba:	f107 0113 	add.w	r1, r7, #19
 80013be:	2201      	movs	r2, #1
 80013c0:	4618      	mov	r0, r3
 80013c2:	f001 fa5e 	bl	8002882 <st7735_send_data>
 80013c6:	4602      	mov	r2, r0
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	4413      	add	r3, r2
 80013cc:	617b      	str	r3, [r7, #20]

		/* Frame rate control - idle mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D) */
		tmp = 0x01U;
 80013ce:	2301      	movs	r3, #1
 80013d0:	74fb      	strb	r3, [r7, #19]
		ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL2, &tmp, 1);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f103 0020 	add.w	r0, r3, #32
 80013d8:	f107 0213 	add.w	r2, r7, #19
 80013dc:	2301      	movs	r3, #1
 80013de:	21b2      	movs	r1, #178	@ 0xb2
 80013e0:	f001 fa3a 	bl	8002858 <st7735_write_reg>
 80013e4:	4602      	mov	r2, r0
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	4413      	add	r3, r2
 80013ea:	617b      	str	r3, [r7, #20]
		tmp = 0x2CU;
 80013ec:	232c      	movs	r3, #44	@ 0x2c
 80013ee:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3320      	adds	r3, #32
 80013f4:	f107 0113 	add.w	r1, r7, #19
 80013f8:	2201      	movs	r2, #1
 80013fa:	4618      	mov	r0, r3
 80013fc:	f001 fa41 	bl	8002882 <st7735_send_data>
 8001400:	4602      	mov	r2, r0
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	4413      	add	r3, r2
 8001406:	617b      	str	r3, [r7, #20]
		tmp = 0x2DU;
 8001408:	232d      	movs	r3, #45	@ 0x2d
 800140a:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	3320      	adds	r3, #32
 8001410:	f107 0113 	add.w	r1, r7, #19
 8001414:	2201      	movs	r2, #1
 8001416:	4618      	mov	r0, r3
 8001418:	f001 fa33 	bl	8002882 <st7735_send_data>
 800141c:	4602      	mov	r2, r0
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	4413      	add	r3, r2
 8001422:	617b      	str	r3, [r7, #20]

		/* Frame rate ctrl - partial mode, 6 args: Dot inversion mode, Line inversion mode */
		tmp = 0x01U;
 8001424:	2301      	movs	r3, #1
 8001426:	74fb      	strb	r3, [r7, #19]
		ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL3, &tmp, 1);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f103 0020 	add.w	r0, r3, #32
 800142e:	f107 0213 	add.w	r2, r7, #19
 8001432:	2301      	movs	r3, #1
 8001434:	21b3      	movs	r1, #179	@ 0xb3
 8001436:	f001 fa0f 	bl	8002858 <st7735_write_reg>
 800143a:	4602      	mov	r2, r0
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	4413      	add	r3, r2
 8001440:	617b      	str	r3, [r7, #20]
		tmp = 0x2CU;
 8001442:	232c      	movs	r3, #44	@ 0x2c
 8001444:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	3320      	adds	r3, #32
 800144a:	f107 0113 	add.w	r1, r7, #19
 800144e:	2201      	movs	r2, #1
 8001450:	4618      	mov	r0, r3
 8001452:	f001 fa16 	bl	8002882 <st7735_send_data>
 8001456:	4602      	mov	r2, r0
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	4413      	add	r3, r2
 800145c:	617b      	str	r3, [r7, #20]
		tmp = 0x2DU;
 800145e:	232d      	movs	r3, #45	@ 0x2d
 8001460:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	3320      	adds	r3, #32
 8001466:	f107 0113 	add.w	r1, r7, #19
 800146a:	2201      	movs	r2, #1
 800146c:	4618      	mov	r0, r3
 800146e:	f001 fa08 	bl	8002882 <st7735_send_data>
 8001472:	4602      	mov	r2, r0
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	4413      	add	r3, r2
 8001478:	617b      	str	r3, [r7, #20]
		tmp = 0x01U;
 800147a:	2301      	movs	r3, #1
 800147c:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	3320      	adds	r3, #32
 8001482:	f107 0113 	add.w	r1, r7, #19
 8001486:	2201      	movs	r2, #1
 8001488:	4618      	mov	r0, r3
 800148a:	f001 f9fa 	bl	8002882 <st7735_send_data>
 800148e:	4602      	mov	r2, r0
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	4413      	add	r3, r2
 8001494:	617b      	str	r3, [r7, #20]
		tmp = 0x2CU;
 8001496:	232c      	movs	r3, #44	@ 0x2c
 8001498:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	3320      	adds	r3, #32
 800149e:	f107 0113 	add.w	r1, r7, #19
 80014a2:	2201      	movs	r2, #1
 80014a4:	4618      	mov	r0, r3
 80014a6:	f001 f9ec 	bl	8002882 <st7735_send_data>
 80014aa:	4602      	mov	r2, r0
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	4413      	add	r3, r2
 80014b0:	617b      	str	r3, [r7, #20]
		tmp = 0x2DU;
 80014b2:	232d      	movs	r3, #45	@ 0x2d
 80014b4:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	3320      	adds	r3, #32
 80014ba:	f107 0113 	add.w	r1, r7, #19
 80014be:	2201      	movs	r2, #1
 80014c0:	4618      	mov	r0, r3
 80014c2:	f001 f9de 	bl	8002882 <st7735_send_data>
 80014c6:	4602      	mov	r2, r0
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	4413      	add	r3, r2
 80014cc:	617b      	str	r3, [r7, #20]

		/* Display inversion ctrl, 1 arg, no delay: No inversion */
		tmp = 0x07U;
 80014ce:	2307      	movs	r3, #7
 80014d0:	74fb      	strb	r3, [r7, #19]
		ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_INVERSION_CTRL, &tmp,
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f103 0020 	add.w	r0, r3, #32
 80014d8:	f107 0213 	add.w	r2, r7, #19
 80014dc:	2301      	movs	r3, #1
 80014de:	21b4      	movs	r1, #180	@ 0xb4
 80014e0:	f001 f9ba 	bl	8002858 <st7735_write_reg>
 80014e4:	4602      	mov	r2, r0
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	4413      	add	r3, r2
 80014ea:	617b      	str	r3, [r7, #20]
				1);

		/* Power control, 3 args, no delay: -4.6V , AUTO mode */
		tmp = 0xA2U;
 80014ec:	23a2      	movs	r3, #162	@ 0xa2
 80014ee:	74fb      	strb	r3, [r7, #19]
		ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL1, &tmp, 1);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f103 0020 	add.w	r0, r3, #32
 80014f6:	f107 0213 	add.w	r2, r7, #19
 80014fa:	2301      	movs	r3, #1
 80014fc:	21c0      	movs	r1, #192	@ 0xc0
 80014fe:	f001 f9ab 	bl	8002858 <st7735_write_reg>
 8001502:	4602      	mov	r2, r0
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	4413      	add	r3, r2
 8001508:	617b      	str	r3, [r7, #20]
		tmp = 0x02U;
 800150a:	2302      	movs	r3, #2
 800150c:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	3320      	adds	r3, #32
 8001512:	f107 0113 	add.w	r1, r7, #19
 8001516:	2201      	movs	r2, #1
 8001518:	4618      	mov	r0, r3
 800151a:	f001 f9b2 	bl	8002882 <st7735_send_data>
 800151e:	4602      	mov	r2, r0
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	4413      	add	r3, r2
 8001524:	617b      	str	r3, [r7, #20]
		tmp = 0x84U;
 8001526:	2384      	movs	r3, #132	@ 0x84
 8001528:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	3320      	adds	r3, #32
 800152e:	f107 0113 	add.w	r1, r7, #19
 8001532:	2201      	movs	r2, #1
 8001534:	4618      	mov	r0, r3
 8001536:	f001 f9a4 	bl	8002882 <st7735_send_data>
 800153a:	4602      	mov	r2, r0
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	4413      	add	r3, r2
 8001540:	617b      	str	r3, [r7, #20]

		/* Power control, 1 arg, no delay: VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD */
		tmp = 0xC5U;
 8001542:	23c5      	movs	r3, #197	@ 0xc5
 8001544:	74fb      	strb	r3, [r7, #19]
		ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL2, &tmp, 1);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f103 0020 	add.w	r0, r3, #32
 800154c:	f107 0213 	add.w	r2, r7, #19
 8001550:	2301      	movs	r3, #1
 8001552:	21c1      	movs	r1, #193	@ 0xc1
 8001554:	f001 f980 	bl	8002858 <st7735_write_reg>
 8001558:	4602      	mov	r2, r0
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	4413      	add	r3, r2
 800155e:	617b      	str	r3, [r7, #20]

		/* Power control, 2 args, no delay: Opamp current small, Boost frequency */
		tmp = 0x0AU;
 8001560:	230a      	movs	r3, #10
 8001562:	74fb      	strb	r3, [r7, #19]
		ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL3, &tmp, 1);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f103 0020 	add.w	r0, r3, #32
 800156a:	f107 0213 	add.w	r2, r7, #19
 800156e:	2301      	movs	r3, #1
 8001570:	21c2      	movs	r1, #194	@ 0xc2
 8001572:	f001 f971 	bl	8002858 <st7735_write_reg>
 8001576:	4602      	mov	r2, r0
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	4413      	add	r3, r2
 800157c:	617b      	str	r3, [r7, #20]
		tmp = 0x00U;
 800157e:	2300      	movs	r3, #0
 8001580:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	3320      	adds	r3, #32
 8001586:	f107 0113 	add.w	r1, r7, #19
 800158a:	2201      	movs	r2, #1
 800158c:	4618      	mov	r0, r3
 800158e:	f001 f978 	bl	8002882 <st7735_send_data>
 8001592:	4602      	mov	r2, r0
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	4413      	add	r3, r2
 8001598:	617b      	str	r3, [r7, #20]

		/* Power control, 2 args, no delay: BCLK/2, Opamp current small & Medium low */
		tmp = 0x8AU;
 800159a:	238a      	movs	r3, #138	@ 0x8a
 800159c:	74fb      	strb	r3, [r7, #19]
		ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL4, &tmp, 1);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f103 0020 	add.w	r0, r3, #32
 80015a4:	f107 0213 	add.w	r2, r7, #19
 80015a8:	2301      	movs	r3, #1
 80015aa:	21c3      	movs	r1, #195	@ 0xc3
 80015ac:	f001 f954 	bl	8002858 <st7735_write_reg>
 80015b0:	4602      	mov	r2, r0
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	4413      	add	r3, r2
 80015b6:	617b      	str	r3, [r7, #20]
		tmp = 0x2AU;
 80015b8:	232a      	movs	r3, #42	@ 0x2a
 80015ba:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	3320      	adds	r3, #32
 80015c0:	f107 0113 	add.w	r1, r7, #19
 80015c4:	2201      	movs	r2, #1
 80015c6:	4618      	mov	r0, r3
 80015c8:	f001 f95b 	bl	8002882 <st7735_send_data>
 80015cc:	4602      	mov	r2, r0
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	4413      	add	r3, r2
 80015d2:	617b      	str	r3, [r7, #20]

		/* Power control, 2 args, no delay */
		tmp = 0x8AU;
 80015d4:	238a      	movs	r3, #138	@ 0x8a
 80015d6:	74fb      	strb	r3, [r7, #19]
		ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL5, &tmp, 1);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f103 0020 	add.w	r0, r3, #32
 80015de:	f107 0213 	add.w	r2, r7, #19
 80015e2:	2301      	movs	r3, #1
 80015e4:	21c4      	movs	r1, #196	@ 0xc4
 80015e6:	f001 f937 	bl	8002858 <st7735_write_reg>
 80015ea:	4602      	mov	r2, r0
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	4413      	add	r3, r2
 80015f0:	617b      	str	r3, [r7, #20]
		tmp = 0xEEU;
 80015f2:	23ee      	movs	r3, #238	@ 0xee
 80015f4:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	3320      	adds	r3, #32
 80015fa:	f107 0113 	add.w	r1, r7, #19
 80015fe:	2201      	movs	r2, #1
 8001600:	4618      	mov	r0, r3
 8001602:	f001 f93e 	bl	8002882 <st7735_send_data>
 8001606:	4602      	mov	r2, r0
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	4413      	add	r3, r2
 800160c:	617b      	str	r3, [r7, #20]

		/* Power control, 1 arg, no delay */
		tmp = 0x0EU;
 800160e:	230e      	movs	r3, #14
 8001610:	74fb      	strb	r3, [r7, #19]
		ret += st7735_write_reg(&pObj->Ctx, ST7735_VCOMH_VCOML_CTRL1, &tmp, 1);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f103 0020 	add.w	r0, r3, #32
 8001618:	f107 0213 	add.w	r2, r7, #19
 800161c:	2301      	movs	r3, #1
 800161e:	21c5      	movs	r1, #197	@ 0xc5
 8001620:	f001 f91a 	bl	8002858 <st7735_write_reg>
 8001624:	4602      	mov	r2, r0
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	4413      	add	r3, r2
 800162a:	617b      	str	r3, [r7, #20]

		/* choose panel*/
		if (pDriver->Panel == HannStar_Panel) {
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	7b1b      	ldrb	r3, [r3, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d10d      	bne.n	8001650 <ST7735_Init+0x368>
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_ON,
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f103 0020 	add.w	r0, r3, #32
 800163a:	f107 0213 	add.w	r2, r7, #19
 800163e:	2300      	movs	r3, #0
 8001640:	2121      	movs	r1, #33	@ 0x21
 8001642:	f001 f909 	bl	8002858 <st7735_write_reg>
 8001646:	4602      	mov	r2, r0
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	4413      	add	r3, r2
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	e00c      	b.n	800166a <ST7735_Init+0x382>
					&tmp, 0);
		} else {
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_OFF,
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f103 0020 	add.w	r0, r3, #32
 8001656:	f107 0213 	add.w	r2, r7, #19
 800165a:	2300      	movs	r3, #0
 800165c:	2120      	movs	r1, #32
 800165e:	f001 f8fb 	bl	8002858 <st7735_write_reg>
 8001662:	4602      	mov	r2, r0
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	4413      	add	r3, r2
 8001668:	617b      	str	r3, [r7, #20]
					&tmp, 0);
		}
		/* Set color mode, 1 arg, no delay */
		ret += st7735_write_reg(&pObj->Ctx, ST7735_COLOR_MODE,
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f103 0020 	add.w	r0, r3, #32
 8001670:	f107 0208 	add.w	r2, r7, #8
 8001674:	2301      	movs	r3, #1
 8001676:	213a      	movs	r1, #58	@ 0x3a
 8001678:	f001 f8ee 	bl	8002858 <st7735_write_reg>
 800167c:	4602      	mov	r2, r0
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	4413      	add	r3, r2
 8001682:	617b      	str	r3, [r7, #20]
				(uint8_t*) &ColorCoding, 1);

		/* Magical unicorn dust, 16 args, no delay */
		tmp = 0x02U;
 8001684:	2302      	movs	r3, #2
 8001686:	74fb      	strb	r3, [r7, #19]
		ret += st7735_write_reg(&pObj->Ctx, ST7735_PV_GAMMA_CTRL, &tmp, 1);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f103 0020 	add.w	r0, r3, #32
 800168e:	f107 0213 	add.w	r2, r7, #19
 8001692:	2301      	movs	r3, #1
 8001694:	21e0      	movs	r1, #224	@ 0xe0
 8001696:	f001 f8df 	bl	8002858 <st7735_write_reg>
 800169a:	4602      	mov	r2, r0
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	4413      	add	r3, r2
 80016a0:	617b      	str	r3, [r7, #20]
		tmp = 0x1CU;
 80016a2:	231c      	movs	r3, #28
 80016a4:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	3320      	adds	r3, #32
 80016aa:	f107 0113 	add.w	r1, r7, #19
 80016ae:	2201      	movs	r2, #1
 80016b0:	4618      	mov	r0, r3
 80016b2:	f001 f8e6 	bl	8002882 <st7735_send_data>
 80016b6:	4602      	mov	r2, r0
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	4413      	add	r3, r2
 80016bc:	617b      	str	r3, [r7, #20]
		tmp = 0x07U;
 80016be:	2307      	movs	r3, #7
 80016c0:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	3320      	adds	r3, #32
 80016c6:	f107 0113 	add.w	r1, r7, #19
 80016ca:	2201      	movs	r2, #1
 80016cc:	4618      	mov	r0, r3
 80016ce:	f001 f8d8 	bl	8002882 <st7735_send_data>
 80016d2:	4602      	mov	r2, r0
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	4413      	add	r3, r2
 80016d8:	617b      	str	r3, [r7, #20]
		tmp = 0x12U;
 80016da:	2312      	movs	r3, #18
 80016dc:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	3320      	adds	r3, #32
 80016e2:	f107 0113 	add.w	r1, r7, #19
 80016e6:	2201      	movs	r2, #1
 80016e8:	4618      	mov	r0, r3
 80016ea:	f001 f8ca 	bl	8002882 <st7735_send_data>
 80016ee:	4602      	mov	r2, r0
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	4413      	add	r3, r2
 80016f4:	617b      	str	r3, [r7, #20]
		tmp = 0x37U;
 80016f6:	2337      	movs	r3, #55	@ 0x37
 80016f8:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	3320      	adds	r3, #32
 80016fe:	f107 0113 	add.w	r1, r7, #19
 8001702:	2201      	movs	r2, #1
 8001704:	4618      	mov	r0, r3
 8001706:	f001 f8bc 	bl	8002882 <st7735_send_data>
 800170a:	4602      	mov	r2, r0
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	4413      	add	r3, r2
 8001710:	617b      	str	r3, [r7, #20]
		tmp = 0x32U;
 8001712:	2332      	movs	r3, #50	@ 0x32
 8001714:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	3320      	adds	r3, #32
 800171a:	f107 0113 	add.w	r1, r7, #19
 800171e:	2201      	movs	r2, #1
 8001720:	4618      	mov	r0, r3
 8001722:	f001 f8ae 	bl	8002882 <st7735_send_data>
 8001726:	4602      	mov	r2, r0
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	4413      	add	r3, r2
 800172c:	617b      	str	r3, [r7, #20]
		tmp = 0x29U;
 800172e:	2329      	movs	r3, #41	@ 0x29
 8001730:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	3320      	adds	r3, #32
 8001736:	f107 0113 	add.w	r1, r7, #19
 800173a:	2201      	movs	r2, #1
 800173c:	4618      	mov	r0, r3
 800173e:	f001 f8a0 	bl	8002882 <st7735_send_data>
 8001742:	4602      	mov	r2, r0
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	4413      	add	r3, r2
 8001748:	617b      	str	r3, [r7, #20]
		tmp = 0x2DU;
 800174a:	232d      	movs	r3, #45	@ 0x2d
 800174c:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	3320      	adds	r3, #32
 8001752:	f107 0113 	add.w	r1, r7, #19
 8001756:	2201      	movs	r2, #1
 8001758:	4618      	mov	r0, r3
 800175a:	f001 f892 	bl	8002882 <st7735_send_data>
 800175e:	4602      	mov	r2, r0
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	4413      	add	r3, r2
 8001764:	617b      	str	r3, [r7, #20]
		tmp = 0x29U;
 8001766:	2329      	movs	r3, #41	@ 0x29
 8001768:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	3320      	adds	r3, #32
 800176e:	f107 0113 	add.w	r1, r7, #19
 8001772:	2201      	movs	r2, #1
 8001774:	4618      	mov	r0, r3
 8001776:	f001 f884 	bl	8002882 <st7735_send_data>
 800177a:	4602      	mov	r2, r0
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	4413      	add	r3, r2
 8001780:	617b      	str	r3, [r7, #20]
		tmp = 0x25U;
 8001782:	2325      	movs	r3, #37	@ 0x25
 8001784:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	3320      	adds	r3, #32
 800178a:	f107 0113 	add.w	r1, r7, #19
 800178e:	2201      	movs	r2, #1
 8001790:	4618      	mov	r0, r3
 8001792:	f001 f876 	bl	8002882 <st7735_send_data>
 8001796:	4602      	mov	r2, r0
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	4413      	add	r3, r2
 800179c:	617b      	str	r3, [r7, #20]
		tmp = 0x2BU;
 800179e:	232b      	movs	r3, #43	@ 0x2b
 80017a0:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	3320      	adds	r3, #32
 80017a6:	f107 0113 	add.w	r1, r7, #19
 80017aa:	2201      	movs	r2, #1
 80017ac:	4618      	mov	r0, r3
 80017ae:	f001 f868 	bl	8002882 <st7735_send_data>
 80017b2:	4602      	mov	r2, r0
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	4413      	add	r3, r2
 80017b8:	617b      	str	r3, [r7, #20]
		tmp = 0x39U;
 80017ba:	2339      	movs	r3, #57	@ 0x39
 80017bc:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	3320      	adds	r3, #32
 80017c2:	f107 0113 	add.w	r1, r7, #19
 80017c6:	2201      	movs	r2, #1
 80017c8:	4618      	mov	r0, r3
 80017ca:	f001 f85a 	bl	8002882 <st7735_send_data>
 80017ce:	4602      	mov	r2, r0
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	4413      	add	r3, r2
 80017d4:	617b      	str	r3, [r7, #20]
		tmp = 0x00U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	3320      	adds	r3, #32
 80017de:	f107 0113 	add.w	r1, r7, #19
 80017e2:	2201      	movs	r2, #1
 80017e4:	4618      	mov	r0, r3
 80017e6:	f001 f84c 	bl	8002882 <st7735_send_data>
 80017ea:	4602      	mov	r2, r0
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	4413      	add	r3, r2
 80017f0:	617b      	str	r3, [r7, #20]
		tmp = 0x01U;
 80017f2:	2301      	movs	r3, #1
 80017f4:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	3320      	adds	r3, #32
 80017fa:	f107 0113 	add.w	r1, r7, #19
 80017fe:	2201      	movs	r2, #1
 8001800:	4618      	mov	r0, r3
 8001802:	f001 f83e 	bl	8002882 <st7735_send_data>
 8001806:	4602      	mov	r2, r0
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	4413      	add	r3, r2
 800180c:	617b      	str	r3, [r7, #20]
		tmp = 0x03U;
 800180e:	2303      	movs	r3, #3
 8001810:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	3320      	adds	r3, #32
 8001816:	f107 0113 	add.w	r1, r7, #19
 800181a:	2201      	movs	r2, #1
 800181c:	4618      	mov	r0, r3
 800181e:	f001 f830 	bl	8002882 <st7735_send_data>
 8001822:	4602      	mov	r2, r0
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	4413      	add	r3, r2
 8001828:	617b      	str	r3, [r7, #20]
		tmp = 0x10U;
 800182a:	2310      	movs	r3, #16
 800182c:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	3320      	adds	r3, #32
 8001832:	f107 0113 	add.w	r1, r7, #19
 8001836:	2201      	movs	r2, #1
 8001838:	4618      	mov	r0, r3
 800183a:	f001 f822 	bl	8002882 <st7735_send_data>
 800183e:	4602      	mov	r2, r0
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	4413      	add	r3, r2
 8001844:	617b      	str	r3, [r7, #20]

		/* Sparkles and rainbows, 16 args, no delay */
		tmp = 0x03U;
 8001846:	2303      	movs	r3, #3
 8001848:	74fb      	strb	r3, [r7, #19]
		ret += st7735_write_reg(&pObj->Ctx, ST7735_NV_GAMMA_CTRL, &tmp, 1);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f103 0020 	add.w	r0, r3, #32
 8001850:	f107 0213 	add.w	r2, r7, #19
 8001854:	2301      	movs	r3, #1
 8001856:	21e1      	movs	r1, #225	@ 0xe1
 8001858:	f000 fffe 	bl	8002858 <st7735_write_reg>
 800185c:	4602      	mov	r2, r0
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	4413      	add	r3, r2
 8001862:	617b      	str	r3, [r7, #20]
		tmp = 0x1DU;
 8001864:	231d      	movs	r3, #29
 8001866:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	3320      	adds	r3, #32
 800186c:	f107 0113 	add.w	r1, r7, #19
 8001870:	2201      	movs	r2, #1
 8001872:	4618      	mov	r0, r3
 8001874:	f001 f805 	bl	8002882 <st7735_send_data>
 8001878:	4602      	mov	r2, r0
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	4413      	add	r3, r2
 800187e:	617b      	str	r3, [r7, #20]
		tmp = 0x07U;
 8001880:	2307      	movs	r3, #7
 8001882:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	3320      	adds	r3, #32
 8001888:	f107 0113 	add.w	r1, r7, #19
 800188c:	2201      	movs	r2, #1
 800188e:	4618      	mov	r0, r3
 8001890:	f000 fff7 	bl	8002882 <st7735_send_data>
 8001894:	4602      	mov	r2, r0
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	4413      	add	r3, r2
 800189a:	617b      	str	r3, [r7, #20]
		tmp = 0x06U;
 800189c:	2306      	movs	r3, #6
 800189e:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	3320      	adds	r3, #32
 80018a4:	f107 0113 	add.w	r1, r7, #19
 80018a8:	2201      	movs	r2, #1
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 ffe9 	bl	8002882 <st7735_send_data>
 80018b0:	4602      	mov	r2, r0
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	4413      	add	r3, r2
 80018b6:	617b      	str	r3, [r7, #20]
		tmp = 0x2EU;
 80018b8:	232e      	movs	r3, #46	@ 0x2e
 80018ba:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	3320      	adds	r3, #32
 80018c0:	f107 0113 	add.w	r1, r7, #19
 80018c4:	2201      	movs	r2, #1
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 ffdb 	bl	8002882 <st7735_send_data>
 80018cc:	4602      	mov	r2, r0
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	4413      	add	r3, r2
 80018d2:	617b      	str	r3, [r7, #20]
		tmp = 0x2CU;
 80018d4:	232c      	movs	r3, #44	@ 0x2c
 80018d6:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	3320      	adds	r3, #32
 80018dc:	f107 0113 	add.w	r1, r7, #19
 80018e0:	2201      	movs	r2, #1
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 ffcd 	bl	8002882 <st7735_send_data>
 80018e8:	4602      	mov	r2, r0
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	4413      	add	r3, r2
 80018ee:	617b      	str	r3, [r7, #20]
		tmp = 0x29U;
 80018f0:	2329      	movs	r3, #41	@ 0x29
 80018f2:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	3320      	adds	r3, #32
 80018f8:	f107 0113 	add.w	r1, r7, #19
 80018fc:	2201      	movs	r2, #1
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 ffbf 	bl	8002882 <st7735_send_data>
 8001904:	4602      	mov	r2, r0
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	4413      	add	r3, r2
 800190a:	617b      	str	r3, [r7, #20]
		tmp = 0x2DU;
 800190c:	232d      	movs	r3, #45	@ 0x2d
 800190e:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	3320      	adds	r3, #32
 8001914:	f107 0113 	add.w	r1, r7, #19
 8001918:	2201      	movs	r2, #1
 800191a:	4618      	mov	r0, r3
 800191c:	f000 ffb1 	bl	8002882 <st7735_send_data>
 8001920:	4602      	mov	r2, r0
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	4413      	add	r3, r2
 8001926:	617b      	str	r3, [r7, #20]
		tmp = 0x2EU;
 8001928:	232e      	movs	r3, #46	@ 0x2e
 800192a:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	3320      	adds	r3, #32
 8001930:	f107 0113 	add.w	r1, r7, #19
 8001934:	2201      	movs	r2, #1
 8001936:	4618      	mov	r0, r3
 8001938:	f000 ffa3 	bl	8002882 <st7735_send_data>
 800193c:	4602      	mov	r2, r0
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	4413      	add	r3, r2
 8001942:	617b      	str	r3, [r7, #20]
		tmp = 0x2EU;
 8001944:	232e      	movs	r3, #46	@ 0x2e
 8001946:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	3320      	adds	r3, #32
 800194c:	f107 0113 	add.w	r1, r7, #19
 8001950:	2201      	movs	r2, #1
 8001952:	4618      	mov	r0, r3
 8001954:	f000 ff95 	bl	8002882 <st7735_send_data>
 8001958:	4602      	mov	r2, r0
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	4413      	add	r3, r2
 800195e:	617b      	str	r3, [r7, #20]
		tmp = 0x37U;
 8001960:	2337      	movs	r3, #55	@ 0x37
 8001962:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	3320      	adds	r3, #32
 8001968:	f107 0113 	add.w	r1, r7, #19
 800196c:	2201      	movs	r2, #1
 800196e:	4618      	mov	r0, r3
 8001970:	f000 ff87 	bl	8002882 <st7735_send_data>
 8001974:	4602      	mov	r2, r0
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	4413      	add	r3, r2
 800197a:	617b      	str	r3, [r7, #20]
		tmp = 0x3FU;
 800197c:	233f      	movs	r3, #63	@ 0x3f
 800197e:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	3320      	adds	r3, #32
 8001984:	f107 0113 	add.w	r1, r7, #19
 8001988:	2201      	movs	r2, #1
 800198a:	4618      	mov	r0, r3
 800198c:	f000 ff79 	bl	8002882 <st7735_send_data>
 8001990:	4602      	mov	r2, r0
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	4413      	add	r3, r2
 8001996:	617b      	str	r3, [r7, #20]
		tmp = 0x00U;
 8001998:	2300      	movs	r3, #0
 800199a:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	3320      	adds	r3, #32
 80019a0:	f107 0113 	add.w	r1, r7, #19
 80019a4:	2201      	movs	r2, #1
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 ff6b 	bl	8002882 <st7735_send_data>
 80019ac:	4602      	mov	r2, r0
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	4413      	add	r3, r2
 80019b2:	617b      	str	r3, [r7, #20]
		tmp = 0x00U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	3320      	adds	r3, #32
 80019bc:	f107 0113 	add.w	r1, r7, #19
 80019c0:	2201      	movs	r2, #1
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 ff5d 	bl	8002882 <st7735_send_data>
 80019c8:	4602      	mov	r2, r0
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	4413      	add	r3, r2
 80019ce:	617b      	str	r3, [r7, #20]
		tmp = 0x02U;
 80019d0:	2302      	movs	r3, #2
 80019d2:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	3320      	adds	r3, #32
 80019d8:	f107 0113 	add.w	r1, r7, #19
 80019dc:	2201      	movs	r2, #1
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 ff4f 	bl	8002882 <st7735_send_data>
 80019e4:	4602      	mov	r2, r0
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	4413      	add	r3, r2
 80019ea:	617b      	str	r3, [r7, #20]
		tmp = 0x10U;
 80019ec:	2310      	movs	r3, #16
 80019ee:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	3320      	adds	r3, #32
 80019f4:	f107 0113 	add.w	r1, r7, #19
 80019f8:	2201      	movs	r2, #1
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 ff41 	bl	8002882 <st7735_send_data>
 8001a00:	4602      	mov	r2, r0
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	4413      	add	r3, r2
 8001a06:	617b      	str	r3, [r7, #20]

		/* Normal display on, no args, no delay */
		tmp = 0x00U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	74fb      	strb	r3, [r7, #19]
		ret += st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 1);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f103 0020 	add.w	r0, r3, #32
 8001a12:	f107 0213 	add.w	r2, r7, #19
 8001a16:	2301      	movs	r3, #1
 8001a18:	2113      	movs	r1, #19
 8001a1a:	f000 ff1d 	bl	8002858 <st7735_write_reg>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	4413      	add	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]

		/* Main screen turn on, no delay */
		ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 1);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f103 0020 	add.w	r0, r3, #32
 8001a2c:	f107 0213 	add.w	r2, r7, #19
 8001a30:	2301      	movs	r3, #1
 8001a32:	2129      	movs	r1, #41	@ 0x29
 8001a34:	f000 ff10 	bl	8002858 <st7735_write_reg>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	617b      	str	r3, [r7, #20]

		/* Set the display Orientation and the default display window */
		ret += ST7735_SetOrientation(pObj, pDriver);
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	f000 f944 	bl	8001cd0 <ST7735_SetOrientation>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	617b      	str	r3, [r7, #20]
	}

	if (ret != ST7735_OK) {
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d002      	beq.n	8001a5c <ST7735_Init+0x774>
		ret = ST7735_ERROR;
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5a:	617b      	str	r3, [r7, #20]
	}

	return ret;
 8001a5c:	697b      	ldr	r3, [r7, #20]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <ST7735_DeInit>:
/**
 * @brief  De-Initialize the st7735 LCD Component.
 * @param  pObj Component object
 * @retval Component status
 */
int32_t ST7735_DeInit(ST7735_Object_t *pObj) {
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
	(void) (pObj);

	return ST7735_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <ST7735_ReadID>:
 * @brief  Get the st7735 ID.
 * @param  pObj Component object
 * @param  Id Component ID
 * @retval The component status
 */
int32_t ST7735_ReadID(ST7735_Object_t *pObj, uint32_t *Id) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
	int32_t ret;
	uint8_t tmp[3];

	if (st7735_read_reg(&pObj->Ctx, ST7735_READ_ID1, &tmp[0]) != ST7735_OK) {
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3320      	adds	r3, #32
 8001a8a:	f107 0208 	add.w	r2, r7, #8
 8001a8e:	21da      	movs	r1, #218	@ 0xda
 8001a90:	4618      	mov	r0, r3
 8001a92:	f000 fece 	bl	8002832 <st7735_read_reg>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <ST7735_ReadID+0x28>
		ret = ST7735_ERROR;
 8001a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	e02d      	b.n	8001b00 <ST7735_ReadID+0x84>
	} else if (st7735_read_reg(&pObj->Ctx, ST7735_READ_ID2,
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f103 0020 	add.w	r0, r3, #32
 8001aaa:	f107 0308 	add.w	r3, r7, #8
 8001aae:	3301      	adds	r3, #1
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	21db      	movs	r1, #219	@ 0xdb
 8001ab4:	f000 febd 	bl	8002832 <st7735_read_reg>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <ST7735_ReadID+0x4a>
			&tmp[1]) != ST7735_OK) {
		ret = ST7735_ERROR;
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	e01c      	b.n	8001b00 <ST7735_ReadID+0x84>
	} else if (st7735_read_reg(&pObj->Ctx, ST7735_READ_ID3,
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f103 0020 	add.w	r0, r3, #32
 8001acc:	f107 0308 	add.w	r3, r7, #8
 8001ad0:	3302      	adds	r3, #2
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	21dc      	movs	r1, #220	@ 0xdc
 8001ad6:	f000 feac 	bl	8002832 <st7735_read_reg>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <ST7735_ReadID+0x6c>
			&tmp[2]) != ST7735_OK) {
		ret = ST7735_ERROR;
 8001ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	e00b      	b.n	8001b00 <ST7735_ReadID+0x84>
	} else {

		*Id = ((uint32_t) tmp[2]) << 0 | ((uint32_t) tmp[1]) << 8
 8001ae8:	7abb      	ldrb	r3, [r7, #10]
 8001aea:	461a      	mov	r2, r3
 8001aec:	7a7b      	ldrb	r3, [r7, #9]
 8001aee:	021b      	lsls	r3, r3, #8
 8001af0:	431a      	orrs	r2, r3
				| ((uint32_t) tmp[0]) << 16;
 8001af2:	7a3b      	ldrb	r3, [r7, #8]
 8001af4:	041b      	lsls	r3, r3, #16
 8001af6:	431a      	orrs	r2, r3
		*Id = ((uint32_t) tmp[2]) << 0 | ((uint32_t) tmp[1]) << 8
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	601a      	str	r2, [r3, #0]
		//*Id = __rbit(*Id);
		ret = ST7735_OK;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]
	}

	return ret;
 8001b00:	68fb      	ldr	r3, [r7, #12]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <ST7735_DisplayOn>:
/**
 * @brief  Enables the Display.
 * @param  pObj Component object
 * @retval The component status
 */
int32_t ST7735_DisplayOn(ST7735_Object_t *pObj) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	int32_t ret;
	uint8_t tmp = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	72fb      	strb	r3, [r7, #11]

	ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f103 0020 	add.w	r0, r3, #32
 8001b1e:	f107 020b 	add.w	r2, r7, #11
 8001b22:	2300      	movs	r3, #0
 8001b24:	2113      	movs	r1, #19
 8001b26:	f000 fe97 	bl	8002858 <st7735_write_reg>
 8001b2a:	60f8      	str	r0, [r7, #12]
	(void) ST7735_IO_Delay(pObj, 10);
 8001b2c:	210a      	movs	r1, #10
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 fe65 	bl	80027fe <ST7735_IO_Delay>
	ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 0);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f103 0020 	add.w	r0, r3, #32
 8001b3a:	f107 020b 	add.w	r2, r7, #11
 8001b3e:	2300      	movs	r3, #0
 8001b40:	2129      	movs	r1, #41	@ 0x29
 8001b42:	f000 fe89 	bl	8002858 <st7735_write_reg>
 8001b46:	4602      	mov	r2, r0
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	60fb      	str	r3, [r7, #12]
	(void) ST7735_IO_Delay(pObj, 10);
 8001b4e:	210a      	movs	r1, #10
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 fe54 	bl	80027fe <ST7735_IO_Delay>
	ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f103 0020 	add.w	r0, r3, #32
 8001b5c:	f107 020b 	add.w	r2, r7, #11
 8001b60:	2300      	movs	r3, #0
 8001b62:	2136      	movs	r1, #54	@ 0x36
 8001b64:	f000 fe78 	bl	8002858 <st7735_write_reg>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ?
 8001b70:	4b16      	ldr	r3, [pc, #88]	@ (8001bcc <ST7735_DisplayOn+0xc0>)
 8001b72:	7b1b      	ldrb	r3, [r3, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10a      	bne.n	8001b8e <ST7735_DisplayOn+0x82>
			(uint8_t) OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8001b78:	4b14      	ldr	r3, [pc, #80]	@ (8001bcc <ST7735_DisplayOn+0xc0>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	4a14      	ldr	r2, [pc, #80]	@ (8001bd0 <ST7735_DisplayOn+0xc4>)
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	4413      	add	r3, r2
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ?
 8001b86:	f043 0308 	orr.w	r3, r3, #8
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	e006      	b.n	8001b9c <ST7735_DisplayOn+0x90>
			(uint8_t) OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8001b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bcc <ST7735_DisplayOn+0xc0>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	4a0f      	ldr	r2, [pc, #60]	@ (8001bd0 <ST7735_DisplayOn+0xc4>)
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	4413      	add	r3, r2
 8001b98:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ?
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	72fb      	strb	r3, [r7, #11]
	ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3320      	adds	r3, #32
 8001ba2:	f107 010b 	add.w	r1, r7, #11
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f000 fe6a 	bl	8002882 <st7735_send_data>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]
	if (ret != ST7735_OK) {
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d002      	beq.n	8001bc2 <ST7735_DisplayOn+0xb6>
		ret = ST7735_ERROR;
 8001bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc0:	60fb      	str	r3, [r7, #12]
	}

	return ret;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	240005b4 	.word	0x240005b4
 8001bd0:	24000070 	.word	0x24000070

08001bd4 <ST7735_DisplayOff>:
/**
 * @brief  Disables the Display.
 * @param  pObj Component object
 * @retval The component status
 */
int32_t ST7735_DisplayOff(ST7735_Object_t *pObj) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	int32_t ret;
	uint8_t tmp = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	72fb      	strb	r3, [r7, #11]

	ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f103 0020 	add.w	r0, r3, #32
 8001be6:	f107 020b 	add.w	r2, r7, #11
 8001bea:	2300      	movs	r3, #0
 8001bec:	2113      	movs	r1, #19
 8001bee:	f000 fe33 	bl	8002858 <st7735_write_reg>
 8001bf2:	60f8      	str	r0, [r7, #12]
	(void) ST7735_IO_Delay(pObj, 10);
 8001bf4:	210a      	movs	r1, #10
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 fe01 	bl	80027fe <ST7735_IO_Delay>
	ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_OFF, &tmp, 0);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f103 0020 	add.w	r0, r3, #32
 8001c02:	f107 020b 	add.w	r2, r7, #11
 8001c06:	2300      	movs	r3, #0
 8001c08:	2128      	movs	r1, #40	@ 0x28
 8001c0a:	f000 fe25 	bl	8002858 <st7735_write_reg>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4413      	add	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]
	(void) ST7735_IO_Delay(pObj, 10);
 8001c16:	210a      	movs	r1, #10
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 fdf0 	bl	80027fe <ST7735_IO_Delay>
	ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f103 0020 	add.w	r0, r3, #32
 8001c24:	f107 020b 	add.w	r2, r7, #11
 8001c28:	2300      	movs	r3, #0
 8001c2a:	2136      	movs	r1, #54	@ 0x36
 8001c2c:	f000 fe14 	bl	8002858 <st7735_write_reg>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4413      	add	r3, r2
 8001c36:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ?
 8001c38:	4b16      	ldr	r3, [pc, #88]	@ (8001c94 <ST7735_DisplayOff+0xc0>)
 8001c3a:	7b1b      	ldrb	r3, [r3, #12]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d10a      	bne.n	8001c56 <ST7735_DisplayOff+0x82>
			(uint8_t) OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8001c40:	4b14      	ldr	r3, [pc, #80]	@ (8001c94 <ST7735_DisplayOff+0xc0>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	4a14      	ldr	r2, [pc, #80]	@ (8001c98 <ST7735_DisplayOff+0xc4>)
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	4413      	add	r3, r2
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ?
 8001c4e:	f043 0308 	orr.w	r3, r3, #8
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	e006      	b.n	8001c64 <ST7735_DisplayOff+0x90>
			(uint8_t) OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8001c56:	4b0f      	ldr	r3, [pc, #60]	@ (8001c94 <ST7735_DisplayOff+0xc0>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	4a0f      	ldr	r2, [pc, #60]	@ (8001c98 <ST7735_DisplayOff+0xc4>)
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	4413      	add	r3, r2
 8001c60:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ?
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	72fb      	strb	r3, [r7, #11]
	ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3320      	adds	r3, #32
 8001c6a:	f107 010b 	add.w	r1, r7, #11
 8001c6e:	2201      	movs	r2, #1
 8001c70:	4618      	mov	r0, r3
 8001c72:	f000 fe06 	bl	8002882 <st7735_send_data>
 8001c76:	4602      	mov	r2, r0
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]
	if (ret != ST7735_OK) {
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d002      	beq.n	8001c8a <ST7735_DisplayOff+0xb6>
		ret = ST7735_ERROR;
 8001c84:	f04f 33ff 	mov.w	r3, #4294967295
 8001c88:	60fb      	str	r3, [r7, #12]
	}

	return ret;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	240005b4 	.word	0x240005b4
 8001c98:	24000070 	.word	0x24000070

08001c9c <ST7735_SetBrightness>:
 * @brief  Set the display brightness.
 * @param  pObj Component object
 * @param  Brightness   display brightness to be set
 * @retval Component status
 */
int32_t ST7735_SetBrightness(ST7735_Object_t *pObj, uint32_t Brightness) {
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
	(void) (pObj);
	(void) (Brightness);

	/* Feature not supported */
	return ST7735_ERROR;
 8001ca6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <ST7735_GetBrightness>:
 * @brief  Get the display brightness.
 * @param  pObj Component object
 * @param  Brightness   display brightness to be returned
 * @retval Component status
 */
int32_t ST7735_GetBrightness(ST7735_Object_t *pObj, uint32_t *Brightness) {
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	6039      	str	r1, [r7, #0]
	(void) (pObj);
	(void) (Brightness);

	/* Feature not supported */
	return ST7735_ERROR;
 8001cc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <ST7735_SetOrientation>:
 * @param  pObj Component object
 * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_PORTRAIT_ROT180
 *                     ST7735_ORIENTATION_LANDSCAPE or ST7735_ORIENTATION_LANDSCAPE_ROT180
 * @retval The component status
 */
int32_t ST7735_SetOrientation(ST7735_Object_t *pObj, ST7735_Ctx_t *pDriver) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af02      	add	r7, sp, #8
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
	int32_t ret;
	uint8_t tmp;

	if ((pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <ST7735_SetOrientation+0x1a>
			|| (pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT_ROT180)) {
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d119      	bne.n	8001d1e <ST7735_SetOrientation+0x4e>
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	7b5b      	ldrb	r3, [r3, #13]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d106      	bne.n	8001d00 <ST7735_SetOrientation+0x30>
			ST7735Ctx.Width = ST7735_0_9_WIDTH;
 8001cf2:	4b43      	ldr	r3, [pc, #268]	@ (8001e00 <ST7735_SetOrientation+0x130>)
 8001cf4:	2250      	movs	r2, #80	@ 0x50
 8001cf6:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_HEIGHT;
 8001cf8:	4b41      	ldr	r3, [pc, #260]	@ (8001e00 <ST7735_SetOrientation+0x130>)
 8001cfa:	22a0      	movs	r2, #160	@ 0xa0
 8001cfc:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8001cfe:	e028      	b.n	8001d52 <ST7735_SetOrientation+0x82>
		} else if (pDriver->Type == ST7735_1_8_inch_screen
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	7b5b      	ldrb	r3, [r3, #13]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <ST7735_SetOrientation+0x40>
				|| pDriver->Type == ST7735_1_8a_inch_screen) {
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	7b5b      	ldrb	r3, [r3, #13]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d120      	bne.n	8001d52 <ST7735_SetOrientation+0x82>
			ST7735Ctx.Width = ST7735_1_8_WIDTH;
 8001d10:	4b3b      	ldr	r3, [pc, #236]	@ (8001e00 <ST7735_SetOrientation+0x130>)
 8001d12:	2280      	movs	r2, #128	@ 0x80
 8001d14:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_HEIGHT;
 8001d16:	4b3a      	ldr	r3, [pc, #232]	@ (8001e00 <ST7735_SetOrientation+0x130>)
 8001d18:	22a0      	movs	r2, #160	@ 0xa0
 8001d1a:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8001d1c:	e019      	b.n	8001d52 <ST7735_SetOrientation+0x82>
		}
	} else {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	7b5b      	ldrb	r3, [r3, #13]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d106      	bne.n	8001d34 <ST7735_SetOrientation+0x64>
			ST7735Ctx.Width = ST7735_0_9_HEIGHT;
 8001d26:	4b36      	ldr	r3, [pc, #216]	@ (8001e00 <ST7735_SetOrientation+0x130>)
 8001d28:	22a0      	movs	r2, #160	@ 0xa0
 8001d2a:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_WIDTH;
 8001d2c:	4b34      	ldr	r3, [pc, #208]	@ (8001e00 <ST7735_SetOrientation+0x130>)
 8001d2e:	2250      	movs	r2, #80	@ 0x50
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	e00f      	b.n	8001d54 <ST7735_SetOrientation+0x84>
		} else if (pDriver->Type == ST7735_1_8_inch_screen
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	7b5b      	ldrb	r3, [r3, #13]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <ST7735_SetOrientation+0x74>
				|| pDriver->Type == ST7735_1_8a_inch_screen) {
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	7b5b      	ldrb	r3, [r3, #13]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d107      	bne.n	8001d54 <ST7735_SetOrientation+0x84>
			ST7735Ctx.Width = ST7735_1_8_HEIGHT;
 8001d44:	4b2e      	ldr	r3, [pc, #184]	@ (8001e00 <ST7735_SetOrientation+0x130>)
 8001d46:	22a0      	movs	r2, #160	@ 0xa0
 8001d48:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_WIDTH;
 8001d4a:	4b2d      	ldr	r3, [pc, #180]	@ (8001e00 <ST7735_SetOrientation+0x130>)
 8001d4c:	2280      	movs	r2, #128	@ 0x80
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	e000      	b.n	8001d54 <ST7735_SetOrientation+0x84>
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8001d52:	bf00      	nop
		}
	}

	ST7735Ctx.Orientation = pDriver->Orientation;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	4a29      	ldr	r2, [pc, #164]	@ (8001e00 <ST7735_SetOrientation+0x130>)
 8001d5a:	6093      	str	r3, [r2, #8]
	ST7735Ctx.Panel = pDriver->Panel;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	7b1a      	ldrb	r2, [r3, #12]
 8001d60:	4b27      	ldr	r3, [pc, #156]	@ (8001e00 <ST7735_SetOrientation+0x130>)
 8001d62:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = pDriver->Type;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	7b5a      	ldrb	r2, [r3, #13]
 8001d68:	4b25      	ldr	r3, [pc, #148]	@ (8001e00 <ST7735_SetOrientation+0x130>)
 8001d6a:	735a      	strb	r2, [r3, #13]

	ret = ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width,
 8001d6c:	4b24      	ldr	r3, [pc, #144]	@ (8001e00 <ST7735_SetOrientation+0x130>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4b23      	ldr	r3, [pc, #140]	@ (8001e00 <ST7735_SetOrientation+0x130>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	4613      	mov	r3, r2
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 fbed 	bl	800255c <ST7735_SetDisplayWindow>
 8001d82:	60f8      	str	r0, [r7, #12]
			ST7735Ctx.Height);
	uint8_t madctl_value = 0x60; // 가로 180도 회전에 대한 예상 값, 데이터시트 확인 필요
 8001d84:	2360      	movs	r3, #96	@ 0x60
 8001d86:	72bb      	strb	r3, [r7, #10]
	ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &madctl_value, 1);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f103 0020 	add.w	r0, r3, #32
 8001d8e:	f107 020a 	add.w	r2, r7, #10
 8001d92:	2301      	movs	r3, #1
 8001d94:	2136      	movs	r1, #54	@ 0x36
 8001d96:	f000 fd5f 	bl	8002858 <st7735_write_reg>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4413      	add	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]

	tmp = ST7735Ctx.Panel == HannStar_Panel ?
 8001da2:	4b17      	ldr	r3, [pc, #92]	@ (8001e00 <ST7735_SetOrientation+0x130>)
 8001da4:	7b1b      	ldrb	r3, [r3, #12]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10a      	bne.n	8001dc0 <ST7735_SetOrientation+0xf0>
			(uint8_t) OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8001daa:	4b15      	ldr	r3, [pc, #84]	@ (8001e00 <ST7735_SetOrientation+0x130>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	4a15      	ldr	r2, [pc, #84]	@ (8001e04 <ST7735_SetOrientation+0x134>)
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4413      	add	r3, r2
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ?
 8001db8:	f043 0308 	orr.w	r3, r3, #8
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	e006      	b.n	8001dce <ST7735_SetOrientation+0xfe>
			(uint8_t) OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8001dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e00 <ST7735_SetOrientation+0x130>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	4a0f      	ldr	r2, [pc, #60]	@ (8001e04 <ST7735_SetOrientation+0x134>)
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4413      	add	r3, r2
 8001dca:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ?
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	72fb      	strb	r3, [r7, #11]
	ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f103 0020 	add.w	r0, r3, #32
 8001dd6:	f107 020b 	add.w	r2, r7, #11
 8001dda:	2301      	movs	r3, #1
 8001ddc:	2136      	movs	r1, #54	@ 0x36
 8001dde:	f000 fd3b 	bl	8002858 <st7735_write_reg>
 8001de2:	4602      	mov	r2, r0
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4413      	add	r3, r2
 8001de8:	60fb      	str	r3, [r7, #12]

	if (ret != ST7735_OK) {
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d002      	beq.n	8001df6 <ST7735_SetOrientation+0x126>
		ret = ST7735_ERROR;
 8001df0:	f04f 33ff 	mov.w	r3, #4294967295
 8001df4:	60fb      	str	r3, [r7, #12]
	}

	return ret;
 8001df6:	68fb      	ldr	r3, [r7, #12]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	240005b4 	.word	0x240005b4
 8001e04:	24000070 	.word	0x24000070

08001e08 <ST7735_GetOrientation>:
 * @param  pObj Component object
 * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_LANDSCAPE
 *                      or ST7735_ORIENTATION_LANDSCAPE_ROT180
 * @retval The component status
 */
int32_t ST7735_GetOrientation(ST7735_Object_t *pObj, uint32_t *Orientation) {
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]

	*Orientation = ST7735Ctx.Orientation;
 8001e12:	4b05      	ldr	r3, [pc, #20]	@ (8001e28 <ST7735_GetOrientation+0x20>)
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	601a      	str	r2, [r3, #0]

	return ST7735_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	240005b4 	.word	0x240005b4

08001e2c <ST7735_SetCursor>:
 * @param  pObj Component object
 * @param  Xpos specifies the X position.
 * @param  Ypos specifies the Y position.
 * @retval The component status
 */
int32_t ST7735_SetCursor(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos) {
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
	int32_t ret;
	uint8_t tmp;

	/* Cursor calibration */
	if (ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 8001e38:	4b59      	ldr	r3, [pc, #356]	@ (8001fa0 <ST7735_SetCursor+0x174>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d821      	bhi.n	8001e84 <ST7735_SetCursor+0x58>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8001e40:	4b57      	ldr	r3, [pc, #348]	@ (8001fa0 <ST7735_SetCursor+0x174>)
 8001e42:	7b5b      	ldrb	r3, [r3, #13]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d10e      	bne.n	8001e66 <ST7735_SetCursor+0x3a>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 8001e48:	4b55      	ldr	r3, [pc, #340]	@ (8001fa0 <ST7735_SetCursor+0x174>)
 8001e4a:	7b1b      	ldrb	r3, [r3, #12]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d106      	bne.n	8001e5e <ST7735_SetCursor+0x32>
				Xpos += 26;
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	331a      	adds	r3, #26
 8001e54:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	e033      	b.n	8001ec6 <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 24;
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	3318      	adds	r3, #24
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	e02f      	b.n	8001ec6 <ST7735_SetCursor+0x9a>
				Ypos += 0;
			}
		} else if (ST7735Ctx.Type == ST7735_1_8a_inch_screen) {
 8001e66:	4b4e      	ldr	r3, [pc, #312]	@ (8001fa0 <ST7735_SetCursor+0x174>)
 8001e68:	7b5b      	ldrb	r3, [r3, #13]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d12b      	bne.n	8001ec6 <ST7735_SetCursor+0x9a>
			if (ST7735Ctx.Panel == BOE_Panel) {
 8001e6e:	4b4c      	ldr	r3, [pc, #304]	@ (8001fa0 <ST7735_SetCursor+0x174>)
 8001e70:	7b1b      	ldrb	r3, [r3, #12]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d127      	bne.n	8001ec6 <ST7735_SetCursor+0x9a>
				Xpos += 2;
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	3302      	adds	r3, #2
 8001e7a:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	607b      	str	r3, [r7, #4]
 8001e82:	e020      	b.n	8001ec6 <ST7735_SetCursor+0x9a>
			}
		}
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 8001e84:	4b46      	ldr	r3, [pc, #280]	@ (8001fa0 <ST7735_SetCursor+0x174>)
 8001e86:	7b5b      	ldrb	r3, [r3, #13]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d10e      	bne.n	8001eaa <ST7735_SetCursor+0x7e>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 8001e8c:	4b44      	ldr	r3, [pc, #272]	@ (8001fa0 <ST7735_SetCursor+0x174>)
 8001e8e:	7b1b      	ldrb	r3, [r3, #12]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d106      	bne.n	8001ea2 <ST7735_SetCursor+0x76>
				Xpos += 1;
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	3301      	adds	r3, #1
 8001e98:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	331a      	adds	r3, #26
 8001e9e:	607b      	str	r3, [r7, #4]
 8001ea0:	e011      	b.n	8001ec6 <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 0;
				Ypos += 24;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3318      	adds	r3, #24
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	e00d      	b.n	8001ec6 <ST7735_SetCursor+0x9a>
			}
		} else if (ST7735Ctx.Type == ST7735_1_8a_inch_screen) {
 8001eaa:	4b3d      	ldr	r3, [pc, #244]	@ (8001fa0 <ST7735_SetCursor+0x174>)
 8001eac:	7b5b      	ldrb	r3, [r3, #13]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d109      	bne.n	8001ec6 <ST7735_SetCursor+0x9a>
			if (ST7735Ctx.Panel == BOE_Panel) {
 8001eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8001fa0 <ST7735_SetCursor+0x174>)
 8001eb4:	7b1b      	ldrb	r3, [r3, #12]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d105      	bne.n	8001ec6 <ST7735_SetCursor+0x9a>
				Xpos += 1;
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	607b      	str	r3, [r7, #4]
			}
		}
	}

	ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f103 0020 	add.w	r0, r3, #32
 8001ecc:	f107 0213 	add.w	r2, r7, #19
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	212a      	movs	r1, #42	@ 0x2a
 8001ed4:	f000 fcc0 	bl	8002858 <st7735_write_reg>
 8001ed8:	6178      	str	r0, [r7, #20]
	tmp = (uint8_t) (Xpos >> 8U);
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	0a1b      	lsrs	r3, r3, #8
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	74fb      	strb	r3, [r7, #19]
	ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	3320      	adds	r3, #32
 8001ee6:	f107 0113 	add.w	r1, r7, #19
 8001eea:	2201      	movs	r2, #1
 8001eec:	4618      	mov	r0, r3
 8001eee:	f000 fcc8 	bl	8002882 <st7735_send_data>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	617b      	str	r3, [r7, #20]
	tmp = (uint8_t) (Xpos & 0xFFU);
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	74fb      	strb	r3, [r7, #19]
	ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	3320      	adds	r3, #32
 8001f04:	f107 0113 	add.w	r1, r7, #19
 8001f08:	2201      	movs	r2, #1
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 fcb9 	bl	8002882 <st7735_send_data>
 8001f10:	4602      	mov	r2, r0
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	4413      	add	r3, r2
 8001f16:	617b      	str	r3, [r7, #20]

	ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f103 0020 	add.w	r0, r3, #32
 8001f1e:	f107 0213 	add.w	r2, r7, #19
 8001f22:	2300      	movs	r3, #0
 8001f24:	212b      	movs	r1, #43	@ 0x2b
 8001f26:	f000 fc97 	bl	8002858 <st7735_write_reg>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	4413      	add	r3, r2
 8001f30:	617b      	str	r3, [r7, #20]
	tmp = (uint8_t) (Ypos >> 8U);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	0a1b      	lsrs	r3, r3, #8
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	74fb      	strb	r3, [r7, #19]
	ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	3320      	adds	r3, #32
 8001f3e:	f107 0113 	add.w	r1, r7, #19
 8001f42:	2201      	movs	r2, #1
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 fc9c 	bl	8002882 <st7735_send_data>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	4413      	add	r3, r2
 8001f50:	617b      	str	r3, [r7, #20]
	tmp = (uint8_t) (Ypos & 0xFFU);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	74fb      	strb	r3, [r7, #19]
	ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	3320      	adds	r3, #32
 8001f5c:	f107 0113 	add.w	r1, r7, #19
 8001f60:	2201      	movs	r2, #1
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 fc8d 	bl	8002882 <st7735_send_data>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	617b      	str	r3, [r7, #20]
	ret += st7735_write_reg(&pObj->Ctx, ST7735_WRITE_RAM, &tmp, 0);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f103 0020 	add.w	r0, r3, #32
 8001f76:	f107 0213 	add.w	r2, r7, #19
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	212c      	movs	r1, #44	@ 0x2c
 8001f7e:	f000 fc6b 	bl	8002858 <st7735_write_reg>
 8001f82:	4602      	mov	r2, r0
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	4413      	add	r3, r2
 8001f88:	617b      	str	r3, [r7, #20]

	if (ret != ST7735_OK) {
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <ST7735_SetCursor+0x16a>
		ret = ST7735_ERROR;
 8001f90:	f04f 33ff 	mov.w	r3, #4294967295
 8001f94:	617b      	str	r3, [r7, #20]
	}

	return ret;
 8001f96:	697b      	ldr	r3, [r7, #20]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	240005b4 	.word	0x240005b4

08001fa4 <ST7735_DrawBitmap>:
 * @param  Ypos Bmp Y position in the LCD
 * @param  pBmp Bmp picture address.
 * @retval The component status
 */
int32_t ST7735_DrawBitmap(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos,
		uint8_t *pBmp) {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b090      	sub	sp, #64	@ 0x40
 8001fa8:	af02      	add	r7, sp, #8
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	603b      	str	r3, [r7, #0]
	int32_t ret = ST7735_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t index, size, width, height, y_pos;
	uint8_t pixel_val[2], tmp;
	uint8_t *pbmp;
	uint32_t counter = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Get bitmap data address offset */
	index = (uint32_t) pBmp[10] + ((uint32_t) pBmp[11] << 8)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	330a      	adds	r3, #10
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	330b      	adds	r3, #11
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	021b      	lsls	r3, r3, #8
 8001fca:	441a      	add	r2, r3
			+ ((uint32_t) pBmp[12] << 16) + ((uint32_t) pBmp[13] << 24);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	330c      	adds	r3, #12
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	041b      	lsls	r3, r3, #16
 8001fd4:	441a      	add	r2, r3
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	330d      	adds	r3, #13
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	061b      	lsls	r3, r3, #24
	index = (uint32_t) pBmp[10] + ((uint32_t) pBmp[11] << 8)
 8001fde:	4413      	add	r3, r2
 8001fe0:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Read bitmap width */
	width = (uint32_t) pBmp[18] + ((uint32_t) pBmp[19] << 8)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	3312      	adds	r3, #18
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	3313      	adds	r3, #19
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	021b      	lsls	r3, r3, #8
 8001ff2:	441a      	add	r2, r3
			+ ((uint32_t) pBmp[20] << 16) + ((uint32_t) pBmp[21] << 24);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	3314      	adds	r3, #20
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	041b      	lsls	r3, r3, #16
 8001ffc:	441a      	add	r2, r3
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	3315      	adds	r3, #21
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	061b      	lsls	r3, r3, #24
	width = (uint32_t) pBmp[18] + ((uint32_t) pBmp[19] << 8)
 8002006:	4413      	add	r3, r2
 8002008:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Read bitmap height */
	height = (uint32_t) pBmp[22] + ((uint32_t) pBmp[23] << 8)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	3316      	adds	r3, #22
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	461a      	mov	r2, r3
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	3317      	adds	r3, #23
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	021b      	lsls	r3, r3, #8
 800201a:	441a      	add	r2, r3
			+ ((uint32_t) pBmp[24] << 16) + ((uint32_t) pBmp[25] << 24);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	3318      	adds	r3, #24
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	041b      	lsls	r3, r3, #16
 8002024:	441a      	add	r2, r3
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	3319      	adds	r3, #25
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	061b      	lsls	r3, r3, #24
	height = (uint32_t) pBmp[22] + ((uint32_t) pBmp[23] << 8)
 800202e:	4413      	add	r3, r2
 8002030:	623b      	str	r3, [r7, #32]

	/* Read bitmap size */
	size = (uint32_t) pBmp[2] + ((uint32_t) pBmp[3] << 8)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	3302      	adds	r3, #2
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	461a      	mov	r2, r3
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	3303      	adds	r3, #3
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	021b      	lsls	r3, r3, #8
 8002042:	441a      	add	r2, r3
			+ ((uint32_t) pBmp[4] << 16) + ((uint32_t) pBmp[5] << 24);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	3304      	adds	r3, #4
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	041b      	lsls	r3, r3, #16
 800204c:	441a      	add	r2, r3
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	3305      	adds	r3, #5
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	061b      	lsls	r3, r3, #24
	size = (uint32_t) pBmp[2] + ((uint32_t) pBmp[3] << 8)
 8002056:	4413      	add	r3, r2
 8002058:	61fb      	str	r3, [r7, #28]
	size = size - index;
 800205a:	69fa      	ldr	r2, [r7, #28]
 800205c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	61fb      	str	r3, [r7, #28]

	pbmp = pBmp + index;
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002066:	4413      	add	r3, r2
 8002068:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Remap Ypos, st7735 works with inverted X in case of bitmap */
	/* X = 0, cursor is on Top corner */
	y_pos = ST7735Ctx.Height - Ypos - height;
 800206a:	4b51      	ldr	r3, [pc, #324]	@ (80021b0 <ST7735_DrawBitmap+0x20c>)
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	1ad2      	subs	r2, r2, r3
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	61bb      	str	r3, [r7, #24]

	if (ST7735_SetDisplayWindow(pObj, Xpos, y_pos, width, height) != ST7735_OK) {
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	68b9      	ldr	r1, [r7, #8]
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 fa6a 	bl	800255c <ST7735_SetDisplayWindow>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <ST7735_DrawBitmap+0xf2>
		ret = ST7735_ERROR;
 800208e:	f04f 33ff 	mov.w	r3, #4294967295
 8002092:	637b      	str	r3, [r7, #52]	@ 0x34
 8002094:	e087      	b.n	80021a6 <ST7735_DrawBitmap+0x202>
	} else {
		/* Set GRAM write direction and BGR = 0 */
		tmp = ST7735Ctx.Panel == HannStar_Panel ?
 8002096:	4b46      	ldr	r3, [pc, #280]	@ (80021b0 <ST7735_DrawBitmap+0x20c>)
 8002098:	7b1b      	ldrb	r3, [r3, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d109      	bne.n	80020b2 <ST7735_DrawBitmap+0x10e>
				(uint8_t) OrientationTab[ST7735Ctx.Orientation][0] | LCD_BGR :
 800209e:	4b44      	ldr	r3, [pc, #272]	@ (80021b0 <ST7735_DrawBitmap+0x20c>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	4a44      	ldr	r2, [pc, #272]	@ (80021b4 <ST7735_DrawBitmap+0x210>)
 80020a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80020a8:	b2db      	uxtb	r3, r3
		tmp = ST7735Ctx.Panel == HannStar_Panel ?
 80020aa:	f043 0308 	orr.w	r3, r3, #8
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	e005      	b.n	80020be <ST7735_DrawBitmap+0x11a>
				(uint8_t) OrientationTab[ST7735Ctx.Orientation][0] | LCD_RGB;
 80020b2:	4b3f      	ldr	r3, [pc, #252]	@ (80021b0 <ST7735_DrawBitmap+0x20c>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	4a3f      	ldr	r2, [pc, #252]	@ (80021b4 <ST7735_DrawBitmap+0x210>)
 80020b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
		tmp = ST7735Ctx.Panel == HannStar_Panel ?
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	74fb      	strb	r3, [r7, #19]

		if (st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK) {
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f103 0020 	add.w	r0, r3, #32
 80020c6:	f107 0213 	add.w	r2, r7, #19
 80020ca:	2301      	movs	r3, #1
 80020cc:	2136      	movs	r1, #54	@ 0x36
 80020ce:	f000 fbc3 	bl	8002858 <st7735_write_reg>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <ST7735_DrawBitmap+0x13c>
			ret = ST7735_ERROR;
 80020d8:	f04f 33ff 	mov.w	r3, #4294967295
 80020dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80020de:	e062      	b.n	80021a6 <ST7735_DrawBitmap+0x202>
		}/* Set Cursor */
		else if (ST7735_SetCursor(pObj, Xpos, y_pos) != ST7735_OK) {
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	68b9      	ldr	r1, [r7, #8]
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f7ff fea1 	bl	8001e2c <ST7735_SetCursor>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <ST7735_DrawBitmap+0x154>
			ret = ST7735_ERROR;
 80020f0:	f04f 33ff 	mov.w	r3, #4294967295
 80020f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80020f6:	e056      	b.n	80021a6 <ST7735_DrawBitmap+0x202>
		} else {
			do {
				pixel_val[0] = *(pbmp + 1);
 80020f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020fa:	785b      	ldrb	r3, [r3, #1]
 80020fc:	753b      	strb	r3, [r7, #20]
				pixel_val[1] = *(pbmp);
 80020fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	757b      	strb	r3, [r7, #21]
				if (st7735_send_data(&pObj->Ctx, pixel_val, 2U) != ST7735_OK) {
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	3320      	adds	r3, #32
 8002108:	f107 0114 	add.w	r1, r7, #20
 800210c:	2202      	movs	r2, #2
 800210e:	4618      	mov	r0, r3
 8002110:	f000 fbb7 	bl	8002882 <st7735_send_data>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <ST7735_DrawBitmap+0x17e>
					ret = ST7735_ERROR;
 800211a:	f04f 33ff 	mov.w	r3, #4294967295
 800211e:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8002120:	e009      	b.n	8002136 <ST7735_DrawBitmap+0x192>
				}
				counter += 2U;
 8002122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002124:	3302      	adds	r3, #2
 8002126:	62fb      	str	r3, [r7, #44]	@ 0x2c
				pbmp += 2;
 8002128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800212a:	3302      	adds	r3, #2
 800212c:	633b      	str	r3, [r7, #48]	@ 0x30
			} while (counter < size);
 800212e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	429a      	cmp	r2, r3
 8002134:	d3e0      	bcc.n	80020f8 <ST7735_DrawBitmap+0x154>

			tmp =
					ST7735Ctx.Panel == HannStar_Panel ?
 8002136:	4b1e      	ldr	r3, [pc, #120]	@ (80021b0 <ST7735_DrawBitmap+0x20c>)
 8002138:	7b1b      	ldrb	r3, [r3, #12]
			tmp =
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10a      	bne.n	8002154 <ST7735_DrawBitmap+0x1b0>
							(uint8_t) OrientationTab[ST7735Ctx.Orientation][1]
 800213e:	4b1c      	ldr	r3, [pc, #112]	@ (80021b0 <ST7735_DrawBitmap+0x20c>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	4a1c      	ldr	r2, [pc, #112]	@ (80021b4 <ST7735_DrawBitmap+0x210>)
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	4413      	add	r3, r2
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	b2db      	uxtb	r3, r3
			tmp =
 800214c:	f043 0308 	orr.w	r3, r3, #8
 8002150:	b2db      	uxtb	r3, r3
 8002152:	e006      	b.n	8002162 <ST7735_DrawBitmap+0x1be>
									| LCD_BGR :
							(uint8_t) OrientationTab[ST7735Ctx.Orientation][1]
 8002154:	4b16      	ldr	r3, [pc, #88]	@ (80021b0 <ST7735_DrawBitmap+0x20c>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	4a16      	ldr	r2, [pc, #88]	@ (80021b4 <ST7735_DrawBitmap+0x210>)
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4413      	add	r3, r2
 800215e:	685b      	ldr	r3, [r3, #4]
			tmp =
 8002160:	b2db      	uxtb	r3, r3
 8002162:	74fb      	strb	r3, [r7, #19]
									| LCD_RGB;
			if (st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp,
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f103 0020 	add.w	r0, r3, #32
 800216a:	f107 0213 	add.w	r2, r7, #19
 800216e:	2301      	movs	r3, #1
 8002170:	2136      	movs	r1, #54	@ 0x36
 8002172:	f000 fb71 	bl	8002858 <st7735_write_reg>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <ST7735_DrawBitmap+0x1e0>
					1) != ST7735_OK) {
				ret = ST7735_ERROR;
 800217c:	f04f 33ff 	mov.w	r3, #4294967295
 8002180:	637b      	str	r3, [r7, #52]	@ 0x34
 8002182:	e010      	b.n	80021a6 <ST7735_DrawBitmap+0x202>
			} else {
				if (ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width,
 8002184:	4b0a      	ldr	r3, [pc, #40]	@ (80021b0 <ST7735_DrawBitmap+0x20c>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4b09      	ldr	r3, [pc, #36]	@ (80021b0 <ST7735_DrawBitmap+0x20c>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	4613      	mov	r3, r2
 8002190:	2200      	movs	r2, #0
 8002192:	2100      	movs	r1, #0
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f000 f9e1 	bl	800255c <ST7735_SetDisplayWindow>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d002      	beq.n	80021a6 <ST7735_DrawBitmap+0x202>
						ST7735Ctx.Height) != ST7735_OK) {
					ret = ST7735_ERROR;
 80021a0:	f04f 33ff 	mov.w	r3, #4294967295
 80021a4:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
	}

	return ret;
 80021a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3738      	adds	r7, #56	@ 0x38
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	240005b4 	.word	0x240005b4
 80021b4:	24000070 	.word	0x24000070

080021b8 <ST7735_FillRGBRect>:
 * @param  Width  specifies the rectangle width.
 * @param  Height Specifies the rectangle height
 * @retval The component status
 */
int32_t ST7735_FillRGBRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos,
		uint8_t *pData, uint32_t Width, uint32_t Height) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	603b      	str	r3, [r7, #0]
	int32_t ret = ST7735_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61fb      	str	r3, [r7, #28]
	static uint8_t pdata[640];
	uint8_t *rgb_data = pData;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	61bb      	str	r3, [r7, #24]
	uint32_t i, j;

	if (((Xpos + Width) > ST7735Ctx.Width)
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021d2:	441a      	add	r2, r3
 80021d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002284 <ST7735_FillRGBRect+0xcc>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d806      	bhi.n	80021ea <ST7735_FillRGBRect+0x32>
			|| ((Ypos + Height) > ST7735Ctx.Height)) {
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021e0:	441a      	add	r2, r3
 80021e2:	4b28      	ldr	r3, [pc, #160]	@ (8002284 <ST7735_FillRGBRect+0xcc>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d903      	bls.n	80021f2 <ST7735_FillRGBRect+0x3a>
		ret = ST7735_ERROR;
 80021ea:	f04f 33ff 	mov.w	r3, #4294967295
 80021ee:	61fb      	str	r3, [r7, #28]
 80021f0:	e042      	b.n	8002278 <ST7735_FillRGBRect+0xc0>
	}/* Set Cursor */
	else {
		for (j = 0; j < Height; j++) {
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	e03b      	b.n	8002270 <ST7735_FillRGBRect+0xb8>
			if (ST7735_SetCursor(pObj, Xpos, Ypos + j) != ST7735_OK) {
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4413      	add	r3, r2
 80021fe:	461a      	mov	r2, r3
 8002200:	68b9      	ldr	r1, [r7, #8]
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f7ff fe12 	bl	8001e2c <ST7735_SetCursor>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <ST7735_FillRGBRect+0x5e>
				ret = ST7735_ERROR;
 800220e:	f04f 33ff 	mov.w	r3, #4294967295
 8002212:	61fb      	str	r3, [r7, #28]
 8002214:	e029      	b.n	800226a <ST7735_FillRGBRect+0xb2>
			} else {
				for (i = 0; i < Width; i++) {
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	e013      	b.n	8002244 <ST7735_FillRGBRect+0x8c>
					pdata[2U * i] = (uint8_t) (*(rgb_data));
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	7811      	ldrb	r1, [r2, #0]
 8002224:	4a18      	ldr	r2, [pc, #96]	@ (8002288 <ST7735_FillRGBRect+0xd0>)
 8002226:	54d1      	strb	r1, [r2, r3]
					pdata[(2U * i) + 1U] = (uint8_t) (*(rgb_data + 1));
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	3301      	adds	r3, #1
 8002232:	7811      	ldrb	r1, [r2, #0]
 8002234:	4a14      	ldr	r2, [pc, #80]	@ (8002288 <ST7735_FillRGBRect+0xd0>)
 8002236:	54d1      	strb	r1, [r2, r3]
					rgb_data += 2;
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	3302      	adds	r3, #2
 800223c:	61bb      	str	r3, [r7, #24]
				for (i = 0; i < Width; i++) {
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	3301      	adds	r3, #1
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002248:	429a      	cmp	r2, r3
 800224a:	d3e7      	bcc.n	800221c <ST7735_FillRGBRect+0x64>
				}
				if (st7735_send_data(&pObj->Ctx, (uint8_t*) &pdata[0],
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f103 0020 	add.w	r0, r3, #32
 8002252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	461a      	mov	r2, r3
 8002258:	490b      	ldr	r1, [pc, #44]	@ (8002288 <ST7735_FillRGBRect+0xd0>)
 800225a:	f000 fb12 	bl	8002882 <st7735_send_data>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d002      	beq.n	800226a <ST7735_FillRGBRect+0xb2>
						2U * Width) != ST7735_OK) {
					ret = ST7735_ERROR;
 8002264:	f04f 33ff 	mov.w	r3, #4294967295
 8002268:	61fb      	str	r3, [r7, #28]
		for (j = 0; j < Height; j++) {
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	3301      	adds	r3, #1
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002274:	429a      	cmp	r2, r3
 8002276:	d3bf      	bcc.n	80021f8 <ST7735_FillRGBRect+0x40>
				}
			}
		}
	}

	return ret;
 8002278:	69fb      	ldr	r3, [r7, #28]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3720      	adds	r7, #32
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	240005b4 	.word	0x240005b4
 8002288:	240005c4 	.word	0x240005c4

0800228c <ST7735_DrawHLine>:
 * @param  Length specifies the Line length.
 * @param  Color  Specifies the RGB color in RGB565 format
 * @retval The component status
 */
int32_t ST7735_DrawHLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos,
		uint32_t Length, uint32_t Color) {
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
 8002298:	603b      	str	r3, [r7, #0]
	int32_t ret = ST7735_OK;
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
	uint32_t i;
	static uint8_t pdata[640];

	if ((Xpos + Length) > ST7735Ctx.Width) {
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	441a      	add	r2, r3
 80022a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002324 <ST7735_DrawHLine+0x98>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d903      	bls.n	80022b4 <ST7735_DrawHLine+0x28>
		ret = ST7735_ERROR;
 80022ac:	f04f 33ff 	mov.w	r3, #4294967295
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	e032      	b.n	800231a <ST7735_DrawHLine+0x8e>
	}/* Set Cursor */
	else if (ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK) {
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	68b9      	ldr	r1, [r7, #8]
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f7ff fdb7 	bl	8001e2c <ST7735_SetCursor>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <ST7735_DrawHLine+0x40>
		ret = ST7735_ERROR;
 80022c4:	f04f 33ff 	mov.w	r3, #4294967295
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	e026      	b.n	800231a <ST7735_DrawHLine+0x8e>
	} else {
		for (i = 0; i < Length; i++) {
 80022cc:	2300      	movs	r3, #0
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	e010      	b.n	80022f4 <ST7735_DrawHLine+0x68>
			/* Exchange LSB and MSB to fit LCD specification */
			pdata[2U * i] = (uint8_t) (Color >> 8);
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	0a1a      	lsrs	r2, r3, #8
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	b2d1      	uxtb	r1, r2
 80022dc:	4a12      	ldr	r2, [pc, #72]	@ (8002328 <ST7735_DrawHLine+0x9c>)
 80022de:	54d1      	strb	r1, [r2, r3]
			pdata[(2U * i) + 1U] = (uint8_t) (Color);
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	3301      	adds	r3, #1
 80022e6:	6a3a      	ldr	r2, [r7, #32]
 80022e8:	b2d1      	uxtb	r1, r2
 80022ea:	4a0f      	ldr	r2, [pc, #60]	@ (8002328 <ST7735_DrawHLine+0x9c>)
 80022ec:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < Length; i++) {
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	3301      	adds	r3, #1
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d3ea      	bcc.n	80022d2 <ST7735_DrawHLine+0x46>

//      pdata[(2U*i) + 1U] = (uint8_t)(Color >> 8);
//      pdata[2U*i] = (uint8_t)(Color);			
		}
		if (st7735_send_data(&pObj->Ctx, (uint8_t*) &pdata[0],
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f103 0020 	add.w	r0, r3, #32
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	461a      	mov	r2, r3
 8002308:	4907      	ldr	r1, [pc, #28]	@ (8002328 <ST7735_DrawHLine+0x9c>)
 800230a:	f000 faba 	bl	8002882 <st7735_send_data>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d002      	beq.n	800231a <ST7735_DrawHLine+0x8e>
				2U * Length) != ST7735_OK) {
			ret = ST7735_ERROR;
 8002314:	f04f 33ff 	mov.w	r3, #4294967295
 8002318:	617b      	str	r3, [r7, #20]
		}
	}

	return ret;
 800231a:	697b      	ldr	r3, [r7, #20]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	240005b4 	.word	0x240005b4
 8002328:	24000844 	.word	0x24000844

0800232c <ST7735_DrawVLine>:
 * @param  Ypos     specifies the Y position.
 * @param  Length   specifies the Line length.
 * @retval The component status
 */
int32_t ST7735_DrawVLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos,
		uint32_t Length, uint32_t Color) {
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
 8002338:	603b      	str	r3, [r7, #0]
	int32_t ret = ST7735_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
	uint32_t counter;

	if ((Ypos + Length) > ST7735Ctx.Height) {
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	441a      	add	r2, r3
 8002344:	4b12      	ldr	r3, [pc, #72]	@ (8002390 <ST7735_DrawVLine+0x64>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	429a      	cmp	r2, r3
 800234a:	d903      	bls.n	8002354 <ST7735_DrawVLine+0x28>
		ret = ST7735_ERROR;
 800234c:	f04f 33ff 	mov.w	r3, #4294967295
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	e018      	b.n	8002386 <ST7735_DrawVLine+0x5a>
	} else {
		for (counter = 0; counter < Length; counter++) {
 8002354:	2300      	movs	r3, #0
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	e011      	b.n	800237e <ST7735_DrawVLine+0x52>
			if (ST7735_SetPixel(pObj, Xpos, Ypos + counter, Color) != ST7735_OK) {
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	441a      	add	r2, r3
 8002360:	6a3b      	ldr	r3, [r7, #32]
 8002362:	68b9      	ldr	r1, [r7, #8]
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 f841 	bl	80023ec <ST7735_SetPixel>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <ST7735_DrawVLine+0x4c>
				ret = ST7735_ERROR;
 8002370:	f04f 33ff 	mov.w	r3, #4294967295
 8002374:	617b      	str	r3, [r7, #20]
				break;
 8002376:	e006      	b.n	8002386 <ST7735_DrawVLine+0x5a>
		for (counter = 0; counter < Length; counter++) {
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	3301      	adds	r3, #1
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d3e9      	bcc.n	800235a <ST7735_DrawVLine+0x2e>
			}
		}
	}

	return ret;
 8002386:	697b      	ldr	r3, [r7, #20]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	240005b4 	.word	0x240005b4

08002394 <ST7735_FillRect>:
 * @param  Height Rectangle height
 * @param  Color Draw color
 * @retval Component status
 */
int32_t ST7735_FillRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos,
		uint32_t Width, uint32_t Height, uint32_t Color) {
 8002394:	b580      	push	{r7, lr}
 8002396:	b08a      	sub	sp, #40	@ 0x28
 8002398:	af02      	add	r7, sp, #8
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
 80023a0:	603b      	str	r3, [r7, #0]
	int32_t ret = ST7735_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
	uint32_t i, y_pos = Ypos;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	617b      	str	r3, [r7, #20]

	for (i = 0; i < Height; i++) {
 80023aa:	2300      	movs	r3, #0
 80023ac:	61bb      	str	r3, [r7, #24]
 80023ae:	e014      	b.n	80023da <ST7735_FillRect+0x46>
		if (ST7735_DrawHLine(pObj, Xpos, y_pos, Width, Color) != ST7735_OK) {
 80023b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	68b9      	ldr	r1, [r7, #8]
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f7ff ff66 	bl	800228c <ST7735_DrawHLine>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <ST7735_FillRect+0x3a>
			ret = ST7735_ERROR;
 80023c6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ca:	61fb      	str	r3, [r7, #28]
			break;
 80023cc:	e009      	b.n	80023e2 <ST7735_FillRect+0x4e>
		}
		y_pos++;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	3301      	adds	r3, #1
 80023d2:	617b      	str	r3, [r7, #20]
	for (i = 0; i < Height; i++) {
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	3301      	adds	r3, #1
 80023d8:	61bb      	str	r3, [r7, #24]
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023de:	429a      	cmp	r2, r3
 80023e0:	d3e6      	bcc.n	80023b0 <ST7735_FillRect+0x1c>
	}

	return ret;
 80023e2:	69fb      	ldr	r3, [r7, #28]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3720      	adds	r7, #32
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <ST7735_SetPixel>:
 * @param  Ypos specifies the Y position.
 * @param  Color the RGB pixel color in RGB565 format
 * @retval The component status
 */
int32_t ST7735_SetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos,
		uint32_t Color) {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
 80023f8:	603b      	str	r3, [r7, #0]
	int32_t ret = ST7735_OK;
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
	uint16_t color;

	/* Exchange LSB and MSB to fit LCD specification */
	color = (uint16_t) ((uint16_t) Color << 8);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	b29b      	uxth	r3, r3
 8002402:	021b      	lsls	r3, r3, #8
 8002404:	b29b      	uxth	r3, r3
 8002406:	827b      	strh	r3, [r7, #18]
	color |= (uint16_t) ((uint16_t) (Color >> 8));
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	0a1b      	lsrs	r3, r3, #8
 800240c:	b29a      	uxth	r2, r3
 800240e:	8a7b      	ldrh	r3, [r7, #18]
 8002410:	4313      	orrs	r3, r2
 8002412:	b29b      	uxth	r3, r3
 8002414:	827b      	strh	r3, [r7, #18]

	if ((Xpos >= ST7735Ctx.Width) || (Ypos >= ST7735Ctx.Height)) {
 8002416:	4b16      	ldr	r3, [pc, #88]	@ (8002470 <ST7735_SetPixel+0x84>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	429a      	cmp	r2, r3
 800241e:	d204      	bcs.n	800242a <ST7735_SetPixel+0x3e>
 8002420:	4b13      	ldr	r3, [pc, #76]	@ (8002470 <ST7735_SetPixel+0x84>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	429a      	cmp	r2, r3
 8002428:	d303      	bcc.n	8002432 <ST7735_SetPixel+0x46>
		ret = ST7735_ERROR;
 800242a:	f04f 33ff 	mov.w	r3, #4294967295
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	e019      	b.n	8002466 <ST7735_SetPixel+0x7a>
	}/* Set Cursor */
	else if (ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK) {
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f7ff fcf8 	bl	8001e2c <ST7735_SetCursor>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <ST7735_SetPixel+0x5e>
		ret = ST7735_ERROR;
 8002442:	f04f 33ff 	mov.w	r3, #4294967295
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	e00d      	b.n	8002466 <ST7735_SetPixel+0x7a>
	} else {
		/* Write RAM data */
		if (st7735_send_data(&pObj->Ctx, (uint8_t*) &color, 2) != ST7735_OK) {
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	3320      	adds	r3, #32
 800244e:	f107 0112 	add.w	r1, r7, #18
 8002452:	2202      	movs	r2, #2
 8002454:	4618      	mov	r0, r3
 8002456:	f000 fa14 	bl	8002882 <st7735_send_data>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <ST7735_SetPixel+0x7a>
			ret = ST7735_ERROR;
 8002460:	f04f 33ff 	mov.w	r3, #4294967295
 8002464:	617b      	str	r3, [r7, #20]
		}
	}

	return ret;
 8002466:	697b      	ldr	r3, [r7, #20]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	240005b4 	.word	0x240005b4

08002474 <ST7735_GetPixel>:
 * @param  Ypos specifies the Y position.
 * @param  Color the RGB pixel color in RGB565 format
 * @retval The component status
 */
int32_t ST7735_GetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos,
		uint32_t *Color) {
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
 8002480:	603b      	str	r3, [r7, #0]
	int32_t ret;
	uint8_t pixel_lsb, pixel_msb;
	uint8_t tmp;

	/* Set Cursor */
	ret = ST7735_SetCursor(pObj, Xpos, Ypos);
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68b9      	ldr	r1, [r7, #8]
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f7ff fcd0 	bl	8001e2c <ST7735_SetCursor>
 800248c:	6178      	str	r0, [r7, #20]

	/* Prepare to read LCD RAM */
	ret += st7735_read_reg(&pObj->Ctx, ST7735_READ_RAM, &tmp); /* RAM read data command */
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	3320      	adds	r3, #32
 8002492:	f107 0211 	add.w	r2, r7, #17
 8002496:	212e      	movs	r1, #46	@ 0x2e
 8002498:	4618      	mov	r0, r3
 800249a:	f000 f9ca 	bl	8002832 <st7735_read_reg>
 800249e:	4602      	mov	r2, r0
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	4413      	add	r3, r2
 80024a4:	617b      	str	r3, [r7, #20]

	/* Dummy read */
	ret += st7735_recv_data(&pObj->Ctx, &tmp, 1);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	3320      	adds	r3, #32
 80024aa:	f107 0111 	add.w	r1, r7, #17
 80024ae:	2201      	movs	r2, #1
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 f9f8 	bl	80028a6 <st7735_recv_data>
 80024b6:	4602      	mov	r2, r0
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	4413      	add	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]

	/* Read first part of the RGB888 data */
	ret += st7735_recv_data(&pObj->Ctx, &pixel_lsb, 1);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	3320      	adds	r3, #32
 80024c2:	f107 0113 	add.w	r1, r7, #19
 80024c6:	2201      	movs	r2, #1
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 f9ec 	bl	80028a6 <st7735_recv_data>
 80024ce:	4602      	mov	r2, r0
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	4413      	add	r3, r2
 80024d4:	617b      	str	r3, [r7, #20]
	/* Read first part of the RGB888 data */
	ret += st7735_recv_data(&pObj->Ctx, &pixel_msb, 1);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	3320      	adds	r3, #32
 80024da:	f107 0112 	add.w	r1, r7, #18
 80024de:	2201      	movs	r2, #1
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 f9e0 	bl	80028a6 <st7735_recv_data>
 80024e6:	4602      	mov	r2, r0
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	4413      	add	r3, r2
 80024ec:	617b      	str	r3, [r7, #20]

	*Color = ((uint32_t) (pixel_lsb)) + ((uint32_t) (pixel_msb) << 8);
 80024ee:	7cfb      	ldrb	r3, [r7, #19]
 80024f0:	461a      	mov	r2, r3
 80024f2:	7cbb      	ldrb	r3, [r7, #18]
 80024f4:	021b      	lsls	r3, r3, #8
 80024f6:	441a      	add	r2, r3
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	601a      	str	r2, [r3, #0]

	if (ret != ST7735_OK) {
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <ST7735_GetPixel+0x94>
		ret = ST7735_ERROR;
 8002502:	f04f 33ff 	mov.w	r3, #4294967295
 8002506:	617b      	str	r3, [r7, #20]
	}

	return ret;
 8002508:	697b      	ldr	r3, [r7, #20]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <ST7735_GetXSize>:
/**
 * @brief  Get the LCD pixel Width.
 * @param  pObj Component object
 * @retval The Lcd Pixel Width
 */
int32_t ST7735_GetXSize(ST7735_Object_t *pObj, uint32_t *XSize) {
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
	(void) pObj;

	*XSize = ST7735Ctx.Width;
 800251e:	4b05      	ldr	r3, [pc, #20]	@ (8002534 <ST7735_GetXSize+0x20>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	601a      	str	r2, [r3, #0]

	return ST7735_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	240005b4 	.word	0x240005b4

08002538 <ST7735_GetYSize>:
/**
 * @brief  Get the LCD pixel Height.
 * @param  pObj Component object
 * @retval The Lcd Pixel Height
 */
int32_t ST7735_GetYSize(ST7735_Object_t *pObj, uint32_t *YSize) {
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
	(void) pObj;

	*YSize = ST7735Ctx.Height;
 8002542:	4b05      	ldr	r3, [pc, #20]	@ (8002558 <ST7735_GetYSize+0x20>)
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	601a      	str	r2, [r3, #0]

	return ST7735_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	240005b4 	.word	0x240005b4

0800255c <ST7735_SetDisplayWindow>:
 * @param  Height display window height.
 * @param  Width  display window width.
 * @retval Component status
 */
static int32_t ST7735_SetDisplayWindow(ST7735_Object_t *pObj, uint32_t Xpos,
		uint32_t Ypos, uint32_t Width, uint32_t Height) {
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
 8002568:	603b      	str	r3, [r7, #0]
	int32_t ret;
	uint8_t tmp;

	/* Cursor calibration */
	if (ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 800256a:	4b7d      	ldr	r3, [pc, #500]	@ (8002760 <ST7735_SetDisplayWindow+0x204>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d821      	bhi.n	80025b6 <ST7735_SetDisplayWindow+0x5a>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8002572:	4b7b      	ldr	r3, [pc, #492]	@ (8002760 <ST7735_SetDisplayWindow+0x204>)
 8002574:	7b5b      	ldrb	r3, [r3, #13]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d10e      	bne.n	8002598 <ST7735_SetDisplayWindow+0x3c>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 800257a:	4b79      	ldr	r3, [pc, #484]	@ (8002760 <ST7735_SetDisplayWindow+0x204>)
 800257c:	7b1b      	ldrb	r3, [r3, #12]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d106      	bne.n	8002590 <ST7735_SetDisplayWindow+0x34>
				Xpos += 26;
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	331a      	adds	r3, #26
 8002586:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3301      	adds	r3, #1
 800258c:	607b      	str	r3, [r7, #4]
 800258e:	e036      	b.n	80025fe <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 24;
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	3318      	adds	r3, #24
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	e032      	b.n	80025fe <ST7735_SetDisplayWindow+0xa2>
				Ypos += 0;
			}
		} else if (ST7735Ctx.Type == ST7735_1_8a_inch_screen) {
 8002598:	4b71      	ldr	r3, [pc, #452]	@ (8002760 <ST7735_SetDisplayWindow+0x204>)
 800259a:	7b5b      	ldrb	r3, [r3, #13]
 800259c:	2b02      	cmp	r3, #2
 800259e:	d12e      	bne.n	80025fe <ST7735_SetDisplayWindow+0xa2>
			if (ST7735Ctx.Panel == BOE_Panel) {
 80025a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002760 <ST7735_SetDisplayWindow+0x204>)
 80025a2:	7b1b      	ldrb	r3, [r3, #12]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d12a      	bne.n	80025fe <ST7735_SetDisplayWindow+0xa2>
				Xpos += 2;
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	3302      	adds	r3, #2
 80025ac:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3301      	adds	r3, #1
 80025b2:	607b      	str	r3, [r7, #4]
 80025b4:	e023      	b.n	80025fe <ST7735_SetDisplayWindow+0xa2>
			}
		}
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 80025b6:	4b6a      	ldr	r3, [pc, #424]	@ (8002760 <ST7735_SetDisplayWindow+0x204>)
 80025b8:	7b5b      	ldrb	r3, [r3, #13]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d111      	bne.n	80025e2 <ST7735_SetDisplayWindow+0x86>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 80025be:	4b68      	ldr	r3, [pc, #416]	@ (8002760 <ST7735_SetDisplayWindow+0x204>)
 80025c0:	7b1b      	ldrb	r3, [r3, #12]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d106      	bne.n	80025d4 <ST7735_SetDisplayWindow+0x78>
				Xpos += 1;
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	3301      	adds	r3, #1
 80025ca:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	331a      	adds	r3, #26
 80025d0:	607b      	str	r3, [r7, #4]
 80025d2:	e014      	b.n	80025fe <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 1;
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	3301      	adds	r3, #1
 80025d8:	60bb      	str	r3, [r7, #8]
				Ypos += 24;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3318      	adds	r3, #24
 80025de:	607b      	str	r3, [r7, #4]
 80025e0:	e00d      	b.n	80025fe <ST7735_SetDisplayWindow+0xa2>
			}
		} else if (ST7735Ctx.Type == ST7735_1_8a_inch_screen) {
 80025e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002760 <ST7735_SetDisplayWindow+0x204>)
 80025e4:	7b5b      	ldrb	r3, [r3, #13]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d109      	bne.n	80025fe <ST7735_SetDisplayWindow+0xa2>
			if (ST7735Ctx.Panel == BOE_Panel) {
 80025ea:	4b5d      	ldr	r3, [pc, #372]	@ (8002760 <ST7735_SetDisplayWindow+0x204>)
 80025ec:	7b1b      	ldrb	r3, [r3, #12]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d105      	bne.n	80025fe <ST7735_SetDisplayWindow+0xa2>
				Xpos += 1;
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	3301      	adds	r3, #1
 80025f6:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3302      	adds	r3, #2
 80025fc:	607b      	str	r3, [r7, #4]
			}
		}
	}

	/* Column addr set, 4 args, no delay: XSTART = Xpos, XEND = (Xpos + Width - 1) */
	ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f103 0020 	add.w	r0, r3, #32
 8002604:	f107 0213 	add.w	r2, r7, #19
 8002608:	2300      	movs	r3, #0
 800260a:	212a      	movs	r1, #42	@ 0x2a
 800260c:	f000 f924 	bl	8002858 <st7735_write_reg>
 8002610:	6178      	str	r0, [r7, #20]
	tmp = (uint8_t) (Xpos >> 8U);
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	0a1b      	lsrs	r3, r3, #8
 8002616:	b2db      	uxtb	r3, r3
 8002618:	74fb      	strb	r3, [r7, #19]
	ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	3320      	adds	r3, #32
 800261e:	f107 0113 	add.w	r1, r7, #19
 8002622:	2201      	movs	r2, #1
 8002624:	4618      	mov	r0, r3
 8002626:	f000 f92c 	bl	8002882 <st7735_send_data>
 800262a:	4602      	mov	r2, r0
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	4413      	add	r3, r2
 8002630:	617b      	str	r3, [r7, #20]
	tmp = (uint8_t) (Xpos & 0xFFU);
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	b2db      	uxtb	r3, r3
 8002636:	74fb      	strb	r3, [r7, #19]
	ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	3320      	adds	r3, #32
 800263c:	f107 0113 	add.w	r1, r7, #19
 8002640:	2201      	movs	r2, #1
 8002642:	4618      	mov	r0, r3
 8002644:	f000 f91d 	bl	8002882 <st7735_send_data>
 8002648:	4602      	mov	r2, r0
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	4413      	add	r3, r2
 800264e:	617b      	str	r3, [r7, #20]
	tmp = (uint8_t) ((Xpos + Width - 1U) >> 8U);
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	4413      	add	r3, r2
 8002656:	3b01      	subs	r3, #1
 8002658:	0a1b      	lsrs	r3, r3, #8
 800265a:	b2db      	uxtb	r3, r3
 800265c:	74fb      	strb	r3, [r7, #19]
	ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	3320      	adds	r3, #32
 8002662:	f107 0113 	add.w	r1, r7, #19
 8002666:	2201      	movs	r2, #1
 8002668:	4618      	mov	r0, r3
 800266a:	f000 f90a 	bl	8002882 <st7735_send_data>
 800266e:	4602      	mov	r2, r0
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	4413      	add	r3, r2
 8002674:	617b      	str	r3, [r7, #20]
	tmp = (uint8_t) ((Xpos + Width - 1U) & 0xFFU);
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	b2da      	uxtb	r2, r3
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	b2db      	uxtb	r3, r3
 800267e:	4413      	add	r3, r2
 8002680:	b2db      	uxtb	r3, r3
 8002682:	3b01      	subs	r3, #1
 8002684:	b2db      	uxtb	r3, r3
 8002686:	74fb      	strb	r3, [r7, #19]
	ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	3320      	adds	r3, #32
 800268c:	f107 0113 	add.w	r1, r7, #19
 8002690:	2201      	movs	r2, #1
 8002692:	4618      	mov	r0, r3
 8002694:	f000 f8f5 	bl	8002882 <st7735_send_data>
 8002698:	4602      	mov	r2, r0
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	4413      	add	r3, r2
 800269e:	617b      	str	r3, [r7, #20]

	/* Row addr set, 4 args, no delay: YSTART = Ypos, YEND = (Ypos + Height - 1) */
	ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f103 0020 	add.w	r0, r3, #32
 80026a6:	f107 0213 	add.w	r2, r7, #19
 80026aa:	2300      	movs	r3, #0
 80026ac:	212b      	movs	r1, #43	@ 0x2b
 80026ae:	f000 f8d3 	bl	8002858 <st7735_write_reg>
 80026b2:	4602      	mov	r2, r0
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	4413      	add	r3, r2
 80026b8:	617b      	str	r3, [r7, #20]
	tmp = (uint8_t) (Ypos >> 8U);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	0a1b      	lsrs	r3, r3, #8
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	74fb      	strb	r3, [r7, #19]
	ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	3320      	adds	r3, #32
 80026c6:	f107 0113 	add.w	r1, r7, #19
 80026ca:	2201      	movs	r2, #1
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 f8d8 	bl	8002882 <st7735_send_data>
 80026d2:	4602      	mov	r2, r0
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	4413      	add	r3, r2
 80026d8:	617b      	str	r3, [r7, #20]
	tmp = (uint8_t) (Ypos & 0xFFU);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	74fb      	strb	r3, [r7, #19]
	ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	3320      	adds	r3, #32
 80026e4:	f107 0113 	add.w	r1, r7, #19
 80026e8:	2201      	movs	r2, #1
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 f8c9 	bl	8002882 <st7735_send_data>
 80026f0:	4602      	mov	r2, r0
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	4413      	add	r3, r2
 80026f6:	617b      	str	r3, [r7, #20]
	tmp = (uint8_t) ((Ypos + Height - 1U) >> 8U);
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6a3b      	ldr	r3, [r7, #32]
 80026fc:	4413      	add	r3, r2
 80026fe:	3b01      	subs	r3, #1
 8002700:	0a1b      	lsrs	r3, r3, #8
 8002702:	b2db      	uxtb	r3, r3
 8002704:	74fb      	strb	r3, [r7, #19]
	ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	3320      	adds	r3, #32
 800270a:	f107 0113 	add.w	r1, r7, #19
 800270e:	2201      	movs	r2, #1
 8002710:	4618      	mov	r0, r3
 8002712:	f000 f8b6 	bl	8002882 <st7735_send_data>
 8002716:	4602      	mov	r2, r0
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	4413      	add	r3, r2
 800271c:	617b      	str	r3, [r7, #20]
	tmp = (uint8_t) ((Ypos + Height - 1U) & 0xFFU);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	b2da      	uxtb	r2, r3
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	4413      	add	r3, r2
 8002728:	b2db      	uxtb	r3, r3
 800272a:	3b01      	subs	r3, #1
 800272c:	b2db      	uxtb	r3, r3
 800272e:	74fb      	strb	r3, [r7, #19]
	ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	3320      	adds	r3, #32
 8002734:	f107 0113 	add.w	r1, r7, #19
 8002738:	2201      	movs	r2, #1
 800273a:	4618      	mov	r0, r3
 800273c:	f000 f8a1 	bl	8002882 <st7735_send_data>
 8002740:	4602      	mov	r2, r0
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	4413      	add	r3, r2
 8002746:	617b      	str	r3, [r7, #20]

	if (ret != ST7735_OK) {
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d002      	beq.n	8002754 <ST7735_SetDisplayWindow+0x1f8>
		ret = ST7735_ERROR;
 800274e:	f04f 33ff 	mov.w	r3, #4294967295
 8002752:	617b      	str	r3, [r7, #20]
	}

	return ret;
 8002754:	697b      	ldr	r3, [r7, #20]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	240005b4 	.word	0x240005b4

08002764 <ST7735_ReadRegWrap>:
 * @param  Handle  Component object handle
 * @param  Reg  The target register address to write
 * @param  pData  The target register value to be written
 * @retval Component error status
 */
static int32_t ST7735_ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData) {
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	460b      	mov	r3, r1
 800276e:	607a      	str	r2, [r7, #4]
 8002770:	72fb      	strb	r3, [r7, #11]
	ST7735_Object_t *pObj = (ST7735_Object_t*) Handle;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	617b      	str	r3, [r7, #20]

	return pObj->IO.ReadReg(Reg, pData);
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	7afa      	ldrb	r2, [r7, #11]
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	4610      	mov	r0, r2
 8002780:	4798      	blx	r3
 8002782:	4603      	mov	r3, r0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <ST7735_WriteRegWrap>:
 * @param  pData  The target register value to be written
 * @param  Length  buffer size to be written
 * @retval Component error status
 */
static int32_t ST7735_WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData,
		uint32_t Length) {
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	603b      	str	r3, [r7, #0]
 8002798:	460b      	mov	r3, r1
 800279a:	72fb      	strb	r3, [r7, #11]
	ST7735_Object_t *pObj = (ST7735_Object_t*) Handle;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	617b      	str	r3, [r7, #20]

	return pObj->IO.WriteReg(Reg, pData, Length);
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	7af8      	ldrb	r0, [r7, #11]
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	4798      	blx	r3
 80027ac:	4603      	mov	r3, r0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <ST7735_SendDataWrap>:
 * @param  handle  Component object handle
 * @param  pData  The target register value to be written
 * @retval Component error status
 */
static int32_t ST7735_SendDataWrap(void *Handle, uint8_t *pData,
		uint32_t Length) {
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b086      	sub	sp, #24
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	60f8      	str	r0, [r7, #12]
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]
	ST7735_Object_t *pObj = (ST7735_Object_t*) Handle;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	617b      	str	r3, [r7, #20]

	return pObj->IO.SendData(pData, Length);
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	68b8      	ldr	r0, [r7, #8]
 80027ce:	4798      	blx	r3
 80027d0:	4603      	mov	r3, r0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <ST7735_RecvDataWrap>:
 * @param  handle  Component object handle
 * @param  pData  The target register value to be written
 * @retval Component error status
 */
static int32_t ST7735_RecvDataWrap(void *Handle, uint8_t *pData,
		uint32_t Length) {
 80027da:	b580      	push	{r7, lr}
 80027dc:	b086      	sub	sp, #24
 80027de:	af00      	add	r7, sp, #0
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	607a      	str	r2, [r7, #4]
	ST7735_Object_t *pObj = (ST7735_Object_t*) Handle;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	617b      	str	r3, [r7, #20]

	return pObj->IO.RecvData(pData, Length);
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	68b8      	ldr	r0, [r7, #8]
 80027f2:	4798      	blx	r3
 80027f4:	4603      	mov	r3, r0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <ST7735_IO_Delay>:
/**
 * @brief  ST7735 delay
 * @param  Delay  Delay in ms
 * @retval Component error status
 */
static int32_t ST7735_IO_Delay(ST7735_Object_t *pObj, uint32_t Delay) {
 80027fe:	b580      	push	{r7, lr}
 8002800:	b084      	sub	sp, #16
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	6039      	str	r1, [r7, #0]
	uint32_t tickstart;
	tickstart = pObj->IO.GetTick();
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	4798      	blx	r3
 800280e:	4603      	mov	r3, r0
 8002810:	60fb      	str	r3, [r7, #12]
	while ((pObj->IO.GetTick() - tickstart) < Delay) {
 8002812:	bf00      	nop
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	4798      	blx	r3
 800281a:	4603      	mov	r3, r0
 800281c:	461a      	mov	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d8f5      	bhi.n	8002814 <ST7735_IO_Delay+0x16>
	}
	return ST7735_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <st7735_read_reg>:
  * @param  reg   Register to read
  * @param  pdata data to read from the register
  * @retval Component status
  */
int32_t st7735_read_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b084      	sub	sp, #16
 8002836:	af00      	add	r7, sp, #0
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	460b      	mov	r3, r1
 800283c:	607a      	str	r2, [r7, #4]
 800283e:	72fb      	strb	r3, [r7, #11]
  return ctx->ReadReg(ctx->handle, reg, pdata);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	6910      	ldr	r0, [r2, #16]
 8002848:	7af9      	ldrb	r1, [r7, #11]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	4798      	blx	r3
 800284e:	4603      	mov	r3, r0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <st7735_write_reg>:
  * @param  pdata  data to write to the register
  * @param  length length of data to write to the register
  * @retval Component status
  */
int32_t st7735_write_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint32_t length)
{
 8002858:	b590      	push	{r4, r7, lr}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	607a      	str	r2, [r7, #4]
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	460b      	mov	r3, r1
 8002866:	72fb      	strb	r3, [r7, #11]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681c      	ldr	r4, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6918      	ldr	r0, [r3, #16]
 8002870:	7af9      	ldrb	r1, [r7, #11]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	47a0      	blx	r4
 8002878:	4603      	mov	r3, r0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	bd90      	pop	{r4, r7, pc}

08002882 <st7735_send_data>:
  * @param  pdata  data to write
  * @param  length length of data to write
  * @retval Component status
  */
int32_t st7735_send_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b084      	sub	sp, #16
 8002886:	af00      	add	r7, sp, #0
 8002888:	60f8      	str	r0, [r7, #12]
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	607a      	str	r2, [r7, #4]
  return ctx->SendData(ctx->handle, pdata, length);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	6910      	ldr	r0, [r2, #16]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	68b9      	ldr	r1, [r7, #8]
 800289a:	4798      	blx	r3
 800289c:	4603      	mov	r3, r0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <st7735_recv_data>:
  * @param  pdata  data to read
  * @param  length length of data to read
  * @retval Component status
  */
int32_t st7735_recv_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b084      	sub	sp, #16
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
  return ctx->RecvData(ctx->handle, pdata, length);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	6910      	ldr	r0, [r2, #16]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	4798      	blx	r3
 80028c0:	4603      	mov	r3, r0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028d2:	2003      	movs	r0, #3
 80028d4:	f001 fee8 	bl	80046a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80028d8:	f004 fa80 	bl	8006ddc <HAL_RCC_GetSysClockFreq>
 80028dc:	4602      	mov	r2, r0
 80028de:	4b15      	ldr	r3, [pc, #84]	@ (8002934 <HAL_Init+0x68>)
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	0a1b      	lsrs	r3, r3, #8
 80028e4:	f003 030f 	and.w	r3, r3, #15
 80028e8:	4913      	ldr	r1, [pc, #76]	@ (8002938 <HAL_Init+0x6c>)
 80028ea:	5ccb      	ldrb	r3, [r1, r3]
 80028ec:	f003 031f 	and.w	r3, r3, #31
 80028f0:	fa22 f303 	lsr.w	r3, r2, r3
 80028f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002934 <HAL_Init+0x68>)
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	4a0e      	ldr	r2, [pc, #56]	@ (8002938 <HAL_Init+0x6c>)
 8002900:	5cd3      	ldrb	r3, [r2, r3]
 8002902:	f003 031f 	and.w	r3, r3, #31
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	fa22 f303 	lsr.w	r3, r2, r3
 800290c:	4a0b      	ldr	r2, [pc, #44]	@ (800293c <HAL_Init+0x70>)
 800290e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002910:	4a0b      	ldr	r2, [pc, #44]	@ (8002940 <HAL_Init+0x74>)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002916:	2000      	movs	r0, #0
 8002918:	f000 f814 	bl	8002944 <HAL_InitTick>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e002      	b.n	800292c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002926:	f00f fc1b 	bl	8012160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	58024400 	.word	0x58024400
 8002938:	0801e0b4 	.word	0x0801e0b4
 800293c:	2400038c 	.word	0x2400038c
 8002940:	24000388 	.word	0x24000388

08002944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800294c:	4b15      	ldr	r3, [pc, #84]	@ (80029a4 <HAL_InitTick+0x60>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e021      	b.n	800299c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002958:	4b13      	ldr	r3, [pc, #76]	@ (80029a8 <HAL_InitTick+0x64>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	4b11      	ldr	r3, [pc, #68]	@ (80029a4 <HAL_InitTick+0x60>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	4619      	mov	r1, r3
 8002962:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002966:	fbb3 f3f1 	udiv	r3, r3, r1
 800296a:	fbb2 f3f3 	udiv	r3, r2, r3
 800296e:	4618      	mov	r0, r3
 8002970:	f001 fecd 	bl	800470e <HAL_SYSTICK_Config>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e00e      	b.n	800299c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b0f      	cmp	r3, #15
 8002982:	d80a      	bhi.n	800299a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002984:	2200      	movs	r2, #0
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	f04f 30ff 	mov.w	r0, #4294967295
 800298c:	f001 fe97 	bl	80046be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002990:	4a06      	ldr	r2, [pc, #24]	@ (80029ac <HAL_InitTick+0x68>)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002996:	2300      	movs	r3, #0
 8002998:	e000      	b.n	800299c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
}
 800299c:	4618      	mov	r0, r3
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	24000094 	.word	0x24000094
 80029a8:	24000388 	.word	0x24000388
 80029ac:	24000090 	.word	0x24000090

080029b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029b4:	4b06      	ldr	r3, [pc, #24]	@ (80029d0 <HAL_IncTick+0x20>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	461a      	mov	r2, r3
 80029ba:	4b06      	ldr	r3, [pc, #24]	@ (80029d4 <HAL_IncTick+0x24>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4413      	add	r3, r2
 80029c0:	4a04      	ldr	r2, [pc, #16]	@ (80029d4 <HAL_IncTick+0x24>)
 80029c2:	6013      	str	r3, [r2, #0]
}
 80029c4:	bf00      	nop
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	24000094 	.word	0x24000094
 80029d4:	24000ac4 	.word	0x24000ac4

080029d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  return uwTick;
 80029dc:	4b03      	ldr	r3, [pc, #12]	@ (80029ec <HAL_GetTick+0x14>)
 80029de:	681b      	ldr	r3, [r3, #0]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	24000ac4 	.word	0x24000ac4

080029f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029f8:	f7ff ffee 	bl	80029d8 <HAL_GetTick>
 80029fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a08:	d005      	beq.n	8002a16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a34 <HAL_Delay+0x44>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4413      	add	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a16:	bf00      	nop
 8002a18:	f7ff ffde 	bl	80029d8 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d8f7      	bhi.n	8002a18 <HAL_Delay+0x28>
  {
  }
}
 8002a28:	bf00      	nop
 8002a2a:	bf00      	nop
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	24000094 	.word	0x24000094

08002a38 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002a3c:	4b03      	ldr	r3, [pc, #12]	@ (8002a4c <HAL_GetREVID+0x14>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	0c1b      	lsrs	r3, r3, #16
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	5c001000 	.word	0x5c001000

08002a50 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002a5a:	4b07      	ldr	r3, [pc, #28]	@ (8002a78 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	401a      	ands	r2, r3
 8002a64:	4904      	ldr	r1, [pc, #16]	@ (8002a78 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	604b      	str	r3, [r1, #4]
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	58000400 	.word	0x58000400

08002a7c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	431a      	orrs	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	609a      	str	r2, [r3, #8]
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	609a      	str	r2, [r3, #8]
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b087      	sub	sp, #28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d107      	bne.n	8002b08 <LL_ADC_SetChannelPreselection+0x24>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	0e9b      	lsrs	r3, r3, #26
 8002afc:	f003 031f 	and.w	r3, r3, #31
 8002b00:	2201      	movs	r2, #1
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	e015      	b.n	8002b34 <LL_ADC_SetChannelPreselection+0x50>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	fa93 f3a3 	rbit	r3, r3
 8002b12:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8002b1e:	2320      	movs	r3, #32
 8002b20:	e003      	b.n	8002b2a <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	fab3 f383 	clz	r3, r3
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	f003 031f 	and.w	r3, r3, #31
 8002b2e:	2201      	movs	r2, #1
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	69d2      	ldr	r2, [r2, #28]
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8002b3e:	bf00      	nop
 8002b40:	371c      	adds	r7, #28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b087      	sub	sp, #28
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	60f8      	str	r0, [r7, #12]
 8002b52:	60b9      	str	r1, [r7, #8]
 8002b54:	607a      	str	r2, [r7, #4]
 8002b56:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3360      	adds	r3, #96	@ 0x60
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	430b      	orrs	r3, r1
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002b7e:	bf00      	nop
 8002b80:	371c      	adds	r7, #28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b085      	sub	sp, #20
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	f003 031f 	and.w	r3, r3, #31
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8002baa:	431a      	orrs	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	611a      	str	r2, [r3, #16]
}
 8002bb0:	bf00      	nop
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	3360      	adds	r3, #96	@ 0x60
 8002bcc:	461a      	mov	r2, r3
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	431a      	orrs	r2, r3
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	601a      	str	r2, [r3, #0]
  }
}
 8002be6:	bf00      	nop
 8002be8:	371c      	adds	r7, #28
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	3330      	adds	r3, #48	@ 0x30
 8002c28:	461a      	mov	r2, r3
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	0a1b      	lsrs	r3, r3, #8
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	f003 030c 	and.w	r3, r3, #12
 8002c34:	4413      	add	r3, r2
 8002c36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	f003 031f 	and.w	r3, r3, #31
 8002c42:	211f      	movs	r1, #31
 8002c44:	fa01 f303 	lsl.w	r3, r1, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	401a      	ands	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	0e9b      	lsrs	r3, r3, #26
 8002c50:	f003 011f 	and.w	r1, r3, #31
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f003 031f 	and.w	r3, r3, #31
 8002c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c64:	bf00      	nop
 8002c66:	371c      	adds	r7, #28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b087      	sub	sp, #28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	3314      	adds	r3, #20
 8002c80:	461a      	mov	r2, r3
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	0e5b      	lsrs	r3, r3, #25
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	4413      	add	r3, r2
 8002c8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	0d1b      	lsrs	r3, r3, #20
 8002c98:	f003 031f 	and.w	r3, r3, #31
 8002c9c:	2107      	movs	r1, #7
 8002c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	401a      	ands	r2, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	0d1b      	lsrs	r3, r3, #20
 8002caa:	f003 031f 	and.w	r3, r3, #31
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002cba:	bf00      	nop
 8002cbc:	371c      	adds	r7, #28
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
	...

08002cc8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	401a      	ands	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f003 0318 	and.w	r3, r3, #24
 8002cea:	4908      	ldr	r1, [pc, #32]	@ (8002d0c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002cec:	40d9      	lsrs	r1, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	400b      	ands	r3, r1
 8002cf2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002cfe:	bf00      	nop
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	000fffff 	.word	0x000fffff

08002d10 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 031f 	and.w	r3, r3, #31
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	4b04      	ldr	r3, [pc, #16]	@ (8002d68 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6093      	str	r3, [r2, #8]
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	5fffffc0 	.word	0x5fffffc0

08002d6c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d80:	d101      	bne.n	8002d86 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	4b05      	ldr	r3, [pc, #20]	@ (8002db8 <LL_ADC_EnableInternalRegulator+0x24>)
 8002da2:	4013      	ands	r3, r2
 8002da4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	6fffffc0 	.word	0x6fffffc0

08002dbc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dcc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002dd0:	d101      	bne.n	8002dd6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	4b05      	ldr	r3, [pc, #20]	@ (8002e08 <LL_ADC_Enable+0x24>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	f043 0201 	orr.w	r2, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	7fffffc0 	.word	0x7fffffc0

08002e0c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	4b05      	ldr	r3, [pc, #20]	@ (8002e30 <LL_ADC_Disable+0x24>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	f043 0202 	orr.w	r2, r3, #2
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	7fffffc0 	.word	0x7fffffc0

08002e34 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <LL_ADC_IsEnabled+0x18>
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e000      	b.n	8002e4e <LL_ADC_IsEnabled+0x1a>
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d101      	bne.n	8002e72 <LL_ADC_IsDisableOngoing+0x18>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <LL_ADC_IsDisableOngoing+0x1a>
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	4b05      	ldr	r3, [pc, #20]	@ (8002ea4 <LL_ADC_REG_StartConversion+0x24>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	f043 0204 	orr.w	r2, r3, #4
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	7fffffc0 	.word	0x7fffffc0

08002ea8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	4b05      	ldr	r3, [pc, #20]	@ (8002ecc <LL_ADC_REG_StopConversion+0x24>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	f043 0210 	orr.w	r2, r3, #16
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	7fffffc0 	.word	0x7fffffc0

08002ed0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b04      	cmp	r3, #4
 8002ee2:	d101      	bne.n	8002ee8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e000      	b.n	8002eea <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	4b05      	ldr	r3, [pc, #20]	@ (8002f1c <LL_ADC_INJ_StopConversion+0x24>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	f043 0220 	orr.w	r2, r3, #32
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	7fffffc0 	.word	0x7fffffc0

08002f20 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 0308 	and.w	r3, r3, #8
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d101      	bne.n	8002f38 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f34:	2301      	movs	r3, #1
 8002f36:	e000      	b.n	8002f3a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
	...

08002f48 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f48:	b590      	push	{r4, r7, lr}
 8002f4a:	b089      	sub	sp, #36	@ 0x24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e18f      	b.n	8003282 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d109      	bne.n	8002f84 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f00d fbed 	bl	8010750 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff feef 	bl	8002d6c <LL_ADC_IsDeepPowerDownEnabled>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d004      	beq.n	8002f9e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff fed5 	bl	8002d48 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff ff0a 	bl	8002dbc <LL_ADC_IsInternalRegulatorEnabled>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d114      	bne.n	8002fd8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff feee 	bl	8002d94 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fb8:	4b87      	ldr	r3, [pc, #540]	@ (80031d8 <HAL_ADC_Init+0x290>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	099b      	lsrs	r3, r3, #6
 8002fbe:	4a87      	ldr	r2, [pc, #540]	@ (80031dc <HAL_ADC_Init+0x294>)
 8002fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc4:	099b      	lsrs	r3, r3, #6
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002fca:	e002      	b.n	8002fd2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1f9      	bne.n	8002fcc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff feed 	bl	8002dbc <LL_ADC_IsInternalRegulatorEnabled>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10d      	bne.n	8003004 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fec:	f043 0210 	orr.w	r2, r3, #16
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff8:	f043 0201 	orr.w	r2, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff ff61 	bl	8002ed0 <LL_ADC_REG_IsConversionOngoing>
 800300e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	2b00      	cmp	r3, #0
 800301a:	f040 8129 	bne.w	8003270 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	2b00      	cmp	r3, #0
 8003022:	f040 8125 	bne.w	8003270 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800302a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800302e:	f043 0202 	orr.w	r2, r3, #2
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff fefa 	bl	8002e34 <LL_ADC_IsEnabled>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d136      	bne.n	80030b4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a65      	ldr	r2, [pc, #404]	@ (80031e0 <HAL_ADC_Init+0x298>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d004      	beq.n	800305a <HAL_ADC_Init+0x112>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a63      	ldr	r2, [pc, #396]	@ (80031e4 <HAL_ADC_Init+0x29c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d10e      	bne.n	8003078 <HAL_ADC_Init+0x130>
 800305a:	4861      	ldr	r0, [pc, #388]	@ (80031e0 <HAL_ADC_Init+0x298>)
 800305c:	f7ff feea 	bl	8002e34 <LL_ADC_IsEnabled>
 8003060:	4604      	mov	r4, r0
 8003062:	4860      	ldr	r0, [pc, #384]	@ (80031e4 <HAL_ADC_Init+0x29c>)
 8003064:	f7ff fee6 	bl	8002e34 <LL_ADC_IsEnabled>
 8003068:	4603      	mov	r3, r0
 800306a:	4323      	orrs	r3, r4
 800306c:	2b00      	cmp	r3, #0
 800306e:	bf0c      	ite	eq
 8003070:	2301      	moveq	r3, #1
 8003072:	2300      	movne	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	e008      	b.n	800308a <HAL_ADC_Init+0x142>
 8003078:	485b      	ldr	r0, [pc, #364]	@ (80031e8 <HAL_ADC_Init+0x2a0>)
 800307a:	f7ff fedb 	bl	8002e34 <LL_ADC_IsEnabled>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	bf0c      	ite	eq
 8003084:	2301      	moveq	r3, #1
 8003086:	2300      	movne	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d012      	beq.n	80030b4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a53      	ldr	r2, [pc, #332]	@ (80031e0 <HAL_ADC_Init+0x298>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d004      	beq.n	80030a2 <HAL_ADC_Init+0x15a>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a51      	ldr	r2, [pc, #324]	@ (80031e4 <HAL_ADC_Init+0x29c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d101      	bne.n	80030a6 <HAL_ADC_Init+0x15e>
 80030a2:	4a52      	ldr	r2, [pc, #328]	@ (80031ec <HAL_ADC_Init+0x2a4>)
 80030a4:	e000      	b.n	80030a8 <HAL_ADC_Init+0x160>
 80030a6:	4a52      	ldr	r2, [pc, #328]	@ (80031f0 <HAL_ADC_Init+0x2a8>)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	4619      	mov	r1, r3
 80030ae:	4610      	mov	r0, r2
 80030b0:	f7ff fce4 	bl	8002a7c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80030b4:	f7ff fcc0 	bl	8002a38 <HAL_GetREVID>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f241 0203 	movw	r2, #4099	@ 0x1003
 80030be:	4293      	cmp	r3, r2
 80030c0:	d914      	bls.n	80030ec <HAL_ADC_Init+0x1a4>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b10      	cmp	r3, #16
 80030c8:	d110      	bne.n	80030ec <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	7d5b      	ldrb	r3, [r3, #21]
 80030ce:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030d4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80030da:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	7f1b      	ldrb	r3, [r3, #28]
 80030e0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80030e2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030e4:	f043 030c 	orr.w	r3, r3, #12
 80030e8:	61bb      	str	r3, [r7, #24]
 80030ea:	e00d      	b.n	8003108 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	7d5b      	ldrb	r3, [r3, #21]
 80030f0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030f6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80030fc:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	7f1b      	ldrb	r3, [r3, #28]
 8003102:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003104:	4313      	orrs	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	7f1b      	ldrb	r3, [r3, #28]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d106      	bne.n	800311e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	3b01      	subs	r3, #1
 8003116:	045b      	lsls	r3, r3, #17
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4313      	orrs	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003122:	2b00      	cmp	r3, #0
 8003124:	d009      	beq.n	800313a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003132:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4313      	orrs	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	4b2c      	ldr	r3, [pc, #176]	@ (80031f4 <HAL_ADC_Init+0x2ac>)
 8003142:	4013      	ands	r3, r2
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6812      	ldr	r2, [r2, #0]
 8003148:	69b9      	ldr	r1, [r7, #24]
 800314a:	430b      	orrs	r3, r1
 800314c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff febc 	bl	8002ed0 <LL_ADC_REG_IsConversionOngoing>
 8003158:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff fede 	bl	8002f20 <LL_ADC_INJ_IsConversionOngoing>
 8003164:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d15f      	bne.n	800322c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d15c      	bne.n	800322c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	7d1b      	ldrb	r3, [r3, #20]
 8003176:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 800317c:	4313      	orrs	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68da      	ldr	r2, [r3, #12]
 8003186:	4b1c      	ldr	r3, [pc, #112]	@ (80031f8 <HAL_ADC_Init+0x2b0>)
 8003188:	4013      	ands	r3, r2
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6812      	ldr	r2, [r2, #0]
 800318e:	69b9      	ldr	r1, [r7, #24]
 8003190:	430b      	orrs	r3, r1
 8003192:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800319a:	2b01      	cmp	r3, #1
 800319c:	d130      	bne.n	8003200 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691a      	ldr	r2, [r3, #16]
 80031aa:	4b14      	ldr	r3, [pc, #80]	@ (80031fc <HAL_ADC_Init+0x2b4>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80031b2:	3a01      	subs	r2, #1
 80031b4:	0411      	lsls	r1, r2, #16
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80031ba:	4311      	orrs	r1, r2
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80031c0:	4311      	orrs	r1, r2
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80031c6:	430a      	orrs	r2, r1
 80031c8:	431a      	orrs	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 0201 	orr.w	r2, r2, #1
 80031d2:	611a      	str	r2, [r3, #16]
 80031d4:	e01c      	b.n	8003210 <HAL_ADC_Init+0x2c8>
 80031d6:	bf00      	nop
 80031d8:	24000388 	.word	0x24000388
 80031dc:	053e2d63 	.word	0x053e2d63
 80031e0:	40022000 	.word	0x40022000
 80031e4:	40022100 	.word	0x40022100
 80031e8:	58026000 	.word	0x58026000
 80031ec:	40022300 	.word	0x40022300
 80031f0:	58026300 	.word	0x58026300
 80031f4:	fff0c003 	.word	0xfff0c003
 80031f8:	ffffbffc 	.word	0xffffbffc
 80031fc:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	691a      	ldr	r2, [r3, #16]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0201 	bic.w	r2, r2, #1
 800320e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 fec6 	bl	8003fb8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d10c      	bne.n	800324e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323a:	f023 010f 	bic.w	r1, r3, #15
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	1e5a      	subs	r2, r3, #1
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	631a      	str	r2, [r3, #48]	@ 0x30
 800324c:	e007      	b.n	800325e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 020f 	bic.w	r2, r2, #15
 800325c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003262:	f023 0303 	bic.w	r3, r3, #3
 8003266:	f043 0201 	orr.w	r2, r3, #1
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	655a      	str	r2, [r3, #84]	@ 0x54
 800326e:	e007      	b.n	8003280 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003274:	f043 0210 	orr.w	r2, r3, #16
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003280:	7ffb      	ldrb	r3, [r7, #31]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3724      	adds	r7, #36	@ 0x24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd90      	pop	{r4, r7, pc}
 800328a:	bf00      	nop

0800328c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a5c      	ldr	r2, [pc, #368]	@ (800340c <HAL_ADC_Start+0x180>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d004      	beq.n	80032a8 <HAL_ADC_Start+0x1c>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a5b      	ldr	r2, [pc, #364]	@ (8003410 <HAL_ADC_Start+0x184>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d101      	bne.n	80032ac <HAL_ADC_Start+0x20>
 80032a8:	4b5a      	ldr	r3, [pc, #360]	@ (8003414 <HAL_ADC_Start+0x188>)
 80032aa:	e000      	b.n	80032ae <HAL_ADC_Start+0x22>
 80032ac:	4b5a      	ldr	r3, [pc, #360]	@ (8003418 <HAL_ADC_Start+0x18c>)
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff fd2e 	bl	8002d10 <LL_ADC_GetMultimode>
 80032b4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff fe08 	bl	8002ed0 <LL_ADC_REG_IsConversionOngoing>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f040 809a 	bne.w	80033fc <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d101      	bne.n	80032d6 <HAL_ADC_Start+0x4a>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e095      	b.n	8003402 <HAL_ADC_Start+0x176>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fd80 	bl	8003de4 <ADC_Enable>
 80032e4:	4603      	mov	r3, r0
 80032e6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80032e8:	7dfb      	ldrb	r3, [r7, #23]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f040 8081 	bne.w	80033f2 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80032f4:	4b49      	ldr	r3, [pc, #292]	@ (800341c <HAL_ADC_Start+0x190>)
 80032f6:	4013      	ands	r3, r2
 80032f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a42      	ldr	r2, [pc, #264]	@ (8003410 <HAL_ADC_Start+0x184>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d002      	beq.n	8003310 <HAL_ADC_Start+0x84>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	e000      	b.n	8003312 <HAL_ADC_Start+0x86>
 8003310:	4b3e      	ldr	r3, [pc, #248]	@ (800340c <HAL_ADC_Start+0x180>)
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6812      	ldr	r2, [r2, #0]
 8003316:	4293      	cmp	r3, r2
 8003318:	d002      	beq.n	8003320 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d105      	bne.n	800332c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003324:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003330:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003334:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003338:	d106      	bne.n	8003348 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800333e:	f023 0206 	bic.w	r2, r3, #6
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	659a      	str	r2, [r3, #88]	@ 0x58
 8003346:	e002      	b.n	800334e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	221c      	movs	r2, #28
 8003354:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a2b      	ldr	r2, [pc, #172]	@ (8003410 <HAL_ADC_Start+0x184>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d002      	beq.n	800336e <HAL_ADC_Start+0xe2>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	e000      	b.n	8003370 <HAL_ADC_Start+0xe4>
 800336e:	4b27      	ldr	r3, [pc, #156]	@ (800340c <HAL_ADC_Start+0x180>)
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6812      	ldr	r2, [r2, #0]
 8003374:	4293      	cmp	r3, r2
 8003376:	d008      	beq.n	800338a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d005      	beq.n	800338a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	2b05      	cmp	r3, #5
 8003382:	d002      	beq.n	800338a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	2b09      	cmp	r3, #9
 8003388:	d114      	bne.n	80033b4 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d007      	beq.n	80033a8 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800339c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80033a0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff fd67 	bl	8002e80 <LL_ADC_REG_StartConversion>
 80033b2:	e025      	b.n	8003400 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a12      	ldr	r2, [pc, #72]	@ (8003410 <HAL_ADC_Start+0x184>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d002      	beq.n	80033d0 <HAL_ADC_Start+0x144>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	e000      	b.n	80033d2 <HAL_ADC_Start+0x146>
 80033d0:	4b0e      	ldr	r3, [pc, #56]	@ (800340c <HAL_ADC_Start+0x180>)
 80033d2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00f      	beq.n	8003400 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80033e8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80033f0:	e006      	b.n	8003400 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80033fa:	e001      	b.n	8003400 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80033fc:	2302      	movs	r3, #2
 80033fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003400:	7dfb      	ldrb	r3, [r7, #23]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40022000 	.word	0x40022000
 8003410:	40022100 	.word	0x40022100
 8003414:	40022300 	.word	0x40022300
 8003418:	58026300 	.word	0x58026300
 800341c:	fffff0fe 	.word	0xfffff0fe

08003420 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_ADC_Stop+0x16>
 8003432:	2302      	movs	r3, #2
 8003434:	e021      	b.n	800347a <HAL_ADC_Stop+0x5a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800343e:	2103      	movs	r1, #3
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 fc13 	bl	8003c6c <ADC_ConversionStop>
 8003446:	4603      	mov	r3, r0
 8003448:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10f      	bne.n	8003470 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 fd51 	bl	8003ef8 <ADC_Disable>
 8003456:	4603      	mov	r3, r0
 8003458:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800345a:	7bfb      	ldrb	r3, [r7, #15]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d107      	bne.n	8003470 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003464:	4b07      	ldr	r3, [pc, #28]	@ (8003484 <HAL_ADC_Stop+0x64>)
 8003466:	4013      	ands	r3, r2
 8003468:	f043 0201 	orr.w	r2, r3, #1
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003478:	7bfb      	ldrb	r3, [r7, #15]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	ffffeefe 	.word	0xffffeefe

08003488 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b088      	sub	sp, #32
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a72      	ldr	r2, [pc, #456]	@ (8003660 <HAL_ADC_PollForConversion+0x1d8>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d004      	beq.n	80034a6 <HAL_ADC_PollForConversion+0x1e>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a70      	ldr	r2, [pc, #448]	@ (8003664 <HAL_ADC_PollForConversion+0x1dc>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d101      	bne.n	80034aa <HAL_ADC_PollForConversion+0x22>
 80034a6:	4b70      	ldr	r3, [pc, #448]	@ (8003668 <HAL_ADC_PollForConversion+0x1e0>)
 80034a8:	e000      	b.n	80034ac <HAL_ADC_PollForConversion+0x24>
 80034aa:	4b70      	ldr	r3, [pc, #448]	@ (800366c <HAL_ADC_PollForConversion+0x1e4>)
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff fc2f 	bl	8002d10 <LL_ADC_GetMultimode>
 80034b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d102      	bne.n	80034c2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80034bc:	2308      	movs	r3, #8
 80034be:	61fb      	str	r3, [r7, #28]
 80034c0:	e037      	b.n	8003532 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	2b05      	cmp	r3, #5
 80034cc:	d002      	beq.n	80034d4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	2b09      	cmp	r3, #9
 80034d2:	d111      	bne.n	80034f8 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d007      	beq.n	80034f2 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e6:	f043 0220 	orr.w	r2, r3, #32
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e0b1      	b.n	8003656 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80034f2:	2304      	movs	r3, #4
 80034f4:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80034f6:	e01c      	b.n	8003532 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a58      	ldr	r2, [pc, #352]	@ (8003660 <HAL_ADC_PollForConversion+0x1d8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d004      	beq.n	800350c <HAL_ADC_PollForConversion+0x84>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a57      	ldr	r2, [pc, #348]	@ (8003664 <HAL_ADC_PollForConversion+0x1dc>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d101      	bne.n	8003510 <HAL_ADC_PollForConversion+0x88>
 800350c:	4b56      	ldr	r3, [pc, #344]	@ (8003668 <HAL_ADC_PollForConversion+0x1e0>)
 800350e:	e000      	b.n	8003512 <HAL_ADC_PollForConversion+0x8a>
 8003510:	4b56      	ldr	r3, [pc, #344]	@ (800366c <HAL_ADC_PollForConversion+0x1e4>)
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff fc0a 	bl	8002d2c <LL_ADC_GetMultiDMATransfer>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d007      	beq.n	800352e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003522:	f043 0220 	orr.w	r2, r3, #32
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e093      	b.n	8003656 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800352e:	2304      	movs	r3, #4
 8003530:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003532:	f7ff fa51 	bl	80029d8 <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003538:	e021      	b.n	800357e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003540:	d01d      	beq.n	800357e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003542:	f7ff fa49 	bl	80029d8 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d302      	bcc.n	8003558 <HAL_ADC_PollForConversion+0xd0>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d112      	bne.n	800357e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	4013      	ands	r3, r2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10b      	bne.n	800357e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800356a:	f043 0204 	orr.w	r2, r3, #4
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e06b      	b.n	8003656 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	4013      	ands	r3, r2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0d6      	beq.n	800353a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003590:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff fb28 	bl	8002bf2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d01c      	beq.n	80035e2 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	7d5b      	ldrb	r3, [r3, #21]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d118      	bne.n	80035e2 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b08      	cmp	r3, #8
 80035bc:	d111      	bne.n	80035e2 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d105      	bne.n	80035e2 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035da:	f043 0201 	orr.w	r2, r3, #1
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a1f      	ldr	r2, [pc, #124]	@ (8003664 <HAL_ADC_PollForConversion+0x1dc>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d002      	beq.n	80035f2 <HAL_ADC_PollForConversion+0x16a>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	e000      	b.n	80035f4 <HAL_ADC_PollForConversion+0x16c>
 80035f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003660 <HAL_ADC_PollForConversion+0x1d8>)
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d008      	beq.n	800360e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d005      	beq.n	800360e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2b05      	cmp	r3, #5
 8003606:	d002      	beq.n	800360e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	2b09      	cmp	r3, #9
 800360c:	d104      	bne.n	8003618 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	61bb      	str	r3, [r7, #24]
 8003616:	e00c      	b.n	8003632 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a11      	ldr	r2, [pc, #68]	@ (8003664 <HAL_ADC_PollForConversion+0x1dc>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d002      	beq.n	8003628 <HAL_ADC_PollForConversion+0x1a0>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	e000      	b.n	800362a <HAL_ADC_PollForConversion+0x1a2>
 8003628:	4b0d      	ldr	r3, [pc, #52]	@ (8003660 <HAL_ADC_PollForConversion+0x1d8>)
 800362a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	2b08      	cmp	r3, #8
 8003636:	d104      	bne.n	8003642 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2208      	movs	r2, #8
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	e008      	b.n	8003654 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d103      	bne.n	8003654 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	220c      	movs	r2, #12
 8003652:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3720      	adds	r7, #32
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40022000 	.word	0x40022000
 8003664:	40022100 	.word	0x40022100
 8003668:	40022300 	.word	0x40022300
 800366c:	58026300 	.word	0x58026300

08003670 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800367e:	4618      	mov	r0, r3
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
	...

0800368c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800368c:	b590      	push	{r4, r7, lr}
 800368e:	b08d      	sub	sp, #52	@ 0x34
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	4a65      	ldr	r2, [pc, #404]	@ (800383c <HAL_ADC_ConfigChannel+0x1b0>)
 80036a6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d101      	bne.n	80036b6 <HAL_ADC_ConfigChannel+0x2a>
 80036b2:	2302      	movs	r3, #2
 80036b4:	e2c7      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x5ba>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff fc04 	bl	8002ed0 <LL_ADC_REG_IsConversionOngoing>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f040 82ac 	bne.w	8003c28 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	db2c      	blt.n	8003732 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d108      	bne.n	80036f6 <HAL_ADC_ConfigChannel+0x6a>
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	0e9b      	lsrs	r3, r3, #26
 80036ea:	f003 031f 	and.w	r3, r3, #31
 80036ee:	2201      	movs	r2, #1
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	e016      	b.n	8003724 <HAL_ADC_ConfigChannel+0x98>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	fa93 f3a3 	rbit	r3, r3
 8003702:	613b      	str	r3, [r7, #16]
  return result;
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 800370e:	2320      	movs	r3, #32
 8003710:	e003      	b.n	800371a <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	fab3 f383 	clz	r3, r3
 8003718:	b2db      	uxtb	r3, r3
 800371a:	f003 031f 	and.w	r3, r3, #31
 800371e:	2201      	movs	r2, #1
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	69d1      	ldr	r1, [r2, #28]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6812      	ldr	r2, [r2, #0]
 800372e:	430b      	orrs	r3, r1
 8003730:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6818      	ldr	r0, [r3, #0]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	6859      	ldr	r1, [r3, #4]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	f7ff fa6a 	bl	8002c18 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff fbc1 	bl	8002ed0 <LL_ADC_REG_IsConversionOngoing>
 800374e:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff fbe3 	bl	8002f20 <LL_ADC_INJ_IsConversionOngoing>
 800375a:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800375c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800375e:	2b00      	cmp	r3, #0
 8003760:	f040 80b8 	bne.w	80038d4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003766:	2b00      	cmp	r3, #0
 8003768:	f040 80b4 	bne.w	80038d4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6818      	ldr	r0, [r3, #0]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	6819      	ldr	r1, [r3, #0]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	461a      	mov	r2, r3
 800377a:	f7ff fa79 	bl	8002c70 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800377e:	4b30      	ldr	r3, [pc, #192]	@ (8003840 <HAL_ADC_ConfigChannel+0x1b4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003786:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800378a:	d10b      	bne.n	80037a4 <HAL_ADC_ConfigChannel+0x118>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	695a      	ldr	r2, [r3, #20]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	089b      	lsrs	r3, r3, #2
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	e01d      	b.n	80037e0 <HAL_ADC_ConfigChannel+0x154>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f003 0310 	and.w	r3, r3, #16
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10b      	bne.n	80037ca <HAL_ADC_ConfigChannel+0x13e>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	089b      	lsrs	r3, r3, #2
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	e00a      	b.n	80037e0 <HAL_ADC_ConfigChannel+0x154>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	695a      	ldr	r2, [r3, #20]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	089b      	lsrs	r3, r3, #2
 80037d6:	f003 0304 	and.w	r3, r3, #4
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d02c      	beq.n	8003844 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6818      	ldr	r0, [r3, #0]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	6919      	ldr	r1, [r3, #16]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	f7ff f9a7 	bl	8002b4a <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6818      	ldr	r0, [r3, #0]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	6919      	ldr	r1, [r3, #16]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	7e5b      	ldrb	r3, [r3, #25]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d102      	bne.n	8003812 <HAL_ADC_ConfigChannel+0x186>
 800380c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003810:	e000      	b.n	8003814 <HAL_ADC_ConfigChannel+0x188>
 8003812:	2300      	movs	r3, #0
 8003814:	461a      	mov	r2, r3
 8003816:	f7ff f9d1 	bl	8002bbc <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	6919      	ldr	r1, [r3, #16]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	7e1b      	ldrb	r3, [r3, #24]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d102      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x1a4>
 800382a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800382e:	e000      	b.n	8003832 <HAL_ADC_ConfigChannel+0x1a6>
 8003830:	2300      	movs	r3, #0
 8003832:	461a      	mov	r2, r3
 8003834:	f7ff f9a9 	bl	8002b8a <LL_ADC_SetDataRightShift>
 8003838:	e04c      	b.n	80038d4 <HAL_ADC_ConfigChannel+0x248>
 800383a:	bf00      	nop
 800383c:	47ff0000 	.word	0x47ff0000
 8003840:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800384a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	069b      	lsls	r3, r3, #26
 8003854:	429a      	cmp	r2, r3
 8003856:	d107      	bne.n	8003868 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003866:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800386e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	069b      	lsls	r3, r3, #26
 8003878:	429a      	cmp	r2, r3
 800387a:	d107      	bne.n	800388c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800388a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003892:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	069b      	lsls	r3, r3, #26
 800389c:	429a      	cmp	r2, r3
 800389e:	d107      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80038ae:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	069b      	lsls	r3, r3, #26
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d107      	bne.n	80038d4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80038d2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff faab 	bl	8002e34 <LL_ADC_IsEnabled>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f040 81aa 	bne.w	8003c3a <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6818      	ldr	r0, [r3, #0]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	6819      	ldr	r1, [r3, #0]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	461a      	mov	r2, r3
 80038f4:	f7ff f9e8 	bl	8002cc8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	4a87      	ldr	r2, [pc, #540]	@ (8003b1c <HAL_ADC_ConfigChannel+0x490>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	f040 809a 	bne.w	8003a38 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4984      	ldr	r1, [pc, #528]	@ (8003b20 <HAL_ADC_ConfigChannel+0x494>)
 800390e:	428b      	cmp	r3, r1
 8003910:	d147      	bne.n	80039a2 <HAL_ADC_ConfigChannel+0x316>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4983      	ldr	r1, [pc, #524]	@ (8003b24 <HAL_ADC_ConfigChannel+0x498>)
 8003918:	428b      	cmp	r3, r1
 800391a:	d040      	beq.n	800399e <HAL_ADC_ConfigChannel+0x312>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4981      	ldr	r1, [pc, #516]	@ (8003b28 <HAL_ADC_ConfigChannel+0x49c>)
 8003922:	428b      	cmp	r3, r1
 8003924:	d039      	beq.n	800399a <HAL_ADC_ConfigChannel+0x30e>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4980      	ldr	r1, [pc, #512]	@ (8003b2c <HAL_ADC_ConfigChannel+0x4a0>)
 800392c:	428b      	cmp	r3, r1
 800392e:	d032      	beq.n	8003996 <HAL_ADC_ConfigChannel+0x30a>
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	497e      	ldr	r1, [pc, #504]	@ (8003b30 <HAL_ADC_ConfigChannel+0x4a4>)
 8003936:	428b      	cmp	r3, r1
 8003938:	d02b      	beq.n	8003992 <HAL_ADC_ConfigChannel+0x306>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	497d      	ldr	r1, [pc, #500]	@ (8003b34 <HAL_ADC_ConfigChannel+0x4a8>)
 8003940:	428b      	cmp	r3, r1
 8003942:	d024      	beq.n	800398e <HAL_ADC_ConfigChannel+0x302>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	497b      	ldr	r1, [pc, #492]	@ (8003b38 <HAL_ADC_ConfigChannel+0x4ac>)
 800394a:	428b      	cmp	r3, r1
 800394c:	d01d      	beq.n	800398a <HAL_ADC_ConfigChannel+0x2fe>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	497a      	ldr	r1, [pc, #488]	@ (8003b3c <HAL_ADC_ConfigChannel+0x4b0>)
 8003954:	428b      	cmp	r3, r1
 8003956:	d016      	beq.n	8003986 <HAL_ADC_ConfigChannel+0x2fa>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4978      	ldr	r1, [pc, #480]	@ (8003b40 <HAL_ADC_ConfigChannel+0x4b4>)
 800395e:	428b      	cmp	r3, r1
 8003960:	d00f      	beq.n	8003982 <HAL_ADC_ConfigChannel+0x2f6>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4977      	ldr	r1, [pc, #476]	@ (8003b44 <HAL_ADC_ConfigChannel+0x4b8>)
 8003968:	428b      	cmp	r3, r1
 800396a:	d008      	beq.n	800397e <HAL_ADC_ConfigChannel+0x2f2>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4975      	ldr	r1, [pc, #468]	@ (8003b48 <HAL_ADC_ConfigChannel+0x4bc>)
 8003972:	428b      	cmp	r3, r1
 8003974:	d101      	bne.n	800397a <HAL_ADC_ConfigChannel+0x2ee>
 8003976:	4b75      	ldr	r3, [pc, #468]	@ (8003b4c <HAL_ADC_ConfigChannel+0x4c0>)
 8003978:	e05a      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 800397a:	2300      	movs	r3, #0
 800397c:	e058      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 800397e:	4b74      	ldr	r3, [pc, #464]	@ (8003b50 <HAL_ADC_ConfigChannel+0x4c4>)
 8003980:	e056      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 8003982:	4b74      	ldr	r3, [pc, #464]	@ (8003b54 <HAL_ADC_ConfigChannel+0x4c8>)
 8003984:	e054      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 8003986:	4b6e      	ldr	r3, [pc, #440]	@ (8003b40 <HAL_ADC_ConfigChannel+0x4b4>)
 8003988:	e052      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 800398a:	4b6c      	ldr	r3, [pc, #432]	@ (8003b3c <HAL_ADC_ConfigChannel+0x4b0>)
 800398c:	e050      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 800398e:	4b72      	ldr	r3, [pc, #456]	@ (8003b58 <HAL_ADC_ConfigChannel+0x4cc>)
 8003990:	e04e      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 8003992:	4b72      	ldr	r3, [pc, #456]	@ (8003b5c <HAL_ADC_ConfigChannel+0x4d0>)
 8003994:	e04c      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 8003996:	4b72      	ldr	r3, [pc, #456]	@ (8003b60 <HAL_ADC_ConfigChannel+0x4d4>)
 8003998:	e04a      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 800399a:	4b72      	ldr	r3, [pc, #456]	@ (8003b64 <HAL_ADC_ConfigChannel+0x4d8>)
 800399c:	e048      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 800399e:	2301      	movs	r3, #1
 80039a0:	e046      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4970      	ldr	r1, [pc, #448]	@ (8003b68 <HAL_ADC_ConfigChannel+0x4dc>)
 80039a8:	428b      	cmp	r3, r1
 80039aa:	d140      	bne.n	8003a2e <HAL_ADC_ConfigChannel+0x3a2>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	495c      	ldr	r1, [pc, #368]	@ (8003b24 <HAL_ADC_ConfigChannel+0x498>)
 80039b2:	428b      	cmp	r3, r1
 80039b4:	d039      	beq.n	8003a2a <HAL_ADC_ConfigChannel+0x39e>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	495b      	ldr	r1, [pc, #364]	@ (8003b28 <HAL_ADC_ConfigChannel+0x49c>)
 80039bc:	428b      	cmp	r3, r1
 80039be:	d032      	beq.n	8003a26 <HAL_ADC_ConfigChannel+0x39a>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4959      	ldr	r1, [pc, #356]	@ (8003b2c <HAL_ADC_ConfigChannel+0x4a0>)
 80039c6:	428b      	cmp	r3, r1
 80039c8:	d02b      	beq.n	8003a22 <HAL_ADC_ConfigChannel+0x396>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4958      	ldr	r1, [pc, #352]	@ (8003b30 <HAL_ADC_ConfigChannel+0x4a4>)
 80039d0:	428b      	cmp	r3, r1
 80039d2:	d024      	beq.n	8003a1e <HAL_ADC_ConfigChannel+0x392>
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4956      	ldr	r1, [pc, #344]	@ (8003b34 <HAL_ADC_ConfigChannel+0x4a8>)
 80039da:	428b      	cmp	r3, r1
 80039dc:	d01d      	beq.n	8003a1a <HAL_ADC_ConfigChannel+0x38e>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4955      	ldr	r1, [pc, #340]	@ (8003b38 <HAL_ADC_ConfigChannel+0x4ac>)
 80039e4:	428b      	cmp	r3, r1
 80039e6:	d016      	beq.n	8003a16 <HAL_ADC_ConfigChannel+0x38a>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4953      	ldr	r1, [pc, #332]	@ (8003b3c <HAL_ADC_ConfigChannel+0x4b0>)
 80039ee:	428b      	cmp	r3, r1
 80039f0:	d00f      	beq.n	8003a12 <HAL_ADC_ConfigChannel+0x386>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4952      	ldr	r1, [pc, #328]	@ (8003b40 <HAL_ADC_ConfigChannel+0x4b4>)
 80039f8:	428b      	cmp	r3, r1
 80039fa:	d008      	beq.n	8003a0e <HAL_ADC_ConfigChannel+0x382>
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4951      	ldr	r1, [pc, #324]	@ (8003b48 <HAL_ADC_ConfigChannel+0x4bc>)
 8003a02:	428b      	cmp	r3, r1
 8003a04:	d101      	bne.n	8003a0a <HAL_ADC_ConfigChannel+0x37e>
 8003a06:	4b51      	ldr	r3, [pc, #324]	@ (8003b4c <HAL_ADC_ConfigChannel+0x4c0>)
 8003a08:	e012      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	e010      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 8003a0e:	4b51      	ldr	r3, [pc, #324]	@ (8003b54 <HAL_ADC_ConfigChannel+0x4c8>)
 8003a10:	e00e      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 8003a12:	4b4b      	ldr	r3, [pc, #300]	@ (8003b40 <HAL_ADC_ConfigChannel+0x4b4>)
 8003a14:	e00c      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 8003a16:	4b49      	ldr	r3, [pc, #292]	@ (8003b3c <HAL_ADC_ConfigChannel+0x4b0>)
 8003a18:	e00a      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 8003a1a:	4b4f      	ldr	r3, [pc, #316]	@ (8003b58 <HAL_ADC_ConfigChannel+0x4cc>)
 8003a1c:	e008      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 8003a1e:	4b4f      	ldr	r3, [pc, #316]	@ (8003b5c <HAL_ADC_ConfigChannel+0x4d0>)
 8003a20:	e006      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 8003a22:	4b4f      	ldr	r3, [pc, #316]	@ (8003b60 <HAL_ADC_ConfigChannel+0x4d4>)
 8003a24:	e004      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 8003a26:	4b4f      	ldr	r3, [pc, #316]	@ (8003b64 <HAL_ADC_ConfigChannel+0x4d8>)
 8003a28:	e002      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	4619      	mov	r1, r3
 8003a32:	4610      	mov	r0, r2
 8003a34:	f7ff f856 	bl	8002ae4 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f280 80fc 	bge.w	8003c3a <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a36      	ldr	r2, [pc, #216]	@ (8003b20 <HAL_ADC_ConfigChannel+0x494>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d004      	beq.n	8003a56 <HAL_ADC_ConfigChannel+0x3ca>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a45      	ldr	r2, [pc, #276]	@ (8003b68 <HAL_ADC_ConfigChannel+0x4dc>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d101      	bne.n	8003a5a <HAL_ADC_ConfigChannel+0x3ce>
 8003a56:	4b45      	ldr	r3, [pc, #276]	@ (8003b6c <HAL_ADC_ConfigChannel+0x4e0>)
 8003a58:	e000      	b.n	8003a5c <HAL_ADC_ConfigChannel+0x3d0>
 8003a5a:	4b45      	ldr	r3, [pc, #276]	@ (8003b70 <HAL_ADC_ConfigChannel+0x4e4>)
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff f833 	bl	8002ac8 <LL_ADC_GetCommonPathInternalCh>
 8003a62:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a2d      	ldr	r2, [pc, #180]	@ (8003b20 <HAL_ADC_ConfigChannel+0x494>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d004      	beq.n	8003a78 <HAL_ADC_ConfigChannel+0x3ec>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a3d      	ldr	r2, [pc, #244]	@ (8003b68 <HAL_ADC_ConfigChannel+0x4dc>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d10e      	bne.n	8003a96 <HAL_ADC_ConfigChannel+0x40a>
 8003a78:	4829      	ldr	r0, [pc, #164]	@ (8003b20 <HAL_ADC_ConfigChannel+0x494>)
 8003a7a:	f7ff f9db 	bl	8002e34 <LL_ADC_IsEnabled>
 8003a7e:	4604      	mov	r4, r0
 8003a80:	4839      	ldr	r0, [pc, #228]	@ (8003b68 <HAL_ADC_ConfigChannel+0x4dc>)
 8003a82:	f7ff f9d7 	bl	8002e34 <LL_ADC_IsEnabled>
 8003a86:	4603      	mov	r3, r0
 8003a88:	4323      	orrs	r3, r4
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	bf0c      	ite	eq
 8003a8e:	2301      	moveq	r3, #1
 8003a90:	2300      	movne	r3, #0
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	e008      	b.n	8003aa8 <HAL_ADC_ConfigChannel+0x41c>
 8003a96:	4837      	ldr	r0, [pc, #220]	@ (8003b74 <HAL_ADC_ConfigChannel+0x4e8>)
 8003a98:	f7ff f9cc 	bl	8002e34 <LL_ADC_IsEnabled>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	bf0c      	ite	eq
 8003aa2:	2301      	moveq	r3, #1
 8003aa4:	2300      	movne	r3, #0
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 80b3 	beq.w	8003c14 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a31      	ldr	r2, [pc, #196]	@ (8003b78 <HAL_ADC_ConfigChannel+0x4ec>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d165      	bne.n	8003b84 <HAL_ADC_ConfigChannel+0x4f8>
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d160      	bne.n	8003b84 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a2b      	ldr	r2, [pc, #172]	@ (8003b74 <HAL_ADC_ConfigChannel+0x4e8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	f040 80b6 	bne.w	8003c3a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a13      	ldr	r2, [pc, #76]	@ (8003b20 <HAL_ADC_ConfigChannel+0x494>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d004      	beq.n	8003ae2 <HAL_ADC_ConfigChannel+0x456>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a22      	ldr	r2, [pc, #136]	@ (8003b68 <HAL_ADC_ConfigChannel+0x4dc>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d101      	bne.n	8003ae6 <HAL_ADC_ConfigChannel+0x45a>
 8003ae2:	4a22      	ldr	r2, [pc, #136]	@ (8003b6c <HAL_ADC_ConfigChannel+0x4e0>)
 8003ae4:	e000      	b.n	8003ae8 <HAL_ADC_ConfigChannel+0x45c>
 8003ae6:	4a22      	ldr	r2, [pc, #136]	@ (8003b70 <HAL_ADC_ConfigChannel+0x4e4>)
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003aee:	4619      	mov	r1, r3
 8003af0:	4610      	mov	r0, r2
 8003af2:	f7fe ffd6 	bl	8002aa2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003af6:	4b21      	ldr	r3, [pc, #132]	@ (8003b7c <HAL_ADC_ConfigChannel+0x4f0>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	099b      	lsrs	r3, r3, #6
 8003afc:	4a20      	ldr	r2, [pc, #128]	@ (8003b80 <HAL_ADC_ConfigChannel+0x4f4>)
 8003afe:	fba2 2303 	umull	r2, r3, r2, r3
 8003b02:	099b      	lsrs	r3, r3, #6
 8003b04:	3301      	adds	r3, #1
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003b0a:	e002      	b.n	8003b12 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1f9      	bne.n	8003b0c <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b18:	e08f      	b.n	8003c3a <HAL_ADC_ConfigChannel+0x5ae>
 8003b1a:	bf00      	nop
 8003b1c:	47ff0000 	.word	0x47ff0000
 8003b20:	40022000 	.word	0x40022000
 8003b24:	04300002 	.word	0x04300002
 8003b28:	08600004 	.word	0x08600004
 8003b2c:	0c900008 	.word	0x0c900008
 8003b30:	10c00010 	.word	0x10c00010
 8003b34:	14f00020 	.word	0x14f00020
 8003b38:	2a000400 	.word	0x2a000400
 8003b3c:	2e300800 	.word	0x2e300800
 8003b40:	32601000 	.word	0x32601000
 8003b44:	43210000 	.word	0x43210000
 8003b48:	4b840000 	.word	0x4b840000
 8003b4c:	4fb80000 	.word	0x4fb80000
 8003b50:	47520000 	.word	0x47520000
 8003b54:	36902000 	.word	0x36902000
 8003b58:	25b00200 	.word	0x25b00200
 8003b5c:	21800100 	.word	0x21800100
 8003b60:	1d500080 	.word	0x1d500080
 8003b64:	19200040 	.word	0x19200040
 8003b68:	40022100 	.word	0x40022100
 8003b6c:	40022300 	.word	0x40022300
 8003b70:	58026300 	.word	0x58026300
 8003b74:	58026000 	.word	0x58026000
 8003b78:	cb840000 	.word	0xcb840000
 8003b7c:	24000388 	.word	0x24000388
 8003b80:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a31      	ldr	r2, [pc, #196]	@ (8003c50 <HAL_ADC_ConfigChannel+0x5c4>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d11e      	bne.n	8003bcc <HAL_ADC_ConfigChannel+0x540>
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d119      	bne.n	8003bcc <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a2d      	ldr	r2, [pc, #180]	@ (8003c54 <HAL_ADC_ConfigChannel+0x5c8>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d14b      	bne.n	8003c3a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a2c      	ldr	r2, [pc, #176]	@ (8003c58 <HAL_ADC_ConfigChannel+0x5cc>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d004      	beq.n	8003bb6 <HAL_ADC_ConfigChannel+0x52a>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a2a      	ldr	r2, [pc, #168]	@ (8003c5c <HAL_ADC_ConfigChannel+0x5d0>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d101      	bne.n	8003bba <HAL_ADC_ConfigChannel+0x52e>
 8003bb6:	4a2a      	ldr	r2, [pc, #168]	@ (8003c60 <HAL_ADC_ConfigChannel+0x5d4>)
 8003bb8:	e000      	b.n	8003bbc <HAL_ADC_ConfigChannel+0x530>
 8003bba:	4a2a      	ldr	r2, [pc, #168]	@ (8003c64 <HAL_ADC_ConfigChannel+0x5d8>)
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	4610      	mov	r0, r2
 8003bc6:	f7fe ff6c 	bl	8002aa2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bca:	e036      	b.n	8003c3a <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a25      	ldr	r2, [pc, #148]	@ (8003c68 <HAL_ADC_ConfigChannel+0x5dc>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d131      	bne.n	8003c3a <HAL_ADC_ConfigChannel+0x5ae>
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d12c      	bne.n	8003c3a <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a1b      	ldr	r2, [pc, #108]	@ (8003c54 <HAL_ADC_ConfigChannel+0x5c8>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d127      	bne.n	8003c3a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a1a      	ldr	r2, [pc, #104]	@ (8003c58 <HAL_ADC_ConfigChannel+0x5cc>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d004      	beq.n	8003bfe <HAL_ADC_ConfigChannel+0x572>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a18      	ldr	r2, [pc, #96]	@ (8003c5c <HAL_ADC_ConfigChannel+0x5d0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d101      	bne.n	8003c02 <HAL_ADC_ConfigChannel+0x576>
 8003bfe:	4a18      	ldr	r2, [pc, #96]	@ (8003c60 <HAL_ADC_ConfigChannel+0x5d4>)
 8003c00:	e000      	b.n	8003c04 <HAL_ADC_ConfigChannel+0x578>
 8003c02:	4a18      	ldr	r2, [pc, #96]	@ (8003c64 <HAL_ADC_ConfigChannel+0x5d8>)
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	f7fe ff48 	bl	8002aa2 <LL_ADC_SetCommonPathInternalCh>
 8003c12:	e012      	b.n	8003c3a <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c18:	f043 0220 	orr.w	r2, r3, #32
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003c26:	e008      	b.n	8003c3a <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c2c:	f043 0220 	orr.w	r2, r3, #32
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003c42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3734      	adds	r7, #52	@ 0x34
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd90      	pop	{r4, r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	c7520000 	.word	0xc7520000
 8003c54:	58026000 	.word	0x58026000
 8003c58:	40022000 	.word	0x40022000
 8003c5c:	40022100 	.word	0x40022100
 8003c60:	40022300 	.word	0x40022300
 8003c64:	58026300 	.word	0x58026300
 8003c68:	cfb80000 	.word	0xcfb80000

08003c6c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b088      	sub	sp, #32
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003c76:	2300      	movs	r3, #0
 8003c78:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff f924 	bl	8002ed0 <LL_ADC_REG_IsConversionOngoing>
 8003c88:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff f946 	bl	8002f20 <LL_ADC_INJ_IsConversionOngoing>
 8003c94:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d103      	bne.n	8003ca4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 8098 	beq.w	8003dd4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d02a      	beq.n	8003d08 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	7d5b      	ldrb	r3, [r3, #21]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d126      	bne.n	8003d08 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	7d1b      	ldrb	r3, [r3, #20]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d122      	bne.n	8003d08 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003cc6:	e014      	b.n	8003cf2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	4a45      	ldr	r2, [pc, #276]	@ (8003de0 <ADC_ConversionStop+0x174>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d90d      	bls.n	8003cec <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd4:	f043 0210 	orr.w	r2, r3, #16
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce0:	f043 0201 	orr.w	r2, r3, #1
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e074      	b.n	8003dd6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cfc:	2b40      	cmp	r3, #64	@ 0x40
 8003cfe:	d1e3      	bne.n	8003cc8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2240      	movs	r2, #64	@ 0x40
 8003d06:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d014      	beq.n	8003d38 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff f8dc 	bl	8002ed0 <LL_ADC_REG_IsConversionOngoing>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00c      	beq.n	8003d38 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff f899 	bl	8002e5a <LL_ADC_IsDisableOngoing>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d104      	bne.n	8003d38 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7ff f8b8 	bl	8002ea8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d014      	beq.n	8003d68 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff f8ec 	bl	8002f20 <LL_ADC_INJ_IsConversionOngoing>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00c      	beq.n	8003d68 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff f881 	bl	8002e5a <LL_ADC_IsDisableOngoing>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d104      	bne.n	8003d68 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7ff f8c8 	bl	8002ef8 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d005      	beq.n	8003d7a <ADC_ConversionStop+0x10e>
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	2b03      	cmp	r3, #3
 8003d72:	d105      	bne.n	8003d80 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003d74:	230c      	movs	r3, #12
 8003d76:	617b      	str	r3, [r7, #20]
        break;
 8003d78:	e005      	b.n	8003d86 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003d7a:	2308      	movs	r3, #8
 8003d7c:	617b      	str	r3, [r7, #20]
        break;
 8003d7e:	e002      	b.n	8003d86 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003d80:	2304      	movs	r3, #4
 8003d82:	617b      	str	r3, [r7, #20]
        break;
 8003d84:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003d86:	f7fe fe27 	bl	80029d8 <HAL_GetTick>
 8003d8a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003d8c:	e01b      	b.n	8003dc6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003d8e:	f7fe fe23 	bl	80029d8 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b05      	cmp	r3, #5
 8003d9a:	d914      	bls.n	8003dc6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689a      	ldr	r2, [r3, #8]
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	4013      	ands	r3, r2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00d      	beq.n	8003dc6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dae:	f043 0210 	orr.w	r2, r3, #16
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dba:	f043 0201 	orr.w	r2, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e007      	b.n	8003dd6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1dc      	bne.n	8003d8e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3720      	adds	r7, #32
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	000cdbff 	.word	0x000cdbff

08003de4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff f81f 	bl	8002e34 <LL_ADC_IsEnabled>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d16e      	bne.n	8003eda <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	4b38      	ldr	r3, [pc, #224]	@ (8003ee4 <ADC_Enable+0x100>)
 8003e04:	4013      	ands	r3, r2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00d      	beq.n	8003e26 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e0e:	f043 0210 	orr.w	r2, r3, #16
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e1a:	f043 0201 	orr.w	r2, r3, #1
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e05a      	b.n	8003edc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fe ffda 	bl	8002de4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003e30:	f7fe fdd2 	bl	80029d8 <HAL_GetTick>
 8003e34:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a2b      	ldr	r2, [pc, #172]	@ (8003ee8 <ADC_Enable+0x104>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d004      	beq.n	8003e4a <ADC_Enable+0x66>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a29      	ldr	r2, [pc, #164]	@ (8003eec <ADC_Enable+0x108>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d101      	bne.n	8003e4e <ADC_Enable+0x6a>
 8003e4a:	4b29      	ldr	r3, [pc, #164]	@ (8003ef0 <ADC_Enable+0x10c>)
 8003e4c:	e000      	b.n	8003e50 <ADC_Enable+0x6c>
 8003e4e:	4b29      	ldr	r3, [pc, #164]	@ (8003ef4 <ADC_Enable+0x110>)
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fe ff5d 	bl	8002d10 <LL_ADC_GetMultimode>
 8003e56:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a23      	ldr	r2, [pc, #140]	@ (8003eec <ADC_Enable+0x108>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d002      	beq.n	8003e68 <ADC_Enable+0x84>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	e000      	b.n	8003e6a <ADC_Enable+0x86>
 8003e68:	4b1f      	ldr	r3, [pc, #124]	@ (8003ee8 <ADC_Enable+0x104>)
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6812      	ldr	r2, [r2, #0]
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d02c      	beq.n	8003ecc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d130      	bne.n	8003eda <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e78:	e028      	b.n	8003ecc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fe ffd8 	bl	8002e34 <LL_ADC_IsEnabled>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d104      	bne.n	8003e94 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fe ffa8 	bl	8002de4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e94:	f7fe fda0 	bl	80029d8 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d914      	bls.n	8003ecc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d00d      	beq.n	8003ecc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb4:	f043 0210 	orr.w	r2, r3, #16
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec0:	f043 0201 	orr.w	r2, r3, #1
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e007      	b.n	8003edc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d1cf      	bne.n	8003e7a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	8000003f 	.word	0x8000003f
 8003ee8:	40022000 	.word	0x40022000
 8003eec:	40022100 	.word	0x40022100
 8003ef0:	40022300 	.word	0x40022300
 8003ef4:	58026300 	.word	0x58026300

08003ef8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7fe ffa8 	bl	8002e5a <LL_ADC_IsDisableOngoing>
 8003f0a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fe ff8f 	bl	8002e34 <LL_ADC_IsEnabled>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d047      	beq.n	8003fac <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d144      	bne.n	8003fac <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f003 030d 	and.w	r3, r3, #13
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d10c      	bne.n	8003f4a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fe ff69 	bl	8002e0c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2203      	movs	r2, #3
 8003f40:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f42:	f7fe fd49 	bl	80029d8 <HAL_GetTick>
 8003f46:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f48:	e029      	b.n	8003f9e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f4e:	f043 0210 	orr.w	r2, r3, #16
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f5a:	f043 0201 	orr.w	r2, r3, #1
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e023      	b.n	8003fae <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003f66:	f7fe fd37 	bl	80029d8 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d914      	bls.n	8003f9e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00d      	beq.n	8003f9e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f86:	f043 0210 	orr.w	r2, r3, #16
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f92:	f043 0201 	orr.w	r2, r3, #1
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e007      	b.n	8003fae <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1dc      	bne.n	8003f66 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
	...

08003fb8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a7a      	ldr	r2, [pc, #488]	@ (80041b0 <ADC_ConfigureBoostMode+0x1f8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d004      	beq.n	8003fd4 <ADC_ConfigureBoostMode+0x1c>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a79      	ldr	r2, [pc, #484]	@ (80041b4 <ADC_ConfigureBoostMode+0x1fc>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d109      	bne.n	8003fe8 <ADC_ConfigureBoostMode+0x30>
 8003fd4:	4b78      	ldr	r3, [pc, #480]	@ (80041b8 <ADC_ConfigureBoostMode+0x200>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	bf14      	ite	ne
 8003fe0:	2301      	movne	r3, #1
 8003fe2:	2300      	moveq	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	e008      	b.n	8003ffa <ADC_ConfigureBoostMode+0x42>
 8003fe8:	4b74      	ldr	r3, [pc, #464]	@ (80041bc <ADC_ConfigureBoostMode+0x204>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	bf14      	ite	ne
 8003ff4:	2301      	movne	r3, #1
 8003ff6:	2300      	moveq	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d01c      	beq.n	8004038 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003ffe:	f003 f867 	bl	80070d0 <HAL_RCC_GetHCLKFreq>
 8004002:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800400c:	d010      	beq.n	8004030 <ADC_ConfigureBoostMode+0x78>
 800400e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004012:	d873      	bhi.n	80040fc <ADC_ConfigureBoostMode+0x144>
 8004014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004018:	d002      	beq.n	8004020 <ADC_ConfigureBoostMode+0x68>
 800401a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800401e:	d16d      	bne.n	80040fc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	0c1b      	lsrs	r3, r3, #16
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	fbb2 f3f3 	udiv	r3, r2, r3
 800402c:	60fb      	str	r3, [r7, #12]
        break;
 800402e:	e068      	b.n	8004102 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	089b      	lsrs	r3, r3, #2
 8004034:	60fb      	str	r3, [r7, #12]
        break;
 8004036:	e064      	b.n	8004102 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004038:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800403c:	f04f 0100 	mov.w	r1, #0
 8004040:	f004 fa96 	bl	8008570 <HAL_RCCEx_GetPeriphCLKFreq>
 8004044:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800404e:	d051      	beq.n	80040f4 <ADC_ConfigureBoostMode+0x13c>
 8004050:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004054:	d854      	bhi.n	8004100 <ADC_ConfigureBoostMode+0x148>
 8004056:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800405a:	d047      	beq.n	80040ec <ADC_ConfigureBoostMode+0x134>
 800405c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004060:	d84e      	bhi.n	8004100 <ADC_ConfigureBoostMode+0x148>
 8004062:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004066:	d03d      	beq.n	80040e4 <ADC_ConfigureBoostMode+0x12c>
 8004068:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800406c:	d848      	bhi.n	8004100 <ADC_ConfigureBoostMode+0x148>
 800406e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004072:	d033      	beq.n	80040dc <ADC_ConfigureBoostMode+0x124>
 8004074:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004078:	d842      	bhi.n	8004100 <ADC_ConfigureBoostMode+0x148>
 800407a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800407e:	d029      	beq.n	80040d4 <ADC_ConfigureBoostMode+0x11c>
 8004080:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004084:	d83c      	bhi.n	8004100 <ADC_ConfigureBoostMode+0x148>
 8004086:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800408a:	d01a      	beq.n	80040c2 <ADC_ConfigureBoostMode+0x10a>
 800408c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004090:	d836      	bhi.n	8004100 <ADC_ConfigureBoostMode+0x148>
 8004092:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004096:	d014      	beq.n	80040c2 <ADC_ConfigureBoostMode+0x10a>
 8004098:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800409c:	d830      	bhi.n	8004100 <ADC_ConfigureBoostMode+0x148>
 800409e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040a2:	d00e      	beq.n	80040c2 <ADC_ConfigureBoostMode+0x10a>
 80040a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040a8:	d82a      	bhi.n	8004100 <ADC_ConfigureBoostMode+0x148>
 80040aa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80040ae:	d008      	beq.n	80040c2 <ADC_ConfigureBoostMode+0x10a>
 80040b0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80040b4:	d824      	bhi.n	8004100 <ADC_ConfigureBoostMode+0x148>
 80040b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040ba:	d002      	beq.n	80040c2 <ADC_ConfigureBoostMode+0x10a>
 80040bc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80040c0:	d11e      	bne.n	8004100 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	0c9b      	lsrs	r3, r3, #18
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d0:	60fb      	str	r3, [r7, #12]
        break;
 80040d2:	e016      	b.n	8004102 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	091b      	lsrs	r3, r3, #4
 80040d8:	60fb      	str	r3, [r7, #12]
        break;
 80040da:	e012      	b.n	8004102 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	60fb      	str	r3, [r7, #12]
        break;
 80040e2:	e00e      	b.n	8004102 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	099b      	lsrs	r3, r3, #6
 80040e8:	60fb      	str	r3, [r7, #12]
        break;
 80040ea:	e00a      	b.n	8004102 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	09db      	lsrs	r3, r3, #7
 80040f0:	60fb      	str	r3, [r7, #12]
        break;
 80040f2:	e006      	b.n	8004102 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	0a1b      	lsrs	r3, r3, #8
 80040f8:	60fb      	str	r3, [r7, #12]
        break;
 80040fa:	e002      	b.n	8004102 <ADC_ConfigureBoostMode+0x14a>
        break;
 80040fc:	bf00      	nop
 80040fe:	e000      	b.n	8004102 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004100:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004102:	f7fe fc99 	bl	8002a38 <HAL_GetREVID>
 8004106:	4603      	mov	r3, r0
 8004108:	f241 0203 	movw	r2, #4099	@ 0x1003
 800410c:	4293      	cmp	r3, r2
 800410e:	d815      	bhi.n	800413c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4a2b      	ldr	r2, [pc, #172]	@ (80041c0 <ADC_ConfigureBoostMode+0x208>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d908      	bls.n	800412a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689a      	ldr	r2, [r3, #8]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004126:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004128:	e03e      	b.n	80041a8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004138:	609a      	str	r2, [r3, #8]
}
 800413a:	e035      	b.n	80041a8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	085b      	lsrs	r3, r3, #1
 8004140:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	4a1f      	ldr	r2, [pc, #124]	@ (80041c4 <ADC_ConfigureBoostMode+0x20c>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d808      	bhi.n	800415c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004158:	609a      	str	r2, [r3, #8]
}
 800415a:	e025      	b.n	80041a8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4a1a      	ldr	r2, [pc, #104]	@ (80041c8 <ADC_ConfigureBoostMode+0x210>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d80a      	bhi.n	800417a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004176:	609a      	str	r2, [r3, #8]
}
 8004178:	e016      	b.n	80041a8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	4a13      	ldr	r2, [pc, #76]	@ (80041cc <ADC_ConfigureBoostMode+0x214>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d80a      	bhi.n	8004198 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004194:	609a      	str	r2, [r3, #8]
}
 8004196:	e007      	b.n	80041a8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689a      	ldr	r2, [r3, #8]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80041a6:	609a      	str	r2, [r3, #8]
}
 80041a8:	bf00      	nop
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40022000 	.word	0x40022000
 80041b4:	40022100 	.word	0x40022100
 80041b8:	40022300 	.word	0x40022300
 80041bc:	58026300 	.word	0x58026300
 80041c0:	01312d00 	.word	0x01312d00
 80041c4:	005f5e10 	.word	0x005f5e10
 80041c8:	00bebc20 	.word	0x00bebc20
 80041cc:	017d7840 	.word	0x017d7840

080041d0 <LL_ADC_IsEnabled>:
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d101      	bne.n	80041e8 <LL_ADC_IsEnabled+0x18>
 80041e4:	2301      	movs	r3, #1
 80041e6:	e000      	b.n	80041ea <LL_ADC_IsEnabled+0x1a>
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
	...

080041f8 <LL_ADC_StartCalibration>:
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	4b09      	ldr	r3, [pc, #36]	@ (8004230 <LL_ADC_StartCalibration+0x38>)
 800420a:	4013      	ands	r3, r2
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004218:	430a      	orrs	r2, r1
 800421a:	4313      	orrs	r3, r2
 800421c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	609a      	str	r2, [r3, #8]
}
 8004224:	bf00      	nop
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	3ffeffc0 	.word	0x3ffeffc0

08004234 <LL_ADC_IsCalibrationOnGoing>:
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004244:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004248:	d101      	bne.n	800424e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <LL_ADC_REG_IsConversionOngoing>:
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b04      	cmp	r3, #4
 800426e:	d101      	bne.n	8004274 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004270:	2301      	movs	r3, #1
 8004272:	e000      	b.n	8004276 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
	...

08004284 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004290:	2300      	movs	r3, #0
 8004292:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800429a:	2b01      	cmp	r3, #1
 800429c:	d101      	bne.n	80042a2 <HAL_ADCEx_Calibration_Start+0x1e>
 800429e:	2302      	movs	r3, #2
 80042a0:	e04c      	b.n	800433c <HAL_ADCEx_Calibration_Start+0xb8>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f7ff fe24 	bl	8003ef8 <ADC_Disable>
 80042b0:	4603      	mov	r3, r0
 80042b2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80042b4:	7dfb      	ldrb	r3, [r7, #23]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d135      	bne.n	8004326 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80042be:	4b21      	ldr	r3, [pc, #132]	@ (8004344 <HAL_ADCEx_Calibration_Start+0xc0>)
 80042c0:	4013      	ands	r3, r2
 80042c2:	f043 0202 	orr.w	r2, r3, #2
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff ff90 	bl	80041f8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80042d8:	e014      	b.n	8004304 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	3301      	adds	r3, #1
 80042de:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	4a19      	ldr	r2, [pc, #100]	@ (8004348 <HAL_ADCEx_Calibration_Start+0xc4>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d30d      	bcc.n	8004304 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ec:	f023 0312 	bic.w	r3, r3, #18
 80042f0:	f043 0210 	orr.w	r2, r3, #16
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e01b      	b.n	800433c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff ff93 	bl	8004234 <LL_ADC_IsCalibrationOnGoing>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1e2      	bne.n	80042da <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004318:	f023 0303 	bic.w	r3, r3, #3
 800431c:	f043 0201 	orr.w	r2, r3, #1
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	655a      	str	r2, [r3, #84]	@ 0x54
 8004324:	e005      	b.n	8004332 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800432a:	f043 0210 	orr.w	r2, r3, #16
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800433a:	7dfb      	ldrb	r3, [r7, #23]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3718      	adds	r7, #24
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	ffffeefd 	.word	0xffffeefd
 8004348:	25c3f800 	.word	0x25c3f800

0800434c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800434c:	b590      	push	{r4, r7, lr}
 800434e:	b09f      	sub	sp, #124	@ 0x7c
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004362:	2b01      	cmp	r3, #1
 8004364:	d101      	bne.n	800436a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004366:	2302      	movs	r3, #2
 8004368:	e0be      	b.n	80044e8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004372:	2300      	movs	r3, #0
 8004374:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004376:	2300      	movs	r3, #0
 8004378:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a5c      	ldr	r2, [pc, #368]	@ (80044f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d102      	bne.n	800438a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004384:	4b5b      	ldr	r3, [pc, #364]	@ (80044f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004386:	60bb      	str	r3, [r7, #8]
 8004388:	e001      	b.n	800438e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800438a:	2300      	movs	r3, #0
 800438c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10b      	bne.n	80043ac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004398:	f043 0220 	orr.w	r2, r3, #32
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e09d      	b.n	80044e8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff ff54 	bl	800425c <LL_ADC_REG_IsConversionOngoing>
 80043b4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7ff ff4e 	bl	800425c <LL_ADC_REG_IsConversionOngoing>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d17f      	bne.n	80044c6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80043c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d17c      	bne.n	80044c6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a47      	ldr	r2, [pc, #284]	@ (80044f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d004      	beq.n	80043e0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a46      	ldr	r2, [pc, #280]	@ (80044f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d101      	bne.n	80043e4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80043e0:	4b45      	ldr	r3, [pc, #276]	@ (80044f8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80043e2:	e000      	b.n	80043e6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80043e4:	4b45      	ldr	r3, [pc, #276]	@ (80044fc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80043e6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d039      	beq.n	8004464 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80043f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	431a      	orrs	r2, r3
 80043fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004400:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a3a      	ldr	r2, [pc, #232]	@ (80044f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d004      	beq.n	8004416 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a38      	ldr	r2, [pc, #224]	@ (80044f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d10e      	bne.n	8004434 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004416:	4836      	ldr	r0, [pc, #216]	@ (80044f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004418:	f7ff feda 	bl	80041d0 <LL_ADC_IsEnabled>
 800441c:	4604      	mov	r4, r0
 800441e:	4835      	ldr	r0, [pc, #212]	@ (80044f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004420:	f7ff fed6 	bl	80041d0 <LL_ADC_IsEnabled>
 8004424:	4603      	mov	r3, r0
 8004426:	4323      	orrs	r3, r4
 8004428:	2b00      	cmp	r3, #0
 800442a:	bf0c      	ite	eq
 800442c:	2301      	moveq	r3, #1
 800442e:	2300      	movne	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	e008      	b.n	8004446 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004434:	4832      	ldr	r0, [pc, #200]	@ (8004500 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004436:	f7ff fecb 	bl	80041d0 <LL_ADC_IsEnabled>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	bf0c      	ite	eq
 8004440:	2301      	moveq	r3, #1
 8004442:	2300      	movne	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d047      	beq.n	80044da <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800444a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800444c:	689a      	ldr	r2, [r3, #8]
 800444e:	4b2d      	ldr	r3, [pc, #180]	@ (8004504 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004450:	4013      	ands	r3, r2
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	6811      	ldr	r1, [r2, #0]
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	6892      	ldr	r2, [r2, #8]
 800445a:	430a      	orrs	r2, r1
 800445c:	431a      	orrs	r2, r3
 800445e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004460:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004462:	e03a      	b.n	80044da <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004464:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800446c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800446e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a1e      	ldr	r2, [pc, #120]	@ (80044f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d004      	beq.n	8004484 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a1d      	ldr	r2, [pc, #116]	@ (80044f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d10e      	bne.n	80044a2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004484:	481a      	ldr	r0, [pc, #104]	@ (80044f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004486:	f7ff fea3 	bl	80041d0 <LL_ADC_IsEnabled>
 800448a:	4604      	mov	r4, r0
 800448c:	4819      	ldr	r0, [pc, #100]	@ (80044f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800448e:	f7ff fe9f 	bl	80041d0 <LL_ADC_IsEnabled>
 8004492:	4603      	mov	r3, r0
 8004494:	4323      	orrs	r3, r4
 8004496:	2b00      	cmp	r3, #0
 8004498:	bf0c      	ite	eq
 800449a:	2301      	moveq	r3, #1
 800449c:	2300      	movne	r3, #0
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	e008      	b.n	80044b4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80044a2:	4817      	ldr	r0, [pc, #92]	@ (8004500 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80044a4:	f7ff fe94 	bl	80041d0 <LL_ADC_IsEnabled>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	bf0c      	ite	eq
 80044ae:	2301      	moveq	r3, #1
 80044b0:	2300      	movne	r3, #0
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d010      	beq.n	80044da <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80044b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	4b11      	ldr	r3, [pc, #68]	@ (8004504 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80044be:	4013      	ands	r3, r2
 80044c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80044c2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044c4:	e009      	b.n	80044da <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ca:	f043 0220 	orr.w	r2, r3, #32
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80044d8:	e000      	b.n	80044dc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044da:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80044e4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	377c      	adds	r7, #124	@ 0x7c
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd90      	pop	{r4, r7, pc}
 80044f0:	40022000 	.word	0x40022000
 80044f4:	40022100 	.word	0x40022100
 80044f8:	40022300 	.word	0x40022300
 80044fc:	58026300 	.word	0x58026300
 8004500:	58026000 	.word	0x58026000
 8004504:	fffff0e0 	.word	0xfffff0e0

08004508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004518:	4b0b      	ldr	r3, [pc, #44]	@ (8004548 <__NVIC_SetPriorityGrouping+0x40>)
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004524:	4013      	ands	r3, r2
 8004526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004530:	4b06      	ldr	r3, [pc, #24]	@ (800454c <__NVIC_SetPriorityGrouping+0x44>)
 8004532:	4313      	orrs	r3, r2
 8004534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004536:	4a04      	ldr	r2, [pc, #16]	@ (8004548 <__NVIC_SetPriorityGrouping+0x40>)
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	60d3      	str	r3, [r2, #12]
}
 800453c:	bf00      	nop
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	e000ed00 	.word	0xe000ed00
 800454c:	05fa0000 	.word	0x05fa0000

08004550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004554:	4b04      	ldr	r3, [pc, #16]	@ (8004568 <__NVIC_GetPriorityGrouping+0x18>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	0a1b      	lsrs	r3, r3, #8
 800455a:	f003 0307 	and.w	r3, r3, #7
}
 800455e:	4618      	mov	r0, r3
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	e000ed00 	.word	0xe000ed00

0800456c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	4603      	mov	r3, r0
 8004574:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800457a:	2b00      	cmp	r3, #0
 800457c:	db0b      	blt.n	8004596 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800457e:	88fb      	ldrh	r3, [r7, #6]
 8004580:	f003 021f 	and.w	r2, r3, #31
 8004584:	4907      	ldr	r1, [pc, #28]	@ (80045a4 <__NVIC_EnableIRQ+0x38>)
 8004586:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800458a:	095b      	lsrs	r3, r3, #5
 800458c:	2001      	movs	r0, #1
 800458e:	fa00 f202 	lsl.w	r2, r0, r2
 8004592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004596:	bf00      	nop
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	e000e100 	.word	0xe000e100

080045a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	4603      	mov	r3, r0
 80045b0:	6039      	str	r1, [r7, #0]
 80045b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80045b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	db0a      	blt.n	80045d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	490c      	ldr	r1, [pc, #48]	@ (80045f4 <__NVIC_SetPriority+0x4c>)
 80045c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045c6:	0112      	lsls	r2, r2, #4
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	440b      	add	r3, r1
 80045cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045d0:	e00a      	b.n	80045e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	4908      	ldr	r1, [pc, #32]	@ (80045f8 <__NVIC_SetPriority+0x50>)
 80045d8:	88fb      	ldrh	r3, [r7, #6]
 80045da:	f003 030f 	and.w	r3, r3, #15
 80045de:	3b04      	subs	r3, #4
 80045e0:	0112      	lsls	r2, r2, #4
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	440b      	add	r3, r1
 80045e6:	761a      	strb	r2, [r3, #24]
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	e000e100 	.word	0xe000e100
 80045f8:	e000ed00 	.word	0xe000ed00

080045fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b089      	sub	sp, #36	@ 0x24
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	f1c3 0307 	rsb	r3, r3, #7
 8004616:	2b04      	cmp	r3, #4
 8004618:	bf28      	it	cs
 800461a:	2304      	movcs	r3, #4
 800461c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	3304      	adds	r3, #4
 8004622:	2b06      	cmp	r3, #6
 8004624:	d902      	bls.n	800462c <NVIC_EncodePriority+0x30>
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	3b03      	subs	r3, #3
 800462a:	e000      	b.n	800462e <NVIC_EncodePriority+0x32>
 800462c:	2300      	movs	r3, #0
 800462e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004630:	f04f 32ff 	mov.w	r2, #4294967295
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	fa02 f303 	lsl.w	r3, r2, r3
 800463a:	43da      	mvns	r2, r3
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	401a      	ands	r2, r3
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004644:	f04f 31ff 	mov.w	r1, #4294967295
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	fa01 f303 	lsl.w	r3, r1, r3
 800464e:	43d9      	mvns	r1, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004654:	4313      	orrs	r3, r2
         );
}
 8004656:	4618      	mov	r0, r3
 8004658:	3724      	adds	r7, #36	@ 0x24
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
	...

08004664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3b01      	subs	r3, #1
 8004670:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004674:	d301      	bcc.n	800467a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004676:	2301      	movs	r3, #1
 8004678:	e00f      	b.n	800469a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800467a:	4a0a      	ldr	r2, [pc, #40]	@ (80046a4 <SysTick_Config+0x40>)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	3b01      	subs	r3, #1
 8004680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004682:	210f      	movs	r1, #15
 8004684:	f04f 30ff 	mov.w	r0, #4294967295
 8004688:	f7ff ff8e 	bl	80045a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800468c:	4b05      	ldr	r3, [pc, #20]	@ (80046a4 <SysTick_Config+0x40>)
 800468e:	2200      	movs	r2, #0
 8004690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004692:	4b04      	ldr	r3, [pc, #16]	@ (80046a4 <SysTick_Config+0x40>)
 8004694:	2207      	movs	r2, #7
 8004696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	e000e010 	.word	0xe000e010

080046a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7ff ff29 	bl	8004508 <__NVIC_SetPriorityGrouping>
}
 80046b6:	bf00      	nop
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b086      	sub	sp, #24
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	4603      	mov	r3, r0
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	607a      	str	r2, [r7, #4]
 80046ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80046cc:	f7ff ff40 	bl	8004550 <__NVIC_GetPriorityGrouping>
 80046d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	68b9      	ldr	r1, [r7, #8]
 80046d6:	6978      	ldr	r0, [r7, #20]
 80046d8:	f7ff ff90 	bl	80045fc <NVIC_EncodePriority>
 80046dc:	4602      	mov	r2, r0
 80046de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80046e2:	4611      	mov	r1, r2
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7ff ff5f 	bl	80045a8 <__NVIC_SetPriority>
}
 80046ea:	bf00      	nop
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b082      	sub	sp, #8
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	4603      	mov	r3, r0
 80046fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff ff33 	bl	800456c <__NVIC_EnableIRQ>
}
 8004706:	bf00      	nop
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b082      	sub	sp, #8
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7ff ffa4 	bl	8004664 <SysTick_Config>
 800471c:	4603      	mov	r3, r0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
	...

08004728 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800472c:	f3bf 8f5f 	dmb	sy
}
 8004730:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004732:	4b07      	ldr	r3, [pc, #28]	@ (8004750 <HAL_MPU_Disable+0x28>)
 8004734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004736:	4a06      	ldr	r2, [pc, #24]	@ (8004750 <HAL_MPU_Disable+0x28>)
 8004738:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800473c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800473e:	4b05      	ldr	r3, [pc, #20]	@ (8004754 <HAL_MPU_Disable+0x2c>)
 8004740:	2200      	movs	r2, #0
 8004742:	605a      	str	r2, [r3, #4]
}
 8004744:	bf00      	nop
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	e000ed00 	.word	0xe000ed00
 8004754:	e000ed90 	.word	0xe000ed90

08004758 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004760:	4a0b      	ldr	r2, [pc, #44]	@ (8004790 <HAL_MPU_Enable+0x38>)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f043 0301 	orr.w	r3, r3, #1
 8004768:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800476a:	4b0a      	ldr	r3, [pc, #40]	@ (8004794 <HAL_MPU_Enable+0x3c>)
 800476c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476e:	4a09      	ldr	r2, [pc, #36]	@ (8004794 <HAL_MPU_Enable+0x3c>)
 8004770:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004774:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004776:	f3bf 8f4f 	dsb	sy
}
 800477a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800477c:	f3bf 8f6f 	isb	sy
}
 8004780:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	e000ed90 	.word	0xe000ed90
 8004794:	e000ed00 	.word	0xe000ed00

08004798 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	785a      	ldrb	r2, [r3, #1]
 80047a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004814 <HAL_MPU_ConfigRegion+0x7c>)
 80047a6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80047a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004814 <HAL_MPU_ConfigRegion+0x7c>)
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	4a19      	ldr	r2, [pc, #100]	@ (8004814 <HAL_MPU_ConfigRegion+0x7c>)
 80047ae:	f023 0301 	bic.w	r3, r3, #1
 80047b2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80047b4:	4a17      	ldr	r2, [pc, #92]	@ (8004814 <HAL_MPU_ConfigRegion+0x7c>)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	7b1b      	ldrb	r3, [r3, #12]
 80047c0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	7adb      	ldrb	r3, [r3, #11]
 80047c6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80047c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	7a9b      	ldrb	r3, [r3, #10]
 80047ce:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80047d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	7b5b      	ldrb	r3, [r3, #13]
 80047d6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80047d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	7b9b      	ldrb	r3, [r3, #14]
 80047de:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80047e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	7bdb      	ldrb	r3, [r3, #15]
 80047e6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80047e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	7a5b      	ldrb	r3, [r3, #9]
 80047ee:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80047f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	7a1b      	ldrb	r3, [r3, #8]
 80047f6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80047f8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	7812      	ldrb	r2, [r2, #0]
 80047fe:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004800:	4a04      	ldr	r2, [pc, #16]	@ (8004814 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004802:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004804:	6113      	str	r3, [r2, #16]
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	e000ed90 	.word	0xe000ed90

08004818 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004818:	b480      	push	{r7}
 800481a:	b089      	sub	sp, #36	@ 0x24
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004822:	2300      	movs	r3, #0
 8004824:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004826:	4b89      	ldr	r3, [pc, #548]	@ (8004a4c <HAL_GPIO_Init+0x234>)
 8004828:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800482a:	e194      	b.n	8004b56 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	2101      	movs	r1, #1
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	fa01 f303 	lsl.w	r3, r1, r3
 8004838:	4013      	ands	r3, r2
 800483a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 8186 	beq.w	8004b50 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f003 0303 	and.w	r3, r3, #3
 800484c:	2b01      	cmp	r3, #1
 800484e:	d005      	beq.n	800485c <HAL_GPIO_Init+0x44>
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f003 0303 	and.w	r3, r3, #3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d130      	bne.n	80048be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	2203      	movs	r2, #3
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	43db      	mvns	r3, r3
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	4013      	ands	r3, r2
 8004872:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	68da      	ldr	r2, [r3, #12]
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	4313      	orrs	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004892:	2201      	movs	r2, #1
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	fa02 f303 	lsl.w	r3, r2, r3
 800489a:	43db      	mvns	r3, r3
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	4013      	ands	r3, r2
 80048a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	091b      	lsrs	r3, r3, #4
 80048a8:	f003 0201 	and.w	r2, r3, #1
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	fa02 f303 	lsl.w	r3, r2, r3
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	2b03      	cmp	r3, #3
 80048c8:	d017      	beq.n	80048fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	2203      	movs	r2, #3
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	43db      	mvns	r3, r3
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	4013      	ands	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	fa02 f303 	lsl.w	r3, r2, r3
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f003 0303 	and.w	r3, r3, #3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d123      	bne.n	800494e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	08da      	lsrs	r2, r3, #3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	3208      	adds	r2, #8
 800490e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004912:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	f003 0307 	and.w	r3, r3, #7
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	220f      	movs	r2, #15
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	43db      	mvns	r3, r3
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	4013      	ands	r3, r2
 8004928:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	691a      	ldr	r2, [r3, #16]
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	4313      	orrs	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	08da      	lsrs	r2, r3, #3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3208      	adds	r2, #8
 8004948:	69b9      	ldr	r1, [r7, #24]
 800494a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	2203      	movs	r2, #3
 800495a:	fa02 f303 	lsl.w	r3, r2, r3
 800495e:	43db      	mvns	r3, r3
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	4013      	ands	r3, r2
 8004964:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f003 0203 	and.w	r2, r3, #3
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	fa02 f303 	lsl.w	r3, r2, r3
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	4313      	orrs	r3, r2
 800497a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 80e0 	beq.w	8004b50 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004990:	4b2f      	ldr	r3, [pc, #188]	@ (8004a50 <HAL_GPIO_Init+0x238>)
 8004992:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004996:	4a2e      	ldr	r2, [pc, #184]	@ (8004a50 <HAL_GPIO_Init+0x238>)
 8004998:	f043 0302 	orr.w	r3, r3, #2
 800499c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80049a0:	4b2b      	ldr	r3, [pc, #172]	@ (8004a50 <HAL_GPIO_Init+0x238>)
 80049a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049ae:	4a29      	ldr	r2, [pc, #164]	@ (8004a54 <HAL_GPIO_Init+0x23c>)
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	089b      	lsrs	r3, r3, #2
 80049b4:	3302      	adds	r3, #2
 80049b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	220f      	movs	r2, #15
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	43db      	mvns	r3, r3
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	4013      	ands	r3, r2
 80049d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a20      	ldr	r2, [pc, #128]	@ (8004a58 <HAL_GPIO_Init+0x240>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d052      	beq.n	8004a80 <HAL_GPIO_Init+0x268>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a1f      	ldr	r2, [pc, #124]	@ (8004a5c <HAL_GPIO_Init+0x244>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d031      	beq.n	8004a46 <HAL_GPIO_Init+0x22e>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a1e      	ldr	r2, [pc, #120]	@ (8004a60 <HAL_GPIO_Init+0x248>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d02b      	beq.n	8004a42 <HAL_GPIO_Init+0x22a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a1d      	ldr	r2, [pc, #116]	@ (8004a64 <HAL_GPIO_Init+0x24c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d025      	beq.n	8004a3e <HAL_GPIO_Init+0x226>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a1c      	ldr	r2, [pc, #112]	@ (8004a68 <HAL_GPIO_Init+0x250>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d01f      	beq.n	8004a3a <HAL_GPIO_Init+0x222>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a1b      	ldr	r2, [pc, #108]	@ (8004a6c <HAL_GPIO_Init+0x254>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d019      	beq.n	8004a36 <HAL_GPIO_Init+0x21e>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a1a      	ldr	r2, [pc, #104]	@ (8004a70 <HAL_GPIO_Init+0x258>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d013      	beq.n	8004a32 <HAL_GPIO_Init+0x21a>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a19      	ldr	r2, [pc, #100]	@ (8004a74 <HAL_GPIO_Init+0x25c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d00d      	beq.n	8004a2e <HAL_GPIO_Init+0x216>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a18      	ldr	r2, [pc, #96]	@ (8004a78 <HAL_GPIO_Init+0x260>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d007      	beq.n	8004a2a <HAL_GPIO_Init+0x212>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a17      	ldr	r2, [pc, #92]	@ (8004a7c <HAL_GPIO_Init+0x264>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d101      	bne.n	8004a26 <HAL_GPIO_Init+0x20e>
 8004a22:	2309      	movs	r3, #9
 8004a24:	e02d      	b.n	8004a82 <HAL_GPIO_Init+0x26a>
 8004a26:	230a      	movs	r3, #10
 8004a28:	e02b      	b.n	8004a82 <HAL_GPIO_Init+0x26a>
 8004a2a:	2308      	movs	r3, #8
 8004a2c:	e029      	b.n	8004a82 <HAL_GPIO_Init+0x26a>
 8004a2e:	2307      	movs	r3, #7
 8004a30:	e027      	b.n	8004a82 <HAL_GPIO_Init+0x26a>
 8004a32:	2306      	movs	r3, #6
 8004a34:	e025      	b.n	8004a82 <HAL_GPIO_Init+0x26a>
 8004a36:	2305      	movs	r3, #5
 8004a38:	e023      	b.n	8004a82 <HAL_GPIO_Init+0x26a>
 8004a3a:	2304      	movs	r3, #4
 8004a3c:	e021      	b.n	8004a82 <HAL_GPIO_Init+0x26a>
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e01f      	b.n	8004a82 <HAL_GPIO_Init+0x26a>
 8004a42:	2302      	movs	r3, #2
 8004a44:	e01d      	b.n	8004a82 <HAL_GPIO_Init+0x26a>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e01b      	b.n	8004a82 <HAL_GPIO_Init+0x26a>
 8004a4a:	bf00      	nop
 8004a4c:	58000080 	.word	0x58000080
 8004a50:	58024400 	.word	0x58024400
 8004a54:	58000400 	.word	0x58000400
 8004a58:	58020000 	.word	0x58020000
 8004a5c:	58020400 	.word	0x58020400
 8004a60:	58020800 	.word	0x58020800
 8004a64:	58020c00 	.word	0x58020c00
 8004a68:	58021000 	.word	0x58021000
 8004a6c:	58021400 	.word	0x58021400
 8004a70:	58021800 	.word	0x58021800
 8004a74:	58021c00 	.word	0x58021c00
 8004a78:	58022000 	.word	0x58022000
 8004a7c:	58022400 	.word	0x58022400
 8004a80:	2300      	movs	r3, #0
 8004a82:	69fa      	ldr	r2, [r7, #28]
 8004a84:	f002 0203 	and.w	r2, r2, #3
 8004a88:	0092      	lsls	r2, r2, #2
 8004a8a:	4093      	lsls	r3, r2
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a92:	4938      	ldr	r1, [pc, #224]	@ (8004b74 <HAL_GPIO_Init+0x35c>)
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	089b      	lsrs	r3, r3, #2
 8004a98:	3302      	adds	r3, #2
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004aa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	43db      	mvns	r3, r3
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004ac6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004ace:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	43db      	mvns	r3, r3
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	4013      	ands	r3, r2
 8004ade:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004af4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	43db      	mvns	r3, r3
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	4013      	ands	r3, r2
 8004b0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d003      	beq.n	8004b20 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	69ba      	ldr	r2, [r7, #24]
 8004b24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	43db      	mvns	r3, r3
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	4013      	ands	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	3301      	adds	r3, #1
 8004b54:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f47f ae63 	bne.w	800482c <HAL_GPIO_Init+0x14>
  }
}
 8004b66:	bf00      	nop
 8004b68:	bf00      	nop
 8004b6a:	3724      	adds	r7, #36	@ 0x24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	58000400 	.word	0x58000400

08004b78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	460b      	mov	r3, r1
 8004b82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691a      	ldr	r2, [r3, #16]
 8004b88:	887b      	ldrh	r3, [r7, #2]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b90:	2301      	movs	r3, #1
 8004b92:	73fb      	strb	r3, [r7, #15]
 8004b94:	e001      	b.n	8004b9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b96:	2300      	movs	r3, #0
 8004b98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	807b      	strh	r3, [r7, #2]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bb8:	787b      	ldrb	r3, [r7, #1]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bbe:	887a      	ldrh	r2, [r7, #2]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004bc4:	e003      	b.n	8004bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004bc6:	887b      	ldrh	r3, [r7, #2]
 8004bc8:	041a      	lsls	r2, r3, #16
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	619a      	str	r2, [r3, #24]
}
 8004bce:	bf00      	nop
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b085      	sub	sp, #20
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
 8004be2:	460b      	mov	r3, r1
 8004be4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004bec:	887a      	ldrh	r2, [r7, #2]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	041a      	lsls	r2, r3, #16
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	43d9      	mvns	r1, r3
 8004bf8:	887b      	ldrh	r3, [r7, #2]
 8004bfa:	400b      	ands	r3, r1
 8004bfc:	431a      	orrs	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	619a      	str	r2, [r3, #24]
}
 8004c02:	bf00      	nop
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
	...

08004c10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e08b      	b.n	8004d3a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d106      	bne.n	8004c3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f00c f88c 	bl	8010d54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2224      	movs	r2, #36	@ 0x24
 8004c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0201 	bic.w	r2, r2, #1
 8004c52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004c60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d107      	bne.n	8004c8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689a      	ldr	r2, [r3, #8]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c86:	609a      	str	r2, [r3, #8]
 8004c88:	e006      	b.n	8004c98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689a      	ldr	r2, [r3, #8]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004c96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d108      	bne.n	8004cb2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cae:	605a      	str	r2, [r3, #4]
 8004cb0:	e007      	b.n	8004cc2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6859      	ldr	r1, [r3, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8004d44 <HAL_I2C_Init+0x134>)
 8004cce:	430b      	orrs	r3, r1
 8004cd0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68da      	ldr	r2, [r3, #12]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ce0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691a      	ldr	r2, [r3, #16]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	69d9      	ldr	r1, [r3, #28]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a1a      	ldr	r2, [r3, #32]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0201 	orr.w	r2, r2, #1
 8004d1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2220      	movs	r2, #32
 8004d26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3708      	adds	r7, #8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	02008000 	.word	0x02008000

08004d48 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b088      	sub	sp, #32
 8004d4c:	af02      	add	r7, sp, #8
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	607a      	str	r2, [r7, #4]
 8004d52:	461a      	mov	r2, r3
 8004d54:	460b      	mov	r3, r1
 8004d56:	817b      	strh	r3, [r7, #10]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b20      	cmp	r3, #32
 8004d66:	f040 80fd 	bne.w	8004f64 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <HAL_I2C_Master_Transmit+0x30>
 8004d74:	2302      	movs	r3, #2
 8004d76:	e0f6      	b.n	8004f66 <HAL_I2C_Master_Transmit+0x21e>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d80:	f7fd fe2a 	bl	80029d8 <HAL_GetTick>
 8004d84:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	2319      	movs	r3, #25
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f000 fa0a 	bl	80051ac <I2C_WaitOnFlagUntilTimeout>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e0e1      	b.n	8004f66 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2221      	movs	r2, #33	@ 0x21
 8004da6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2210      	movs	r2, #16
 8004dae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	893a      	ldrh	r2, [r7, #8]
 8004dc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	2bff      	cmp	r3, #255	@ 0xff
 8004dd2:	d906      	bls.n	8004de2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	22ff      	movs	r2, #255	@ 0xff
 8004dd8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004dda:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	e007      	b.n	8004df2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004dec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004df0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d024      	beq.n	8004e44 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfe:	781a      	ldrb	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0a:	1c5a      	adds	r2, r3, #1
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	3b01      	subs	r3, #1
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	3301      	adds	r3, #1
 8004e32:	b2da      	uxtb	r2, r3
 8004e34:	8979      	ldrh	r1, [r7, #10]
 8004e36:	4b4e      	ldr	r3, [pc, #312]	@ (8004f70 <HAL_I2C_Master_Transmit+0x228>)
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f000 fc05 	bl	800564c <I2C_TransferConfig>
 8004e42:	e066      	b.n	8004f12 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	8979      	ldrh	r1, [r7, #10]
 8004e4c:	4b48      	ldr	r3, [pc, #288]	@ (8004f70 <HAL_I2C_Master_Transmit+0x228>)
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f000 fbfa 	bl	800564c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004e58:	e05b      	b.n	8004f12 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	6a39      	ldr	r1, [r7, #32]
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 f9fd 	bl	800525e <I2C_WaitOnTXISFlagUntilTimeout>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e07b      	b.n	8004f66 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e72:	781a      	ldrb	r2, [r3, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e96:	3b01      	subs	r3, #1
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d034      	beq.n	8004f12 <HAL_I2C_Master_Transmit+0x1ca>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d130      	bne.n	8004f12 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	2180      	movs	r1, #128	@ 0x80
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 f976 	bl	80051ac <I2C_WaitOnFlagUntilTimeout>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e04d      	b.n	8004f66 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	2bff      	cmp	r3, #255	@ 0xff
 8004ed2:	d90e      	bls.n	8004ef2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	22ff      	movs	r2, #255	@ 0xff
 8004ed8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ede:	b2da      	uxtb	r2, r3
 8004ee0:	8979      	ldrh	r1, [r7, #10]
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f000 fbae 	bl	800564c <I2C_TransferConfig>
 8004ef0:	e00f      	b.n	8004f12 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	8979      	ldrh	r1, [r7, #10]
 8004f04:	2300      	movs	r3, #0
 8004f06:	9300      	str	r3, [sp, #0]
 8004f08:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 fb9d 	bl	800564c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d19e      	bne.n	8004e5a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	6a39      	ldr	r1, [r7, #32]
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 f9e3 	bl	80052ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e01a      	b.n	8004f66 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2220      	movs	r2, #32
 8004f36:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6859      	ldr	r1, [r3, #4]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	4b0c      	ldr	r3, [pc, #48]	@ (8004f74 <HAL_I2C_Master_Transmit+0x22c>)
 8004f44:	400b      	ands	r3, r1
 8004f46:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004f60:	2300      	movs	r3, #0
 8004f62:	e000      	b.n	8004f66 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004f64:	2302      	movs	r3, #2
  }
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3718      	adds	r7, #24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	80002000 	.word	0x80002000
 8004f74:	fe00e800 	.word	0xfe00e800

08004f78 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b088      	sub	sp, #32
 8004f7c:	af02      	add	r7, sp, #8
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	607a      	str	r2, [r7, #4]
 8004f82:	461a      	mov	r2, r3
 8004f84:	460b      	mov	r3, r1
 8004f86:	817b      	strh	r3, [r7, #10]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b20      	cmp	r3, #32
 8004f96:	f040 80db 	bne.w	8005150 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d101      	bne.n	8004fa8 <HAL_I2C_Master_Receive+0x30>
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	e0d4      	b.n	8005152 <HAL_I2C_Master_Receive+0x1da>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004fb0:	f7fd fd12 	bl	80029d8 <HAL_GetTick>
 8004fb4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	2319      	movs	r3, #25
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 f8f2 	bl	80051ac <I2C_WaitOnFlagUntilTimeout>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d001      	beq.n	8004fd2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e0bf      	b.n	8005152 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2222      	movs	r2, #34	@ 0x22
 8004fd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2210      	movs	r2, #16
 8004fde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	893a      	ldrh	r2, [r7, #8]
 8004ff2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	2bff      	cmp	r3, #255	@ 0xff
 8005002:	d90e      	bls.n	8005022 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	22ff      	movs	r2, #255	@ 0xff
 8005008:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800500e:	b2da      	uxtb	r2, r3
 8005010:	8979      	ldrh	r1, [r7, #10]
 8005012:	4b52      	ldr	r3, [pc, #328]	@ (800515c <HAL_I2C_Master_Receive+0x1e4>)
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f000 fb16 	bl	800564c <I2C_TransferConfig>
 8005020:	e06d      	b.n	80050fe <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005026:	b29a      	uxth	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005030:	b2da      	uxtb	r2, r3
 8005032:	8979      	ldrh	r1, [r7, #10]
 8005034:	4b49      	ldr	r3, [pc, #292]	@ (800515c <HAL_I2C_Master_Receive+0x1e4>)
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 fb05 	bl	800564c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005042:	e05c      	b.n	80050fe <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	6a39      	ldr	r1, [r7, #32]
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f000 f993 	bl	8005374 <I2C_WaitOnRXNEFlagUntilTimeout>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d001      	beq.n	8005058 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e07c      	b.n	8005152 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005062:	b2d2      	uxtb	r2, r2
 8005064:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506a:	1c5a      	adds	r2, r3, #1
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005074:	3b01      	subs	r3, #1
 8005076:	b29a      	uxth	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005080:	b29b      	uxth	r3, r3
 8005082:	3b01      	subs	r3, #1
 8005084:	b29a      	uxth	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800508e:	b29b      	uxth	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	d034      	beq.n	80050fe <HAL_I2C_Master_Receive+0x186>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005098:	2b00      	cmp	r3, #0
 800509a:	d130      	bne.n	80050fe <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	6a3b      	ldr	r3, [r7, #32]
 80050a2:	2200      	movs	r2, #0
 80050a4:	2180      	movs	r1, #128	@ 0x80
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 f880 	bl	80051ac <I2C_WaitOnFlagUntilTimeout>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e04d      	b.n	8005152 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	2bff      	cmp	r3, #255	@ 0xff
 80050be:	d90e      	bls.n	80050de <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	22ff      	movs	r2, #255	@ 0xff
 80050c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	8979      	ldrh	r1, [r7, #10]
 80050ce:	2300      	movs	r3, #0
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f000 fab8 	bl	800564c <I2C_TransferConfig>
 80050dc:	e00f      	b.n	80050fe <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050ec:	b2da      	uxtb	r2, r3
 80050ee:	8979      	ldrh	r1, [r7, #10]
 80050f0:	2300      	movs	r3, #0
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f000 faa7 	bl	800564c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005102:	b29b      	uxth	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d19d      	bne.n	8005044 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	6a39      	ldr	r1, [r7, #32]
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f000 f8ed 	bl	80052ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d001      	beq.n	800511c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e01a      	b.n	8005152 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2220      	movs	r2, #32
 8005122:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6859      	ldr	r1, [r3, #4]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	4b0c      	ldr	r3, [pc, #48]	@ (8005160 <HAL_I2C_Master_Receive+0x1e8>)
 8005130:	400b      	ands	r3, r1
 8005132:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2220      	movs	r2, #32
 8005138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800514c:	2300      	movs	r3, #0
 800514e:	e000      	b.n	8005152 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005150:	2302      	movs	r3, #2
  }
}
 8005152:	4618      	mov	r0, r3
 8005154:	3718      	adds	r7, #24
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	80002400 	.word	0x80002400
 8005160:	fe00e800 	.word	0xfe00e800

08005164 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b02      	cmp	r3, #2
 8005178:	d103      	bne.n	8005182 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2200      	movs	r2, #0
 8005180:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b01      	cmp	r3, #1
 800518e:	d007      	beq.n	80051a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	699a      	ldr	r2, [r3, #24]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f042 0201 	orr.w	r2, r2, #1
 800519e:	619a      	str	r2, [r3, #24]
  }
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	603b      	str	r3, [r7, #0]
 80051b8:	4613      	mov	r3, r2
 80051ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051bc:	e03b      	b.n	8005236 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	6839      	ldr	r1, [r7, #0]
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 f962 	bl	800548c <I2C_IsErrorOccurred>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e041      	b.n	8005256 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d8:	d02d      	beq.n	8005236 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051da:	f7fd fbfd 	bl	80029d8 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d302      	bcc.n	80051f0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d122      	bne.n	8005236 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	699a      	ldr	r2, [r3, #24]
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	4013      	ands	r3, r2
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	bf0c      	ite	eq
 8005200:	2301      	moveq	r3, #1
 8005202:	2300      	movne	r3, #0
 8005204:	b2db      	uxtb	r3, r3
 8005206:	461a      	mov	r2, r3
 8005208:	79fb      	ldrb	r3, [r7, #7]
 800520a:	429a      	cmp	r2, r3
 800520c:	d113      	bne.n	8005236 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005212:	f043 0220 	orr.w	r2, r3, #32
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2220      	movs	r2, #32
 800521e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e00f      	b.n	8005256 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	699a      	ldr	r2, [r3, #24]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	4013      	ands	r3, r2
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	429a      	cmp	r2, r3
 8005244:	bf0c      	ite	eq
 8005246:	2301      	moveq	r3, #1
 8005248:	2300      	movne	r3, #0
 800524a:	b2db      	uxtb	r3, r3
 800524c:	461a      	mov	r2, r3
 800524e:	79fb      	ldrb	r3, [r7, #7]
 8005250:	429a      	cmp	r2, r3
 8005252:	d0b4      	beq.n	80051be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b084      	sub	sp, #16
 8005262:	af00      	add	r7, sp, #0
 8005264:	60f8      	str	r0, [r7, #12]
 8005266:	60b9      	str	r1, [r7, #8]
 8005268:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800526a:	e033      	b.n	80052d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	68b9      	ldr	r1, [r7, #8]
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 f90b 	bl	800548c <I2C_IsErrorOccurred>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e031      	b.n	80052e4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005286:	d025      	beq.n	80052d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005288:	f7fd fba6 	bl	80029d8 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	429a      	cmp	r2, r3
 8005296:	d302      	bcc.n	800529e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d11a      	bne.n	80052d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d013      	beq.n	80052d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052b0:	f043 0220 	orr.w	r2, r3, #32
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2220      	movs	r2, #32
 80052bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e007      	b.n	80052e4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d1c4      	bne.n	800526c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052f8:	e02f      	b.n	800535a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	68b9      	ldr	r1, [r7, #8]
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 f8c4 	bl	800548c <I2C_IsErrorOccurred>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e02d      	b.n	800536a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800530e:	f7fd fb63 	bl	80029d8 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	429a      	cmp	r2, r3
 800531c:	d302      	bcc.n	8005324 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d11a      	bne.n	800535a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	f003 0320 	and.w	r3, r3, #32
 800532e:	2b20      	cmp	r3, #32
 8005330:	d013      	beq.n	800535a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005336:	f043 0220 	orr.w	r2, r3, #32
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2220      	movs	r2, #32
 8005342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e007      	b.n	800536a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	f003 0320 	and.w	r3, r3, #32
 8005364:	2b20      	cmp	r3, #32
 8005366:	d1c8      	bne.n	80052fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
	...

08005374 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005380:	2300      	movs	r3, #0
 8005382:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005384:	e071      	b.n	800546a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	68b9      	ldr	r1, [r7, #8]
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 f87e 	bl	800548c <I2C_IsErrorOccurred>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	f003 0320 	and.w	r3, r3, #32
 80053a4:	2b20      	cmp	r3, #32
 80053a6:	d13b      	bne.n	8005420 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80053a8:	7dfb      	ldrb	r3, [r7, #23]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d138      	bne.n	8005420 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	f003 0304 	and.w	r3, r3, #4
 80053b8:	2b04      	cmp	r3, #4
 80053ba:	d105      	bne.n	80053c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d001      	beq.n	80053c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80053c4:	2300      	movs	r3, #0
 80053c6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	f003 0310 	and.w	r3, r3, #16
 80053d2:	2b10      	cmp	r3, #16
 80053d4:	d121      	bne.n	800541a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2210      	movs	r2, #16
 80053dc:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2204      	movs	r2, #4
 80053e2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2220      	movs	r2, #32
 80053ea:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6859      	ldr	r1, [r3, #4]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	4b24      	ldr	r3, [pc, #144]	@ (8005488 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80053f8:	400b      	ands	r3, r1
 80053fa:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2220      	movs	r2, #32
 8005400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	75fb      	strb	r3, [r7, #23]
 8005418:	e002      	b.n	8005420 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005420:	f7fd fada 	bl	80029d8 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	429a      	cmp	r2, r3
 800542e:	d302      	bcc.n	8005436 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d119      	bne.n	800546a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8005436:	7dfb      	ldrb	r3, [r7, #23]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d116      	bne.n	800546a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	f003 0304 	and.w	r3, r3, #4
 8005446:	2b04      	cmp	r3, #4
 8005448:	d00f      	beq.n	800546a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800544e:	f043 0220 	orr.w	r2, r3, #32
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2220      	movs	r2, #32
 800545a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	f003 0304 	and.w	r3, r3, #4
 8005474:	2b04      	cmp	r3, #4
 8005476:	d002      	beq.n	800547e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8005478:	7dfb      	ldrb	r3, [r7, #23]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d083      	beq.n	8005386 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800547e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	fe00e800 	.word	0xfe00e800

0800548c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b08a      	sub	sp, #40	@ 0x28
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005498:	2300      	movs	r3, #0
 800549a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80054a6:	2300      	movs	r3, #0
 80054a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	f003 0310 	and.w	r3, r3, #16
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d068      	beq.n	800558a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2210      	movs	r2, #16
 80054be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80054c0:	e049      	b.n	8005556 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c8:	d045      	beq.n	8005556 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80054ca:	f7fd fa85 	bl	80029d8 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d302      	bcc.n	80054e0 <I2C_IsErrorOccurred+0x54>
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d13a      	bne.n	8005556 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005502:	d121      	bne.n	8005548 <I2C_IsErrorOccurred+0xbc>
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800550a:	d01d      	beq.n	8005548 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800550c:	7cfb      	ldrb	r3, [r7, #19]
 800550e:	2b20      	cmp	r3, #32
 8005510:	d01a      	beq.n	8005548 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005520:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005522:	f7fd fa59 	bl	80029d8 <HAL_GetTick>
 8005526:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005528:	e00e      	b.n	8005548 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800552a:	f7fd fa55 	bl	80029d8 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b19      	cmp	r3, #25
 8005536:	d907      	bls.n	8005548 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	f043 0320 	orr.w	r3, r3, #32
 800553e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005546:	e006      	b.n	8005556 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	f003 0320 	and.w	r3, r3, #32
 8005552:	2b20      	cmp	r3, #32
 8005554:	d1e9      	bne.n	800552a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	f003 0320 	and.w	r3, r3, #32
 8005560:	2b20      	cmp	r3, #32
 8005562:	d003      	beq.n	800556c <I2C_IsErrorOccurred+0xe0>
 8005564:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005568:	2b00      	cmp	r3, #0
 800556a:	d0aa      	beq.n	80054c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800556c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005570:	2b00      	cmp	r3, #0
 8005572:	d103      	bne.n	800557c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2220      	movs	r2, #32
 800557a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	f043 0304 	orr.w	r3, r3, #4
 8005582:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00b      	beq.n	80055b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800559c:	6a3b      	ldr	r3, [r7, #32]
 800559e:	f043 0301 	orr.w	r3, r3, #1
 80055a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80055ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00b      	beq.n	80055d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80055be:	6a3b      	ldr	r3, [r7, #32]
 80055c0:	f043 0308 	orr.w	r3, r3, #8
 80055c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80055ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00b      	beq.n	80055f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	f043 0302 	orr.w	r3, r3, #2
 80055e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80055f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d01c      	beq.n	800563a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f7ff fdaf 	bl	8005164 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6859      	ldr	r1, [r3, #4]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	4b0d      	ldr	r3, [pc, #52]	@ (8005648 <I2C_IsErrorOccurred+0x1bc>)
 8005612:	400b      	ands	r3, r1
 8005614:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	431a      	orrs	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2220      	movs	r2, #32
 8005626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800563a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800563e:	4618      	mov	r0, r3
 8005640:	3728      	adds	r7, #40	@ 0x28
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	fe00e800 	.word	0xfe00e800

0800564c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	607b      	str	r3, [r7, #4]
 8005656:	460b      	mov	r3, r1
 8005658:	817b      	strh	r3, [r7, #10]
 800565a:	4613      	mov	r3, r2
 800565c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800565e:	897b      	ldrh	r3, [r7, #10]
 8005660:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005664:	7a7b      	ldrb	r3, [r7, #9]
 8005666:	041b      	lsls	r3, r3, #16
 8005668:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800566c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005672:	6a3b      	ldr	r3, [r7, #32]
 8005674:	4313      	orrs	r3, r2
 8005676:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800567a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685a      	ldr	r2, [r3, #4]
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	0d5b      	lsrs	r3, r3, #21
 8005686:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800568a:	4b08      	ldr	r3, [pc, #32]	@ (80056ac <I2C_TransferConfig+0x60>)
 800568c:	430b      	orrs	r3, r1
 800568e:	43db      	mvns	r3, r3
 8005690:	ea02 0103 	and.w	r1, r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	430a      	orrs	r2, r1
 800569c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800569e:	bf00      	nop
 80056a0:	371c      	adds	r7, #28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	03ff63ff 	.word	0x03ff63ff

080056b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b20      	cmp	r3, #32
 80056c4:	d138      	bne.n	8005738 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d101      	bne.n	80056d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80056d0:	2302      	movs	r3, #2
 80056d2:	e032      	b.n	800573a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2224      	movs	r2, #36	@ 0x24
 80056e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f022 0201 	bic.w	r2, r2, #1
 80056f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005702:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6819      	ldr	r1, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	430a      	orrs	r2, r1
 8005712:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 0201 	orr.w	r2, r2, #1
 8005722:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2220      	movs	r2, #32
 8005728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005734:	2300      	movs	r3, #0
 8005736:	e000      	b.n	800573a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005738:	2302      	movs	r3, #2
  }
}
 800573a:	4618      	mov	r0, r3
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005746:	b480      	push	{r7}
 8005748:	b085      	sub	sp, #20
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b20      	cmp	r3, #32
 800575a:	d139      	bne.n	80057d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005762:	2b01      	cmp	r3, #1
 8005764:	d101      	bne.n	800576a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005766:	2302      	movs	r3, #2
 8005768:	e033      	b.n	80057d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2224      	movs	r2, #36	@ 0x24
 8005776:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0201 	bic.w	r2, r2, #1
 8005788:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005798:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	021b      	lsls	r3, r3, #8
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f042 0201 	orr.w	r2, r2, #1
 80057ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2220      	movs	r2, #32
 80057c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80057cc:	2300      	movs	r3, #0
 80057ce:	e000      	b.n	80057d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80057d0:	2302      	movs	r3, #2
  }
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
	...

080057e0 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e097      	b.n	8005922 <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b00      	cmp	r3, #0
 8005802:	d106      	bne.n	8005812 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f00b fc5b 	bl	80110c8 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2202      	movs	r2, #2
 8005816:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d004      	beq.n	8005834 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800582e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005832:	d103      	bne.n	800583c <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f023 031e 	bic.w	r3, r3, #30
 800583a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005844:	4293      	cmp	r3, r2
 8005846:	d003      	beq.n	8005850 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	4b38      	ldr	r3, [pc, #224]	@ (800592c <HAL_LPTIM_Init+0x14c>)
 800584c:	4013      	ands	r3, r2
 800584e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	4b37      	ldr	r3, [pc, #220]	@ (8005930 <HAL_LPTIM_Init+0x150>)
 8005854:	4013      	ands	r3, r2
 8005856:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005860:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8005866:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 800586c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8005872:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	4313      	orrs	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d107      	bne.n	8005892 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800588a:	4313      	orrs	r3, r2
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	4313      	orrs	r3, r2
 8005890:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d004      	beq.n	80058a4 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800589e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80058a2:	d107      	bne.n	80058b4 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80058ac:	4313      	orrs	r3, r2
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80058bc:	4293      	cmp	r3, r2
 80058be:	d00a      	beq.n	80058d6 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80058c8:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80058ce:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a14      	ldr	r2, [pc, #80]	@ (8005934 <HAL_LPTIM_Init+0x154>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d004      	beq.n	80058f2 <HAL_LPTIM_Init+0x112>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a12      	ldr	r2, [pc, #72]	@ (8005938 <HAL_LPTIM_Init+0x158>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d108      	bne.n	8005904 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	625a      	str	r2, [r3, #36]	@ 0x24
 8005902:	e009      	b.n	8005918 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a0c      	ldr	r2, [pc, #48]	@ (800593c <HAL_LPTIM_Init+0x15c>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d104      	bne.n	8005918 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005916:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	ffff1f3f 	.word	0xffff1f3f
 8005930:	ff19f1fe 	.word	0xff19f1fe
 8005934:	40002400 	.word	0x40002400
 8005938:	58002400 	.word	0x58002400
 800593c:	58002800 	.word	0x58002800

08005940 <HAL_LPTIM_Encoder_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Encoder_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  assert_param(hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC);
  assert_param(hlptim->Init.Clock.Prescaler == LPTIM_PRESCALER_DIV1);
  assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2202      	movs	r2, #2
 800594e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	60fb      	str	r3, [r7, #12]

  /* Clear CKPOL bits */
  tmpcfgr &= (uint32_t)(~LPTIM_CFGR_CKPOL);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f023 0306 	bic.w	r3, r3, #6
 8005960:	60fb      	str	r3, [r7, #12]

  /* Set Input polarity */
  tmpcfgr |=  hlptim->Init.UltraLowPowerClock.Polarity;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	4313      	orrs	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	60da      	str	r2, [r3, #12]

  /* Set ENC bit to enable the encoder interface */
  hlptim->Instance->CFGR |= LPTIM_CFGR_ENC;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8005982:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	691a      	ldr	r2, [r3, #16]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f042 0201 	orr.w	r2, r2, #1
 8005992:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2210      	movs	r2, #16
 800599a:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80059a4:	2110      	movs	r1, #16
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f9bc 	bl	8005d24 <LPTIM_WaitForFlag>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b03      	cmp	r3, #3
 80059b0:	d101      	bne.n	80059b6 <HAL_LPTIM_Encoder_Start+0x76>
  {
    return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e00c      	b.n	80059d0 <HAL_LPTIM_Encoder_Start+0x90>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	691a      	ldr	r2, [r3, #16]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f042 0204 	orr.w	r2, r2, #4
 80059c4:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <HAL_LPTIM_Encoder_Stop>:
  * @brief  Stop the Encoder interface.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Encoder_Stop(LPTIM_HandleTypeDef *hlptim)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_ENCODER_INTERFACE_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f9cb 	bl	8005d84 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f98a 	bl	8005d08 <HAL_LPTIM_GetState>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b03      	cmp	r3, #3
 80059f8:	d101      	bne.n	80059fe <HAL_LPTIM_Encoder_Stop+0x26>
  {
    return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e00c      	b.n	8005a18 <HAL_LPTIM_Encoder_Stop+0x40>
  }

  /* Reset ENC bit to disable the encoder interface */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_ENC;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68da      	ldr	r2, [r3, #12]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8005a0c:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d00c      	beq.n	8005a54 <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a42:	d107      	bne.n	8005a54 <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68da      	ldr	r2, [r3, #12]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 8005a52:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	691a      	ldr	r2, [r3, #16]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0201 	orr.w	r2, r2, #1
 8005a62:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2210      	movs	r2, #16
 8005a6a:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	683a      	ldr	r2, [r7, #0]
 8005a72:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8005a74:	2110      	movs	r1, #16
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f954 	bl	8005d24 <LPTIM_WaitForFlag>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	d101      	bne.n	8005a86 <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e02f      	b.n	8005ae6 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f97c 	bl	8005d84 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f93b 	bl	8005d08 <HAL_LPTIM_GetState>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b03      	cmp	r3, #3
 8005a96:	d101      	bne.n	8005a9c <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e024      	b.n	8005ae6 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689a      	ldr	r2, [r3, #8]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f042 0210 	orr.w	r2, r2, #16
 8005aaa:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689a      	ldr	r2, [r3, #8]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f042 0202 	orr.w	r2, r2, #2
 8005aba:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	691a      	ldr	r2, [r3, #16]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0201 	orr.w	r2, r2, #1
 8005aca:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	691a      	ldr	r2, [r3, #16]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f042 0204 	orr.w	r2, r2, #4
 8005ada:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <HAL_LPTIM_Counter_Stop_IT>:
  * @brief  Stop the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b082      	sub	sp, #8
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2202      	movs	r2, #2
 8005afa:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f940 	bl	8005d84 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f8ff 	bl	8005d08 <HAL_LPTIM_GetState>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b03      	cmp	r3, #3
 8005b0e:	d101      	bne.n	8005b14 <HAL_LPTIM_Counter_Stop_IT+0x26>
  {
    return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e014      	b.n	8005b3e <HAL_LPTIM_Counter_Stop_IT+0x50>
  }

  /* Disable Autoreload write complete interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689a      	ldr	r2, [r3, #8]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0210 	bic.w	r2, r2, #16
 8005b22:	609a      	str	r2, [r3, #8]

  /* Disable Autoreload match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689a      	ldr	r2, [r3, #8]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f022 0202 	bic.w	r2, r2, #2
 8005b32:	609a      	str	r2, [r3, #8]
  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3708      	adds	r7, #8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b082      	sub	sp, #8
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d10d      	bne.n	8005b78 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d106      	bne.n	8005b78 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f882 	bl	8005c7c <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d10d      	bne.n	8005ba2 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f003 0302 	and.w	r3, r3, #2
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d106      	bne.n	8005ba2 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2202      	movs	r2, #2
 8005b9a:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 f877 	bl	8005c90 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	2b04      	cmp	r3, #4
 8005bae:	d10d      	bne.n	8005bcc <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f003 0304 	and.w	r3, r3, #4
 8005bba:	2b04      	cmp	r3, #4
 8005bbc:	d106      	bne.n	8005bcc <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2204      	movs	r2, #4
 8005bc4:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f86c 	bl	8005ca4 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0308 	and.w	r3, r3, #8
 8005bd6:	2b08      	cmp	r3, #8
 8005bd8:	d10d      	bne.n	8005bf6 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f003 0308 	and.w	r3, r3, #8
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d106      	bne.n	8005bf6 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2208      	movs	r2, #8
 8005bee:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 f861 	bl	8005cb8 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0310 	and.w	r3, r3, #16
 8005c00:	2b10      	cmp	r3, #16
 8005c02:	d10d      	bne.n	8005c20 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f003 0310 	and.w	r3, r3, #16
 8005c0e:	2b10      	cmp	r3, #16
 8005c10:	d106      	bne.n	8005c20 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2210      	movs	r2, #16
 8005c18:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f856 	bl	8005ccc <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0320 	and.w	r3, r3, #32
 8005c2a:	2b20      	cmp	r3, #32
 8005c2c:	d10d      	bne.n	8005c4a <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f003 0320 	and.w	r3, r3, #32
 8005c38:	2b20      	cmp	r3, #32
 8005c3a:	d106      	bne.n	8005c4a <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2220      	movs	r2, #32
 8005c42:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 f84b 	bl	8005ce0 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c54:	2b40      	cmp	r3, #64	@ 0x40
 8005c56:	d10d      	bne.n	8005c74 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c62:	2b40      	cmp	r3, #64	@ 0x40
 8005c64:	d106      	bne.n	8005c74 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2240      	movs	r2, #64	@ 0x40
 8005c6c:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f840 	bl	8005cf4 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c74:	bf00      	nop
 8005c76:	3708      	adds	r7, #8
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005d16:	b2db      	uxtb	r3, r3
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8005d32:	4b12      	ldr	r3, [pc, #72]	@ (8005d7c <LPTIM_WaitForFlag+0x58>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a12      	ldr	r2, [pc, #72]	@ (8005d80 <LPTIM_WaitForFlag+0x5c>)
 8005d38:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3c:	0b9b      	lsrs	r3, r3, #14
 8005d3e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005d42:	fb02 f303 	mul.w	r3, r2, r3
 8005d46:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d101      	bne.n	8005d58 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	4013      	ands	r3, r2
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d002      	beq.n	8005d6e <LPTIM_WaitForFlag+0x4a>
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1ec      	bne.n	8005d48 <LPTIM_WaitForFlag+0x24>

  return result;
 8005d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3714      	adds	r7, #20
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	24000388 	.word	0x24000388
 8005d80:	d1b71759 	.word	0xd1b71759

08005d84 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b08c      	sub	sp, #48	@ 0x30
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d90:	f3ef 8310 	mrs	r3, PRIMASK
 8005d94:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d96:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8005d98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f383 8810 	msr	PRIMASK, r3
}
 8005da4:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a81      	ldr	r2, [pc, #516]	@ (8005fb0 <LPTIM_Disable+0x22c>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d02d      	beq.n	8005e0c <LPTIM_Disable+0x88>
 8005db0:	4a7f      	ldr	r2, [pc, #508]	@ (8005fb0 <LPTIM_Disable+0x22c>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d830      	bhi.n	8005e18 <LPTIM_Disable+0x94>
 8005db6:	4a7f      	ldr	r2, [pc, #508]	@ (8005fb4 <LPTIM_Disable+0x230>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d021      	beq.n	8005e00 <LPTIM_Disable+0x7c>
 8005dbc:	4a7d      	ldr	r2, [pc, #500]	@ (8005fb4 <LPTIM_Disable+0x230>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d82a      	bhi.n	8005e18 <LPTIM_Disable+0x94>
 8005dc2:	4a7d      	ldr	r2, [pc, #500]	@ (8005fb8 <LPTIM_Disable+0x234>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d015      	beq.n	8005df4 <LPTIM_Disable+0x70>
 8005dc8:	4a7b      	ldr	r2, [pc, #492]	@ (8005fb8 <LPTIM_Disable+0x234>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d824      	bhi.n	8005e18 <LPTIM_Disable+0x94>
 8005dce:	4a7b      	ldr	r2, [pc, #492]	@ (8005fbc <LPTIM_Disable+0x238>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d003      	beq.n	8005ddc <LPTIM_Disable+0x58>
 8005dd4:	4a7a      	ldr	r2, [pc, #488]	@ (8005fc0 <LPTIM_Disable+0x23c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d006      	beq.n	8005de8 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8005dda:	e01d      	b.n	8005e18 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005ddc:	4b79      	ldr	r3, [pc, #484]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005de0:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8005de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8005de6:	e018      	b.n	8005e1a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005de8:	4b76      	ldr	r3, [pc, #472]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dec:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8005df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8005df2:	e012      	b.n	8005e1a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8005df4:	4b73      	ldr	r3, [pc, #460]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005df8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8005dfe:	e00c      	b.n	8005e1a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 8005e00:	4b70      	ldr	r3, [pc, #448]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e04:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8005e0a:	e006      	b.n	8005e1a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 8005e0c:	4b6d      	ldr	r3, [pc, #436]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e10:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8005e16:	e000      	b.n	8005e1a <LPTIM_Disable+0x96>
      break;
 8005e18:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e40:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a5a      	ldr	r2, [pc, #360]	@ (8005fb0 <LPTIM_Disable+0x22c>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d059      	beq.n	8005f00 <LPTIM_Disable+0x17c>
 8005e4c:	4a58      	ldr	r2, [pc, #352]	@ (8005fb0 <LPTIM_Disable+0x22c>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d867      	bhi.n	8005f22 <LPTIM_Disable+0x19e>
 8005e52:	4a58      	ldr	r2, [pc, #352]	@ (8005fb4 <LPTIM_Disable+0x230>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d042      	beq.n	8005ede <LPTIM_Disable+0x15a>
 8005e58:	4a56      	ldr	r2, [pc, #344]	@ (8005fb4 <LPTIM_Disable+0x230>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d861      	bhi.n	8005f22 <LPTIM_Disable+0x19e>
 8005e5e:	4a56      	ldr	r2, [pc, #344]	@ (8005fb8 <LPTIM_Disable+0x234>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d02b      	beq.n	8005ebc <LPTIM_Disable+0x138>
 8005e64:	4a54      	ldr	r2, [pc, #336]	@ (8005fb8 <LPTIM_Disable+0x234>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d85b      	bhi.n	8005f22 <LPTIM_Disable+0x19e>
 8005e6a:	4a54      	ldr	r2, [pc, #336]	@ (8005fbc <LPTIM_Disable+0x238>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d003      	beq.n	8005e78 <LPTIM_Disable+0xf4>
 8005e70:	4a53      	ldr	r2, [pc, #332]	@ (8005fc0 <LPTIM_Disable+0x23c>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d011      	beq.n	8005e9a <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8005e76:	e054      	b.n	8005f22 <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8005e78:	4b52      	ldr	r3, [pc, #328]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e7e:	4a51      	ldr	r2, [pc, #324]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005e80:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005e84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8005e88:	4b4e      	ldr	r3, [pc, #312]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e8e:	4a4d      	ldr	r2, [pc, #308]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005e90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      break;
 8005e98:	e044      	b.n	8005f24 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8005e9a:	4b4a      	ldr	r3, [pc, #296]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005e9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ea0:	4a48      	ldr	r2, [pc, #288]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005ea2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005ea6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8005eaa:	4b46      	ldr	r3, [pc, #280]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005eac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005eb0:	4a44      	ldr	r2, [pc, #272]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005eb2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005eb6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 8005eba:	e033      	b.n	8005f24 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8005ebc:	4b41      	ldr	r3, [pc, #260]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005ebe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ec2:	4a40      	ldr	r2, [pc, #256]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005ec4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005ec8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8005ecc:	4b3d      	ldr	r3, [pc, #244]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005ece:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ed2:	4a3c      	ldr	r2, [pc, #240]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005ed4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ed8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 8005edc:	e022      	b.n	8005f24 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 8005ede:	4b39      	ldr	r3, [pc, #228]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005ee0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ee4:	4a37      	ldr	r2, [pc, #220]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005ee6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005eea:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 8005eee:	4b35      	ldr	r3, [pc, #212]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005ef0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ef4:	4a33      	ldr	r2, [pc, #204]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005ef6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005efa:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 8005efe:	e011      	b.n	8005f24 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 8005f00:	4b30      	ldr	r3, [pc, #192]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005f02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f06:	4a2f      	ldr	r2, [pc, #188]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005f08:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005f0c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 8005f10:	4b2c      	ldr	r3, [pc, #176]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005f12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f16:	4a2b      	ldr	r2, [pc, #172]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005f18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f1c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 8005f20:	e000      	b.n	8005f24 <LPTIM_Disable+0x1a0>
      break;
 8005f22:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d103      	bne.n	8005f32 <LPTIM_Disable+0x1ae>
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f000 80d1 	beq.w	80060d4 <LPTIM_Disable+0x350>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a1e      	ldr	r2, [pc, #120]	@ (8005fb0 <LPTIM_Disable+0x22c>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d031      	beq.n	8005fa0 <LPTIM_Disable+0x21c>
 8005f3c:	4a1c      	ldr	r2, [pc, #112]	@ (8005fb0 <LPTIM_Disable+0x22c>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d842      	bhi.n	8005fc8 <LPTIM_Disable+0x244>
 8005f42:	4a1c      	ldr	r2, [pc, #112]	@ (8005fb4 <LPTIM_Disable+0x230>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d024      	beq.n	8005f92 <LPTIM_Disable+0x20e>
 8005f48:	4a1a      	ldr	r2, [pc, #104]	@ (8005fb4 <LPTIM_Disable+0x230>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d83c      	bhi.n	8005fc8 <LPTIM_Disable+0x244>
 8005f4e:	4a1a      	ldr	r2, [pc, #104]	@ (8005fb8 <LPTIM_Disable+0x234>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d017      	beq.n	8005f84 <LPTIM_Disable+0x200>
 8005f54:	4a18      	ldr	r2, [pc, #96]	@ (8005fb8 <LPTIM_Disable+0x234>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d836      	bhi.n	8005fc8 <LPTIM_Disable+0x244>
 8005f5a:	4a18      	ldr	r2, [pc, #96]	@ (8005fbc <LPTIM_Disable+0x238>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d003      	beq.n	8005f68 <LPTIM_Disable+0x1e4>
 8005f60:	4a17      	ldr	r2, [pc, #92]	@ (8005fc0 <LPTIM_Disable+0x23c>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d007      	beq.n	8005f76 <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8005f66:	e02f      	b.n	8005fc8 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 8005f68:	4b16      	ldr	r3, [pc, #88]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f6c:	4a15      	ldr	r2, [pc, #84]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005f6e:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8005f72:	6553      	str	r3, [r2, #84]	@ 0x54
        break;
 8005f74:	e029      	b.n	8005fca <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 8005f76:	4b13      	ldr	r3, [pc, #76]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f7a:	4a12      	ldr	r2, [pc, #72]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005f7c:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8005f80:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 8005f82:	e022      	b.n	8005fca <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 8005f84:	4b0f      	ldr	r3, [pc, #60]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f88:	4a0e      	ldr	r2, [pc, #56]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005f8a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005f8e:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 8005f90:	e01b      	b.n	8005fca <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 8005f92:	4b0c      	ldr	r3, [pc, #48]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f96:	4a0b      	ldr	r2, [pc, #44]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005f98:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005f9c:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 8005f9e:	e014      	b.n	8005fca <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 8005fa0:	4b08      	ldr	r3, [pc, #32]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fa4:	4a07      	ldr	r2, [pc, #28]	@ (8005fc4 <LPTIM_Disable+0x240>)
 8005fa6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005faa:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 8005fac:	e00d      	b.n	8005fca <LPTIM_Disable+0x246>
 8005fae:	bf00      	nop
 8005fb0:	58003000 	.word	0x58003000
 8005fb4:	58002c00 	.word	0x58002c00
 8005fb8:	58002800 	.word	0x58002800
 8005fbc:	40002400 	.word	0x40002400
 8005fc0:	58002400 	.word	0x58002400
 8005fc4:	58024400 	.word	0x58024400
        break;
 8005fc8:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d01a      	beq.n	8006006 <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	691a      	ldr	r2, [r3, #16]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f042 0201 	orr.w	r2, r2, #1
 8005fde:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	69fa      	ldr	r2, [r7, #28]
 8005fe6:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8005fe8:	2108      	movs	r1, #8
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7ff fe9a 	bl	8005d24 <LPTIM_WaitForFlag>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b03      	cmp	r3, #3
 8005ff4:	d103      	bne.n	8005ffe <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2203      	movs	r2, #3
 8005ffa:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2208      	movs	r2, #8
 8006004:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d01a      	beq.n	8006042 <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	691a      	ldr	r2, [r3, #16]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f042 0201 	orr.w	r2, r2, #1
 800601a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	69ba      	ldr	r2, [r7, #24]
 8006022:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8006024:	2110      	movs	r1, #16
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f7ff fe7c 	bl	8005d24 <LPTIM_WaitForFlag>
 800602c:	4603      	mov	r3, r0
 800602e:	2b03      	cmp	r3, #3
 8006030:	d103      	bne.n	800603a <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2203      	movs	r2, #3
 8006036:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2210      	movs	r2, #16
 8006040:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a32      	ldr	r2, [pc, #200]	@ (8006110 <LPTIM_Disable+0x38c>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d039      	beq.n	80060c0 <LPTIM_Disable+0x33c>
 800604c:	4a30      	ldr	r2, [pc, #192]	@ (8006110 <LPTIM_Disable+0x38c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d83f      	bhi.n	80060d2 <LPTIM_Disable+0x34e>
 8006052:	4a30      	ldr	r2, [pc, #192]	@ (8006114 <LPTIM_Disable+0x390>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d02a      	beq.n	80060ae <LPTIM_Disable+0x32a>
 8006058:	4a2e      	ldr	r2, [pc, #184]	@ (8006114 <LPTIM_Disable+0x390>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d839      	bhi.n	80060d2 <LPTIM_Disable+0x34e>
 800605e:	4a2e      	ldr	r2, [pc, #184]	@ (8006118 <LPTIM_Disable+0x394>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d01b      	beq.n	800609c <LPTIM_Disable+0x318>
 8006064:	4a2c      	ldr	r2, [pc, #176]	@ (8006118 <LPTIM_Disable+0x394>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d833      	bhi.n	80060d2 <LPTIM_Disable+0x34e>
 800606a:	4a2c      	ldr	r2, [pc, #176]	@ (800611c <LPTIM_Disable+0x398>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d003      	beq.n	8006078 <LPTIM_Disable+0x2f4>
 8006070:	4a2b      	ldr	r2, [pc, #172]	@ (8006120 <LPTIM_Disable+0x39c>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d009      	beq.n	800608a <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8006076:	e02c      	b.n	80060d2 <LPTIM_Disable+0x34e>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8006078:	4b2a      	ldr	r3, [pc, #168]	@ (8006124 <LPTIM_Disable+0x3a0>)
 800607a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800607c:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 8006080:	4928      	ldr	r1, [pc, #160]	@ (8006124 <LPTIM_Disable+0x3a0>)
 8006082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006084:	4313      	orrs	r3, r2
 8006086:	654b      	str	r3, [r1, #84]	@ 0x54
        break;
 8006088:	e024      	b.n	80060d4 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 800608a:	4b26      	ldr	r3, [pc, #152]	@ (8006124 <LPTIM_Disable+0x3a0>)
 800608c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800608e:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006092:	4924      	ldr	r1, [pc, #144]	@ (8006124 <LPTIM_Disable+0x3a0>)
 8006094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006096:	4313      	orrs	r3, r2
 8006098:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 800609a:	e01b      	b.n	80060d4 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 800609c:	4b21      	ldr	r3, [pc, #132]	@ (8006124 <LPTIM_Disable+0x3a0>)
 800609e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060a0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80060a4:	491f      	ldr	r1, [pc, #124]	@ (8006124 <LPTIM_Disable+0x3a0>)
 80060a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060a8:	4313      	orrs	r3, r2
 80060aa:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 80060ac:	e012      	b.n	80060d4 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 80060ae:	4b1d      	ldr	r3, [pc, #116]	@ (8006124 <LPTIM_Disable+0x3a0>)
 80060b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80060b6:	491b      	ldr	r1, [pc, #108]	@ (8006124 <LPTIM_Disable+0x3a0>)
 80060b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ba:	4313      	orrs	r3, r2
 80060bc:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 80060be:	e009      	b.n	80060d4 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 80060c0:	4b18      	ldr	r3, [pc, #96]	@ (8006124 <LPTIM_Disable+0x3a0>)
 80060c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060c4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80060c8:	4916      	ldr	r1, [pc, #88]	@ (8006124 <LPTIM_Disable+0x3a0>)
 80060ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060cc:	4313      	orrs	r3, r2
 80060ce:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 80060d0:	e000      	b.n	80060d4 <LPTIM_Disable+0x350>
        break;
 80060d2:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	691a      	ldr	r2, [r3, #16]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0201 	bic.w	r2, r2, #1
 80060e2:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060ea:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6a3a      	ldr	r2, [r7, #32]
 80060f2:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80060fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060fe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	f383 8810 	msr	PRIMASK, r3
}
 8006106:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8006108:	bf00      	nop
 800610a:	3730      	adds	r7, #48	@ 0x30
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	58003000 	.word	0x58003000
 8006114:	58002c00 	.word	0x58002c00
 8006118:	58002800 	.word	0x58002800
 800611c:	40002400 	.word	0x40002400
 8006120:	58002400 	.word	0x58002400
 8006124:	58024400 	.word	0x58024400

08006128 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8006128:	b480      	push	{r7}
 800612a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800612c:	4b05      	ldr	r3, [pc, #20]	@ (8006144 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a04      	ldr	r2, [pc, #16]	@ (8006144 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006132:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006136:	6013      	str	r3, [r2, #0]
}
 8006138:	bf00      	nop
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	58024800 	.word	0x58024800

08006148 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006150:	4b19      	ldr	r3, [pc, #100]	@ (80061b8 <HAL_PWREx_ConfigSupply+0x70>)
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f003 0304 	and.w	r3, r3, #4
 8006158:	2b04      	cmp	r3, #4
 800615a:	d00a      	beq.n	8006172 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800615c:	4b16      	ldr	r3, [pc, #88]	@ (80061b8 <HAL_PWREx_ConfigSupply+0x70>)
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	f003 0307 	and.w	r3, r3, #7
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	429a      	cmp	r2, r3
 8006168:	d001      	beq.n	800616e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e01f      	b.n	80061ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800616e:	2300      	movs	r3, #0
 8006170:	e01d      	b.n	80061ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006172:	4b11      	ldr	r3, [pc, #68]	@ (80061b8 <HAL_PWREx_ConfigSupply+0x70>)
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	f023 0207 	bic.w	r2, r3, #7
 800617a:	490f      	ldr	r1, [pc, #60]	@ (80061b8 <HAL_PWREx_ConfigSupply+0x70>)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4313      	orrs	r3, r2
 8006180:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006182:	f7fc fc29 	bl	80029d8 <HAL_GetTick>
 8006186:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006188:	e009      	b.n	800619e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800618a:	f7fc fc25 	bl	80029d8 <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006198:	d901      	bls.n	800619e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e007      	b.n	80061ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800619e:	4b06      	ldr	r3, [pc, #24]	@ (80061b8 <HAL_PWREx_ConfigSupply+0x70>)
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061aa:	d1ee      	bne.n	800618a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	58024800 	.word	0x58024800

080061bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b08c      	sub	sp, #48	@ 0x30
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d102      	bne.n	80061d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	f000 bc48 	b.w	8006a60 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 8088 	beq.w	80062ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061de:	4b99      	ldr	r3, [pc, #612]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80061e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80061e8:	4b96      	ldr	r3, [pc, #600]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 80061ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80061ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f0:	2b10      	cmp	r3, #16
 80061f2:	d007      	beq.n	8006204 <HAL_RCC_OscConfig+0x48>
 80061f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f6:	2b18      	cmp	r3, #24
 80061f8:	d111      	bne.n	800621e <HAL_RCC_OscConfig+0x62>
 80061fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061fc:	f003 0303 	and.w	r3, r3, #3
 8006200:	2b02      	cmp	r3, #2
 8006202:	d10c      	bne.n	800621e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006204:	4b8f      	ldr	r3, [pc, #572]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d06d      	beq.n	80062ec <HAL_RCC_OscConfig+0x130>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d169      	bne.n	80062ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	f000 bc21 	b.w	8006a60 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006226:	d106      	bne.n	8006236 <HAL_RCC_OscConfig+0x7a>
 8006228:	4b86      	ldr	r3, [pc, #536]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a85      	ldr	r2, [pc, #532]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 800622e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006232:	6013      	str	r3, [r2, #0]
 8006234:	e02e      	b.n	8006294 <HAL_RCC_OscConfig+0xd8>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10c      	bne.n	8006258 <HAL_RCC_OscConfig+0x9c>
 800623e:	4b81      	ldr	r3, [pc, #516]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a80      	ldr	r2, [pc, #512]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 8006244:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	4b7e      	ldr	r3, [pc, #504]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a7d      	ldr	r2, [pc, #500]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 8006250:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006254:	6013      	str	r3, [r2, #0]
 8006256:	e01d      	b.n	8006294 <HAL_RCC_OscConfig+0xd8>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006260:	d10c      	bne.n	800627c <HAL_RCC_OscConfig+0xc0>
 8006262:	4b78      	ldr	r3, [pc, #480]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a77      	ldr	r2, [pc, #476]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 8006268:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800626c:	6013      	str	r3, [r2, #0]
 800626e:	4b75      	ldr	r3, [pc, #468]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a74      	ldr	r2, [pc, #464]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 8006274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006278:	6013      	str	r3, [r2, #0]
 800627a:	e00b      	b.n	8006294 <HAL_RCC_OscConfig+0xd8>
 800627c:	4b71      	ldr	r3, [pc, #452]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a70      	ldr	r2, [pc, #448]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 8006282:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006286:	6013      	str	r3, [r2, #0]
 8006288:	4b6e      	ldr	r3, [pc, #440]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a6d      	ldr	r2, [pc, #436]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 800628e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d013      	beq.n	80062c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800629c:	f7fc fb9c 	bl	80029d8 <HAL_GetTick>
 80062a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80062a2:	e008      	b.n	80062b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062a4:	f7fc fb98 	bl	80029d8 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	2b64      	cmp	r3, #100	@ 0x64
 80062b0:	d901      	bls.n	80062b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e3d4      	b.n	8006a60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80062b6:	4b63      	ldr	r3, [pc, #396]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d0f0      	beq.n	80062a4 <HAL_RCC_OscConfig+0xe8>
 80062c2:	e014      	b.n	80062ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c4:	f7fc fb88 	bl	80029d8 <HAL_GetTick>
 80062c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80062ca:	e008      	b.n	80062de <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062cc:	f7fc fb84 	bl	80029d8 <HAL_GetTick>
 80062d0:	4602      	mov	r2, r0
 80062d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	2b64      	cmp	r3, #100	@ 0x64
 80062d8:	d901      	bls.n	80062de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e3c0      	b.n	8006a60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80062de:	4b59      	ldr	r3, [pc, #356]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1f0      	bne.n	80062cc <HAL_RCC_OscConfig+0x110>
 80062ea:	e000      	b.n	80062ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f000 80ca 	beq.w	8006490 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062fc:	4b51      	ldr	r3, [pc, #324]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006304:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006306:	4b4f      	ldr	r3, [pc, #316]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 8006308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800630c:	6a3b      	ldr	r3, [r7, #32]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d007      	beq.n	8006322 <HAL_RCC_OscConfig+0x166>
 8006312:	6a3b      	ldr	r3, [r7, #32]
 8006314:	2b18      	cmp	r3, #24
 8006316:	d156      	bne.n	80063c6 <HAL_RCC_OscConfig+0x20a>
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	f003 0303 	and.w	r3, r3, #3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d151      	bne.n	80063c6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006322:	4b48      	ldr	r3, [pc, #288]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0304 	and.w	r3, r3, #4
 800632a:	2b00      	cmp	r3, #0
 800632c:	d005      	beq.n	800633a <HAL_RCC_OscConfig+0x17e>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d101      	bne.n	800633a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e392      	b.n	8006a60 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800633a:	4b42      	ldr	r3, [pc, #264]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f023 0219 	bic.w	r2, r3, #25
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	493f      	ldr	r1, [pc, #252]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 8006348:	4313      	orrs	r3, r2
 800634a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800634c:	f7fc fb44 	bl	80029d8 <HAL_GetTick>
 8006350:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006352:	e008      	b.n	8006366 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006354:	f7fc fb40 	bl	80029d8 <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	2b02      	cmp	r3, #2
 8006360:	d901      	bls.n	8006366 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e37c      	b.n	8006a60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006366:	4b37      	ldr	r3, [pc, #220]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0304 	and.w	r3, r3, #4
 800636e:	2b00      	cmp	r3, #0
 8006370:	d0f0      	beq.n	8006354 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006372:	f7fc fb61 	bl	8002a38 <HAL_GetREVID>
 8006376:	4603      	mov	r3, r0
 8006378:	f241 0203 	movw	r2, #4099	@ 0x1003
 800637c:	4293      	cmp	r3, r2
 800637e:	d817      	bhi.n	80063b0 <HAL_RCC_OscConfig+0x1f4>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	2b40      	cmp	r3, #64	@ 0x40
 8006386:	d108      	bne.n	800639a <HAL_RCC_OscConfig+0x1de>
 8006388:	4b2e      	ldr	r3, [pc, #184]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006390:	4a2c      	ldr	r2, [pc, #176]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 8006392:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006396:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006398:	e07a      	b.n	8006490 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800639a:	4b2a      	ldr	r3, [pc, #168]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	031b      	lsls	r3, r3, #12
 80063a8:	4926      	ldr	r1, [pc, #152]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063ae:	e06f      	b.n	8006490 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063b0:	4b24      	ldr	r3, [pc, #144]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	061b      	lsls	r3, r3, #24
 80063be:	4921      	ldr	r1, [pc, #132]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063c4:	e064      	b.n	8006490 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d047      	beq.n	800645e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80063ce:	4b1d      	ldr	r3, [pc, #116]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f023 0219 	bic.w	r2, r3, #25
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	491a      	ldr	r1, [pc, #104]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e0:	f7fc fafa 	bl	80029d8 <HAL_GetTick>
 80063e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063e6:	e008      	b.n	80063fa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063e8:	f7fc faf6 	bl	80029d8 <HAL_GetTick>
 80063ec:	4602      	mov	r2, r0
 80063ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d901      	bls.n	80063fa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e332      	b.n	8006a60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063fa:	4b12      	ldr	r3, [pc, #72]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0304 	and.w	r3, r3, #4
 8006402:	2b00      	cmp	r3, #0
 8006404:	d0f0      	beq.n	80063e8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006406:	f7fc fb17 	bl	8002a38 <HAL_GetREVID>
 800640a:	4603      	mov	r3, r0
 800640c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006410:	4293      	cmp	r3, r2
 8006412:	d819      	bhi.n	8006448 <HAL_RCC_OscConfig+0x28c>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	2b40      	cmp	r3, #64	@ 0x40
 800641a:	d108      	bne.n	800642e <HAL_RCC_OscConfig+0x272>
 800641c:	4b09      	ldr	r3, [pc, #36]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006424:	4a07      	ldr	r2, [pc, #28]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 8006426:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800642a:	6053      	str	r3, [r2, #4]
 800642c:	e030      	b.n	8006490 <HAL_RCC_OscConfig+0x2d4>
 800642e:	4b05      	ldr	r3, [pc, #20]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	031b      	lsls	r3, r3, #12
 800643c:	4901      	ldr	r1, [pc, #4]	@ (8006444 <HAL_RCC_OscConfig+0x288>)
 800643e:	4313      	orrs	r3, r2
 8006440:	604b      	str	r3, [r1, #4]
 8006442:	e025      	b.n	8006490 <HAL_RCC_OscConfig+0x2d4>
 8006444:	58024400 	.word	0x58024400
 8006448:	4b9a      	ldr	r3, [pc, #616]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	061b      	lsls	r3, r3, #24
 8006456:	4997      	ldr	r1, [pc, #604]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 8006458:	4313      	orrs	r3, r2
 800645a:	604b      	str	r3, [r1, #4]
 800645c:	e018      	b.n	8006490 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800645e:	4b95      	ldr	r3, [pc, #596]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a94      	ldr	r2, [pc, #592]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 8006464:	f023 0301 	bic.w	r3, r3, #1
 8006468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800646a:	f7fc fab5 	bl	80029d8 <HAL_GetTick>
 800646e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006470:	e008      	b.n	8006484 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006472:	f7fc fab1 	bl	80029d8 <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	2b02      	cmp	r3, #2
 800647e:	d901      	bls.n	8006484 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e2ed      	b.n	8006a60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006484:	4b8b      	ldr	r3, [pc, #556]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0304 	and.w	r3, r3, #4
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1f0      	bne.n	8006472 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0310 	and.w	r3, r3, #16
 8006498:	2b00      	cmp	r3, #0
 800649a:	f000 80a9 	beq.w	80065f0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800649e:	4b85      	ldr	r3, [pc, #532]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80064a8:	4b82      	ldr	r3, [pc, #520]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 80064aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ac:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	2b08      	cmp	r3, #8
 80064b2:	d007      	beq.n	80064c4 <HAL_RCC_OscConfig+0x308>
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	2b18      	cmp	r3, #24
 80064b8:	d13a      	bne.n	8006530 <HAL_RCC_OscConfig+0x374>
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f003 0303 	and.w	r3, r3, #3
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d135      	bne.n	8006530 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80064c4:	4b7b      	ldr	r3, [pc, #492]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d005      	beq.n	80064dc <HAL_RCC_OscConfig+0x320>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	69db      	ldr	r3, [r3, #28]
 80064d4:	2b80      	cmp	r3, #128	@ 0x80
 80064d6:	d001      	beq.n	80064dc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e2c1      	b.n	8006a60 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80064dc:	f7fc faac 	bl	8002a38 <HAL_GetREVID>
 80064e0:	4603      	mov	r3, r0
 80064e2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d817      	bhi.n	800651a <HAL_RCC_OscConfig+0x35e>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	2b20      	cmp	r3, #32
 80064f0:	d108      	bne.n	8006504 <HAL_RCC_OscConfig+0x348>
 80064f2:	4b70      	ldr	r3, [pc, #448]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80064fa:	4a6e      	ldr	r2, [pc, #440]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 80064fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006500:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006502:	e075      	b.n	80065f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006504:	4b6b      	ldr	r3, [pc, #428]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	069b      	lsls	r3, r3, #26
 8006512:	4968      	ldr	r1, [pc, #416]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 8006514:	4313      	orrs	r3, r2
 8006516:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006518:	e06a      	b.n	80065f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800651a:	4b66      	ldr	r3, [pc, #408]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	061b      	lsls	r3, r3, #24
 8006528:	4962      	ldr	r1, [pc, #392]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 800652a:	4313      	orrs	r3, r2
 800652c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800652e:	e05f      	b.n	80065f0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	69db      	ldr	r3, [r3, #28]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d042      	beq.n	80065be <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006538:	4b5e      	ldr	r3, [pc, #376]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a5d      	ldr	r2, [pc, #372]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 800653e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006544:	f7fc fa48 	bl	80029d8 <HAL_GetTick>
 8006548:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800654a:	e008      	b.n	800655e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800654c:	f7fc fa44 	bl	80029d8 <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	2b02      	cmp	r3, #2
 8006558:	d901      	bls.n	800655e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e280      	b.n	8006a60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800655e:	4b55      	ldr	r3, [pc, #340]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006566:	2b00      	cmp	r3, #0
 8006568:	d0f0      	beq.n	800654c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800656a:	f7fc fa65 	bl	8002a38 <HAL_GetREVID>
 800656e:	4603      	mov	r3, r0
 8006570:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006574:	4293      	cmp	r3, r2
 8006576:	d817      	bhi.n	80065a8 <HAL_RCC_OscConfig+0x3ec>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a1b      	ldr	r3, [r3, #32]
 800657c:	2b20      	cmp	r3, #32
 800657e:	d108      	bne.n	8006592 <HAL_RCC_OscConfig+0x3d6>
 8006580:	4b4c      	ldr	r3, [pc, #304]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006588:	4a4a      	ldr	r2, [pc, #296]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 800658a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800658e:	6053      	str	r3, [r2, #4]
 8006590:	e02e      	b.n	80065f0 <HAL_RCC_OscConfig+0x434>
 8006592:	4b48      	ldr	r3, [pc, #288]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	069b      	lsls	r3, r3, #26
 80065a0:	4944      	ldr	r1, [pc, #272]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	604b      	str	r3, [r1, #4]
 80065a6:	e023      	b.n	80065f0 <HAL_RCC_OscConfig+0x434>
 80065a8:	4b42      	ldr	r3, [pc, #264]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a1b      	ldr	r3, [r3, #32]
 80065b4:	061b      	lsls	r3, r3, #24
 80065b6:	493f      	ldr	r1, [pc, #252]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	60cb      	str	r3, [r1, #12]
 80065bc:	e018      	b.n	80065f0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80065be:	4b3d      	ldr	r3, [pc, #244]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a3c      	ldr	r2, [pc, #240]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 80065c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ca:	f7fc fa05 	bl	80029d8 <HAL_GetTick>
 80065ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80065d0:	e008      	b.n	80065e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80065d2:	f7fc fa01 	bl	80029d8 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d901      	bls.n	80065e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e23d      	b.n	8006a60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80065e4:	4b33      	ldr	r3, [pc, #204]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1f0      	bne.n	80065d2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0308 	and.w	r3, r3, #8
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d036      	beq.n	800666a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d019      	beq.n	8006638 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006604:	4b2b      	ldr	r3, [pc, #172]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 8006606:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006608:	4a2a      	ldr	r2, [pc, #168]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 800660a:	f043 0301 	orr.w	r3, r3, #1
 800660e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006610:	f7fc f9e2 	bl	80029d8 <HAL_GetTick>
 8006614:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006616:	e008      	b.n	800662a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006618:	f7fc f9de 	bl	80029d8 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	2b02      	cmp	r3, #2
 8006624:	d901      	bls.n	800662a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e21a      	b.n	8006a60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800662a:	4b22      	ldr	r3, [pc, #136]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 800662c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800662e:	f003 0302 	and.w	r3, r3, #2
 8006632:	2b00      	cmp	r3, #0
 8006634:	d0f0      	beq.n	8006618 <HAL_RCC_OscConfig+0x45c>
 8006636:	e018      	b.n	800666a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006638:	4b1e      	ldr	r3, [pc, #120]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 800663a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800663c:	4a1d      	ldr	r2, [pc, #116]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 800663e:	f023 0301 	bic.w	r3, r3, #1
 8006642:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006644:	f7fc f9c8 	bl	80029d8 <HAL_GetTick>
 8006648:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800664a:	e008      	b.n	800665e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800664c:	f7fc f9c4 	bl	80029d8 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	2b02      	cmp	r3, #2
 8006658:	d901      	bls.n	800665e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e200      	b.n	8006a60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800665e:	4b15      	ldr	r3, [pc, #84]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 8006660:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006662:	f003 0302 	and.w	r3, r3, #2
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1f0      	bne.n	800664c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 0320 	and.w	r3, r3, #32
 8006672:	2b00      	cmp	r3, #0
 8006674:	d039      	beq.n	80066ea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d01c      	beq.n	80066b8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800667e:	4b0d      	ldr	r3, [pc, #52]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a0c      	ldr	r2, [pc, #48]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 8006684:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006688:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800668a:	f7fc f9a5 	bl	80029d8 <HAL_GetTick>
 800668e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006690:	e008      	b.n	80066a4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006692:	f7fc f9a1 	bl	80029d8 <HAL_GetTick>
 8006696:	4602      	mov	r2, r0
 8006698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	2b02      	cmp	r3, #2
 800669e:	d901      	bls.n	80066a4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e1dd      	b.n	8006a60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80066a4:	4b03      	ldr	r3, [pc, #12]	@ (80066b4 <HAL_RCC_OscConfig+0x4f8>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d0f0      	beq.n	8006692 <HAL_RCC_OscConfig+0x4d6>
 80066b0:	e01b      	b.n	80066ea <HAL_RCC_OscConfig+0x52e>
 80066b2:	bf00      	nop
 80066b4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80066b8:	4b9b      	ldr	r3, [pc, #620]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a9a      	ldr	r2, [pc, #616]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 80066be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80066c4:	f7fc f988 	bl	80029d8 <HAL_GetTick>
 80066c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80066ca:	e008      	b.n	80066de <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066cc:	f7fc f984 	bl	80029d8 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d901      	bls.n	80066de <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e1c0      	b.n	8006a60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80066de:	4b92      	ldr	r3, [pc, #584]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1f0      	bne.n	80066cc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0304 	and.w	r3, r3, #4
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f000 8081 	beq.w	80067fa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80066f8:	4b8c      	ldr	r3, [pc, #560]	@ (800692c <HAL_RCC_OscConfig+0x770>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a8b      	ldr	r2, [pc, #556]	@ (800692c <HAL_RCC_OscConfig+0x770>)
 80066fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006702:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006704:	f7fc f968 	bl	80029d8 <HAL_GetTick>
 8006708:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800670a:	e008      	b.n	800671e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800670c:	f7fc f964 	bl	80029d8 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	2b64      	cmp	r3, #100	@ 0x64
 8006718:	d901      	bls.n	800671e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e1a0      	b.n	8006a60 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800671e:	4b83      	ldr	r3, [pc, #524]	@ (800692c <HAL_RCC_OscConfig+0x770>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006726:	2b00      	cmp	r3, #0
 8006728:	d0f0      	beq.n	800670c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d106      	bne.n	8006740 <HAL_RCC_OscConfig+0x584>
 8006732:	4b7d      	ldr	r3, [pc, #500]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 8006734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006736:	4a7c      	ldr	r2, [pc, #496]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 8006738:	f043 0301 	orr.w	r3, r3, #1
 800673c:	6713      	str	r3, [r2, #112]	@ 0x70
 800673e:	e02d      	b.n	800679c <HAL_RCC_OscConfig+0x5e0>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10c      	bne.n	8006762 <HAL_RCC_OscConfig+0x5a6>
 8006748:	4b77      	ldr	r3, [pc, #476]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 800674a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800674c:	4a76      	ldr	r2, [pc, #472]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 800674e:	f023 0301 	bic.w	r3, r3, #1
 8006752:	6713      	str	r3, [r2, #112]	@ 0x70
 8006754:	4b74      	ldr	r3, [pc, #464]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 8006756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006758:	4a73      	ldr	r2, [pc, #460]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 800675a:	f023 0304 	bic.w	r3, r3, #4
 800675e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006760:	e01c      	b.n	800679c <HAL_RCC_OscConfig+0x5e0>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	2b05      	cmp	r3, #5
 8006768:	d10c      	bne.n	8006784 <HAL_RCC_OscConfig+0x5c8>
 800676a:	4b6f      	ldr	r3, [pc, #444]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 800676c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800676e:	4a6e      	ldr	r2, [pc, #440]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 8006770:	f043 0304 	orr.w	r3, r3, #4
 8006774:	6713      	str	r3, [r2, #112]	@ 0x70
 8006776:	4b6c      	ldr	r3, [pc, #432]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 8006778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800677a:	4a6b      	ldr	r2, [pc, #428]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 800677c:	f043 0301 	orr.w	r3, r3, #1
 8006780:	6713      	str	r3, [r2, #112]	@ 0x70
 8006782:	e00b      	b.n	800679c <HAL_RCC_OscConfig+0x5e0>
 8006784:	4b68      	ldr	r3, [pc, #416]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 8006786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006788:	4a67      	ldr	r2, [pc, #412]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 800678a:	f023 0301 	bic.w	r3, r3, #1
 800678e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006790:	4b65      	ldr	r3, [pc, #404]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 8006792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006794:	4a64      	ldr	r2, [pc, #400]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 8006796:	f023 0304 	bic.w	r3, r3, #4
 800679a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d015      	beq.n	80067d0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a4:	f7fc f918 	bl	80029d8 <HAL_GetTick>
 80067a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067aa:	e00a      	b.n	80067c2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067ac:	f7fc f914 	bl	80029d8 <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d901      	bls.n	80067c2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e14e      	b.n	8006a60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067c2:	4b59      	ldr	r3, [pc, #356]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 80067c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067c6:	f003 0302 	and.w	r3, r3, #2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d0ee      	beq.n	80067ac <HAL_RCC_OscConfig+0x5f0>
 80067ce:	e014      	b.n	80067fa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067d0:	f7fc f902 	bl	80029d8 <HAL_GetTick>
 80067d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80067d6:	e00a      	b.n	80067ee <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067d8:	f7fc f8fe 	bl	80029d8 <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d901      	bls.n	80067ee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e138      	b.n	8006a60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80067ee:	4b4e      	ldr	r3, [pc, #312]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 80067f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067f2:	f003 0302 	and.w	r3, r3, #2
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1ee      	bne.n	80067d8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067fe:	2b00      	cmp	r3, #0
 8006800:	f000 812d 	beq.w	8006a5e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006804:	4b48      	ldr	r3, [pc, #288]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800680c:	2b18      	cmp	r3, #24
 800680e:	f000 80bd 	beq.w	800698c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006816:	2b02      	cmp	r3, #2
 8006818:	f040 809e 	bne.w	8006958 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800681c:	4b42      	ldr	r3, [pc, #264]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a41      	ldr	r2, [pc, #260]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 8006822:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006828:	f7fc f8d6 	bl	80029d8 <HAL_GetTick>
 800682c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800682e:	e008      	b.n	8006842 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006830:	f7fc f8d2 	bl	80029d8 <HAL_GetTick>
 8006834:	4602      	mov	r2, r0
 8006836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	2b02      	cmp	r3, #2
 800683c:	d901      	bls.n	8006842 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e10e      	b.n	8006a60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006842:	4b39      	ldr	r3, [pc, #228]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1f0      	bne.n	8006830 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800684e:	4b36      	ldr	r3, [pc, #216]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 8006850:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006852:	4b37      	ldr	r3, [pc, #220]	@ (8006930 <HAL_RCC_OscConfig+0x774>)
 8006854:	4013      	ands	r3, r2
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800685e:	0112      	lsls	r2, r2, #4
 8006860:	430a      	orrs	r2, r1
 8006862:	4931      	ldr	r1, [pc, #196]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 8006864:	4313      	orrs	r3, r2
 8006866:	628b      	str	r3, [r1, #40]	@ 0x28
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800686c:	3b01      	subs	r3, #1
 800686e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006876:	3b01      	subs	r3, #1
 8006878:	025b      	lsls	r3, r3, #9
 800687a:	b29b      	uxth	r3, r3
 800687c:	431a      	orrs	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006882:	3b01      	subs	r3, #1
 8006884:	041b      	lsls	r3, r3, #16
 8006886:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800688a:	431a      	orrs	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006890:	3b01      	subs	r3, #1
 8006892:	061b      	lsls	r3, r3, #24
 8006894:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006898:	4923      	ldr	r1, [pc, #140]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 800689a:	4313      	orrs	r3, r2
 800689c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800689e:	4b22      	ldr	r3, [pc, #136]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 80068a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a2:	4a21      	ldr	r2, [pc, #132]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 80068a4:	f023 0301 	bic.w	r3, r3, #1
 80068a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80068aa:	4b1f      	ldr	r3, [pc, #124]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 80068ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068ae:	4b21      	ldr	r3, [pc, #132]	@ (8006934 <HAL_RCC_OscConfig+0x778>)
 80068b0:	4013      	ands	r3, r2
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80068b6:	00d2      	lsls	r2, r2, #3
 80068b8:	491b      	ldr	r1, [pc, #108]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80068be:	4b1a      	ldr	r3, [pc, #104]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 80068c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c2:	f023 020c 	bic.w	r2, r3, #12
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ca:	4917      	ldr	r1, [pc, #92]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80068d0:	4b15      	ldr	r3, [pc, #84]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 80068d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068d4:	f023 0202 	bic.w	r2, r3, #2
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068dc:	4912      	ldr	r1, [pc, #72]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 80068de:	4313      	orrs	r3, r2
 80068e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80068e2:	4b11      	ldr	r3, [pc, #68]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 80068e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e6:	4a10      	ldr	r2, [pc, #64]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 80068e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068ee:	4b0e      	ldr	r3, [pc, #56]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 80068f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f2:	4a0d      	ldr	r2, [pc, #52]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 80068f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80068fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 80068fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068fe:	4a0a      	ldr	r2, [pc, #40]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 8006900:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006904:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006906:	4b08      	ldr	r3, [pc, #32]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 8006908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800690a:	4a07      	ldr	r2, [pc, #28]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 800690c:	f043 0301 	orr.w	r3, r3, #1
 8006910:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006912:	4b05      	ldr	r3, [pc, #20]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a04      	ldr	r2, [pc, #16]	@ (8006928 <HAL_RCC_OscConfig+0x76c>)
 8006918:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800691c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800691e:	f7fc f85b 	bl	80029d8 <HAL_GetTick>
 8006922:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006924:	e011      	b.n	800694a <HAL_RCC_OscConfig+0x78e>
 8006926:	bf00      	nop
 8006928:	58024400 	.word	0x58024400
 800692c:	58024800 	.word	0x58024800
 8006930:	fffffc0c 	.word	0xfffffc0c
 8006934:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006938:	f7fc f84e 	bl	80029d8 <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	2b02      	cmp	r3, #2
 8006944:	d901      	bls.n	800694a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e08a      	b.n	8006a60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800694a:	4b47      	ldr	r3, [pc, #284]	@ (8006a68 <HAL_RCC_OscConfig+0x8ac>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d0f0      	beq.n	8006938 <HAL_RCC_OscConfig+0x77c>
 8006956:	e082      	b.n	8006a5e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006958:	4b43      	ldr	r3, [pc, #268]	@ (8006a68 <HAL_RCC_OscConfig+0x8ac>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a42      	ldr	r2, [pc, #264]	@ (8006a68 <HAL_RCC_OscConfig+0x8ac>)
 800695e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006964:	f7fc f838 	bl	80029d8 <HAL_GetTick>
 8006968:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800696a:	e008      	b.n	800697e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800696c:	f7fc f834 	bl	80029d8 <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	2b02      	cmp	r3, #2
 8006978:	d901      	bls.n	800697e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e070      	b.n	8006a60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800697e:	4b3a      	ldr	r3, [pc, #232]	@ (8006a68 <HAL_RCC_OscConfig+0x8ac>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1f0      	bne.n	800696c <HAL_RCC_OscConfig+0x7b0>
 800698a:	e068      	b.n	8006a5e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800698c:	4b36      	ldr	r3, [pc, #216]	@ (8006a68 <HAL_RCC_OscConfig+0x8ac>)
 800698e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006990:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006992:	4b35      	ldr	r3, [pc, #212]	@ (8006a68 <HAL_RCC_OscConfig+0x8ac>)
 8006994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006996:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800699c:	2b01      	cmp	r3, #1
 800699e:	d031      	beq.n	8006a04 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	f003 0203 	and.w	r2, r3, #3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d12a      	bne.n	8006a04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	091b      	lsrs	r3, r3, #4
 80069b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d122      	bne.n	8006a04 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d11a      	bne.n	8006a04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	0a5b      	lsrs	r3, r3, #9
 80069d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069da:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80069dc:	429a      	cmp	r2, r3
 80069de:	d111      	bne.n	8006a04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	0c1b      	lsrs	r3, r3, #16
 80069e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d108      	bne.n	8006a04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	0e1b      	lsrs	r3, r3, #24
 80069f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069fe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d001      	beq.n	8006a08 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e02b      	b.n	8006a60 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006a08:	4b17      	ldr	r3, [pc, #92]	@ (8006a68 <HAL_RCC_OscConfig+0x8ac>)
 8006a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a0c:	08db      	lsrs	r3, r3, #3
 8006a0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a12:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d01f      	beq.n	8006a5e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006a1e:	4b12      	ldr	r3, [pc, #72]	@ (8006a68 <HAL_RCC_OscConfig+0x8ac>)
 8006a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a22:	4a11      	ldr	r2, [pc, #68]	@ (8006a68 <HAL_RCC_OscConfig+0x8ac>)
 8006a24:	f023 0301 	bic.w	r3, r3, #1
 8006a28:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a2a:	f7fb ffd5 	bl	80029d8 <HAL_GetTick>
 8006a2e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006a30:	bf00      	nop
 8006a32:	f7fb ffd1 	bl	80029d8 <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d0f9      	beq.n	8006a32 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8006a68 <HAL_RCC_OscConfig+0x8ac>)
 8006a40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a42:	4b0a      	ldr	r3, [pc, #40]	@ (8006a6c <HAL_RCC_OscConfig+0x8b0>)
 8006a44:	4013      	ands	r3, r2
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006a4a:	00d2      	lsls	r2, r2, #3
 8006a4c:	4906      	ldr	r1, [pc, #24]	@ (8006a68 <HAL_RCC_OscConfig+0x8ac>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006a52:	4b05      	ldr	r3, [pc, #20]	@ (8006a68 <HAL_RCC_OscConfig+0x8ac>)
 8006a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a56:	4a04      	ldr	r2, [pc, #16]	@ (8006a68 <HAL_RCC_OscConfig+0x8ac>)
 8006a58:	f043 0301 	orr.w	r3, r3, #1
 8006a5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3730      	adds	r7, #48	@ 0x30
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	58024400 	.word	0x58024400
 8006a6c:	ffff0007 	.word	0xffff0007

08006a70 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d101      	bne.n	8006a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e19c      	b.n	8006dbe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a84:	4b8a      	ldr	r3, [pc, #552]	@ (8006cb0 <HAL_RCC_ClockConfig+0x240>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 030f 	and.w	r3, r3, #15
 8006a8c:	683a      	ldr	r2, [r7, #0]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d910      	bls.n	8006ab4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a92:	4b87      	ldr	r3, [pc, #540]	@ (8006cb0 <HAL_RCC_ClockConfig+0x240>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f023 020f 	bic.w	r2, r3, #15
 8006a9a:	4985      	ldr	r1, [pc, #532]	@ (8006cb0 <HAL_RCC_ClockConfig+0x240>)
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aa2:	4b83      	ldr	r3, [pc, #524]	@ (8006cb0 <HAL_RCC_ClockConfig+0x240>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 030f 	and.w	r3, r3, #15
 8006aaa:	683a      	ldr	r2, [r7, #0]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d001      	beq.n	8006ab4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e184      	b.n	8006dbe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0304 	and.w	r3, r3, #4
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d010      	beq.n	8006ae2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	691a      	ldr	r2, [r3, #16]
 8006ac4:	4b7b      	ldr	r3, [pc, #492]	@ (8006cb4 <HAL_RCC_ClockConfig+0x244>)
 8006ac6:	699b      	ldr	r3, [r3, #24]
 8006ac8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d908      	bls.n	8006ae2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ad0:	4b78      	ldr	r3, [pc, #480]	@ (8006cb4 <HAL_RCC_ClockConfig+0x244>)
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	4975      	ldr	r1, [pc, #468]	@ (8006cb4 <HAL_RCC_ClockConfig+0x244>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0308 	and.w	r3, r3, #8
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d010      	beq.n	8006b10 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	695a      	ldr	r2, [r3, #20]
 8006af2:	4b70      	ldr	r3, [pc, #448]	@ (8006cb4 <HAL_RCC_ClockConfig+0x244>)
 8006af4:	69db      	ldr	r3, [r3, #28]
 8006af6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d908      	bls.n	8006b10 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006afe:	4b6d      	ldr	r3, [pc, #436]	@ (8006cb4 <HAL_RCC_ClockConfig+0x244>)
 8006b00:	69db      	ldr	r3, [r3, #28]
 8006b02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	496a      	ldr	r1, [pc, #424]	@ (8006cb4 <HAL_RCC_ClockConfig+0x244>)
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0310 	and.w	r3, r3, #16
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d010      	beq.n	8006b3e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	699a      	ldr	r2, [r3, #24]
 8006b20:	4b64      	ldr	r3, [pc, #400]	@ (8006cb4 <HAL_RCC_ClockConfig+0x244>)
 8006b22:	69db      	ldr	r3, [r3, #28]
 8006b24:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d908      	bls.n	8006b3e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006b2c:	4b61      	ldr	r3, [pc, #388]	@ (8006cb4 <HAL_RCC_ClockConfig+0x244>)
 8006b2e:	69db      	ldr	r3, [r3, #28]
 8006b30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	699b      	ldr	r3, [r3, #24]
 8006b38:	495e      	ldr	r1, [pc, #376]	@ (8006cb4 <HAL_RCC_ClockConfig+0x244>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0320 	and.w	r3, r3, #32
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d010      	beq.n	8006b6c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	69da      	ldr	r2, [r3, #28]
 8006b4e:	4b59      	ldr	r3, [pc, #356]	@ (8006cb4 <HAL_RCC_ClockConfig+0x244>)
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d908      	bls.n	8006b6c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006b5a:	4b56      	ldr	r3, [pc, #344]	@ (8006cb4 <HAL_RCC_ClockConfig+0x244>)
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	4953      	ldr	r1, [pc, #332]	@ (8006cb4 <HAL_RCC_ClockConfig+0x244>)
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 0302 	and.w	r3, r3, #2
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d010      	beq.n	8006b9a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	68da      	ldr	r2, [r3, #12]
 8006b7c:	4b4d      	ldr	r3, [pc, #308]	@ (8006cb4 <HAL_RCC_ClockConfig+0x244>)
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	f003 030f 	and.w	r3, r3, #15
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d908      	bls.n	8006b9a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b88:	4b4a      	ldr	r3, [pc, #296]	@ (8006cb4 <HAL_RCC_ClockConfig+0x244>)
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	f023 020f 	bic.w	r2, r3, #15
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	4947      	ldr	r1, [pc, #284]	@ (8006cb4 <HAL_RCC_ClockConfig+0x244>)
 8006b96:	4313      	orrs	r3, r2
 8006b98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d055      	beq.n	8006c52 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006ba6:	4b43      	ldr	r3, [pc, #268]	@ (8006cb4 <HAL_RCC_ClockConfig+0x244>)
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	4940      	ldr	r1, [pc, #256]	@ (8006cb4 <HAL_RCC_ClockConfig+0x244>)
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d107      	bne.n	8006bd0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006bc0:	4b3c      	ldr	r3, [pc, #240]	@ (8006cb4 <HAL_RCC_ClockConfig+0x244>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d121      	bne.n	8006c10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e0f6      	b.n	8006dbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	2b03      	cmp	r3, #3
 8006bd6:	d107      	bne.n	8006be8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006bd8:	4b36      	ldr	r3, [pc, #216]	@ (8006cb4 <HAL_RCC_ClockConfig+0x244>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d115      	bne.n	8006c10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e0ea      	b.n	8006dbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d107      	bne.n	8006c00 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006bf0:	4b30      	ldr	r3, [pc, #192]	@ (8006cb4 <HAL_RCC_ClockConfig+0x244>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d109      	bne.n	8006c10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e0de      	b.n	8006dbe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c00:	4b2c      	ldr	r3, [pc, #176]	@ (8006cb4 <HAL_RCC_ClockConfig+0x244>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0304 	and.w	r3, r3, #4
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d101      	bne.n	8006c10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e0d6      	b.n	8006dbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c10:	4b28      	ldr	r3, [pc, #160]	@ (8006cb4 <HAL_RCC_ClockConfig+0x244>)
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	f023 0207 	bic.w	r2, r3, #7
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	4925      	ldr	r1, [pc, #148]	@ (8006cb4 <HAL_RCC_ClockConfig+0x244>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c22:	f7fb fed9 	bl	80029d8 <HAL_GetTick>
 8006c26:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c28:	e00a      	b.n	8006c40 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c2a:	f7fb fed5 	bl	80029d8 <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d901      	bls.n	8006c40 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e0be      	b.n	8006dbe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c40:	4b1c      	ldr	r3, [pc, #112]	@ (8006cb4 <HAL_RCC_ClockConfig+0x244>)
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	00db      	lsls	r3, r3, #3
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d1eb      	bne.n	8006c2a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0302 	and.w	r3, r3, #2
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d010      	beq.n	8006c80 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68da      	ldr	r2, [r3, #12]
 8006c62:	4b14      	ldr	r3, [pc, #80]	@ (8006cb4 <HAL_RCC_ClockConfig+0x244>)
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	f003 030f 	and.w	r3, r3, #15
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d208      	bcs.n	8006c80 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c6e:	4b11      	ldr	r3, [pc, #68]	@ (8006cb4 <HAL_RCC_ClockConfig+0x244>)
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	f023 020f 	bic.w	r2, r3, #15
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	490e      	ldr	r1, [pc, #56]	@ (8006cb4 <HAL_RCC_ClockConfig+0x244>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c80:	4b0b      	ldr	r3, [pc, #44]	@ (8006cb0 <HAL_RCC_ClockConfig+0x240>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 030f 	and.w	r3, r3, #15
 8006c88:	683a      	ldr	r2, [r7, #0]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d214      	bcs.n	8006cb8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c8e:	4b08      	ldr	r3, [pc, #32]	@ (8006cb0 <HAL_RCC_ClockConfig+0x240>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f023 020f 	bic.w	r2, r3, #15
 8006c96:	4906      	ldr	r1, [pc, #24]	@ (8006cb0 <HAL_RCC_ClockConfig+0x240>)
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c9e:	4b04      	ldr	r3, [pc, #16]	@ (8006cb0 <HAL_RCC_ClockConfig+0x240>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 030f 	and.w	r3, r3, #15
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d005      	beq.n	8006cb8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e086      	b.n	8006dbe <HAL_RCC_ClockConfig+0x34e>
 8006cb0:	52002000 	.word	0x52002000
 8006cb4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0304 	and.w	r3, r3, #4
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d010      	beq.n	8006ce6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	691a      	ldr	r2, [r3, #16]
 8006cc8:	4b3f      	ldr	r3, [pc, #252]	@ (8006dc8 <HAL_RCC_ClockConfig+0x358>)
 8006cca:	699b      	ldr	r3, [r3, #24]
 8006ccc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d208      	bcs.n	8006ce6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006cd4:	4b3c      	ldr	r3, [pc, #240]	@ (8006dc8 <HAL_RCC_ClockConfig+0x358>)
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	4939      	ldr	r1, [pc, #228]	@ (8006dc8 <HAL_RCC_ClockConfig+0x358>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0308 	and.w	r3, r3, #8
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d010      	beq.n	8006d14 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	695a      	ldr	r2, [r3, #20]
 8006cf6:	4b34      	ldr	r3, [pc, #208]	@ (8006dc8 <HAL_RCC_ClockConfig+0x358>)
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d208      	bcs.n	8006d14 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d02:	4b31      	ldr	r3, [pc, #196]	@ (8006dc8 <HAL_RCC_ClockConfig+0x358>)
 8006d04:	69db      	ldr	r3, [r3, #28]
 8006d06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	492e      	ldr	r1, [pc, #184]	@ (8006dc8 <HAL_RCC_ClockConfig+0x358>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0310 	and.w	r3, r3, #16
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d010      	beq.n	8006d42 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	699a      	ldr	r2, [r3, #24]
 8006d24:	4b28      	ldr	r3, [pc, #160]	@ (8006dc8 <HAL_RCC_ClockConfig+0x358>)
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d208      	bcs.n	8006d42 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006d30:	4b25      	ldr	r3, [pc, #148]	@ (8006dc8 <HAL_RCC_ClockConfig+0x358>)
 8006d32:	69db      	ldr	r3, [r3, #28]
 8006d34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	4922      	ldr	r1, [pc, #136]	@ (8006dc8 <HAL_RCC_ClockConfig+0x358>)
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0320 	and.w	r3, r3, #32
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d010      	beq.n	8006d70 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	69da      	ldr	r2, [r3, #28]
 8006d52:	4b1d      	ldr	r3, [pc, #116]	@ (8006dc8 <HAL_RCC_ClockConfig+0x358>)
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d208      	bcs.n	8006d70 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8006dc8 <HAL_RCC_ClockConfig+0x358>)
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	69db      	ldr	r3, [r3, #28]
 8006d6a:	4917      	ldr	r1, [pc, #92]	@ (8006dc8 <HAL_RCC_ClockConfig+0x358>)
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006d70:	f000 f834 	bl	8006ddc <HAL_RCC_GetSysClockFreq>
 8006d74:	4602      	mov	r2, r0
 8006d76:	4b14      	ldr	r3, [pc, #80]	@ (8006dc8 <HAL_RCC_ClockConfig+0x358>)
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	0a1b      	lsrs	r3, r3, #8
 8006d7c:	f003 030f 	and.w	r3, r3, #15
 8006d80:	4912      	ldr	r1, [pc, #72]	@ (8006dcc <HAL_RCC_ClockConfig+0x35c>)
 8006d82:	5ccb      	ldrb	r3, [r1, r3]
 8006d84:	f003 031f 	and.w	r3, r3, #31
 8006d88:	fa22 f303 	lsr.w	r3, r2, r3
 8006d8c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8006dc8 <HAL_RCC_ClockConfig+0x358>)
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	f003 030f 	and.w	r3, r3, #15
 8006d96:	4a0d      	ldr	r2, [pc, #52]	@ (8006dcc <HAL_RCC_ClockConfig+0x35c>)
 8006d98:	5cd3      	ldrb	r3, [r2, r3]
 8006d9a:	f003 031f 	and.w	r3, r3, #31
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	fa22 f303 	lsr.w	r3, r2, r3
 8006da4:	4a0a      	ldr	r2, [pc, #40]	@ (8006dd0 <HAL_RCC_ClockConfig+0x360>)
 8006da6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006da8:	4a0a      	ldr	r2, [pc, #40]	@ (8006dd4 <HAL_RCC_ClockConfig+0x364>)
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006dae:	4b0a      	ldr	r3, [pc, #40]	@ (8006dd8 <HAL_RCC_ClockConfig+0x368>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fb fdc6 	bl	8002944 <HAL_InitTick>
 8006db8:	4603      	mov	r3, r0
 8006dba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3718      	adds	r7, #24
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	58024400 	.word	0x58024400
 8006dcc:	0801e0b4 	.word	0x0801e0b4
 8006dd0:	2400038c 	.word	0x2400038c
 8006dd4:	24000388 	.word	0x24000388
 8006dd8:	24000090 	.word	0x24000090

08006ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b089      	sub	sp, #36	@ 0x24
 8006de0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006de2:	4bb3      	ldr	r3, [pc, #716]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006dea:	2b18      	cmp	r3, #24
 8006dec:	f200 8155 	bhi.w	800709a <HAL_RCC_GetSysClockFreq+0x2be>
 8006df0:	a201      	add	r2, pc, #4	@ (adr r2, 8006df8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df6:	bf00      	nop
 8006df8:	08006e5d 	.word	0x08006e5d
 8006dfc:	0800709b 	.word	0x0800709b
 8006e00:	0800709b 	.word	0x0800709b
 8006e04:	0800709b 	.word	0x0800709b
 8006e08:	0800709b 	.word	0x0800709b
 8006e0c:	0800709b 	.word	0x0800709b
 8006e10:	0800709b 	.word	0x0800709b
 8006e14:	0800709b 	.word	0x0800709b
 8006e18:	08006e83 	.word	0x08006e83
 8006e1c:	0800709b 	.word	0x0800709b
 8006e20:	0800709b 	.word	0x0800709b
 8006e24:	0800709b 	.word	0x0800709b
 8006e28:	0800709b 	.word	0x0800709b
 8006e2c:	0800709b 	.word	0x0800709b
 8006e30:	0800709b 	.word	0x0800709b
 8006e34:	0800709b 	.word	0x0800709b
 8006e38:	08006e89 	.word	0x08006e89
 8006e3c:	0800709b 	.word	0x0800709b
 8006e40:	0800709b 	.word	0x0800709b
 8006e44:	0800709b 	.word	0x0800709b
 8006e48:	0800709b 	.word	0x0800709b
 8006e4c:	0800709b 	.word	0x0800709b
 8006e50:	0800709b 	.word	0x0800709b
 8006e54:	0800709b 	.word	0x0800709b
 8006e58:	08006e8f 	.word	0x08006e8f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e5c:	4b94      	ldr	r3, [pc, #592]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0320 	and.w	r3, r3, #32
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d009      	beq.n	8006e7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e68:	4b91      	ldr	r3, [pc, #580]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	08db      	lsrs	r3, r3, #3
 8006e6e:	f003 0303 	and.w	r3, r3, #3
 8006e72:	4a90      	ldr	r2, [pc, #576]	@ (80070b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e74:	fa22 f303 	lsr.w	r3, r2, r3
 8006e78:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006e7a:	e111      	b.n	80070a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006e7c:	4b8d      	ldr	r3, [pc, #564]	@ (80070b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e7e:	61bb      	str	r3, [r7, #24]
      break;
 8006e80:	e10e      	b.n	80070a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006e82:	4b8d      	ldr	r3, [pc, #564]	@ (80070b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006e84:	61bb      	str	r3, [r7, #24]
      break;
 8006e86:	e10b      	b.n	80070a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006e88:	4b8c      	ldr	r3, [pc, #560]	@ (80070bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006e8a:	61bb      	str	r3, [r7, #24]
      break;
 8006e8c:	e108      	b.n	80070a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e8e:	4b88      	ldr	r3, [pc, #544]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e92:	f003 0303 	and.w	r3, r3, #3
 8006e96:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006e98:	4b85      	ldr	r3, [pc, #532]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e9c:	091b      	lsrs	r3, r3, #4
 8006e9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ea2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006ea4:	4b82      	ldr	r3, [pc, #520]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea8:	f003 0301 	and.w	r3, r3, #1
 8006eac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006eae:	4b80      	ldr	r3, [pc, #512]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006eb2:	08db      	lsrs	r3, r3, #3
 8006eb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	fb02 f303 	mul.w	r3, r2, r3
 8006ebe:	ee07 3a90 	vmov	s15, r3
 8006ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f000 80e1 	beq.w	8007094 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	f000 8083 	beq.w	8006fe0 <HAL_RCC_GetSysClockFreq+0x204>
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	f200 80a1 	bhi.w	8007024 <HAL_RCC_GetSysClockFreq+0x248>
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d003      	beq.n	8006ef0 <HAL_RCC_GetSysClockFreq+0x114>
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d056      	beq.n	8006f9c <HAL_RCC_GetSysClockFreq+0x1c0>
 8006eee:	e099      	b.n	8007024 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ef0:	4b6f      	ldr	r3, [pc, #444]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0320 	and.w	r3, r3, #32
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d02d      	beq.n	8006f58 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006efc:	4b6c      	ldr	r3, [pc, #432]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	08db      	lsrs	r3, r3, #3
 8006f02:	f003 0303 	and.w	r3, r3, #3
 8006f06:	4a6b      	ldr	r2, [pc, #428]	@ (80070b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f08:	fa22 f303 	lsr.w	r3, r2, r3
 8006f0c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	ee07 3a90 	vmov	s15, r3
 8006f14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	ee07 3a90 	vmov	s15, r3
 8006f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f26:	4b62      	ldr	r3, [pc, #392]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f2e:	ee07 3a90 	vmov	s15, r3
 8006f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f36:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f3a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80070c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f52:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006f56:	e087      	b.n	8007068 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	ee07 3a90 	vmov	s15, r3
 8006f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f62:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80070c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f6a:	4b51      	ldr	r3, [pc, #324]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f72:	ee07 3a90 	vmov	s15, r3
 8006f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f7e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80070c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f9a:	e065      	b.n	8007068 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	ee07 3a90 	vmov	s15, r3
 8006fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fa6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80070c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fae:	4b40      	ldr	r3, [pc, #256]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fb6:	ee07 3a90 	vmov	s15, r3
 8006fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fc2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80070c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006fde:	e043      	b.n	8007068 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	ee07 3a90 	vmov	s15, r3
 8006fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fea:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80070cc <HAL_RCC_GetSysClockFreq+0x2f0>
 8006fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ff2:	4b2f      	ldr	r3, [pc, #188]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ffa:	ee07 3a90 	vmov	s15, r3
 8006ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007002:	ed97 6a02 	vldr	s12, [r7, #8]
 8007006:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80070c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800700a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800700e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007012:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800701a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800701e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007022:	e021      	b.n	8007068 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	ee07 3a90 	vmov	s15, r3
 800702a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800702e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80070c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007036:	4b1e      	ldr	r3, [pc, #120]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800703a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800703e:	ee07 3a90 	vmov	s15, r3
 8007042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007046:	ed97 6a02 	vldr	s12, [r7, #8]
 800704a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80070c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800704e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007056:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800705a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800705e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007062:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007066:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007068:	4b11      	ldr	r3, [pc, #68]	@ (80070b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800706a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800706c:	0a5b      	lsrs	r3, r3, #9
 800706e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007072:	3301      	adds	r3, #1
 8007074:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	ee07 3a90 	vmov	s15, r3
 800707c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007080:	edd7 6a07 	vldr	s13, [r7, #28]
 8007084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800708c:	ee17 3a90 	vmov	r3, s15
 8007090:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007092:	e005      	b.n	80070a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007094:	2300      	movs	r3, #0
 8007096:	61bb      	str	r3, [r7, #24]
      break;
 8007098:	e002      	b.n	80070a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800709a:	4b07      	ldr	r3, [pc, #28]	@ (80070b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800709c:	61bb      	str	r3, [r7, #24]
      break;
 800709e:	bf00      	nop
  }

  return sysclockfreq;
 80070a0:	69bb      	ldr	r3, [r7, #24]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3724      	adds	r7, #36	@ 0x24
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	58024400 	.word	0x58024400
 80070b4:	03d09000 	.word	0x03d09000
 80070b8:	003d0900 	.word	0x003d0900
 80070bc:	017d7840 	.word	0x017d7840
 80070c0:	46000000 	.word	0x46000000
 80070c4:	4c742400 	.word	0x4c742400
 80070c8:	4a742400 	.word	0x4a742400
 80070cc:	4bbebc20 	.word	0x4bbebc20

080070d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80070d6:	f7ff fe81 	bl	8006ddc <HAL_RCC_GetSysClockFreq>
 80070da:	4602      	mov	r2, r0
 80070dc:	4b10      	ldr	r3, [pc, #64]	@ (8007120 <HAL_RCC_GetHCLKFreq+0x50>)
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	0a1b      	lsrs	r3, r3, #8
 80070e2:	f003 030f 	and.w	r3, r3, #15
 80070e6:	490f      	ldr	r1, [pc, #60]	@ (8007124 <HAL_RCC_GetHCLKFreq+0x54>)
 80070e8:	5ccb      	ldrb	r3, [r1, r3]
 80070ea:	f003 031f 	and.w	r3, r3, #31
 80070ee:	fa22 f303 	lsr.w	r3, r2, r3
 80070f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80070f4:	4b0a      	ldr	r3, [pc, #40]	@ (8007120 <HAL_RCC_GetHCLKFreq+0x50>)
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	f003 030f 	and.w	r3, r3, #15
 80070fc:	4a09      	ldr	r2, [pc, #36]	@ (8007124 <HAL_RCC_GetHCLKFreq+0x54>)
 80070fe:	5cd3      	ldrb	r3, [r2, r3]
 8007100:	f003 031f 	and.w	r3, r3, #31
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	fa22 f303 	lsr.w	r3, r2, r3
 800710a:	4a07      	ldr	r2, [pc, #28]	@ (8007128 <HAL_RCC_GetHCLKFreq+0x58>)
 800710c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800710e:	4a07      	ldr	r2, [pc, #28]	@ (800712c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007114:	4b04      	ldr	r3, [pc, #16]	@ (8007128 <HAL_RCC_GetHCLKFreq+0x58>)
 8007116:	681b      	ldr	r3, [r3, #0]
}
 8007118:	4618      	mov	r0, r3
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	58024400 	.word	0x58024400
 8007124:	0801e0b4 	.word	0x0801e0b4
 8007128:	2400038c 	.word	0x2400038c
 800712c:	24000388 	.word	0x24000388

08007130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007134:	f7ff ffcc 	bl	80070d0 <HAL_RCC_GetHCLKFreq>
 8007138:	4602      	mov	r2, r0
 800713a:	4b06      	ldr	r3, [pc, #24]	@ (8007154 <HAL_RCC_GetPCLK1Freq+0x24>)
 800713c:	69db      	ldr	r3, [r3, #28]
 800713e:	091b      	lsrs	r3, r3, #4
 8007140:	f003 0307 	and.w	r3, r3, #7
 8007144:	4904      	ldr	r1, [pc, #16]	@ (8007158 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007146:	5ccb      	ldrb	r3, [r1, r3]
 8007148:	f003 031f 	and.w	r3, r3, #31
 800714c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007150:	4618      	mov	r0, r3
 8007152:	bd80      	pop	{r7, pc}
 8007154:	58024400 	.word	0x58024400
 8007158:	0801e0b4 	.word	0x0801e0b4

0800715c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800715c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007160:	b0ca      	sub	sp, #296	@ 0x128
 8007162:	af00      	add	r7, sp, #0
 8007164:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007168:	2300      	movs	r3, #0
 800716a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800716e:	2300      	movs	r3, #0
 8007170:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007180:	2500      	movs	r5, #0
 8007182:	ea54 0305 	orrs.w	r3, r4, r5
 8007186:	d049      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800718c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800718e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007192:	d02f      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007194:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007198:	d828      	bhi.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 800719a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800719e:	d01a      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80071a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071a4:	d822      	bhi.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d003      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80071aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071ae:	d007      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80071b0:	e01c      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071b2:	4bb8      	ldr	r3, [pc, #736]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b6:	4ab7      	ldr	r2, [pc, #732]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80071be:	e01a      	b.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071c4:	3308      	adds	r3, #8
 80071c6:	2102      	movs	r1, #2
 80071c8:	4618      	mov	r0, r3
 80071ca:	f002 fb61 	bl	8009890 <RCCEx_PLL2_Config>
 80071ce:	4603      	mov	r3, r0
 80071d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80071d4:	e00f      	b.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80071d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071da:	3328      	adds	r3, #40	@ 0x28
 80071dc:	2102      	movs	r1, #2
 80071de:	4618      	mov	r0, r3
 80071e0:	f002 fc08 	bl	80099f4 <RCCEx_PLL3_Config>
 80071e4:	4603      	mov	r3, r0
 80071e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80071ea:	e004      	b.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071f2:	e000      	b.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80071f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d10a      	bne.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80071fe:	4ba5      	ldr	r3, [pc, #660]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007200:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007202:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800720a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800720c:	4aa1      	ldr	r2, [pc, #644]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800720e:	430b      	orrs	r3, r1
 8007210:	6513      	str	r3, [r2, #80]	@ 0x50
 8007212:	e003      	b.n	800721c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007214:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007218:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800721c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007224:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007228:	f04f 0900 	mov.w	r9, #0
 800722c:	ea58 0309 	orrs.w	r3, r8, r9
 8007230:	d047      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007238:	2b04      	cmp	r3, #4
 800723a:	d82a      	bhi.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800723c:	a201      	add	r2, pc, #4	@ (adr r2, 8007244 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800723e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007242:	bf00      	nop
 8007244:	08007259 	.word	0x08007259
 8007248:	08007267 	.word	0x08007267
 800724c:	0800727d 	.word	0x0800727d
 8007250:	0800729b 	.word	0x0800729b
 8007254:	0800729b 	.word	0x0800729b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007258:	4b8e      	ldr	r3, [pc, #568]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800725a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800725c:	4a8d      	ldr	r2, [pc, #564]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800725e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007262:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007264:	e01a      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800726a:	3308      	adds	r3, #8
 800726c:	2100      	movs	r1, #0
 800726e:	4618      	mov	r0, r3
 8007270:	f002 fb0e 	bl	8009890 <RCCEx_PLL2_Config>
 8007274:	4603      	mov	r3, r0
 8007276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800727a:	e00f      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800727c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007280:	3328      	adds	r3, #40	@ 0x28
 8007282:	2100      	movs	r1, #0
 8007284:	4618      	mov	r0, r3
 8007286:	f002 fbb5 	bl	80099f4 <RCCEx_PLL3_Config>
 800728a:	4603      	mov	r3, r0
 800728c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007290:	e004      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007298:	e000      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800729a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800729c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10a      	bne.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80072a4:	4b7b      	ldr	r3, [pc, #492]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072a8:	f023 0107 	bic.w	r1, r3, #7
 80072ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072b2:	4a78      	ldr	r2, [pc, #480]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072b4:	430b      	orrs	r3, r1
 80072b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80072b8:	e003      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80072c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ca:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80072ce:	f04f 0b00 	mov.w	fp, #0
 80072d2:	ea5a 030b 	orrs.w	r3, sl, fp
 80072d6:	d04c      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80072d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072e2:	d030      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80072e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072e8:	d829      	bhi.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80072ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80072ec:	d02d      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80072ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80072f0:	d825      	bhi.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80072f2:	2b80      	cmp	r3, #128	@ 0x80
 80072f4:	d018      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80072f6:	2b80      	cmp	r3, #128	@ 0x80
 80072f8:	d821      	bhi.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d002      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80072fe:	2b40      	cmp	r3, #64	@ 0x40
 8007300:	d007      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007302:	e01c      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007304:	4b63      	ldr	r3, [pc, #396]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007308:	4a62      	ldr	r2, [pc, #392]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800730a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800730e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007310:	e01c      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007316:	3308      	adds	r3, #8
 8007318:	2100      	movs	r1, #0
 800731a:	4618      	mov	r0, r3
 800731c:	f002 fab8 	bl	8009890 <RCCEx_PLL2_Config>
 8007320:	4603      	mov	r3, r0
 8007322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007326:	e011      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800732c:	3328      	adds	r3, #40	@ 0x28
 800732e:	2100      	movs	r1, #0
 8007330:	4618      	mov	r0, r3
 8007332:	f002 fb5f 	bl	80099f4 <RCCEx_PLL3_Config>
 8007336:	4603      	mov	r3, r0
 8007338:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800733c:	e006      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007344:	e002      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007346:	bf00      	nop
 8007348:	e000      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800734a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800734c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007350:	2b00      	cmp	r3, #0
 8007352:	d10a      	bne.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007354:	4b4f      	ldr	r3, [pc, #316]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007358:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800735c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007362:	4a4c      	ldr	r2, [pc, #304]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007364:	430b      	orrs	r3, r1
 8007366:	6513      	str	r3, [r2, #80]	@ 0x50
 8007368:	e003      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800736a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800736e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800737e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007382:	2300      	movs	r3, #0
 8007384:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007388:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800738c:	460b      	mov	r3, r1
 800738e:	4313      	orrs	r3, r2
 8007390:	d053      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007396:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800739a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800739e:	d035      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80073a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80073a4:	d82e      	bhi.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80073a6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80073aa:	d031      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80073ac:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80073b0:	d828      	bhi.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80073b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80073b6:	d01a      	beq.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x292>
 80073b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80073bc:	d822      	bhi.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d003      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80073c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80073c6:	d007      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80073c8:	e01c      	b.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073ca:	4b32      	ldr	r3, [pc, #200]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ce:	4a31      	ldr	r2, [pc, #196]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073d6:	e01c      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073dc:	3308      	adds	r3, #8
 80073de:	2100      	movs	r1, #0
 80073e0:	4618      	mov	r0, r3
 80073e2:	f002 fa55 	bl	8009890 <RCCEx_PLL2_Config>
 80073e6:	4603      	mov	r3, r0
 80073e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80073ec:	e011      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073f2:	3328      	adds	r3, #40	@ 0x28
 80073f4:	2100      	movs	r1, #0
 80073f6:	4618      	mov	r0, r3
 80073f8:	f002 fafc 	bl	80099f4 <RCCEx_PLL3_Config>
 80073fc:	4603      	mov	r3, r0
 80073fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007402:	e006      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800740a:	e002      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800740c:	bf00      	nop
 800740e:	e000      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10b      	bne.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800741a:	4b1e      	ldr	r3, [pc, #120]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800741c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800741e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007426:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800742a:	4a1a      	ldr	r2, [pc, #104]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800742c:	430b      	orrs	r3, r1
 800742e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007430:	e003      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007432:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007436:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800743a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800743e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007442:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007446:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800744a:	2300      	movs	r3, #0
 800744c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007450:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007454:	460b      	mov	r3, r1
 8007456:	4313      	orrs	r3, r2
 8007458:	d056      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800745a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800745e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007462:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007466:	d038      	beq.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007468:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800746c:	d831      	bhi.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800746e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007472:	d034      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007474:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007478:	d82b      	bhi.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800747a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800747e:	d01d      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007480:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007484:	d825      	bhi.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007486:	2b00      	cmp	r3, #0
 8007488:	d006      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800748a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800748e:	d00a      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007490:	e01f      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007492:	bf00      	nop
 8007494:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007498:	4ba2      	ldr	r3, [pc, #648]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800749a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800749c:	4aa1      	ldr	r2, [pc, #644]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800749e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074a4:	e01c      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074aa:	3308      	adds	r3, #8
 80074ac:	2100      	movs	r1, #0
 80074ae:	4618      	mov	r0, r3
 80074b0:	f002 f9ee 	bl	8009890 <RCCEx_PLL2_Config>
 80074b4:	4603      	mov	r3, r0
 80074b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80074ba:	e011      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80074bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074c0:	3328      	adds	r3, #40	@ 0x28
 80074c2:	2100      	movs	r1, #0
 80074c4:	4618      	mov	r0, r3
 80074c6:	f002 fa95 	bl	80099f4 <RCCEx_PLL3_Config>
 80074ca:	4603      	mov	r3, r0
 80074cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80074d0:	e006      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074d8:	e002      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80074da:	bf00      	nop
 80074dc:	e000      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80074de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10b      	bne.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80074e8:	4b8e      	ldr	r3, [pc, #568]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074ec:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80074f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80074f8:	4a8a      	ldr	r2, [pc, #552]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074fa:	430b      	orrs	r3, r1
 80074fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80074fe:	e003      	b.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007500:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007504:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800750c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007510:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007514:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007518:	2300      	movs	r3, #0
 800751a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800751e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007522:	460b      	mov	r3, r1
 8007524:	4313      	orrs	r3, r2
 8007526:	d03a      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800752c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800752e:	2b30      	cmp	r3, #48	@ 0x30
 8007530:	d01f      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007532:	2b30      	cmp	r3, #48	@ 0x30
 8007534:	d819      	bhi.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007536:	2b20      	cmp	r3, #32
 8007538:	d00c      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800753a:	2b20      	cmp	r3, #32
 800753c:	d815      	bhi.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800753e:	2b00      	cmp	r3, #0
 8007540:	d019      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007542:	2b10      	cmp	r3, #16
 8007544:	d111      	bne.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007546:	4b77      	ldr	r3, [pc, #476]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800754a:	4a76      	ldr	r2, [pc, #472]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800754c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007550:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007552:	e011      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007558:	3308      	adds	r3, #8
 800755a:	2102      	movs	r1, #2
 800755c:	4618      	mov	r0, r3
 800755e:	f002 f997 	bl	8009890 <RCCEx_PLL2_Config>
 8007562:	4603      	mov	r3, r0
 8007564:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007568:	e006      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007570:	e002      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007572:	bf00      	nop
 8007574:	e000      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007576:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007578:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800757c:	2b00      	cmp	r3, #0
 800757e:	d10a      	bne.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007580:	4b68      	ldr	r3, [pc, #416]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007584:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800758c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800758e:	4a65      	ldr	r2, [pc, #404]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007590:	430b      	orrs	r3, r1
 8007592:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007594:	e003      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007596:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800759a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800759e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80075aa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80075ae:	2300      	movs	r3, #0
 80075b0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80075b4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80075b8:	460b      	mov	r3, r1
 80075ba:	4313      	orrs	r3, r2
 80075bc:	d051      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80075be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80075c8:	d035      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80075ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80075ce:	d82e      	bhi.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80075d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80075d4:	d031      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80075d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80075da:	d828      	bhi.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80075dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075e0:	d01a      	beq.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80075e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075e6:	d822      	bhi.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d003      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80075ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075f0:	d007      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80075f2:	e01c      	b.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075f4:	4b4b      	ldr	r3, [pc, #300]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80075f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f8:	4a4a      	ldr	r2, [pc, #296]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80075fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007600:	e01c      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007606:	3308      	adds	r3, #8
 8007608:	2100      	movs	r1, #0
 800760a:	4618      	mov	r0, r3
 800760c:	f002 f940 	bl	8009890 <RCCEx_PLL2_Config>
 8007610:	4603      	mov	r3, r0
 8007612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007616:	e011      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800761c:	3328      	adds	r3, #40	@ 0x28
 800761e:	2100      	movs	r1, #0
 8007620:	4618      	mov	r0, r3
 8007622:	f002 f9e7 	bl	80099f4 <RCCEx_PLL3_Config>
 8007626:	4603      	mov	r3, r0
 8007628:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800762c:	e006      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007634:	e002      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007636:	bf00      	nop
 8007638:	e000      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800763a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800763c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10a      	bne.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007644:	4b37      	ldr	r3, [pc, #220]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007648:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800764c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007652:	4a34      	ldr	r2, [pc, #208]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007654:	430b      	orrs	r3, r1
 8007656:	6513      	str	r3, [r2, #80]	@ 0x50
 8007658:	e003      	b.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800765a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800765e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800766e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007672:	2300      	movs	r3, #0
 8007674:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007678:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800767c:	460b      	mov	r3, r1
 800767e:	4313      	orrs	r3, r2
 8007680:	d056      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007686:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007688:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800768c:	d033      	beq.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800768e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007692:	d82c      	bhi.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007694:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007698:	d02f      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800769a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800769e:	d826      	bhi.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 80076a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80076a4:	d02b      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80076a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80076aa:	d820      	bhi.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 80076ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076b0:	d012      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80076b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076b6:	d81a      	bhi.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d022      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80076bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076c0:	d115      	bne.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076c6:	3308      	adds	r3, #8
 80076c8:	2101      	movs	r1, #1
 80076ca:	4618      	mov	r0, r3
 80076cc:	f002 f8e0 	bl	8009890 <RCCEx_PLL2_Config>
 80076d0:	4603      	mov	r3, r0
 80076d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80076d6:	e015      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076dc:	3328      	adds	r3, #40	@ 0x28
 80076de:	2101      	movs	r1, #1
 80076e0:	4618      	mov	r0, r3
 80076e2:	f002 f987 	bl	80099f4 <RCCEx_PLL3_Config>
 80076e6:	4603      	mov	r3, r0
 80076e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80076ec:	e00a      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076f4:	e006      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80076f6:	bf00      	nop
 80076f8:	e004      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80076fa:	bf00      	nop
 80076fc:	e002      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80076fe:	bf00      	nop
 8007700:	e000      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007702:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007704:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10d      	bne.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800770c:	4b05      	ldr	r3, [pc, #20]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800770e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007710:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007718:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800771a:	4a02      	ldr	r2, [pc, #8]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800771c:	430b      	orrs	r3, r1
 800771e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007720:	e006      	b.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007722:	bf00      	nop
 8007724:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007728:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800772c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007738:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800773c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007740:	2300      	movs	r3, #0
 8007742:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007746:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800774a:	460b      	mov	r3, r1
 800774c:	4313      	orrs	r3, r2
 800774e:	d055      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007754:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007758:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800775c:	d033      	beq.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800775e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007762:	d82c      	bhi.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007768:	d02f      	beq.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800776a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800776e:	d826      	bhi.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007770:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007774:	d02b      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007776:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800777a:	d820      	bhi.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x662>
 800777c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007780:	d012      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007782:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007786:	d81a      	bhi.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007788:	2b00      	cmp	r3, #0
 800778a:	d022      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800778c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007790:	d115      	bne.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007796:	3308      	adds	r3, #8
 8007798:	2101      	movs	r1, #1
 800779a:	4618      	mov	r0, r3
 800779c:	f002 f878 	bl	8009890 <RCCEx_PLL2_Config>
 80077a0:	4603      	mov	r3, r0
 80077a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80077a6:	e015      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ac:	3328      	adds	r3, #40	@ 0x28
 80077ae:	2101      	movs	r1, #1
 80077b0:	4618      	mov	r0, r3
 80077b2:	f002 f91f 	bl	80099f4 <RCCEx_PLL3_Config>
 80077b6:	4603      	mov	r3, r0
 80077b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80077bc:	e00a      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077c4:	e006      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80077c6:	bf00      	nop
 80077c8:	e004      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80077ca:	bf00      	nop
 80077cc:	e002      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80077ce:	bf00      	nop
 80077d0:	e000      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80077d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10b      	bne.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80077dc:	4ba3      	ldr	r3, [pc, #652]	@ (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077e0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80077e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80077ec:	4a9f      	ldr	r2, [pc, #636]	@ (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077ee:	430b      	orrs	r3, r1
 80077f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80077f2:	e003      	b.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80077fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007804:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007808:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800780c:	2300      	movs	r3, #0
 800780e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007812:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007816:	460b      	mov	r3, r1
 8007818:	4313      	orrs	r3, r2
 800781a:	d037      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800781c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007822:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007826:	d00e      	beq.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007828:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800782c:	d816      	bhi.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800782e:	2b00      	cmp	r3, #0
 8007830:	d018      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007832:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007836:	d111      	bne.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007838:	4b8c      	ldr	r3, [pc, #560]	@ (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800783a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800783c:	4a8b      	ldr	r2, [pc, #556]	@ (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800783e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007842:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007844:	e00f      	b.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800784a:	3308      	adds	r3, #8
 800784c:	2101      	movs	r1, #1
 800784e:	4618      	mov	r0, r3
 8007850:	f002 f81e 	bl	8009890 <RCCEx_PLL2_Config>
 8007854:	4603      	mov	r3, r0
 8007856:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800785a:	e004      	b.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007862:	e000      	b.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007866:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10a      	bne.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800786e:	4b7f      	ldr	r3, [pc, #508]	@ (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007870:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007872:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800787a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800787c:	4a7b      	ldr	r2, [pc, #492]	@ (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800787e:	430b      	orrs	r3, r1
 8007880:	6513      	str	r3, [r2, #80]	@ 0x50
 8007882:	e003      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007884:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007888:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800788c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007894:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007898:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800789c:	2300      	movs	r3, #0
 800789e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80078a2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80078a6:	460b      	mov	r3, r1
 80078a8:	4313      	orrs	r3, r2
 80078aa:	d039      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80078ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078b2:	2b03      	cmp	r3, #3
 80078b4:	d81c      	bhi.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80078b6:	a201      	add	r2, pc, #4	@ (adr r2, 80078bc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80078b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078bc:	080078f9 	.word	0x080078f9
 80078c0:	080078cd 	.word	0x080078cd
 80078c4:	080078db 	.word	0x080078db
 80078c8:	080078f9 	.word	0x080078f9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078cc:	4b67      	ldr	r3, [pc, #412]	@ (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d0:	4a66      	ldr	r2, [pc, #408]	@ (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80078d8:	e00f      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80078da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078de:	3308      	adds	r3, #8
 80078e0:	2102      	movs	r1, #2
 80078e2:	4618      	mov	r0, r3
 80078e4:	f001 ffd4 	bl	8009890 <RCCEx_PLL2_Config>
 80078e8:	4603      	mov	r3, r0
 80078ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80078ee:	e004      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078f6:	e000      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80078f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d10a      	bne.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007902:	4b5a      	ldr	r3, [pc, #360]	@ (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007906:	f023 0103 	bic.w	r1, r3, #3
 800790a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800790e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007910:	4a56      	ldr	r2, [pc, #344]	@ (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007912:	430b      	orrs	r3, r1
 8007914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007916:	e003      	b.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007918:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800791c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007928:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800792c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007930:	2300      	movs	r3, #0
 8007932:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007936:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800793a:	460b      	mov	r3, r1
 800793c:	4313      	orrs	r3, r2
 800793e:	f000 809f 	beq.w	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007942:	4b4b      	ldr	r3, [pc, #300]	@ (8007a70 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a4a      	ldr	r2, [pc, #296]	@ (8007a70 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007948:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800794c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800794e:	f7fb f843 	bl	80029d8 <HAL_GetTick>
 8007952:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007956:	e00b      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007958:	f7fb f83e 	bl	80029d8 <HAL_GetTick>
 800795c:	4602      	mov	r2, r0
 800795e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007962:	1ad3      	subs	r3, r2, r3
 8007964:	2b64      	cmp	r3, #100	@ 0x64
 8007966:	d903      	bls.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007968:	2303      	movs	r3, #3
 800796a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800796e:	e005      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007970:	4b3f      	ldr	r3, [pc, #252]	@ (8007a70 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007978:	2b00      	cmp	r3, #0
 800797a:	d0ed      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800797c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007980:	2b00      	cmp	r3, #0
 8007982:	d179      	bne.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007984:	4b39      	ldr	r3, [pc, #228]	@ (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007986:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800798c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007990:	4053      	eors	r3, r2
 8007992:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007996:	2b00      	cmp	r3, #0
 8007998:	d015      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800799a:	4b34      	ldr	r3, [pc, #208]	@ (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800799c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800799e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079a2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80079a6:	4b31      	ldr	r3, [pc, #196]	@ (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079aa:	4a30      	ldr	r2, [pc, #192]	@ (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079b0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80079b2:	4b2e      	ldr	r3, [pc, #184]	@ (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079b6:	4a2d      	ldr	r2, [pc, #180]	@ (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079bc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80079be:	4a2b      	ldr	r2, [pc, #172]	@ (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80079c4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80079c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80079ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079d2:	d118      	bne.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079d4:	f7fb f800 	bl	80029d8 <HAL_GetTick>
 80079d8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079dc:	e00d      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079de:	f7fa fffb 	bl	80029d8 <HAL_GetTick>
 80079e2:	4602      	mov	r2, r0
 80079e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80079e8:	1ad2      	subs	r2, r2, r3
 80079ea:	f241 3388 	movw	r3, #5000	@ 0x1388
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d903      	bls.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80079f2:	2303      	movs	r3, #3
 80079f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80079f8:	e005      	b.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079fa:	4b1c      	ldr	r3, [pc, #112]	@ (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d0eb      	beq.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007a06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d129      	bne.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a1e:	d10e      	bne.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007a20:	4b12      	ldr	r3, [pc, #72]	@ (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a30:	091a      	lsrs	r2, r3, #4
 8007a32:	4b10      	ldr	r3, [pc, #64]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007a34:	4013      	ands	r3, r2
 8007a36:	4a0d      	ldr	r2, [pc, #52]	@ (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a38:	430b      	orrs	r3, r1
 8007a3a:	6113      	str	r3, [r2, #16]
 8007a3c:	e005      	b.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	4a0a      	ldr	r2, [pc, #40]	@ (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a44:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007a48:	6113      	str	r3, [r2, #16]
 8007a4a:	4b08      	ldr	r3, [pc, #32]	@ (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a4c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a5a:	4a04      	ldr	r2, [pc, #16]	@ (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a5c:	430b      	orrs	r3, r1
 8007a5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a60:	e00e      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007a6a:	e009      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007a6c:	58024400 	.word	0x58024400
 8007a70:	58024800 	.word	0x58024800
 8007a74:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a88:	f002 0301 	and.w	r3, r2, #1
 8007a8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a90:	2300      	movs	r3, #0
 8007a92:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007a96:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	f000 8089 	beq.w	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aa6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007aa8:	2b28      	cmp	r3, #40	@ 0x28
 8007aaa:	d86b      	bhi.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007aac:	a201      	add	r2, pc, #4	@ (adr r2, 8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab2:	bf00      	nop
 8007ab4:	08007b8d 	.word	0x08007b8d
 8007ab8:	08007b85 	.word	0x08007b85
 8007abc:	08007b85 	.word	0x08007b85
 8007ac0:	08007b85 	.word	0x08007b85
 8007ac4:	08007b85 	.word	0x08007b85
 8007ac8:	08007b85 	.word	0x08007b85
 8007acc:	08007b85 	.word	0x08007b85
 8007ad0:	08007b85 	.word	0x08007b85
 8007ad4:	08007b59 	.word	0x08007b59
 8007ad8:	08007b85 	.word	0x08007b85
 8007adc:	08007b85 	.word	0x08007b85
 8007ae0:	08007b85 	.word	0x08007b85
 8007ae4:	08007b85 	.word	0x08007b85
 8007ae8:	08007b85 	.word	0x08007b85
 8007aec:	08007b85 	.word	0x08007b85
 8007af0:	08007b85 	.word	0x08007b85
 8007af4:	08007b6f 	.word	0x08007b6f
 8007af8:	08007b85 	.word	0x08007b85
 8007afc:	08007b85 	.word	0x08007b85
 8007b00:	08007b85 	.word	0x08007b85
 8007b04:	08007b85 	.word	0x08007b85
 8007b08:	08007b85 	.word	0x08007b85
 8007b0c:	08007b85 	.word	0x08007b85
 8007b10:	08007b85 	.word	0x08007b85
 8007b14:	08007b8d 	.word	0x08007b8d
 8007b18:	08007b85 	.word	0x08007b85
 8007b1c:	08007b85 	.word	0x08007b85
 8007b20:	08007b85 	.word	0x08007b85
 8007b24:	08007b85 	.word	0x08007b85
 8007b28:	08007b85 	.word	0x08007b85
 8007b2c:	08007b85 	.word	0x08007b85
 8007b30:	08007b85 	.word	0x08007b85
 8007b34:	08007b8d 	.word	0x08007b8d
 8007b38:	08007b85 	.word	0x08007b85
 8007b3c:	08007b85 	.word	0x08007b85
 8007b40:	08007b85 	.word	0x08007b85
 8007b44:	08007b85 	.word	0x08007b85
 8007b48:	08007b85 	.word	0x08007b85
 8007b4c:	08007b85 	.word	0x08007b85
 8007b50:	08007b85 	.word	0x08007b85
 8007b54:	08007b8d 	.word	0x08007b8d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b5c:	3308      	adds	r3, #8
 8007b5e:	2101      	movs	r1, #1
 8007b60:	4618      	mov	r0, r3
 8007b62:	f001 fe95 	bl	8009890 <RCCEx_PLL2_Config>
 8007b66:	4603      	mov	r3, r0
 8007b68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007b6c:	e00f      	b.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b72:	3328      	adds	r3, #40	@ 0x28
 8007b74:	2101      	movs	r1, #1
 8007b76:	4618      	mov	r0, r3
 8007b78:	f001 ff3c 	bl	80099f4 <RCCEx_PLL3_Config>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007b82:	e004      	b.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b8a:	e000      	b.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007b8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10a      	bne.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007b96:	4bbf      	ldr	r3, [pc, #764]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b9a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ba4:	4abb      	ldr	r2, [pc, #748]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ba6:	430b      	orrs	r3, r1
 8007ba8:	6553      	str	r3, [r2, #84]	@ 0x54
 8007baa:	e003      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bbc:	f002 0302 	and.w	r3, r2, #2
 8007bc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007bca:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007bce:	460b      	mov	r3, r1
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	d041      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007bda:	2b05      	cmp	r3, #5
 8007bdc:	d824      	bhi.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007bde:	a201      	add	r2, pc, #4	@ (adr r2, 8007be4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be4:	08007c31 	.word	0x08007c31
 8007be8:	08007bfd 	.word	0x08007bfd
 8007bec:	08007c13 	.word	0x08007c13
 8007bf0:	08007c31 	.word	0x08007c31
 8007bf4:	08007c31 	.word	0x08007c31
 8007bf8:	08007c31 	.word	0x08007c31
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c00:	3308      	adds	r3, #8
 8007c02:	2101      	movs	r1, #1
 8007c04:	4618      	mov	r0, r3
 8007c06:	f001 fe43 	bl	8009890 <RCCEx_PLL2_Config>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007c10:	e00f      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c16:	3328      	adds	r3, #40	@ 0x28
 8007c18:	2101      	movs	r1, #1
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f001 feea 	bl	80099f4 <RCCEx_PLL3_Config>
 8007c20:	4603      	mov	r3, r0
 8007c22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007c26:	e004      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c2e:	e000      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007c30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10a      	bne.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007c3a:	4b96      	ldr	r3, [pc, #600]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c3e:	f023 0107 	bic.w	r1, r3, #7
 8007c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c48:	4a92      	ldr	r2, [pc, #584]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c4a:	430b      	orrs	r3, r1
 8007c4c:	6553      	str	r3, [r2, #84]	@ 0x54
 8007c4e:	e003      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c60:	f002 0304 	and.w	r3, r2, #4
 8007c64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c68:	2300      	movs	r3, #0
 8007c6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c6e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007c72:	460b      	mov	r3, r1
 8007c74:	4313      	orrs	r3, r2
 8007c76:	d044      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c80:	2b05      	cmp	r3, #5
 8007c82:	d825      	bhi.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007c84:	a201      	add	r2, pc, #4	@ (adr r2, 8007c8c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c8a:	bf00      	nop
 8007c8c:	08007cd9 	.word	0x08007cd9
 8007c90:	08007ca5 	.word	0x08007ca5
 8007c94:	08007cbb 	.word	0x08007cbb
 8007c98:	08007cd9 	.word	0x08007cd9
 8007c9c:	08007cd9 	.word	0x08007cd9
 8007ca0:	08007cd9 	.word	0x08007cd9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ca8:	3308      	adds	r3, #8
 8007caa:	2101      	movs	r1, #1
 8007cac:	4618      	mov	r0, r3
 8007cae:	f001 fdef 	bl	8009890 <RCCEx_PLL2_Config>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007cb8:	e00f      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cbe:	3328      	adds	r3, #40	@ 0x28
 8007cc0:	2101      	movs	r1, #1
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f001 fe96 	bl	80099f4 <RCCEx_PLL3_Config>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007cce:	e004      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007cd6:	e000      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10b      	bne.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007ce2:	4b6c      	ldr	r3, [pc, #432]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ce6:	f023 0107 	bic.w	r1, r3, #7
 8007cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cf2:	4a68      	ldr	r2, [pc, #416]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007cf4:	430b      	orrs	r3, r1
 8007cf6:	6593      	str	r3, [r2, #88]	@ 0x58
 8007cf8:	e003      	b.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0a:	f002 0320 	and.w	r3, r2, #32
 8007d0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007d12:	2300      	movs	r3, #0
 8007d14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	d055      	beq.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d2e:	d033      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007d30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d34:	d82c      	bhi.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007d36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d3a:	d02f      	beq.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d40:	d826      	bhi.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007d42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d46:	d02b      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007d48:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d4c:	d820      	bhi.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007d4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d52:	d012      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007d54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d58:	d81a      	bhi.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d022      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007d5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d62:	d115      	bne.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d68:	3308      	adds	r3, #8
 8007d6a:	2100      	movs	r1, #0
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f001 fd8f 	bl	8009890 <RCCEx_PLL2_Config>
 8007d72:	4603      	mov	r3, r0
 8007d74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007d78:	e015      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d7e:	3328      	adds	r3, #40	@ 0x28
 8007d80:	2102      	movs	r1, #2
 8007d82:	4618      	mov	r0, r3
 8007d84:	f001 fe36 	bl	80099f4 <RCCEx_PLL3_Config>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007d8e:	e00a      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d96:	e006      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007d98:	bf00      	nop
 8007d9a:	e004      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007d9c:	bf00      	nop
 8007d9e:	e002      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007da0:	bf00      	nop
 8007da2:	e000      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007da4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007da6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d10b      	bne.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007dae:	4b39      	ldr	r3, [pc, #228]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007db2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dbe:	4a35      	ldr	r2, [pc, #212]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007dc0:	430b      	orrs	r3, r1
 8007dc2:	6553      	str	r3, [r2, #84]	@ 0x54
 8007dc4:	e003      	b.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007dda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007dde:	2300      	movs	r3, #0
 8007de0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007de4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007de8:	460b      	mov	r3, r1
 8007dea:	4313      	orrs	r3, r2
 8007dec:	d058      	beq.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007df2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007df6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007dfa:	d033      	beq.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007dfc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007e00:	d82c      	bhi.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007e02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e06:	d02f      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007e08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e0c:	d826      	bhi.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007e0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007e12:	d02b      	beq.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007e14:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007e18:	d820      	bhi.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007e1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e1e:	d012      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007e20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e24:	d81a      	bhi.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d022      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007e2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e2e:	d115      	bne.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e34:	3308      	adds	r3, #8
 8007e36:	2100      	movs	r1, #0
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f001 fd29 	bl	8009890 <RCCEx_PLL2_Config>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007e44:	e015      	b.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e4a:	3328      	adds	r3, #40	@ 0x28
 8007e4c:	2102      	movs	r1, #2
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f001 fdd0 	bl	80099f4 <RCCEx_PLL3_Config>
 8007e54:	4603      	mov	r3, r0
 8007e56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007e5a:	e00a      	b.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e62:	e006      	b.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007e64:	bf00      	nop
 8007e66:	e004      	b.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007e68:	bf00      	nop
 8007e6a:	e002      	b.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007e6c:	bf00      	nop
 8007e6e:	e000      	b.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d10e      	bne.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e7a:	4b06      	ldr	r3, [pc, #24]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e7e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e8a:	4a02      	ldr	r2, [pc, #8]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e8c:	430b      	orrs	r3, r1
 8007e8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e90:	e006      	b.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007e92:	bf00      	nop
 8007e94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007eac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007eb6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007eba:	460b      	mov	r3, r1
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	d055      	beq.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ec4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007ec8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007ecc:	d033      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007ece:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007ed2:	d82c      	bhi.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007ed4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ed8:	d02f      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007eda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ede:	d826      	bhi.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007ee0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007ee4:	d02b      	beq.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007ee6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007eea:	d820      	bhi.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007eec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ef0:	d012      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007ef2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ef6:	d81a      	bhi.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d022      	beq.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007efc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f00:	d115      	bne.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f06:	3308      	adds	r3, #8
 8007f08:	2100      	movs	r1, #0
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f001 fcc0 	bl	8009890 <RCCEx_PLL2_Config>
 8007f10:	4603      	mov	r3, r0
 8007f12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007f16:	e015      	b.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f1c:	3328      	adds	r3, #40	@ 0x28
 8007f1e:	2102      	movs	r1, #2
 8007f20:	4618      	mov	r0, r3
 8007f22:	f001 fd67 	bl	80099f4 <RCCEx_PLL3_Config>
 8007f26:	4603      	mov	r3, r0
 8007f28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007f2c:	e00a      	b.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f34:	e006      	b.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007f36:	bf00      	nop
 8007f38:	e004      	b.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007f3a:	bf00      	nop
 8007f3c:	e002      	b.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007f3e:	bf00      	nop
 8007f40:	e000      	b.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007f42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d10b      	bne.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007f4c:	4ba1      	ldr	r3, [pc, #644]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f50:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007f5c:	4a9d      	ldr	r2, [pc, #628]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f5e:	430b      	orrs	r3, r1
 8007f60:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f62:	e003      	b.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f74:	f002 0308 	and.w	r3, r2, #8
 8007f78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007f82:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007f86:	460b      	mov	r3, r1
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	d01e      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f98:	d10c      	bne.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f9e:	3328      	adds	r3, #40	@ 0x28
 8007fa0:	2102      	movs	r1, #2
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f001 fd26 	bl	80099f4 <RCCEx_PLL3_Config>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d002      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007fb4:	4b87      	ldr	r3, [pc, #540]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fb8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fc4:	4a83      	ldr	r2, [pc, #524]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fc6:	430b      	orrs	r3, r1
 8007fc8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd2:	f002 0310 	and.w	r3, r2, #16
 8007fd6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007fda:	2300      	movs	r3, #0
 8007fdc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007fe0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	d01e      	beq.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ff2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ff6:	d10c      	bne.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ffc:	3328      	adds	r3, #40	@ 0x28
 8007ffe:	2102      	movs	r1, #2
 8008000:	4618      	mov	r0, r3
 8008002:	f001 fcf7 	bl	80099f4 <RCCEx_PLL3_Config>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d002      	beq.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008012:	4b70      	ldr	r3, [pc, #448]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008016:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800801a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800801e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008022:	4a6c      	ldr	r2, [pc, #432]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008024:	430b      	orrs	r3, r1
 8008026:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800802c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008030:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008034:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008038:	2300      	movs	r3, #0
 800803a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800803e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008042:	460b      	mov	r3, r1
 8008044:	4313      	orrs	r3, r2
 8008046:	d03e      	beq.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800804c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008050:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008054:	d022      	beq.n	800809c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008056:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800805a:	d81b      	bhi.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800805c:	2b00      	cmp	r3, #0
 800805e:	d003      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008060:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008064:	d00b      	beq.n	800807e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008066:	e015      	b.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800806c:	3308      	adds	r3, #8
 800806e:	2100      	movs	r1, #0
 8008070:	4618      	mov	r0, r3
 8008072:	f001 fc0d 	bl	8009890 <RCCEx_PLL2_Config>
 8008076:	4603      	mov	r3, r0
 8008078:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800807c:	e00f      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800807e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008082:	3328      	adds	r3, #40	@ 0x28
 8008084:	2102      	movs	r1, #2
 8008086:	4618      	mov	r0, r3
 8008088:	f001 fcb4 	bl	80099f4 <RCCEx_PLL3_Config>
 800808c:	4603      	mov	r3, r0
 800808e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008092:	e004      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800809a:	e000      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800809c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800809e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d10b      	bne.n	80080be <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80080a6:	4b4b      	ldr	r3, [pc, #300]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080aa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80080ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80080b6:	4a47      	ldr	r2, [pc, #284]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080b8:	430b      	orrs	r3, r1
 80080ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80080bc:	e003      	b.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80080c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ce:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80080d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80080d4:	2300      	movs	r3, #0
 80080d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80080d8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80080dc:	460b      	mov	r3, r1
 80080de:	4313      	orrs	r3, r2
 80080e0:	d03b      	beq.n	800815a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80080e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80080ee:	d01f      	beq.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80080f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80080f4:	d818      	bhi.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80080f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080fa:	d003      	beq.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80080fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008100:	d007      	beq.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008102:	e011      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008104:	4b33      	ldr	r3, [pc, #204]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008108:	4a32      	ldr	r2, [pc, #200]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800810a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800810e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008110:	e00f      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008116:	3328      	adds	r3, #40	@ 0x28
 8008118:	2101      	movs	r1, #1
 800811a:	4618      	mov	r0, r3
 800811c:	f001 fc6a 	bl	80099f4 <RCCEx_PLL3_Config>
 8008120:	4603      	mov	r3, r0
 8008122:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008126:	e004      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800812e:	e000      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008130:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008132:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10b      	bne.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800813a:	4b26      	ldr	r3, [pc, #152]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800813c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800813e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800814a:	4a22      	ldr	r2, [pc, #136]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800814c:	430b      	orrs	r3, r1
 800814e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008150:	e003      	b.n	800815a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008152:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008156:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800815a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800815e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008162:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008166:	673b      	str	r3, [r7, #112]	@ 0x70
 8008168:	2300      	movs	r3, #0
 800816a:	677b      	str	r3, [r7, #116]	@ 0x74
 800816c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008170:	460b      	mov	r3, r1
 8008172:	4313      	orrs	r3, r2
 8008174:	d034      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800817a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800817c:	2b00      	cmp	r3, #0
 800817e:	d003      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008180:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008184:	d007      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008186:	e011      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008188:	4b12      	ldr	r3, [pc, #72]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800818a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800818c:	4a11      	ldr	r2, [pc, #68]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800818e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008192:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008194:	e00e      	b.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800819a:	3308      	adds	r3, #8
 800819c:	2102      	movs	r1, #2
 800819e:	4618      	mov	r0, r3
 80081a0:	f001 fb76 	bl	8009890 <RCCEx_PLL2_Config>
 80081a4:	4603      	mov	r3, r0
 80081a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80081aa:	e003      	b.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80081b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d10d      	bne.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80081bc:	4b05      	ldr	r3, [pc, #20]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081c0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80081c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081ca:	4a02      	ldr	r2, [pc, #8]	@ (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081cc:	430b      	orrs	r3, r1
 80081ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80081d0:	e006      	b.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80081d2:	bf00      	nop
 80081d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80081e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80081ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80081ee:	2300      	movs	r3, #0
 80081f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80081f2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80081f6:	460b      	mov	r3, r1
 80081f8:	4313      	orrs	r3, r2
 80081fa:	d00c      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80081fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008200:	3328      	adds	r3, #40	@ 0x28
 8008202:	2102      	movs	r1, #2
 8008204:	4618      	mov	r0, r3
 8008206:	f001 fbf5 	bl	80099f4 <RCCEx_PLL3_Config>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d002      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800821a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008222:	663b      	str	r3, [r7, #96]	@ 0x60
 8008224:	2300      	movs	r3, #0
 8008226:	667b      	str	r3, [r7, #100]	@ 0x64
 8008228:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800822c:	460b      	mov	r3, r1
 800822e:	4313      	orrs	r3, r2
 8008230:	d038      	beq.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008236:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800823a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800823e:	d018      	beq.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008240:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008244:	d811      	bhi.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008246:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800824a:	d014      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800824c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008250:	d80b      	bhi.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008252:	2b00      	cmp	r3, #0
 8008254:	d011      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008256:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800825a:	d106      	bne.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800825c:	4bc3      	ldr	r3, [pc, #780]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800825e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008260:	4ac2      	ldr	r2, [pc, #776]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008262:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008266:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008268:	e008      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008270:	e004      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008272:	bf00      	nop
 8008274:	e002      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008276:	bf00      	nop
 8008278:	e000      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800827a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800827c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008280:	2b00      	cmp	r3, #0
 8008282:	d10b      	bne.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008284:	4bb9      	ldr	r3, [pc, #740]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008288:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800828c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008290:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008294:	4ab5      	ldr	r2, [pc, #724]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008296:	430b      	orrs	r3, r1
 8008298:	6553      	str	r3, [r2, #84]	@ 0x54
 800829a:	e003      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800829c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80082a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ac:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80082b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80082b2:	2300      	movs	r3, #0
 80082b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80082b6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80082ba:	460b      	mov	r3, r1
 80082bc:	4313      	orrs	r3, r2
 80082be:	d009      	beq.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80082c0:	4baa      	ldr	r3, [pc, #680]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082c4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80082c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082ce:	4aa7      	ldr	r2, [pc, #668]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082d0:	430b      	orrs	r3, r1
 80082d2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80082d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082dc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80082e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80082e2:	2300      	movs	r3, #0
 80082e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80082e6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80082ea:	460b      	mov	r3, r1
 80082ec:	4313      	orrs	r3, r2
 80082ee:	d00a      	beq.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80082f0:	4b9e      	ldr	r3, [pc, #632]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80082f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008300:	4a9a      	ldr	r2, [pc, #616]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008302:	430b      	orrs	r3, r1
 8008304:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800830a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008312:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008314:	2300      	movs	r3, #0
 8008316:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008318:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800831c:	460b      	mov	r3, r1
 800831e:	4313      	orrs	r3, r2
 8008320:	d009      	beq.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008322:	4b92      	ldr	r3, [pc, #584]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008324:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008326:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800832a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800832e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008330:	4a8e      	ldr	r2, [pc, #568]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008332:	430b      	orrs	r3, r1
 8008334:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800833a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008342:	643b      	str	r3, [r7, #64]	@ 0x40
 8008344:	2300      	movs	r3, #0
 8008346:	647b      	str	r3, [r7, #68]	@ 0x44
 8008348:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800834c:	460b      	mov	r3, r1
 800834e:	4313      	orrs	r3, r2
 8008350:	d00e      	beq.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008352:	4b86      	ldr	r3, [pc, #536]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	4a85      	ldr	r2, [pc, #532]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008358:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800835c:	6113      	str	r3, [r2, #16]
 800835e:	4b83      	ldr	r3, [pc, #524]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008360:	6919      	ldr	r1, [r3, #16]
 8008362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008366:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800836a:	4a80      	ldr	r2, [pc, #512]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800836c:	430b      	orrs	r3, r1
 800836e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008378:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800837c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800837e:	2300      	movs	r3, #0
 8008380:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008382:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008386:	460b      	mov	r3, r1
 8008388:	4313      	orrs	r3, r2
 800838a:	d009      	beq.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800838c:	4b77      	ldr	r3, [pc, #476]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800838e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008390:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800839a:	4a74      	ldr	r2, [pc, #464]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800839c:	430b      	orrs	r3, r1
 800839e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80083a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80083ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80083ae:	2300      	movs	r3, #0
 80083b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80083b2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80083b6:	460b      	mov	r3, r1
 80083b8:	4313      	orrs	r3, r2
 80083ba:	d00a      	beq.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80083bc:	4b6b      	ldr	r3, [pc, #428]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083c0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80083c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083cc:	4a67      	ldr	r2, [pc, #412]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083ce:	430b      	orrs	r3, r1
 80083d0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80083d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083da:	2100      	movs	r1, #0
 80083dc:	62b9      	str	r1, [r7, #40]	@ 0x28
 80083de:	f003 0301 	and.w	r3, r3, #1
 80083e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083e4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80083e8:	460b      	mov	r3, r1
 80083ea:	4313      	orrs	r3, r2
 80083ec:	d011      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083f2:	3308      	adds	r3, #8
 80083f4:	2100      	movs	r1, #0
 80083f6:	4618      	mov	r0, r3
 80083f8:	f001 fa4a 	bl	8009890 <RCCEx_PLL2_Config>
 80083fc:	4603      	mov	r3, r0
 80083fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008402:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008406:	2b00      	cmp	r3, #0
 8008408:	d003      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800840a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800840e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841a:	2100      	movs	r1, #0
 800841c:	6239      	str	r1, [r7, #32]
 800841e:	f003 0302 	and.w	r3, r3, #2
 8008422:	627b      	str	r3, [r7, #36]	@ 0x24
 8008424:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008428:	460b      	mov	r3, r1
 800842a:	4313      	orrs	r3, r2
 800842c:	d011      	beq.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800842e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008432:	3308      	adds	r3, #8
 8008434:	2101      	movs	r1, #1
 8008436:	4618      	mov	r0, r3
 8008438:	f001 fa2a 	bl	8009890 <RCCEx_PLL2_Config>
 800843c:	4603      	mov	r3, r0
 800843e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008442:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008446:	2b00      	cmp	r3, #0
 8008448:	d003      	beq.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800844a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800844e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845a:	2100      	movs	r1, #0
 800845c:	61b9      	str	r1, [r7, #24]
 800845e:	f003 0304 	and.w	r3, r3, #4
 8008462:	61fb      	str	r3, [r7, #28]
 8008464:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008468:	460b      	mov	r3, r1
 800846a:	4313      	orrs	r3, r2
 800846c:	d011      	beq.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800846e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008472:	3308      	adds	r3, #8
 8008474:	2102      	movs	r1, #2
 8008476:	4618      	mov	r0, r3
 8008478:	f001 fa0a 	bl	8009890 <RCCEx_PLL2_Config>
 800847c:	4603      	mov	r3, r0
 800847e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008482:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008486:	2b00      	cmp	r3, #0
 8008488:	d003      	beq.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800848a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800848e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849a:	2100      	movs	r1, #0
 800849c:	6139      	str	r1, [r7, #16]
 800849e:	f003 0308 	and.w	r3, r3, #8
 80084a2:	617b      	str	r3, [r7, #20]
 80084a4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80084a8:	460b      	mov	r3, r1
 80084aa:	4313      	orrs	r3, r2
 80084ac:	d011      	beq.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80084ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084b2:	3328      	adds	r3, #40	@ 0x28
 80084b4:	2100      	movs	r1, #0
 80084b6:	4618      	mov	r0, r3
 80084b8:	f001 fa9c 	bl	80099f4 <RCCEx_PLL3_Config>
 80084bc:	4603      	mov	r3, r0
 80084be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80084c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d003      	beq.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80084d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084da:	2100      	movs	r1, #0
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	f003 0310 	and.w	r3, r3, #16
 80084e2:	60fb      	str	r3, [r7, #12]
 80084e4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80084e8:	460b      	mov	r3, r1
 80084ea:	4313      	orrs	r3, r2
 80084ec:	d011      	beq.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084f2:	3328      	adds	r3, #40	@ 0x28
 80084f4:	2101      	movs	r1, #1
 80084f6:	4618      	mov	r0, r3
 80084f8:	f001 fa7c 	bl	80099f4 <RCCEx_PLL3_Config>
 80084fc:	4603      	mov	r3, r0
 80084fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008502:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008506:	2b00      	cmp	r3, #0
 8008508:	d003      	beq.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800850a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800850e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851a:	2100      	movs	r1, #0
 800851c:	6039      	str	r1, [r7, #0]
 800851e:	f003 0320 	and.w	r3, r3, #32
 8008522:	607b      	str	r3, [r7, #4]
 8008524:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008528:	460b      	mov	r3, r1
 800852a:	4313      	orrs	r3, r2
 800852c:	d011      	beq.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800852e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008532:	3328      	adds	r3, #40	@ 0x28
 8008534:	2102      	movs	r1, #2
 8008536:	4618      	mov	r0, r3
 8008538:	f001 fa5c 	bl	80099f4 <RCCEx_PLL3_Config>
 800853c:	4603      	mov	r3, r0
 800853e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008542:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008546:	2b00      	cmp	r3, #0
 8008548:	d003      	beq.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800854a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800854e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008552:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008556:	2b00      	cmp	r3, #0
 8008558:	d101      	bne.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800855a:	2300      	movs	r3, #0
 800855c:	e000      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800855e:	2301      	movs	r3, #1
}
 8008560:	4618      	mov	r0, r3
 8008562:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008566:	46bd      	mov	sp, r7
 8008568:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800856c:	58024400 	.word	0x58024400

08008570 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b090      	sub	sp, #64	@ 0x40
 8008574:	af00      	add	r7, sp, #0
 8008576:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800857a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800857e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008582:	430b      	orrs	r3, r1
 8008584:	f040 8094 	bne.w	80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008588:	4b9e      	ldr	r3, [pc, #632]	@ (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800858a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800858c:	f003 0307 	and.w	r3, r3, #7
 8008590:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008594:	2b04      	cmp	r3, #4
 8008596:	f200 8087 	bhi.w	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800859a:	a201      	add	r2, pc, #4	@ (adr r2, 80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800859c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a0:	080085b5 	.word	0x080085b5
 80085a4:	080085dd 	.word	0x080085dd
 80085a8:	08008605 	.word	0x08008605
 80085ac:	080086a1 	.word	0x080086a1
 80085b0:	0800862d 	.word	0x0800862d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80085b4:	4b93      	ldr	r3, [pc, #588]	@ (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80085c0:	d108      	bne.n	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80085c6:	4618      	mov	r0, r3
 80085c8:	f001 f810 	bl	80095ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80085cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085d0:	f000 bd45 	b.w	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085d4:	2300      	movs	r3, #0
 80085d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085d8:	f000 bd41 	b.w	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085dc:	4b89      	ldr	r3, [pc, #548]	@ (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085e8:	d108      	bne.n	80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085ea:	f107 0318 	add.w	r3, r7, #24
 80085ee:	4618      	mov	r0, r3
 80085f0:	f000 fd54 	bl	800909c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085f8:	f000 bd31 	b.w	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085fc:	2300      	movs	r3, #0
 80085fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008600:	f000 bd2d 	b.w	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008604:	4b7f      	ldr	r3, [pc, #508]	@ (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800860c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008610:	d108      	bne.n	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008612:	f107 030c 	add.w	r3, r7, #12
 8008616:	4618      	mov	r0, r3
 8008618:	f000 fe94 	bl	8009344 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008620:	f000 bd1d 	b.w	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008624:	2300      	movs	r3, #0
 8008626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008628:	f000 bd19 	b.w	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800862c:	4b75      	ldr	r3, [pc, #468]	@ (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800862e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008630:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008634:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008636:	4b73      	ldr	r3, [pc, #460]	@ (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f003 0304 	and.w	r3, r3, #4
 800863e:	2b04      	cmp	r3, #4
 8008640:	d10c      	bne.n	800865c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008644:	2b00      	cmp	r3, #0
 8008646:	d109      	bne.n	800865c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008648:	4b6e      	ldr	r3, [pc, #440]	@ (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	08db      	lsrs	r3, r3, #3
 800864e:	f003 0303 	and.w	r3, r3, #3
 8008652:	4a6d      	ldr	r2, [pc, #436]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008654:	fa22 f303 	lsr.w	r3, r2, r3
 8008658:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800865a:	e01f      	b.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800865c:	4b69      	ldr	r3, [pc, #420]	@ (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008664:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008668:	d106      	bne.n	8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800866a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800866c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008670:	d102      	bne.n	8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008672:	4b66      	ldr	r3, [pc, #408]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008674:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008676:	e011      	b.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008678:	4b62      	ldr	r3, [pc, #392]	@ (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008680:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008684:	d106      	bne.n	8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008688:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800868c:	d102      	bne.n	8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800868e:	4b60      	ldr	r3, [pc, #384]	@ (8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008690:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008692:	e003      	b.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008694:	2300      	movs	r3, #0
 8008696:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008698:	f000 bce1 	b.w	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800869c:	f000 bcdf 	b.w	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80086a0:	4b5c      	ldr	r3, [pc, #368]	@ (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80086a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086a4:	f000 bcdb 	b.w	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80086a8:	2300      	movs	r3, #0
 80086aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086ac:	f000 bcd7 	b.w	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80086b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086b4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80086b8:	430b      	orrs	r3, r1
 80086ba:	f040 80ad 	bne.w	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80086be:	4b51      	ldr	r3, [pc, #324]	@ (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086c2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80086c6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80086c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086ce:	d056      	beq.n	800877e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80086d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086d6:	f200 8090 	bhi.w	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80086da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086dc:	2bc0      	cmp	r3, #192	@ 0xc0
 80086de:	f000 8088 	beq.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80086e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e4:	2bc0      	cmp	r3, #192	@ 0xc0
 80086e6:	f200 8088 	bhi.w	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80086ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ec:	2b80      	cmp	r3, #128	@ 0x80
 80086ee:	d032      	beq.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80086f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f2:	2b80      	cmp	r3, #128	@ 0x80
 80086f4:	f200 8081 	bhi.w	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80086f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d003      	beq.n	8008706 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80086fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008700:	2b40      	cmp	r3, #64	@ 0x40
 8008702:	d014      	beq.n	800872e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008704:	e079      	b.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008706:	4b3f      	ldr	r3, [pc, #252]	@ (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800870e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008712:	d108      	bne.n	8008726 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008714:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008718:	4618      	mov	r0, r3
 800871a:	f000 ff67 	bl	80095ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800871e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008722:	f000 bc9c 	b.w	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008726:	2300      	movs	r3, #0
 8008728:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800872a:	f000 bc98 	b.w	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800872e:	4b35      	ldr	r3, [pc, #212]	@ (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008736:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800873a:	d108      	bne.n	800874e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800873c:	f107 0318 	add.w	r3, r7, #24
 8008740:	4618      	mov	r0, r3
 8008742:	f000 fcab 	bl	800909c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800874a:	f000 bc88 	b.w	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800874e:	2300      	movs	r3, #0
 8008750:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008752:	f000 bc84 	b.w	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008756:	4b2b      	ldr	r3, [pc, #172]	@ (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800875e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008762:	d108      	bne.n	8008776 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008764:	f107 030c 	add.w	r3, r7, #12
 8008768:	4618      	mov	r0, r3
 800876a:	f000 fdeb 	bl	8009344 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008772:	f000 bc74 	b.w	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008776:	2300      	movs	r3, #0
 8008778:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800877a:	f000 bc70 	b.w	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800877e:	4b21      	ldr	r3, [pc, #132]	@ (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008782:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008786:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008788:	4b1e      	ldr	r3, [pc, #120]	@ (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 0304 	and.w	r3, r3, #4
 8008790:	2b04      	cmp	r3, #4
 8008792:	d10c      	bne.n	80087ae <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008796:	2b00      	cmp	r3, #0
 8008798:	d109      	bne.n	80087ae <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800879a:	4b1a      	ldr	r3, [pc, #104]	@ (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	08db      	lsrs	r3, r3, #3
 80087a0:	f003 0303 	and.w	r3, r3, #3
 80087a4:	4a18      	ldr	r2, [pc, #96]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80087a6:	fa22 f303 	lsr.w	r3, r2, r3
 80087aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087ac:	e01f      	b.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087ae:	4b15      	ldr	r3, [pc, #84]	@ (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087ba:	d106      	bne.n	80087ca <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80087bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087c2:	d102      	bne.n	80087ca <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80087c4:	4b11      	ldr	r3, [pc, #68]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80087c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087c8:	e011      	b.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087ca:	4b0e      	ldr	r3, [pc, #56]	@ (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087d6:	d106      	bne.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80087d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087de:	d102      	bne.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80087e0:	4b0b      	ldr	r3, [pc, #44]	@ (8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80087e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087e4:	e003      	b.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80087e6:	2300      	movs	r3, #0
 80087e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80087ea:	f000 bc38 	b.w	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80087ee:	f000 bc36 	b.w	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80087f2:	4b08      	ldr	r3, [pc, #32]	@ (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80087f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087f6:	f000 bc32 	b.w	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80087fa:	2300      	movs	r3, #0
 80087fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087fe:	f000 bc2e 	b.w	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008802:	bf00      	nop
 8008804:	58024400 	.word	0x58024400
 8008808:	03d09000 	.word	0x03d09000
 800880c:	003d0900 	.word	0x003d0900
 8008810:	017d7840 	.word	0x017d7840
 8008814:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800881c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008820:	430b      	orrs	r3, r1
 8008822:	f040 809c 	bne.w	800895e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008826:	4b9e      	ldr	r3, [pc, #632]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800882a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800882e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008832:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008836:	d054      	beq.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800883e:	f200 808b 	bhi.w	8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008844:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008848:	f000 8083 	beq.w	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800884c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800884e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008852:	f200 8081 	bhi.w	8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008858:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800885c:	d02f      	beq.n	80088be <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800885e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008860:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008864:	d878      	bhi.n	8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008868:	2b00      	cmp	r3, #0
 800886a:	d004      	beq.n	8008876 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800886c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008872:	d012      	beq.n	800889a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008874:	e070      	b.n	8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008876:	4b8a      	ldr	r3, [pc, #552]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800887e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008882:	d107      	bne.n	8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008884:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008888:	4618      	mov	r0, r3
 800888a:	f000 feaf 	bl	80095ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800888e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008890:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008892:	e3e4      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008894:	2300      	movs	r3, #0
 8008896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008898:	e3e1      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800889a:	4b81      	ldr	r3, [pc, #516]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088a6:	d107      	bne.n	80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088a8:	f107 0318 	add.w	r3, r7, #24
 80088ac:	4618      	mov	r0, r3
 80088ae:	f000 fbf5 	bl	800909c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088b6:	e3d2      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088b8:	2300      	movs	r3, #0
 80088ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088bc:	e3cf      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088be:	4b78      	ldr	r3, [pc, #480]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088ca:	d107      	bne.n	80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088cc:	f107 030c 	add.w	r3, r7, #12
 80088d0:	4618      	mov	r0, r3
 80088d2:	f000 fd37 	bl	8009344 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088da:	e3c0      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088dc:	2300      	movs	r3, #0
 80088de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088e0:	e3bd      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80088e2:	4b6f      	ldr	r3, [pc, #444]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80088e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80088ea:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80088ec:	4b6c      	ldr	r3, [pc, #432]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 0304 	and.w	r3, r3, #4
 80088f4:	2b04      	cmp	r3, #4
 80088f6:	d10c      	bne.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80088f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d109      	bne.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088fe:	4b68      	ldr	r3, [pc, #416]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	08db      	lsrs	r3, r3, #3
 8008904:	f003 0303 	and.w	r3, r3, #3
 8008908:	4a66      	ldr	r2, [pc, #408]	@ (8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800890a:	fa22 f303 	lsr.w	r3, r2, r3
 800890e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008910:	e01e      	b.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008912:	4b63      	ldr	r3, [pc, #396]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800891a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800891e:	d106      	bne.n	800892e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008922:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008926:	d102      	bne.n	800892e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008928:	4b5f      	ldr	r3, [pc, #380]	@ (8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800892a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800892c:	e010      	b.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800892e:	4b5c      	ldr	r3, [pc, #368]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008936:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800893a:	d106      	bne.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800893c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800893e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008942:	d102      	bne.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008944:	4b59      	ldr	r3, [pc, #356]	@ (8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008946:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008948:	e002      	b.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800894a:	2300      	movs	r3, #0
 800894c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800894e:	e386      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008950:	e385      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008952:	4b57      	ldr	r3, [pc, #348]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008954:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008956:	e382      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008958:	2300      	movs	r3, #0
 800895a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800895c:	e37f      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800895e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008962:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008966:	430b      	orrs	r3, r1
 8008968:	f040 80a7 	bne.w	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800896c:	4b4c      	ldr	r3, [pc, #304]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800896e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008970:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008974:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008978:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800897c:	d055      	beq.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800897e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008980:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008984:	f200 8096 	bhi.w	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800898a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800898e:	f000 8084 	beq.w	8008a9a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008994:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008998:	f200 808c 	bhi.w	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800899c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800899e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089a2:	d030      	beq.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80089a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089aa:	f200 8083 	bhi.w	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80089ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d004      	beq.n	80089be <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80089b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80089ba:	d012      	beq.n	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80089bc:	e07a      	b.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80089be:	4b38      	ldr	r3, [pc, #224]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089ca:	d107      	bne.n	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089d0:	4618      	mov	r0, r3
 80089d2:	f000 fe0b 	bl	80095ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089da:	e340      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089dc:	2300      	movs	r3, #0
 80089de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089e0:	e33d      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089e2:	4b2f      	ldr	r3, [pc, #188]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089ee:	d107      	bne.n	8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089f0:	f107 0318 	add.w	r3, r7, #24
 80089f4:	4618      	mov	r0, r3
 80089f6:	f000 fb51 	bl	800909c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089fe:	e32e      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a00:	2300      	movs	r3, #0
 8008a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a04:	e32b      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a06:	4b26      	ldr	r3, [pc, #152]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a12:	d107      	bne.n	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a14:	f107 030c 	add.w	r3, r7, #12
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f000 fc93 	bl	8009344 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a22:	e31c      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a24:	2300      	movs	r3, #0
 8008a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a28:	e319      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008a32:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a34:	4b1a      	ldr	r3, [pc, #104]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 0304 	and.w	r3, r3, #4
 8008a3c:	2b04      	cmp	r3, #4
 8008a3e:	d10c      	bne.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d109      	bne.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a46:	4b16      	ldr	r3, [pc, #88]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	08db      	lsrs	r3, r3, #3
 8008a4c:	f003 0303 	and.w	r3, r3, #3
 8008a50:	4a14      	ldr	r2, [pc, #80]	@ (8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008a52:	fa22 f303 	lsr.w	r3, r2, r3
 8008a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a58:	e01e      	b.n	8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a5a:	4b11      	ldr	r3, [pc, #68]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a66:	d106      	bne.n	8008a76 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a6e:	d102      	bne.n	8008a76 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008a70:	4b0d      	ldr	r3, [pc, #52]	@ (8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a74:	e010      	b.n	8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a76:	4b0a      	ldr	r3, [pc, #40]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a82:	d106      	bne.n	8008a92 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a8a:	d102      	bne.n	8008a92 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008a8c:	4b07      	ldr	r3, [pc, #28]	@ (8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a90:	e002      	b.n	8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008a92:	2300      	movs	r3, #0
 8008a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008a96:	e2e2      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008a98:	e2e1      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008a9a:	4b05      	ldr	r3, [pc, #20]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a9e:	e2de      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008aa0:	58024400 	.word	0x58024400
 8008aa4:	03d09000 	.word	0x03d09000
 8008aa8:	003d0900 	.word	0x003d0900
 8008aac:	017d7840 	.word	0x017d7840
 8008ab0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ab8:	e2d1      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008aba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008abe:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008ac2:	430b      	orrs	r3, r1
 8008ac4:	f040 809c 	bne.w	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008ac8:	4b93      	ldr	r3, [pc, #588]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008aca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008acc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008ad0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ad8:	d054      	beq.n	8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008adc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ae0:	f200 808b 	bhi.w	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008aea:	f000 8083 	beq.w	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008af4:	f200 8081 	bhi.w	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008afa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008afe:	d02f      	beq.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b06:	d878      	bhi.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d004      	beq.n	8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b14:	d012      	beq.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008b16:	e070      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b18:	4b7f      	ldr	r3, [pc, #508]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b20:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b24:	d107      	bne.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f000 fd5e 	bl	80095ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b34:	e293      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b36:	2300      	movs	r3, #0
 8008b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b3a:	e290      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b3c:	4b76      	ldr	r3, [pc, #472]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b48:	d107      	bne.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b4a:	f107 0318 	add.w	r3, r7, #24
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f000 faa4 	bl	800909c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b54:	69bb      	ldr	r3, [r7, #24]
 8008b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b58:	e281      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b5e:	e27e      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b60:	4b6d      	ldr	r3, [pc, #436]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b6c:	d107      	bne.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b6e:	f107 030c 	add.w	r3, r7, #12
 8008b72:	4618      	mov	r0, r3
 8008b74:	f000 fbe6 	bl	8009344 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b7c:	e26f      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b82:	e26c      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008b84:	4b64      	ldr	r3, [pc, #400]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b88:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008b8c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b8e:	4b62      	ldr	r3, [pc, #392]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f003 0304 	and.w	r3, r3, #4
 8008b96:	2b04      	cmp	r3, #4
 8008b98:	d10c      	bne.n	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d109      	bne.n	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ba0:	4b5d      	ldr	r3, [pc, #372]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	08db      	lsrs	r3, r3, #3
 8008ba6:	f003 0303 	and.w	r3, r3, #3
 8008baa:	4a5c      	ldr	r2, [pc, #368]	@ (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008bac:	fa22 f303 	lsr.w	r3, r2, r3
 8008bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bb2:	e01e      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008bb4:	4b58      	ldr	r3, [pc, #352]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bc0:	d106      	bne.n	8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008bc8:	d102      	bne.n	8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008bca:	4b55      	ldr	r3, [pc, #340]	@ (8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bce:	e010      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008bd0:	4b51      	ldr	r3, [pc, #324]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bdc:	d106      	bne.n	8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008be0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008be4:	d102      	bne.n	8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008be6:	4b4f      	ldr	r3, [pc, #316]	@ (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bea:	e002      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008bec:	2300      	movs	r3, #0
 8008bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008bf0:	e235      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008bf2:	e234      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008bf4:	4b4c      	ldr	r3, [pc, #304]	@ (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bf8:	e231      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bfe:	e22e      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008c00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c04:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008c08:	430b      	orrs	r3, r1
 8008c0a:	f040 808f 	bne.w	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008c0e:	4b42      	ldr	r3, [pc, #264]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c12:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008c16:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c1a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c1e:	d06b      	beq.n	8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c22:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c26:	d874      	bhi.n	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c2a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c2e:	d056      	beq.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c32:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c36:	d86c      	bhi.n	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c3a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008c3e:	d03b      	beq.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c42:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008c46:	d864      	bhi.n	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c4e:	d021      	beq.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c56:	d85c      	bhi.n	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d004      	beq.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c64:	d004      	beq.n	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008c66:	e054      	b.n	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008c68:	f7fe fa62 	bl	8007130 <HAL_RCC_GetPCLK1Freq>
 8008c6c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c6e:	e1f6      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c70:	4b29      	ldr	r3, [pc, #164]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c7c:	d107      	bne.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c7e:	f107 0318 	add.w	r3, r7, #24
 8008c82:	4618      	mov	r0, r3
 8008c84:	f000 fa0a 	bl	800909c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c8c:	e1e7      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c92:	e1e4      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c94:	4b20      	ldr	r3, [pc, #128]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ca0:	d107      	bne.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ca2:	f107 030c 	add.w	r3, r7, #12
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f000 fb4c 	bl	8009344 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cb0:	e1d5      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cb6:	e1d2      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008cb8:	4b17      	ldr	r3, [pc, #92]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f003 0304 	and.w	r3, r3, #4
 8008cc0:	2b04      	cmp	r3, #4
 8008cc2:	d109      	bne.n	8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008cc4:	4b14      	ldr	r3, [pc, #80]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	08db      	lsrs	r3, r3, #3
 8008cca:	f003 0303 	and.w	r3, r3, #3
 8008cce:	4a13      	ldr	r2, [pc, #76]	@ (8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8008cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cd6:	e1c2      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cdc:	e1bf      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008cde:	4b0e      	ldr	r3, [pc, #56]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ce6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008cea:	d102      	bne.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008cec:	4b0c      	ldr	r3, [pc, #48]	@ (8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cf0:	e1b5      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cf6:	e1b2      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008cf8:	4b07      	ldr	r3, [pc, #28]	@ (8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d04:	d102      	bne.n	8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008d06:	4b07      	ldr	r3, [pc, #28]	@ (8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d0a:	e1a8      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d10:	e1a5      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008d12:	2300      	movs	r3, #0
 8008d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d16:	e1a2      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008d18:	58024400 	.word	0x58024400
 8008d1c:	03d09000 	.word	0x03d09000
 8008d20:	003d0900 	.word	0x003d0900
 8008d24:	017d7840 	.word	0x017d7840
 8008d28:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008d2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d30:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008d34:	430b      	orrs	r3, r1
 8008d36:	d173      	bne.n	8008e20 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008d38:	4b9c      	ldr	r3, [pc, #624]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008d40:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d48:	d02f      	beq.n	8008daa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d50:	d863      	bhi.n	8008e1a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d004      	beq.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d5e:	d012      	beq.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008d60:	e05b      	b.n	8008e1a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d62:	4b92      	ldr	r3, [pc, #584]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d6e:	d107      	bne.n	8008d80 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d70:	f107 0318 	add.w	r3, r7, #24
 8008d74:	4618      	mov	r0, r3
 8008d76:	f000 f991 	bl	800909c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d7e:	e16e      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d80:	2300      	movs	r3, #0
 8008d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d84:	e16b      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d86:	4b89      	ldr	r3, [pc, #548]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d92:	d107      	bne.n	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d94:	f107 030c 	add.w	r3, r7, #12
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f000 fad3 	bl	8009344 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008da2:	e15c      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008da4:	2300      	movs	r3, #0
 8008da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008da8:	e159      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008daa:	4b80      	ldr	r3, [pc, #512]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008db2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008db4:	4b7d      	ldr	r3, [pc, #500]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f003 0304 	and.w	r3, r3, #4
 8008dbc:	2b04      	cmp	r3, #4
 8008dbe:	d10c      	bne.n	8008dda <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d109      	bne.n	8008dda <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008dc6:	4b79      	ldr	r3, [pc, #484]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	08db      	lsrs	r3, r3, #3
 8008dcc:	f003 0303 	and.w	r3, r3, #3
 8008dd0:	4a77      	ldr	r2, [pc, #476]	@ (8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8008dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008dd8:	e01e      	b.n	8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008dda:	4b74      	ldr	r3, [pc, #464]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008de2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008de6:	d106      	bne.n	8008df6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008dee:	d102      	bne.n	8008df6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008df0:	4b70      	ldr	r3, [pc, #448]	@ (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008df4:	e010      	b.n	8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008df6:	4b6d      	ldr	r3, [pc, #436]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dfe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e02:	d106      	bne.n	8008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e0a:	d102      	bne.n	8008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008e0c:	4b6a      	ldr	r3, [pc, #424]	@ (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e10:	e002      	b.n	8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008e12:	2300      	movs	r3, #0
 8008e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008e16:	e122      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008e18:	e121      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e1e:	e11e      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008e20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e24:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008e28:	430b      	orrs	r3, r1
 8008e2a:	d133      	bne.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008e2c:	4b5f      	ldr	r3, [pc, #380]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e34:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d004      	beq.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e42:	d012      	beq.n	8008e6a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008e44:	e023      	b.n	8008e8e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e46:	4b59      	ldr	r3, [pc, #356]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e52:	d107      	bne.n	8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f000 fbc7 	bl	80095ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e62:	e0fc      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e64:	2300      	movs	r3, #0
 8008e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e68:	e0f9      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e6a:	4b50      	ldr	r3, [pc, #320]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e76:	d107      	bne.n	8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e78:	f107 0318 	add.w	r3, r7, #24
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f000 f90d 	bl	800909c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008e82:	6a3b      	ldr	r3, [r7, #32]
 8008e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e86:	e0ea      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e8c:	e0e7      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e92:	e0e4      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008e94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e98:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008e9c:	430b      	orrs	r3, r1
 8008e9e:	f040 808d 	bne.w	8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008ea2:	4b42      	ldr	r3, [pc, #264]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ea6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008eaa:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008eb2:	d06b      	beq.n	8008f8c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008eba:	d874      	bhi.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ec2:	d056      	beq.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008eca:	d86c      	bhi.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ece:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008ed2:	d03b      	beq.n	8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ed6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008eda:	d864      	bhi.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ede:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ee2:	d021      	beq.n	8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ee6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008eea:	d85c      	bhi.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d004      	beq.n	8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ef8:	d004      	beq.n	8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008efa:	e054      	b.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008efc:	f000 f8b8 	bl	8009070 <HAL_RCCEx_GetD3PCLK1Freq>
 8008f00:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008f02:	e0ac      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f04:	4b29      	ldr	r3, [pc, #164]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f10:	d107      	bne.n	8008f22 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f12:	f107 0318 	add.w	r3, r7, #24
 8008f16:	4618      	mov	r0, r3
 8008f18:	f000 f8c0 	bl	800909c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f20:	e09d      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f22:	2300      	movs	r3, #0
 8008f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f26:	e09a      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f28:	4b20      	ldr	r3, [pc, #128]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f34:	d107      	bne.n	8008f46 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f36:	f107 030c 	add.w	r3, r7, #12
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f000 fa02 	bl	8009344 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f44:	e08b      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f46:	2300      	movs	r3, #0
 8008f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f4a:	e088      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008f4c:	4b17      	ldr	r3, [pc, #92]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f003 0304 	and.w	r3, r3, #4
 8008f54:	2b04      	cmp	r3, #4
 8008f56:	d109      	bne.n	8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f58:	4b14      	ldr	r3, [pc, #80]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	08db      	lsrs	r3, r3, #3
 8008f5e:	f003 0303 	and.w	r3, r3, #3
 8008f62:	4a13      	ldr	r2, [pc, #76]	@ (8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008f64:	fa22 f303 	lsr.w	r3, r2, r3
 8008f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f6a:	e078      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f70:	e075      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008f72:	4b0e      	ldr	r3, [pc, #56]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f7e:	d102      	bne.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008f80:	4b0c      	ldr	r3, [pc, #48]	@ (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f84:	e06b      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f86:	2300      	movs	r3, #0
 8008f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f8a:	e068      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008f8c:	4b07      	ldr	r3, [pc, #28]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f98:	d102      	bne.n	8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008f9a:	4b07      	ldr	r3, [pc, #28]	@ (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f9e:	e05e      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fa4:	e05b      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008faa:	e058      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008fac:	58024400 	.word	0x58024400
 8008fb0:	03d09000 	.word	0x03d09000
 8008fb4:	003d0900 	.word	0x003d0900
 8008fb8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008fbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fc0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008fc4:	430b      	orrs	r3, r1
 8008fc6:	d148      	bne.n	800905a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008fc8:	4b27      	ldr	r3, [pc, #156]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008fca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fcc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008fd0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fd8:	d02a      	beq.n	8009030 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fe0:	d838      	bhi.n	8009054 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d004      	beq.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fee:	d00d      	beq.n	800900c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008ff0:	e030      	b.n	8009054 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ffa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ffe:	d102      	bne.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009000:	4b1a      	ldr	r3, [pc, #104]	@ (800906c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009002:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009004:	e02b      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009006:	2300      	movs	r3, #0
 8009008:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800900a:	e028      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800900c:	4b16      	ldr	r3, [pc, #88]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009014:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009018:	d107      	bne.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800901a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800901e:	4618      	mov	r0, r3
 8009020:	f000 fae4 	bl	80095ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009028:	e019      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800902a:	2300      	movs	r3, #0
 800902c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800902e:	e016      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009030:	4b0d      	ldr	r3, [pc, #52]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009038:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800903c:	d107      	bne.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800903e:	f107 0318 	add.w	r3, r7, #24
 8009042:	4618      	mov	r0, r3
 8009044:	f000 f82a 	bl	800909c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800904c:	e007      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800904e:	2300      	movs	r3, #0
 8009050:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009052:	e004      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009054:	2300      	movs	r3, #0
 8009056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009058:	e001      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800905a:	2300      	movs	r3, #0
 800905c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800905e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009060:	4618      	mov	r0, r3
 8009062:	3740      	adds	r7, #64	@ 0x40
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}
 8009068:	58024400 	.word	0x58024400
 800906c:	017d7840 	.word	0x017d7840

08009070 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009074:	f7fe f82c 	bl	80070d0 <HAL_RCC_GetHCLKFreq>
 8009078:	4602      	mov	r2, r0
 800907a:	4b06      	ldr	r3, [pc, #24]	@ (8009094 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800907c:	6a1b      	ldr	r3, [r3, #32]
 800907e:	091b      	lsrs	r3, r3, #4
 8009080:	f003 0307 	and.w	r3, r3, #7
 8009084:	4904      	ldr	r1, [pc, #16]	@ (8009098 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009086:	5ccb      	ldrb	r3, [r1, r3]
 8009088:	f003 031f 	and.w	r3, r3, #31
 800908c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009090:	4618      	mov	r0, r3
 8009092:	bd80      	pop	{r7, pc}
 8009094:	58024400 	.word	0x58024400
 8009098:	0801e0b4 	.word	0x0801e0b4

0800909c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800909c:	b480      	push	{r7}
 800909e:	b089      	sub	sp, #36	@ 0x24
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80090a4:	4ba1      	ldr	r3, [pc, #644]	@ (800932c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090a8:	f003 0303 	and.w	r3, r3, #3
 80090ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80090ae:	4b9f      	ldr	r3, [pc, #636]	@ (800932c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090b2:	0b1b      	lsrs	r3, r3, #12
 80090b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80090b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80090ba:	4b9c      	ldr	r3, [pc, #624]	@ (800932c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090be:	091b      	lsrs	r3, r3, #4
 80090c0:	f003 0301 	and.w	r3, r3, #1
 80090c4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80090c6:	4b99      	ldr	r3, [pc, #612]	@ (800932c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090ca:	08db      	lsrs	r3, r3, #3
 80090cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090d0:	693a      	ldr	r2, [r7, #16]
 80090d2:	fb02 f303 	mul.w	r3, r2, r3
 80090d6:	ee07 3a90 	vmov	s15, r3
 80090da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	f000 8111 	beq.w	800930c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	2b02      	cmp	r3, #2
 80090ee:	f000 8083 	beq.w	80091f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	2b02      	cmp	r3, #2
 80090f6:	f200 80a1 	bhi.w	800923c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d003      	beq.n	8009108 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	2b01      	cmp	r3, #1
 8009104:	d056      	beq.n	80091b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009106:	e099      	b.n	800923c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009108:	4b88      	ldr	r3, [pc, #544]	@ (800932c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f003 0320 	and.w	r3, r3, #32
 8009110:	2b00      	cmp	r3, #0
 8009112:	d02d      	beq.n	8009170 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009114:	4b85      	ldr	r3, [pc, #532]	@ (800932c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	08db      	lsrs	r3, r3, #3
 800911a:	f003 0303 	and.w	r3, r3, #3
 800911e:	4a84      	ldr	r2, [pc, #528]	@ (8009330 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009120:	fa22 f303 	lsr.w	r3, r2, r3
 8009124:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	ee07 3a90 	vmov	s15, r3
 800912c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	ee07 3a90 	vmov	s15, r3
 8009136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800913a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800913e:	4b7b      	ldr	r3, [pc, #492]	@ (800932c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009146:	ee07 3a90 	vmov	s15, r3
 800914a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800914e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009152:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009334 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800915a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800915e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800916a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800916e:	e087      	b.n	8009280 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	ee07 3a90 	vmov	s15, r3
 8009176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800917a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009338 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800917e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009182:	4b6a      	ldr	r3, [pc, #424]	@ (800932c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800918a:	ee07 3a90 	vmov	s15, r3
 800918e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009192:	ed97 6a03 	vldr	s12, [r7, #12]
 8009196:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009334 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800919a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800919e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091b2:	e065      	b.n	8009280 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	ee07 3a90 	vmov	s15, r3
 80091ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091be:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800933c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80091c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091c6:	4b59      	ldr	r3, [pc, #356]	@ (800932c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ce:	ee07 3a90 	vmov	s15, r3
 80091d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80091da:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009334 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091f6:	e043      	b.n	8009280 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	ee07 3a90 	vmov	s15, r3
 80091fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009202:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009340 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800920a:	4b48      	ldr	r3, [pc, #288]	@ (800932c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800920c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800920e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009212:	ee07 3a90 	vmov	s15, r3
 8009216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800921a:	ed97 6a03 	vldr	s12, [r7, #12]
 800921e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009334 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800922a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800922e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009236:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800923a:	e021      	b.n	8009280 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	ee07 3a90 	vmov	s15, r3
 8009242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009246:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800933c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800924a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800924e:	4b37      	ldr	r3, [pc, #220]	@ (800932c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009256:	ee07 3a90 	vmov	s15, r3
 800925a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800925e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009262:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009334 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800926a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800926e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800927a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800927e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009280:	4b2a      	ldr	r3, [pc, #168]	@ (800932c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009284:	0a5b      	lsrs	r3, r3, #9
 8009286:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800928a:	ee07 3a90 	vmov	s15, r3
 800928e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009292:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009296:	ee37 7a87 	vadd.f32	s14, s15, s14
 800929a:	edd7 6a07 	vldr	s13, [r7, #28]
 800929e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092a6:	ee17 2a90 	vmov	r2, s15
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80092ae:	4b1f      	ldr	r3, [pc, #124]	@ (800932c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092b2:	0c1b      	lsrs	r3, r3, #16
 80092b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092b8:	ee07 3a90 	vmov	s15, r3
 80092bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80092c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80092cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092d4:	ee17 2a90 	vmov	r2, s15
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80092dc:	4b13      	ldr	r3, [pc, #76]	@ (800932c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092e0:	0e1b      	lsrs	r3, r3, #24
 80092e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092e6:	ee07 3a90 	vmov	s15, r3
 80092ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80092f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80092fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009302:	ee17 2a90 	vmov	r2, s15
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800930a:	e008      	b.n	800931e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	609a      	str	r2, [r3, #8]
}
 800931e:	bf00      	nop
 8009320:	3724      	adds	r7, #36	@ 0x24
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop
 800932c:	58024400 	.word	0x58024400
 8009330:	03d09000 	.word	0x03d09000
 8009334:	46000000 	.word	0x46000000
 8009338:	4c742400 	.word	0x4c742400
 800933c:	4a742400 	.word	0x4a742400
 8009340:	4bbebc20 	.word	0x4bbebc20

08009344 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009344:	b480      	push	{r7}
 8009346:	b089      	sub	sp, #36	@ 0x24
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800934c:	4ba1      	ldr	r3, [pc, #644]	@ (80095d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800934e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009350:	f003 0303 	and.w	r3, r3, #3
 8009354:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009356:	4b9f      	ldr	r3, [pc, #636]	@ (80095d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800935a:	0d1b      	lsrs	r3, r3, #20
 800935c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009360:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009362:	4b9c      	ldr	r3, [pc, #624]	@ (80095d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009366:	0a1b      	lsrs	r3, r3, #8
 8009368:	f003 0301 	and.w	r3, r3, #1
 800936c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800936e:	4b99      	ldr	r3, [pc, #612]	@ (80095d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009372:	08db      	lsrs	r3, r3, #3
 8009374:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009378:	693a      	ldr	r2, [r7, #16]
 800937a:	fb02 f303 	mul.w	r3, r2, r3
 800937e:	ee07 3a90 	vmov	s15, r3
 8009382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009386:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	2b00      	cmp	r3, #0
 800938e:	f000 8111 	beq.w	80095b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	2b02      	cmp	r3, #2
 8009396:	f000 8083 	beq.w	80094a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	2b02      	cmp	r3, #2
 800939e:	f200 80a1 	bhi.w	80094e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d003      	beq.n	80093b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d056      	beq.n	800945c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80093ae:	e099      	b.n	80094e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093b0:	4b88      	ldr	r3, [pc, #544]	@ (80095d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f003 0320 	and.w	r3, r3, #32
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d02d      	beq.n	8009418 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093bc:	4b85      	ldr	r3, [pc, #532]	@ (80095d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	08db      	lsrs	r3, r3, #3
 80093c2:	f003 0303 	and.w	r3, r3, #3
 80093c6:	4a84      	ldr	r2, [pc, #528]	@ (80095d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80093c8:	fa22 f303 	lsr.w	r3, r2, r3
 80093cc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	ee07 3a90 	vmov	s15, r3
 80093d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	ee07 3a90 	vmov	s15, r3
 80093de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093e6:	4b7b      	ldr	r3, [pc, #492]	@ (80095d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ee:	ee07 3a90 	vmov	s15, r3
 80093f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80093fa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80095dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009406:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800940a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800940e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009412:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009416:	e087      	b.n	8009528 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	ee07 3a90 	vmov	s15, r3
 800941e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009422:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80095e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800942a:	4b6a      	ldr	r3, [pc, #424]	@ (80095d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800942c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800942e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009432:	ee07 3a90 	vmov	s15, r3
 8009436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800943a:	ed97 6a03 	vldr	s12, [r7, #12]
 800943e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80095dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800944a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800944e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009456:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800945a:	e065      	b.n	8009528 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	ee07 3a90 	vmov	s15, r3
 8009462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009466:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80095e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800946a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800946e:	4b59      	ldr	r3, [pc, #356]	@ (80095d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009476:	ee07 3a90 	vmov	s15, r3
 800947a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800947e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009482:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80095dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800948a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800948e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800949a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800949e:	e043      	b.n	8009528 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	ee07 3a90 	vmov	s15, r3
 80094a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094aa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80095e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80094ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094b2:	4b48      	ldr	r3, [pc, #288]	@ (80095d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ba:	ee07 3a90 	vmov	s15, r3
 80094be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80094c6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80095dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094e2:	e021      	b.n	8009528 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	ee07 3a90 	vmov	s15, r3
 80094ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80095e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80094f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094f6:	4b37      	ldr	r3, [pc, #220]	@ (80095d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094fe:	ee07 3a90 	vmov	s15, r3
 8009502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009506:	ed97 6a03 	vldr	s12, [r7, #12]
 800950a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80095dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800950e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009516:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800951a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800951e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009522:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009526:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009528:	4b2a      	ldr	r3, [pc, #168]	@ (80095d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800952a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800952c:	0a5b      	lsrs	r3, r3, #9
 800952e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009532:	ee07 3a90 	vmov	s15, r3
 8009536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800953a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800953e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009542:	edd7 6a07 	vldr	s13, [r7, #28]
 8009546:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800954a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800954e:	ee17 2a90 	vmov	r2, s15
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009556:	4b1f      	ldr	r3, [pc, #124]	@ (80095d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800955a:	0c1b      	lsrs	r3, r3, #16
 800955c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009560:	ee07 3a90 	vmov	s15, r3
 8009564:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009568:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800956c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009570:	edd7 6a07 	vldr	s13, [r7, #28]
 8009574:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800957c:	ee17 2a90 	vmov	r2, s15
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009584:	4b13      	ldr	r3, [pc, #76]	@ (80095d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009588:	0e1b      	lsrs	r3, r3, #24
 800958a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800958e:	ee07 3a90 	vmov	s15, r3
 8009592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009596:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800959a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800959e:	edd7 6a07 	vldr	s13, [r7, #28]
 80095a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095aa:	ee17 2a90 	vmov	r2, s15
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80095b2:	e008      	b.n	80095c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	609a      	str	r2, [r3, #8]
}
 80095c6:	bf00      	nop
 80095c8:	3724      	adds	r7, #36	@ 0x24
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	58024400 	.word	0x58024400
 80095d8:	03d09000 	.word	0x03d09000
 80095dc:	46000000 	.word	0x46000000
 80095e0:	4c742400 	.word	0x4c742400
 80095e4:	4a742400 	.word	0x4a742400
 80095e8:	4bbebc20 	.word	0x4bbebc20

080095ec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b089      	sub	sp, #36	@ 0x24
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80095f4:	4ba0      	ldr	r3, [pc, #640]	@ (8009878 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095f8:	f003 0303 	and.w	r3, r3, #3
 80095fc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80095fe:	4b9e      	ldr	r3, [pc, #632]	@ (8009878 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009602:	091b      	lsrs	r3, r3, #4
 8009604:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009608:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800960a:	4b9b      	ldr	r3, [pc, #620]	@ (8009878 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800960c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800960e:	f003 0301 	and.w	r3, r3, #1
 8009612:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009614:	4b98      	ldr	r3, [pc, #608]	@ (8009878 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009618:	08db      	lsrs	r3, r3, #3
 800961a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800961e:	693a      	ldr	r2, [r7, #16]
 8009620:	fb02 f303 	mul.w	r3, r2, r3
 8009624:	ee07 3a90 	vmov	s15, r3
 8009628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800962c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	2b00      	cmp	r3, #0
 8009634:	f000 8111 	beq.w	800985a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009638:	69bb      	ldr	r3, [r7, #24]
 800963a:	2b02      	cmp	r3, #2
 800963c:	f000 8083 	beq.w	8009746 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	2b02      	cmp	r3, #2
 8009644:	f200 80a1 	bhi.w	800978a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009648:	69bb      	ldr	r3, [r7, #24]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d003      	beq.n	8009656 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800964e:	69bb      	ldr	r3, [r7, #24]
 8009650:	2b01      	cmp	r3, #1
 8009652:	d056      	beq.n	8009702 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009654:	e099      	b.n	800978a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009656:	4b88      	ldr	r3, [pc, #544]	@ (8009878 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f003 0320 	and.w	r3, r3, #32
 800965e:	2b00      	cmp	r3, #0
 8009660:	d02d      	beq.n	80096be <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009662:	4b85      	ldr	r3, [pc, #532]	@ (8009878 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	08db      	lsrs	r3, r3, #3
 8009668:	f003 0303 	and.w	r3, r3, #3
 800966c:	4a83      	ldr	r2, [pc, #524]	@ (800987c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800966e:	fa22 f303 	lsr.w	r3, r2, r3
 8009672:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	ee07 3a90 	vmov	s15, r3
 800967a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	ee07 3a90 	vmov	s15, r3
 8009684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009688:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800968c:	4b7a      	ldr	r3, [pc, #488]	@ (8009878 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800968e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009694:	ee07 3a90 	vmov	s15, r3
 8009698:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800969c:	ed97 6a03 	vldr	s12, [r7, #12]
 80096a0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009880 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80096a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096b8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80096bc:	e087      	b.n	80097ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	ee07 3a90 	vmov	s15, r3
 80096c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096c8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009884 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80096cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096d0:	4b69      	ldr	r3, [pc, #420]	@ (8009878 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096d8:	ee07 3a90 	vmov	s15, r3
 80096dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80096e4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009880 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80096e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009700:	e065      	b.n	80097ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	ee07 3a90 	vmov	s15, r3
 8009708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800970c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009888 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009710:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009714:	4b58      	ldr	r3, [pc, #352]	@ (8009878 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800971c:	ee07 3a90 	vmov	s15, r3
 8009720:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009724:	ed97 6a03 	vldr	s12, [r7, #12]
 8009728:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009880 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800972c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009730:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009734:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009738:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800973c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009740:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009744:	e043      	b.n	80097ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	ee07 3a90 	vmov	s15, r3
 800974c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009750:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800988c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009754:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009758:	4b47      	ldr	r3, [pc, #284]	@ (8009878 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800975a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800975c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009760:	ee07 3a90 	vmov	s15, r3
 8009764:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009768:	ed97 6a03 	vldr	s12, [r7, #12]
 800976c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009880 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009770:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009774:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009778:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800977c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009784:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009788:	e021      	b.n	80097ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	ee07 3a90 	vmov	s15, r3
 8009790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009794:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009884 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009798:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800979c:	4b36      	ldr	r3, [pc, #216]	@ (8009878 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800979e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097a4:	ee07 3a90 	vmov	s15, r3
 80097a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80097b0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009880 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80097b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097cc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80097ce:	4b2a      	ldr	r3, [pc, #168]	@ (8009878 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097d2:	0a5b      	lsrs	r3, r3, #9
 80097d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097d8:	ee07 3a90 	vmov	s15, r3
 80097dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80097ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097f4:	ee17 2a90 	vmov	r2, s15
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80097fc:	4b1e      	ldr	r3, [pc, #120]	@ (8009878 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009800:	0c1b      	lsrs	r3, r3, #16
 8009802:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009806:	ee07 3a90 	vmov	s15, r3
 800980a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800980e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009812:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009816:	edd7 6a07 	vldr	s13, [r7, #28]
 800981a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800981e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009822:	ee17 2a90 	vmov	r2, s15
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800982a:	4b13      	ldr	r3, [pc, #76]	@ (8009878 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800982c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800982e:	0e1b      	lsrs	r3, r3, #24
 8009830:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009834:	ee07 3a90 	vmov	s15, r3
 8009838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800983c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009840:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009844:	edd7 6a07 	vldr	s13, [r7, #28]
 8009848:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800984c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009850:	ee17 2a90 	vmov	r2, s15
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009858:	e008      	b.n	800986c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2200      	movs	r2, #0
 800985e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	609a      	str	r2, [r3, #8]
}
 800986c:	bf00      	nop
 800986e:	3724      	adds	r7, #36	@ 0x24
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr
 8009878:	58024400 	.word	0x58024400
 800987c:	03d09000 	.word	0x03d09000
 8009880:	46000000 	.word	0x46000000
 8009884:	4c742400 	.word	0x4c742400
 8009888:	4a742400 	.word	0x4a742400
 800988c:	4bbebc20 	.word	0x4bbebc20

08009890 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800989a:	2300      	movs	r3, #0
 800989c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800989e:	4b53      	ldr	r3, [pc, #332]	@ (80099ec <RCCEx_PLL2_Config+0x15c>)
 80098a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098a2:	f003 0303 	and.w	r3, r3, #3
 80098a6:	2b03      	cmp	r3, #3
 80098a8:	d101      	bne.n	80098ae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80098aa:	2301      	movs	r3, #1
 80098ac:	e099      	b.n	80099e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80098ae:	4b4f      	ldr	r3, [pc, #316]	@ (80099ec <RCCEx_PLL2_Config+0x15c>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4a4e      	ldr	r2, [pc, #312]	@ (80099ec <RCCEx_PLL2_Config+0x15c>)
 80098b4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80098b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098ba:	f7f9 f88d 	bl	80029d8 <HAL_GetTick>
 80098be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80098c0:	e008      	b.n	80098d4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80098c2:	f7f9 f889 	bl	80029d8 <HAL_GetTick>
 80098c6:	4602      	mov	r2, r0
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	1ad3      	subs	r3, r2, r3
 80098cc:	2b02      	cmp	r3, #2
 80098ce:	d901      	bls.n	80098d4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80098d0:	2303      	movs	r3, #3
 80098d2:	e086      	b.n	80099e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80098d4:	4b45      	ldr	r3, [pc, #276]	@ (80099ec <RCCEx_PLL2_Config+0x15c>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d1f0      	bne.n	80098c2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80098e0:	4b42      	ldr	r3, [pc, #264]	@ (80099ec <RCCEx_PLL2_Config+0x15c>)
 80098e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098e4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	031b      	lsls	r3, r3, #12
 80098ee:	493f      	ldr	r1, [pc, #252]	@ (80099ec <RCCEx_PLL2_Config+0x15c>)
 80098f0:	4313      	orrs	r3, r2
 80098f2:	628b      	str	r3, [r1, #40]	@ 0x28
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	3b01      	subs	r3, #1
 80098fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	3b01      	subs	r3, #1
 8009904:	025b      	lsls	r3, r3, #9
 8009906:	b29b      	uxth	r3, r3
 8009908:	431a      	orrs	r2, r3
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	3b01      	subs	r3, #1
 8009910:	041b      	lsls	r3, r3, #16
 8009912:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009916:	431a      	orrs	r2, r3
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	691b      	ldr	r3, [r3, #16]
 800991c:	3b01      	subs	r3, #1
 800991e:	061b      	lsls	r3, r3, #24
 8009920:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009924:	4931      	ldr	r1, [pc, #196]	@ (80099ec <RCCEx_PLL2_Config+0x15c>)
 8009926:	4313      	orrs	r3, r2
 8009928:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800992a:	4b30      	ldr	r3, [pc, #192]	@ (80099ec <RCCEx_PLL2_Config+0x15c>)
 800992c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800992e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	695b      	ldr	r3, [r3, #20]
 8009936:	492d      	ldr	r1, [pc, #180]	@ (80099ec <RCCEx_PLL2_Config+0x15c>)
 8009938:	4313      	orrs	r3, r2
 800993a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800993c:	4b2b      	ldr	r3, [pc, #172]	@ (80099ec <RCCEx_PLL2_Config+0x15c>)
 800993e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009940:	f023 0220 	bic.w	r2, r3, #32
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	699b      	ldr	r3, [r3, #24]
 8009948:	4928      	ldr	r1, [pc, #160]	@ (80099ec <RCCEx_PLL2_Config+0x15c>)
 800994a:	4313      	orrs	r3, r2
 800994c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800994e:	4b27      	ldr	r3, [pc, #156]	@ (80099ec <RCCEx_PLL2_Config+0x15c>)
 8009950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009952:	4a26      	ldr	r2, [pc, #152]	@ (80099ec <RCCEx_PLL2_Config+0x15c>)
 8009954:	f023 0310 	bic.w	r3, r3, #16
 8009958:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800995a:	4b24      	ldr	r3, [pc, #144]	@ (80099ec <RCCEx_PLL2_Config+0x15c>)
 800995c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800995e:	4b24      	ldr	r3, [pc, #144]	@ (80099f0 <RCCEx_PLL2_Config+0x160>)
 8009960:	4013      	ands	r3, r2
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	69d2      	ldr	r2, [r2, #28]
 8009966:	00d2      	lsls	r2, r2, #3
 8009968:	4920      	ldr	r1, [pc, #128]	@ (80099ec <RCCEx_PLL2_Config+0x15c>)
 800996a:	4313      	orrs	r3, r2
 800996c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800996e:	4b1f      	ldr	r3, [pc, #124]	@ (80099ec <RCCEx_PLL2_Config+0x15c>)
 8009970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009972:	4a1e      	ldr	r2, [pc, #120]	@ (80099ec <RCCEx_PLL2_Config+0x15c>)
 8009974:	f043 0310 	orr.w	r3, r3, #16
 8009978:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d106      	bne.n	800998e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009980:	4b1a      	ldr	r3, [pc, #104]	@ (80099ec <RCCEx_PLL2_Config+0x15c>)
 8009982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009984:	4a19      	ldr	r2, [pc, #100]	@ (80099ec <RCCEx_PLL2_Config+0x15c>)
 8009986:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800998a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800998c:	e00f      	b.n	80099ae <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	2b01      	cmp	r3, #1
 8009992:	d106      	bne.n	80099a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009994:	4b15      	ldr	r3, [pc, #84]	@ (80099ec <RCCEx_PLL2_Config+0x15c>)
 8009996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009998:	4a14      	ldr	r2, [pc, #80]	@ (80099ec <RCCEx_PLL2_Config+0x15c>)
 800999a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800999e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80099a0:	e005      	b.n	80099ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80099a2:	4b12      	ldr	r3, [pc, #72]	@ (80099ec <RCCEx_PLL2_Config+0x15c>)
 80099a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a6:	4a11      	ldr	r2, [pc, #68]	@ (80099ec <RCCEx_PLL2_Config+0x15c>)
 80099a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80099ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80099ae:	4b0f      	ldr	r3, [pc, #60]	@ (80099ec <RCCEx_PLL2_Config+0x15c>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a0e      	ldr	r2, [pc, #56]	@ (80099ec <RCCEx_PLL2_Config+0x15c>)
 80099b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80099b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099ba:	f7f9 f80d 	bl	80029d8 <HAL_GetTick>
 80099be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80099c0:	e008      	b.n	80099d4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80099c2:	f7f9 f809 	bl	80029d8 <HAL_GetTick>
 80099c6:	4602      	mov	r2, r0
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	1ad3      	subs	r3, r2, r3
 80099cc:	2b02      	cmp	r3, #2
 80099ce:	d901      	bls.n	80099d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80099d0:	2303      	movs	r3, #3
 80099d2:	e006      	b.n	80099e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80099d4:	4b05      	ldr	r3, [pc, #20]	@ (80099ec <RCCEx_PLL2_Config+0x15c>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d0f0      	beq.n	80099c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80099e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3710      	adds	r7, #16
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	58024400 	.word	0x58024400
 80099f0:	ffff0007 	.word	0xffff0007

080099f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80099fe:	2300      	movs	r3, #0
 8009a00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a02:	4b53      	ldr	r3, [pc, #332]	@ (8009b50 <RCCEx_PLL3_Config+0x15c>)
 8009a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a06:	f003 0303 	and.w	r3, r3, #3
 8009a0a:	2b03      	cmp	r3, #3
 8009a0c:	d101      	bne.n	8009a12 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e099      	b.n	8009b46 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009a12:	4b4f      	ldr	r3, [pc, #316]	@ (8009b50 <RCCEx_PLL3_Config+0x15c>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a4e      	ldr	r2, [pc, #312]	@ (8009b50 <RCCEx_PLL3_Config+0x15c>)
 8009a18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a1e:	f7f8 ffdb 	bl	80029d8 <HAL_GetTick>
 8009a22:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009a24:	e008      	b.n	8009a38 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009a26:	f7f8 ffd7 	bl	80029d8 <HAL_GetTick>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	1ad3      	subs	r3, r2, r3
 8009a30:	2b02      	cmp	r3, #2
 8009a32:	d901      	bls.n	8009a38 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009a34:	2303      	movs	r3, #3
 8009a36:	e086      	b.n	8009b46 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009a38:	4b45      	ldr	r3, [pc, #276]	@ (8009b50 <RCCEx_PLL3_Config+0x15c>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d1f0      	bne.n	8009a26 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009a44:	4b42      	ldr	r3, [pc, #264]	@ (8009b50 <RCCEx_PLL3_Config+0x15c>)
 8009a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a48:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	051b      	lsls	r3, r3, #20
 8009a52:	493f      	ldr	r1, [pc, #252]	@ (8009b50 <RCCEx_PLL3_Config+0x15c>)
 8009a54:	4313      	orrs	r3, r2
 8009a56:	628b      	str	r3, [r1, #40]	@ 0x28
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	3b01      	subs	r3, #1
 8009a5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	3b01      	subs	r3, #1
 8009a68:	025b      	lsls	r3, r3, #9
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	431a      	orrs	r2, r3
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	3b01      	subs	r3, #1
 8009a74:	041b      	lsls	r3, r3, #16
 8009a76:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009a7a:	431a      	orrs	r2, r3
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	3b01      	subs	r3, #1
 8009a82:	061b      	lsls	r3, r3, #24
 8009a84:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009a88:	4931      	ldr	r1, [pc, #196]	@ (8009b50 <RCCEx_PLL3_Config+0x15c>)
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009a8e:	4b30      	ldr	r3, [pc, #192]	@ (8009b50 <RCCEx_PLL3_Config+0x15c>)
 8009a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a92:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	695b      	ldr	r3, [r3, #20]
 8009a9a:	492d      	ldr	r1, [pc, #180]	@ (8009b50 <RCCEx_PLL3_Config+0x15c>)
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009aa0:	4b2b      	ldr	r3, [pc, #172]	@ (8009b50 <RCCEx_PLL3_Config+0x15c>)
 8009aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aa4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	699b      	ldr	r3, [r3, #24]
 8009aac:	4928      	ldr	r1, [pc, #160]	@ (8009b50 <RCCEx_PLL3_Config+0x15c>)
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009ab2:	4b27      	ldr	r3, [pc, #156]	@ (8009b50 <RCCEx_PLL3_Config+0x15c>)
 8009ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab6:	4a26      	ldr	r2, [pc, #152]	@ (8009b50 <RCCEx_PLL3_Config+0x15c>)
 8009ab8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009abc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009abe:	4b24      	ldr	r3, [pc, #144]	@ (8009b50 <RCCEx_PLL3_Config+0x15c>)
 8009ac0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009ac2:	4b24      	ldr	r3, [pc, #144]	@ (8009b54 <RCCEx_PLL3_Config+0x160>)
 8009ac4:	4013      	ands	r3, r2
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	69d2      	ldr	r2, [r2, #28]
 8009aca:	00d2      	lsls	r2, r2, #3
 8009acc:	4920      	ldr	r1, [pc, #128]	@ (8009b50 <RCCEx_PLL3_Config+0x15c>)
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009ad2:	4b1f      	ldr	r3, [pc, #124]	@ (8009b50 <RCCEx_PLL3_Config+0x15c>)
 8009ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ad6:	4a1e      	ldr	r2, [pc, #120]	@ (8009b50 <RCCEx_PLL3_Config+0x15c>)
 8009ad8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009adc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d106      	bne.n	8009af2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8009b50 <RCCEx_PLL3_Config+0x15c>)
 8009ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ae8:	4a19      	ldr	r2, [pc, #100]	@ (8009b50 <RCCEx_PLL3_Config+0x15c>)
 8009aea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009aee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009af0:	e00f      	b.n	8009b12 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d106      	bne.n	8009b06 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009af8:	4b15      	ldr	r3, [pc, #84]	@ (8009b50 <RCCEx_PLL3_Config+0x15c>)
 8009afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009afc:	4a14      	ldr	r2, [pc, #80]	@ (8009b50 <RCCEx_PLL3_Config+0x15c>)
 8009afe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009b02:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009b04:	e005      	b.n	8009b12 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009b06:	4b12      	ldr	r3, [pc, #72]	@ (8009b50 <RCCEx_PLL3_Config+0x15c>)
 8009b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b0a:	4a11      	ldr	r2, [pc, #68]	@ (8009b50 <RCCEx_PLL3_Config+0x15c>)
 8009b0c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009b10:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009b12:	4b0f      	ldr	r3, [pc, #60]	@ (8009b50 <RCCEx_PLL3_Config+0x15c>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a0e      	ldr	r2, [pc, #56]	@ (8009b50 <RCCEx_PLL3_Config+0x15c>)
 8009b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b1e:	f7f8 ff5b 	bl	80029d8 <HAL_GetTick>
 8009b22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009b24:	e008      	b.n	8009b38 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009b26:	f7f8 ff57 	bl	80029d8 <HAL_GetTick>
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	1ad3      	subs	r3, r2, r3
 8009b30:	2b02      	cmp	r3, #2
 8009b32:	d901      	bls.n	8009b38 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009b34:	2303      	movs	r3, #3
 8009b36:	e006      	b.n	8009b46 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009b38:	4b05      	ldr	r3, [pc, #20]	@ (8009b50 <RCCEx_PLL3_Config+0x15c>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d0f0      	beq.n	8009b26 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3710      	adds	r7, #16
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	58024400 	.word	0x58024400
 8009b54:	ffff0007 	.word	0xffff0007

08009b58 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d071      	beq.n	8009c4e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d106      	bne.n	8009b84 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f007 ff12 	bl	80119a8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2202      	movs	r2, #2
 8009b88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	68db      	ldr	r3, [r3, #12]
 8009b92:	f003 0310 	and.w	r3, r3, #16
 8009b96:	2b10      	cmp	r3, #16
 8009b98:	d050      	beq.n	8009c3c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	22ca      	movs	r2, #202	@ 0xca
 8009ba0:	625a      	str	r2, [r3, #36]	@ 0x24
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	2253      	movs	r2, #83	@ 0x53
 8009ba8:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 f9a0 	bl	8009ef0 <RTC_EnterInitMode>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8009bb4:	7bfb      	ldrb	r3, [r7, #15]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d124      	bne.n	8009c04 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	6899      	ldr	r1, [r3, #8]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	4b24      	ldr	r3, [pc, #144]	@ (8009c58 <HAL_RTC_Init+0x100>)
 8009bc6:	400b      	ands	r3, r1
 8009bc8:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	6899      	ldr	r1, [r3, #8]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	685a      	ldr	r2, [r3, #4]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	691b      	ldr	r3, [r3, #16]
 8009bd8:	431a      	orrs	r2, r3
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	699b      	ldr	r3, [r3, #24]
 8009bde:	431a      	orrs	r2, r3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	430a      	orrs	r2, r1
 8009be6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	0419      	lsls	r1, r3, #16
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	68da      	ldr	r2, [r3, #12]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	430a      	orrs	r2, r1
 8009bf8:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 f9ac 	bl	8009f58 <RTC_ExitInitMode>
 8009c00:	4603      	mov	r3, r0
 8009c02:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8009c04:	7bfb      	ldrb	r3, [r7, #15]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d113      	bne.n	8009c32 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f022 0203 	bic.w	r2, r2, #3
 8009c18:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	69da      	ldr	r2, [r3, #28]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	695b      	ldr	r3, [r3, #20]
 8009c28:	431a      	orrs	r2, r3
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	430a      	orrs	r2, r1
 8009c30:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	22ff      	movs	r2, #255	@ 0xff
 8009c38:	625a      	str	r2, [r3, #36]	@ 0x24
 8009c3a:	e001      	b.n	8009c40 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009c40:	7bfb      	ldrb	r3, [r7, #15]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d103      	bne.n	8009c4e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2201      	movs	r2, #1
 8009c4a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 8009c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3710      	adds	r7, #16
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	ff8fffbf 	.word	0xff8fffbf

08009c5c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009c5c:	b590      	push	{r4, r7, lr}
 8009c5e:	b087      	sub	sp, #28
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d101      	bne.n	8009c76 <HAL_RTC_SetTime+0x1a>
 8009c72:	2302      	movs	r3, #2
 8009c74:	e089      	b.n	8009d8a <HAL_RTC_SetTime+0x12e>
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2201      	movs	r2, #1
 8009c7a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2202      	movs	r2, #2
 8009c82:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	22ca      	movs	r2, #202	@ 0xca
 8009c8c:	625a      	str	r2, [r3, #36]	@ 0x24
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	2253      	movs	r2, #83	@ 0x53
 8009c94:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009c96:	68f8      	ldr	r0, [r7, #12]
 8009c98:	f000 f92a 	bl	8009ef0 <RTC_EnterInitMode>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009ca0:	7cfb      	ldrb	r3, [r7, #19]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d161      	bne.n	8009d6a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d126      	bne.n	8009cfa <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	689b      	ldr	r3, [r3, #8]
 8009cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d102      	bne.n	8009cc0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f000 f985 	bl	8009fd4 <RTC_ByteToBcd2>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	785b      	ldrb	r3, [r3, #1]
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f000 f97e 	bl	8009fd4 <RTC_ByteToBcd2>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009cdc:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	789b      	ldrb	r3, [r3, #2]
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f000 f976 	bl	8009fd4 <RTC_ByteToBcd2>
 8009ce8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009cea:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	78db      	ldrb	r3, [r3, #3]
 8009cf2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	617b      	str	r3, [r7, #20]
 8009cf8:	e018      	b.n	8009d2c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	689b      	ldr	r3, [r3, #8]
 8009d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d102      	bne.n	8009d0e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	785b      	ldrb	r3, [r3, #1]
 8009d18:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009d1a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8009d1c:	68ba      	ldr	r2, [r7, #8]
 8009d1e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009d20:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	78db      	ldrb	r3, [r3, #3]
 8009d26:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	6979      	ldr	r1, [r7, #20]
 8009d32:	4b18      	ldr	r3, [pc, #96]	@ (8009d94 <HAL_RTC_SetTime+0x138>)
 8009d34:	400b      	ands	r3, r1
 8009d36:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	689a      	ldr	r2, [r3, #8]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009d46:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	6899      	ldr	r1, [r3, #8]
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	68da      	ldr	r2, [r3, #12]
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	691b      	ldr	r3, [r3, #16]
 8009d56:	431a      	orrs	r2, r3
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	430a      	orrs	r2, r1
 8009d5e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009d60:	68f8      	ldr	r0, [r7, #12]
 8009d62:	f000 f8f9 	bl	8009f58 <RTC_ExitInitMode>
 8009d66:	4603      	mov	r3, r0
 8009d68:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	22ff      	movs	r2, #255	@ 0xff
 8009d70:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8009d72:	7cfb      	ldrb	r3, [r7, #19]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d103      	bne.n	8009d80 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2200      	movs	r2, #0
 8009d84:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009d88:	7cfb      	ldrb	r3, [r7, #19]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	371c      	adds	r7, #28
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd90      	pop	{r4, r7, pc}
 8009d92:	bf00      	nop
 8009d94:	007f7f7f 	.word	0x007f7f7f

08009d98 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009d98:	b590      	push	{r4, r7, lr}
 8009d9a:	b087      	sub	sp, #28
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d101      	bne.n	8009db2 <HAL_RTC_SetDate+0x1a>
 8009dae:	2302      	movs	r3, #2
 8009db0:	e073      	b.n	8009e9a <HAL_RTC_SetDate+0x102>
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2201      	movs	r2, #1
 8009db6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2202      	movs	r2, #2
 8009dbe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d10e      	bne.n	8009de6 <HAL_RTC_SetDate+0x4e>
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	785b      	ldrb	r3, [r3, #1]
 8009dcc:	f003 0310 	and.w	r3, r3, #16
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d008      	beq.n	8009de6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	785b      	ldrb	r3, [r3, #1]
 8009dd8:	f023 0310 	bic.w	r3, r3, #16
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	330a      	adds	r3, #10
 8009de0:	b2da      	uxtb	r2, r3
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d11c      	bne.n	8009e26 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	78db      	ldrb	r3, [r3, #3]
 8009df0:	4618      	mov	r0, r3
 8009df2:	f000 f8ef 	bl	8009fd4 <RTC_ByteToBcd2>
 8009df6:	4603      	mov	r3, r0
 8009df8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	785b      	ldrb	r3, [r3, #1]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f000 f8e8 	bl	8009fd4 <RTC_ByteToBcd2>
 8009e04:	4603      	mov	r3, r0
 8009e06:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009e08:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	789b      	ldrb	r3, [r3, #2]
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f000 f8e0 	bl	8009fd4 <RTC_ByteToBcd2>
 8009e14:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009e16:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009e20:	4313      	orrs	r3, r2
 8009e22:	617b      	str	r3, [r7, #20]
 8009e24:	e00e      	b.n	8009e44 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	78db      	ldrb	r3, [r3, #3]
 8009e2a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	785b      	ldrb	r3, [r3, #1]
 8009e30:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009e32:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8009e34:	68ba      	ldr	r2, [r7, #8]
 8009e36:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009e38:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009e40:	4313      	orrs	r3, r2
 8009e42:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	22ca      	movs	r2, #202	@ 0xca
 8009e4a:	625a      	str	r2, [r3, #36]	@ 0x24
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	2253      	movs	r2, #83	@ 0x53
 8009e52:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009e54:	68f8      	ldr	r0, [r7, #12]
 8009e56:	f000 f84b 	bl	8009ef0 <RTC_EnterInitMode>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009e5e:	7cfb      	ldrb	r3, [r7, #19]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d10a      	bne.n	8009e7a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681a      	ldr	r2, [r3, #0]
 8009e68:	6979      	ldr	r1, [r7, #20]
 8009e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8009ea4 <HAL_RTC_SetDate+0x10c>)
 8009e6c:	400b      	ands	r3, r1
 8009e6e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009e70:	68f8      	ldr	r0, [r7, #12]
 8009e72:	f000 f871 	bl	8009f58 <RTC_ExitInitMode>
 8009e76:	4603      	mov	r3, r0
 8009e78:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	22ff      	movs	r2, #255	@ 0xff
 8009e80:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8009e82:	7cfb      	ldrb	r3, [r7, #19]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d103      	bne.n	8009e90 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2200      	movs	r2, #0
 8009e94:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009e98:	7cfb      	ldrb	r3, [r7, #19]


}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	371c      	adds	r7, #28
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd90      	pop	{r4, r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	00ffff3f 	.word	0x00ffff3f

08009ea8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8009eec <HAL_RTC_WaitForSynchro+0x44>)
 8009eb6:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8009eb8:	f7f8 fd8e 	bl	80029d8 <HAL_GetTick>
 8009ebc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009ebe:	e009      	b.n	8009ed4 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009ec0:	f7f8 fd8a 	bl	80029d8 <HAL_GetTick>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	1ad3      	subs	r3, r2, r3
 8009eca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009ece:	d901      	bls.n	8009ed4 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8009ed0:	2303      	movs	r3, #3
 8009ed2:	e007      	b.n	8009ee4 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	f003 0320 	and.w	r3, r3, #32
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d0ee      	beq.n	8009ec0 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8009ee2:	2300      	movs	r3, #0
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3710      	adds	r7, #16
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}
 8009eec:	0003ff5f 	.word	0x0003ff5f

08009ef0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d120      	bne.n	8009f4c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8009f12:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009f14:	f7f8 fd60 	bl	80029d8 <HAL_GetTick>
 8009f18:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009f1a:	e00d      	b.n	8009f38 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009f1c:	f7f8 fd5c 	bl	80029d8 <HAL_GetTick>
 8009f20:	4602      	mov	r2, r0
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	1ad3      	subs	r3, r2, r3
 8009f26:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009f2a:	d905      	bls.n	8009f38 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009f2c:	2303      	movs	r3, #3
 8009f2e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2203      	movs	r2, #3
 8009f34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d102      	bne.n	8009f4c <RTC_EnterInitMode+0x5c>
 8009f46:	7bfb      	ldrb	r3, [r7, #15]
 8009f48:	2b03      	cmp	r3, #3
 8009f4a:	d1e7      	bne.n	8009f1c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8009f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3710      	adds	r7, #16
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
	...

08009f58 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f60:	2300      	movs	r3, #0
 8009f62:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8009f64:	4b1a      	ldr	r3, [pc, #104]	@ (8009fd0 <RTC_ExitInitMode+0x78>)
 8009f66:	68db      	ldr	r3, [r3, #12]
 8009f68:	4a19      	ldr	r2, [pc, #100]	@ (8009fd0 <RTC_ExitInitMode+0x78>)
 8009f6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f6e:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009f70:	4b17      	ldr	r3, [pc, #92]	@ (8009fd0 <RTC_ExitInitMode+0x78>)
 8009f72:	689b      	ldr	r3, [r3, #8]
 8009f74:	f003 0320 	and.w	r3, r3, #32
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d10c      	bne.n	8009f96 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f7ff ff93 	bl	8009ea8 <HAL_RTC_WaitForSynchro>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d01e      	beq.n	8009fc6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2203      	movs	r2, #3
 8009f8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8009f90:	2303      	movs	r3, #3
 8009f92:	73fb      	strb	r3, [r7, #15]
 8009f94:	e017      	b.n	8009fc6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009f96:	4b0e      	ldr	r3, [pc, #56]	@ (8009fd0 <RTC_ExitInitMode+0x78>)
 8009f98:	689b      	ldr	r3, [r3, #8]
 8009f9a:	4a0d      	ldr	r2, [pc, #52]	@ (8009fd0 <RTC_ExitInitMode+0x78>)
 8009f9c:	f023 0320 	bic.w	r3, r3, #32
 8009fa0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f7ff ff80 	bl	8009ea8 <HAL_RTC_WaitForSynchro>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d005      	beq.n	8009fba <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2203      	movs	r2, #3
 8009fb2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8009fb6:	2303      	movs	r3, #3
 8009fb8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009fba:	4b05      	ldr	r3, [pc, #20]	@ (8009fd0 <RTC_ExitInitMode+0x78>)
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	4a04      	ldr	r2, [pc, #16]	@ (8009fd0 <RTC_ExitInitMode+0x78>)
 8009fc0:	f043 0320 	orr.w	r3, r3, #32
 8009fc4:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3710      	adds	r7, #16
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}
 8009fd0:	58004000 	.word	0x58004000

08009fd4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b085      	sub	sp, #20
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	4603      	mov	r3, r0
 8009fdc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8009fe2:	79fb      	ldrb	r3, [r7, #7]
 8009fe4:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8009fe6:	e005      	b.n	8009ff4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	3301      	adds	r3, #1
 8009fec:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8009fee:	7afb      	ldrb	r3, [r7, #11]
 8009ff0:	3b0a      	subs	r3, #10
 8009ff2:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8009ff4:	7afb      	ldrb	r3, [r7, #11]
 8009ff6:	2b09      	cmp	r3, #9
 8009ff8:	d8f6      	bhi.n	8009fe8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	b2db      	uxtb	r3, r3
 8009ffe:	011b      	lsls	r3, r3, #4
 800a000:	b2da      	uxtb	r2, r3
 800a002:	7afb      	ldrb	r3, [r7, #11]
 800a004:	4313      	orrs	r3, r2
 800a006:	b2db      	uxtb	r3, r3
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3714      	adds	r7, #20
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(const RTC_HandleTypeDef * hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800a014:	b480      	push	{r7}
 800a016:	b087      	sub	sp, #28
 800a018:	af00      	add	r7, sp, #0
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	60b9      	str	r1, [r7, #8]
 800a01e:	607a      	str	r2, [r7, #4]

  /* Point on address of first backup register */
#if defined(TAMP)
  tmp = (uint32_t) &(((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#else
  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	3350      	adds	r3, #80	@ 0x50
 800a026:	617b      	str	r3, [r7, #20]
#endif /* TAMP */

  tmp += (BackupRegister * 4U);
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	697a      	ldr	r2, [r7, #20]
 800a02e:	4413      	add	r3, r2
 800a030:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	601a      	str	r2, [r3, #0]
}
 800a038:	bf00      	nop
 800a03a:	371c      	adds	r7, #28
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(const RTC_HandleTypeDef * hrtc, uint32_t BackupRegister)
{
 800a044:	b480      	push	{r7}
 800a046:	b085      	sub	sp, #20
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]

  /* Point on address of first backup register */
#if defined(TAMP)
  tmp = (uint32_t) &(((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#else
  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	3350      	adds	r3, #80	@ 0x50
 800a054:	60fb      	str	r3, [r7, #12]
#endif /* TAMP */

  tmp += (BackupRegister * 4U);
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	68fa      	ldr	r2, [r7, #12]
 800a05c:	4413      	add	r3, r2
 800a05e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
}
 800a064:	4618      	mov	r0, r3
 800a066:	3714      	adds	r7, #20
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b08a      	sub	sp, #40	@ 0x28
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d101      	bne.n	800a082 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a07e:	2301      	movs	r3, #1
 800a080:	e075      	b.n	800a16e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d105      	bne.n	800a09a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2200      	movs	r2, #0
 800a092:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f007 fdc1 	bl	8011c1c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2204      	movs	r2, #4
 800a09e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 f868 	bl	800a178 <HAL_SD_InitCard>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d001      	beq.n	800a0b2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e05d      	b.n	800a16e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800a0b2:	f107 0308 	add.w	r3, r7, #8
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 fdb5 	bl	800ac28 <HAL_SD_GetCardStatus>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d001      	beq.n	800a0c8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	e052      	b.n	800a16e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800a0c8:	7e3b      	ldrb	r3, [r7, #24]
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a0ce:	7e7b      	ldrb	r3, [r7, #25]
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d10a      	bne.n	800a0f2 <HAL_SD_Init+0x82>
 800a0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d102      	bne.n	800a0e8 <HAL_SD_Init+0x78>
 800a0e2:	6a3b      	ldr	r3, [r7, #32]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d004      	beq.n	800a0f2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a0ee:	659a      	str	r2, [r3, #88]	@ 0x58
 800a0f0:	e00b      	b.n	800a10a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d104      	bne.n	800a104 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a100:	659a      	str	r2, [r3, #88]	@ 0x58
 800a102:	e002      	b.n	800a10a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2200      	movs	r2, #0
 800a108:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	68db      	ldr	r3, [r3, #12]
 800a10e:	4619      	mov	r1, r3
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 fe73 	bl	800adfc <HAL_SD_ConfigWideBusOperation>
 800a116:	4603      	mov	r3, r0
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d001      	beq.n	800a120 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	e026      	b.n	800a16e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800a120:	f7f8 fc5a 	bl	80029d8 <HAL_GetTick>
 800a124:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a126:	e011      	b.n	800a14c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800a128:	f7f8 fc56 	bl	80029d8 <HAL_GetTick>
 800a12c:	4602      	mov	r2, r0
 800a12e:	69fb      	ldr	r3, [r7, #28]
 800a130:	1ad3      	subs	r3, r2, r3
 800a132:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a136:	d109      	bne.n	800a14c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a13e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2201      	movs	r2, #1
 800a144:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800a148:	2303      	movs	r3, #3
 800a14a:	e010      	b.n	800a16e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 ff67 	bl	800b020 <HAL_SD_GetCardState>
 800a152:	4603      	mov	r3, r0
 800a154:	2b04      	cmp	r3, #4
 800a156:	d1e7      	bne.n	800a128 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2200      	movs	r2, #0
 800a15c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2200      	movs	r2, #0
 800a162:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2201      	movs	r2, #1
 800a168:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800a16c:	2300      	movs	r3, #0
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3728      	adds	r7, #40	@ 0x28
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
	...

0800a178 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a178:	b590      	push	{r4, r7, lr}
 800a17a:	b08d      	sub	sp, #52	@ 0x34
 800a17c:	af02      	add	r7, sp, #8
 800a17e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a180:	2300      	movs	r3, #0
 800a182:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a184:	2300      	movs	r3, #0
 800a186:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a188:	2300      	movs	r3, #0
 800a18a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a18c:	2300      	movs	r3, #0
 800a18e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a190:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800a194:	f04f 0100 	mov.w	r1, #0
 800a198:	f7fe f9ea 	bl	8008570 <HAL_RCCEx_GetPeriphCLKFreq>
 800a19c:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800a19e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d109      	bne.n	800a1b8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800a1b2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	e070      	b.n	800a29a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800a1b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ba:	0a1b      	lsrs	r3, r3, #8
 800a1bc:	4a39      	ldr	r2, [pc, #228]	@ (800a2a4 <HAL_SD_InitCard+0x12c>)
 800a1be:	fba2 2303 	umull	r2, r3, r2, r3
 800a1c2:	091b      	lsrs	r3, r3, #4
 800a1c4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681c      	ldr	r4, [r3, #0]
 800a1ca:	466a      	mov	r2, sp
 800a1cc:	f107 0318 	add.w	r3, r7, #24
 800a1d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a1d4:	e882 0003 	stmia.w	r2, {r0, r1}
 800a1d8:	f107 030c 	add.w	r3, r7, #12
 800a1dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a1de:	4620      	mov	r0, r4
 800a1e0:	f003 fbf2 	bl	800d9c8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f003 fc35 	bl	800da58 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800a1ee:	69fb      	ldr	r3, [r7, #28]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d005      	beq.n	800a200 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800a1f4:	69fb      	ldr	r3, [r7, #28]
 800a1f6:	005b      	lsls	r3, r3, #1
 800a1f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1fe:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800a200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a202:	2b00      	cmp	r3, #0
 800a204:	d007      	beq.n	800a216 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800a206:	4a28      	ldr	r2, [pc, #160]	@ (800a2a8 <HAL_SD_InitCard+0x130>)
 800a208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a20a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a20e:	3301      	adds	r3, #1
 800a210:	4618      	mov	r0, r3
 800a212:	f7f8 fbed 	bl	80029f0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 fff0 	bl	800b1fc <SD_PowerON>
 800a21c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a21e:	6a3b      	ldr	r3, [r7, #32]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d00b      	beq.n	800a23c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2201      	movs	r2, #1
 800a228:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a230:	6a3b      	ldr	r3, [r7, #32]
 800a232:	431a      	orrs	r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a238:	2301      	movs	r3, #1
 800a23a:	e02e      	b.n	800a29a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f000 ff0f 	bl	800b060 <SD_InitCard>
 800a242:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a244:	6a3b      	ldr	r3, [r7, #32]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d00b      	beq.n	800a262 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2201      	movs	r2, #1
 800a24e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a256:	6a3b      	ldr	r3, [r7, #32]
 800a258:	431a      	orrs	r2, r3
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a25e:	2301      	movs	r3, #1
 800a260:	e01b      	b.n	800a29a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a26a:	4618      	mov	r0, r3
 800a26c:	f003 fc8a 	bl	800db84 <SDMMC_CmdBlockLength>
 800a270:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a272:	6a3b      	ldr	r3, [r7, #32]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d00f      	beq.n	800a298 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4a0b      	ldr	r2, [pc, #44]	@ (800a2ac <HAL_SD_InitCard+0x134>)
 800a27e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a284:	6a3b      	ldr	r3, [r7, #32]
 800a286:	431a      	orrs	r2, r3
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2201      	movs	r2, #1
 800a290:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800a294:	2301      	movs	r3, #1
 800a296:	e000      	b.n	800a29a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	372c      	adds	r7, #44	@ 0x2c
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd90      	pop	{r4, r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	014f8b59 	.word	0x014f8b59
 800a2a8:	00012110 	.word	0x00012110
 800a2ac:	1fe00fff 	.word	0x1fe00fff

0800a2b0 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b092      	sub	sp, #72	@ 0x48
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	607a      	str	r2, [r7, #4]
 800a2bc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a2be:	f7f8 fb8b 	bl	80029d8 <HAL_GetTick>
 800a2c2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d107      	bne.n	800a2e2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2d6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e167      	b.n	800a5b2 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a2e8:	b2db      	uxtb	r3, r3
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	f040 815a 	bne.w	800a5a4 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a2f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	441a      	add	r2, r3
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a300:	429a      	cmp	r2, r3
 800a302:	d907      	bls.n	800a314 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a308:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800a310:	2301      	movs	r3, #1
 800a312:	e14e      	b.n	800a5b2 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2203      	movs	r2, #3
 800a318:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2200      	movs	r2, #0
 800a322:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a328:	2b01      	cmp	r3, #1
 800a32a:	d002      	beq.n	800a332 <HAL_SD_ReadBlocks+0x82>
    {
      add *= BLOCKSIZE;
 800a32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a32e:	025b      	lsls	r3, r3, #9
 800a330:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a332:	f04f 33ff 	mov.w	r3, #4294967295
 800a336:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	025b      	lsls	r3, r3, #9
 800a33c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a33e:	2390      	movs	r3, #144	@ 0x90
 800a340:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a342:	2302      	movs	r3, #2
 800a344:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a346:	2300      	movs	r3, #0
 800a348:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a34a:	2300      	movs	r3, #0
 800a34c:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f107 0214 	add.w	r2, r7, #20
 800a356:	4611      	mov	r1, r2
 800a358:	4618      	mov	r0, r3
 800a35a:	f003 fbe7 	bl	800db2c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	68da      	ldr	r2, [r3, #12]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a36c:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	2b01      	cmp	r3, #1
 800a372:	d90a      	bls.n	800a38a <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2202      	movs	r2, #2
 800a378:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a380:	4618      	mov	r0, r3
 800a382:	f003 fc45 	bl	800dc10 <SDMMC_CmdReadMultiBlock>
 800a386:	6478      	str	r0, [r7, #68]	@ 0x44
 800a388:	e009      	b.n	800a39e <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2201      	movs	r2, #1
 800a38e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a396:	4618      	mov	r0, r3
 800a398:	f003 fc17 	bl	800dbca <SDMMC_CmdReadSingleBlock>
 800a39c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a39e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d012      	beq.n	800a3ca <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a84      	ldr	r2, [pc, #528]	@ (800a5bc <HAL_SD_ReadBlocks+0x30c>)
 800a3aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a3b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3b2:	431a      	orrs	r2, r3
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	e0f3      	b.n	800a5b2 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800a3ca:	69bb      	ldr	r3, [r7, #24]
 800a3cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a3ce:	e058      	b.n	800a482 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= SDMMC_FIFO_SIZE))
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d033      	beq.n	800a446 <HAL_SD_ReadBlocks+0x196>
 800a3de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3e0:	2b1f      	cmp	r3, #31
 800a3e2:	d930      	bls.n	800a446 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3e8:	e027      	b.n	800a43a <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f003 fb14 	bl	800da1c <SDMMC_ReadFIFO>
 800a3f4:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800a3f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3f8:	b2da      	uxtb	r2, r3
 800a3fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3fc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a3fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a400:	3301      	adds	r3, #1
 800a402:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800a404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a406:	0a1b      	lsrs	r3, r3, #8
 800a408:	b2da      	uxtb	r2, r3
 800a40a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a40c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a40e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a410:	3301      	adds	r3, #1
 800a412:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800a414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a416:	0c1b      	lsrs	r3, r3, #16
 800a418:	b2da      	uxtb	r2, r3
 800a41a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a41c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a41e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a420:	3301      	adds	r3, #1
 800a422:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800a424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a426:	0e1b      	lsrs	r3, r3, #24
 800a428:	b2da      	uxtb	r2, r3
 800a42a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a42c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a42e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a430:	3301      	adds	r3, #1
 800a432:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800a434:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a436:	3301      	adds	r3, #1
 800a438:	643b      	str	r3, [r7, #64]	@ 0x40
 800a43a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a43c:	2b07      	cmp	r3, #7
 800a43e:	d9d4      	bls.n	800a3ea <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 800a440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a442:	3b20      	subs	r3, #32
 800a444:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800a446:	f7f8 fac7 	bl	80029d8 <HAL_GetTick>
 800a44a:	4602      	mov	r2, r0
 800a44c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a44e:	1ad3      	subs	r3, r2, r3
 800a450:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a452:	429a      	cmp	r2, r3
 800a454:	d902      	bls.n	800a45c <HAL_SD_ReadBlocks+0x1ac>
 800a456:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d112      	bne.n	800a482 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a56      	ldr	r2, [pc, #344]	@ (800a5bc <HAL_SD_ReadBlocks+0x30c>)
 800a462:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a468:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2201      	movs	r2, #1
 800a474:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2200      	movs	r2, #0
 800a47c:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800a47e:	2303      	movs	r3, #3
 800a480:	e097      	b.n	800a5b2 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a488:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d09f      	beq.n	800a3d0 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	68da      	ldr	r2, [r3, #12]
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a49e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d022      	beq.n	800a4f4 <HAL_SD_ReadBlocks+0x244>
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d91f      	bls.n	800a4f4 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4b8:	2b03      	cmp	r3, #3
 800a4ba:	d01b      	beq.n	800a4f4 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f003 fc0f 	bl	800dce4 <SDMMC_CmdStopTransfer>
 800a4c6:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800a4c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d012      	beq.n	800a4f4 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a3a      	ldr	r2, [pc, #232]	@ (800a5bc <HAL_SD_ReadBlocks+0x30c>)
 800a4d4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a4da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4dc:	431a      	orrs	r2, r3
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	e05e      	b.n	800a5b2 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4fa:	f003 0308 	and.w	r3, r3, #8
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d012      	beq.n	800a528 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a2d      	ldr	r2, [pc, #180]	@ (800a5bc <HAL_SD_ReadBlocks+0x30c>)
 800a508:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a50e:	f043 0208 	orr.w	r2, r3, #8
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2201      	movs	r2, #1
 800a51a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2200      	movs	r2, #0
 800a522:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a524:	2301      	movs	r3, #1
 800a526:	e044      	b.n	800a5b2 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a52e:	f003 0302 	and.w	r3, r3, #2
 800a532:	2b00      	cmp	r3, #0
 800a534:	d012      	beq.n	800a55c <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a20      	ldr	r2, [pc, #128]	@ (800a5bc <HAL_SD_ReadBlocks+0x30c>)
 800a53c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a542:	f043 0202 	orr.w	r2, r3, #2
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2201      	movs	r2, #1
 800a54e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2200      	movs	r2, #0
 800a556:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a558:	2301      	movs	r3, #1
 800a55a:	e02a      	b.n	800a5b2 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a562:	f003 0320 	and.w	r3, r3, #32
 800a566:	2b00      	cmp	r3, #0
 800a568:	d012      	beq.n	800a590 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4a13      	ldr	r2, [pc, #76]	@ (800a5bc <HAL_SD_ReadBlocks+0x30c>)
 800a570:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a576:	f043 0220 	orr.w	r2, r3, #32
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2201      	movs	r2, #1
 800a582:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2200      	movs	r2, #0
 800a58a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a58c:	2301      	movs	r3, #1
 800a58e:	e010      	b.n	800a5b2 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a0a      	ldr	r2, [pc, #40]	@ (800a5c0 <HAL_SD_ReadBlocks+0x310>)
 800a596:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2201      	movs	r2, #1
 800a59c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	e006      	b.n	800a5b2 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5a8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a5b0:	2301      	movs	r3, #1
  }
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3748      	adds	r7, #72	@ 0x48
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	bf00      	nop
 800a5bc:	1fe00fff 	.word	0x1fe00fff
 800a5c0:	18000f3a 	.word	0x18000f3a

0800a5c4 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b092      	sub	sp, #72	@ 0x48
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	607a      	str	r2, [r7, #4]
 800a5d0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a5d2:	f7f8 fa01 	bl	80029d8 <HAL_GetTick>
 800a5d6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d107      	bne.n	800a5f6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5ea:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e16b      	b.n	800a8ce <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	f040 815e 	bne.w	800a8c0 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2200      	movs	r2, #0
 800a608:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a60a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	441a      	add	r2, r3
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a614:	429a      	cmp	r2, r3
 800a616:	d907      	bls.n	800a628 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a61c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	e152      	b.n	800a8ce <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2203      	movs	r2, #3
 800a62c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	2200      	movs	r2, #0
 800a636:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d002      	beq.n	800a646 <HAL_SD_WriteBlocks+0x82>
    {
      add *= BLOCKSIZE;
 800a640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a642:	025b      	lsls	r3, r3, #9
 800a644:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a646:	f04f 33ff 	mov.w	r3, #4294967295
 800a64a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	025b      	lsls	r3, r3, #9
 800a650:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a652:	2390      	movs	r3, #144	@ 0x90
 800a654:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a656:	2300      	movs	r3, #0
 800a658:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a65a:	2300      	movs	r3, #0
 800a65c:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a65e:	2300      	movs	r3, #0
 800a660:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f107 0218 	add.w	r2, r7, #24
 800a66a:	4611      	mov	r1, r2
 800a66c:	4618      	mov	r0, r3
 800a66e:	f003 fa5d 	bl	800db2c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	68da      	ldr	r2, [r3, #12]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a680:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	2b01      	cmp	r3, #1
 800a686:	d90a      	bls.n	800a69e <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2220      	movs	r2, #32
 800a68c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a694:	4618      	mov	r0, r3
 800a696:	f003 fb01 	bl	800dc9c <SDMMC_CmdWriteMultiBlock>
 800a69a:	6478      	str	r0, [r7, #68]	@ 0x44
 800a69c:	e009      	b.n	800a6b2 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	2210      	movs	r2, #16
 800a6a2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f003 fad3 	bl	800dc56 <SDMMC_CmdWriteSingleBlock>
 800a6b0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a6b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d012      	beq.n	800a6de <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4a86      	ldr	r2, [pc, #536]	@ (800a8d8 <HAL_SD_WriteBlocks+0x314>)
 800a6be:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a6c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6c6:	431a      	orrs	r2, r3
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	e0f7      	b.n	800a8ce <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800a6de:	69fb      	ldr	r3, [r7, #28]
 800a6e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800a6e2:	e05c      	b.n	800a79e <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= SDMMC_FIFO_SIZE))
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d037      	beq.n	800a762 <HAL_SD_WriteBlocks+0x19e>
 800a6f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6f4:	2b1f      	cmp	r3, #31
 800a6f6:	d934      	bls.n	800a762 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	643b      	str	r3, [r7, #64]	@ 0x40
 800a6fc:	e02b      	b.n	800a756 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800a6fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a700:	781b      	ldrb	r3, [r3, #0]
 800a702:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a706:	3301      	adds	r3, #1
 800a708:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800a70a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	021a      	lsls	r2, r3, #8
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	4313      	orrs	r3, r2
 800a714:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a718:	3301      	adds	r3, #1
 800a71a:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800a71c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a71e:	781b      	ldrb	r3, [r3, #0]
 800a720:	041a      	lsls	r2, r3, #16
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	4313      	orrs	r3, r2
 800a726:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a72a:	3301      	adds	r3, #1
 800a72c:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800a72e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	061a      	lsls	r2, r3, #24
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	4313      	orrs	r3, r2
 800a738:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a73a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a73c:	3301      	adds	r3, #1
 800a73e:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f107 0214 	add.w	r2, r7, #20
 800a748:	4611      	mov	r1, r2
 800a74a:	4618      	mov	r0, r3
 800a74c:	f003 f973 	bl	800da36 <SDMMC_WriteFIFO>
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800a750:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a752:	3301      	adds	r3, #1
 800a754:	643b      	str	r3, [r7, #64]	@ 0x40
 800a756:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a758:	2b07      	cmp	r3, #7
 800a75a:	d9d0      	bls.n	800a6fe <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 800a75c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a75e:	3b20      	subs	r3, #32
 800a760:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800a762:	f7f8 f939 	bl	80029d8 <HAL_GetTick>
 800a766:	4602      	mov	r2, r0
 800a768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a76a:	1ad3      	subs	r3, r2, r3
 800a76c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a76e:	429a      	cmp	r2, r3
 800a770:	d902      	bls.n	800a778 <HAL_SD_WriteBlocks+0x1b4>
 800a772:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a774:	2b00      	cmp	r3, #0
 800a776:	d112      	bne.n	800a79e <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a56      	ldr	r2, [pc, #344]	@ (800a8d8 <HAL_SD_WriteBlocks+0x314>)
 800a77e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a784:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a786:	431a      	orrs	r2, r3
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2201      	movs	r2, #1
 800a790:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2200      	movs	r2, #0
 800a798:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800a79a:	2303      	movs	r3, #3
 800a79c:	e097      	b.n	800a8ce <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7a4:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d09b      	beq.n	800a6e4 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	68da      	ldr	r2, [r3, #12]
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a7ba:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d022      	beq.n	800a810 <HAL_SD_WriteBlocks+0x24c>
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d91f      	bls.n	800a810 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7d4:	2b03      	cmp	r3, #3
 800a7d6:	d01b      	beq.n	800a810 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f003 fa81 	bl	800dce4 <SDMMC_CmdStopTransfer>
 800a7e2:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800a7e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d012      	beq.n	800a810 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4a3a      	ldr	r2, [pc, #232]	@ (800a8d8 <HAL_SD_WriteBlocks+0x314>)
 800a7f0:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a7f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7f8:	431a      	orrs	r2, r3
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2201      	movs	r2, #1
 800a802:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2200      	movs	r2, #0
 800a80a:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800a80c:	2301      	movs	r3, #1
 800a80e:	e05e      	b.n	800a8ce <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a816:	f003 0308 	and.w	r3, r3, #8
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d012      	beq.n	800a844 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4a2d      	ldr	r2, [pc, #180]	@ (800a8d8 <HAL_SD_WriteBlocks+0x314>)
 800a824:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a82a:	f043 0208 	orr.w	r2, r3, #8
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2201      	movs	r2, #1
 800a836:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2200      	movs	r2, #0
 800a83e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a840:	2301      	movs	r3, #1
 800a842:	e044      	b.n	800a8ce <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a84a:	f003 0302 	and.w	r3, r3, #2
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d012      	beq.n	800a878 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4a20      	ldr	r2, [pc, #128]	@ (800a8d8 <HAL_SD_WriteBlocks+0x314>)
 800a858:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a85e:	f043 0202 	orr.w	r2, r3, #2
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2201      	movs	r2, #1
 800a86a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2200      	movs	r2, #0
 800a872:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a874:	2301      	movs	r3, #1
 800a876:	e02a      	b.n	800a8ce <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a87e:	f003 0310 	and.w	r3, r3, #16
 800a882:	2b00      	cmp	r3, #0
 800a884:	d012      	beq.n	800a8ac <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a13      	ldr	r2, [pc, #76]	@ (800a8d8 <HAL_SD_WriteBlocks+0x314>)
 800a88c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a892:	f043 0210 	orr.w	r2, r3, #16
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2201      	movs	r2, #1
 800a89e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	e010      	b.n	800a8ce <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4a0a      	ldr	r2, [pc, #40]	@ (800a8dc <HAL_SD_WriteBlocks+0x318>)
 800a8b2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	e006      	b.n	800a8ce <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8c4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a8cc:	2301      	movs	r3, #1
  }
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3748      	adds	r7, #72	@ 0x48
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	1fe00fff 	.word	0x1fe00fff
 800a8dc:	18000f3a 	.word	0x18000f3a

0800a8e0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b083      	sub	sp, #12
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a8ee:	0f9b      	lsrs	r3, r3, #30
 800a8f0:	b2da      	uxtb	r2, r3
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a8fa:	0e9b      	lsrs	r3, r3, #26
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	f003 030f 	and.w	r3, r3, #15
 800a902:	b2da      	uxtb	r2, r3
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a90c:	0e1b      	lsrs	r3, r3, #24
 800a90e:	b2db      	uxtb	r3, r3
 800a910:	f003 0303 	and.w	r3, r3, #3
 800a914:	b2da      	uxtb	r2, r3
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a91e:	0c1b      	lsrs	r3, r3, #16
 800a920:	b2da      	uxtb	r2, r3
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a92a:	0a1b      	lsrs	r3, r3, #8
 800a92c:	b2da      	uxtb	r2, r3
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a936:	b2da      	uxtb	r2, r3
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a940:	0d1b      	lsrs	r3, r3, #20
 800a942:	b29a      	uxth	r2, r3
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a94c:	0c1b      	lsrs	r3, r3, #16
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	f003 030f 	and.w	r3, r3, #15
 800a954:	b2da      	uxtb	r2, r3
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a95e:	0bdb      	lsrs	r3, r3, #15
 800a960:	b2db      	uxtb	r3, r3
 800a962:	f003 0301 	and.w	r3, r3, #1
 800a966:	b2da      	uxtb	r2, r3
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a970:	0b9b      	lsrs	r3, r3, #14
 800a972:	b2db      	uxtb	r3, r3
 800a974:	f003 0301 	and.w	r3, r3, #1
 800a978:	b2da      	uxtb	r2, r3
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a982:	0b5b      	lsrs	r3, r3, #13
 800a984:	b2db      	uxtb	r3, r3
 800a986:	f003 0301 	and.w	r3, r3, #1
 800a98a:	b2da      	uxtb	r2, r3
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a994:	0b1b      	lsrs	r3, r3, #12
 800a996:	b2db      	uxtb	r3, r3
 800a998:	f003 0301 	and.w	r3, r3, #1
 800a99c:	b2da      	uxtb	r2, r3
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d163      	bne.n	800aa78 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a9b4:	009a      	lsls	r2, r3, #2
 800a9b6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a9ba:	4013      	ands	r3, r2
 800a9bc:	687a      	ldr	r2, [r7, #4]
 800a9be:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800a9c0:	0f92      	lsrs	r2, r2, #30
 800a9c2:	431a      	orrs	r2, r3
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9cc:	0edb      	lsrs	r3, r3, #27
 800a9ce:	b2db      	uxtb	r3, r3
 800a9d0:	f003 0307 	and.w	r3, r3, #7
 800a9d4:	b2da      	uxtb	r2, r3
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9de:	0e1b      	lsrs	r3, r3, #24
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	f003 0307 	and.w	r3, r3, #7
 800a9e6:	b2da      	uxtb	r2, r3
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9f0:	0d5b      	lsrs	r3, r3, #21
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	f003 0307 	and.w	r3, r3, #7
 800a9f8:	b2da      	uxtb	r2, r3
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa02:	0c9b      	lsrs	r3, r3, #18
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	f003 0307 	and.w	r3, r3, #7
 800aa0a:	b2da      	uxtb	r2, r3
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa14:	0bdb      	lsrs	r3, r3, #15
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	f003 0307 	and.w	r3, r3, #7
 800aa1c:	b2da      	uxtb	r2, r3
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	691b      	ldr	r3, [r3, #16]
 800aa26:	1c5a      	adds	r2, r3, #1
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	7e1b      	ldrb	r3, [r3, #24]
 800aa30:	b2db      	uxtb	r3, r3
 800aa32:	f003 0307 	and.w	r3, r3, #7
 800aa36:	3302      	adds	r3, #2
 800aa38:	2201      	movs	r2, #1
 800aa3a:	fa02 f303 	lsl.w	r3, r2, r3
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800aa42:	fb03 f202 	mul.w	r2, r3, r2
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	7a1b      	ldrb	r3, [r3, #8]
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	f003 030f 	and.w	r3, r3, #15
 800aa54:	2201      	movs	r2, #1
 800aa56:	409a      	lsls	r2, r3
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800aa64:	0a52      	lsrs	r2, r2, #9
 800aa66:	fb03 f202 	mul.w	r2, r3, r2
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aa74:	655a      	str	r2, [r3, #84]	@ 0x54
 800aa76:	e031      	b.n	800aadc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d11d      	bne.n	800aabc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa84:	041b      	lsls	r3, r3, #16
 800aa86:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa8e:	0c1b      	lsrs	r3, r3, #16
 800aa90:	431a      	orrs	r2, r3
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	691b      	ldr	r3, [r3, #16]
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	029a      	lsls	r2, r3, #10
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aab0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	655a      	str	r2, [r3, #84]	@ 0x54
 800aaba:	e00f      	b.n	800aadc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a58      	ldr	r2, [pc, #352]	@ (800ac24 <HAL_SD_GetCardCSD+0x344>)
 800aac2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aac8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2201      	movs	r2, #1
 800aad4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800aad8:	2301      	movs	r3, #1
 800aada:	e09d      	b.n	800ac18 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aae0:	0b9b      	lsrs	r3, r3, #14
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	f003 0301 	and.w	r3, r3, #1
 800aae8:	b2da      	uxtb	r2, r3
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aaf2:	09db      	lsrs	r3, r3, #7
 800aaf4:	b2db      	uxtb	r3, r3
 800aaf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aafa:	b2da      	uxtb	r2, r3
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab0a:	b2da      	uxtb	r2, r3
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab14:	0fdb      	lsrs	r3, r3, #31
 800ab16:	b2da      	uxtb	r2, r3
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab20:	0f5b      	lsrs	r3, r3, #29
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	f003 0303 	and.w	r3, r3, #3
 800ab28:	b2da      	uxtb	r2, r3
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab32:	0e9b      	lsrs	r3, r3, #26
 800ab34:	b2db      	uxtb	r3, r3
 800ab36:	f003 0307 	and.w	r3, r3, #7
 800ab3a:	b2da      	uxtb	r2, r3
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab44:	0d9b      	lsrs	r3, r3, #22
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	f003 030f 	and.w	r3, r3, #15
 800ab4c:	b2da      	uxtb	r2, r3
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab56:	0d5b      	lsrs	r3, r3, #21
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	f003 0301 	and.w	r3, r3, #1
 800ab5e:	b2da      	uxtb	r2, r3
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab72:	0c1b      	lsrs	r3, r3, #16
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	f003 0301 	and.w	r3, r3, #1
 800ab7a:	b2da      	uxtb	r2, r3
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab86:	0bdb      	lsrs	r3, r3, #15
 800ab88:	b2db      	uxtb	r3, r3
 800ab8a:	f003 0301 	and.w	r3, r3, #1
 800ab8e:	b2da      	uxtb	r2, r3
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab9a:	0b9b      	lsrs	r3, r3, #14
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	f003 0301 	and.w	r3, r3, #1
 800aba2:	b2da      	uxtb	r2, r3
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800abae:	0b5b      	lsrs	r3, r3, #13
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	f003 0301 	and.w	r3, r3, #1
 800abb6:	b2da      	uxtb	r2, r3
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800abc2:	0b1b      	lsrs	r3, r3, #12
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	f003 0301 	and.w	r3, r3, #1
 800abca:	b2da      	uxtb	r2, r3
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800abd6:	0a9b      	lsrs	r3, r3, #10
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	f003 0303 	and.w	r3, r3, #3
 800abde:	b2da      	uxtb	r2, r3
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800abea:	0a1b      	lsrs	r3, r3, #8
 800abec:	b2db      	uxtb	r3, r3
 800abee:	f003 0303 	and.w	r3, r3, #3
 800abf2:	b2da      	uxtb	r2, r3
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800abfe:	085b      	lsrs	r3, r3, #1
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac06:	b2da      	uxtb	r2, r3
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	2201      	movs	r2, #1
 800ac12:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800ac16:	2300      	movs	r3, #0
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	370c      	adds	r7, #12
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr
 800ac24:	1fe00fff 	.word	0x1fe00fff

0800ac28 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b094      	sub	sp, #80	@ 0x50
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ac32:	2300      	movs	r3, #0
 800ac34:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	2b03      	cmp	r3, #3
 800ac42:	d101      	bne.n	800ac48 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800ac44:	2301      	movs	r3, #1
 800ac46:	e0a7      	b.n	800ad98 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800ac48:	f107 0308 	add.w	r3, r7, #8
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f000 fb62 	bl	800b318 <SD_SendSDStatus>
 800ac54:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ac56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d011      	beq.n	800ac80 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a4f      	ldr	r2, [pc, #316]	@ (800ada0 <HAL_SD_GetCardStatus+0x178>)
 800ac62:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac6a:	431a      	orrs	r2, r3
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2201      	movs	r2, #1
 800ac74:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800ac78:	2301      	movs	r3, #1
 800ac7a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800ac7e:	e070      	b.n	800ad62 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	099b      	lsrs	r3, r3, #6
 800ac84:	b2db      	uxtb	r3, r3
 800ac86:	f003 0303 	and.w	r3, r3, #3
 800ac8a:	b2da      	uxtb	r2, r3
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	095b      	lsrs	r3, r3, #5
 800ac94:	b2db      	uxtb	r3, r3
 800ac96:	f003 0301 	and.w	r3, r3, #1
 800ac9a:	b2da      	uxtb	r2, r3
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	0a1b      	lsrs	r3, r3, #8
 800aca4:	b29b      	uxth	r3, r3
 800aca6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800acaa:	b29a      	uxth	r2, r3
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	0e1b      	lsrs	r3, r3, #24
 800acb0:	b29b      	uxth	r3, r3
 800acb2:	4313      	orrs	r3, r2
 800acb4:	b29a      	uxth	r2, r3
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	061a      	lsls	r2, r3, #24
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	021b      	lsls	r3, r3, #8
 800acc2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800acc6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	0a1b      	lsrs	r3, r3, #8
 800accc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800acd0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	0e1b      	lsrs	r3, r3, #24
 800acd6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	b2da      	uxtb	r2, r3
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	0a1b      	lsrs	r3, r3, #8
 800ace8:	b2da      	uxtb	r2, r3
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	0d1b      	lsrs	r3, r3, #20
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	f003 030f 	and.w	r3, r3, #15
 800acf8:	b2da      	uxtb	r2, r3
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	0c1b      	lsrs	r3, r3, #16
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ad08:	b29a      	uxth	r2, r3
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	b29b      	uxth	r3, r3
 800ad0e:	b2db      	uxtb	r3, r3
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	4313      	orrs	r3, r2
 800ad14:	b29a      	uxth	r2, r3
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	0a9b      	lsrs	r3, r3, #10
 800ad1e:	b2db      	uxtb	r3, r3
 800ad20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ad24:	b2da      	uxtb	r2, r3
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	0a1b      	lsrs	r3, r3, #8
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	f003 0303 	and.w	r3, r3, #3
 800ad34:	b2da      	uxtb	r2, r3
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	091b      	lsrs	r3, r3, #4
 800ad3e:	b2db      	uxtb	r3, r3
 800ad40:	f003 030f 	and.w	r3, r3, #15
 800ad44:	b2da      	uxtb	r2, r3
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	b2db      	uxtb	r3, r3
 800ad4e:	f003 030f 	and.w	r3, r3, #15
 800ad52:	b2da      	uxtb	r2, r3
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800ad58:	69bb      	ldr	r3, [r7, #24]
 800ad5a:	0e1b      	lsrs	r3, r3, #24
 800ad5c:	b2da      	uxtb	r2, r3
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f002 ff0a 	bl	800db84 <SDMMC_CmdBlockLength>
 800ad70:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ad72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d00d      	beq.n	800ad94 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4a08      	ldr	r2, [pc, #32]	@ (800ada0 <HAL_SD_GetCardStatus+0x178>)
 800ad7e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad84:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2201      	movs	r2, #1
 800ad8a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 800ad94:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3750      	adds	r7, #80	@ 0x50
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}
 800ada0:	1fe00fff 	.word	0x1fe00fff

0800ada4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(const SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b083      	sub	sp, #12
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800adee:	2300      	movs	r3, #0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	370c      	adds	r7, #12
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr

0800adfc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800adfc:	b590      	push	{r4, r7, lr}
 800adfe:	b08d      	sub	sp, #52	@ 0x34
 800ae00:	af02      	add	r7, sp, #8
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 800ae06:	2300      	movs	r3, #0
 800ae08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2203      	movs	r2, #3
 800ae10:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae18:	2b03      	cmp	r3, #3
 800ae1a:	d02e      	beq.n	800ae7a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae22:	d106      	bne.n	800ae32 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae28:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	635a      	str	r2, [r3, #52]	@ 0x34
 800ae30:	e029      	b.n	800ae86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ae38:	d10a      	bne.n	800ae50 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 fb64 	bl	800b508 <SD_WideBus_Enable>
 800ae40:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae46:	6a3b      	ldr	r3, [r7, #32]
 800ae48:	431a      	orrs	r2, r3
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	635a      	str	r2, [r3, #52]	@ 0x34
 800ae4e:	e01a      	b.n	800ae86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d10a      	bne.n	800ae6c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f000 fba1 	bl	800b59e <SD_WideBus_Disable>
 800ae5c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae62:	6a3b      	ldr	r3, [r7, #32]
 800ae64:	431a      	orrs	r2, r3
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	635a      	str	r2, [r3, #52]	@ 0x34
 800ae6a:	e00c      	b.n	800ae86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae70:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	635a      	str	r2, [r3, #52]	@ 0x34
 800ae78:	e005      	b.n	800ae86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae7e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d007      	beq.n	800ae9e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	4a5f      	ldr	r2, [pc, #380]	@ (800b010 <HAL_SD_ConfigWideBusOperation+0x214>)
 800ae94:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800ae96:	2301      	movs	r3, #1
 800ae98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ae9c:	e096      	b.n	800afcc <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800ae9e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800aea2:	f04f 0100 	mov.w	r1, #0
 800aea6:	f7fd fb63 	bl	8008570 <HAL_RCCEx_GetPeriphCLKFreq>
 800aeaa:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800aeac:	69fb      	ldr	r3, [r7, #28]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	f000 8083 	beq.w	800afba <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	685b      	ldr	r3, [r3, #4]
 800aeb8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	691b      	ldr	r3, [r3, #16]
 800aec8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	695a      	ldr	r2, [r3, #20]
 800aece:	69fb      	ldr	r3, [r7, #28]
 800aed0:	4950      	ldr	r1, [pc, #320]	@ (800b014 <HAL_SD_ConfigWideBusOperation+0x218>)
 800aed2:	fba1 1303 	umull	r1, r3, r1, r3
 800aed6:	0e1b      	lsrs	r3, r3, #24
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d303      	bcc.n	800aee4 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	695b      	ldr	r3, [r3, #20]
 800aee0:	61bb      	str	r3, [r7, #24]
 800aee2:	e05a      	b.n	800af9a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aee8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aeec:	d103      	bne.n	800aef6 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	695b      	ldr	r3, [r3, #20]
 800aef2:	61bb      	str	r3, [r7, #24]
 800aef4:	e051      	b.n	800af9a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aefa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aefe:	d126      	bne.n	800af4e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	695b      	ldr	r3, [r3, #20]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d10e      	bne.n	800af26 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800af08:	69fb      	ldr	r3, [r7, #28]
 800af0a:	4a43      	ldr	r2, [pc, #268]	@ (800b018 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d906      	bls.n	800af1e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800af10:	69fb      	ldr	r3, [r7, #28]
 800af12:	4a40      	ldr	r2, [pc, #256]	@ (800b014 <HAL_SD_ConfigWideBusOperation+0x218>)
 800af14:	fba2 2303 	umull	r2, r3, r2, r3
 800af18:	0e5b      	lsrs	r3, r3, #25
 800af1a:	61bb      	str	r3, [r7, #24]
 800af1c:	e03d      	b.n	800af9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	695b      	ldr	r3, [r3, #20]
 800af22:	61bb      	str	r3, [r7, #24]
 800af24:	e039      	b.n	800af9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	695b      	ldr	r3, [r3, #20]
 800af2a:	005b      	lsls	r3, r3, #1
 800af2c:	69fa      	ldr	r2, [r7, #28]
 800af2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800af32:	4a39      	ldr	r2, [pc, #228]	@ (800b018 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d906      	bls.n	800af46 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800af38:	69fb      	ldr	r3, [r7, #28]
 800af3a:	4a36      	ldr	r2, [pc, #216]	@ (800b014 <HAL_SD_ConfigWideBusOperation+0x218>)
 800af3c:	fba2 2303 	umull	r2, r3, r2, r3
 800af40:	0e5b      	lsrs	r3, r3, #25
 800af42:	61bb      	str	r3, [r7, #24]
 800af44:	e029      	b.n	800af9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	695b      	ldr	r3, [r3, #20]
 800af4a:	61bb      	str	r3, [r7, #24]
 800af4c:	e025      	b.n	800af9a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	695b      	ldr	r3, [r3, #20]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d10e      	bne.n	800af74 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800af56:	69fb      	ldr	r3, [r7, #28]
 800af58:	4a30      	ldr	r2, [pc, #192]	@ (800b01c <HAL_SD_ConfigWideBusOperation+0x220>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d906      	bls.n	800af6c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800af5e:	69fb      	ldr	r3, [r7, #28]
 800af60:	4a2c      	ldr	r2, [pc, #176]	@ (800b014 <HAL_SD_ConfigWideBusOperation+0x218>)
 800af62:	fba2 2303 	umull	r2, r3, r2, r3
 800af66:	0e1b      	lsrs	r3, r3, #24
 800af68:	61bb      	str	r3, [r7, #24]
 800af6a:	e016      	b.n	800af9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	695b      	ldr	r3, [r3, #20]
 800af70:	61bb      	str	r3, [r7, #24]
 800af72:	e012      	b.n	800af9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	695b      	ldr	r3, [r3, #20]
 800af78:	005b      	lsls	r3, r3, #1
 800af7a:	69fa      	ldr	r2, [r7, #28]
 800af7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800af80:	4a26      	ldr	r2, [pc, #152]	@ (800b01c <HAL_SD_ConfigWideBusOperation+0x220>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d906      	bls.n	800af94 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800af86:	69fb      	ldr	r3, [r7, #28]
 800af88:	4a22      	ldr	r2, [pc, #136]	@ (800b014 <HAL_SD_ConfigWideBusOperation+0x218>)
 800af8a:	fba2 2303 	umull	r2, r3, r2, r3
 800af8e:	0e1b      	lsrs	r3, r3, #24
 800af90:	61bb      	str	r3, [r7, #24]
 800af92:	e002      	b.n	800af9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	695b      	ldr	r3, [r3, #20]
 800af98:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681c      	ldr	r4, [r3, #0]
 800af9e:	466a      	mov	r2, sp
 800afa0:	f107 0314 	add.w	r3, r7, #20
 800afa4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800afa8:	e882 0003 	stmia.w	r2, {r0, r1}
 800afac:	f107 0308 	add.w	r3, r7, #8
 800afb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800afb2:	4620      	mov	r0, r4
 800afb4:	f002 fd08 	bl	800d9c8 <SDMMC_Init>
 800afb8:	e008      	b.n	800afcc <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afbe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800afc6:	2301      	movs	r3, #1
 800afc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800afd4:	4618      	mov	r0, r3
 800afd6:	f002 fdd5 	bl	800db84 <SDMMC_CmdBlockLength>
 800afda:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800afdc:	6a3b      	ldr	r3, [r7, #32]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d00c      	beq.n	800affc <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4a0a      	ldr	r2, [pc, #40]	@ (800b010 <HAL_SD_ConfigWideBusOperation+0x214>)
 800afe8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800afee:	6a3b      	ldr	r3, [r7, #32]
 800aff0:	431a      	orrs	r2, r3
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800aff6:	2301      	movs	r3, #1
 800aff8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2201      	movs	r2, #1
 800b000:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800b004:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b008:	4618      	mov	r0, r3
 800b00a:	372c      	adds	r7, #44	@ 0x2c
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd90      	pop	{r4, r7, pc}
 800b010:	1fe00fff 	.word	0x1fe00fff
 800b014:	55e63b89 	.word	0x55e63b89
 800b018:	02faf080 	.word	0x02faf080
 800b01c:	017d7840 	.word	0x017d7840

0800b020 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b086      	sub	sp, #24
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b028:	2300      	movs	r3, #0
 800b02a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b02c:	f107 030c 	add.w	r3, r7, #12
 800b030:	4619      	mov	r1, r3
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 fa40 	bl	800b4b8 <SD_SendStatus>
 800b038:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d005      	beq.n	800b04c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	431a      	orrs	r2, r3
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	0a5b      	lsrs	r3, r3, #9
 800b050:	f003 030f 	and.w	r3, r3, #15
 800b054:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b056:	693b      	ldr	r3, [r7, #16]
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3718      	adds	r7, #24
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b090      	sub	sp, #64	@ 0x40
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800b068:	2300      	movs	r3, #0
 800b06a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800b06c:	f7f7 fcb4 	bl	80029d8 <HAL_GetTick>
 800b070:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4618      	mov	r0, r3
 800b078:	f002 fcff 	bl	800da7a <SDMMC_GetPowerState>
 800b07c:	4603      	mov	r3, r0
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d102      	bne.n	800b088 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b082:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800b086:	e0b5      	b.n	800b1f4 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b08c:	2b03      	cmp	r3, #3
 800b08e:	d02e      	beq.n	800b0ee <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	4618      	mov	r0, r3
 800b096:	f002 ff4a 	bl	800df2e <SDMMC_CmdSendCID>
 800b09a:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800b09c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d001      	beq.n	800b0a6 <SD_InitCard+0x46>
    {
      return errorstate;
 800b0a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0a4:	e0a6      	b.n	800b1f4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	2100      	movs	r1, #0
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f002 fd2a 	bl	800db06 <SDMMC_GetResponse>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	2104      	movs	r1, #4
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f002 fd21 	bl	800db06 <SDMMC_GetResponse>
 800b0c4:	4602      	mov	r2, r0
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	2108      	movs	r1, #8
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f002 fd18 	bl	800db06 <SDMMC_GetResponse>
 800b0d6:	4602      	mov	r2, r0
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	210c      	movs	r1, #12
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f002 fd0f 	bl	800db06 <SDMMC_GetResponse>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0f2:	2b03      	cmp	r3, #3
 800b0f4:	d01d      	beq.n	800b132 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800b0f6:	e019      	b.n	800b12c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f107 020a 	add.w	r2, r7, #10
 800b100:	4611      	mov	r1, r2
 800b102:	4618      	mov	r0, r3
 800b104:	f002 ff52 	bl	800dfac <SDMMC_CmdSetRelAdd>
 800b108:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800b10a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d001      	beq.n	800b114 <SD_InitCard+0xb4>
      {
        return errorstate;
 800b110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b112:	e06f      	b.n	800b1f4 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800b114:	f7f7 fc60 	bl	80029d8 <HAL_GetTick>
 800b118:	4602      	mov	r2, r0
 800b11a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b11c:	1ad3      	subs	r3, r2, r3
 800b11e:	f241 3287 	movw	r2, #4999	@ 0x1387
 800b122:	4293      	cmp	r3, r2
 800b124:	d902      	bls.n	800b12c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800b126:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b12a:	e063      	b.n	800b1f4 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800b12c:	897b      	ldrh	r3, [r7, #10]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d0e2      	beq.n	800b0f8 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b136:	2b03      	cmp	r3, #3
 800b138:	d036      	beq.n	800b1a8 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b13a:	897b      	ldrh	r3, [r7, #10]
 800b13c:	461a      	mov	r2, r3
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681a      	ldr	r2, [r3, #0]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b14a:	041b      	lsls	r3, r3, #16
 800b14c:	4619      	mov	r1, r3
 800b14e:	4610      	mov	r0, r2
 800b150:	f002 ff0c 	bl	800df6c <SDMMC_CmdSendCSD>
 800b154:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800b156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d001      	beq.n	800b160 <SD_InitCard+0x100>
    {
      return errorstate;
 800b15c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b15e:	e049      	b.n	800b1f4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	2100      	movs	r1, #0
 800b166:	4618      	mov	r0, r3
 800b168:	f002 fccd 	bl	800db06 <SDMMC_GetResponse>
 800b16c:	4602      	mov	r2, r0
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2104      	movs	r1, #4
 800b178:	4618      	mov	r0, r3
 800b17a:	f002 fcc4 	bl	800db06 <SDMMC_GetResponse>
 800b17e:	4602      	mov	r2, r0
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	2108      	movs	r1, #8
 800b18a:	4618      	mov	r0, r3
 800b18c:	f002 fcbb 	bl	800db06 <SDMMC_GetResponse>
 800b190:	4602      	mov	r2, r0
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	210c      	movs	r1, #12
 800b19c:	4618      	mov	r0, r3
 800b19e:	f002 fcb2 	bl	800db06 <SDMMC_GetResponse>
 800b1a2:	4602      	mov	r2, r0
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2104      	movs	r1, #4
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f002 fca9 	bl	800db06 <SDMMC_GetResponse>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	0d1a      	lsrs	r2, r3, #20
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b1bc:	f107 030c 	add.w	r3, r7, #12
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f7ff fb8c 	bl	800a8e0 <HAL_SD_GetCardCSD>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d002      	beq.n	800b1d4 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b1ce:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b1d2:	e00f      	b.n	800b1f4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681a      	ldr	r2, [r3, #0]
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1dc:	041b      	lsls	r3, r3, #16
 800b1de:	4619      	mov	r1, r3
 800b1e0:	4610      	mov	r0, r2
 800b1e2:	f002 fdbb 	bl	800dd5c <SDMMC_CmdSelDesel>
 800b1e6:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800b1e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d001      	beq.n	800b1f2 <SD_InitCard+0x192>
  {
    return errorstate;
 800b1ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1f0:	e000      	b.n	800b1f4 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b1f2:	2300      	movs	r3, #0
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3740      	adds	r7, #64	@ 0x40
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b086      	sub	sp, #24
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b204:	2300      	movs	r3, #0
 800b206:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800b208:	2300      	movs	r3, #0
 800b20a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800b20c:	2300      	movs	r3, #0
 800b20e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4618      	mov	r0, r3
 800b216:	f002 fdc4 	bl	800dda2 <SDMMC_CmdGoIdleState>
 800b21a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d001      	beq.n	800b226 <SD_PowerON+0x2a>
  {
    return errorstate;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	e072      	b.n	800b30c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4618      	mov	r0, r3
 800b22c:	f002 fdd7 	bl	800ddde <SDMMC_CmdOperCond>
 800b230:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b238:	d10d      	bne.n	800b256 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2200      	movs	r2, #0
 800b23e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	4618      	mov	r0, r3
 800b246:	f002 fdac 	bl	800dda2 <SDMMC_CmdGoIdleState>
 800b24a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d004      	beq.n	800b25c <SD_PowerON+0x60>
    {
      return errorstate;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	e05a      	b.n	800b30c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2201      	movs	r2, #1
 800b25a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b260:	2b01      	cmp	r3, #1
 800b262:	d137      	bne.n	800b2d4 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	2100      	movs	r1, #0
 800b26a:	4618      	mov	r0, r3
 800b26c:	f002 fdd7 	bl	800de1e <SDMMC_CmdAppCommand>
 800b270:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d02d      	beq.n	800b2d4 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b278:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b27c:	e046      	b.n	800b30c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	2100      	movs	r1, #0
 800b284:	4618      	mov	r0, r3
 800b286:	f002 fdca 	bl	800de1e <SDMMC_CmdAppCommand>
 800b28a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d001      	beq.n	800b296 <SD_PowerON+0x9a>
    {
      return errorstate;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	e03a      	b.n	800b30c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	491e      	ldr	r1, [pc, #120]	@ (800b314 <SD_PowerON+0x118>)
 800b29c:	4618      	mov	r0, r3
 800b29e:	f002 fde1 	bl	800de64 <SDMMC_CmdAppOperCommand>
 800b2a2:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d002      	beq.n	800b2b0 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b2aa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b2ae:	e02d      	b.n	800b30c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	2100      	movs	r1, #0
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f002 fc25 	bl	800db06 <SDMMC_GetResponse>
 800b2bc:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	0fdb      	lsrs	r3, r3, #31
 800b2c2:	2b01      	cmp	r3, #1
 800b2c4:	d101      	bne.n	800b2ca <SD_PowerON+0xce>
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	e000      	b.n	800b2cc <SD_PowerON+0xd0>
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	613b      	str	r3, [r7, #16]

    count++;
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d802      	bhi.n	800b2e4 <SD_PowerON+0xe8>
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d0cc      	beq.n	800b27e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d902      	bls.n	800b2f4 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b2ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b2f2:	e00b      	b.n	800b30c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b300:	2b00      	cmp	r3, #0
 800b302:	d002      	beq.n	800b30a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2201      	movs	r2, #1
 800b308:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800b30a:	2300      	movs	r3, #0
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3718      	adds	r7, #24
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}
 800b314:	c1100000 	.word	0xc1100000

0800b318 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b08c      	sub	sp, #48	@ 0x30
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b322:	f7f7 fb59 	bl	80029d8 <HAL_GetTick>
 800b326:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	2100      	movs	r1, #0
 800b332:	4618      	mov	r0, r3
 800b334:	f002 fbe7 	bl	800db06 <SDMMC_GetResponse>
 800b338:	4603      	mov	r3, r0
 800b33a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b33e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b342:	d102      	bne.n	800b34a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b344:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b348:	e0b0      	b.n	800b4ac <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	2140      	movs	r1, #64	@ 0x40
 800b350:	4618      	mov	r0, r3
 800b352:	f002 fc17 	bl	800db84 <SDMMC_CmdBlockLength>
 800b356:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b358:	6a3b      	ldr	r3, [r7, #32]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d005      	beq.n	800b36a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800b366:	6a3b      	ldr	r3, [r7, #32]
 800b368:	e0a0      	b.n	800b4ac <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681a      	ldr	r2, [r3, #0]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b372:	041b      	lsls	r3, r3, #16
 800b374:	4619      	mov	r1, r3
 800b376:	4610      	mov	r0, r2
 800b378:	f002 fd51 	bl	800de1e <SDMMC_CmdAppCommand>
 800b37c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b37e:	6a3b      	ldr	r3, [r7, #32]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d005      	beq.n	800b390 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800b38c:	6a3b      	ldr	r3, [r7, #32]
 800b38e:	e08d      	b.n	800b4ac <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b390:	f04f 33ff 	mov.w	r3, #4294967295
 800b394:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800b396:	2340      	movs	r3, #64	@ 0x40
 800b398:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800b39a:	2360      	movs	r3, #96	@ 0x60
 800b39c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b39e:	2302      	movs	r3, #2
 800b3a0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f107 0208 	add.w	r2, r7, #8
 800b3b2:	4611      	mov	r1, r2
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f002 fbb9 	bl	800db2c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f002 fe39 	bl	800e036 <SDMMC_CmdStatusRegister>
 800b3c4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b3c6:	6a3b      	ldr	r3, [r7, #32]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d02b      	beq.n	800b424 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800b3d4:	6a3b      	ldr	r3, [r7, #32]
 800b3d6:	e069      	b.n	800b4ac <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d013      	beq.n	800b40e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b3ea:	e00d      	b.n	800b408 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f002 fb13 	bl	800da1c <SDMMC_ReadFIFO>
 800b3f6:	4602      	mov	r2, r0
 800b3f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3fa:	601a      	str	r2, [r3, #0]
        pData++;
 800b3fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3fe:	3304      	adds	r3, #4
 800b400:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800b402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b404:	3301      	adds	r3, #1
 800b406:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b40a:	2b07      	cmp	r3, #7
 800b40c:	d9ee      	bls.n	800b3ec <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800b40e:	f7f7 fae3 	bl	80029d8 <HAL_GetTick>
 800b412:	4602      	mov	r2, r0
 800b414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b416:	1ad3      	subs	r3, r2, r3
 800b418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b41c:	d102      	bne.n	800b424 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b41e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b422:	e043      	b.n	800b4ac <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b42a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d0d2      	beq.n	800b3d8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b438:	f003 0308 	and.w	r3, r3, #8
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d001      	beq.n	800b444 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b440:	2308      	movs	r3, #8
 800b442:	e033      	b.n	800b4ac <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b44a:	f003 0302 	and.w	r3, r3, #2
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d001      	beq.n	800b456 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b452:	2302      	movs	r3, #2
 800b454:	e02a      	b.n	800b4ac <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b45c:	f003 0320 	and.w	r3, r3, #32
 800b460:	2b00      	cmp	r3, #0
 800b462:	d017      	beq.n	800b494 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800b464:	2320      	movs	r3, #32
 800b466:	e021      	b.n	800b4ac <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4618      	mov	r0, r3
 800b46e:	f002 fad5 	bl	800da1c <SDMMC_ReadFIFO>
 800b472:	4602      	mov	r2, r0
 800b474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b476:	601a      	str	r2, [r3, #0]
    pData++;
 800b478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b47a:	3304      	adds	r3, #4
 800b47c:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800b47e:	f7f7 faab 	bl	80029d8 <HAL_GetTick>
 800b482:	4602      	mov	r2, r0
 800b484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b486:	1ad3      	subs	r3, r2, r3
 800b488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b48c:	d102      	bne.n	800b494 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b48e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b492:	e00b      	b.n	800b4ac <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b49a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d1e2      	bne.n	800b468 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4a03      	ldr	r2, [pc, #12]	@ (800b4b4 <SD_SendSDStatus+0x19c>)
 800b4a8:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800b4aa:	2300      	movs	r3, #0
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3730      	adds	r7, #48	@ 0x30
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}
 800b4b4:	18000f3a 	.word	0x18000f3a

0800b4b8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d102      	bne.n	800b4ce <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b4c8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b4cc:	e018      	b.n	800b500 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681a      	ldr	r2, [r3, #0]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4d6:	041b      	lsls	r3, r3, #16
 800b4d8:	4619      	mov	r1, r3
 800b4da:	4610      	mov	r0, r2
 800b4dc:	f002 fd88 	bl	800dff0 <SDMMC_CmdSendStatus>
 800b4e0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d001      	beq.n	800b4ec <SD_SendStatus+0x34>
  {
    return errorstate;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	e009      	b.n	800b500 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	2100      	movs	r1, #0
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f002 fb07 	bl	800db06 <SDMMC_GetResponse>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b4fe:	2300      	movs	r3, #0
}
 800b500:	4618      	mov	r0, r3
 800b502:	3710      	adds	r7, #16
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}

0800b508 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b086      	sub	sp, #24
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b510:	2300      	movs	r3, #0
 800b512:	60fb      	str	r3, [r7, #12]
 800b514:	2300      	movs	r3, #0
 800b516:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	2100      	movs	r1, #0
 800b51e:	4618      	mov	r0, r3
 800b520:	f002 faf1 	bl	800db06 <SDMMC_GetResponse>
 800b524:	4603      	mov	r3, r0
 800b526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b52a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b52e:	d102      	bne.n	800b536 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b530:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b534:	e02f      	b.n	800b596 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b536:	f107 030c 	add.w	r3, r7, #12
 800b53a:	4619      	mov	r1, r3
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f000 f879 	bl	800b634 <SD_FindSCR>
 800b542:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d001      	beq.n	800b54e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	e023      	b.n	800b596 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b554:	2b00      	cmp	r3, #0
 800b556:	d01c      	beq.n	800b592 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681a      	ldr	r2, [r3, #0]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b560:	041b      	lsls	r3, r3, #16
 800b562:	4619      	mov	r1, r3
 800b564:	4610      	mov	r0, r2
 800b566:	f002 fc5a 	bl	800de1e <SDMMC_CmdAppCommand>
 800b56a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d001      	beq.n	800b576 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	e00f      	b.n	800b596 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2102      	movs	r1, #2
 800b57c:	4618      	mov	r0, r3
 800b57e:	f002 fc91 	bl	800dea4 <SDMMC_CmdBusWidth>
 800b582:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d001      	beq.n	800b58e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	e003      	b.n	800b596 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b58e:	2300      	movs	r3, #0
 800b590:	e001      	b.n	800b596 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b592:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800b596:	4618      	mov	r0, r3
 800b598:	3718      	adds	r7, #24
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}

0800b59e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b59e:	b580      	push	{r7, lr}
 800b5a0:	b086      	sub	sp, #24
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	60fb      	str	r3, [r7, #12]
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	2100      	movs	r1, #0
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f002 faa6 	bl	800db06 <SDMMC_GetResponse>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b5c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b5c4:	d102      	bne.n	800b5cc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b5c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b5ca:	e02f      	b.n	800b62c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b5cc:	f107 030c 	add.w	r3, r7, #12
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f000 f82e 	bl	800b634 <SD_FindSCR>
 800b5d8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d001      	beq.n	800b5e4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	e023      	b.n	800b62c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d01c      	beq.n	800b628 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681a      	ldr	r2, [r3, #0]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5f6:	041b      	lsls	r3, r3, #16
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	4610      	mov	r0, r2
 800b5fc:	f002 fc0f 	bl	800de1e <SDMMC_CmdAppCommand>
 800b600:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d001      	beq.n	800b60c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	e00f      	b.n	800b62c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	2100      	movs	r1, #0
 800b612:	4618      	mov	r0, r3
 800b614:	f002 fc46 	bl	800dea4 <SDMMC_CmdBusWidth>
 800b618:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d001      	beq.n	800b624 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	e003      	b.n	800b62c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b624:	2300      	movs	r3, #0
 800b626:	e001      	b.n	800b62c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b628:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3718      	adds	r7, #24
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}

0800b634 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b08e      	sub	sp, #56	@ 0x38
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b63e:	f7f7 f9cb 	bl	80029d8 <HAL_GetTick>
 800b642:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800b644:	2300      	movs	r3, #0
 800b646:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b648:	2300      	movs	r3, #0
 800b64a:	60bb      	str	r3, [r7, #8]
 800b64c:	2300      	movs	r3, #0
 800b64e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	2108      	movs	r1, #8
 800b65a:	4618      	mov	r0, r3
 800b65c:	f002 fa92 	bl	800db84 <SDMMC_CmdBlockLength>
 800b660:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b664:	2b00      	cmp	r3, #0
 800b666:	d001      	beq.n	800b66c <SD_FindSCR+0x38>
  {
    return errorstate;
 800b668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b66a:	e0ad      	b.n	800b7c8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b674:	041b      	lsls	r3, r3, #16
 800b676:	4619      	mov	r1, r3
 800b678:	4610      	mov	r0, r2
 800b67a:	f002 fbd0 	bl	800de1e <SDMMC_CmdAppCommand>
 800b67e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b682:	2b00      	cmp	r3, #0
 800b684:	d001      	beq.n	800b68a <SD_FindSCR+0x56>
  {
    return errorstate;
 800b686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b688:	e09e      	b.n	800b7c8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b68a:	f04f 33ff 	mov.w	r3, #4294967295
 800b68e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b690:	2308      	movs	r3, #8
 800b692:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b694:	2330      	movs	r3, #48	@ 0x30
 800b696:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b698:	2302      	movs	r3, #2
 800b69a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b69c:	2300      	movs	r3, #0
 800b69e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f107 0210 	add.w	r2, r7, #16
 800b6ac:	4611      	mov	r1, r2
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f002 fa3c 	bl	800db2c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f002 fc16 	bl	800deea <SDMMC_CmdSendSCR>
 800b6be:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b6c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d027      	beq.n	800b716 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800b6c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6c8:	e07e      	b.n	800b7c8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d113      	bne.n	800b700 <SD_FindSCR+0xcc>
 800b6d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d110      	bne.n	800b700 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f002 f99a 	bl	800da1c <SDMMC_ReadFIFO>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f002 f993 	bl	800da1c <SDMMC_ReadFIFO>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	60fb      	str	r3, [r7, #12]
      index++;
 800b6fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800b700:	f7f7 f96a 	bl	80029d8 <HAL_GetTick>
 800b704:	4602      	mov	r2, r0
 800b706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b708:	1ad3      	subs	r3, r2, r3
 800b70a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b70e:	d102      	bne.n	800b716 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b710:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b714:	e058      	b.n	800b7c8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b71c:	f240 532a 	movw	r3, #1322	@ 0x52a
 800b720:	4013      	ands	r3, r2
 800b722:	2b00      	cmp	r3, #0
 800b724:	d0d1      	beq.n	800b6ca <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b72c:	f003 0308 	and.w	r3, r3, #8
 800b730:	2b00      	cmp	r3, #0
 800b732:	d005      	beq.n	800b740 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2208      	movs	r2, #8
 800b73a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b73c:	2308      	movs	r3, #8
 800b73e:	e043      	b.n	800b7c8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b746:	f003 0302 	and.w	r3, r3, #2
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d005      	beq.n	800b75a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	2202      	movs	r2, #2
 800b754:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b756:	2302      	movs	r3, #2
 800b758:	e036      	b.n	800b7c8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b760:	f003 0320 	and.w	r3, r3, #32
 800b764:	2b00      	cmp	r3, #0
 800b766:	d005      	beq.n	800b774 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	2220      	movs	r2, #32
 800b76e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b770:	2320      	movs	r3, #32
 800b772:	e029      	b.n	800b7c8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	4a15      	ldr	r2, [pc, #84]	@ (800b7d0 <SD_FindSCR+0x19c>)
 800b77a:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	061a      	lsls	r2, r3, #24
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	021b      	lsls	r3, r3, #8
 800b784:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b788:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	0a1b      	lsrs	r3, r3, #8
 800b78e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800b792:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	0e1b      	lsrs	r3, r3, #24
 800b798:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800b79a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b79c:	601a      	str	r2, [r3, #0]
    scr++;
 800b79e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7a0:	3304      	adds	r3, #4
 800b7a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	061a      	lsls	r2, r3, #24
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	021b      	lsls	r3, r3, #8
 800b7ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b7b0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	0a1b      	lsrs	r3, r3, #8
 800b7b6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800b7ba:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	0e1b      	lsrs	r3, r3, #24
 800b7c0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800b7c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7c4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b7c6:	2300      	movs	r3, #0
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3738      	adds	r7, #56	@ 0x38
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}
 800b7d0:	18000f3a 	.word	0x18000f3a

0800b7d4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b084      	sub	sp, #16
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d101      	bne.n	800b7e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	e10f      	b.n	800ba06 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	4a87      	ldr	r2, [pc, #540]	@ (800ba10 <HAL_SPI_Init+0x23c>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d00f      	beq.n	800b816 <HAL_SPI_Init+0x42>
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	4a86      	ldr	r2, [pc, #536]	@ (800ba14 <HAL_SPI_Init+0x240>)
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	d00a      	beq.n	800b816 <HAL_SPI_Init+0x42>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4a84      	ldr	r2, [pc, #528]	@ (800ba18 <HAL_SPI_Init+0x244>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d005      	beq.n	800b816 <HAL_SPI_Init+0x42>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	68db      	ldr	r3, [r3, #12]
 800b80e:	2b0f      	cmp	r3, #15
 800b810:	d901      	bls.n	800b816 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b812:	2301      	movs	r3, #1
 800b814:	e0f7      	b.n	800ba06 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f000 fe2e 	bl	800c478 <SPI_GetPacketSize>
 800b81c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	4a7b      	ldr	r2, [pc, #492]	@ (800ba10 <HAL_SPI_Init+0x23c>)
 800b824:	4293      	cmp	r3, r2
 800b826:	d00c      	beq.n	800b842 <HAL_SPI_Init+0x6e>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	4a79      	ldr	r2, [pc, #484]	@ (800ba14 <HAL_SPI_Init+0x240>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d007      	beq.n	800b842 <HAL_SPI_Init+0x6e>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4a78      	ldr	r2, [pc, #480]	@ (800ba18 <HAL_SPI_Init+0x244>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d002      	beq.n	800b842 <HAL_SPI_Init+0x6e>
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2b08      	cmp	r3, #8
 800b840:	d811      	bhi.n	800b866 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b846:	4a72      	ldr	r2, [pc, #456]	@ (800ba10 <HAL_SPI_Init+0x23c>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d009      	beq.n	800b860 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4a70      	ldr	r2, [pc, #448]	@ (800ba14 <HAL_SPI_Init+0x240>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d004      	beq.n	800b860 <HAL_SPI_Init+0x8c>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	4a6f      	ldr	r2, [pc, #444]	@ (800ba18 <HAL_SPI_Init+0x244>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d104      	bne.n	800b86a <HAL_SPI_Init+0x96>
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2b10      	cmp	r3, #16
 800b864:	d901      	bls.n	800b86a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b866:	2301      	movs	r3, #1
 800b868:	e0cd      	b.n	800ba06 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b870:	b2db      	uxtb	r3, r3
 800b872:	2b00      	cmp	r3, #0
 800b874:	d106      	bne.n	800b884 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2200      	movs	r2, #0
 800b87a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f006 fb3c 	bl	8011efc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2202      	movs	r2, #2
 800b888:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	681a      	ldr	r2, [r3, #0]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f022 0201 	bic.w	r2, r2, #1
 800b89a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	689b      	ldr	r3, [r3, #8]
 800b8a2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b8a6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	699b      	ldr	r3, [r3, #24]
 800b8ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b8b0:	d119      	bne.n	800b8e6 <HAL_SPI_Init+0x112>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b8ba:	d103      	bne.n	800b8c4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d008      	beq.n	800b8d6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d10c      	bne.n	800b8e6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b8d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b8d4:	d107      	bne.n	800b8e6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	681a      	ldr	r2, [r3, #0]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b8e4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	685b      	ldr	r3, [r3, #4]
 800b8ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d00f      	beq.n	800b912 <HAL_SPI_Init+0x13e>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	68db      	ldr	r3, [r3, #12]
 800b8f6:	2b06      	cmp	r3, #6
 800b8f8:	d90b      	bls.n	800b912 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	430a      	orrs	r2, r1
 800b90e:	601a      	str	r2, [r3, #0]
 800b910:	e007      	b.n	800b922 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	681a      	ldr	r2, [r3, #0]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b920:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	69da      	ldr	r2, [r3, #28]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b92a:	431a      	orrs	r2, r3
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	431a      	orrs	r2, r3
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b934:	ea42 0103 	orr.w	r1, r2, r3
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	68da      	ldr	r2, [r3, #12]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	430a      	orrs	r2, r1
 800b942:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b94c:	431a      	orrs	r2, r3
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b952:	431a      	orrs	r2, r3
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	699b      	ldr	r3, [r3, #24]
 800b958:	431a      	orrs	r2, r3
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	691b      	ldr	r3, [r3, #16]
 800b95e:	431a      	orrs	r2, r3
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	695b      	ldr	r3, [r3, #20]
 800b964:	431a      	orrs	r2, r3
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6a1b      	ldr	r3, [r3, #32]
 800b96a:	431a      	orrs	r2, r3
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	685b      	ldr	r3, [r3, #4]
 800b970:	431a      	orrs	r2, r3
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b976:	431a      	orrs	r2, r3
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	689b      	ldr	r3, [r3, #8]
 800b97c:	431a      	orrs	r2, r3
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b982:	ea42 0103 	orr.w	r1, r2, r3
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	430a      	orrs	r2, r1
 800b990:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	685b      	ldr	r3, [r3, #4]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d113      	bne.n	800b9c2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b9ac:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	689b      	ldr	r3, [r3, #8]
 800b9b4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b9c0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f022 0201 	bic.w	r2, r2, #1
 800b9d0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d00a      	beq.n	800b9f4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	68db      	ldr	r3, [r3, #12]
 800b9e4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	430a      	orrs	r2, r1
 800b9f2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2201      	movs	r2, #1
 800ba00:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800ba04:	2300      	movs	r3, #0
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3710      	adds	r7, #16
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}
 800ba0e:	bf00      	nop
 800ba10:	40013000 	.word	0x40013000
 800ba14:	40003800 	.word	0x40003800
 800ba18:	40003c00 	.word	0x40003c00

0800ba1c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b088      	sub	sp, #32
 800ba20:	af02      	add	r7, sp, #8
 800ba22:	60f8      	str	r0, [r7, #12]
 800ba24:	60b9      	str	r1, [r7, #8]
 800ba26:	603b      	str	r3, [r7, #0]
 800ba28:	4613      	mov	r3, r2
 800ba2a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	3320      	adds	r3, #32
 800ba32:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ba34:	f7f6 ffd0 	bl	80029d8 <HAL_GetTick>
 800ba38:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ba40:	b2db      	uxtb	r3, r3
 800ba42:	2b01      	cmp	r3, #1
 800ba44:	d001      	beq.n	800ba4a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800ba46:	2302      	movs	r3, #2
 800ba48:	e1d1      	b.n	800bdee <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d002      	beq.n	800ba56 <HAL_SPI_Transmit+0x3a>
 800ba50:	88fb      	ldrh	r3, [r7, #6]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d101      	bne.n	800ba5a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800ba56:	2301      	movs	r3, #1
 800ba58:	e1c9      	b.n	800bdee <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ba60:	2b01      	cmp	r3, #1
 800ba62:	d101      	bne.n	800ba68 <HAL_SPI_Transmit+0x4c>
 800ba64:	2302      	movs	r3, #2
 800ba66:	e1c2      	b.n	800bdee <HAL_SPI_Transmit+0x3d2>
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	2203      	movs	r2, #3
 800ba74:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	68ba      	ldr	r2, [r7, #8]
 800ba84:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	88fa      	ldrh	r2, [r7, #6]
 800ba8a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	88fa      	ldrh	r2, [r7, #6]
 800ba92:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2200      	movs	r2, #0
 800baa8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	2200      	movs	r2, #0
 800bab0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2200      	movs	r2, #0
 800bab6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	689b      	ldr	r3, [r3, #8]
 800babc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800bac0:	d108      	bne.n	800bad4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bad0:	601a      	str	r2, [r3, #0]
 800bad2:	e009      	b.n	800bae8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	68db      	ldr	r3, [r3, #12]
 800bada:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800bae6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	685a      	ldr	r2, [r3, #4]
 800baee:	4b96      	ldr	r3, [pc, #600]	@ (800bd48 <HAL_SPI_Transmit+0x32c>)
 800baf0:	4013      	ands	r3, r2
 800baf2:	88f9      	ldrh	r1, [r7, #6]
 800baf4:	68fa      	ldr	r2, [r7, #12]
 800baf6:	6812      	ldr	r2, [r2, #0]
 800baf8:	430b      	orrs	r3, r1
 800bafa:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	681a      	ldr	r2, [r3, #0]
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f042 0201 	orr.w	r2, r2, #1
 800bb0a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	685b      	ldr	r3, [r3, #4]
 800bb10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bb14:	d107      	bne.n	800bb26 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	681a      	ldr	r2, [r3, #0]
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bb24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	68db      	ldr	r3, [r3, #12]
 800bb2a:	2b0f      	cmp	r3, #15
 800bb2c:	d947      	bls.n	800bbbe <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bb2e:	e03f      	b.n	800bbb0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	695b      	ldr	r3, [r3, #20]
 800bb36:	f003 0302 	and.w	r3, r3, #2
 800bb3a:	2b02      	cmp	r3, #2
 800bb3c:	d114      	bne.n	800bb68 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	6812      	ldr	r2, [r2, #0]
 800bb48:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb4e:	1d1a      	adds	r2, r3, #4
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bb5a:	b29b      	uxth	r3, r3
 800bb5c:	3b01      	subs	r3, #1
 800bb5e:	b29a      	uxth	r2, r3
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bb66:	e023      	b.n	800bbb0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb68:	f7f6 ff36 	bl	80029d8 <HAL_GetTick>
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	1ad3      	subs	r3, r2, r3
 800bb72:	683a      	ldr	r2, [r7, #0]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d803      	bhi.n	800bb80 <HAL_SPI_Transmit+0x164>
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb7e:	d102      	bne.n	800bb86 <HAL_SPI_Transmit+0x16a>
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d114      	bne.n	800bbb0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bb86:	68f8      	ldr	r0, [r7, #12]
 800bb88:	f000 fba8 	bl	800c2dc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb92:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2201      	movs	r2, #1
 800bba0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2200      	movs	r2, #0
 800bba8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bbac:	2303      	movs	r3, #3
 800bbae:	e11e      	b.n	800bdee <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d1b9      	bne.n	800bb30 <HAL_SPI_Transmit+0x114>
 800bbbc:	e0f1      	b.n	800bda2 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	68db      	ldr	r3, [r3, #12]
 800bbc2:	2b07      	cmp	r3, #7
 800bbc4:	f240 80e6 	bls.w	800bd94 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bbc8:	e05d      	b.n	800bc86 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	695b      	ldr	r3, [r3, #20]
 800bbd0:	f003 0302 	and.w	r3, r3, #2
 800bbd4:	2b02      	cmp	r3, #2
 800bbd6:	d132      	bne.n	800bc3e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d918      	bls.n	800bc16 <HAL_SPI_Transmit+0x1fa>
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d014      	beq.n	800bc16 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	6812      	ldr	r2, [r2, #0]
 800bbf6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bbfc:	1d1a      	adds	r2, r3, #4
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bc08:	b29b      	uxth	r3, r3
 800bc0a:	3b02      	subs	r3, #2
 800bc0c:	b29a      	uxth	r2, r3
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bc14:	e037      	b.n	800bc86 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bc1a:	881a      	ldrh	r2, [r3, #0]
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bc24:	1c9a      	adds	r2, r3, #2
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bc30:	b29b      	uxth	r3, r3
 800bc32:	3b01      	subs	r3, #1
 800bc34:	b29a      	uxth	r2, r3
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bc3c:	e023      	b.n	800bc86 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bc3e:	f7f6 fecb 	bl	80029d8 <HAL_GetTick>
 800bc42:	4602      	mov	r2, r0
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	1ad3      	subs	r3, r2, r3
 800bc48:	683a      	ldr	r2, [r7, #0]
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d803      	bhi.n	800bc56 <HAL_SPI_Transmit+0x23a>
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc54:	d102      	bne.n	800bc5c <HAL_SPI_Transmit+0x240>
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d114      	bne.n	800bc86 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bc5c:	68f8      	ldr	r0, [r7, #12]
 800bc5e:	f000 fb3d 	bl	800c2dc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc68:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	2201      	movs	r2, #1
 800bc76:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bc82:	2303      	movs	r3, #3
 800bc84:	e0b3      	b.n	800bdee <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d19b      	bne.n	800bbca <HAL_SPI_Transmit+0x1ae>
 800bc92:	e086      	b.n	800bda2 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	695b      	ldr	r3, [r3, #20]
 800bc9a:	f003 0302 	and.w	r3, r3, #2
 800bc9e:	2b02      	cmp	r3, #2
 800bca0:	d154      	bne.n	800bd4c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bca8:	b29b      	uxth	r3, r3
 800bcaa:	2b03      	cmp	r3, #3
 800bcac:	d918      	bls.n	800bce0 <HAL_SPI_Transmit+0x2c4>
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcb2:	2b40      	cmp	r3, #64	@ 0x40
 800bcb4:	d914      	bls.n	800bce0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	6812      	ldr	r2, [r2, #0]
 800bcc0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bcc6:	1d1a      	adds	r2, r3, #4
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bcd2:	b29b      	uxth	r3, r3
 800bcd4:	3b04      	subs	r3, #4
 800bcd6:	b29a      	uxth	r2, r3
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bcde:	e059      	b.n	800bd94 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bce6:	b29b      	uxth	r3, r3
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	d917      	bls.n	800bd1c <HAL_SPI_Transmit+0x300>
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d013      	beq.n	800bd1c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bcf8:	881a      	ldrh	r2, [r3, #0]
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd02:	1c9a      	adds	r2, r3, #2
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bd0e:	b29b      	uxth	r3, r3
 800bd10:	3b02      	subs	r3, #2
 800bd12:	b29a      	uxth	r2, r3
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bd1a:	e03b      	b.n	800bd94 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	3320      	adds	r3, #32
 800bd26:	7812      	ldrb	r2, [r2, #0]
 800bd28:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd2e:	1c5a      	adds	r2, r3, #1
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bd3a:	b29b      	uxth	r3, r3
 800bd3c:	3b01      	subs	r3, #1
 800bd3e:	b29a      	uxth	r2, r3
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bd46:	e025      	b.n	800bd94 <HAL_SPI_Transmit+0x378>
 800bd48:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd4c:	f7f6 fe44 	bl	80029d8 <HAL_GetTick>
 800bd50:	4602      	mov	r2, r0
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	1ad3      	subs	r3, r2, r3
 800bd56:	683a      	ldr	r2, [r7, #0]
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d803      	bhi.n	800bd64 <HAL_SPI_Transmit+0x348>
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd62:	d102      	bne.n	800bd6a <HAL_SPI_Transmit+0x34e>
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d114      	bne.n	800bd94 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bd6a:	68f8      	ldr	r0, [r7, #12]
 800bd6c:	f000 fab6 	bl	800c2dc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd76:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2201      	movs	r2, #1
 800bd84:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bd90:	2303      	movs	r3, #3
 800bd92:	e02c      	b.n	800bdee <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bd9a:	b29b      	uxth	r3, r3
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	f47f af79 	bne.w	800bc94 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	9300      	str	r3, [sp, #0]
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	2108      	movs	r1, #8
 800bdac:	68f8      	ldr	r0, [r7, #12]
 800bdae:	f000 fb35 	bl	800c41c <SPI_WaitOnFlagUntilTimeout>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d007      	beq.n	800bdc8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bdbe:	f043 0220 	orr.w	r2, r3, #32
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bdc8:	68f8      	ldr	r0, [r7, #12]
 800bdca:	f000 fa87 	bl	800c2dc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2201      	movs	r2, #1
 800bdd2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d001      	beq.n	800bdec <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800bde8:	2301      	movs	r3, #1
 800bdea:	e000      	b.n	800bdee <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800bdec:	2300      	movs	r3, #0
  }
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3718      	adds	r7, #24
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop

0800bdf8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b088      	sub	sp, #32
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	60f8      	str	r0, [r7, #12]
 800be00:	60b9      	str	r1, [r7, #8]
 800be02:	603b      	str	r3, [r7, #0]
 800be04:	4613      	mov	r3, r2
 800be06:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be0c:	095b      	lsrs	r3, r3, #5
 800be0e:	b29b      	uxth	r3, r3
 800be10:	3301      	adds	r3, #1
 800be12:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	3330      	adds	r3, #48	@ 0x30
 800be1a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800be1c:	f7f6 fddc 	bl	80029d8 <HAL_GetTick>
 800be20:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800be28:	b2db      	uxtb	r3, r3
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	d001      	beq.n	800be32 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800be2e:	2302      	movs	r3, #2
 800be30:	e250      	b.n	800c2d4 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d002      	beq.n	800be3e <HAL_SPI_Receive+0x46>
 800be38:	88fb      	ldrh	r3, [r7, #6]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d101      	bne.n	800be42 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800be3e:	2301      	movs	r3, #1
 800be40:	e248      	b.n	800c2d4 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d101      	bne.n	800be50 <HAL_SPI_Receive+0x58>
 800be4c:	2302      	movs	r3, #2
 800be4e:	e241      	b.n	800c2d4 <HAL_SPI_Receive+0x4dc>
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2201      	movs	r2, #1
 800be54:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2204      	movs	r2, #4
 800be5c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2200      	movs	r2, #0
 800be64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	68ba      	ldr	r2, [r7, #8]
 800be6c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	88fa      	ldrh	r2, [r7, #6]
 800be72:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	88fa      	ldrh	r2, [r7, #6]
 800be7a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	2200      	movs	r2, #0
 800be82:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2200      	movs	r2, #0
 800be88:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2200      	movs	r2, #0
 800be90:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2200      	movs	r2, #0
 800be98:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	2200      	movs	r2, #0
 800be9e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	689b      	ldr	r3, [r3, #8]
 800bea4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800bea8:	d108      	bne.n	800bebc <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	681a      	ldr	r2, [r3, #0]
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800beb8:	601a      	str	r2, [r3, #0]
 800beba:	e009      	b.n	800bed0 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	68db      	ldr	r3, [r3, #12]
 800bec2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800bece:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	685a      	ldr	r2, [r3, #4]
 800bed6:	4b95      	ldr	r3, [pc, #596]	@ (800c12c <HAL_SPI_Receive+0x334>)
 800bed8:	4013      	ands	r3, r2
 800beda:	88f9      	ldrh	r1, [r7, #6]
 800bedc:	68fa      	ldr	r2, [r7, #12]
 800bede:	6812      	ldr	r2, [r2, #0]
 800bee0:	430b      	orrs	r3, r1
 800bee2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	681a      	ldr	r2, [r3, #0]
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f042 0201 	orr.w	r2, r2, #1
 800bef2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800befc:	d107      	bne.n	800bf0e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	681a      	ldr	r2, [r3, #0]
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bf0c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	68db      	ldr	r3, [r3, #12]
 800bf12:	2b0f      	cmp	r3, #15
 800bf14:	d96c      	bls.n	800bff0 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bf16:	e064      	b.n	800bfe2 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	695b      	ldr	r3, [r3, #20]
 800bf1e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	695b      	ldr	r3, [r3, #20]
 800bf26:	f003 0301 	and.w	r3, r3, #1
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d114      	bne.n	800bf58 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681a      	ldr	r2, [r3, #0]
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf36:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bf38:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf3e:	1d1a      	adds	r2, r3, #4
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bf4a:	b29b      	uxth	r3, r3
 800bf4c:	3b01      	subs	r3, #1
 800bf4e:	b29a      	uxth	r2, r3
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bf56:	e044      	b.n	800bfe2 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bf5e:	b29b      	uxth	r3, r3
 800bf60:	8bfa      	ldrh	r2, [r7, #30]
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d919      	bls.n	800bf9a <HAL_SPI_Receive+0x1a2>
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d014      	beq.n	800bf9a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681a      	ldr	r2, [r3, #0]
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf78:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bf7a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf80:	1d1a      	adds	r2, r3, #4
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	3b01      	subs	r3, #1
 800bf90:	b29a      	uxth	r2, r3
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bf98:	e023      	b.n	800bfe2 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf9a:	f7f6 fd1d 	bl	80029d8 <HAL_GetTick>
 800bf9e:	4602      	mov	r2, r0
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	1ad3      	subs	r3, r2, r3
 800bfa4:	683a      	ldr	r2, [r7, #0]
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d803      	bhi.n	800bfb2 <HAL_SPI_Receive+0x1ba>
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfb0:	d102      	bne.n	800bfb8 <HAL_SPI_Receive+0x1c0>
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d114      	bne.n	800bfe2 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bfb8:	68f8      	ldr	r0, [r7, #12]
 800bfba:	f000 f98f 	bl	800c2dc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bfc4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bfde:	2303      	movs	r3, #3
 800bfe0:	e178      	b.n	800c2d4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bfe8:	b29b      	uxth	r3, r3
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d194      	bne.n	800bf18 <HAL_SPI_Receive+0x120>
 800bfee:	e15e      	b.n	800c2ae <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	68db      	ldr	r3, [r3, #12]
 800bff4:	2b07      	cmp	r3, #7
 800bff6:	f240 8153 	bls.w	800c2a0 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bffa:	e08f      	b.n	800c11c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	695b      	ldr	r3, [r3, #20]
 800c002:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	695b      	ldr	r3, [r3, #20]
 800c00a:	f003 0301 	and.w	r3, r3, #1
 800c00e:	2b01      	cmp	r3, #1
 800c010:	d114      	bne.n	800c03c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c016:	69ba      	ldr	r2, [r7, #24]
 800c018:	8812      	ldrh	r2, [r2, #0]
 800c01a:	b292      	uxth	r2, r2
 800c01c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c022:	1c9a      	adds	r2, r3, #2
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c02e:	b29b      	uxth	r3, r3
 800c030:	3b01      	subs	r3, #1
 800c032:	b29a      	uxth	r2, r3
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c03a:	e06f      	b.n	800c11c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c042:	b29b      	uxth	r3, r3
 800c044:	8bfa      	ldrh	r2, [r7, #30]
 800c046:	429a      	cmp	r2, r3
 800c048:	d924      	bls.n	800c094 <HAL_SPI_Receive+0x29c>
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c050:	2b00      	cmp	r3, #0
 800c052:	d01f      	beq.n	800c094 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c058:	69ba      	ldr	r2, [r7, #24]
 800c05a:	8812      	ldrh	r2, [r2, #0]
 800c05c:	b292      	uxth	r2, r2
 800c05e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c064:	1c9a      	adds	r2, r3, #2
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c06e:	69ba      	ldr	r2, [r7, #24]
 800c070:	8812      	ldrh	r2, [r2, #0]
 800c072:	b292      	uxth	r2, r2
 800c074:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c07a:	1c9a      	adds	r2, r3, #2
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c086:	b29b      	uxth	r3, r3
 800c088:	3b02      	subs	r3, #2
 800c08a:	b29a      	uxth	r2, r3
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c092:	e043      	b.n	800c11c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c09a:	b29b      	uxth	r3, r3
 800c09c:	2b01      	cmp	r3, #1
 800c09e:	d119      	bne.n	800c0d4 <HAL_SPI_Receive+0x2dc>
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d014      	beq.n	800c0d4 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c0ae:	69ba      	ldr	r2, [r7, #24]
 800c0b0:	8812      	ldrh	r2, [r2, #0]
 800c0b2:	b292      	uxth	r2, r2
 800c0b4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c0ba:	1c9a      	adds	r2, r3, #2
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	3b01      	subs	r3, #1
 800c0ca:	b29a      	uxth	r2, r3
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c0d2:	e023      	b.n	800c11c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c0d4:	f7f6 fc80 	bl	80029d8 <HAL_GetTick>
 800c0d8:	4602      	mov	r2, r0
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	1ad3      	subs	r3, r2, r3
 800c0de:	683a      	ldr	r2, [r7, #0]
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d803      	bhi.n	800c0ec <HAL_SPI_Receive+0x2f4>
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ea:	d102      	bne.n	800c0f2 <HAL_SPI_Receive+0x2fa>
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d114      	bne.n	800c11c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c0f2:	68f8      	ldr	r0, [r7, #12]
 800c0f4:	f000 f8f2 	bl	800c2dc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c0fe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	2201      	movs	r2, #1
 800c10c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	2200      	movs	r2, #0
 800c114:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c118:	2303      	movs	r3, #3
 800c11a:	e0db      	b.n	800c2d4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c122:	b29b      	uxth	r3, r3
 800c124:	2b00      	cmp	r3, #0
 800c126:	f47f af69 	bne.w	800bffc <HAL_SPI_Receive+0x204>
 800c12a:	e0c0      	b.n	800c2ae <HAL_SPI_Receive+0x4b6>
 800c12c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	695b      	ldr	r3, [r3, #20]
 800c136:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	695b      	ldr	r3, [r3, #20]
 800c13e:	f003 0301 	and.w	r3, r3, #1
 800c142:	2b01      	cmp	r3, #1
 800c144:	d117      	bne.n	800c176 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c152:	7812      	ldrb	r2, [r2, #0]
 800c154:	b2d2      	uxtb	r2, r2
 800c156:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c15c:	1c5a      	adds	r2, r3, #1
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c168:	b29b      	uxth	r3, r3
 800c16a:	3b01      	subs	r3, #1
 800c16c:	b29a      	uxth	r2, r3
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c174:	e094      	b.n	800c2a0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c17c:	b29b      	uxth	r3, r3
 800c17e:	8bfa      	ldrh	r2, [r7, #30]
 800c180:	429a      	cmp	r2, r3
 800c182:	d946      	bls.n	800c212 <HAL_SPI_Receive+0x41a>
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d041      	beq.n	800c212 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c19a:	7812      	ldrb	r2, [r2, #0]
 800c19c:	b2d2      	uxtb	r2, r2
 800c19e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c1a4:	1c5a      	adds	r2, r3, #1
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c1b6:	7812      	ldrb	r2, [r2, #0]
 800c1b8:	b2d2      	uxtb	r2, r2
 800c1ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c1c0:	1c5a      	adds	r2, r3, #1
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c1d2:	7812      	ldrb	r2, [r2, #0]
 800c1d4:	b2d2      	uxtb	r2, r2
 800c1d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c1dc:	1c5a      	adds	r2, r3, #1
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c1ee:	7812      	ldrb	r2, [r2, #0]
 800c1f0:	b2d2      	uxtb	r2, r2
 800c1f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c1f8:	1c5a      	adds	r2, r3, #1
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c204:	b29b      	uxth	r3, r3
 800c206:	3b04      	subs	r3, #4
 800c208:	b29a      	uxth	r2, r3
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c210:	e046      	b.n	800c2a0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c218:	b29b      	uxth	r3, r3
 800c21a:	2b03      	cmp	r3, #3
 800c21c:	d81c      	bhi.n	800c258 <HAL_SPI_Receive+0x460>
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800c224:	2b00      	cmp	r3, #0
 800c226:	d017      	beq.n	800c258 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c234:	7812      	ldrb	r2, [r2, #0]
 800c236:	b2d2      	uxtb	r2, r2
 800c238:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c23e:	1c5a      	adds	r2, r3, #1
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c24a:	b29b      	uxth	r3, r3
 800c24c:	3b01      	subs	r3, #1
 800c24e:	b29a      	uxth	r2, r3
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c256:	e023      	b.n	800c2a0 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c258:	f7f6 fbbe 	bl	80029d8 <HAL_GetTick>
 800c25c:	4602      	mov	r2, r0
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	1ad3      	subs	r3, r2, r3
 800c262:	683a      	ldr	r2, [r7, #0]
 800c264:	429a      	cmp	r2, r3
 800c266:	d803      	bhi.n	800c270 <HAL_SPI_Receive+0x478>
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c26e:	d102      	bne.n	800c276 <HAL_SPI_Receive+0x47e>
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d114      	bne.n	800c2a0 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c276:	68f8      	ldr	r0, [r7, #12]
 800c278:	f000 f830 	bl	800c2dc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c282:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2201      	movs	r2, #1
 800c290:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2200      	movs	r2, #0
 800c298:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c29c:	2303      	movs	r3, #3
 800c29e:	e019      	b.n	800c2d4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	f47f af41 	bne.w	800c130 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c2ae:	68f8      	ldr	r0, [r7, #12]
 800c2b0:	f000 f814 	bl	800c2dc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d001      	beq.n	800c2d2 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	e000      	b.n	800c2d4 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800c2d2:	2300      	movs	r3, #0
  }
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3720      	adds	r7, #32
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}

0800c2dc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c2dc:	b480      	push	{r7}
 800c2de:	b085      	sub	sp, #20
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	695b      	ldr	r3, [r3, #20]
 800c2ea:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	699a      	ldr	r2, [r3, #24]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f042 0208 	orr.w	r2, r2, #8
 800c2fa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	699a      	ldr	r2, [r3, #24]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f042 0210 	orr.w	r2, r2, #16
 800c30a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	681a      	ldr	r2, [r3, #0]
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f022 0201 	bic.w	r2, r2, #1
 800c31a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	6919      	ldr	r1, [r3, #16]
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	4b3c      	ldr	r3, [pc, #240]	@ (800c418 <SPI_CloseTransfer+0x13c>)
 800c328:	400b      	ands	r3, r1
 800c32a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	689a      	ldr	r2, [r3, #8]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c33a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c342:	b2db      	uxtb	r3, r3
 800c344:	2b04      	cmp	r3, #4
 800c346:	d014      	beq.n	800c372 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	f003 0320 	and.w	r3, r3, #32
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d00f      	beq.n	800c372 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c358:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	699a      	ldr	r2, [r3, #24]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f042 0220 	orr.w	r2, r2, #32
 800c370:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c378:	b2db      	uxtb	r3, r3
 800c37a:	2b03      	cmp	r3, #3
 800c37c:	d014      	beq.n	800c3a8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c384:	2b00      	cmp	r3, #0
 800c386:	d00f      	beq.n	800c3a8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c38e:	f043 0204 	orr.w	r2, r3, #4
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	699a      	ldr	r2, [r3, #24]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c3a6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d00f      	beq.n	800c3d2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c3b8:	f043 0201 	orr.w	r2, r3, #1
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	699a      	ldr	r2, [r3, #24]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c3d0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d00f      	beq.n	800c3fc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c3e2:	f043 0208 	orr.w	r2, r3, #8
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	699a      	ldr	r2, [r3, #24]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c3fa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2200      	movs	r2, #0
 800c400:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2200      	movs	r2, #0
 800c408:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800c40c:	bf00      	nop
 800c40e:	3714      	adds	r7, #20
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr
 800c418:	fffffc90 	.word	0xfffffc90

0800c41c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b084      	sub	sp, #16
 800c420:	af00      	add	r7, sp, #0
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	603b      	str	r3, [r7, #0]
 800c428:	4613      	mov	r3, r2
 800c42a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c42c:	e010      	b.n	800c450 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c42e:	f7f6 fad3 	bl	80029d8 <HAL_GetTick>
 800c432:	4602      	mov	r2, r0
 800c434:	69bb      	ldr	r3, [r7, #24]
 800c436:	1ad3      	subs	r3, r2, r3
 800c438:	683a      	ldr	r2, [r7, #0]
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d803      	bhi.n	800c446 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c444:	d102      	bne.n	800c44c <SPI_WaitOnFlagUntilTimeout+0x30>
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d101      	bne.n	800c450 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c44c:	2303      	movs	r3, #3
 800c44e:	e00f      	b.n	800c470 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	695a      	ldr	r2, [r3, #20]
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	4013      	ands	r3, r2
 800c45a:	68ba      	ldr	r2, [r7, #8]
 800c45c:	429a      	cmp	r2, r3
 800c45e:	bf0c      	ite	eq
 800c460:	2301      	moveq	r3, #1
 800c462:	2300      	movne	r3, #0
 800c464:	b2db      	uxtb	r3, r3
 800c466:	461a      	mov	r2, r3
 800c468:	79fb      	ldrb	r3, [r7, #7]
 800c46a:	429a      	cmp	r2, r3
 800c46c:	d0df      	beq.n	800c42e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c46e:	2300      	movs	r3, #0
}
 800c470:	4618      	mov	r0, r3
 800c472:	3710      	adds	r7, #16
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}

0800c478 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c478:	b480      	push	{r7}
 800c47a:	b085      	sub	sp, #20
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c484:	095b      	lsrs	r3, r3, #5
 800c486:	3301      	adds	r3, #1
 800c488:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	68db      	ldr	r3, [r3, #12]
 800c48e:	3301      	adds	r3, #1
 800c490:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	3307      	adds	r3, #7
 800c496:	08db      	lsrs	r3, r3, #3
 800c498:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	68fa      	ldr	r2, [r7, #12]
 800c49e:	fb02 f303 	mul.w	r3, r2, r3
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3714      	adds	r7, #20
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ac:	4770      	bx	lr

0800c4ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c4ae:	b580      	push	{r7, lr}
 800c4b0:	b082      	sub	sp, #8
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d101      	bne.n	800c4c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c4bc:	2301      	movs	r3, #1
 800c4be:	e049      	b.n	800c554 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c4c6:	b2db      	uxtb	r3, r3
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d106      	bne.n	800c4da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f006 f9b7 	bl	8012848 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2202      	movs	r2, #2
 800c4de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681a      	ldr	r2, [r3, #0]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	3304      	adds	r3, #4
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	4610      	mov	r0, r2
 800c4ee:	f000 fc3d 	bl	800cd6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2201      	movs	r2, #1
 800c4fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2201      	movs	r2, #1
 800c506:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2201      	movs	r2, #1
 800c50e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2201      	movs	r2, #1
 800c516:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2201      	movs	r2, #1
 800c51e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2201      	movs	r2, #1
 800c526:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2201      	movs	r2, #1
 800c52e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2201      	movs	r2, #1
 800c536:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2201      	movs	r2, #1
 800c53e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2201      	movs	r2, #1
 800c546:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2201      	movs	r2, #1
 800c54e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c552:	2300      	movs	r3, #0
}
 800c554:	4618      	mov	r0, r3
 800c556:	3708      	adds	r7, #8
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}

0800c55c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b082      	sub	sp, #8
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d101      	bne.n	800c56e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c56a:	2301      	movs	r3, #1
 800c56c:	e049      	b.n	800c602 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c574:	b2db      	uxtb	r3, r3
 800c576:	2b00      	cmp	r3, #0
 800c578:	d106      	bne.n	800c588 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2200      	movs	r2, #0
 800c57e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f006 f982 	bl	801288c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2202      	movs	r2, #2
 800c58c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681a      	ldr	r2, [r3, #0]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	3304      	adds	r3, #4
 800c598:	4619      	mov	r1, r3
 800c59a:	4610      	mov	r0, r2
 800c59c:	f000 fbe6 	bl	800cd6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2201      	movs	r2, #1
 800c5bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2201      	movs	r2, #1
 800c5c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2201      	movs	r2, #1
 800c5dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c600:	2300      	movs	r3, #0
}
 800c602:	4618      	mov	r0, r3
 800c604:	3708      	adds	r7, #8
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}
	...

0800c60c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b084      	sub	sp, #16
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d109      	bne.n	800c630 <HAL_TIM_PWM_Start+0x24>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c622:	b2db      	uxtb	r3, r3
 800c624:	2b01      	cmp	r3, #1
 800c626:	bf14      	ite	ne
 800c628:	2301      	movne	r3, #1
 800c62a:	2300      	moveq	r3, #0
 800c62c:	b2db      	uxtb	r3, r3
 800c62e:	e03c      	b.n	800c6aa <HAL_TIM_PWM_Start+0x9e>
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	2b04      	cmp	r3, #4
 800c634:	d109      	bne.n	800c64a <HAL_TIM_PWM_Start+0x3e>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c63c:	b2db      	uxtb	r3, r3
 800c63e:	2b01      	cmp	r3, #1
 800c640:	bf14      	ite	ne
 800c642:	2301      	movne	r3, #1
 800c644:	2300      	moveq	r3, #0
 800c646:	b2db      	uxtb	r3, r3
 800c648:	e02f      	b.n	800c6aa <HAL_TIM_PWM_Start+0x9e>
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	2b08      	cmp	r3, #8
 800c64e:	d109      	bne.n	800c664 <HAL_TIM_PWM_Start+0x58>
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c656:	b2db      	uxtb	r3, r3
 800c658:	2b01      	cmp	r3, #1
 800c65a:	bf14      	ite	ne
 800c65c:	2301      	movne	r3, #1
 800c65e:	2300      	moveq	r3, #0
 800c660:	b2db      	uxtb	r3, r3
 800c662:	e022      	b.n	800c6aa <HAL_TIM_PWM_Start+0x9e>
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	2b0c      	cmp	r3, #12
 800c668:	d109      	bne.n	800c67e <HAL_TIM_PWM_Start+0x72>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c670:	b2db      	uxtb	r3, r3
 800c672:	2b01      	cmp	r3, #1
 800c674:	bf14      	ite	ne
 800c676:	2301      	movne	r3, #1
 800c678:	2300      	moveq	r3, #0
 800c67a:	b2db      	uxtb	r3, r3
 800c67c:	e015      	b.n	800c6aa <HAL_TIM_PWM_Start+0x9e>
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	2b10      	cmp	r3, #16
 800c682:	d109      	bne.n	800c698 <HAL_TIM_PWM_Start+0x8c>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c68a:	b2db      	uxtb	r3, r3
 800c68c:	2b01      	cmp	r3, #1
 800c68e:	bf14      	ite	ne
 800c690:	2301      	movne	r3, #1
 800c692:	2300      	moveq	r3, #0
 800c694:	b2db      	uxtb	r3, r3
 800c696:	e008      	b.n	800c6aa <HAL_TIM_PWM_Start+0x9e>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c69e:	b2db      	uxtb	r3, r3
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	bf14      	ite	ne
 800c6a4:	2301      	movne	r3, #1
 800c6a6:	2300      	moveq	r3, #0
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d001      	beq.n	800c6b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	e0a1      	b.n	800c7f6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d104      	bne.n	800c6c2 <HAL_TIM_PWM_Start+0xb6>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2202      	movs	r2, #2
 800c6bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c6c0:	e023      	b.n	800c70a <HAL_TIM_PWM_Start+0xfe>
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	2b04      	cmp	r3, #4
 800c6c6:	d104      	bne.n	800c6d2 <HAL_TIM_PWM_Start+0xc6>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2202      	movs	r2, #2
 800c6cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c6d0:	e01b      	b.n	800c70a <HAL_TIM_PWM_Start+0xfe>
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	2b08      	cmp	r3, #8
 800c6d6:	d104      	bne.n	800c6e2 <HAL_TIM_PWM_Start+0xd6>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2202      	movs	r2, #2
 800c6dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c6e0:	e013      	b.n	800c70a <HAL_TIM_PWM_Start+0xfe>
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	2b0c      	cmp	r3, #12
 800c6e6:	d104      	bne.n	800c6f2 <HAL_TIM_PWM_Start+0xe6>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2202      	movs	r2, #2
 800c6ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c6f0:	e00b      	b.n	800c70a <HAL_TIM_PWM_Start+0xfe>
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	2b10      	cmp	r3, #16
 800c6f6:	d104      	bne.n	800c702 <HAL_TIM_PWM_Start+0xf6>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2202      	movs	r2, #2
 800c6fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c700:	e003      	b.n	800c70a <HAL_TIM_PWM_Start+0xfe>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2202      	movs	r2, #2
 800c706:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	2201      	movs	r2, #1
 800c710:	6839      	ldr	r1, [r7, #0]
 800c712:	4618      	mov	r0, r3
 800c714:	f000 ff3e 	bl	800d594 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4a38      	ldr	r2, [pc, #224]	@ (800c800 <HAL_TIM_PWM_Start+0x1f4>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	d013      	beq.n	800c74a <HAL_TIM_PWM_Start+0x13e>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4a37      	ldr	r2, [pc, #220]	@ (800c804 <HAL_TIM_PWM_Start+0x1f8>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	d00e      	beq.n	800c74a <HAL_TIM_PWM_Start+0x13e>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4a35      	ldr	r2, [pc, #212]	@ (800c808 <HAL_TIM_PWM_Start+0x1fc>)
 800c732:	4293      	cmp	r3, r2
 800c734:	d009      	beq.n	800c74a <HAL_TIM_PWM_Start+0x13e>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4a34      	ldr	r2, [pc, #208]	@ (800c80c <HAL_TIM_PWM_Start+0x200>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d004      	beq.n	800c74a <HAL_TIM_PWM_Start+0x13e>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4a32      	ldr	r2, [pc, #200]	@ (800c810 <HAL_TIM_PWM_Start+0x204>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d101      	bne.n	800c74e <HAL_TIM_PWM_Start+0x142>
 800c74a:	2301      	movs	r3, #1
 800c74c:	e000      	b.n	800c750 <HAL_TIM_PWM_Start+0x144>
 800c74e:	2300      	movs	r3, #0
 800c750:	2b00      	cmp	r3, #0
 800c752:	d007      	beq.n	800c764 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c762:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	4a25      	ldr	r2, [pc, #148]	@ (800c800 <HAL_TIM_PWM_Start+0x1f4>)
 800c76a:	4293      	cmp	r3, r2
 800c76c:	d022      	beq.n	800c7b4 <HAL_TIM_PWM_Start+0x1a8>
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c776:	d01d      	beq.n	800c7b4 <HAL_TIM_PWM_Start+0x1a8>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	4a25      	ldr	r2, [pc, #148]	@ (800c814 <HAL_TIM_PWM_Start+0x208>)
 800c77e:	4293      	cmp	r3, r2
 800c780:	d018      	beq.n	800c7b4 <HAL_TIM_PWM_Start+0x1a8>
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	4a24      	ldr	r2, [pc, #144]	@ (800c818 <HAL_TIM_PWM_Start+0x20c>)
 800c788:	4293      	cmp	r3, r2
 800c78a:	d013      	beq.n	800c7b4 <HAL_TIM_PWM_Start+0x1a8>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	4a22      	ldr	r2, [pc, #136]	@ (800c81c <HAL_TIM_PWM_Start+0x210>)
 800c792:	4293      	cmp	r3, r2
 800c794:	d00e      	beq.n	800c7b4 <HAL_TIM_PWM_Start+0x1a8>
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	4a1a      	ldr	r2, [pc, #104]	@ (800c804 <HAL_TIM_PWM_Start+0x1f8>)
 800c79c:	4293      	cmp	r3, r2
 800c79e:	d009      	beq.n	800c7b4 <HAL_TIM_PWM_Start+0x1a8>
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	4a1e      	ldr	r2, [pc, #120]	@ (800c820 <HAL_TIM_PWM_Start+0x214>)
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d004      	beq.n	800c7b4 <HAL_TIM_PWM_Start+0x1a8>
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	4a16      	ldr	r2, [pc, #88]	@ (800c808 <HAL_TIM_PWM_Start+0x1fc>)
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	d115      	bne.n	800c7e0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	689a      	ldr	r2, [r3, #8]
 800c7ba:	4b1a      	ldr	r3, [pc, #104]	@ (800c824 <HAL_TIM_PWM_Start+0x218>)
 800c7bc:	4013      	ands	r3, r2
 800c7be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	2b06      	cmp	r3, #6
 800c7c4:	d015      	beq.n	800c7f2 <HAL_TIM_PWM_Start+0x1e6>
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c7cc:	d011      	beq.n	800c7f2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	681a      	ldr	r2, [r3, #0]
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f042 0201 	orr.w	r2, r2, #1
 800c7dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7de:	e008      	b.n	800c7f2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	681a      	ldr	r2, [r3, #0]
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f042 0201 	orr.w	r2, r2, #1
 800c7ee:	601a      	str	r2, [r3, #0]
 800c7f0:	e000      	b.n	800c7f4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c7f4:	2300      	movs	r3, #0
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3710      	adds	r7, #16
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}
 800c7fe:	bf00      	nop
 800c800:	40010000 	.word	0x40010000
 800c804:	40010400 	.word	0x40010400
 800c808:	40014000 	.word	0x40014000
 800c80c:	40014400 	.word	0x40014400
 800c810:	40014800 	.word	0x40014800
 800c814:	40000400 	.word	0x40000400
 800c818:	40000800 	.word	0x40000800
 800c81c:	40000c00 	.word	0x40000c00
 800c820:	40001800 	.word	0x40001800
 800c824:	00010007 	.word	0x00010007

0800c828 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b082      	sub	sp, #8
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	2200      	movs	r2, #0
 800c838:	6839      	ldr	r1, [r7, #0]
 800c83a:	4618      	mov	r0, r3
 800c83c:	f000 feaa 	bl	800d594 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	4a3e      	ldr	r2, [pc, #248]	@ (800c940 <HAL_TIM_PWM_Stop+0x118>)
 800c846:	4293      	cmp	r3, r2
 800c848:	d013      	beq.n	800c872 <HAL_TIM_PWM_Stop+0x4a>
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	4a3d      	ldr	r2, [pc, #244]	@ (800c944 <HAL_TIM_PWM_Stop+0x11c>)
 800c850:	4293      	cmp	r3, r2
 800c852:	d00e      	beq.n	800c872 <HAL_TIM_PWM_Stop+0x4a>
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	4a3b      	ldr	r2, [pc, #236]	@ (800c948 <HAL_TIM_PWM_Stop+0x120>)
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d009      	beq.n	800c872 <HAL_TIM_PWM_Stop+0x4a>
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	4a3a      	ldr	r2, [pc, #232]	@ (800c94c <HAL_TIM_PWM_Stop+0x124>)
 800c864:	4293      	cmp	r3, r2
 800c866:	d004      	beq.n	800c872 <HAL_TIM_PWM_Stop+0x4a>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	4a38      	ldr	r2, [pc, #224]	@ (800c950 <HAL_TIM_PWM_Stop+0x128>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	d101      	bne.n	800c876 <HAL_TIM_PWM_Stop+0x4e>
 800c872:	2301      	movs	r3, #1
 800c874:	e000      	b.n	800c878 <HAL_TIM_PWM_Stop+0x50>
 800c876:	2300      	movs	r3, #0
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d017      	beq.n	800c8ac <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	6a1a      	ldr	r2, [r3, #32]
 800c882:	f241 1311 	movw	r3, #4369	@ 0x1111
 800c886:	4013      	ands	r3, r2
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d10f      	bne.n	800c8ac <HAL_TIM_PWM_Stop+0x84>
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	6a1a      	ldr	r2, [r3, #32]
 800c892:	f240 4344 	movw	r3, #1092	@ 0x444
 800c896:	4013      	ands	r3, r2
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d107      	bne.n	800c8ac <HAL_TIM_PWM_Stop+0x84>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c8aa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	6a1a      	ldr	r2, [r3, #32]
 800c8b2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800c8b6:	4013      	ands	r3, r2
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d10f      	bne.n	800c8dc <HAL_TIM_PWM_Stop+0xb4>
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	6a1a      	ldr	r2, [r3, #32]
 800c8c2:	f240 4344 	movw	r3, #1092	@ 0x444
 800c8c6:	4013      	ands	r3, r2
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d107      	bne.n	800c8dc <HAL_TIM_PWM_Stop+0xb4>
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f022 0201 	bic.w	r2, r2, #1
 800c8da:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d104      	bne.n	800c8ec <HAL_TIM_PWM_Stop+0xc4>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2201      	movs	r2, #1
 800c8e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c8ea:	e023      	b.n	800c934 <HAL_TIM_PWM_Stop+0x10c>
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	2b04      	cmp	r3, #4
 800c8f0:	d104      	bne.n	800c8fc <HAL_TIM_PWM_Stop+0xd4>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2201      	movs	r2, #1
 800c8f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c8fa:	e01b      	b.n	800c934 <HAL_TIM_PWM_Stop+0x10c>
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	2b08      	cmp	r3, #8
 800c900:	d104      	bne.n	800c90c <HAL_TIM_PWM_Stop+0xe4>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2201      	movs	r2, #1
 800c906:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c90a:	e013      	b.n	800c934 <HAL_TIM_PWM_Stop+0x10c>
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	2b0c      	cmp	r3, #12
 800c910:	d104      	bne.n	800c91c <HAL_TIM_PWM_Stop+0xf4>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2201      	movs	r2, #1
 800c916:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c91a:	e00b      	b.n	800c934 <HAL_TIM_PWM_Stop+0x10c>
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	2b10      	cmp	r3, #16
 800c920:	d104      	bne.n	800c92c <HAL_TIM_PWM_Stop+0x104>
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2201      	movs	r2, #1
 800c926:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c92a:	e003      	b.n	800c934 <HAL_TIM_PWM_Stop+0x10c>
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2201      	movs	r2, #1
 800c930:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800c934:	2300      	movs	r3, #0
}
 800c936:	4618      	mov	r0, r3
 800c938:	3708      	adds	r7, #8
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}
 800c93e:	bf00      	nop
 800c940:	40010000 	.word	0x40010000
 800c944:	40010400 	.word	0x40010400
 800c948:	40014000 	.word	0x40014000
 800c94c:	40014400 	.word	0x40014400
 800c950:	40014800 	.word	0x40014800

0800c954 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b086      	sub	sp, #24
 800c958:	af00      	add	r7, sp, #0
 800c95a:	60f8      	str	r0, [r7, #12]
 800c95c:	60b9      	str	r1, [r7, #8]
 800c95e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c960:	2300      	movs	r3, #0
 800c962:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c96a:	2b01      	cmp	r3, #1
 800c96c:	d101      	bne.n	800c972 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c96e:	2302      	movs	r3, #2
 800c970:	e0ff      	b.n	800cb72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2201      	movs	r2, #1
 800c976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2b14      	cmp	r3, #20
 800c97e:	f200 80f0 	bhi.w	800cb62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c982:	a201      	add	r2, pc, #4	@ (adr r2, 800c988 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c988:	0800c9dd 	.word	0x0800c9dd
 800c98c:	0800cb63 	.word	0x0800cb63
 800c990:	0800cb63 	.word	0x0800cb63
 800c994:	0800cb63 	.word	0x0800cb63
 800c998:	0800ca1d 	.word	0x0800ca1d
 800c99c:	0800cb63 	.word	0x0800cb63
 800c9a0:	0800cb63 	.word	0x0800cb63
 800c9a4:	0800cb63 	.word	0x0800cb63
 800c9a8:	0800ca5f 	.word	0x0800ca5f
 800c9ac:	0800cb63 	.word	0x0800cb63
 800c9b0:	0800cb63 	.word	0x0800cb63
 800c9b4:	0800cb63 	.word	0x0800cb63
 800c9b8:	0800ca9f 	.word	0x0800ca9f
 800c9bc:	0800cb63 	.word	0x0800cb63
 800c9c0:	0800cb63 	.word	0x0800cb63
 800c9c4:	0800cb63 	.word	0x0800cb63
 800c9c8:	0800cae1 	.word	0x0800cae1
 800c9cc:	0800cb63 	.word	0x0800cb63
 800c9d0:	0800cb63 	.word	0x0800cb63
 800c9d4:	0800cb63 	.word	0x0800cb63
 800c9d8:	0800cb21 	.word	0x0800cb21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	68b9      	ldr	r1, [r7, #8]
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f000 fa62 	bl	800ceac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	699a      	ldr	r2, [r3, #24]
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f042 0208 	orr.w	r2, r2, #8
 800c9f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	699a      	ldr	r2, [r3, #24]
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f022 0204 	bic.w	r2, r2, #4
 800ca06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	6999      	ldr	r1, [r3, #24]
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	691a      	ldr	r2, [r3, #16]
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	430a      	orrs	r2, r1
 800ca18:	619a      	str	r2, [r3, #24]
      break;
 800ca1a:	e0a5      	b.n	800cb68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	68b9      	ldr	r1, [r7, #8]
 800ca22:	4618      	mov	r0, r3
 800ca24:	f000 fad2 	bl	800cfcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	699a      	ldr	r2, [r3, #24]
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ca36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	699a      	ldr	r2, [r3, #24]
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ca46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	6999      	ldr	r1, [r3, #24]
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	691b      	ldr	r3, [r3, #16]
 800ca52:	021a      	lsls	r2, r3, #8
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	430a      	orrs	r2, r1
 800ca5a:	619a      	str	r2, [r3, #24]
      break;
 800ca5c:	e084      	b.n	800cb68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	68b9      	ldr	r1, [r7, #8]
 800ca64:	4618      	mov	r0, r3
 800ca66:	f000 fb3b 	bl	800d0e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	69da      	ldr	r2, [r3, #28]
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	f042 0208 	orr.w	r2, r2, #8
 800ca78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	69da      	ldr	r2, [r3, #28]
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	f022 0204 	bic.w	r2, r2, #4
 800ca88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	69d9      	ldr	r1, [r3, #28]
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	691a      	ldr	r2, [r3, #16]
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	430a      	orrs	r2, r1
 800ca9a:	61da      	str	r2, [r3, #28]
      break;
 800ca9c:	e064      	b.n	800cb68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	68b9      	ldr	r1, [r7, #8]
 800caa4:	4618      	mov	r0, r3
 800caa6:	f000 fba3 	bl	800d1f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	69da      	ldr	r2, [r3, #28]
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cab8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	69da      	ldr	r2, [r3, #28]
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cac8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	69d9      	ldr	r1, [r3, #28]
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	691b      	ldr	r3, [r3, #16]
 800cad4:	021a      	lsls	r2, r3, #8
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	430a      	orrs	r2, r1
 800cadc:	61da      	str	r2, [r3, #28]
      break;
 800cade:	e043      	b.n	800cb68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	68b9      	ldr	r1, [r7, #8]
 800cae6:	4618      	mov	r0, r3
 800cae8:	f000 fbec 	bl	800d2c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f042 0208 	orr.w	r2, r2, #8
 800cafa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f022 0204 	bic.w	r2, r2, #4
 800cb0a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	691a      	ldr	r2, [r3, #16]
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	430a      	orrs	r2, r1
 800cb1c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800cb1e:	e023      	b.n	800cb68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	68b9      	ldr	r1, [r7, #8]
 800cb26:	4618      	mov	r0, r3
 800cb28:	f000 fc30 	bl	800d38c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cb3a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cb4a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	691b      	ldr	r3, [r3, #16]
 800cb56:	021a      	lsls	r2, r3, #8
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	430a      	orrs	r2, r1
 800cb5e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800cb60:	e002      	b.n	800cb68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cb62:	2301      	movs	r3, #1
 800cb64:	75fb      	strb	r3, [r7, #23]
      break;
 800cb66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cb70:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3718      	adds	r7, #24
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}
 800cb7a:	bf00      	nop

0800cb7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b084      	sub	sp, #16
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
 800cb84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cb86:	2300      	movs	r3, #0
 800cb88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d101      	bne.n	800cb98 <HAL_TIM_ConfigClockSource+0x1c>
 800cb94:	2302      	movs	r3, #2
 800cb96:	e0dc      	b.n	800cd52 <HAL_TIM_ConfigClockSource+0x1d6>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2202      	movs	r2, #2
 800cba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	689b      	ldr	r3, [r3, #8]
 800cbae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cbb0:	68ba      	ldr	r2, [r7, #8]
 800cbb2:	4b6a      	ldr	r3, [pc, #424]	@ (800cd5c <HAL_TIM_ConfigClockSource+0x1e0>)
 800cbb4:	4013      	ands	r3, r2
 800cbb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cbbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	68ba      	ldr	r2, [r7, #8]
 800cbc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	4a64      	ldr	r2, [pc, #400]	@ (800cd60 <HAL_TIM_ConfigClockSource+0x1e4>)
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	f000 80a9 	beq.w	800cd26 <HAL_TIM_ConfigClockSource+0x1aa>
 800cbd4:	4a62      	ldr	r2, [pc, #392]	@ (800cd60 <HAL_TIM_ConfigClockSource+0x1e4>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	f200 80ae 	bhi.w	800cd38 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbdc:	4a61      	ldr	r2, [pc, #388]	@ (800cd64 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	f000 80a1 	beq.w	800cd26 <HAL_TIM_ConfigClockSource+0x1aa>
 800cbe4:	4a5f      	ldr	r2, [pc, #380]	@ (800cd64 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	f200 80a6 	bhi.w	800cd38 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbec:	4a5e      	ldr	r2, [pc, #376]	@ (800cd68 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	f000 8099 	beq.w	800cd26 <HAL_TIM_ConfigClockSource+0x1aa>
 800cbf4:	4a5c      	ldr	r2, [pc, #368]	@ (800cd68 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	f200 809e 	bhi.w	800cd38 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbfc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cc00:	f000 8091 	beq.w	800cd26 <HAL_TIM_ConfigClockSource+0x1aa>
 800cc04:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cc08:	f200 8096 	bhi.w	800cd38 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cc10:	f000 8089 	beq.w	800cd26 <HAL_TIM_ConfigClockSource+0x1aa>
 800cc14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cc18:	f200 808e 	bhi.w	800cd38 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cc20:	d03e      	beq.n	800cca0 <HAL_TIM_ConfigClockSource+0x124>
 800cc22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cc26:	f200 8087 	bhi.w	800cd38 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc2e:	f000 8086 	beq.w	800cd3e <HAL_TIM_ConfigClockSource+0x1c2>
 800cc32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc36:	d87f      	bhi.n	800cd38 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc38:	2b70      	cmp	r3, #112	@ 0x70
 800cc3a:	d01a      	beq.n	800cc72 <HAL_TIM_ConfigClockSource+0xf6>
 800cc3c:	2b70      	cmp	r3, #112	@ 0x70
 800cc3e:	d87b      	bhi.n	800cd38 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc40:	2b60      	cmp	r3, #96	@ 0x60
 800cc42:	d050      	beq.n	800cce6 <HAL_TIM_ConfigClockSource+0x16a>
 800cc44:	2b60      	cmp	r3, #96	@ 0x60
 800cc46:	d877      	bhi.n	800cd38 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc48:	2b50      	cmp	r3, #80	@ 0x50
 800cc4a:	d03c      	beq.n	800ccc6 <HAL_TIM_ConfigClockSource+0x14a>
 800cc4c:	2b50      	cmp	r3, #80	@ 0x50
 800cc4e:	d873      	bhi.n	800cd38 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc50:	2b40      	cmp	r3, #64	@ 0x40
 800cc52:	d058      	beq.n	800cd06 <HAL_TIM_ConfigClockSource+0x18a>
 800cc54:	2b40      	cmp	r3, #64	@ 0x40
 800cc56:	d86f      	bhi.n	800cd38 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc58:	2b30      	cmp	r3, #48	@ 0x30
 800cc5a:	d064      	beq.n	800cd26 <HAL_TIM_ConfigClockSource+0x1aa>
 800cc5c:	2b30      	cmp	r3, #48	@ 0x30
 800cc5e:	d86b      	bhi.n	800cd38 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc60:	2b20      	cmp	r3, #32
 800cc62:	d060      	beq.n	800cd26 <HAL_TIM_ConfigClockSource+0x1aa>
 800cc64:	2b20      	cmp	r3, #32
 800cc66:	d867      	bhi.n	800cd38 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d05c      	beq.n	800cd26 <HAL_TIM_ConfigClockSource+0x1aa>
 800cc6c:	2b10      	cmp	r3, #16
 800cc6e:	d05a      	beq.n	800cd26 <HAL_TIM_ConfigClockSource+0x1aa>
 800cc70:	e062      	b.n	800cd38 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cc82:	f000 fc67 	bl	800d554 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	689b      	ldr	r3, [r3, #8]
 800cc8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800cc94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	68ba      	ldr	r2, [r7, #8]
 800cc9c:	609a      	str	r2, [r3, #8]
      break;
 800cc9e:	e04f      	b.n	800cd40 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ccb0:	f000 fc50 	bl	800d554 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	689a      	ldr	r2, [r3, #8]
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ccc2:	609a      	str	r2, [r3, #8]
      break;
 800ccc4:	e03c      	b.n	800cd40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	f000 fbc0 	bl	800d458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	2150      	movs	r1, #80	@ 0x50
 800ccde:	4618      	mov	r0, r3
 800cce0:	f000 fc1a 	bl	800d518 <TIM_ITRx_SetConfig>
      break;
 800cce4:	e02c      	b.n	800cd40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ccf2:	461a      	mov	r2, r3
 800ccf4:	f000 fbdf 	bl	800d4b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	2160      	movs	r1, #96	@ 0x60
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f000 fc0a 	bl	800d518 <TIM_ITRx_SetConfig>
      break;
 800cd04:	e01c      	b.n	800cd40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cd12:	461a      	mov	r2, r3
 800cd14:	f000 fba0 	bl	800d458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	2140      	movs	r1, #64	@ 0x40
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f000 fbfa 	bl	800d518 <TIM_ITRx_SetConfig>
      break;
 800cd24:	e00c      	b.n	800cd40 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681a      	ldr	r2, [r3, #0]
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	4619      	mov	r1, r3
 800cd30:	4610      	mov	r0, r2
 800cd32:	f000 fbf1 	bl	800d518 <TIM_ITRx_SetConfig>
      break;
 800cd36:	e003      	b.n	800cd40 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800cd38:	2301      	movs	r3, #1
 800cd3a:	73fb      	strb	r3, [r7, #15]
      break;
 800cd3c:	e000      	b.n	800cd40 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800cd3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2201      	movs	r2, #1
 800cd44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cd50:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3710      	adds	r7, #16
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}
 800cd5a:	bf00      	nop
 800cd5c:	ffceff88 	.word	0xffceff88
 800cd60:	00100040 	.word	0x00100040
 800cd64:	00100030 	.word	0x00100030
 800cd68:	00100020 	.word	0x00100020

0800cd6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b085      	sub	sp, #20
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	4a43      	ldr	r2, [pc, #268]	@ (800ce8c <TIM_Base_SetConfig+0x120>)
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d013      	beq.n	800cdac <TIM_Base_SetConfig+0x40>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd8a:	d00f      	beq.n	800cdac <TIM_Base_SetConfig+0x40>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	4a40      	ldr	r2, [pc, #256]	@ (800ce90 <TIM_Base_SetConfig+0x124>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d00b      	beq.n	800cdac <TIM_Base_SetConfig+0x40>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	4a3f      	ldr	r2, [pc, #252]	@ (800ce94 <TIM_Base_SetConfig+0x128>)
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d007      	beq.n	800cdac <TIM_Base_SetConfig+0x40>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	4a3e      	ldr	r2, [pc, #248]	@ (800ce98 <TIM_Base_SetConfig+0x12c>)
 800cda0:	4293      	cmp	r3, r2
 800cda2:	d003      	beq.n	800cdac <TIM_Base_SetConfig+0x40>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	4a3d      	ldr	r2, [pc, #244]	@ (800ce9c <TIM_Base_SetConfig+0x130>)
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d108      	bne.n	800cdbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cdb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	685b      	ldr	r3, [r3, #4]
 800cdb8:	68fa      	ldr	r2, [r7, #12]
 800cdba:	4313      	orrs	r3, r2
 800cdbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	4a32      	ldr	r2, [pc, #200]	@ (800ce8c <TIM_Base_SetConfig+0x120>)
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d01f      	beq.n	800ce06 <TIM_Base_SetConfig+0x9a>
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cdcc:	d01b      	beq.n	800ce06 <TIM_Base_SetConfig+0x9a>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	4a2f      	ldr	r2, [pc, #188]	@ (800ce90 <TIM_Base_SetConfig+0x124>)
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d017      	beq.n	800ce06 <TIM_Base_SetConfig+0x9a>
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	4a2e      	ldr	r2, [pc, #184]	@ (800ce94 <TIM_Base_SetConfig+0x128>)
 800cdda:	4293      	cmp	r3, r2
 800cddc:	d013      	beq.n	800ce06 <TIM_Base_SetConfig+0x9a>
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	4a2d      	ldr	r2, [pc, #180]	@ (800ce98 <TIM_Base_SetConfig+0x12c>)
 800cde2:	4293      	cmp	r3, r2
 800cde4:	d00f      	beq.n	800ce06 <TIM_Base_SetConfig+0x9a>
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	4a2c      	ldr	r2, [pc, #176]	@ (800ce9c <TIM_Base_SetConfig+0x130>)
 800cdea:	4293      	cmp	r3, r2
 800cdec:	d00b      	beq.n	800ce06 <TIM_Base_SetConfig+0x9a>
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	4a2b      	ldr	r2, [pc, #172]	@ (800cea0 <TIM_Base_SetConfig+0x134>)
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	d007      	beq.n	800ce06 <TIM_Base_SetConfig+0x9a>
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	4a2a      	ldr	r2, [pc, #168]	@ (800cea4 <TIM_Base_SetConfig+0x138>)
 800cdfa:	4293      	cmp	r3, r2
 800cdfc:	d003      	beq.n	800ce06 <TIM_Base_SetConfig+0x9a>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	4a29      	ldr	r2, [pc, #164]	@ (800cea8 <TIM_Base_SetConfig+0x13c>)
 800ce02:	4293      	cmp	r3, r2
 800ce04:	d108      	bne.n	800ce18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ce0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	68db      	ldr	r3, [r3, #12]
 800ce12:	68fa      	ldr	r2, [r7, #12]
 800ce14:	4313      	orrs	r3, r2
 800ce16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	695b      	ldr	r3, [r3, #20]
 800ce22:	4313      	orrs	r3, r2
 800ce24:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	689a      	ldr	r2, [r3, #8]
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	681a      	ldr	r2, [r3, #0]
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	4a14      	ldr	r2, [pc, #80]	@ (800ce8c <TIM_Base_SetConfig+0x120>)
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d00f      	beq.n	800ce5e <TIM_Base_SetConfig+0xf2>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	4a16      	ldr	r2, [pc, #88]	@ (800ce9c <TIM_Base_SetConfig+0x130>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d00b      	beq.n	800ce5e <TIM_Base_SetConfig+0xf2>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	4a15      	ldr	r2, [pc, #84]	@ (800cea0 <TIM_Base_SetConfig+0x134>)
 800ce4a:	4293      	cmp	r3, r2
 800ce4c:	d007      	beq.n	800ce5e <TIM_Base_SetConfig+0xf2>
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	4a14      	ldr	r2, [pc, #80]	@ (800cea4 <TIM_Base_SetConfig+0x138>)
 800ce52:	4293      	cmp	r3, r2
 800ce54:	d003      	beq.n	800ce5e <TIM_Base_SetConfig+0xf2>
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	4a13      	ldr	r2, [pc, #76]	@ (800cea8 <TIM_Base_SetConfig+0x13c>)
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	d103      	bne.n	800ce66 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	691a      	ldr	r2, [r3, #16]
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f043 0204 	orr.w	r2, r3, #4
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2201      	movs	r2, #1
 800ce76:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	68fa      	ldr	r2, [r7, #12]
 800ce7c:	601a      	str	r2, [r3, #0]
}
 800ce7e:	bf00      	nop
 800ce80:	3714      	adds	r7, #20
 800ce82:	46bd      	mov	sp, r7
 800ce84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce88:	4770      	bx	lr
 800ce8a:	bf00      	nop
 800ce8c:	40010000 	.word	0x40010000
 800ce90:	40000400 	.word	0x40000400
 800ce94:	40000800 	.word	0x40000800
 800ce98:	40000c00 	.word	0x40000c00
 800ce9c:	40010400 	.word	0x40010400
 800cea0:	40014000 	.word	0x40014000
 800cea4:	40014400 	.word	0x40014400
 800cea8:	40014800 	.word	0x40014800

0800ceac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ceac:	b480      	push	{r7}
 800ceae:	b087      	sub	sp, #28
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6a1b      	ldr	r3, [r3, #32]
 800ceba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6a1b      	ldr	r3, [r3, #32]
 800cec0:	f023 0201 	bic.w	r2, r3, #1
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	685b      	ldr	r3, [r3, #4]
 800cecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	699b      	ldr	r3, [r3, #24]
 800ced2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ced4:	68fa      	ldr	r2, [r7, #12]
 800ced6:	4b37      	ldr	r3, [pc, #220]	@ (800cfb4 <TIM_OC1_SetConfig+0x108>)
 800ced8:	4013      	ands	r3, r2
 800ceda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	f023 0303 	bic.w	r3, r3, #3
 800cee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	68fa      	ldr	r2, [r7, #12]
 800ceea:	4313      	orrs	r3, r2
 800ceec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ceee:	697b      	ldr	r3, [r7, #20]
 800cef0:	f023 0302 	bic.w	r3, r3, #2
 800cef4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	689b      	ldr	r3, [r3, #8]
 800cefa:	697a      	ldr	r2, [r7, #20]
 800cefc:	4313      	orrs	r3, r2
 800cefe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	4a2d      	ldr	r2, [pc, #180]	@ (800cfb8 <TIM_OC1_SetConfig+0x10c>)
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d00f      	beq.n	800cf28 <TIM_OC1_SetConfig+0x7c>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	4a2c      	ldr	r2, [pc, #176]	@ (800cfbc <TIM_OC1_SetConfig+0x110>)
 800cf0c:	4293      	cmp	r3, r2
 800cf0e:	d00b      	beq.n	800cf28 <TIM_OC1_SetConfig+0x7c>
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	4a2b      	ldr	r2, [pc, #172]	@ (800cfc0 <TIM_OC1_SetConfig+0x114>)
 800cf14:	4293      	cmp	r3, r2
 800cf16:	d007      	beq.n	800cf28 <TIM_OC1_SetConfig+0x7c>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	4a2a      	ldr	r2, [pc, #168]	@ (800cfc4 <TIM_OC1_SetConfig+0x118>)
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d003      	beq.n	800cf28 <TIM_OC1_SetConfig+0x7c>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	4a29      	ldr	r2, [pc, #164]	@ (800cfc8 <TIM_OC1_SetConfig+0x11c>)
 800cf24:	4293      	cmp	r3, r2
 800cf26:	d10c      	bne.n	800cf42 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	f023 0308 	bic.w	r3, r3, #8
 800cf2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	68db      	ldr	r3, [r3, #12]
 800cf34:	697a      	ldr	r2, [r7, #20]
 800cf36:	4313      	orrs	r3, r2
 800cf38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	f023 0304 	bic.w	r3, r3, #4
 800cf40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	4a1c      	ldr	r2, [pc, #112]	@ (800cfb8 <TIM_OC1_SetConfig+0x10c>)
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d00f      	beq.n	800cf6a <TIM_OC1_SetConfig+0xbe>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	4a1b      	ldr	r2, [pc, #108]	@ (800cfbc <TIM_OC1_SetConfig+0x110>)
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d00b      	beq.n	800cf6a <TIM_OC1_SetConfig+0xbe>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	4a1a      	ldr	r2, [pc, #104]	@ (800cfc0 <TIM_OC1_SetConfig+0x114>)
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d007      	beq.n	800cf6a <TIM_OC1_SetConfig+0xbe>
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	4a19      	ldr	r2, [pc, #100]	@ (800cfc4 <TIM_OC1_SetConfig+0x118>)
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	d003      	beq.n	800cf6a <TIM_OC1_SetConfig+0xbe>
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	4a18      	ldr	r2, [pc, #96]	@ (800cfc8 <TIM_OC1_SetConfig+0x11c>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d111      	bne.n	800cf8e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cf6a:	693b      	ldr	r3, [r7, #16]
 800cf6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cf70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cf72:	693b      	ldr	r3, [r7, #16]
 800cf74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cf78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	695b      	ldr	r3, [r3, #20]
 800cf7e:	693a      	ldr	r2, [r7, #16]
 800cf80:	4313      	orrs	r3, r2
 800cf82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	699b      	ldr	r3, [r3, #24]
 800cf88:	693a      	ldr	r2, [r7, #16]
 800cf8a:	4313      	orrs	r3, r2
 800cf8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	693a      	ldr	r2, [r7, #16]
 800cf92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	68fa      	ldr	r2, [r7, #12]
 800cf98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	685a      	ldr	r2, [r3, #4]
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	697a      	ldr	r2, [r7, #20]
 800cfa6:	621a      	str	r2, [r3, #32]
}
 800cfa8:	bf00      	nop
 800cfaa:	371c      	adds	r7, #28
 800cfac:	46bd      	mov	sp, r7
 800cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb2:	4770      	bx	lr
 800cfb4:	fffeff8f 	.word	0xfffeff8f
 800cfb8:	40010000 	.word	0x40010000
 800cfbc:	40010400 	.word	0x40010400
 800cfc0:	40014000 	.word	0x40014000
 800cfc4:	40014400 	.word	0x40014400
 800cfc8:	40014800 	.word	0x40014800

0800cfcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b087      	sub	sp, #28
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
 800cfd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6a1b      	ldr	r3, [r3, #32]
 800cfda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6a1b      	ldr	r3, [r3, #32]
 800cfe0:	f023 0210 	bic.w	r2, r3, #16
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	685b      	ldr	r3, [r3, #4]
 800cfec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	699b      	ldr	r3, [r3, #24]
 800cff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cff4:	68fa      	ldr	r2, [r7, #12]
 800cff6:	4b34      	ldr	r3, [pc, #208]	@ (800d0c8 <TIM_OC2_SetConfig+0xfc>)
 800cff8:	4013      	ands	r3, r2
 800cffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	021b      	lsls	r3, r3, #8
 800d00a:	68fa      	ldr	r2, [r7, #12]
 800d00c:	4313      	orrs	r3, r2
 800d00e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	f023 0320 	bic.w	r3, r3, #32
 800d016:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	689b      	ldr	r3, [r3, #8]
 800d01c:	011b      	lsls	r3, r3, #4
 800d01e:	697a      	ldr	r2, [r7, #20]
 800d020:	4313      	orrs	r3, r2
 800d022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	4a29      	ldr	r2, [pc, #164]	@ (800d0cc <TIM_OC2_SetConfig+0x100>)
 800d028:	4293      	cmp	r3, r2
 800d02a:	d003      	beq.n	800d034 <TIM_OC2_SetConfig+0x68>
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	4a28      	ldr	r2, [pc, #160]	@ (800d0d0 <TIM_OC2_SetConfig+0x104>)
 800d030:	4293      	cmp	r3, r2
 800d032:	d10d      	bne.n	800d050 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d03a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	68db      	ldr	r3, [r3, #12]
 800d040:	011b      	lsls	r3, r3, #4
 800d042:	697a      	ldr	r2, [r7, #20]
 800d044:	4313      	orrs	r3, r2
 800d046:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d04e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	4a1e      	ldr	r2, [pc, #120]	@ (800d0cc <TIM_OC2_SetConfig+0x100>)
 800d054:	4293      	cmp	r3, r2
 800d056:	d00f      	beq.n	800d078 <TIM_OC2_SetConfig+0xac>
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	4a1d      	ldr	r2, [pc, #116]	@ (800d0d0 <TIM_OC2_SetConfig+0x104>)
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d00b      	beq.n	800d078 <TIM_OC2_SetConfig+0xac>
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	4a1c      	ldr	r2, [pc, #112]	@ (800d0d4 <TIM_OC2_SetConfig+0x108>)
 800d064:	4293      	cmp	r3, r2
 800d066:	d007      	beq.n	800d078 <TIM_OC2_SetConfig+0xac>
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	4a1b      	ldr	r2, [pc, #108]	@ (800d0d8 <TIM_OC2_SetConfig+0x10c>)
 800d06c:	4293      	cmp	r3, r2
 800d06e:	d003      	beq.n	800d078 <TIM_OC2_SetConfig+0xac>
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	4a1a      	ldr	r2, [pc, #104]	@ (800d0dc <TIM_OC2_SetConfig+0x110>)
 800d074:	4293      	cmp	r3, r2
 800d076:	d113      	bne.n	800d0a0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d078:	693b      	ldr	r3, [r7, #16]
 800d07a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d07e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d086:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	695b      	ldr	r3, [r3, #20]
 800d08c:	009b      	lsls	r3, r3, #2
 800d08e:	693a      	ldr	r2, [r7, #16]
 800d090:	4313      	orrs	r3, r2
 800d092:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	699b      	ldr	r3, [r3, #24]
 800d098:	009b      	lsls	r3, r3, #2
 800d09a:	693a      	ldr	r2, [r7, #16]
 800d09c:	4313      	orrs	r3, r2
 800d09e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	693a      	ldr	r2, [r7, #16]
 800d0a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	68fa      	ldr	r2, [r7, #12]
 800d0aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	685a      	ldr	r2, [r3, #4]
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	697a      	ldr	r2, [r7, #20]
 800d0b8:	621a      	str	r2, [r3, #32]
}
 800d0ba:	bf00      	nop
 800d0bc:	371c      	adds	r7, #28
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c4:	4770      	bx	lr
 800d0c6:	bf00      	nop
 800d0c8:	feff8fff 	.word	0xfeff8fff
 800d0cc:	40010000 	.word	0x40010000
 800d0d0:	40010400 	.word	0x40010400
 800d0d4:	40014000 	.word	0x40014000
 800d0d8:	40014400 	.word	0x40014400
 800d0dc:	40014800 	.word	0x40014800

0800d0e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d0e0:	b480      	push	{r7}
 800d0e2:	b087      	sub	sp, #28
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
 800d0e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6a1b      	ldr	r3, [r3, #32]
 800d0ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6a1b      	ldr	r3, [r3, #32]
 800d0f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	69db      	ldr	r3, [r3, #28]
 800d106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d108:	68fa      	ldr	r2, [r7, #12]
 800d10a:	4b33      	ldr	r3, [pc, #204]	@ (800d1d8 <TIM_OC3_SetConfig+0xf8>)
 800d10c:	4013      	ands	r3, r2
 800d10e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f023 0303 	bic.w	r3, r3, #3
 800d116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	68fa      	ldr	r2, [r7, #12]
 800d11e:	4313      	orrs	r3, r2
 800d120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d128:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	689b      	ldr	r3, [r3, #8]
 800d12e:	021b      	lsls	r3, r3, #8
 800d130:	697a      	ldr	r2, [r7, #20]
 800d132:	4313      	orrs	r3, r2
 800d134:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	4a28      	ldr	r2, [pc, #160]	@ (800d1dc <TIM_OC3_SetConfig+0xfc>)
 800d13a:	4293      	cmp	r3, r2
 800d13c:	d003      	beq.n	800d146 <TIM_OC3_SetConfig+0x66>
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	4a27      	ldr	r2, [pc, #156]	@ (800d1e0 <TIM_OC3_SetConfig+0x100>)
 800d142:	4293      	cmp	r3, r2
 800d144:	d10d      	bne.n	800d162 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d14c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	68db      	ldr	r3, [r3, #12]
 800d152:	021b      	lsls	r3, r3, #8
 800d154:	697a      	ldr	r2, [r7, #20]
 800d156:	4313      	orrs	r3, r2
 800d158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	4a1d      	ldr	r2, [pc, #116]	@ (800d1dc <TIM_OC3_SetConfig+0xfc>)
 800d166:	4293      	cmp	r3, r2
 800d168:	d00f      	beq.n	800d18a <TIM_OC3_SetConfig+0xaa>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	4a1c      	ldr	r2, [pc, #112]	@ (800d1e0 <TIM_OC3_SetConfig+0x100>)
 800d16e:	4293      	cmp	r3, r2
 800d170:	d00b      	beq.n	800d18a <TIM_OC3_SetConfig+0xaa>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	4a1b      	ldr	r2, [pc, #108]	@ (800d1e4 <TIM_OC3_SetConfig+0x104>)
 800d176:	4293      	cmp	r3, r2
 800d178:	d007      	beq.n	800d18a <TIM_OC3_SetConfig+0xaa>
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	4a1a      	ldr	r2, [pc, #104]	@ (800d1e8 <TIM_OC3_SetConfig+0x108>)
 800d17e:	4293      	cmp	r3, r2
 800d180:	d003      	beq.n	800d18a <TIM_OC3_SetConfig+0xaa>
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	4a19      	ldr	r2, [pc, #100]	@ (800d1ec <TIM_OC3_SetConfig+0x10c>)
 800d186:	4293      	cmp	r3, r2
 800d188:	d113      	bne.n	800d1b2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d190:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d192:	693b      	ldr	r3, [r7, #16]
 800d194:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d198:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	695b      	ldr	r3, [r3, #20]
 800d19e:	011b      	lsls	r3, r3, #4
 800d1a0:	693a      	ldr	r2, [r7, #16]
 800d1a2:	4313      	orrs	r3, r2
 800d1a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	699b      	ldr	r3, [r3, #24]
 800d1aa:	011b      	lsls	r3, r3, #4
 800d1ac:	693a      	ldr	r2, [r7, #16]
 800d1ae:	4313      	orrs	r3, r2
 800d1b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	693a      	ldr	r2, [r7, #16]
 800d1b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	68fa      	ldr	r2, [r7, #12]
 800d1bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	685a      	ldr	r2, [r3, #4]
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	697a      	ldr	r2, [r7, #20]
 800d1ca:	621a      	str	r2, [r3, #32]
}
 800d1cc:	bf00      	nop
 800d1ce:	371c      	adds	r7, #28
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d6:	4770      	bx	lr
 800d1d8:	fffeff8f 	.word	0xfffeff8f
 800d1dc:	40010000 	.word	0x40010000
 800d1e0:	40010400 	.word	0x40010400
 800d1e4:	40014000 	.word	0x40014000
 800d1e8:	40014400 	.word	0x40014400
 800d1ec:	40014800 	.word	0x40014800

0800d1f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b087      	sub	sp, #28
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
 800d1f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6a1b      	ldr	r3, [r3, #32]
 800d1fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6a1b      	ldr	r3, [r3, #32]
 800d204:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	685b      	ldr	r3, [r3, #4]
 800d210:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	69db      	ldr	r3, [r3, #28]
 800d216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d218:	68fa      	ldr	r2, [r7, #12]
 800d21a:	4b24      	ldr	r3, [pc, #144]	@ (800d2ac <TIM_OC4_SetConfig+0xbc>)
 800d21c:	4013      	ands	r3, r2
 800d21e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d226:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	021b      	lsls	r3, r3, #8
 800d22e:	68fa      	ldr	r2, [r7, #12]
 800d230:	4313      	orrs	r3, r2
 800d232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d23a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	689b      	ldr	r3, [r3, #8]
 800d240:	031b      	lsls	r3, r3, #12
 800d242:	693a      	ldr	r2, [r7, #16]
 800d244:	4313      	orrs	r3, r2
 800d246:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	4a19      	ldr	r2, [pc, #100]	@ (800d2b0 <TIM_OC4_SetConfig+0xc0>)
 800d24c:	4293      	cmp	r3, r2
 800d24e:	d00f      	beq.n	800d270 <TIM_OC4_SetConfig+0x80>
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	4a18      	ldr	r2, [pc, #96]	@ (800d2b4 <TIM_OC4_SetConfig+0xc4>)
 800d254:	4293      	cmp	r3, r2
 800d256:	d00b      	beq.n	800d270 <TIM_OC4_SetConfig+0x80>
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	4a17      	ldr	r2, [pc, #92]	@ (800d2b8 <TIM_OC4_SetConfig+0xc8>)
 800d25c:	4293      	cmp	r3, r2
 800d25e:	d007      	beq.n	800d270 <TIM_OC4_SetConfig+0x80>
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	4a16      	ldr	r2, [pc, #88]	@ (800d2bc <TIM_OC4_SetConfig+0xcc>)
 800d264:	4293      	cmp	r3, r2
 800d266:	d003      	beq.n	800d270 <TIM_OC4_SetConfig+0x80>
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	4a15      	ldr	r2, [pc, #84]	@ (800d2c0 <TIM_OC4_SetConfig+0xd0>)
 800d26c:	4293      	cmp	r3, r2
 800d26e:	d109      	bne.n	800d284 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d276:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	695b      	ldr	r3, [r3, #20]
 800d27c:	019b      	lsls	r3, r3, #6
 800d27e:	697a      	ldr	r2, [r7, #20]
 800d280:	4313      	orrs	r3, r2
 800d282:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	697a      	ldr	r2, [r7, #20]
 800d288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	68fa      	ldr	r2, [r7, #12]
 800d28e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	685a      	ldr	r2, [r3, #4]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	693a      	ldr	r2, [r7, #16]
 800d29c:	621a      	str	r2, [r3, #32]
}
 800d29e:	bf00      	nop
 800d2a0:	371c      	adds	r7, #28
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a8:	4770      	bx	lr
 800d2aa:	bf00      	nop
 800d2ac:	feff8fff 	.word	0xfeff8fff
 800d2b0:	40010000 	.word	0x40010000
 800d2b4:	40010400 	.word	0x40010400
 800d2b8:	40014000 	.word	0x40014000
 800d2bc:	40014400 	.word	0x40014400
 800d2c0:	40014800 	.word	0x40014800

0800d2c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	b087      	sub	sp, #28
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
 800d2cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6a1b      	ldr	r3, [r3, #32]
 800d2d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6a1b      	ldr	r3, [r3, #32]
 800d2d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	685b      	ldr	r3, [r3, #4]
 800d2e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d2ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d2ec:	68fa      	ldr	r2, [r7, #12]
 800d2ee:	4b21      	ldr	r3, [pc, #132]	@ (800d374 <TIM_OC5_SetConfig+0xb0>)
 800d2f0:	4013      	ands	r3, r2
 800d2f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	68fa      	ldr	r2, [r7, #12]
 800d2fa:	4313      	orrs	r3, r2
 800d2fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d2fe:	693b      	ldr	r3, [r7, #16]
 800d300:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d304:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	689b      	ldr	r3, [r3, #8]
 800d30a:	041b      	lsls	r3, r3, #16
 800d30c:	693a      	ldr	r2, [r7, #16]
 800d30e:	4313      	orrs	r3, r2
 800d310:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	4a18      	ldr	r2, [pc, #96]	@ (800d378 <TIM_OC5_SetConfig+0xb4>)
 800d316:	4293      	cmp	r3, r2
 800d318:	d00f      	beq.n	800d33a <TIM_OC5_SetConfig+0x76>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	4a17      	ldr	r2, [pc, #92]	@ (800d37c <TIM_OC5_SetConfig+0xb8>)
 800d31e:	4293      	cmp	r3, r2
 800d320:	d00b      	beq.n	800d33a <TIM_OC5_SetConfig+0x76>
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	4a16      	ldr	r2, [pc, #88]	@ (800d380 <TIM_OC5_SetConfig+0xbc>)
 800d326:	4293      	cmp	r3, r2
 800d328:	d007      	beq.n	800d33a <TIM_OC5_SetConfig+0x76>
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	4a15      	ldr	r2, [pc, #84]	@ (800d384 <TIM_OC5_SetConfig+0xc0>)
 800d32e:	4293      	cmp	r3, r2
 800d330:	d003      	beq.n	800d33a <TIM_OC5_SetConfig+0x76>
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	4a14      	ldr	r2, [pc, #80]	@ (800d388 <TIM_OC5_SetConfig+0xc4>)
 800d336:	4293      	cmp	r3, r2
 800d338:	d109      	bne.n	800d34e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d340:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	695b      	ldr	r3, [r3, #20]
 800d346:	021b      	lsls	r3, r3, #8
 800d348:	697a      	ldr	r2, [r7, #20]
 800d34a:	4313      	orrs	r3, r2
 800d34c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	697a      	ldr	r2, [r7, #20]
 800d352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	68fa      	ldr	r2, [r7, #12]
 800d358:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	685a      	ldr	r2, [r3, #4]
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	693a      	ldr	r2, [r7, #16]
 800d366:	621a      	str	r2, [r3, #32]
}
 800d368:	bf00      	nop
 800d36a:	371c      	adds	r7, #28
 800d36c:	46bd      	mov	sp, r7
 800d36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d372:	4770      	bx	lr
 800d374:	fffeff8f 	.word	0xfffeff8f
 800d378:	40010000 	.word	0x40010000
 800d37c:	40010400 	.word	0x40010400
 800d380:	40014000 	.word	0x40014000
 800d384:	40014400 	.word	0x40014400
 800d388:	40014800 	.word	0x40014800

0800d38c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b087      	sub	sp, #28
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
 800d394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6a1b      	ldr	r3, [r3, #32]
 800d39a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6a1b      	ldr	r3, [r3, #32]
 800d3a0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	685b      	ldr	r3, [r3, #4]
 800d3ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d3b4:	68fa      	ldr	r2, [r7, #12]
 800d3b6:	4b22      	ldr	r3, [pc, #136]	@ (800d440 <TIM_OC6_SetConfig+0xb4>)
 800d3b8:	4013      	ands	r3, r2
 800d3ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	021b      	lsls	r3, r3, #8
 800d3c2:	68fa      	ldr	r2, [r7, #12]
 800d3c4:	4313      	orrs	r3, r2
 800d3c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d3c8:	693b      	ldr	r3, [r7, #16]
 800d3ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d3ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	689b      	ldr	r3, [r3, #8]
 800d3d4:	051b      	lsls	r3, r3, #20
 800d3d6:	693a      	ldr	r2, [r7, #16]
 800d3d8:	4313      	orrs	r3, r2
 800d3da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	4a19      	ldr	r2, [pc, #100]	@ (800d444 <TIM_OC6_SetConfig+0xb8>)
 800d3e0:	4293      	cmp	r3, r2
 800d3e2:	d00f      	beq.n	800d404 <TIM_OC6_SetConfig+0x78>
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	4a18      	ldr	r2, [pc, #96]	@ (800d448 <TIM_OC6_SetConfig+0xbc>)
 800d3e8:	4293      	cmp	r3, r2
 800d3ea:	d00b      	beq.n	800d404 <TIM_OC6_SetConfig+0x78>
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	4a17      	ldr	r2, [pc, #92]	@ (800d44c <TIM_OC6_SetConfig+0xc0>)
 800d3f0:	4293      	cmp	r3, r2
 800d3f2:	d007      	beq.n	800d404 <TIM_OC6_SetConfig+0x78>
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	4a16      	ldr	r2, [pc, #88]	@ (800d450 <TIM_OC6_SetConfig+0xc4>)
 800d3f8:	4293      	cmp	r3, r2
 800d3fa:	d003      	beq.n	800d404 <TIM_OC6_SetConfig+0x78>
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	4a15      	ldr	r2, [pc, #84]	@ (800d454 <TIM_OC6_SetConfig+0xc8>)
 800d400:	4293      	cmp	r3, r2
 800d402:	d109      	bne.n	800d418 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d40a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	695b      	ldr	r3, [r3, #20]
 800d410:	029b      	lsls	r3, r3, #10
 800d412:	697a      	ldr	r2, [r7, #20]
 800d414:	4313      	orrs	r3, r2
 800d416:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	697a      	ldr	r2, [r7, #20]
 800d41c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	68fa      	ldr	r2, [r7, #12]
 800d422:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	685a      	ldr	r2, [r3, #4]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	693a      	ldr	r2, [r7, #16]
 800d430:	621a      	str	r2, [r3, #32]
}
 800d432:	bf00      	nop
 800d434:	371c      	adds	r7, #28
 800d436:	46bd      	mov	sp, r7
 800d438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43c:	4770      	bx	lr
 800d43e:	bf00      	nop
 800d440:	feff8fff 	.word	0xfeff8fff
 800d444:	40010000 	.word	0x40010000
 800d448:	40010400 	.word	0x40010400
 800d44c:	40014000 	.word	0x40014000
 800d450:	40014400 	.word	0x40014400
 800d454:	40014800 	.word	0x40014800

0800d458 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d458:	b480      	push	{r7}
 800d45a:	b087      	sub	sp, #28
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	60f8      	str	r0, [r7, #12]
 800d460:	60b9      	str	r1, [r7, #8]
 800d462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	6a1b      	ldr	r3, [r3, #32]
 800d468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	6a1b      	ldr	r3, [r3, #32]
 800d46e:	f023 0201 	bic.w	r2, r3, #1
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	699b      	ldr	r3, [r3, #24]
 800d47a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	011b      	lsls	r3, r3, #4
 800d488:	693a      	ldr	r2, [r7, #16]
 800d48a:	4313      	orrs	r3, r2
 800d48c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	f023 030a 	bic.w	r3, r3, #10
 800d494:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d496:	697a      	ldr	r2, [r7, #20]
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	4313      	orrs	r3, r2
 800d49c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	693a      	ldr	r2, [r7, #16]
 800d4a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	697a      	ldr	r2, [r7, #20]
 800d4a8:	621a      	str	r2, [r3, #32]
}
 800d4aa:	bf00      	nop
 800d4ac:	371c      	adds	r7, #28
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b4:	4770      	bx	lr

0800d4b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d4b6:	b480      	push	{r7}
 800d4b8:	b087      	sub	sp, #28
 800d4ba:	af00      	add	r7, sp, #0
 800d4bc:	60f8      	str	r0, [r7, #12]
 800d4be:	60b9      	str	r1, [r7, #8]
 800d4c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	6a1b      	ldr	r3, [r3, #32]
 800d4c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	6a1b      	ldr	r3, [r3, #32]
 800d4cc:	f023 0210 	bic.w	r2, r3, #16
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	699b      	ldr	r3, [r3, #24]
 800d4d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d4e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	031b      	lsls	r3, r3, #12
 800d4e6:	693a      	ldr	r2, [r7, #16]
 800d4e8:	4313      	orrs	r3, r2
 800d4ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d4f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	011b      	lsls	r3, r3, #4
 800d4f8:	697a      	ldr	r2, [r7, #20]
 800d4fa:	4313      	orrs	r3, r2
 800d4fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	693a      	ldr	r2, [r7, #16]
 800d502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	697a      	ldr	r2, [r7, #20]
 800d508:	621a      	str	r2, [r3, #32]
}
 800d50a:	bf00      	nop
 800d50c:	371c      	adds	r7, #28
 800d50e:	46bd      	mov	sp, r7
 800d510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d514:	4770      	bx	lr
	...

0800d518 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d518:	b480      	push	{r7}
 800d51a:	b085      	sub	sp, #20
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
 800d520:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	689b      	ldr	r3, [r3, #8]
 800d526:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d528:	68fa      	ldr	r2, [r7, #12]
 800d52a:	4b09      	ldr	r3, [pc, #36]	@ (800d550 <TIM_ITRx_SetConfig+0x38>)
 800d52c:	4013      	ands	r3, r2
 800d52e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d530:	683a      	ldr	r2, [r7, #0]
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	4313      	orrs	r3, r2
 800d536:	f043 0307 	orr.w	r3, r3, #7
 800d53a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	68fa      	ldr	r2, [r7, #12]
 800d540:	609a      	str	r2, [r3, #8]
}
 800d542:	bf00      	nop
 800d544:	3714      	adds	r7, #20
 800d546:	46bd      	mov	sp, r7
 800d548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54c:	4770      	bx	lr
 800d54e:	bf00      	nop
 800d550:	ffcfff8f 	.word	0xffcfff8f

0800d554 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d554:	b480      	push	{r7}
 800d556:	b087      	sub	sp, #28
 800d558:	af00      	add	r7, sp, #0
 800d55a:	60f8      	str	r0, [r7, #12]
 800d55c:	60b9      	str	r1, [r7, #8]
 800d55e:	607a      	str	r2, [r7, #4]
 800d560:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	689b      	ldr	r3, [r3, #8]
 800d566:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d56e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	021a      	lsls	r2, r3, #8
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	431a      	orrs	r2, r3
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	4313      	orrs	r3, r2
 800d57c:	697a      	ldr	r2, [r7, #20]
 800d57e:	4313      	orrs	r3, r2
 800d580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	697a      	ldr	r2, [r7, #20]
 800d586:	609a      	str	r2, [r3, #8]
}
 800d588:	bf00      	nop
 800d58a:	371c      	adds	r7, #28
 800d58c:	46bd      	mov	sp, r7
 800d58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d592:	4770      	bx	lr

0800d594 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d594:	b480      	push	{r7}
 800d596:	b087      	sub	sp, #28
 800d598:	af00      	add	r7, sp, #0
 800d59a:	60f8      	str	r0, [r7, #12]
 800d59c:	60b9      	str	r1, [r7, #8]
 800d59e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	f003 031f 	and.w	r3, r3, #31
 800d5a6:	2201      	movs	r2, #1
 800d5a8:	fa02 f303 	lsl.w	r3, r2, r3
 800d5ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	6a1a      	ldr	r2, [r3, #32]
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	43db      	mvns	r3, r3
 800d5b6:	401a      	ands	r2, r3
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	6a1a      	ldr	r2, [r3, #32]
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	f003 031f 	and.w	r3, r3, #31
 800d5c6:	6879      	ldr	r1, [r7, #4]
 800d5c8:	fa01 f303 	lsl.w	r3, r1, r3
 800d5cc:	431a      	orrs	r2, r3
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	621a      	str	r2, [r3, #32]
}
 800d5d2:	bf00      	nop
 800d5d4:	371c      	adds	r7, #28
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5dc:	4770      	bx	lr
	...

0800d5e0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b084      	sub	sp, #16
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d109      	bne.n	800d604 <HAL_TIMEx_PWMN_Start+0x24>
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d5f6:	b2db      	uxtb	r3, r3
 800d5f8:	2b01      	cmp	r3, #1
 800d5fa:	bf14      	ite	ne
 800d5fc:	2301      	movne	r3, #1
 800d5fe:	2300      	moveq	r3, #0
 800d600:	b2db      	uxtb	r3, r3
 800d602:	e022      	b.n	800d64a <HAL_TIMEx_PWMN_Start+0x6a>
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	2b04      	cmp	r3, #4
 800d608:	d109      	bne.n	800d61e <HAL_TIMEx_PWMN_Start+0x3e>
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d610:	b2db      	uxtb	r3, r3
 800d612:	2b01      	cmp	r3, #1
 800d614:	bf14      	ite	ne
 800d616:	2301      	movne	r3, #1
 800d618:	2300      	moveq	r3, #0
 800d61a:	b2db      	uxtb	r3, r3
 800d61c:	e015      	b.n	800d64a <HAL_TIMEx_PWMN_Start+0x6a>
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	2b08      	cmp	r3, #8
 800d622:	d109      	bne.n	800d638 <HAL_TIMEx_PWMN_Start+0x58>
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800d62a:	b2db      	uxtb	r3, r3
 800d62c:	2b01      	cmp	r3, #1
 800d62e:	bf14      	ite	ne
 800d630:	2301      	movne	r3, #1
 800d632:	2300      	moveq	r3, #0
 800d634:	b2db      	uxtb	r3, r3
 800d636:	e008      	b.n	800d64a <HAL_TIMEx_PWMN_Start+0x6a>
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800d63e:	b2db      	uxtb	r3, r3
 800d640:	2b01      	cmp	r3, #1
 800d642:	bf14      	ite	ne
 800d644:	2301      	movne	r3, #1
 800d646:	2300      	moveq	r3, #0
 800d648:	b2db      	uxtb	r3, r3
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d001      	beq.n	800d652 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800d64e:	2301      	movs	r3, #1
 800d650:	e073      	b.n	800d73a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d104      	bne.n	800d662 <HAL_TIMEx_PWMN_Start+0x82>
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2202      	movs	r2, #2
 800d65c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d660:	e013      	b.n	800d68a <HAL_TIMEx_PWMN_Start+0xaa>
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	2b04      	cmp	r3, #4
 800d666:	d104      	bne.n	800d672 <HAL_TIMEx_PWMN_Start+0x92>
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2202      	movs	r2, #2
 800d66c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d670:	e00b      	b.n	800d68a <HAL_TIMEx_PWMN_Start+0xaa>
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	2b08      	cmp	r3, #8
 800d676:	d104      	bne.n	800d682 <HAL_TIMEx_PWMN_Start+0xa2>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2202      	movs	r2, #2
 800d67c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d680:	e003      	b.n	800d68a <HAL_TIMEx_PWMN_Start+0xaa>
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2202      	movs	r2, #2
 800d686:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	2204      	movs	r2, #4
 800d690:	6839      	ldr	r1, [r7, #0]
 800d692:	4618      	mov	r0, r3
 800d694:	f000 f972 	bl	800d97c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d6a6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	4a25      	ldr	r2, [pc, #148]	@ (800d744 <HAL_TIMEx_PWMN_Start+0x164>)
 800d6ae:	4293      	cmp	r3, r2
 800d6b0:	d022      	beq.n	800d6f8 <HAL_TIMEx_PWMN_Start+0x118>
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d6ba:	d01d      	beq.n	800d6f8 <HAL_TIMEx_PWMN_Start+0x118>
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	4a21      	ldr	r2, [pc, #132]	@ (800d748 <HAL_TIMEx_PWMN_Start+0x168>)
 800d6c2:	4293      	cmp	r3, r2
 800d6c4:	d018      	beq.n	800d6f8 <HAL_TIMEx_PWMN_Start+0x118>
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	4a20      	ldr	r2, [pc, #128]	@ (800d74c <HAL_TIMEx_PWMN_Start+0x16c>)
 800d6cc:	4293      	cmp	r3, r2
 800d6ce:	d013      	beq.n	800d6f8 <HAL_TIMEx_PWMN_Start+0x118>
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	4a1e      	ldr	r2, [pc, #120]	@ (800d750 <HAL_TIMEx_PWMN_Start+0x170>)
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	d00e      	beq.n	800d6f8 <HAL_TIMEx_PWMN_Start+0x118>
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	4a1d      	ldr	r2, [pc, #116]	@ (800d754 <HAL_TIMEx_PWMN_Start+0x174>)
 800d6e0:	4293      	cmp	r3, r2
 800d6e2:	d009      	beq.n	800d6f8 <HAL_TIMEx_PWMN_Start+0x118>
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	4a1b      	ldr	r2, [pc, #108]	@ (800d758 <HAL_TIMEx_PWMN_Start+0x178>)
 800d6ea:	4293      	cmp	r3, r2
 800d6ec:	d004      	beq.n	800d6f8 <HAL_TIMEx_PWMN_Start+0x118>
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	4a1a      	ldr	r2, [pc, #104]	@ (800d75c <HAL_TIMEx_PWMN_Start+0x17c>)
 800d6f4:	4293      	cmp	r3, r2
 800d6f6:	d115      	bne.n	800d724 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	689a      	ldr	r2, [r3, #8]
 800d6fe:	4b18      	ldr	r3, [pc, #96]	@ (800d760 <HAL_TIMEx_PWMN_Start+0x180>)
 800d700:	4013      	ands	r3, r2
 800d702:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	2b06      	cmp	r3, #6
 800d708:	d015      	beq.n	800d736 <HAL_TIMEx_PWMN_Start+0x156>
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d710:	d011      	beq.n	800d736 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	681a      	ldr	r2, [r3, #0]
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	f042 0201 	orr.w	r2, r2, #1
 800d720:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d722:	e008      	b.n	800d736 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	681a      	ldr	r2, [r3, #0]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	f042 0201 	orr.w	r2, r2, #1
 800d732:	601a      	str	r2, [r3, #0]
 800d734:	e000      	b.n	800d738 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d736:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d738:	2300      	movs	r3, #0
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3710      	adds	r7, #16
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
 800d742:	bf00      	nop
 800d744:	40010000 	.word	0x40010000
 800d748:	40000400 	.word	0x40000400
 800d74c:	40000800 	.word	0x40000800
 800d750:	40000c00 	.word	0x40000c00
 800d754:	40010400 	.word	0x40010400
 800d758:	40001800 	.word	0x40001800
 800d75c:	40014000 	.word	0x40014000
 800d760:	00010007 	.word	0x00010007

0800d764 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d764:	b480      	push	{r7}
 800d766:	b085      	sub	sp, #20
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
 800d76c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d774:	2b01      	cmp	r3, #1
 800d776:	d101      	bne.n	800d77c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d778:	2302      	movs	r3, #2
 800d77a:	e06d      	b.n	800d858 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2201      	movs	r2, #1
 800d780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2202      	movs	r2, #2
 800d788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	685b      	ldr	r3, [r3, #4]
 800d792:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	689b      	ldr	r3, [r3, #8]
 800d79a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	4a30      	ldr	r2, [pc, #192]	@ (800d864 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d7a2:	4293      	cmp	r3, r2
 800d7a4:	d004      	beq.n	800d7b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	4a2f      	ldr	r2, [pc, #188]	@ (800d868 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d7ac:	4293      	cmp	r3, r2
 800d7ae:	d108      	bne.n	800d7c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d7b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	685b      	ldr	r3, [r3, #4]
 800d7bc:	68fa      	ldr	r2, [r7, #12]
 800d7be:	4313      	orrs	r3, r2
 800d7c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d7c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	68fa      	ldr	r2, [r7, #12]
 800d7d0:	4313      	orrs	r3, r2
 800d7d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	68fa      	ldr	r2, [r7, #12]
 800d7da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	4a20      	ldr	r2, [pc, #128]	@ (800d864 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d7e2:	4293      	cmp	r3, r2
 800d7e4:	d022      	beq.n	800d82c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d7ee:	d01d      	beq.n	800d82c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	4a1d      	ldr	r2, [pc, #116]	@ (800d86c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d7f6:	4293      	cmp	r3, r2
 800d7f8:	d018      	beq.n	800d82c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	4a1c      	ldr	r2, [pc, #112]	@ (800d870 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d800:	4293      	cmp	r3, r2
 800d802:	d013      	beq.n	800d82c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	4a1a      	ldr	r2, [pc, #104]	@ (800d874 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d80a:	4293      	cmp	r3, r2
 800d80c:	d00e      	beq.n	800d82c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	4a15      	ldr	r2, [pc, #84]	@ (800d868 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d814:	4293      	cmp	r3, r2
 800d816:	d009      	beq.n	800d82c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	4a16      	ldr	r2, [pc, #88]	@ (800d878 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d81e:	4293      	cmp	r3, r2
 800d820:	d004      	beq.n	800d82c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	4a15      	ldr	r2, [pc, #84]	@ (800d87c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d828:	4293      	cmp	r3, r2
 800d82a:	d10c      	bne.n	800d846 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d832:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	689b      	ldr	r3, [r3, #8]
 800d838:	68ba      	ldr	r2, [r7, #8]
 800d83a:	4313      	orrs	r3, r2
 800d83c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	68ba      	ldr	r2, [r7, #8]
 800d844:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2201      	movs	r2, #1
 800d84a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2200      	movs	r2, #0
 800d852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d856:	2300      	movs	r3, #0
}
 800d858:	4618      	mov	r0, r3
 800d85a:	3714      	adds	r7, #20
 800d85c:	46bd      	mov	sp, r7
 800d85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d862:	4770      	bx	lr
 800d864:	40010000 	.word	0x40010000
 800d868:	40010400 	.word	0x40010400
 800d86c:	40000400 	.word	0x40000400
 800d870:	40000800 	.word	0x40000800
 800d874:	40000c00 	.word	0x40000c00
 800d878:	40001800 	.word	0x40001800
 800d87c:	40014000 	.word	0x40014000

0800d880 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d880:	b480      	push	{r7}
 800d882:	b085      	sub	sp, #20
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d88a:	2300      	movs	r3, #0
 800d88c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d894:	2b01      	cmp	r3, #1
 800d896:	d101      	bne.n	800d89c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d898:	2302      	movs	r3, #2
 800d89a:	e065      	b.n	800d968 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2201      	movs	r2, #1
 800d8a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	68db      	ldr	r3, [r3, #12]
 800d8ae:	4313      	orrs	r3, r2
 800d8b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	689b      	ldr	r3, [r3, #8]
 800d8bc:	4313      	orrs	r3, r2
 800d8be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	685b      	ldr	r3, [r3, #4]
 800d8ca:	4313      	orrs	r3, r2
 800d8cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	4313      	orrs	r3, r2
 800d8da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	691b      	ldr	r3, [r3, #16]
 800d8e6:	4313      	orrs	r3, r2
 800d8e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	695b      	ldr	r3, [r3, #20]
 800d8f4:	4313      	orrs	r3, r2
 800d8f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d902:	4313      	orrs	r3, r2
 800d904:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	699b      	ldr	r3, [r3, #24]
 800d910:	041b      	lsls	r3, r3, #16
 800d912:	4313      	orrs	r3, r2
 800d914:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	4a16      	ldr	r2, [pc, #88]	@ (800d974 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d91c:	4293      	cmp	r3, r2
 800d91e:	d004      	beq.n	800d92a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	4a14      	ldr	r2, [pc, #80]	@ (800d978 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d926:	4293      	cmp	r3, r2
 800d928:	d115      	bne.n	800d956 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d934:	051b      	lsls	r3, r3, #20
 800d936:	4313      	orrs	r3, r2
 800d938:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	69db      	ldr	r3, [r3, #28]
 800d944:	4313      	orrs	r3, r2
 800d946:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	6a1b      	ldr	r3, [r3, #32]
 800d952:	4313      	orrs	r3, r2
 800d954:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	68fa      	ldr	r2, [r7, #12]
 800d95c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2200      	movs	r2, #0
 800d962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d966:	2300      	movs	r3, #0
}
 800d968:	4618      	mov	r0, r3
 800d96a:	3714      	adds	r7, #20
 800d96c:	46bd      	mov	sp, r7
 800d96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d972:	4770      	bx	lr
 800d974:	40010000 	.word	0x40010000
 800d978:	40010400 	.word	0x40010400

0800d97c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800d97c:	b480      	push	{r7}
 800d97e:	b087      	sub	sp, #28
 800d980:	af00      	add	r7, sp, #0
 800d982:	60f8      	str	r0, [r7, #12]
 800d984:	60b9      	str	r1, [r7, #8]
 800d986:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	f003 030f 	and.w	r3, r3, #15
 800d98e:	2204      	movs	r2, #4
 800d990:	fa02 f303 	lsl.w	r3, r2, r3
 800d994:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	6a1a      	ldr	r2, [r3, #32]
 800d99a:	697b      	ldr	r3, [r7, #20]
 800d99c:	43db      	mvns	r3, r3
 800d99e:	401a      	ands	r2, r3
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	6a1a      	ldr	r2, [r3, #32]
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	f003 030f 	and.w	r3, r3, #15
 800d9ae:	6879      	ldr	r1, [r7, #4]
 800d9b0:	fa01 f303 	lsl.w	r3, r1, r3
 800d9b4:	431a      	orrs	r2, r3
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	621a      	str	r2, [r3, #32]
}
 800d9ba:	bf00      	nop
 800d9bc:	371c      	adds	r7, #28
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c4:	4770      	bx	lr
	...

0800d9c8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d9c8:	b084      	sub	sp, #16
 800d9ca:	b480      	push	{r7}
 800d9cc:	b085      	sub	sp, #20
 800d9ce:	af00      	add	r7, sp, #0
 800d9d0:	6078      	str	r0, [r7, #4]
 800d9d2:	f107 001c 	add.w	r0, r7, #28
 800d9d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800d9de:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800d9e0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800d9e2:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800d9e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800d9e6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800d9e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800d9ea:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d9ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800d9ee:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800d9f0:	68fa      	ldr	r2, [r7, #12]
 800d9f2:	4313      	orrs	r3, r2
 800d9f4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	685a      	ldr	r2, [r3, #4]
 800d9fa:	4b07      	ldr	r3, [pc, #28]	@ (800da18 <SDMMC_Init+0x50>)
 800d9fc:	4013      	ands	r3, r2
 800d9fe:	68fa      	ldr	r2, [r7, #12]
 800da00:	431a      	orrs	r2, r3
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800da06:	2300      	movs	r3, #0
}
 800da08:	4618      	mov	r0, r3
 800da0a:	3714      	adds	r7, #20
 800da0c:	46bd      	mov	sp, r7
 800da0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da12:	b004      	add	sp, #16
 800da14:	4770      	bx	lr
 800da16:	bf00      	nop
 800da18:	ffc02c00 	.word	0xffc02c00

0800da1c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 800da1c:	b480      	push	{r7}
 800da1e:	b083      	sub	sp, #12
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	370c      	adds	r7, #12
 800da2e:	46bd      	mov	sp, r7
 800da30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da34:	4770      	bx	lr

0800da36 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800da36:	b480      	push	{r7}
 800da38:	b083      	sub	sp, #12
 800da3a:	af00      	add	r7, sp, #0
 800da3c:	6078      	str	r0, [r7, #4]
 800da3e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	681a      	ldr	r2, [r3, #0]
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800da4a:	2300      	movs	r3, #0
}
 800da4c:	4618      	mov	r0, r3
 800da4e:	370c      	adds	r7, #12
 800da50:	46bd      	mov	sp, r7
 800da52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da56:	4770      	bx	lr

0800da58 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800da58:	b480      	push	{r7}
 800da5a:	b083      	sub	sp, #12
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	f043 0203 	orr.w	r2, r3, #3
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800da6c:	2300      	movs	r3, #0
}
 800da6e:	4618      	mov	r0, r3
 800da70:	370c      	adds	r7, #12
 800da72:	46bd      	mov	sp, r7
 800da74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da78:	4770      	bx	lr

0800da7a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 800da7a:	b480      	push	{r7}
 800da7c:	b083      	sub	sp, #12
 800da7e:	af00      	add	r7, sp, #0
 800da80:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	f003 0303 	and.w	r3, r3, #3
}
 800da8a:	4618      	mov	r0, r3
 800da8c:	370c      	adds	r7, #12
 800da8e:	46bd      	mov	sp, r7
 800da90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da94:	4770      	bx	lr
	...

0800da98 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 800da98:	b480      	push	{r7}
 800da9a:	b085      	sub	sp, #20
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
 800daa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800daa2:	2300      	movs	r3, #0
 800daa4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	681a      	ldr	r2, [r3, #0]
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800dab6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800dabc:	431a      	orrs	r2, r3
                       Command->CPSM);
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800dac2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800dac4:	68fa      	ldr	r2, [r7, #12]
 800dac6:	4313      	orrs	r3, r2
 800dac8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	68da      	ldr	r2, [r3, #12]
 800dace:	4b06      	ldr	r3, [pc, #24]	@ (800dae8 <SDMMC_SendCommand+0x50>)
 800dad0:	4013      	ands	r3, r2
 800dad2:	68fa      	ldr	r2, [r7, #12]
 800dad4:	431a      	orrs	r2, r3
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800dada:	2300      	movs	r3, #0
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3714      	adds	r7, #20
 800dae0:	46bd      	mov	sp, r7
 800dae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae6:	4770      	bx	lr
 800dae8:	fffee0c0 	.word	0xfffee0c0

0800daec <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 800daec:	b480      	push	{r7}
 800daee:	b083      	sub	sp, #12
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	691b      	ldr	r3, [r3, #16]
 800daf8:	b2db      	uxtb	r3, r3
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	370c      	adds	r7, #12
 800dafe:	46bd      	mov	sp, r7
 800db00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db04:	4770      	bx	lr

0800db06 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800db06:	b480      	push	{r7}
 800db08:	b085      	sub	sp, #20
 800db0a:	af00      	add	r7, sp, #0
 800db0c:	6078      	str	r0, [r7, #4]
 800db0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	3314      	adds	r3, #20
 800db14:	461a      	mov	r2, r3
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	4413      	add	r3, r2
 800db1a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	681b      	ldr	r3, [r3, #0]
}
 800db20:	4618      	mov	r0, r3
 800db22:	3714      	adds	r7, #20
 800db24:	46bd      	mov	sp, r7
 800db26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2a:	4770      	bx	lr

0800db2c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 800db2c:	b480      	push	{r7}
 800db2e:	b085      	sub	sp, #20
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
 800db34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800db36:	2300      	movs	r3, #0
 800db38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	681a      	ldr	r2, [r3, #0]
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	685a      	ldr	r2, [r3, #4]
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800db52:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800db58:	431a      	orrs	r2, r3
                       Data->DPSM);
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800db5e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800db60:	68fa      	ldr	r2, [r7, #12]
 800db62:	4313      	orrs	r3, r2
 800db64:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db6a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	431a      	orrs	r2, r3
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800db76:	2300      	movs	r3, #0

}
 800db78:	4618      	mov	r0, r3
 800db7a:	3714      	adds	r7, #20
 800db7c:	46bd      	mov	sp, r7
 800db7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db82:	4770      	bx	lr

0800db84 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b088      	sub	sp, #32
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
 800db8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800db92:	2310      	movs	r3, #16
 800db94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800db9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db9c:	2300      	movs	r3, #0
 800db9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dba0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dba4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dba6:	f107 0308 	add.w	r3, r7, #8
 800dbaa:	4619      	mov	r1, r3
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f7ff ff73 	bl	800da98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800dbb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dbb6:	2110      	movs	r1, #16
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f000 fa5f 	bl	800e07c <SDMMC_GetCmdResp1>
 800dbbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbc0:	69fb      	ldr	r3, [r7, #28]
}
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	3720      	adds	r7, #32
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}

0800dbca <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800dbca:	b580      	push	{r7, lr}
 800dbcc:	b088      	sub	sp, #32
 800dbce:	af00      	add	r7, sp, #0
 800dbd0:	6078      	str	r0, [r7, #4]
 800dbd2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800dbd8:	2311      	movs	r3, #17
 800dbda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dbdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dbe0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dbe6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dbea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dbec:	f107 0308 	add.w	r3, r7, #8
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f7ff ff50 	bl	800da98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800dbf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dbfc:	2111      	movs	r1, #17
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f000 fa3c 	bl	800e07c <SDMMC_GetCmdResp1>
 800dc04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc06:	69fb      	ldr	r3, [r7, #28]
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3720      	adds	r7, #32
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}

0800dc10 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b088      	sub	sp, #32
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
 800dc18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800dc1e:	2312      	movs	r3, #18
 800dc20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dc26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc28:	2300      	movs	r3, #0
 800dc2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dc30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc32:	f107 0308 	add.w	r3, r7, #8
 800dc36:	4619      	mov	r1, r3
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f7ff ff2d 	bl	800da98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800dc3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc42:	2112      	movs	r1, #18
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f000 fa19 	bl	800e07c <SDMMC_GetCmdResp1>
 800dc4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc4c:	69fb      	ldr	r3, [r7, #28]
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	3720      	adds	r7, #32
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}

0800dc56 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800dc56:	b580      	push	{r7, lr}
 800dc58:	b088      	sub	sp, #32
 800dc5a:	af00      	add	r7, sp, #0
 800dc5c:	6078      	str	r0, [r7, #4]
 800dc5e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800dc64:	2318      	movs	r3, #24
 800dc66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dc6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc6e:	2300      	movs	r3, #0
 800dc70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dc76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc78:	f107 0308 	add.w	r3, r7, #8
 800dc7c:	4619      	mov	r1, r3
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f7ff ff0a 	bl	800da98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800dc84:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc88:	2118      	movs	r1, #24
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f000 f9f6 	bl	800e07c <SDMMC_GetCmdResp1>
 800dc90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc92:	69fb      	ldr	r3, [r7, #28]
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	3720      	adds	r7, #32
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}

0800dc9c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b088      	sub	sp, #32
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
 800dca4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800dcaa:	2319      	movs	r3, #25
 800dcac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dcae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dcb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dcb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dcbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dcbe:	f107 0308 	add.w	r3, r7, #8
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f7ff fee7 	bl	800da98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800dcca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dcce:	2119      	movs	r1, #25
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f000 f9d3 	bl	800e07c <SDMMC_GetCmdResp1>
 800dcd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcd8:	69fb      	ldr	r3, [r7, #28]
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3720      	adds	r7, #32
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
	...

0800dce4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b088      	sub	sp, #32
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800dcec:	2300      	movs	r3, #0
 800dcee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800dcf0:	230c      	movs	r3, #12
 800dcf2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dcf4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dcf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dcfe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dd02:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	68db      	ldr	r3, [r3, #12]
 800dd08:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	68db      	ldr	r3, [r3, #12]
 800dd14:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd1c:	f107 0308 	add.w	r3, r7, #8
 800dd20:	4619      	mov	r1, r3
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f7ff feb8 	bl	800da98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800dd28:	4a0b      	ldr	r2, [pc, #44]	@ (800dd58 <SDMMC_CmdStopTransfer+0x74>)
 800dd2a:	210c      	movs	r1, #12
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	f000 f9a5 	bl	800e07c <SDMMC_GetCmdResp1>
 800dd32:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	68db      	ldr	r3, [r3, #12]
 800dd38:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800dd40:	69fb      	ldr	r3, [r7, #28]
 800dd42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dd46:	d101      	bne.n	800dd4c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800dd4c:	69fb      	ldr	r3, [r7, #28]
}
 800dd4e:	4618      	mov	r0, r3
 800dd50:	3720      	adds	r7, #32
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}
 800dd56:	bf00      	nop
 800dd58:	05f5e100 	.word	0x05f5e100

0800dd5c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b088      	sub	sp, #32
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800dd6a:	2307      	movs	r3, #7
 800dd6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd6e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dd72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd74:	2300      	movs	r3, #0
 800dd76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dd7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd7e:	f107 0308 	add.w	r3, r7, #8
 800dd82:	4619      	mov	r1, r3
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f7ff fe87 	bl	800da98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800dd8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dd8e:	2107      	movs	r1, #7
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f000 f973 	bl	800e07c <SDMMC_GetCmdResp1>
 800dd96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd98:	69fb      	ldr	r3, [r7, #28]
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3720      	adds	r7, #32
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}

0800dda2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800dda2:	b580      	push	{r7, lr}
 800dda4:	b088      	sub	sp, #32
 800dda6:	af00      	add	r7, sp, #0
 800dda8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ddba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ddbe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ddc0:	f107 0308 	add.w	r3, r7, #8
 800ddc4:	4619      	mov	r1, r3
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f7ff fe66 	bl	800da98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f000 fb97 	bl	800e500 <SDMMC_GetCmdError>
 800ddd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddd4:	69fb      	ldr	r3, [r7, #28]
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3720      	adds	r7, #32
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}

0800ddde <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ddde:	b580      	push	{r7, lr}
 800dde0:	b088      	sub	sp, #32
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800dde6:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800ddea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ddec:	2308      	movs	r3, #8
 800ddee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ddf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ddf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ddfa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ddfe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de00:	f107 0308 	add.w	r3, r7, #8
 800de04:	4619      	mov	r1, r3
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f7ff fe46 	bl	800da98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f000 fb29 	bl	800e464 <SDMMC_GetCmdResp7>
 800de12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de14:	69fb      	ldr	r3, [r7, #28]
}
 800de16:	4618      	mov	r0, r3
 800de18:	3720      	adds	r7, #32
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}

0800de1e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800de1e:	b580      	push	{r7, lr}
 800de20:	b088      	sub	sp, #32
 800de22:	af00      	add	r7, sp, #0
 800de24:	6078      	str	r0, [r7, #4]
 800de26:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800de2c:	2337      	movs	r3, #55	@ 0x37
 800de2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800de34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de36:	2300      	movs	r3, #0
 800de38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800de3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de40:	f107 0308 	add.w	r3, r7, #8
 800de44:	4619      	mov	r1, r3
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f7ff fe26 	bl	800da98 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800de4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800de50:	2137      	movs	r1, #55	@ 0x37
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	f000 f912 	bl	800e07c <SDMMC_GetCmdResp1>
 800de58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de5a:	69fb      	ldr	r3, [r7, #28]
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	3720      	adds	r7, #32
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}

0800de64 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b088      	sub	sp, #32
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
 800de6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800de72:	2329      	movs	r3, #41	@ 0x29
 800de74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800de7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de7c:	2300      	movs	r3, #0
 800de7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800de84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de86:	f107 0308 	add.w	r3, r7, #8
 800de8a:	4619      	mov	r1, r3
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f7ff fe03 	bl	800da98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f000 fa2e 	bl	800e2f4 <SDMMC_GetCmdResp3>
 800de98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de9a:	69fb      	ldr	r3, [r7, #28]
}
 800de9c:	4618      	mov	r0, r3
 800de9e:	3720      	adds	r7, #32
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}

0800dea4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b088      	sub	sp, #32
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800deb2:	2306      	movs	r3, #6
 800deb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800deb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800deba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800debc:	2300      	movs	r3, #0
 800debe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dec0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dec4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dec6:	f107 0308 	add.w	r3, r7, #8
 800deca:	4619      	mov	r1, r3
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f7ff fde3 	bl	800da98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ded2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ded6:	2106      	movs	r1, #6
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f000 f8cf 	bl	800e07c <SDMMC_GetCmdResp1>
 800dede:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dee0:	69fb      	ldr	r3, [r7, #28]
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	3720      	adds	r7, #32
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}

0800deea <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800deea:	b580      	push	{r7, lr}
 800deec:	b088      	sub	sp, #32
 800deee:	af00      	add	r7, sp, #0
 800def0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800def2:	2300      	movs	r3, #0
 800def4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800def6:	2333      	movs	r3, #51	@ 0x33
 800def8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800defa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800defe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df00:	2300      	movs	r3, #0
 800df02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800df04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800df08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800df0a:	f107 0308 	add.w	r3, r7, #8
 800df0e:	4619      	mov	r1, r3
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f7ff fdc1 	bl	800da98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800df16:	f241 3288 	movw	r2, #5000	@ 0x1388
 800df1a:	2133      	movs	r1, #51	@ 0x33
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f000 f8ad 	bl	800e07c <SDMMC_GetCmdResp1>
 800df22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df24:	69fb      	ldr	r3, [r7, #28]
}
 800df26:	4618      	mov	r0, r3
 800df28:	3720      	adds	r7, #32
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}

0800df2e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800df2e:	b580      	push	{r7, lr}
 800df30:	b088      	sub	sp, #32
 800df32:	af00      	add	r7, sp, #0
 800df34:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800df36:	2300      	movs	r3, #0
 800df38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800df3a:	2302      	movs	r3, #2
 800df3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800df3e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800df42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df44:	2300      	movs	r3, #0
 800df46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800df48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800df4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800df4e:	f107 0308 	add.w	r3, r7, #8
 800df52:	4619      	mov	r1, r3
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f7ff fd9f 	bl	800da98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f000 f980 	bl	800e260 <SDMMC_GetCmdResp2>
 800df60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df62:	69fb      	ldr	r3, [r7, #28]
}
 800df64:	4618      	mov	r0, r3
 800df66:	3720      	adds	r7, #32
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}

0800df6c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b088      	sub	sp, #32
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
 800df74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800df7a:	2309      	movs	r3, #9
 800df7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800df7e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800df82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df84:	2300      	movs	r3, #0
 800df86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800df88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800df8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800df8e:	f107 0308 	add.w	r3, r7, #8
 800df92:	4619      	mov	r1, r3
 800df94:	6878      	ldr	r0, [r7, #4]
 800df96:	f7ff fd7f 	bl	800da98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f000 f960 	bl	800e260 <SDMMC_GetCmdResp2>
 800dfa0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dfa2:	69fb      	ldr	r3, [r7, #28]
}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	3720      	adds	r7, #32
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}

0800dfac <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b088      	sub	sp, #32
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800dfba:	2303      	movs	r3, #3
 800dfbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dfbe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dfc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dfc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dfcc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dfce:	f107 0308 	add.w	r3, r7, #8
 800dfd2:	4619      	mov	r1, r3
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f7ff fd5f 	bl	800da98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800dfda:	683a      	ldr	r2, [r7, #0]
 800dfdc:	2103      	movs	r1, #3
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f000 f9c8 	bl	800e374 <SDMMC_GetCmdResp6>
 800dfe4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dfe6:	69fb      	ldr	r3, [r7, #28]
}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	3720      	adds	r7, #32
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}

0800dff0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b088      	sub	sp, #32
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
 800dff8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800dffe:	230d      	movs	r3, #13
 800e000:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e002:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e006:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e008:	2300      	movs	r3, #0
 800e00a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e00c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e010:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e012:	f107 0308 	add.w	r3, r7, #8
 800e016:	4619      	mov	r1, r3
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	f7ff fd3d 	bl	800da98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800e01e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e022:	210d      	movs	r1, #13
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f000 f829 	bl	800e07c <SDMMC_GetCmdResp1>
 800e02a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e02c:	69fb      	ldr	r3, [r7, #28]
}
 800e02e:	4618      	mov	r0, r3
 800e030:	3720      	adds	r7, #32
 800e032:	46bd      	mov	sp, r7
 800e034:	bd80      	pop	{r7, pc}

0800e036 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800e036:	b580      	push	{r7, lr}
 800e038:	b088      	sub	sp, #32
 800e03a:	af00      	add	r7, sp, #0
 800e03c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e03e:	2300      	movs	r3, #0
 800e040:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800e042:	230d      	movs	r3, #13
 800e044:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e046:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e04a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e04c:	2300      	movs	r3, #0
 800e04e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e050:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e054:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e056:	f107 0308 	add.w	r3, r7, #8
 800e05a:	4619      	mov	r1, r3
 800e05c:	6878      	ldr	r0, [r7, #4]
 800e05e:	f7ff fd1b 	bl	800da98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800e062:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e066:	210d      	movs	r1, #13
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	f000 f807 	bl	800e07c <SDMMC_GetCmdResp1>
 800e06e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e070:	69fb      	ldr	r3, [r7, #28]
}
 800e072:	4618      	mov	r0, r3
 800e074:	3720      	adds	r7, #32
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}
	...

0800e07c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b088      	sub	sp, #32
 800e080:	af00      	add	r7, sp, #0
 800e082:	60f8      	str	r0, [r7, #12]
 800e084:	460b      	mov	r3, r1
 800e086:	607a      	str	r2, [r7, #4]
 800e088:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e08a:	4b70      	ldr	r3, [pc, #448]	@ (800e24c <SDMMC_GetCmdResp1+0x1d0>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	4a70      	ldr	r2, [pc, #448]	@ (800e250 <SDMMC_GetCmdResp1+0x1d4>)
 800e090:	fba2 2303 	umull	r2, r3, r2, r3
 800e094:	0a5a      	lsrs	r2, r3, #9
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	fb02 f303 	mul.w	r3, r2, r3
 800e09c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e09e:	69fb      	ldr	r3, [r7, #28]
 800e0a0:	1e5a      	subs	r2, r3, #1
 800e0a2:	61fa      	str	r2, [r7, #28]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d102      	bne.n	800e0ae <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e0a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e0ac:	e0c9      	b.n	800e242 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e0b2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800e0b4:	69ba      	ldr	r2, [r7, #24]
 800e0b6:	4b67      	ldr	r3, [pc, #412]	@ (800e254 <SDMMC_GetCmdResp1+0x1d8>)
 800e0b8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d0ef      	beq.n	800e09e <SDMMC_GetCmdResp1+0x22>
 800e0be:	69bb      	ldr	r3, [r7, #24]
 800e0c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d1ea      	bne.n	800e09e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e0cc:	f003 0304 	and.w	r3, r3, #4
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d004      	beq.n	800e0de <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	2204      	movs	r2, #4
 800e0d8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e0da:	2304      	movs	r3, #4
 800e0dc:	e0b1      	b.n	800e242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e0e2:	f003 0301 	and.w	r3, r3, #1
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d004      	beq.n	800e0f4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	2201      	movs	r2, #1
 800e0ee:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	e0a6      	b.n	800e242 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	4a58      	ldr	r2, [pc, #352]	@ (800e258 <SDMMC_GetCmdResp1+0x1dc>)
 800e0f8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e0fa:	68f8      	ldr	r0, [r7, #12]
 800e0fc:	f7ff fcf6 	bl	800daec <SDMMC_GetCommandResponse>
 800e100:	4603      	mov	r3, r0
 800e102:	461a      	mov	r2, r3
 800e104:	7afb      	ldrb	r3, [r7, #11]
 800e106:	4293      	cmp	r3, r2
 800e108:	d001      	beq.n	800e10e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e10a:	2301      	movs	r3, #1
 800e10c:	e099      	b.n	800e242 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e10e:	2100      	movs	r1, #0
 800e110:	68f8      	ldr	r0, [r7, #12]
 800e112:	f7ff fcf8 	bl	800db06 <SDMMC_GetResponse>
 800e116:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e118:	697a      	ldr	r2, [r7, #20]
 800e11a:	4b50      	ldr	r3, [pc, #320]	@ (800e25c <SDMMC_GetCmdResp1+0x1e0>)
 800e11c:	4013      	ands	r3, r2
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d101      	bne.n	800e126 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e122:	2300      	movs	r3, #0
 800e124:	e08d      	b.n	800e242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	da02      	bge.n	800e132 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e12c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e130:	e087      	b.n	800e242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d001      	beq.n	800e140 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e13c:	2340      	movs	r3, #64	@ 0x40
 800e13e:	e080      	b.n	800e242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e140:	697b      	ldr	r3, [r7, #20]
 800e142:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e146:	2b00      	cmp	r3, #0
 800e148:	d001      	beq.n	800e14e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e14a:	2380      	movs	r3, #128	@ 0x80
 800e14c:	e079      	b.n	800e242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e14e:	697b      	ldr	r3, [r7, #20]
 800e150:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e154:	2b00      	cmp	r3, #0
 800e156:	d002      	beq.n	800e15e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e158:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e15c:	e071      	b.n	800e242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e164:	2b00      	cmp	r3, #0
 800e166:	d002      	beq.n	800e16e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e168:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e16c:	e069      	b.n	800e242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e174:	2b00      	cmp	r3, #0
 800e176:	d002      	beq.n	800e17e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e178:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e17c:	e061      	b.n	800e242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e17e:	697b      	ldr	r3, [r7, #20]
 800e180:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e184:	2b00      	cmp	r3, #0
 800e186:	d002      	beq.n	800e18e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e188:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e18c:	e059      	b.n	800e242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e194:	2b00      	cmp	r3, #0
 800e196:	d002      	beq.n	800e19e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e198:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e19c:	e051      	b.n	800e242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e19e:	697b      	ldr	r3, [r7, #20]
 800e1a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d002      	beq.n	800e1ae <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e1a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e1ac:	e049      	b.n	800e242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d002      	beq.n	800e1be <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e1b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e1bc:	e041      	b.n	800e242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e1be:	697b      	ldr	r3, [r7, #20]
 800e1c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d002      	beq.n	800e1ce <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e1c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e1cc:	e039      	b.n	800e242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e1ce:	697b      	ldr	r3, [r7, #20]
 800e1d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d002      	beq.n	800e1de <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e1d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800e1dc:	e031      	b.n	800e242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d002      	beq.n	800e1ee <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e1e8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800e1ec:	e029      	b.n	800e242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d002      	beq.n	800e1fe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e1f8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e1fc:	e021      	b.n	800e242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e204:	2b00      	cmp	r3, #0
 800e206:	d002      	beq.n	800e20e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e208:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800e20c:	e019      	b.n	800e242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e214:	2b00      	cmp	r3, #0
 800e216:	d002      	beq.n	800e21e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e218:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800e21c:	e011      	b.n	800e242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e224:	2b00      	cmp	r3, #0
 800e226:	d002      	beq.n	800e22e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e228:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800e22c:	e009      	b.n	800e242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	f003 0308 	and.w	r3, r3, #8
 800e234:	2b00      	cmp	r3, #0
 800e236:	d002      	beq.n	800e23e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e238:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800e23c:	e001      	b.n	800e242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e23e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800e242:	4618      	mov	r0, r3
 800e244:	3720      	adds	r7, #32
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}
 800e24a:	bf00      	nop
 800e24c:	24000388 	.word	0x24000388
 800e250:	10624dd3 	.word	0x10624dd3
 800e254:	00200045 	.word	0x00200045
 800e258:	002000c5 	.word	0x002000c5
 800e25c:	fdffe008 	.word	0xfdffe008

0800e260 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e260:	b480      	push	{r7}
 800e262:	b085      	sub	sp, #20
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e268:	4b1f      	ldr	r3, [pc, #124]	@ (800e2e8 <SDMMC_GetCmdResp2+0x88>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	4a1f      	ldr	r2, [pc, #124]	@ (800e2ec <SDMMC_GetCmdResp2+0x8c>)
 800e26e:	fba2 2303 	umull	r2, r3, r2, r3
 800e272:	0a5b      	lsrs	r3, r3, #9
 800e274:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e278:	fb02 f303 	mul.w	r3, r2, r3
 800e27c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	1e5a      	subs	r2, r3, #1
 800e282:	60fa      	str	r2, [r7, #12]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d102      	bne.n	800e28e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e288:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e28c:	e026      	b.n	800e2dc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e292:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d0ef      	beq.n	800e27e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d1ea      	bne.n	800e27e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2ac:	f003 0304 	and.w	r3, r3, #4
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d004      	beq.n	800e2be <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2204      	movs	r2, #4
 800e2b8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e2ba:	2304      	movs	r3, #4
 800e2bc:	e00e      	b.n	800e2dc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2c2:	f003 0301 	and.w	r3, r3, #1
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d004      	beq.n	800e2d4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	2201      	movs	r2, #1
 800e2ce:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e2d0:	2301      	movs	r3, #1
 800e2d2:	e003      	b.n	800e2dc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	4a06      	ldr	r2, [pc, #24]	@ (800e2f0 <SDMMC_GetCmdResp2+0x90>)
 800e2d8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800e2da:	2300      	movs	r3, #0
}
 800e2dc:	4618      	mov	r0, r3
 800e2de:	3714      	adds	r7, #20
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e6:	4770      	bx	lr
 800e2e8:	24000388 	.word	0x24000388
 800e2ec:	10624dd3 	.word	0x10624dd3
 800e2f0:	002000c5 	.word	0x002000c5

0800e2f4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b085      	sub	sp, #20
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e2fc:	4b1a      	ldr	r3, [pc, #104]	@ (800e368 <SDMMC_GetCmdResp3+0x74>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	4a1a      	ldr	r2, [pc, #104]	@ (800e36c <SDMMC_GetCmdResp3+0x78>)
 800e302:	fba2 2303 	umull	r2, r3, r2, r3
 800e306:	0a5b      	lsrs	r3, r3, #9
 800e308:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e30c:	fb02 f303 	mul.w	r3, r2, r3
 800e310:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	1e5a      	subs	r2, r3, #1
 800e316:	60fa      	str	r2, [r7, #12]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d102      	bne.n	800e322 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e31c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e320:	e01b      	b.n	800e35a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e326:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e328:	68bb      	ldr	r3, [r7, #8]
 800e32a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d0ef      	beq.n	800e312 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e332:	68bb      	ldr	r3, [r7, #8]
 800e334:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d1ea      	bne.n	800e312 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e340:	f003 0304 	and.w	r3, r3, #4
 800e344:	2b00      	cmp	r3, #0
 800e346:	d004      	beq.n	800e352 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2204      	movs	r2, #4
 800e34c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e34e:	2304      	movs	r3, #4
 800e350:	e003      	b.n	800e35a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	4a06      	ldr	r2, [pc, #24]	@ (800e370 <SDMMC_GetCmdResp3+0x7c>)
 800e356:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800e358:	2300      	movs	r3, #0
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	3714      	adds	r7, #20
 800e35e:	46bd      	mov	sp, r7
 800e360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e364:	4770      	bx	lr
 800e366:	bf00      	nop
 800e368:	24000388 	.word	0x24000388
 800e36c:	10624dd3 	.word	0x10624dd3
 800e370:	002000c5 	.word	0x002000c5

0800e374 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b088      	sub	sp, #32
 800e378:	af00      	add	r7, sp, #0
 800e37a:	60f8      	str	r0, [r7, #12]
 800e37c:	460b      	mov	r3, r1
 800e37e:	607a      	str	r2, [r7, #4]
 800e380:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e382:	4b35      	ldr	r3, [pc, #212]	@ (800e458 <SDMMC_GetCmdResp6+0xe4>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	4a35      	ldr	r2, [pc, #212]	@ (800e45c <SDMMC_GetCmdResp6+0xe8>)
 800e388:	fba2 2303 	umull	r2, r3, r2, r3
 800e38c:	0a5b      	lsrs	r3, r3, #9
 800e38e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e392:	fb02 f303 	mul.w	r3, r2, r3
 800e396:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e398:	69fb      	ldr	r3, [r7, #28]
 800e39a:	1e5a      	subs	r2, r3, #1
 800e39c:	61fa      	str	r2, [r7, #28]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d102      	bne.n	800e3a8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e3a2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e3a6:	e052      	b.n	800e44e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3ac:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e3ae:	69bb      	ldr	r3, [r7, #24]
 800e3b0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d0ef      	beq.n	800e398 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e3b8:	69bb      	ldr	r3, [r7, #24]
 800e3ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d1ea      	bne.n	800e398 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3c6:	f003 0304 	and.w	r3, r3, #4
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d004      	beq.n	800e3d8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	2204      	movs	r2, #4
 800e3d2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e3d4:	2304      	movs	r3, #4
 800e3d6:	e03a      	b.n	800e44e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3dc:	f003 0301 	and.w	r3, r3, #1
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d004      	beq.n	800e3ee <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	2201      	movs	r2, #1
 800e3e8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e3ea:	2301      	movs	r3, #1
 800e3ec:	e02f      	b.n	800e44e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e3ee:	68f8      	ldr	r0, [r7, #12]
 800e3f0:	f7ff fb7c 	bl	800daec <SDMMC_GetCommandResponse>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	461a      	mov	r2, r3
 800e3f8:	7afb      	ldrb	r3, [r7, #11]
 800e3fa:	4293      	cmp	r3, r2
 800e3fc:	d001      	beq.n	800e402 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e3fe:	2301      	movs	r3, #1
 800e400:	e025      	b.n	800e44e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	4a16      	ldr	r2, [pc, #88]	@ (800e460 <SDMMC_GetCmdResp6+0xec>)
 800e406:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e408:	2100      	movs	r1, #0
 800e40a:	68f8      	ldr	r0, [r7, #12]
 800e40c:	f7ff fb7b 	bl	800db06 <SDMMC_GetResponse>
 800e410:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800e412:	697b      	ldr	r3, [r7, #20]
 800e414:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d106      	bne.n	800e42a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800e41c:	697b      	ldr	r3, [r7, #20]
 800e41e:	0c1b      	lsrs	r3, r3, #16
 800e420:	b29a      	uxth	r2, r3
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800e426:	2300      	movs	r3, #0
 800e428:	e011      	b.n	800e44e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e42a:	697b      	ldr	r3, [r7, #20]
 800e42c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e430:	2b00      	cmp	r3, #0
 800e432:	d002      	beq.n	800e43a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e434:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e438:	e009      	b.n	800e44e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e43a:	697b      	ldr	r3, [r7, #20]
 800e43c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e440:	2b00      	cmp	r3, #0
 800e442:	d002      	beq.n	800e44a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e444:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e448:	e001      	b.n	800e44e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e44a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800e44e:	4618      	mov	r0, r3
 800e450:	3720      	adds	r7, #32
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}
 800e456:	bf00      	nop
 800e458:	24000388 	.word	0x24000388
 800e45c:	10624dd3 	.word	0x10624dd3
 800e460:	002000c5 	.word	0x002000c5

0800e464 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e464:	b480      	push	{r7}
 800e466:	b085      	sub	sp, #20
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e46c:	4b22      	ldr	r3, [pc, #136]	@ (800e4f8 <SDMMC_GetCmdResp7+0x94>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	4a22      	ldr	r2, [pc, #136]	@ (800e4fc <SDMMC_GetCmdResp7+0x98>)
 800e472:	fba2 2303 	umull	r2, r3, r2, r3
 800e476:	0a5b      	lsrs	r3, r3, #9
 800e478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e47c:	fb02 f303 	mul.w	r3, r2, r3
 800e480:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	1e5a      	subs	r2, r3, #1
 800e486:	60fa      	str	r2, [r7, #12]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d102      	bne.n	800e492 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e48c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e490:	e02c      	b.n	800e4ec <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e496:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d0ef      	beq.n	800e482 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d1ea      	bne.n	800e482 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e4b0:	f003 0304 	and.w	r3, r3, #4
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d004      	beq.n	800e4c2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2204      	movs	r2, #4
 800e4bc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e4be:	2304      	movs	r3, #4
 800e4c0:	e014      	b.n	800e4ec <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e4c6:	f003 0301 	and.w	r3, r3, #1
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d004      	beq.n	800e4d8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2201      	movs	r2, #1
 800e4d2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	e009      	b.n	800e4ec <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e4dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d002      	beq.n	800e4ea <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2240      	movs	r2, #64	@ 0x40
 800e4e8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800e4ea:	2300      	movs	r3, #0

}
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	3714      	adds	r7, #20
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f6:	4770      	bx	lr
 800e4f8:	24000388 	.word	0x24000388
 800e4fc:	10624dd3 	.word	0x10624dd3

0800e500 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800e500:	b480      	push	{r7}
 800e502:	b085      	sub	sp, #20
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e508:	4b11      	ldr	r3, [pc, #68]	@ (800e550 <SDMMC_GetCmdError+0x50>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	4a11      	ldr	r2, [pc, #68]	@ (800e554 <SDMMC_GetCmdError+0x54>)
 800e50e:	fba2 2303 	umull	r2, r3, r2, r3
 800e512:	0a5b      	lsrs	r3, r3, #9
 800e514:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e518:	fb02 f303 	mul.w	r3, r2, r3
 800e51c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	1e5a      	subs	r2, r3, #1
 800e522:	60fa      	str	r2, [r7, #12]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d102      	bne.n	800e52e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e528:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e52c:	e009      	b.n	800e542 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e536:	2b00      	cmp	r3, #0
 800e538:	d0f1      	beq.n	800e51e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	4a06      	ldr	r2, [pc, #24]	@ (800e558 <SDMMC_GetCmdError+0x58>)
 800e53e:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800e540:	2300      	movs	r3, #0
}
 800e542:	4618      	mov	r0, r3
 800e544:	3714      	adds	r7, #20
 800e546:	46bd      	mov	sp, r7
 800e548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54c:	4770      	bx	lr
 800e54e:	bf00      	nop
 800e550:	24000388 	.word	0x24000388
 800e554:	10624dd3 	.word	0x10624dd3
 800e558:	002000c5 	.word	0x002000c5

0800e55c <Drive_First>:
void Drive_LPTIM5_IRQ() {
	c_v = (fabsf(t_v - c_v) < accel * dt) ?
			t_v : ((t_v - c_v > 0) ? c_v + accel * dt : c_v - accel * dt);
}

void Drive_First() {
 800e55c:	b480      	push	{r7}
 800e55e:	af00      	add	r7, sp, #0

}
 800e560:	bf00      	nop
 800e562:	46bd      	mov	sp, r7
 800e564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e568:	4770      	bx	lr

0800e56a <Drive_Second>:

void Drive_Second() {
 800e56a:	b480      	push	{r7}
 800e56c:	af00      	add	r7, sp, #0

}
 800e56e:	bf00      	nop
 800e570:	46bd      	mov	sp, r7
 800e572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e576:	4770      	bx	lr

0800e578 <Drive_Third>:

void Drive_Third() {
 800e578:	b480      	push	{r7}
 800e57a:	af00      	add	r7, sp, #0

}
 800e57c:	bf00      	nop
 800e57e:	46bd      	mov	sp, r7
 800e580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e584:	4770      	bx	lr

0800e586 <Drive_Forth>:

void Drive_Forth() {
 800e586:	b480      	push	{r7}
 800e588:	af00      	add	r7, sp, #0

}
 800e58a:	bf00      	nop
 800e58c:	46bd      	mov	sp, r7
 800e58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e592:	4770      	bx	lr

0800e594 <Setting>:
			(uint32_t) (31 * percent / 100), 10, percentColor);
	ST7735_LCD_Driver.FillRect(&st7735_pObj, 43 + (31 * percent / 100), 147,
			31 - (31 * percent / 100), 10, BLACK);
}

void Setting() {
 800e594:	b480      	push	{r7}
 800e596:	af00      	add	r7, sp, #0

}
 800e598:	bf00      	nop
 800e59a:	46bd      	mov	sp, r7
 800e59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a0:	4770      	bx	lr
	...

0800e5a4 <Init>:
		{ "1.Cali    ", Sensor_Calibration}, { "2.D 1st   ",
		Drive_First }, { "3.D 2nd   ", Drive_Second }, { "4.D 3rd   ",
		Drive_Third }, { "5.D 4th   ", Drive_Forth }, { "6.Setting ", Setting },
		{ "7.S Test  ", Sensor_Test_Menu }, { "8.M Test  ", Motor_Test_Menu } };

void Init() {
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b082      	sub	sp, #8
 800e5a8:	af00      	add	r7, sp, #0
	//	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
	//	__HAL_TIM_SET_AUTORELOAD(&htim16, 500);
	//	__HAL_TIM_SetCompare(&htim16,TIM_CHANNEL_1, 250);
	Encoder_Start();
 800e5aa:	f000 ffc7 	bl	800f53c <Encoder_Start>
	static uint8_t maxMenu = sizeof(menu) / sizeof(menu_t);
	static uint8_t beforeMenu = 0;
	static uint8_t cnt_l = 0;
//	static uint8_t cnt_r = 0;
	while(HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET);
 800e5ae:	bf00      	nop
 800e5b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800e5b4:	4834      	ldr	r0, [pc, #208]	@ (800e688 <Init+0xe4>)
 800e5b6:	f7f6 fadf 	bl	8004b78 <HAL_GPIO_ReadPin>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	2b01      	cmp	r3, #1
 800e5be:	d0f7      	beq.n	800e5b0 <Init+0xc>
	while (1) {
		cnt_l = ((hlptim1.Instance->CNT + 128) / 256 + beforeMenu) % maxMenu;
 800e5c0:	4b32      	ldr	r3, [pc, #200]	@ (800e68c <Init+0xe8>)
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	69db      	ldr	r3, [r3, #28]
 800e5c6:	3380      	adds	r3, #128	@ 0x80
 800e5c8:	0a1b      	lsrs	r3, r3, #8
 800e5ca:	4a31      	ldr	r2, [pc, #196]	@ (800e690 <Init+0xec>)
 800e5cc:	7812      	ldrb	r2, [r2, #0]
 800e5ce:	4413      	add	r3, r2
 800e5d0:	4a30      	ldr	r2, [pc, #192]	@ (800e694 <Init+0xf0>)
 800e5d2:	7812      	ldrb	r2, [r2, #0]
 800e5d4:	fbb3 f1f2 	udiv	r1, r3, r2
 800e5d8:	fb01 f202 	mul.w	r2, r1, r2
 800e5dc:	1a9b      	subs	r3, r3, r2
 800e5de:	b2da      	uxtb	r2, r3
 800e5e0:	4b2d      	ldr	r3, [pc, #180]	@ (800e698 <Init+0xf4>)
 800e5e2:	701a      	strb	r2, [r3, #0]
//		cnt_r = ((hlptim2.Instance->CNT + 1024) / 2048) % 2;
		Custom_LCD_Printf(0, 0, "Main Menu", hlptim1.Instance->CNT);
 800e5e4:	4b29      	ldr	r3, [pc, #164]	@ (800e68c <Init+0xe8>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	69db      	ldr	r3, [r3, #28]
 800e5ea:	4a2c      	ldr	r2, [pc, #176]	@ (800e69c <Init+0xf8>)
 800e5ec:	2100      	movs	r1, #0
 800e5ee:	2000      	movs	r0, #0
 800e5f0:	f7f2 fd94 	bl	800111c <Custom_LCD_Printf>
		for (uint8_t i = 0; i < maxMenu; i++) {
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	71fb      	strb	r3, [r7, #7]
 800e5f8:	e014      	b.n	800e624 <Init+0x80>
			Set_Color(cnt_l, i);
 800e5fa:	4b27      	ldr	r3, [pc, #156]	@ (800e698 <Init+0xf4>)
 800e5fc:	781b      	ldrb	r3, [r3, #0]
 800e5fe:	461a      	mov	r2, r3
 800e600:	79fb      	ldrb	r3, [r7, #7]
 800e602:	4619      	mov	r1, r3
 800e604:	4610      	mov	r0, r2
 800e606:	f7f2 fdf7 	bl	80011f8 <Set_Color>
			Custom_LCD_Printf(0, i + 1, "%s", (menu + i)->name);
 800e60a:	79fb      	ldrb	r3, [r7, #7]
 800e60c:	1c59      	adds	r1, r3, #1
 800e60e:	79fb      	ldrb	r3, [r7, #7]
 800e610:	011b      	lsls	r3, r3, #4
 800e612:	4a23      	ldr	r2, [pc, #140]	@ (800e6a0 <Init+0xfc>)
 800e614:	4413      	add	r3, r2
 800e616:	4a23      	ldr	r2, [pc, #140]	@ (800e6a4 <Init+0x100>)
 800e618:	2000      	movs	r0, #0
 800e61a:	f7f2 fd7f 	bl	800111c <Custom_LCD_Printf>
		for (uint8_t i = 0; i < maxMenu; i++) {
 800e61e:	79fb      	ldrb	r3, [r7, #7]
 800e620:	3301      	adds	r3, #1
 800e622:	71fb      	strb	r3, [r7, #7]
 800e624:	4b1b      	ldr	r3, [pc, #108]	@ (800e694 <Init+0xf0>)
 800e626:	781b      	ldrb	r3, [r3, #0]
 800e628:	79fa      	ldrb	r2, [r7, #7]
 800e62a:	429a      	cmp	r2, r3
 800e62c:	d3e5      	bcc.n	800e5fa <Init+0x56>
		}

		POINT_COLOR = WHITE;
 800e62e:	4b1e      	ldr	r3, [pc, #120]	@ (800e6a8 <Init+0x104>)
 800e630:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e634:	801a      	strh	r2, [r3, #0]
		BACK_COLOR = BLACK;
 800e636:	4b1d      	ldr	r3, [pc, #116]	@ (800e6ac <Init+0x108>)
 800e638:	2200      	movs	r2, #0
 800e63a:	801a      	strh	r2, [r3, #0]
//		Show_Remain_Battery();

		if (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET) {
 800e63c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800e640:	4811      	ldr	r0, [pc, #68]	@ (800e688 <Init+0xe4>)
 800e642:	f7f6 fa99 	bl	8004b78 <HAL_GPIO_ReadPin>
 800e646:	4603      	mov	r3, r0
 800e648:	2b01      	cmp	r3, #1
 800e64a:	d1b9      	bne.n	800e5c0 <Init+0x1c>
			while(HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET);
 800e64c:	bf00      	nop
 800e64e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800e652:	480d      	ldr	r0, [pc, #52]	@ (800e688 <Init+0xe4>)
 800e654:	f7f6 fa90 	bl	8004b78 <HAL_GPIO_ReadPin>
 800e658:	4603      	mov	r3, r0
 800e65a:	2b01      	cmp	r3, #1
 800e65c:	d0f7      	beq.n	800e64e <Init+0xaa>
			Custom_LCD_Clear();
 800e65e:	f7f2 fdaf 	bl	80011c0 <Custom_LCD_Clear>
			Encoder_Stop();
 800e662:	f000 ffad 	bl	800f5c0 <Encoder_Stop>

			(menu + cnt_l)->func();
 800e666:	4b0c      	ldr	r3, [pc, #48]	@ (800e698 <Init+0xf4>)
 800e668:	781b      	ldrb	r3, [r3, #0]
 800e66a:	011b      	lsls	r3, r3, #4
 800e66c:	4a0c      	ldr	r2, [pc, #48]	@ (800e6a0 <Init+0xfc>)
 800e66e:	4413      	add	r3, r2
 800e670:	68db      	ldr	r3, [r3, #12]
 800e672:	4798      	blx	r3

			Encoder_Start();
 800e674:	f000 ff62 	bl	800f53c <Encoder_Start>
			Custom_LCD_Clear();
 800e678:	f7f2 fda2 	bl	80011c0 <Custom_LCD_Clear>
			beforeMenu = cnt_l;
 800e67c:	4b06      	ldr	r3, [pc, #24]	@ (800e698 <Init+0xf4>)
 800e67e:	781a      	ldrb	r2, [r3, #0]
 800e680:	4b03      	ldr	r3, [pc, #12]	@ (800e690 <Init+0xec>)
 800e682:	701a      	strb	r2, [r3, #0]
		cnt_l = ((hlptim1.Instance->CNT + 128) / 256 + beforeMenu) % maxMenu;
 800e684:	e79c      	b.n	800e5c0 <Init+0x1c>
 800e686:	bf00      	nop
 800e688:	58020800 	.word	0x58020800
 800e68c:	24000ce0 	.word	0x24000ce0
 800e690:	24000ac8 	.word	0x24000ac8
 800e694:	24000118 	.word	0x24000118
 800e698:	24000ac9 	.word	0x24000ac9
 800e69c:	08016fd0 	.word	0x08016fd0
 800e6a0:	24000098 	.word	0x24000098
 800e6a4:	08016fdc 	.word	0x08016fdc
 800e6a8:	24000020 	.word	0x24000020
 800e6ac:	240005b0 	.word	0x240005b0

0800e6b0 <Transmit_Set>:
 *      Author: kth59
 */

#include "mcf8316c.h"

HAL_StatusTypeDef Transmit_Set(I2C_HandleTypeDef *hi2c) {
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b088      	sub	sp, #32
 800e6b4:	af02      	add	r7, sp, #8
 800e6b6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	uint8_t tx_buffer[7];
	uint16_t slave_address_8bit = MCF8316C_I2C_ADDRESS_7BIT << 1;
 800e6b8:	2302      	movs	r3, #2
 800e6ba:	82fb      	strh	r3, [r7, #22]

	tx_buffer[0] = CONTROL_WRITE | CONTROL_CRC | CONTROL_DATA_LEN
 800e6bc:	2310      	movs	r3, #16
 800e6be:	733b      	strb	r3, [r7, #12]
			| CONTROL_MEM_SEC;
	tx_buffer[1] = ((MCF8316C_WRITE_READ_ADDR >> 8) & 0xF) | CONTROL_MEM_PAGE;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	737b      	strb	r3, [r7, #13]
	tx_buffer[2] = MCF8316C_WRITE_READ_ADDR & 0xFF;
 800e6c4:	23ea      	movs	r3, #234	@ 0xea
 800e6c6:	73bb      	strb	r3, [r7, #14]
	tx_buffer[3] = MCF8316C_REG_WRITE_BIT & 0xFF;
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	73fb      	strb	r3, [r7, #15]
	tx_buffer[4] = (MCF8316C_REG_WRITE_BIT >> 8) & 0xFF;
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	743b      	strb	r3, [r7, #16]
	tx_buffer[5] = (MCF8316C_REG_WRITE_BIT >> 16) & 0xFF;
 800e6d0:	2350      	movs	r3, #80	@ 0x50
 800e6d2:	747b      	strb	r3, [r7, #17]
	tx_buffer[6] = (MCF8316C_REG_WRITE_BIT >> 24) & 0xFF;
 800e6d4:	238a      	movs	r3, #138	@ 0x8a
 800e6d6:	74bb      	strb	r3, [r7, #18]

	status = HAL_I2C_Master_Transmit(hi2c, slave_address_8bit, tx_buffer,
 800e6d8:	f107 020c 	add.w	r2, r7, #12
 800e6dc:	8af9      	ldrh	r1, [r7, #22]
 800e6de:	f04f 33ff 	mov.w	r3, #4294967295
 800e6e2:	9300      	str	r3, [sp, #0]
 800e6e4:	2307      	movs	r3, #7
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f7f6 fb2e 	bl	8004d48 <HAL_I2C_Master_Transmit>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	757b      	strb	r3, [r7, #21]
			sizeof(tx_buffer),
			HAL_MAX_DELAY);
	if (status != HAL_OK) {
 800e6f0:	7d7b      	ldrb	r3, [r7, #21]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d001      	beq.n	800e6fa <Transmit_Set+0x4a>
		return status;
 800e6f6:	7d7b      	ldrb	r3, [r7, #21]
 800e6f8:	e000      	b.n	800e6fc <Transmit_Set+0x4c>
	}
	return HAL_OK;
 800e6fa:	2300      	movs	r3, #0
}
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	3718      	adds	r7, #24
 800e700:	46bd      	mov	sp, r7
 800e702:	bd80      	pop	{r7, pc}

0800e704 <Receive_Set>:

HAL_StatusTypeDef Receive_Set(I2C_HandleTypeDef *hi2c, uint8_t size) {
 800e704:	b580      	push	{r7, lr}
 800e706:	b088      	sub	sp, #32
 800e708:	af02      	add	r7, sp, #8
 800e70a:	6078      	str	r0, [r7, #4]
 800e70c:	460b      	mov	r3, r1
 800e70e:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status;
	uint8_t tx_buffer[7];
	uint16_t slave_address_8bit = MCF8316C_I2C_ADDRESS_7BIT << 1;
 800e710:	2302      	movs	r3, #2
 800e712:	82fb      	strh	r3, [r7, #22]

	tx_buffer[0] = CONTROL_READ | CONTROL_CRC | CONTROL_MEM_SEC;
 800e714:	2380      	movs	r3, #128	@ 0x80
 800e716:	733b      	strb	r3, [r7, #12]
	switch (size) {
 800e718:	78fb      	ldrb	r3, [r7, #3]
 800e71a:	2b02      	cmp	r3, #2
 800e71c:	d002      	beq.n	800e724 <Receive_Set+0x20>
 800e71e:	2b08      	cmp	r3, #8
 800e720:	d003      	beq.n	800e72a <Receive_Set+0x26>
 800e722:	e008      	b.n	800e736 <Receive_Set+0x32>
	case 2:
		tx_buffer[0] |= CONTROL_DATA_16BIT;
 800e724:	7b3b      	ldrb	r3, [r7, #12]
 800e726:	733b      	strb	r3, [r7, #12]
		break;
 800e728:	e00b      	b.n	800e742 <Receive_Set+0x3e>
	case 8:
		tx_buffer[0] |= CONTROL_DATA_64BIT;
 800e72a:	7b3b      	ldrb	r3, [r7, #12]
 800e72c:	f043 0320 	orr.w	r3, r3, #32
 800e730:	b2db      	uxtb	r3, r3
 800e732:	733b      	strb	r3, [r7, #12]
		break;
 800e734:	e005      	b.n	800e742 <Receive_Set+0x3e>
	default:
		tx_buffer[0] |= CONTROL_DATA_32BIT;
 800e736:	7b3b      	ldrb	r3, [r7, #12]
 800e738:	f043 0310 	orr.w	r3, r3, #16
 800e73c:	b2db      	uxtb	r3, r3
 800e73e:	733b      	strb	r3, [r7, #12]
		break;
 800e740:	bf00      	nop
	}
	tx_buffer[1] = ((MCF8316C_WRITE_READ_ADDR >> 8) & 0xF) | CONTROL_MEM_PAGE;
 800e742:	2300      	movs	r3, #0
 800e744:	737b      	strb	r3, [r7, #13]
	tx_buffer[2] = MCF8316C_WRITE_READ_ADDR & 0xFF;
 800e746:	23ea      	movs	r3, #234	@ 0xea
 800e748:	73bb      	strb	r3, [r7, #14]
	tx_buffer[3] = MCF8316C_REG_READ_BIT & 0xFF;
 800e74a:	2300      	movs	r3, #0
 800e74c:	73fb      	strb	r3, [r7, #15]
	tx_buffer[4] = (MCF8316C_REG_READ_BIT >> 8) & 0xFF;
 800e74e:	2300      	movs	r3, #0
 800e750:	743b      	strb	r3, [r7, #16]
	tx_buffer[5] = (MCF8316C_REG_READ_BIT >> 16) & 0xFF;
 800e752:	2300      	movs	r3, #0
 800e754:	747b      	strb	r3, [r7, #17]
	tx_buffer[6] = (MCF8316C_REG_READ_BIT >> 24) & 0xFF;
 800e756:	2340      	movs	r3, #64	@ 0x40
 800e758:	74bb      	strb	r3, [r7, #18]

	status = HAL_I2C_Master_Transmit(hi2c, slave_address_8bit, tx_buffer,
 800e75a:	f107 020c 	add.w	r2, r7, #12
 800e75e:	8af9      	ldrh	r1, [r7, #22]
 800e760:	f04f 33ff 	mov.w	r3, #4294967295
 800e764:	9300      	str	r3, [sp, #0]
 800e766:	2307      	movs	r3, #7
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f7f6 faed 	bl	8004d48 <HAL_I2C_Master_Transmit>
 800e76e:	4603      	mov	r3, r0
 800e770:	757b      	strb	r3, [r7, #21]
			sizeof(tx_buffer),
			HAL_MAX_DELAY);
	if (status != HAL_OK) {
 800e772:	7d7b      	ldrb	r3, [r7, #21]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d001      	beq.n	800e77c <Receive_Set+0x78>
		return status;
 800e778:	7d7b      	ldrb	r3, [r7, #21]
 800e77a:	e000      	b.n	800e77e <Receive_Set+0x7a>
	}
	return HAL_OK;
 800e77c:	2300      	movs	r3, #0
}
 800e77e:	4618      	mov	r0, r3
 800e780:	3718      	adds	r7, #24
 800e782:	46bd      	mov	sp, r7
 800e784:	bd80      	pop	{r7, pc}

0800e786 <Transmit_Reg_32BIT>:

HAL_StatusTypeDef Transmit_Reg_32BIT(I2C_HandleTypeDef *hi2c, uint16_t reg_addr,
		uint8_t *pData) {
 800e786:	b580      	push	{r7, lr}
 800e788:	b08a      	sub	sp, #40	@ 0x28
 800e78a:	af02      	add	r7, sp, #8
 800e78c:	60f8      	str	r0, [r7, #12]
 800e78e:	460b      	mov	r3, r1
 800e790:	607a      	str	r2, [r7, #4]
 800e792:	817b      	strh	r3, [r7, #10]

	HAL_StatusTypeDef status;
	uint8_t tx_buffer[7];
	uint16_t slave_address_8bit = MCF8316C_I2C_ADDRESS_7BIT << 1;
 800e794:	2302      	movs	r3, #2
 800e796:	83fb      	strh	r3, [r7, #30]

	tx_buffer[0] = CONTROL_WRITE | CONTROL_CRC | CONTROL_DATA_LEN
 800e798:	2310      	movs	r3, #16
 800e79a:	753b      	strb	r3, [r7, #20]
			| CONTROL_MEM_SEC;
	tx_buffer[1] = ((reg_addr >> 8) & 0xF) | CONTROL_MEM_PAGE;
 800e79c:	897b      	ldrh	r3, [r7, #10]
 800e79e:	0a1b      	lsrs	r3, r3, #8
 800e7a0:	b29b      	uxth	r3, r3
 800e7a2:	b2db      	uxtb	r3, r3
 800e7a4:	f003 030f 	and.w	r3, r3, #15
 800e7a8:	b2db      	uxtb	r3, r3
 800e7aa:	757b      	strb	r3, [r7, #21]
	tx_buffer[2] = reg_addr & 0xFF;
 800e7ac:	897b      	ldrh	r3, [r7, #10]
 800e7ae:	b2db      	uxtb	r3, r3
 800e7b0:	75bb      	strb	r3, [r7, #22]
	tx_buffer[3] = *(pData + 0);
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	781b      	ldrb	r3, [r3, #0]
 800e7b6:	75fb      	strb	r3, [r7, #23]
	tx_buffer[4] = *(pData + 1);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	785b      	ldrb	r3, [r3, #1]
 800e7bc:	763b      	strb	r3, [r7, #24]
	tx_buffer[5] = *(pData + 2);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	789b      	ldrb	r3, [r3, #2]
 800e7c2:	767b      	strb	r3, [r7, #25]
	tx_buffer[6] = *(pData + 3);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	78db      	ldrb	r3, [r3, #3]
 800e7c8:	76bb      	strb	r3, [r7, #26]
	status = HAL_I2C_Master_Transmit(hi2c, slave_address_8bit, tx_buffer,
 800e7ca:	f107 0214 	add.w	r2, r7, #20
 800e7ce:	8bf9      	ldrh	r1, [r7, #30]
 800e7d0:	f04f 33ff 	mov.w	r3, #4294967295
 800e7d4:	9300      	str	r3, [sp, #0]
 800e7d6:	2307      	movs	r3, #7
 800e7d8:	68f8      	ldr	r0, [r7, #12]
 800e7da:	f7f6 fab5 	bl	8004d48 <HAL_I2C_Master_Transmit>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	777b      	strb	r3, [r7, #29]
			sizeof(tx_buffer),
			HAL_MAX_DELAY);
	if (status != HAL_OK) {
 800e7e2:	7f7b      	ldrb	r3, [r7, #29]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d001      	beq.n	800e7ec <Transmit_Reg_32BIT+0x66>
		return status;
 800e7e8:	7f7b      	ldrb	r3, [r7, #29]
 800e7ea:	e000      	b.n	800e7ee <Transmit_Reg_32BIT+0x68>
	}
	return HAL_OK;
 800e7ec:	2300      	movs	r3, #0
}
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	3720      	adds	r7, #32
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}

0800e7f6 <Receive_Reg>:

HAL_StatusTypeDef Receive_Reg(I2C_HandleTypeDef *hi2c, uint16_t reg_addr,
		uint8_t *pData, uint16_t Size) {
 800e7f6:	b580      	push	{r7, lr}
 800e7f8:	b088      	sub	sp, #32
 800e7fa:	af02      	add	r7, sp, #8
 800e7fc:	60f8      	str	r0, [r7, #12]
 800e7fe:	607a      	str	r2, [r7, #4]
 800e800:	461a      	mov	r2, r3
 800e802:	460b      	mov	r3, r1
 800e804:	817b      	strh	r3, [r7, #10]
 800e806:	4613      	mov	r3, r2
 800e808:	813b      	strh	r3, [r7, #8]

	HAL_StatusTypeDef status;
	uint8_t tx_buffer[3];
	uint16_t slave_address_8bit = MCF8316C_I2C_ADDRESS_7BIT << 1;
 800e80a:	2302      	movs	r3, #2
 800e80c:	82fb      	strh	r3, [r7, #22]

	tx_buffer[0] = CONTROL_READ | CONTROL_CRC | CONTROL_DATA_LEN
 800e80e:	2390      	movs	r3, #144	@ 0x90
 800e810:	743b      	strb	r3, [r7, #16]
			| CONTROL_MEM_SEC;
	tx_buffer[1] = ((reg_addr >> 8) & 0xF) | CONTROL_MEM_PAGE;
 800e812:	897b      	ldrh	r3, [r7, #10]
 800e814:	0a1b      	lsrs	r3, r3, #8
 800e816:	b29b      	uxth	r3, r3
 800e818:	b2db      	uxtb	r3, r3
 800e81a:	f003 030f 	and.w	r3, r3, #15
 800e81e:	b2db      	uxtb	r3, r3
 800e820:	747b      	strb	r3, [r7, #17]
	tx_buffer[2] = reg_addr & 0xFF;
 800e822:	897b      	ldrh	r3, [r7, #10]
 800e824:	b2db      	uxtb	r3, r3
 800e826:	74bb      	strb	r3, [r7, #18]

	status = HAL_I2C_Master_Transmit(hi2c, slave_address_8bit, tx_buffer,
 800e828:	f107 0210 	add.w	r2, r7, #16
 800e82c:	8af9      	ldrh	r1, [r7, #22]
 800e82e:	f04f 33ff 	mov.w	r3, #4294967295
 800e832:	9300      	str	r3, [sp, #0]
 800e834:	2303      	movs	r3, #3
 800e836:	68f8      	ldr	r0, [r7, #12]
 800e838:	f7f6 fa86 	bl	8004d48 <HAL_I2C_Master_Transmit>
 800e83c:	4603      	mov	r3, r0
 800e83e:	757b      	strb	r3, [r7, #21]
			sizeof(tx_buffer),
			HAL_MAX_DELAY);
	if (status != HAL_OK) {
 800e840:	7d7b      	ldrb	r3, [r7, #21]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d001      	beq.n	800e84a <Receive_Reg+0x54>
		return status;
 800e846:	7d7b      	ldrb	r3, [r7, #21]
 800e848:	e010      	b.n	800e86c <Receive_Reg+0x76>
	}

	status = HAL_I2C_Master_Receive(hi2c, slave_address_8bit, pData, Size,
 800e84a:	893b      	ldrh	r3, [r7, #8]
 800e84c:	8af9      	ldrh	r1, [r7, #22]
 800e84e:	f04f 32ff 	mov.w	r2, #4294967295
 800e852:	9200      	str	r2, [sp, #0]
 800e854:	687a      	ldr	r2, [r7, #4]
 800e856:	68f8      	ldr	r0, [r7, #12]
 800e858:	f7f6 fb8e 	bl	8004f78 <HAL_I2C_Master_Receive>
 800e85c:	4603      	mov	r3, r0
 800e85e:	757b      	strb	r3, [r7, #21]
	HAL_MAX_DELAY);
	if (status != HAL_OK) {
 800e860:	7d7b      	ldrb	r3, [r7, #21]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d001      	beq.n	800e86a <Receive_Reg+0x74>
		return status;
 800e866:	7d7b      	ldrb	r3, [r7, #21]
 800e868:	e000      	b.n	800e86c <Receive_Reg+0x76>
	}

	return HAL_OK;
 800e86a:	2300      	movs	r3, #0
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	3718      	adds	r7, #24
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}

0800e874 <MCF8316C_Set_EEPROM>:
//		;
//	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin))
//		;
//}

void MCF8316C_Set_EEPROM() {
 800e874:	b580      	push	{r7, lr}
 800e876:	b086      	sub	sp, #24
 800e878:	af00      	add	r7, sp, #0
	uint8_t tx_buffer[4];
	HAL_StatusTypeDef status;
	I2C_HandleTypeDef *hi2c = MCF8316C_I2C_LEFT_CHANNEL;
 800e87a:	4ba1      	ldr	r3, [pc, #644]	@ (800eb00 <MCF8316C_Set_EEPROM+0x28c>)
 800e87c:	617b      	str	r3, [r7, #20]
	uint8_t i = 0;
 800e87e:	2300      	movs	r3, #0
 800e880:	74fb      	strb	r3, [r7, #19]
	uint32_t err_array = 0;
 800e882:	2300      	movs	r3, #0
 800e884:	60fb      	str	r3, [r7, #12]

	for (uint8_t j = 0; j < 2; j++) {
 800e886:	2300      	movs	r3, #0
 800e888:	72fb      	strb	r3, [r7, #11]
 800e88a:	e360      	b.n	800ef4e <MCF8316C_Set_EEPROM+0x6da>
		if (j)
 800e88c:	7afb      	ldrb	r3, [r7, #11]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d001      	beq.n	800e896 <MCF8316C_Set_EEPROM+0x22>
			hi2c = MCF8316C_I2C_RIGHT_CHANNEL;
 800e892:	4b9c      	ldr	r3, [pc, #624]	@ (800eb04 <MCF8316C_Set_EEPROM+0x290>)
 800e894:	617b      	str	r3, [r7, #20]

		for (i = 0; i < 4; i++) {
 800e896:	2300      	movs	r3, #0
 800e898:	74fb      	strb	r3, [r7, #19]
 800e89a:	e00c      	b.n	800e8b6 <MCF8316C_Set_EEPROM+0x42>
			tx_buffer[i] = (ISD_CONFIG_DATA >> (8 * i)) & 0xFF;
 800e89c:	7cfb      	ldrb	r3, [r7, #19]
 800e89e:	00db      	lsls	r3, r3, #3
 800e8a0:	4a99      	ldr	r2, [pc, #612]	@ (800eb08 <MCF8316C_Set_EEPROM+0x294>)
 800e8a2:	411a      	asrs	r2, r3
 800e8a4:	7cfb      	ldrb	r3, [r7, #19]
 800e8a6:	b2d2      	uxtb	r2, r2
 800e8a8:	3318      	adds	r3, #24
 800e8aa:	443b      	add	r3, r7
 800e8ac:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (i = 0; i < 4; i++) {
 800e8b0:	7cfb      	ldrb	r3, [r7, #19]
 800e8b2:	3301      	adds	r3, #1
 800e8b4:	74fb      	strb	r3, [r7, #19]
 800e8b6:	7cfb      	ldrb	r3, [r7, #19]
 800e8b8:	2b03      	cmp	r3, #3
 800e8ba:	d9ef      	bls.n	800e89c <MCF8316C_Set_EEPROM+0x28>
		}
		status = Transmit_Reg_32BIT(hi2c, ISD_CONFIG_ADDR, tx_buffer);
 800e8bc:	1d3b      	adds	r3, r7, #4
 800e8be:	461a      	mov	r2, r3
 800e8c0:	2180      	movs	r1, #128	@ 0x80
 800e8c2:	6978      	ldr	r0, [r7, #20]
 800e8c4:	f7ff ff5f 	bl	800e786 <Transmit_Reg_32BIT>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	72bb      	strb	r3, [r7, #10]
		if (status) {
 800e8cc:	7abb      	ldrb	r3, [r7, #10]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d003      	beq.n	800e8da <MCF8316C_Set_EEPROM+0x66>
			err_array |= 0x1 << 0;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	f043 0301 	orr.w	r3, r3, #1
 800e8d8:	60fb      	str	r3, [r7, #12]
		}

		for (i = 0; i < 4; i++) {
 800e8da:	2300      	movs	r3, #0
 800e8dc:	74fb      	strb	r3, [r7, #19]
 800e8de:	e00c      	b.n	800e8fa <MCF8316C_Set_EEPROM+0x86>
			tx_buffer[i] = (MOTOR_STARTUP1_DATA >> (8 * i)) & 0xFF;
 800e8e0:	7cfb      	ldrb	r3, [r7, #19]
 800e8e2:	00db      	lsls	r3, r3, #3
 800e8e4:	4a89      	ldr	r2, [pc, #548]	@ (800eb0c <MCF8316C_Set_EEPROM+0x298>)
 800e8e6:	411a      	asrs	r2, r3
 800e8e8:	7cfb      	ldrb	r3, [r7, #19]
 800e8ea:	b2d2      	uxtb	r2, r2
 800e8ec:	3318      	adds	r3, #24
 800e8ee:	443b      	add	r3, r7
 800e8f0:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (i = 0; i < 4; i++) {
 800e8f4:	7cfb      	ldrb	r3, [r7, #19]
 800e8f6:	3301      	adds	r3, #1
 800e8f8:	74fb      	strb	r3, [r7, #19]
 800e8fa:	7cfb      	ldrb	r3, [r7, #19]
 800e8fc:	2b03      	cmp	r3, #3
 800e8fe:	d9ef      	bls.n	800e8e0 <MCF8316C_Set_EEPROM+0x6c>
		}
		status = Transmit_Reg_32BIT(hi2c, MOTOR_STARTUP1_ADDR, tx_buffer);
 800e900:	1d3b      	adds	r3, r7, #4
 800e902:	461a      	mov	r2, r3
 800e904:	2184      	movs	r1, #132	@ 0x84
 800e906:	6978      	ldr	r0, [r7, #20]
 800e908:	f7ff ff3d 	bl	800e786 <Transmit_Reg_32BIT>
 800e90c:	4603      	mov	r3, r0
 800e90e:	72bb      	strb	r3, [r7, #10]
		if (status) {
 800e910:	7abb      	ldrb	r3, [r7, #10]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d003      	beq.n	800e91e <MCF8316C_Set_EEPROM+0xaa>
			err_array |= 0x1 << 1;
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	f043 0302 	orr.w	r3, r3, #2
 800e91c:	60fb      	str	r3, [r7, #12]
		}

		for (i = 0; i < 4; i++) {
 800e91e:	2300      	movs	r3, #0
 800e920:	74fb      	strb	r3, [r7, #19]
 800e922:	e00c      	b.n	800e93e <MCF8316C_Set_EEPROM+0xca>
			tx_buffer[i] = (MOTOR_STARTUP2_DATA >> (8 * i)) & 0xFF;
 800e924:	7cfb      	ldrb	r3, [r7, #19]
 800e926:	00db      	lsls	r3, r3, #3
 800e928:	4a79      	ldr	r2, [pc, #484]	@ (800eb10 <MCF8316C_Set_EEPROM+0x29c>)
 800e92a:	411a      	asrs	r2, r3
 800e92c:	7cfb      	ldrb	r3, [r7, #19]
 800e92e:	b2d2      	uxtb	r2, r2
 800e930:	3318      	adds	r3, #24
 800e932:	443b      	add	r3, r7
 800e934:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (i = 0; i < 4; i++) {
 800e938:	7cfb      	ldrb	r3, [r7, #19]
 800e93a:	3301      	adds	r3, #1
 800e93c:	74fb      	strb	r3, [r7, #19]
 800e93e:	7cfb      	ldrb	r3, [r7, #19]
 800e940:	2b03      	cmp	r3, #3
 800e942:	d9ef      	bls.n	800e924 <MCF8316C_Set_EEPROM+0xb0>
		}
		status = Transmit_Reg_32BIT(hi2c, MOTOR_STARTUP2_ADDR, tx_buffer);
 800e944:	1d3b      	adds	r3, r7, #4
 800e946:	461a      	mov	r2, r3
 800e948:	2186      	movs	r1, #134	@ 0x86
 800e94a:	6978      	ldr	r0, [r7, #20]
 800e94c:	f7ff ff1b 	bl	800e786 <Transmit_Reg_32BIT>
 800e950:	4603      	mov	r3, r0
 800e952:	72bb      	strb	r3, [r7, #10]
		if (status) {
 800e954:	7abb      	ldrb	r3, [r7, #10]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d003      	beq.n	800e962 <MCF8316C_Set_EEPROM+0xee>
			err_array |= 0x1 << 2;
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	f043 0304 	orr.w	r3, r3, #4
 800e960:	60fb      	str	r3, [r7, #12]
		}

		for (i = 0; i < 4; i++) {
 800e962:	2300      	movs	r3, #0
 800e964:	74fb      	strb	r3, [r7, #19]
 800e966:	e00c      	b.n	800e982 <MCF8316C_Set_EEPROM+0x10e>
			tx_buffer[i] = (CLOSED_LOOP1_DATA >> (8 * i)) & 0xFF;
 800e968:	7cfb      	ldrb	r3, [r7, #19]
 800e96a:	00db      	lsls	r3, r3, #3
 800e96c:	4a69      	ldr	r2, [pc, #420]	@ (800eb14 <MCF8316C_Set_EEPROM+0x2a0>)
 800e96e:	411a      	asrs	r2, r3
 800e970:	7cfb      	ldrb	r3, [r7, #19]
 800e972:	b2d2      	uxtb	r2, r2
 800e974:	3318      	adds	r3, #24
 800e976:	443b      	add	r3, r7
 800e978:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (i = 0; i < 4; i++) {
 800e97c:	7cfb      	ldrb	r3, [r7, #19]
 800e97e:	3301      	adds	r3, #1
 800e980:	74fb      	strb	r3, [r7, #19]
 800e982:	7cfb      	ldrb	r3, [r7, #19]
 800e984:	2b03      	cmp	r3, #3
 800e986:	d9ef      	bls.n	800e968 <MCF8316C_Set_EEPROM+0xf4>
		}
		status = Transmit_Reg_32BIT(hi2c, CLOSED_LOOP1_ADDR, tx_buffer);
 800e988:	1d3b      	adds	r3, r7, #4
 800e98a:	461a      	mov	r2, r3
 800e98c:	2188      	movs	r1, #136	@ 0x88
 800e98e:	6978      	ldr	r0, [r7, #20]
 800e990:	f7ff fef9 	bl	800e786 <Transmit_Reg_32BIT>
 800e994:	4603      	mov	r3, r0
 800e996:	72bb      	strb	r3, [r7, #10]
		if (status) {
 800e998:	7abb      	ldrb	r3, [r7, #10]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d003      	beq.n	800e9a6 <MCF8316C_Set_EEPROM+0x132>
			err_array |= 0x1 << 3;
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	f043 0308 	orr.w	r3, r3, #8
 800e9a4:	60fb      	str	r3, [r7, #12]
		}

		for (i = 0; i < 4; i++) {
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	74fb      	strb	r3, [r7, #19]
 800e9aa:	e00c      	b.n	800e9c6 <MCF8316C_Set_EEPROM+0x152>
			tx_buffer[i] = (CLOSED_LOOP2_DATA >> (8 * i)) & 0xFF;
 800e9ac:	7cfb      	ldrb	r3, [r7, #19]
 800e9ae:	00db      	lsls	r3, r3, #3
 800e9b0:	4a59      	ldr	r2, [pc, #356]	@ (800eb18 <MCF8316C_Set_EEPROM+0x2a4>)
 800e9b2:	411a      	asrs	r2, r3
 800e9b4:	7cfb      	ldrb	r3, [r7, #19]
 800e9b6:	b2d2      	uxtb	r2, r2
 800e9b8:	3318      	adds	r3, #24
 800e9ba:	443b      	add	r3, r7
 800e9bc:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (i = 0; i < 4; i++) {
 800e9c0:	7cfb      	ldrb	r3, [r7, #19]
 800e9c2:	3301      	adds	r3, #1
 800e9c4:	74fb      	strb	r3, [r7, #19]
 800e9c6:	7cfb      	ldrb	r3, [r7, #19]
 800e9c8:	2b03      	cmp	r3, #3
 800e9ca:	d9ef      	bls.n	800e9ac <MCF8316C_Set_EEPROM+0x138>
		}
		status = Transmit_Reg_32BIT(hi2c, CLOSED_LOOP2_ADDR, tx_buffer);
 800e9cc:	1d3b      	adds	r3, r7, #4
 800e9ce:	461a      	mov	r2, r3
 800e9d0:	218a      	movs	r1, #138	@ 0x8a
 800e9d2:	6978      	ldr	r0, [r7, #20]
 800e9d4:	f7ff fed7 	bl	800e786 <Transmit_Reg_32BIT>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	72bb      	strb	r3, [r7, #10]
		if (status) {
 800e9dc:	7abb      	ldrb	r3, [r7, #10]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d003      	beq.n	800e9ea <MCF8316C_Set_EEPROM+0x176>
			err_array |= 0x1 << 4;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	f043 0310 	orr.w	r3, r3, #16
 800e9e8:	60fb      	str	r3, [r7, #12]
		}

		for (i = 0; i < 4; i++) {
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	74fb      	strb	r3, [r7, #19]
 800e9ee:	e00c      	b.n	800ea0a <MCF8316C_Set_EEPROM+0x196>
			tx_buffer[i] = (CLOSED_LOOP3_DATA >> (8 * i)) & 0xFF;
 800e9f0:	7cfb      	ldrb	r3, [r7, #19]
 800e9f2:	00db      	lsls	r3, r3, #3
 800e9f4:	4a49      	ldr	r2, [pc, #292]	@ (800eb1c <MCF8316C_Set_EEPROM+0x2a8>)
 800e9f6:	411a      	asrs	r2, r3
 800e9f8:	7cfb      	ldrb	r3, [r7, #19]
 800e9fa:	b2d2      	uxtb	r2, r2
 800e9fc:	3318      	adds	r3, #24
 800e9fe:	443b      	add	r3, r7
 800ea00:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (i = 0; i < 4; i++) {
 800ea04:	7cfb      	ldrb	r3, [r7, #19]
 800ea06:	3301      	adds	r3, #1
 800ea08:	74fb      	strb	r3, [r7, #19]
 800ea0a:	7cfb      	ldrb	r3, [r7, #19]
 800ea0c:	2b03      	cmp	r3, #3
 800ea0e:	d9ef      	bls.n	800e9f0 <MCF8316C_Set_EEPROM+0x17c>
		}
		status = Transmit_Reg_32BIT(hi2c, CLOSED_LOOP3_ADDR, tx_buffer);
 800ea10:	1d3b      	adds	r3, r7, #4
 800ea12:	461a      	mov	r2, r3
 800ea14:	218c      	movs	r1, #140	@ 0x8c
 800ea16:	6978      	ldr	r0, [r7, #20]
 800ea18:	f7ff feb5 	bl	800e786 <Transmit_Reg_32BIT>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	72bb      	strb	r3, [r7, #10]
		if (status) {
 800ea20:	7abb      	ldrb	r3, [r7, #10]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d003      	beq.n	800ea2e <MCF8316C_Set_EEPROM+0x1ba>
			err_array |= 0x1 << 5;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	f043 0320 	orr.w	r3, r3, #32
 800ea2c:	60fb      	str	r3, [r7, #12]
		}

		for (i = 0; i < 4; i++) {
 800ea2e:	2300      	movs	r3, #0
 800ea30:	74fb      	strb	r3, [r7, #19]
 800ea32:	e00c      	b.n	800ea4e <MCF8316C_Set_EEPROM+0x1da>
			tx_buffer[i] = (CLOSED_LOOP4_DATA >> (8 * i)) & 0xFF;
 800ea34:	7cfb      	ldrb	r3, [r7, #19]
 800ea36:	00db      	lsls	r3, r3, #3
 800ea38:	4a39      	ldr	r2, [pc, #228]	@ (800eb20 <MCF8316C_Set_EEPROM+0x2ac>)
 800ea3a:	411a      	asrs	r2, r3
 800ea3c:	7cfb      	ldrb	r3, [r7, #19]
 800ea3e:	b2d2      	uxtb	r2, r2
 800ea40:	3318      	adds	r3, #24
 800ea42:	443b      	add	r3, r7
 800ea44:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (i = 0; i < 4; i++) {
 800ea48:	7cfb      	ldrb	r3, [r7, #19]
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	74fb      	strb	r3, [r7, #19]
 800ea4e:	7cfb      	ldrb	r3, [r7, #19]
 800ea50:	2b03      	cmp	r3, #3
 800ea52:	d9ef      	bls.n	800ea34 <MCF8316C_Set_EEPROM+0x1c0>
		}
		status = Transmit_Reg_32BIT(hi2c, CLOSED_LOOP4_ADDR, tx_buffer);
 800ea54:	1d3b      	adds	r3, r7, #4
 800ea56:	461a      	mov	r2, r3
 800ea58:	218e      	movs	r1, #142	@ 0x8e
 800ea5a:	6978      	ldr	r0, [r7, #20]
 800ea5c:	f7ff fe93 	bl	800e786 <Transmit_Reg_32BIT>
 800ea60:	4603      	mov	r3, r0
 800ea62:	72bb      	strb	r3, [r7, #10]
		if (status) {
 800ea64:	7abb      	ldrb	r3, [r7, #10]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d003      	beq.n	800ea72 <MCF8316C_Set_EEPROM+0x1fe>
			err_array |= 0x1 << 6;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea70:	60fb      	str	r3, [r7, #12]
		}

		for (i = 0; i < 4; i++) {
 800ea72:	2300      	movs	r3, #0
 800ea74:	74fb      	strb	r3, [r7, #19]
 800ea76:	e00c      	b.n	800ea92 <MCF8316C_Set_EEPROM+0x21e>
			tx_buffer[i] = (REF_PROFILE1_DATA >> (8 * i)) & 0xFF;
 800ea78:	7cfb      	ldrb	r3, [r7, #19]
 800ea7a:	00db      	lsls	r3, r3, #3
 800ea7c:	4a29      	ldr	r2, [pc, #164]	@ (800eb24 <MCF8316C_Set_EEPROM+0x2b0>)
 800ea7e:	411a      	asrs	r2, r3
 800ea80:	7cfb      	ldrb	r3, [r7, #19]
 800ea82:	b2d2      	uxtb	r2, r2
 800ea84:	3318      	adds	r3, #24
 800ea86:	443b      	add	r3, r7
 800ea88:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (i = 0; i < 4; i++) {
 800ea8c:	7cfb      	ldrb	r3, [r7, #19]
 800ea8e:	3301      	adds	r3, #1
 800ea90:	74fb      	strb	r3, [r7, #19]
 800ea92:	7cfb      	ldrb	r3, [r7, #19]
 800ea94:	2b03      	cmp	r3, #3
 800ea96:	d9ef      	bls.n	800ea78 <MCF8316C_Set_EEPROM+0x204>
		}
		status = Transmit_Reg_32BIT(hi2c, REF_PROFILES1_ADDR, tx_buffer);
 800ea98:	1d3b      	adds	r3, r7, #4
 800ea9a:	461a      	mov	r2, r3
 800ea9c:	2194      	movs	r1, #148	@ 0x94
 800ea9e:	6978      	ldr	r0, [r7, #20]
 800eaa0:	f7ff fe71 	bl	800e786 <Transmit_Reg_32BIT>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	72bb      	strb	r3, [r7, #10]
		if (status) {
 800eaa8:	7abb      	ldrb	r3, [r7, #10]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d003      	beq.n	800eab6 <MCF8316C_Set_EEPROM+0x242>
			err_array |= 0x1 << 7;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eab4:	60fb      	str	r3, [r7, #12]
		}

		for (i = 0; i < 4; i++) {
 800eab6:	2300      	movs	r3, #0
 800eab8:	74fb      	strb	r3, [r7, #19]
 800eaba:	e00c      	b.n	800ead6 <MCF8316C_Set_EEPROM+0x262>
			tx_buffer[i] = (REF_PROFILE2_DATA >> (8 * i)) & 0xFF;
 800eabc:	7cfb      	ldrb	r3, [r7, #19]
 800eabe:	00db      	lsls	r3, r3, #3
 800eac0:	4a19      	ldr	r2, [pc, #100]	@ (800eb28 <MCF8316C_Set_EEPROM+0x2b4>)
 800eac2:	411a      	asrs	r2, r3
 800eac4:	7cfb      	ldrb	r3, [r7, #19]
 800eac6:	b2d2      	uxtb	r2, r2
 800eac8:	3318      	adds	r3, #24
 800eaca:	443b      	add	r3, r7
 800eacc:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (i = 0; i < 4; i++) {
 800ead0:	7cfb      	ldrb	r3, [r7, #19]
 800ead2:	3301      	adds	r3, #1
 800ead4:	74fb      	strb	r3, [r7, #19]
 800ead6:	7cfb      	ldrb	r3, [r7, #19]
 800ead8:	2b03      	cmp	r3, #3
 800eada:	d9ef      	bls.n	800eabc <MCF8316C_Set_EEPROM+0x248>
		}
		status = Transmit_Reg_32BIT(hi2c, REF_PROFILES2_ADDR, tx_buffer);
 800eadc:	1d3b      	adds	r3, r7, #4
 800eade:	461a      	mov	r2, r3
 800eae0:	2196      	movs	r1, #150	@ 0x96
 800eae2:	6978      	ldr	r0, [r7, #20]
 800eae4:	f7ff fe4f 	bl	800e786 <Transmit_Reg_32BIT>
 800eae8:	4603      	mov	r3, r0
 800eaea:	72bb      	strb	r3, [r7, #10]
		if (status) {
 800eaec:	7abb      	ldrb	r3, [r7, #10]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d003      	beq.n	800eafa <MCF8316C_Set_EEPROM+0x286>
			err_array |= 0x1 << 8;
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800eaf8:	60fb      	str	r3, [r7, #12]
		}

		for (i = 0; i < 4; i++) {
 800eafa:	2300      	movs	r3, #0
 800eafc:	74fb      	strb	r3, [r7, #19]
 800eafe:	e022      	b.n	800eb46 <MCF8316C_Set_EEPROM+0x2d2>
 800eb00:	24000c38 	.word	0x24000c38
 800eb04:	24000c8c 	.word	0x24000c8c
 800eb08:	64738ca0 	.word	0x64738ca0
 800eb0c:	156807d0 	.word	0x156807d0
 800eb10:	23066004 	.word	0x23066004
 800eb14:	51318fb8 	.word	0x51318fb8
 800eb18:	0badbd00 	.word	0x0badbd00
 800eb1c:	4d8007f8 	.word	0x4d8007f8
 800eb20:	040012fc 	.word	0x040012fc
 800eb24:	00280044 	.word	0x00280044
 800eb28:	0406080a 	.word	0x0406080a
			tx_buffer[i] = (REF_PROFILE3_DATA >> (8 * i)) & 0xFF;
 800eb2c:	7cfb      	ldrb	r3, [r7, #19]
 800eb2e:	00db      	lsls	r3, r3, #3
 800eb30:	4aa9      	ldr	r2, [pc, #676]	@ (800edd8 <MCF8316C_Set_EEPROM+0x564>)
 800eb32:	411a      	asrs	r2, r3
 800eb34:	7cfb      	ldrb	r3, [r7, #19]
 800eb36:	b2d2      	uxtb	r2, r2
 800eb38:	3318      	adds	r3, #24
 800eb3a:	443b      	add	r3, r7
 800eb3c:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (i = 0; i < 4; i++) {
 800eb40:	7cfb      	ldrb	r3, [r7, #19]
 800eb42:	3301      	adds	r3, #1
 800eb44:	74fb      	strb	r3, [r7, #19]
 800eb46:	7cfb      	ldrb	r3, [r7, #19]
 800eb48:	2b03      	cmp	r3, #3
 800eb4a:	d9ef      	bls.n	800eb2c <MCF8316C_Set_EEPROM+0x2b8>
		}
		status = Transmit_Reg_32BIT(hi2c, REF_PROFILES3_ADDR, tx_buffer);
 800eb4c:	1d3b      	adds	r3, r7, #4
 800eb4e:	461a      	mov	r2, r3
 800eb50:	2198      	movs	r1, #152	@ 0x98
 800eb52:	6978      	ldr	r0, [r7, #20]
 800eb54:	f7ff fe17 	bl	800e786 <Transmit_Reg_32BIT>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	72bb      	strb	r3, [r7, #10]
		if (status) {
 800eb5c:	7abb      	ldrb	r3, [r7, #10]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d003      	beq.n	800eb6a <MCF8316C_Set_EEPROM+0x2f6>
			err_array |= 0x1 << 9;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800eb68:	60fb      	str	r3, [r7, #12]
		}

		for (i = 0; i < 4; i++) {
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	74fb      	strb	r3, [r7, #19]
 800eb6e:	e00c      	b.n	800eb8a <MCF8316C_Set_EEPROM+0x316>
			tx_buffer[i] = (REF_PROFILE4_DATA >> (8 * i)) & 0xFF;
 800eb70:	7cfb      	ldrb	r3, [r7, #19]
 800eb72:	00db      	lsls	r3, r3, #3
 800eb74:	4a99      	ldr	r2, [pc, #612]	@ (800eddc <MCF8316C_Set_EEPROM+0x568>)
 800eb76:	411a      	asrs	r2, r3
 800eb78:	7cfb      	ldrb	r3, [r7, #19]
 800eb7a:	b2d2      	uxtb	r2, r2
 800eb7c:	3318      	adds	r3, #24
 800eb7e:	443b      	add	r3, r7
 800eb80:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (i = 0; i < 4; i++) {
 800eb84:	7cfb      	ldrb	r3, [r7, #19]
 800eb86:	3301      	adds	r3, #1
 800eb88:	74fb      	strb	r3, [r7, #19]
 800eb8a:	7cfb      	ldrb	r3, [r7, #19]
 800eb8c:	2b03      	cmp	r3, #3
 800eb8e:	d9ef      	bls.n	800eb70 <MCF8316C_Set_EEPROM+0x2fc>
		}
		status = Transmit_Reg_32BIT(hi2c, REF_PROFILES4_ADDR, tx_buffer);
 800eb90:	1d3b      	adds	r3, r7, #4
 800eb92:	461a      	mov	r2, r3
 800eb94:	219a      	movs	r1, #154	@ 0x9a
 800eb96:	6978      	ldr	r0, [r7, #20]
 800eb98:	f7ff fdf5 	bl	800e786 <Transmit_Reg_32BIT>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	72bb      	strb	r3, [r7, #10]
		if (status) {
 800eba0:	7abb      	ldrb	r3, [r7, #10]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d003      	beq.n	800ebae <MCF8316C_Set_EEPROM+0x33a>
			err_array |= 0x1 << 10;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ebac:	60fb      	str	r3, [r7, #12]
		}

		for (i = 0; i < 4; i++) {
 800ebae:	2300      	movs	r3, #0
 800ebb0:	74fb      	strb	r3, [r7, #19]
 800ebb2:	e00c      	b.n	800ebce <MCF8316C_Set_EEPROM+0x35a>
			tx_buffer[i] = (REF_PROFILE5_DATA >> (8 * i)) & 0xFF;
 800ebb4:	7cfb      	ldrb	r3, [r7, #19]
 800ebb6:	00db      	lsls	r3, r3, #3
 800ebb8:	4a89      	ldr	r2, [pc, #548]	@ (800ede0 <MCF8316C_Set_EEPROM+0x56c>)
 800ebba:	411a      	asrs	r2, r3
 800ebbc:	7cfb      	ldrb	r3, [r7, #19]
 800ebbe:	b2d2      	uxtb	r2, r2
 800ebc0:	3318      	adds	r3, #24
 800ebc2:	443b      	add	r3, r7
 800ebc4:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (i = 0; i < 4; i++) {
 800ebc8:	7cfb      	ldrb	r3, [r7, #19]
 800ebca:	3301      	adds	r3, #1
 800ebcc:	74fb      	strb	r3, [r7, #19]
 800ebce:	7cfb      	ldrb	r3, [r7, #19]
 800ebd0:	2b03      	cmp	r3, #3
 800ebd2:	d9ef      	bls.n	800ebb4 <MCF8316C_Set_EEPROM+0x340>
		}
		status = Transmit_Reg_32BIT(hi2c, REF_PROFILES5_ADDR, tx_buffer);
 800ebd4:	1d3b      	adds	r3, r7, #4
 800ebd6:	461a      	mov	r2, r3
 800ebd8:	219c      	movs	r1, #156	@ 0x9c
 800ebda:	6978      	ldr	r0, [r7, #20]
 800ebdc:	f7ff fdd3 	bl	800e786 <Transmit_Reg_32BIT>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	72bb      	strb	r3, [r7, #10]
		if (status) {
 800ebe4:	7abb      	ldrb	r3, [r7, #10]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d003      	beq.n	800ebf2 <MCF8316C_Set_EEPROM+0x37e>
			err_array |= 0x1 << 11;
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800ebf0:	60fb      	str	r3, [r7, #12]
		}

		for (i = 0; i < 4; i++) {
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	74fb      	strb	r3, [r7, #19]
 800ebf6:	e00d      	b.n	800ec14 <MCF8316C_Set_EEPROM+0x3a0>
			tx_buffer[i] = (REF_PROFILE6_DATA >> (8 * i)) & 0xFF;
 800ebf8:	7cfb      	ldrb	r3, [r7, #19]
 800ebfa:	00db      	lsls	r3, r3, #3
 800ebfc:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 800ec00:	411a      	asrs	r2, r3
 800ec02:	7cfb      	ldrb	r3, [r7, #19]
 800ec04:	b2d2      	uxtb	r2, r2
 800ec06:	3318      	adds	r3, #24
 800ec08:	443b      	add	r3, r7
 800ec0a:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (i = 0; i < 4; i++) {
 800ec0e:	7cfb      	ldrb	r3, [r7, #19]
 800ec10:	3301      	adds	r3, #1
 800ec12:	74fb      	strb	r3, [r7, #19]
 800ec14:	7cfb      	ldrb	r3, [r7, #19]
 800ec16:	2b03      	cmp	r3, #3
 800ec18:	d9ee      	bls.n	800ebf8 <MCF8316C_Set_EEPROM+0x384>
		}
		status = Transmit_Reg_32BIT(hi2c, REF_PROFILES6_ADDR, tx_buffer);
 800ec1a:	1d3b      	adds	r3, r7, #4
 800ec1c:	461a      	mov	r2, r3
 800ec1e:	219e      	movs	r1, #158	@ 0x9e
 800ec20:	6978      	ldr	r0, [r7, #20]
 800ec22:	f7ff fdb0 	bl	800e786 <Transmit_Reg_32BIT>
 800ec26:	4603      	mov	r3, r0
 800ec28:	72bb      	strb	r3, [r7, #10]
		if (status) {
 800ec2a:	7abb      	ldrb	r3, [r7, #10]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d003      	beq.n	800ec38 <MCF8316C_Set_EEPROM+0x3c4>
			err_array |= 0x1 << 12;
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ec36:	60fb      	str	r3, [r7, #12]
		}

		for (i = 0; i < 4; i++) {
 800ec38:	2300      	movs	r3, #0
 800ec3a:	74fb      	strb	r3, [r7, #19]
 800ec3c:	e00c      	b.n	800ec58 <MCF8316C_Set_EEPROM+0x3e4>
			tx_buffer[i] = (FAULT_CONFIG1_DATA >> (8 * i)) & 0xFF;
 800ec3e:	7cfb      	ldrb	r3, [r7, #19]
 800ec40:	00db      	lsls	r3, r3, #3
 800ec42:	4a68      	ldr	r2, [pc, #416]	@ (800ede4 <MCF8316C_Set_EEPROM+0x570>)
 800ec44:	411a      	asrs	r2, r3
 800ec46:	7cfb      	ldrb	r3, [r7, #19]
 800ec48:	b2d2      	uxtb	r2, r2
 800ec4a:	3318      	adds	r3, #24
 800ec4c:	443b      	add	r3, r7
 800ec4e:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (i = 0; i < 4; i++) {
 800ec52:	7cfb      	ldrb	r3, [r7, #19]
 800ec54:	3301      	adds	r3, #1
 800ec56:	74fb      	strb	r3, [r7, #19]
 800ec58:	7cfb      	ldrb	r3, [r7, #19]
 800ec5a:	2b03      	cmp	r3, #3
 800ec5c:	d9ef      	bls.n	800ec3e <MCF8316C_Set_EEPROM+0x3ca>
		}
		status = Transmit_Reg_32BIT(hi2c, FAULT_CONFIG1_ADDR, tx_buffer);
 800ec5e:	1d3b      	adds	r3, r7, #4
 800ec60:	461a      	mov	r2, r3
 800ec62:	2190      	movs	r1, #144	@ 0x90
 800ec64:	6978      	ldr	r0, [r7, #20]
 800ec66:	f7ff fd8e 	bl	800e786 <Transmit_Reg_32BIT>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	72bb      	strb	r3, [r7, #10]
		if (status) {
 800ec6e:	7abb      	ldrb	r3, [r7, #10]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d003      	beq.n	800ec7c <MCF8316C_Set_EEPROM+0x408>
			err_array |= 0x1 << 13;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800ec7a:	60fb      	str	r3, [r7, #12]
		}

		for (i = 0; i < 4; i++) {
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	74fb      	strb	r3, [r7, #19]
 800ec80:	e00c      	b.n	800ec9c <MCF8316C_Set_EEPROM+0x428>
			tx_buffer[i] = (FAULT_CONFIG2_DATA >> (8 * i)) & 0xFF;
 800ec82:	7cfb      	ldrb	r3, [r7, #19]
 800ec84:	00db      	lsls	r3, r3, #3
 800ec86:	4a58      	ldr	r2, [pc, #352]	@ (800ede8 <MCF8316C_Set_EEPROM+0x574>)
 800ec88:	411a      	asrs	r2, r3
 800ec8a:	7cfb      	ldrb	r3, [r7, #19]
 800ec8c:	b2d2      	uxtb	r2, r2
 800ec8e:	3318      	adds	r3, #24
 800ec90:	443b      	add	r3, r7
 800ec92:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (i = 0; i < 4; i++) {
 800ec96:	7cfb      	ldrb	r3, [r7, #19]
 800ec98:	3301      	adds	r3, #1
 800ec9a:	74fb      	strb	r3, [r7, #19]
 800ec9c:	7cfb      	ldrb	r3, [r7, #19]
 800ec9e:	2b03      	cmp	r3, #3
 800eca0:	d9ef      	bls.n	800ec82 <MCF8316C_Set_EEPROM+0x40e>
		}
		status = Transmit_Reg_32BIT(hi2c, FAULT_CONFIG2_ADDR, tx_buffer);
 800eca2:	1d3b      	adds	r3, r7, #4
 800eca4:	461a      	mov	r2, r3
 800eca6:	2192      	movs	r1, #146	@ 0x92
 800eca8:	6978      	ldr	r0, [r7, #20]
 800ecaa:	f7ff fd6c 	bl	800e786 <Transmit_Reg_32BIT>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	72bb      	strb	r3, [r7, #10]
		if (status) {
 800ecb2:	7abb      	ldrb	r3, [r7, #10]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d003      	beq.n	800ecc0 <MCF8316C_Set_EEPROM+0x44c>
			err_array |= 0x1 << 14;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ecbe:	60fb      	str	r3, [r7, #12]
		}

		for (i = 0; i < 4; i++) {
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	74fb      	strb	r3, [r7, #19]
 800ecc4:	e00d      	b.n	800ece2 <MCF8316C_Set_EEPROM+0x46e>
			tx_buffer[i] = (PIN_CONFIG_DATA >> (8 * i)) & 0xFF;
 800ecc6:	7cfb      	ldrb	r3, [r7, #19]
 800ecc8:	00db      	lsls	r3, r3, #3
 800ecca:	f240 3201 	movw	r2, #769	@ 0x301
 800ecce:	411a      	asrs	r2, r3
 800ecd0:	7cfb      	ldrb	r3, [r7, #19]
 800ecd2:	b2d2      	uxtb	r2, r2
 800ecd4:	3318      	adds	r3, #24
 800ecd6:	443b      	add	r3, r7
 800ecd8:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (i = 0; i < 4; i++) {
 800ecdc:	7cfb      	ldrb	r3, [r7, #19]
 800ecde:	3301      	adds	r3, #1
 800ece0:	74fb      	strb	r3, [r7, #19]
 800ece2:	7cfb      	ldrb	r3, [r7, #19]
 800ece4:	2b03      	cmp	r3, #3
 800ece6:	d9ee      	bls.n	800ecc6 <MCF8316C_Set_EEPROM+0x452>
		}
		status = Transmit_Reg_32BIT(hi2c, PIN_CONFIG_ADDR, tx_buffer);
 800ece8:	1d3b      	adds	r3, r7, #4
 800ecea:	461a      	mov	r2, r3
 800ecec:	21a4      	movs	r1, #164	@ 0xa4
 800ecee:	6978      	ldr	r0, [r7, #20]
 800ecf0:	f7ff fd49 	bl	800e786 <Transmit_Reg_32BIT>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	72bb      	strb	r3, [r7, #10]
		if (status) {
 800ecf8:	7abb      	ldrb	r3, [r7, #10]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d003      	beq.n	800ed06 <MCF8316C_Set_EEPROM+0x492>
			err_array |= 0x1 << 15;
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ed04:	60fb      	str	r3, [r7, #12]
		}

		for (i = 0; i < 4; i++) {
 800ed06:	2300      	movs	r3, #0
 800ed08:	74fb      	strb	r3, [r7, #19]
 800ed0a:	e00c      	b.n	800ed26 <MCF8316C_Set_EEPROM+0x4b2>
			tx_buffer[i] = (DEVICE_CONFIG1_DATA >> (8 * i)) & 0xFF;
 800ed0c:	7cfb      	ldrb	r3, [r7, #19]
 800ed0e:	00db      	lsls	r3, r3, #3
 800ed10:	4a36      	ldr	r2, [pc, #216]	@ (800edec <MCF8316C_Set_EEPROM+0x578>)
 800ed12:	411a      	asrs	r2, r3
 800ed14:	7cfb      	ldrb	r3, [r7, #19]
 800ed16:	b2d2      	uxtb	r2, r2
 800ed18:	3318      	adds	r3, #24
 800ed1a:	443b      	add	r3, r7
 800ed1c:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (i = 0; i < 4; i++) {
 800ed20:	7cfb      	ldrb	r3, [r7, #19]
 800ed22:	3301      	adds	r3, #1
 800ed24:	74fb      	strb	r3, [r7, #19]
 800ed26:	7cfb      	ldrb	r3, [r7, #19]
 800ed28:	2b03      	cmp	r3, #3
 800ed2a:	d9ef      	bls.n	800ed0c <MCF8316C_Set_EEPROM+0x498>
		}
		status = Transmit_Reg_32BIT(hi2c, DEVICE_CONFIG1_ADDR, tx_buffer);
 800ed2c:	1d3b      	adds	r3, r7, #4
 800ed2e:	461a      	mov	r2, r3
 800ed30:	21a6      	movs	r1, #166	@ 0xa6
 800ed32:	6978      	ldr	r0, [r7, #20]
 800ed34:	f7ff fd27 	bl	800e786 <Transmit_Reg_32BIT>
 800ed38:	4603      	mov	r3, r0
 800ed3a:	72bb      	strb	r3, [r7, #10]
		if (status) {
 800ed3c:	7abb      	ldrb	r3, [r7, #10]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d003      	beq.n	800ed4a <MCF8316C_Set_EEPROM+0x4d6>
			err_array |= 0x1 << 16;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ed48:	60fb      	str	r3, [r7, #12]
		}

		for (i = 0; i < 4; i++) {
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	74fb      	strb	r3, [r7, #19]
 800ed4e:	e00c      	b.n	800ed6a <MCF8316C_Set_EEPROM+0x4f6>
			tx_buffer[i] = (DEVICE_CONFIG2_DATA >> (8 * i)) & 0xFF;
 800ed50:	7cfb      	ldrb	r3, [r7, #19]
 800ed52:	00db      	lsls	r3, r3, #3
 800ed54:	4a26      	ldr	r2, [pc, #152]	@ (800edf0 <MCF8316C_Set_EEPROM+0x57c>)
 800ed56:	411a      	asrs	r2, r3
 800ed58:	7cfb      	ldrb	r3, [r7, #19]
 800ed5a:	b2d2      	uxtb	r2, r2
 800ed5c:	3318      	adds	r3, #24
 800ed5e:	443b      	add	r3, r7
 800ed60:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (i = 0; i < 4; i++) {
 800ed64:	7cfb      	ldrb	r3, [r7, #19]
 800ed66:	3301      	adds	r3, #1
 800ed68:	74fb      	strb	r3, [r7, #19]
 800ed6a:	7cfb      	ldrb	r3, [r7, #19]
 800ed6c:	2b03      	cmp	r3, #3
 800ed6e:	d9ef      	bls.n	800ed50 <MCF8316C_Set_EEPROM+0x4dc>
		}
		status = Transmit_Reg_32BIT(hi2c, DEVICE_CONFIG2_ADDR, tx_buffer);
 800ed70:	1d3b      	adds	r3, r7, #4
 800ed72:	461a      	mov	r2, r3
 800ed74:	21a8      	movs	r1, #168	@ 0xa8
 800ed76:	6978      	ldr	r0, [r7, #20]
 800ed78:	f7ff fd05 	bl	800e786 <Transmit_Reg_32BIT>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	72bb      	strb	r3, [r7, #10]
		if (status) {
 800ed80:	7abb      	ldrb	r3, [r7, #10]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d003      	beq.n	800ed8e <MCF8316C_Set_EEPROM+0x51a>
			err_array |= 0x1 << 17;
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ed8c:	60fb      	str	r3, [r7, #12]
		}

		for (i = 0; i < 4; i++) {
 800ed8e:	2300      	movs	r3, #0
 800ed90:	74fb      	strb	r3, [r7, #19]
 800ed92:	e00c      	b.n	800edae <MCF8316C_Set_EEPROM+0x53a>
			tx_buffer[i] = (PERI_CONFIG1_DATA >> (8 * i)) & 0xFF;
 800ed94:	7cfb      	ldrb	r3, [r7, #19]
 800ed96:	00db      	lsls	r3, r3, #3
 800ed98:	4a16      	ldr	r2, [pc, #88]	@ (800edf4 <MCF8316C_Set_EEPROM+0x580>)
 800ed9a:	411a      	asrs	r2, r3
 800ed9c:	7cfb      	ldrb	r3, [r7, #19]
 800ed9e:	b2d2      	uxtb	r2, r2
 800eda0:	3318      	adds	r3, #24
 800eda2:	443b      	add	r3, r7
 800eda4:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (i = 0; i < 4; i++) {
 800eda8:	7cfb      	ldrb	r3, [r7, #19]
 800edaa:	3301      	adds	r3, #1
 800edac:	74fb      	strb	r3, [r7, #19]
 800edae:	7cfb      	ldrb	r3, [r7, #19]
 800edb0:	2b03      	cmp	r3, #3
 800edb2:	d9ef      	bls.n	800ed94 <MCF8316C_Set_EEPROM+0x520>
		}
		status = Transmit_Reg_32BIT(hi2c, PERI_CONFIG1_ADDR, tx_buffer);
 800edb4:	1d3b      	adds	r3, r7, #4
 800edb6:	461a      	mov	r2, r3
 800edb8:	21aa      	movs	r1, #170	@ 0xaa
 800edba:	6978      	ldr	r0, [r7, #20]
 800edbc:	f7ff fce3 	bl	800e786 <Transmit_Reg_32BIT>
 800edc0:	4603      	mov	r3, r0
 800edc2:	72bb      	strb	r3, [r7, #10]
		if (status) {
 800edc4:	7abb      	ldrb	r3, [r7, #10]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d003      	beq.n	800edd2 <MCF8316C_Set_EEPROM+0x55e>
			err_array |= 0x1 << 18;
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800edd0:	60fb      	str	r3, [r7, #12]
		}

		for (i = 0; i < 4; i++) {
 800edd2:	2300      	movs	r3, #0
 800edd4:	74fb      	strb	r3, [r7, #19]
 800edd6:	e01c      	b.n	800ee12 <MCF8316C_Set_EEPROM+0x59e>
 800edd8:	07078600 	.word	0x07078600
 800eddc:	00809020 	.word	0x00809020
 800ede0:	18202800 	.word	0x18202800
 800ede4:	3eda30a6 	.word	0x3eda30a6
 800ede8:	71522088 	.word	0x71522088
 800edec:	08100006 	.word	0x08100006
 800edf0:	61a8a100 	.word	0x61a8a100
 800edf4:	41c45c00 	.word	0x41c45c00
			tx_buffer[i] = (GD_CONFIG1_DATA >> (8 * i)) & 0xFF;
 800edf8:	7cfb      	ldrb	r3, [r7, #19]
 800edfa:	00db      	lsls	r3, r3, #3
 800edfc:	4a61      	ldr	r2, [pc, #388]	@ (800ef84 <MCF8316C_Set_EEPROM+0x710>)
 800edfe:	411a      	asrs	r2, r3
 800ee00:	7cfb      	ldrb	r3, [r7, #19]
 800ee02:	b2d2      	uxtb	r2, r2
 800ee04:	3318      	adds	r3, #24
 800ee06:	443b      	add	r3, r7
 800ee08:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (i = 0; i < 4; i++) {
 800ee0c:	7cfb      	ldrb	r3, [r7, #19]
 800ee0e:	3301      	adds	r3, #1
 800ee10:	74fb      	strb	r3, [r7, #19]
 800ee12:	7cfb      	ldrb	r3, [r7, #19]
 800ee14:	2b03      	cmp	r3, #3
 800ee16:	d9ef      	bls.n	800edf8 <MCF8316C_Set_EEPROM+0x584>
		}
		status = Transmit_Reg_32BIT(hi2c, GD_CONFIG1_ADDR, tx_buffer);
 800ee18:	1d3b      	adds	r3, r7, #4
 800ee1a:	461a      	mov	r2, r3
 800ee1c:	21ac      	movs	r1, #172	@ 0xac
 800ee1e:	6978      	ldr	r0, [r7, #20]
 800ee20:	f7ff fcb1 	bl	800e786 <Transmit_Reg_32BIT>
 800ee24:	4603      	mov	r3, r0
 800ee26:	72bb      	strb	r3, [r7, #10]
		if (status) {
 800ee28:	7abb      	ldrb	r3, [r7, #10]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d003      	beq.n	800ee36 <MCF8316C_Set_EEPROM+0x5c2>
			err_array |= 0x1 << 19;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ee34:	60fb      	str	r3, [r7, #12]
		}

		for (i = 0; i < 4; i++) {
 800ee36:	2300      	movs	r3, #0
 800ee38:	74fb      	strb	r3, [r7, #19]
 800ee3a:	e00d      	b.n	800ee58 <MCF8316C_Set_EEPROM+0x5e4>
			tx_buffer[i] = (GD_CONFIG2_DATA >> (8 * i)) & 0xFF;
 800ee3c:	7cfb      	ldrb	r3, [r7, #19]
 800ee3e:	00db      	lsls	r3, r3, #3
 800ee40:	f04f 72c2 	mov.w	r2, #25427968	@ 0x1840000
 800ee44:	411a      	asrs	r2, r3
 800ee46:	7cfb      	ldrb	r3, [r7, #19]
 800ee48:	b2d2      	uxtb	r2, r2
 800ee4a:	3318      	adds	r3, #24
 800ee4c:	443b      	add	r3, r7
 800ee4e:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (i = 0; i < 4; i++) {
 800ee52:	7cfb      	ldrb	r3, [r7, #19]
 800ee54:	3301      	adds	r3, #1
 800ee56:	74fb      	strb	r3, [r7, #19]
 800ee58:	7cfb      	ldrb	r3, [r7, #19]
 800ee5a:	2b03      	cmp	r3, #3
 800ee5c:	d9ee      	bls.n	800ee3c <MCF8316C_Set_EEPROM+0x5c8>
		}
		status = Transmit_Reg_32BIT(hi2c, GD_CONFIG2_ADDR, tx_buffer);
 800ee5e:	1d3b      	adds	r3, r7, #4
 800ee60:	461a      	mov	r2, r3
 800ee62:	21ae      	movs	r1, #174	@ 0xae
 800ee64:	6978      	ldr	r0, [r7, #20]
 800ee66:	f7ff fc8e 	bl	800e786 <Transmit_Reg_32BIT>
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	72bb      	strb	r3, [r7, #10]
		if (status) {
 800ee6e:	7abb      	ldrb	r3, [r7, #10]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d003      	beq.n	800ee7c <MCF8316C_Set_EEPROM+0x608>
			err_array |= 0x1 << 20;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ee7a:	60fb      	str	r3, [r7, #12]
		}

		for (i = 0; i < 4; i++) {
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	74fb      	strb	r3, [r7, #19]
 800ee80:	e00c      	b.n	800ee9c <MCF8316C_Set_EEPROM+0x628>
			tx_buffer[i] = (INT_ALGO_1_DATA >> (8 * i)) & 0xFF;
 800ee82:	7cfb      	ldrb	r3, [r7, #19]
 800ee84:	00db      	lsls	r3, r3, #3
 800ee86:	4a40      	ldr	r2, [pc, #256]	@ (800ef88 <MCF8316C_Set_EEPROM+0x714>)
 800ee88:	411a      	asrs	r2, r3
 800ee8a:	7cfb      	ldrb	r3, [r7, #19]
 800ee8c:	b2d2      	uxtb	r2, r2
 800ee8e:	3318      	adds	r3, #24
 800ee90:	443b      	add	r3, r7
 800ee92:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (i = 0; i < 4; i++) {
 800ee96:	7cfb      	ldrb	r3, [r7, #19]
 800ee98:	3301      	adds	r3, #1
 800ee9a:	74fb      	strb	r3, [r7, #19]
 800ee9c:	7cfb      	ldrb	r3, [r7, #19]
 800ee9e:	2b03      	cmp	r3, #3
 800eea0:	d9ef      	bls.n	800ee82 <MCF8316C_Set_EEPROM+0x60e>
		}
		status = Transmit_Reg_32BIT(hi2c, INT_ALGO_1_ADDR, tx_buffer);
 800eea2:	1d3b      	adds	r3, r7, #4
 800eea4:	461a      	mov	r2, r3
 800eea6:	21a0      	movs	r1, #160	@ 0xa0
 800eea8:	6978      	ldr	r0, [r7, #20]
 800eeaa:	f7ff fc6c 	bl	800e786 <Transmit_Reg_32BIT>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	72bb      	strb	r3, [r7, #10]
		if (status) {
 800eeb2:	7abb      	ldrb	r3, [r7, #10]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d003      	beq.n	800eec0 <MCF8316C_Set_EEPROM+0x64c>
			err_array |= 0x1 << 21;
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800eebe:	60fb      	str	r3, [r7, #12]
		}

		for (i = 0; i < 4; i++) {
 800eec0:	2300      	movs	r3, #0
 800eec2:	74fb      	strb	r3, [r7, #19]
 800eec4:	e00d      	b.n	800eee2 <MCF8316C_Set_EEPROM+0x66e>
			tx_buffer[i] = (INT_ALGO_2_DATA >> (8 * i)) & 0xFF;
 800eec6:	7cfb      	ldrb	r3, [r7, #19]
 800eec8:	00db      	lsls	r3, r3, #3
 800eeca:	f240 12a1 	movw	r2, #417	@ 0x1a1
 800eece:	411a      	asrs	r2, r3
 800eed0:	7cfb      	ldrb	r3, [r7, #19]
 800eed2:	b2d2      	uxtb	r2, r2
 800eed4:	3318      	adds	r3, #24
 800eed6:	443b      	add	r3, r7
 800eed8:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (i = 0; i < 4; i++) {
 800eedc:	7cfb      	ldrb	r3, [r7, #19]
 800eede:	3301      	adds	r3, #1
 800eee0:	74fb      	strb	r3, [r7, #19]
 800eee2:	7cfb      	ldrb	r3, [r7, #19]
 800eee4:	2b03      	cmp	r3, #3
 800eee6:	d9ee      	bls.n	800eec6 <MCF8316C_Set_EEPROM+0x652>
		}
		status = Transmit_Reg_32BIT(hi2c, INT_ALGO_2_ADDR, tx_buffer);
 800eee8:	1d3b      	adds	r3, r7, #4
 800eeea:	461a      	mov	r2, r3
 800eeec:	21a2      	movs	r1, #162	@ 0xa2
 800eeee:	6978      	ldr	r0, [r7, #20]
 800eef0:	f7ff fc49 	bl	800e786 <Transmit_Reg_32BIT>
 800eef4:	4603      	mov	r3, r0
 800eef6:	72bb      	strb	r3, [r7, #10]
		if (status) {
 800eef8:	7abb      	ldrb	r3, [r7, #10]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d003      	beq.n	800ef06 <MCF8316C_Set_EEPROM+0x692>
			err_array |= 0x1 << 22;
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ef04:	60fb      	str	r3, [r7, #12]
		}

		status = Transmit_Set(hi2c);
 800ef06:	6978      	ldr	r0, [r7, #20]
 800ef08:	f7ff fbd2 	bl	800e6b0 <Transmit_Set>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	72bb      	strb	r3, [r7, #10]
		if (status) {
 800ef10:	7abb      	ldrb	r3, [r7, #10]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d009      	beq.n	800ef2a <MCF8316C_Set_EEPROM+0x6b6>
			Custom_LCD_Printf(0, 2 * j, "TX ERR");
 800ef16:	7afb      	ldrb	r3, [r7, #11]
 800ef18:	005b      	lsls	r3, r3, #1
 800ef1a:	4a1c      	ldr	r2, [pc, #112]	@ (800ef8c <MCF8316C_Set_EEPROM+0x718>)
 800ef1c:	4619      	mov	r1, r3
 800ef1e:	2000      	movs	r0, #0
 800ef20:	f7f2 f8fc 	bl	800111c <Custom_LCD_Printf>
			I2C_Error();
 800ef24:	f001 ffe0 	bl	8010ee8 <I2C_Error>
 800ef28:	e006      	b.n	800ef38 <MCF8316C_Set_EEPROM+0x6c4>
		} else
			Custom_LCD_Printf(0, 2 * j, "TX SUCCESS");
 800ef2a:	7afb      	ldrb	r3, [r7, #11]
 800ef2c:	005b      	lsls	r3, r3, #1
 800ef2e:	4a18      	ldr	r2, [pc, #96]	@ (800ef90 <MCF8316C_Set_EEPROM+0x71c>)
 800ef30:	4619      	mov	r1, r3
 800ef32:	2000      	movs	r0, #0
 800ef34:	f7f2 f8f2 	bl	800111c <Custom_LCD_Printf>

		Custom_LCD_Printf(0, 2 * j + 1, "%04x", err_array);
 800ef38:	7afb      	ldrb	r3, [r7, #11]
 800ef3a:	005b      	lsls	r3, r3, #1
 800ef3c:	1c59      	adds	r1, r3, #1
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	4a14      	ldr	r2, [pc, #80]	@ (800ef94 <MCF8316C_Set_EEPROM+0x720>)
 800ef42:	2000      	movs	r0, #0
 800ef44:	f7f2 f8ea 	bl	800111c <Custom_LCD_Printf>
	for (uint8_t j = 0; j < 2; j++) {
 800ef48:	7afb      	ldrb	r3, [r7, #11]
 800ef4a:	3301      	adds	r3, #1
 800ef4c:	72fb      	strb	r3, [r7, #11]
 800ef4e:	7afb      	ldrb	r3, [r7, #11]
 800ef50:	2b01      	cmp	r3, #1
 800ef52:	f67f ac9b 	bls.w	800e88c <MCF8316C_Set_EEPROM+0x18>

	}
	while (!HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin))
 800ef56:	bf00      	nop
 800ef58:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ef5c:	480e      	ldr	r0, [pc, #56]	@ (800ef98 <MCF8316C_Set_EEPROM+0x724>)
 800ef5e:	f7f5 fe0b 	bl	8004b78 <HAL_GPIO_ReadPin>
 800ef62:	4603      	mov	r3, r0
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d0f7      	beq.n	800ef58 <MCF8316C_Set_EEPROM+0x6e4>
		;
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin))
 800ef68:	bf00      	nop
 800ef6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ef6e:	480a      	ldr	r0, [pc, #40]	@ (800ef98 <MCF8316C_Set_EEPROM+0x724>)
 800ef70:	f7f5 fe02 	bl	8004b78 <HAL_GPIO_ReadPin>
 800ef74:	4603      	mov	r3, r0
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d1f7      	bne.n	800ef6a <MCF8316C_Set_EEPROM+0x6f6>
		;
}
 800ef7a:	bf00      	nop
 800ef7c:	bf00      	nop
 800ef7e:	3718      	adds	r7, #24
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}
 800ef84:	1c269100 	.word	0x1c269100
 800ef88:	0508c035 	.word	0x0508c035
 800ef8c:	08016fe0 	.word	0x08016fe0
 800ef90:	08016fe8 	.word	0x08016fe8
 800ef94:	08016ff4 	.word	0x08016ff4
 800ef98:	58020800 	.word	0x58020800

0800ef9c <MCF8316C_Get_Fault>:

void MCF8316C_Get_Fault() {
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b086      	sub	sp, #24
 800efa0:	af04      	add	r7, sp, #16
	uint8_t rx_buffer[4];
	HAL_StatusTypeDef status;

	Receive_Set(MCF8316C_I2C_LEFT_CHANNEL, sizeof(rx_buffer));
 800efa2:	2104      	movs	r1, #4
 800efa4:	4859      	ldr	r0, [pc, #356]	@ (800f10c <MCF8316C_Get_Fault+0x170>)
 800efa6:	f7ff fbad 	bl	800e704 <Receive_Set>
	Receive_Set(MCF8316C_I2C_RIGHT_CHANNEL, sizeof(rx_buffer));
 800efaa:	2104      	movs	r1, #4
 800efac:	4858      	ldr	r0, [pc, #352]	@ (800f110 <MCF8316C_Get_Fault+0x174>)
 800efae:	f7ff fba9 	bl	800e704 <Receive_Set>
	HAL_Delay(100);
 800efb2:	2064      	movs	r0, #100	@ 0x64
 800efb4:	f7f3 fd1c 	bl	80029f0 <HAL_Delay>

	status = Receive_Reg(MCF8316C_I2C_LEFT_CHANNEL, DRIVER_FAULT_ADDR,
 800efb8:	463a      	mov	r2, r7
 800efba:	2304      	movs	r3, #4
 800efbc:	21e0      	movs	r1, #224	@ 0xe0
 800efbe:	4853      	ldr	r0, [pc, #332]	@ (800f10c <MCF8316C_Get_Fault+0x170>)
 800efc0:	f7ff fc19 	bl	800e7f6 <Receive_Reg>
 800efc4:	4603      	mov	r3, r0
 800efc6:	71fb      	strb	r3, [r7, #7]
			rx_buffer, sizeof(rx_buffer));
	if (status)
 800efc8:	79fb      	ldrb	r3, [r7, #7]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d005      	beq.n	800efda <MCF8316C_Get_Fault+0x3e>
		Custom_LCD_Printf(0, 0, "L ERROR");
 800efce:	4a51      	ldr	r2, [pc, #324]	@ (800f114 <MCF8316C_Get_Fault+0x178>)
 800efd0:	2100      	movs	r1, #0
 800efd2:	2000      	movs	r0, #0
 800efd4:	f7f2 f8a2 	bl	800111c <Custom_LCD_Printf>
 800efd8:	e00d      	b.n	800eff6 <MCF8316C_Get_Fault+0x5a>
	else
		Custom_LCD_Printf(0, 0, "L %02x%02x%02x%02x", rx_buffer[3],
 800efda:	78fb      	ldrb	r3, [r7, #3]
 800efdc:	4618      	mov	r0, r3
				rx_buffer[2], rx_buffer[1], rx_buffer[0]);
 800efde:	78bb      	ldrb	r3, [r7, #2]
 800efe0:	787a      	ldrb	r2, [r7, #1]
 800efe2:	7839      	ldrb	r1, [r7, #0]
		Custom_LCD_Printf(0, 0, "L %02x%02x%02x%02x", rx_buffer[3],
 800efe4:	9102      	str	r1, [sp, #8]
 800efe6:	9201      	str	r2, [sp, #4]
 800efe8:	9300      	str	r3, [sp, #0]
 800efea:	4603      	mov	r3, r0
 800efec:	4a4a      	ldr	r2, [pc, #296]	@ (800f118 <MCF8316C_Get_Fault+0x17c>)
 800efee:	2100      	movs	r1, #0
 800eff0:	2000      	movs	r0, #0
 800eff2:	f7f2 f893 	bl	800111c <Custom_LCD_Printf>

	status = Receive_Reg(MCF8316C_I2C_LEFT_CHANNEL, CONTROLLER_FAULT_ADDR,
 800eff6:	463a      	mov	r2, r7
 800eff8:	2304      	movs	r3, #4
 800effa:	21e2      	movs	r1, #226	@ 0xe2
 800effc:	4843      	ldr	r0, [pc, #268]	@ (800f10c <MCF8316C_Get_Fault+0x170>)
 800effe:	f7ff fbfa 	bl	800e7f6 <Receive_Reg>
 800f002:	4603      	mov	r3, r0
 800f004:	71fb      	strb	r3, [r7, #7]
			rx_buffer, sizeof(rx_buffer));
	if (status)
 800f006:	79fb      	ldrb	r3, [r7, #7]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d005      	beq.n	800f018 <MCF8316C_Get_Fault+0x7c>
		Custom_LCD_Printf(0, 1, "L ERROR");
 800f00c:	4a41      	ldr	r2, [pc, #260]	@ (800f114 <MCF8316C_Get_Fault+0x178>)
 800f00e:	2101      	movs	r1, #1
 800f010:	2000      	movs	r0, #0
 800f012:	f7f2 f883 	bl	800111c <Custom_LCD_Printf>
 800f016:	e00d      	b.n	800f034 <MCF8316C_Get_Fault+0x98>
	else
		Custom_LCD_Printf(0, 1, "L %02x%02x%02x%02x", rx_buffer[3],
 800f018:	78fb      	ldrb	r3, [r7, #3]
 800f01a:	4618      	mov	r0, r3
				rx_buffer[2], rx_buffer[1], rx_buffer[0]);
 800f01c:	78bb      	ldrb	r3, [r7, #2]
 800f01e:	787a      	ldrb	r2, [r7, #1]
 800f020:	7839      	ldrb	r1, [r7, #0]
		Custom_LCD_Printf(0, 1, "L %02x%02x%02x%02x", rx_buffer[3],
 800f022:	9102      	str	r1, [sp, #8]
 800f024:	9201      	str	r2, [sp, #4]
 800f026:	9300      	str	r3, [sp, #0]
 800f028:	4603      	mov	r3, r0
 800f02a:	4a3b      	ldr	r2, [pc, #236]	@ (800f118 <MCF8316C_Get_Fault+0x17c>)
 800f02c:	2101      	movs	r1, #1
 800f02e:	2000      	movs	r0, #0
 800f030:	f7f2 f874 	bl	800111c <Custom_LCD_Printf>

	Custom_LCD_Printf(0, 2, "L nFault:%d",
			HAL_GPIO_ReadPin(Motor_L_nFAULT_GPIO_Port, Motor_L_nFAULT_Pin));
 800f034:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800f038:	4838      	ldr	r0, [pc, #224]	@ (800f11c <MCF8316C_Get_Fault+0x180>)
 800f03a:	f7f5 fd9d 	bl	8004b78 <HAL_GPIO_ReadPin>
 800f03e:	4603      	mov	r3, r0
	Custom_LCD_Printf(0, 2, "L nFault:%d",
 800f040:	4a37      	ldr	r2, [pc, #220]	@ (800f120 <MCF8316C_Get_Fault+0x184>)
 800f042:	2102      	movs	r1, #2
 800f044:	2000      	movs	r0, #0
 800f046:	f7f2 f869 	bl	800111c <Custom_LCD_Printf>

	status = Receive_Reg(MCF8316C_I2C_RIGHT_CHANNEL, DRIVER_FAULT_ADDR,
 800f04a:	463a      	mov	r2, r7
 800f04c:	2304      	movs	r3, #4
 800f04e:	21e0      	movs	r1, #224	@ 0xe0
 800f050:	482f      	ldr	r0, [pc, #188]	@ (800f110 <MCF8316C_Get_Fault+0x174>)
 800f052:	f7ff fbd0 	bl	800e7f6 <Receive_Reg>
 800f056:	4603      	mov	r3, r0
 800f058:	71fb      	strb	r3, [r7, #7]
			rx_buffer, sizeof(rx_buffer));

	if (status)
 800f05a:	79fb      	ldrb	r3, [r7, #7]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d005      	beq.n	800f06c <MCF8316C_Get_Fault+0xd0>
		Custom_LCD_Printf(0, 3, "R ERROR");
 800f060:	4a30      	ldr	r2, [pc, #192]	@ (800f124 <MCF8316C_Get_Fault+0x188>)
 800f062:	2103      	movs	r1, #3
 800f064:	2000      	movs	r0, #0
 800f066:	f7f2 f859 	bl	800111c <Custom_LCD_Printf>
 800f06a:	e00d      	b.n	800f088 <MCF8316C_Get_Fault+0xec>
	else
		Custom_LCD_Printf(0, 3, "R %02x%02x%02x%02x", rx_buffer[3],
 800f06c:	78fb      	ldrb	r3, [r7, #3]
 800f06e:	4618      	mov	r0, r3
				rx_buffer[2], rx_buffer[1], rx_buffer[0]);
 800f070:	78bb      	ldrb	r3, [r7, #2]
 800f072:	787a      	ldrb	r2, [r7, #1]
 800f074:	7839      	ldrb	r1, [r7, #0]
		Custom_LCD_Printf(0, 3, "R %02x%02x%02x%02x", rx_buffer[3],
 800f076:	9102      	str	r1, [sp, #8]
 800f078:	9201      	str	r2, [sp, #4]
 800f07a:	9300      	str	r3, [sp, #0]
 800f07c:	4603      	mov	r3, r0
 800f07e:	4a2a      	ldr	r2, [pc, #168]	@ (800f128 <MCF8316C_Get_Fault+0x18c>)
 800f080:	2103      	movs	r1, #3
 800f082:	2000      	movs	r0, #0
 800f084:	f7f2 f84a 	bl	800111c <Custom_LCD_Printf>

	status = Receive_Reg(MCF8316C_I2C_RIGHT_CHANNEL, CONTROLLER_FAULT_ADDR,
 800f088:	463a      	mov	r2, r7
 800f08a:	2304      	movs	r3, #4
 800f08c:	21e2      	movs	r1, #226	@ 0xe2
 800f08e:	4820      	ldr	r0, [pc, #128]	@ (800f110 <MCF8316C_Get_Fault+0x174>)
 800f090:	f7ff fbb1 	bl	800e7f6 <Receive_Reg>
 800f094:	4603      	mov	r3, r0
 800f096:	71fb      	strb	r3, [r7, #7]
			rx_buffer, sizeof(rx_buffer));
	if (status)
 800f098:	79fb      	ldrb	r3, [r7, #7]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d005      	beq.n	800f0aa <MCF8316C_Get_Fault+0x10e>
		Custom_LCD_Printf(0, 4, "L ERROR");
 800f09e:	4a1d      	ldr	r2, [pc, #116]	@ (800f114 <MCF8316C_Get_Fault+0x178>)
 800f0a0:	2104      	movs	r1, #4
 800f0a2:	2000      	movs	r0, #0
 800f0a4:	f7f2 f83a 	bl	800111c <Custom_LCD_Printf>
 800f0a8:	e00d      	b.n	800f0c6 <MCF8316C_Get_Fault+0x12a>
	else
		Custom_LCD_Printf(0, 4, "L %02x%02x%02x%02x", rx_buffer[3],
 800f0aa:	78fb      	ldrb	r3, [r7, #3]
 800f0ac:	4618      	mov	r0, r3
				rx_buffer[2], rx_buffer[1], rx_buffer[0]);
 800f0ae:	78bb      	ldrb	r3, [r7, #2]
 800f0b0:	787a      	ldrb	r2, [r7, #1]
 800f0b2:	7839      	ldrb	r1, [r7, #0]
		Custom_LCD_Printf(0, 4, "L %02x%02x%02x%02x", rx_buffer[3],
 800f0b4:	9102      	str	r1, [sp, #8]
 800f0b6:	9201      	str	r2, [sp, #4]
 800f0b8:	9300      	str	r3, [sp, #0]
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	4a16      	ldr	r2, [pc, #88]	@ (800f118 <MCF8316C_Get_Fault+0x17c>)
 800f0be:	2104      	movs	r1, #4
 800f0c0:	2000      	movs	r0, #0
 800f0c2:	f7f2 f82b 	bl	800111c <Custom_LCD_Printf>

	Custom_LCD_Printf(0, 5, "R nFault:%d",
			HAL_GPIO_ReadPin(Motor_R_nFAULT_GPIO_Port, Motor_R_nFAULT_Pin));
 800f0c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800f0ca:	4818      	ldr	r0, [pc, #96]	@ (800f12c <MCF8316C_Get_Fault+0x190>)
 800f0cc:	f7f5 fd54 	bl	8004b78 <HAL_GPIO_ReadPin>
 800f0d0:	4603      	mov	r3, r0
	Custom_LCD_Printf(0, 5, "R nFault:%d",
 800f0d2:	4a17      	ldr	r2, [pc, #92]	@ (800f130 <MCF8316C_Get_Fault+0x194>)
 800f0d4:	2105      	movs	r1, #5
 800f0d6:	2000      	movs	r0, #0
 800f0d8:	f7f2 f820 	bl	800111c <Custom_LCD_Printf>

	while (!HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin))
 800f0dc:	bf00      	nop
 800f0de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f0e2:	4814      	ldr	r0, [pc, #80]	@ (800f134 <MCF8316C_Get_Fault+0x198>)
 800f0e4:	f7f5 fd48 	bl	8004b78 <HAL_GPIO_ReadPin>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d0f7      	beq.n	800f0de <MCF8316C_Get_Fault+0x142>
		;
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin))
 800f0ee:	bf00      	nop
 800f0f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f0f4:	480f      	ldr	r0, [pc, #60]	@ (800f134 <MCF8316C_Get_Fault+0x198>)
 800f0f6:	f7f5 fd3f 	bl	8004b78 <HAL_GPIO_ReadPin>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d1f7      	bne.n	800f0f0 <MCF8316C_Get_Fault+0x154>
		;
}
 800f100:	bf00      	nop
 800f102:	bf00      	nop
 800f104:	3708      	adds	r7, #8
 800f106:	46bd      	mov	sp, r7
 800f108:	bd80      	pop	{r7, pc}
 800f10a:	bf00      	nop
 800f10c:	24000c38 	.word	0x24000c38
 800f110:	24000c8c 	.word	0x24000c8c
 800f114:	08016ffc 	.word	0x08016ffc
 800f118:	08017004 	.word	0x08017004
 800f11c:	58020c00 	.word	0x58020c00
 800f120:	08017018 	.word	0x08017018
 800f124:	08017024 	.word	0x08017024
 800f128:	0801702c 	.word	0x0801702c
 800f12c:	58020000 	.word	0x58020000
 800f130:	08017040 	.word	0x08017040
 800f134:	58020800 	.word	0x58020800

0800f138 <MCF8316C_Get_Voltage>:

void MCF8316C_Get_Voltage() {
 800f138:	b580      	push	{r7, lr}
 800f13a:	b08c      	sub	sp, #48	@ 0x30
 800f13c:	af02      	add	r7, sp, #8
	uint8_t rx_bufferL[4];
	uint8_t rx_bufferR[4];
	while (!HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin)) {
 800f13e:	e068      	b.n	800f212 <MCF8316C_Get_Voltage+0xda>
		Receive_Reg(MCF8316C_I2C_LEFT_CHANNEL,
 800f140:	1d3a      	adds	r2, r7, #4
 800f142:	2304      	movs	r3, #4
 800f144:	f240 4176 	movw	r1, #1142	@ 0x476
 800f148:	483d      	ldr	r0, [pc, #244]	@ (800f240 <MCF8316C_Get_Voltage+0x108>)
 800f14a:	f7ff fb54 	bl	800e7f6 <Receive_Reg>
		MCF8316C_VM_ADDR, rx_bufferL, sizeof(rx_bufferL));
		Receive_Reg(MCF8316C_I2C_RIGHT_CHANNEL,
 800f14e:	463a      	mov	r2, r7
 800f150:	2304      	movs	r3, #4
 800f152:	f240 4176 	movw	r1, #1142	@ 0x476
 800f156:	483b      	ldr	r0, [pc, #236]	@ (800f244 <MCF8316C_Get_Voltage+0x10c>)
 800f158:	f7ff fb4d 	bl	800e7f6 <Receive_Reg>
		MCF8316C_VM_ADDR, rx_bufferR, sizeof(rx_bufferR));
		uint32_t voltL = 0;
 800f15c:	2300      	movs	r3, #0
 800f15e:	627b      	str	r3, [r7, #36]	@ 0x24
		uint32_t voltR = 0;
 800f160:	2300      	movs	r3, #0
 800f162:	623b      	str	r3, [r7, #32]
		for (uint8_t i = 0; i < sizeof(rx_bufferL); i++) {
 800f164:	2300      	movs	r3, #0
 800f166:	77fb      	strb	r3, [r7, #31]
 800f168:	e01c      	b.n	800f1a4 <MCF8316C_Get_Voltage+0x6c>
			voltL |= (*(rx_bufferL + i) << (8 * i));
 800f16a:	7ffb      	ldrb	r3, [r7, #31]
 800f16c:	1d3a      	adds	r2, r7, #4
 800f16e:	4413      	add	r3, r2
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	461a      	mov	r2, r3
 800f174:	7ffb      	ldrb	r3, [r7, #31]
 800f176:	00db      	lsls	r3, r3, #3
 800f178:	fa02 f303 	lsl.w	r3, r2, r3
 800f17c:	461a      	mov	r2, r3
 800f17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f180:	4313      	orrs	r3, r2
 800f182:	627b      	str	r3, [r7, #36]	@ 0x24
			voltR |= (*(rx_bufferR + i) << (8 * i));
 800f184:	7ffb      	ldrb	r3, [r7, #31]
 800f186:	463a      	mov	r2, r7
 800f188:	4413      	add	r3, r2
 800f18a:	781b      	ldrb	r3, [r3, #0]
 800f18c:	461a      	mov	r2, r3
 800f18e:	7ffb      	ldrb	r3, [r7, #31]
 800f190:	00db      	lsls	r3, r3, #3
 800f192:	fa02 f303 	lsl.w	r3, r2, r3
 800f196:	461a      	mov	r2, r3
 800f198:	6a3b      	ldr	r3, [r7, #32]
 800f19a:	4313      	orrs	r3, r2
 800f19c:	623b      	str	r3, [r7, #32]
		for (uint8_t i = 0; i < sizeof(rx_bufferL); i++) {
 800f19e:	7ffb      	ldrb	r3, [r7, #31]
 800f1a0:	3301      	adds	r3, #1
 800f1a2:	77fb      	strb	r3, [r7, #31]
 800f1a4:	7ffb      	ldrb	r3, [r7, #31]
 800f1a6:	2b03      	cmp	r3, #3
 800f1a8:	d9df      	bls.n	800f16a <MCF8316C_Get_Voltage+0x32>
		}
		double vmL = (double) (voltL * VM_COEFF1 / VM_COEFF2);
 800f1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1ac:	ee07 3a90 	vmov	s15, r3
 800f1b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f1b4:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800f248 <MCF8316C_Get_Voltage+0x110>
 800f1b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f1bc:	eddf 6a23 	vldr	s13, [pc, #140]	@ 800f24c <MCF8316C_Get_Voltage+0x114>
 800f1c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f1c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f1c8:	ed87 7b04 	vstr	d7, [r7, #16]
		double vmR = (double) (voltR * VM_COEFF1 / VM_COEFF2);
 800f1cc:	6a3b      	ldr	r3, [r7, #32]
 800f1ce:	ee07 3a90 	vmov	s15, r3
 800f1d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f1d6:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 800f248 <MCF8316C_Get_Voltage+0x110>
 800f1da:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f1de:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 800f24c <MCF8316C_Get_Voltage+0x114>
 800f1e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f1e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800f1ea:	ed87 7b02 	vstr	d7, [r7, #8]
		Custom_LCD_Printf(0, 0, "VL:%2.4f", vmL);
 800f1ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f1f2:	e9cd 2300 	strd	r2, r3, [sp]
 800f1f6:	4a16      	ldr	r2, [pc, #88]	@ (800f250 <MCF8316C_Get_Voltage+0x118>)
 800f1f8:	2100      	movs	r1, #0
 800f1fa:	2000      	movs	r0, #0
 800f1fc:	f7f1 ff8e 	bl	800111c <Custom_LCD_Printf>
		Custom_LCD_Printf(0, 1, "VR:%2.4f", vmR);
 800f200:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f204:	e9cd 2300 	strd	r2, r3, [sp]
 800f208:	4a12      	ldr	r2, [pc, #72]	@ (800f254 <MCF8316C_Get_Voltage+0x11c>)
 800f20a:	2101      	movs	r1, #1
 800f20c:	2000      	movs	r0, #0
 800f20e:	f7f1 ff85 	bl	800111c <Custom_LCD_Printf>
	while (!HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin)) {
 800f212:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f216:	4810      	ldr	r0, [pc, #64]	@ (800f258 <MCF8316C_Get_Voltage+0x120>)
 800f218:	f7f5 fcae 	bl	8004b78 <HAL_GPIO_ReadPin>
 800f21c:	4603      	mov	r3, r0
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d08e      	beq.n	800f140 <MCF8316C_Get_Voltage+0x8>
	}
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin))
 800f222:	bf00      	nop
 800f224:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f228:	480b      	ldr	r0, [pc, #44]	@ (800f258 <MCF8316C_Get_Voltage+0x120>)
 800f22a:	f7f5 fca5 	bl	8004b78 <HAL_GPIO_ReadPin>
 800f22e:	4603      	mov	r3, r0
 800f230:	2b00      	cmp	r3, #0
 800f232:	d1f7      	bne.n	800f224 <MCF8316C_Get_Voltage+0xec>
		;
}
 800f234:	bf00      	nop
 800f236:	bf00      	nop
 800f238:	3728      	adds	r7, #40	@ 0x28
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}
 800f23e:	bf00      	nop
 800f240:	24000c38 	.word	0x24000c38
 800f244:	24000c8c 	.word	0x24000c8c
 800f248:	42700000 	.word	0x42700000
 800f24c:	4d000000 	.word	0x4d000000
 800f250:	0801704c 	.word	0x0801704c
 800f254:	08017058 	.word	0x08017058
 800f258:	58020800 	.word	0x58020800

0800f25c <MCF8316C_MPET>:

// mcf8316c.c

// mcf8316c.c

void MCF8316C_MPET() {
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b088      	sub	sp, #32
 800f260:	af02      	add	r7, sp, #8
    uint8_t rx_buffer32[4];
    uint8_t tx_buffer32[4];
    I2C_HandleTypeDef *hi2c = MCF8316C_I2C_LEFT_CHANNEL;
 800f262:	4b31      	ldr	r3, [pc, #196]	@ (800f328 <MCF8316C_MPET+0xcc>)
 800f264:	613b      	str	r3, [r7, #16]

    // MPET 측정 시작 명령 (저항만 측정하도록 ALGO_DEBUG2_DATA를 수정했다고 가정)
    for (uint8_t i = 0; i < 4; i++) {
 800f266:	2300      	movs	r3, #0
 800f268:	75fb      	strb	r3, [r7, #23]
 800f26a:	e00c      	b.n	800f286 <MCF8316C_MPET+0x2a>
        tx_buffer32[i] = (ALGO_DEBUG2_DATA >> (8 * i)) & 0xFF;
 800f26c:	7dfb      	ldrb	r3, [r7, #23]
 800f26e:	00db      	lsls	r3, r3, #3
 800f270:	2231      	movs	r2, #49	@ 0x31
 800f272:	411a      	asrs	r2, r3
 800f274:	7dfb      	ldrb	r3, [r7, #23]
 800f276:	b2d2      	uxtb	r2, r2
 800f278:	3318      	adds	r3, #24
 800f27a:	443b      	add	r3, r7
 800f27c:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (uint8_t i = 0; i < 4; i++) {
 800f280:	7dfb      	ldrb	r3, [r7, #23]
 800f282:	3301      	adds	r3, #1
 800f284:	75fb      	strb	r3, [r7, #23]
 800f286:	7dfb      	ldrb	r3, [r7, #23]
 800f288:	2b03      	cmp	r3, #3
 800f28a:	d9ef      	bls.n	800f26c <MCF8316C_MPET+0x10>
    }
    Transmit_Reg_32BIT(hi2c, ALGO_DEBUG2_ADDR, tx_buffer32);
 800f28c:	1d3b      	adds	r3, r7, #4
 800f28e:	461a      	mov	r2, r3
 800f290:	21ee      	movs	r1, #238	@ 0xee
 800f292:	6938      	ldr	r0, [r7, #16]
 800f294:	f7ff fa77 	bl	800e786 <Transmit_Reg_32BIT>

    Custom_LCD_Printf(0, 0, "MPET Running...");
 800f298:	4a24      	ldr	r2, [pc, #144]	@ (800f32c <MCF8316C_MPET+0xd0>)
 800f29a:	2100      	movs	r1, #0
 800f29c:	2000      	movs	r0, #0
 800f29e:	f7f1 ff3d 	bl	800111c <Custom_LCD_Printf>

    // MPET는 수 초가 걸릴 수 있으므로 충분한 딜레이를 줍니다.
    // 이 시간 동안 모터는 정지 상태로 돌아갑니다.
    HAL_Delay(5000);
 800f2a2:	f241 3088 	movw	r0, #5000	@ 0x1388
 800f2a6:	f7f3 fba3 	bl	80029f0 <HAL_Delay>

    Custom_LCD_Printf(0, 7, "MPET Done!");
 800f2aa:	4a21      	ldr	r2, [pc, #132]	@ (800f330 <MCF8316C_MPET+0xd4>)
 800f2ac:	2107      	movs	r1, #7
 800f2ae:	2000      	movs	r0, #0
 800f2b0:	f7f1 ff34 	bl	800111c <Custom_LCD_Printf>

    // --- 아래 EEPROM 저장 코드를 제거하거나 주석 처리 ---
    // Transmit_Set(hi2c);

    // MPET 완료 후 측정된 값 읽기 (옵션)
    HAL_StatusTypeDef status = Receive_Reg(hi2c, MTR_PARAMS, rx_buffer32, sizeof(rx_buffer32));
 800f2b4:	f107 0208 	add.w	r2, r7, #8
 800f2b8:	2304      	movs	r3, #4
 800f2ba:	21e6      	movs	r1, #230	@ 0xe6
 800f2bc:	6938      	ldr	r0, [r7, #16]
 800f2be:	f7ff fa9a 	bl	800e7f6 <Receive_Reg>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 800f2c6:	7bfb      	ldrb	r3, [r7, #15]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d110      	bne.n	800f2ee <MCF8316C_MPET+0x92>
        Custom_LCD_Printf(0, 1, "R:%02x L:%02x", rx_buffer32[3], rx_buffer32[1]);
 800f2cc:	7afb      	ldrb	r3, [r7, #11]
 800f2ce:	461a      	mov	r2, r3
 800f2d0:	7a7b      	ldrb	r3, [r7, #9]
 800f2d2:	9300      	str	r3, [sp, #0]
 800f2d4:	4613      	mov	r3, r2
 800f2d6:	4a17      	ldr	r2, [pc, #92]	@ (800f334 <MCF8316C_MPET+0xd8>)
 800f2d8:	2101      	movs	r1, #1
 800f2da:	2000      	movs	r0, #0
 800f2dc:	f7f1 ff1e 	bl	800111c <Custom_LCD_Printf>
        Custom_LCD_Printf(0, 2, "BEMF: %02x", rx_buffer32[2]);
 800f2e0:	7abb      	ldrb	r3, [r7, #10]
 800f2e2:	4a15      	ldr	r2, [pc, #84]	@ (800f338 <MCF8316C_MPET+0xdc>)
 800f2e4:	2102      	movs	r1, #2
 800f2e6:	2000      	movs	r0, #0
 800f2e8:	f7f1 ff18 	bl	800111c <Custom_LCD_Printf>
 800f2ec:	e004      	b.n	800f2f8 <MCF8316C_MPET+0x9c>
    } else {
        Custom_LCD_Printf(0, 1, "I2C Read Fail!");
 800f2ee:	4a13      	ldr	r2, [pc, #76]	@ (800f33c <MCF8316C_MPET+0xe0>)
 800f2f0:	2101      	movs	r1, #1
 800f2f2:	2000      	movs	r0, #0
 800f2f4:	f7f1 ff12 	bl	800111c <Custom_LCD_Printf>
    }

    while (!HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin));
 800f2f8:	bf00      	nop
 800f2fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f2fe:	4810      	ldr	r0, [pc, #64]	@ (800f340 <MCF8316C_MPET+0xe4>)
 800f300:	f7f5 fc3a 	bl	8004b78 <HAL_GPIO_ReadPin>
 800f304:	4603      	mov	r3, r0
 800f306:	2b00      	cmp	r3, #0
 800f308:	d0f7      	beq.n	800f2fa <MCF8316C_MPET+0x9e>
    while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin));
 800f30a:	bf00      	nop
 800f30c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f310:	480b      	ldr	r0, [pc, #44]	@ (800f340 <MCF8316C_MPET+0xe4>)
 800f312:	f7f5 fc31 	bl	8004b78 <HAL_GPIO_ReadPin>
 800f316:	4603      	mov	r3, r0
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d1f7      	bne.n	800f30c <MCF8316C_MPET+0xb0>
}
 800f31c:	bf00      	nop
 800f31e:	bf00      	nop
 800f320:	3718      	adds	r7, #24
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}
 800f326:	bf00      	nop
 800f328:	24000c38 	.word	0x24000c38
 800f32c:	08017064 	.word	0x08017064
 800f330:	08017074 	.word	0x08017074
 800f334:	08017080 	.word	0x08017080
 800f338:	08017090 	.word	0x08017090
 800f33c:	0801709c 	.word	0x0801709c
 800f340:	58020800 	.word	0x58020800

0800f344 <MCF8316C_PID_CONTROL>:

    Custom_LCD_Printf(0, 1, "Save Complete!");
    HAL_Delay(1000);
}

void MCF8316C_PID_CONTROL() {
 800f344:	b580      	push	{r7, lr}
 800f346:	b082      	sub	sp, #8
 800f348:	af00      	add	r7, sp, #0
	Encoder_Start();
 800f34a:	f000 f8f7 	bl	800f53c <Encoder_Start>
	HAL_TIM_PWM_Start(MOTOR_L_TIM, MOTOR_L_CHANNEL);
 800f34e:	2100      	movs	r1, #0
 800f350:	4820      	ldr	r0, [pc, #128]	@ (800f3d4 <MCF8316C_PID_CONTROL+0x90>)
 800f352:	f7fd f95b 	bl	800c60c <HAL_TIM_PWM_Start>
	uint32_t duty = __HAL_TIM_GET_AUTORELOAD(MOTOR_L_TIM) / 100 * 20;
 800f356:	4b1f      	ldr	r3, [pc, #124]	@ (800f3d4 <MCF8316C_PID_CONTROL+0x90>)
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f35c:	4a1e      	ldr	r2, [pc, #120]	@ (800f3d8 <MCF8316C_PID_CONTROL+0x94>)
 800f35e:	fba2 2303 	umull	r2, r3, r2, r3
 800f362:	095a      	lsrs	r2, r3, #5
 800f364:	4613      	mov	r3, r2
 800f366:	009b      	lsls	r3, r3, #2
 800f368:	4413      	add	r3, r2
 800f36a:	009b      	lsls	r3, r3, #2
 800f36c:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(MOTOR_L_TIM, MOTOR_L_CHANNEL, duty);
 800f36e:	4b19      	ldr	r3, [pc, #100]	@ (800f3d4 <MCF8316C_PID_CONTROL+0x90>)
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	687a      	ldr	r2, [r7, #4]
 800f374:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_GPIO_WritePin(Motor_L_Brake_GPIO_Port, Motor_L_Brake_Pin,
 800f376:	2200      	movs	r2, #0
 800f378:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800f37c:	4817      	ldr	r0, [pc, #92]	@ (800f3dc <MCF8316C_PID_CONTROL+0x98>)
 800f37e:	f7f5 fc13 	bl	8004ba8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(Motor_L_Driveoff_GPIO_Port, Motor_L_Driveoff_Pin,
 800f382:	2200      	movs	r2, #0
 800f384:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f388:	4814      	ldr	r0, [pc, #80]	@ (800f3dc <MCF8316C_PID_CONTROL+0x98>)
 800f38a:	f7f5 fc0d 	bl	8004ba8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	while (!HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin)) {
 800f38e:	e007      	b.n	800f3a0 <MCF8316C_PID_CONTROL+0x5c>
		Custom_LCD_Printf(0, 0, "%5d", *ENCODER_L_TIM.Instance->CNT);
 800f390:	4b13      	ldr	r3, [pc, #76]	@ (800f3e0 <MCF8316C_PID_CONTROL+0x9c>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	69db      	ldr	r3, [r3, #28]
 800f396:	4a13      	ldr	r2, [pc, #76]	@ (800f3e4 <MCF8316C_PID_CONTROL+0xa0>)
 800f398:	2100      	movs	r1, #0
 800f39a:	2000      	movs	r0, #0
 800f39c:	f7f1 febe 	bl	800111c <Custom_LCD_Printf>
	while (!HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin)) {
 800f3a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f3a4:	4810      	ldr	r0, [pc, #64]	@ (800f3e8 <MCF8316C_PID_CONTROL+0xa4>)
 800f3a6:	f7f5 fbe7 	bl	8004b78 <HAL_GPIO_ReadPin>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d0ef      	beq.n	800f390 <MCF8316C_PID_CONTROL+0x4c>
	}
	Encoder_Stop();
 800f3b0:	f000 f906 	bl	800f5c0 <Encoder_Stop>
	Motor_Stop();
 800f3b4:	f000 f8d4 	bl	800f560 <Motor_Stop>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin))
 800f3b8:	bf00      	nop
 800f3ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f3be:	480a      	ldr	r0, [pc, #40]	@ (800f3e8 <MCF8316C_PID_CONTROL+0xa4>)
 800f3c0:	f7f5 fbda 	bl	8004b78 <HAL_GPIO_ReadPin>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d1f7      	bne.n	800f3ba <MCF8316C_PID_CONTROL+0x76>
		;
}
 800f3ca:	bf00      	nop
 800f3cc:	bf00      	nop
 800f3ce:	3708      	adds	r7, #8
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}
 800f3d4:	24001080 	.word	0x24001080
 800f3d8:	51eb851f 	.word	0x51eb851f
 800f3dc:	58020c00 	.word	0x58020c00
 800f3e0:	24000d18 	.word	0x24000d18
 800f3e4:	080170d0 	.word	0x080170d0
 800f3e8:	58020800 	.word	0x58020800

0800f3ec <Motor_Init>:

#include "motor.h"

motor_t motor[2];

void Motor_Init() {
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(MOTOR_L_TIM, MOTOR_L_CHANNEL, 0);
 800f3f0:	4b10      	ldr	r3, [pc, #64]	@ (800f434 <Motor_Init+0x48>)
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(MOTOR_R_TIM, MOTOR_R_CHANNEL, 0);
 800f3f8:	4b0e      	ldr	r3, [pc, #56]	@ (800f434 <Motor_Init+0x48>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	639a      	str	r2, [r3, #56]	@ 0x38

	HAL_GPIO_WritePin(Motor_L_Driveoff_GPIO_Port, Motor_L_Driveoff_Pin,
 800f400:	2201      	movs	r2, #1
 800f402:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f406:	480c      	ldr	r0, [pc, #48]	@ (800f438 <Motor_Init+0x4c>)
 800f408:	f7f5 fbce 	bl	8004ba8 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(Motor_R_Driveoff_GPIO_Port, Motor_R_Driveoff_Pin,
 800f40c:	2201      	movs	r2, #1
 800f40e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f412:	480a      	ldr	r0, [pc, #40]	@ (800f43c <Motor_Init+0x50>)
 800f414:	f7f5 fbc8 	bl	8004ba8 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(Motor_L_Brake_GPIO_Port, Motor_L_Brake_Pin, GPIO_PIN_SET);
 800f418:	2201      	movs	r2, #1
 800f41a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800f41e:	4806      	ldr	r0, [pc, #24]	@ (800f438 <Motor_Init+0x4c>)
 800f420:	f7f5 fbc2 	bl	8004ba8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor_R_Brake_GPIO_Port, Motor_R_Brake_Pin, GPIO_PIN_SET);
 800f424:	2201      	movs	r2, #1
 800f426:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800f42a:	4804      	ldr	r0, [pc, #16]	@ (800f43c <Motor_Init+0x50>)
 800f42c:	f7f5 fbbc 	bl	8004ba8 <HAL_GPIO_WritePin>
}
 800f430:	bf00      	nop
 800f432:	bd80      	pop	{r7, pc}
 800f434:	24001080 	.word	0x24001080
 800f438:	58020c00 	.word	0x58020c00
 800f43c:	58020000 	.word	0x58020000

0800f440 <Motor_Test_Menu>:
		{ "6.M PI CTL", MCF8316C_PID_CONTROL},
		{ "7.M SPEED ", },
		{ "8.OUT     ", }
};

void Motor_Test_Menu() {
 800f440:	b580      	push	{r7, lr}
 800f442:	b082      	sub	sp, #8
 800f444:	af00      	add	r7, sp, #0
	Encoder_Start();
 800f446:	f000 f879 	bl	800f53c <Encoder_Start>
	static uint8_t maxMenu = sizeof(motorMenu) / sizeof(menu_t);
	static uint8_t beforeMenu = 0;
	while (1) {
		uint32_t cnt = ((hlptim1.Instance->CNT + 128) / 256 + beforeMenu)
 800f44a:	4b33      	ldr	r3, [pc, #204]	@ (800f518 <Motor_Test_Menu+0xd8>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	69db      	ldr	r3, [r3, #28]
 800f450:	3380      	adds	r3, #128	@ 0x80
 800f452:	0a1b      	lsrs	r3, r3, #8
 800f454:	4a31      	ldr	r2, [pc, #196]	@ (800f51c <Motor_Test_Menu+0xdc>)
 800f456:	7812      	ldrb	r2, [r2, #0]
 800f458:	4413      	add	r3, r2
				% maxMenu;
 800f45a:	4a31      	ldr	r2, [pc, #196]	@ (800f520 <Motor_Test_Menu+0xe0>)
 800f45c:	7812      	ldrb	r2, [r2, #0]
		uint32_t cnt = ((hlptim1.Instance->CNT + 128) / 256 + beforeMenu)
 800f45e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f462:	fb01 f202 	mul.w	r2, r1, r2
 800f466:	1a9b      	subs	r3, r3, r2
 800f468:	603b      	str	r3, [r7, #0]
		Custom_LCD_Printf(0, 0, "Main Menu", hlptim1.Instance->CNT);
 800f46a:	4b2b      	ldr	r3, [pc, #172]	@ (800f518 <Motor_Test_Menu+0xd8>)
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	69db      	ldr	r3, [r3, #28]
 800f470:	4a2c      	ldr	r2, [pc, #176]	@ (800f524 <Motor_Test_Menu+0xe4>)
 800f472:	2100      	movs	r1, #0
 800f474:	2000      	movs	r0, #0
 800f476:	f7f1 fe51 	bl	800111c <Custom_LCD_Printf>
		for (uint8_t i = 0; i < maxMenu; i++) {
 800f47a:	2300      	movs	r3, #0
 800f47c:	71fb      	strb	r3, [r7, #7]
 800f47e:	e011      	b.n	800f4a4 <Motor_Test_Menu+0x64>
			Set_Color(cnt, i);
 800f480:	79fb      	ldrb	r3, [r7, #7]
 800f482:	4619      	mov	r1, r3
 800f484:	6838      	ldr	r0, [r7, #0]
 800f486:	f7f1 feb7 	bl	80011f8 <Set_Color>
			Custom_LCD_Printf(0, i + 1, "%s", (motorMenu + i)->name);
 800f48a:	79fb      	ldrb	r3, [r7, #7]
 800f48c:	1c59      	adds	r1, r3, #1
 800f48e:	79fb      	ldrb	r3, [r7, #7]
 800f490:	011b      	lsls	r3, r3, #4
 800f492:	4a25      	ldr	r2, [pc, #148]	@ (800f528 <Motor_Test_Menu+0xe8>)
 800f494:	4413      	add	r3, r2
 800f496:	4a25      	ldr	r2, [pc, #148]	@ (800f52c <Motor_Test_Menu+0xec>)
 800f498:	2000      	movs	r0, #0
 800f49a:	f7f1 fe3f 	bl	800111c <Custom_LCD_Printf>
		for (uint8_t i = 0; i < maxMenu; i++) {
 800f49e:	79fb      	ldrb	r3, [r7, #7]
 800f4a0:	3301      	adds	r3, #1
 800f4a2:	71fb      	strb	r3, [r7, #7]
 800f4a4:	4b1e      	ldr	r3, [pc, #120]	@ (800f520 <Motor_Test_Menu+0xe0>)
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	79fa      	ldrb	r2, [r7, #7]
 800f4aa:	429a      	cmp	r2, r3
 800f4ac:	d3e8      	bcc.n	800f480 <Motor_Test_Menu+0x40>
		}
		POINT_COLOR = WHITE;
 800f4ae:	4b20      	ldr	r3, [pc, #128]	@ (800f530 <Motor_Test_Menu+0xf0>)
 800f4b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f4b4:	801a      	strh	r2, [r3, #0]
		BACK_COLOR = BLACK;
 800f4b6:	4b1f      	ldr	r3, [pc, #124]	@ (800f534 <Motor_Test_Menu+0xf4>)
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	801a      	strh	r2, [r3, #0]
		//		Show_Remain_Battery();
		if (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET) {
 800f4bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f4c0:	481d      	ldr	r0, [pc, #116]	@ (800f538 <Motor_Test_Menu+0xf8>)
 800f4c2:	f7f5 fb59 	bl	8004b78 <HAL_GPIO_ReadPin>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	2b01      	cmp	r3, #1
 800f4ca:	d1be      	bne.n	800f44a <Motor_Test_Menu+0xa>
			while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 800f4cc:	bf00      	nop
 800f4ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f4d2:	4819      	ldr	r0, [pc, #100]	@ (800f538 <Motor_Test_Menu+0xf8>)
 800f4d4:	f7f5 fb50 	bl	8004b78 <HAL_GPIO_ReadPin>
 800f4d8:	4603      	mov	r3, r0
 800f4da:	2b01      	cmp	r3, #1
 800f4dc:	d0f7      	beq.n	800f4ce <Motor_Test_Menu+0x8e>
				;
			Custom_LCD_Clear();
 800f4de:	f7f1 fe6f 	bl	80011c0 <Custom_LCD_Clear>
			Encoder_Stop();
 800f4e2:	f000 f86d 	bl	800f5c0 <Encoder_Stop>
			if (cnt == maxMenu - 1)
 800f4e6:	4b0e      	ldr	r3, [pc, #56]	@ (800f520 <Motor_Test_Menu+0xe0>)
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	1e5a      	subs	r2, r3, #1
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	d00e      	beq.n	800f510 <Motor_Test_Menu+0xd0>
				return;
			(motorMenu + cnt)->func();
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	011b      	lsls	r3, r3, #4
 800f4f6:	4a0c      	ldr	r2, [pc, #48]	@ (800f528 <Motor_Test_Menu+0xe8>)
 800f4f8:	4413      	add	r3, r2
 800f4fa:	68db      	ldr	r3, [r3, #12]
 800f4fc:	4798      	blx	r3
			Encoder_Start();
 800f4fe:	f000 f81d 	bl	800f53c <Encoder_Start>
			Custom_LCD_Clear();
 800f502:	f7f1 fe5d 	bl	80011c0 <Custom_LCD_Clear>
			beforeMenu = cnt;
 800f506:	683b      	ldr	r3, [r7, #0]
 800f508:	b2da      	uxtb	r2, r3
 800f50a:	4b04      	ldr	r3, [pc, #16]	@ (800f51c <Motor_Test_Menu+0xdc>)
 800f50c:	701a      	strb	r2, [r3, #0]
	while (1) {
 800f50e:	e79c      	b.n	800f44a <Motor_Test_Menu+0xa>
				return;
 800f510:	bf00      	nop
		}
	}
}
 800f512:	3708      	adds	r7, #8
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}
 800f518:	24000ce0 	.word	0x24000ce0
 800f51c:	24000adc 	.word	0x24000adc
 800f520:	2400019c 	.word	0x2400019c
 800f524:	080170d4 	.word	0x080170d4
 800f528:	2400011c 	.word	0x2400011c
 800f52c:	080170e0 	.word	0x080170e0
 800f530:	24000020 	.word	0x24000020
 800f534:	240005b0 	.word	0x240005b0
 800f538:	58020800 	.word	0x58020800

0800f53c <Encoder_Start>:
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(Motor_R_Brake_GPIO_Port, Motor_R_Brake_Pin,
			GPIO_PIN_RESET);
}

void Encoder_Start() {
 800f53c:	b580      	push	{r7, lr}
 800f53e:	af00      	add	r7, sp, #0
	HAL_LPTIM_Encoder_Start(ENCODER_L_TIM, ENCODER_PERIOD);
 800f540:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800f544:	4804      	ldr	r0, [pc, #16]	@ (800f558 <Encoder_Start+0x1c>)
 800f546:	f7f6 f9fb 	bl	8005940 <HAL_LPTIM_Encoder_Start>
	HAL_LPTIM_Encoder_Start(ENCODER_R_TIM, ENCODER_PERIOD);
 800f54a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800f54e:	4803      	ldr	r0, [pc, #12]	@ (800f55c <Encoder_Start+0x20>)
 800f550:	f7f6 f9f6 	bl	8005940 <HAL_LPTIM_Encoder_Start>
}
 800f554:	bf00      	nop
 800f556:	bd80      	pop	{r7, pc}
 800f558:	24000d18 	.word	0x24000d18
 800f55c:	24000ce0 	.word	0x24000ce0

0800f560 <Motor_Stop>:

void Motor_Stop() {
 800f560:	b580      	push	{r7, lr}
 800f562:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(MOTOR_L_TIM, MOTOR_L_CHANNEL);
 800f564:	2100      	movs	r1, #0
 800f566:	4812      	ldr	r0, [pc, #72]	@ (800f5b0 <Motor_Stop+0x50>)
 800f568:	f7fd f95e 	bl	800c828 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(MOTOR_R_TIM, MOTOR_R_CHANNEL);
 800f56c:	2104      	movs	r1, #4
 800f56e:	4810      	ldr	r0, [pc, #64]	@ (800f5b0 <Motor_Stop+0x50>)
 800f570:	f7fd f95a 	bl	800c828 <HAL_TIM_PWM_Stop>

	HAL_LPTIM_Counter_Stop_IT(MOTOR_PID_TIM);
 800f574:	480f      	ldr	r0, [pc, #60]	@ (800f5b4 <Motor_Stop+0x54>)
 800f576:	f7f6 faba 	bl	8005aee <HAL_LPTIM_Counter_Stop_IT>

	HAL_GPIO_WritePin(Motor_L_Driveoff_GPIO_Port, Motor_L_Driveoff_Pin,
 800f57a:	2201      	movs	r2, #1
 800f57c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f580:	480d      	ldr	r0, [pc, #52]	@ (800f5b8 <Motor_Stop+0x58>)
 800f582:	f7f5 fb11 	bl	8004ba8 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(Motor_R_Driveoff_GPIO_Port, Motor_R_Driveoff_Pin,
 800f586:	2201      	movs	r2, #1
 800f588:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f58c:	480b      	ldr	r0, [pc, #44]	@ (800f5bc <Motor_Stop+0x5c>)
 800f58e:	f7f5 fb0b 	bl	8004ba8 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(Motor_L_Brake_GPIO_Port, Motor_L_Brake_Pin, GPIO_PIN_SET);
 800f592:	2201      	movs	r2, #1
 800f594:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800f598:	4807      	ldr	r0, [pc, #28]	@ (800f5b8 <Motor_Stop+0x58>)
 800f59a:	f7f5 fb05 	bl	8004ba8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor_R_Brake_GPIO_Port, Motor_R_Brake_Pin, GPIO_PIN_SET);
 800f59e:	2201      	movs	r2, #1
 800f5a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800f5a4:	4805      	ldr	r0, [pc, #20]	@ (800f5bc <Motor_Stop+0x5c>)
 800f5a6:	f7f5 faff 	bl	8004ba8 <HAL_GPIO_WritePin>
}
 800f5aa:	bf00      	nop
 800f5ac:	bd80      	pop	{r7, pc}
 800f5ae:	bf00      	nop
 800f5b0:	24001080 	.word	0x24001080
 800f5b4:	24000d88 	.word	0x24000d88
 800f5b8:	58020c00 	.word	0x58020c00
 800f5bc:	58020000 	.word	0x58020000

0800f5c0 <Encoder_Stop>:

void Encoder_Stop() {
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	af00      	add	r7, sp, #0
	HAL_LPTIM_Encoder_Stop(ENCODER_L_TIM);
 800f5c4:	4803      	ldr	r0, [pc, #12]	@ (800f5d4 <Encoder_Stop+0x14>)
 800f5c6:	f7f6 fa07 	bl	80059d8 <HAL_LPTIM_Encoder_Stop>
	HAL_LPTIM_Encoder_Stop(ENCODER_R_TIM);
 800f5ca:	4803      	ldr	r0, [pc, #12]	@ (800f5d8 <Encoder_Stop+0x18>)
 800f5cc:	f7f6 fa04 	bl	80059d8 <HAL_LPTIM_Encoder_Stop>
}
 800f5d0:	bf00      	nop
 800f5d2:	bd80      	pop	{r7, pc}
 800f5d4:	24000d18 	.word	0x24000d18
 800f5d8:	24000ce0 	.word	0x24000ce0
 800f5dc:	00000000 	.word	0x00000000

0800f5e0 <Motor_LPTIM4_IRQ>:

void Motor_LPTIM4_IRQ() {
 800f5e0:	b480      	push	{r7}
 800f5e2:	b089      	sub	sp, #36	@ 0x24
 800f5e4:	af00      	add	r7, sp, #0
	uint32_t arr_L = __HAL_TIM_GET_AUTORELOAD(MOTOR_L_TIM);
 800f5e6:	4b38      	ldr	r3, [pc, #224]	@ (800f6c8 <Motor_LPTIM4_IRQ+0xe8>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5ec:	61fb      	str	r3, [r7, #28]
	uint32_t arr_R = __HAL_TIM_GET_AUTORELOAD(MOTOR_R_TIM);
 800f5ee:	4b36      	ldr	r3, [pc, #216]	@ (800f6c8 <Motor_LPTIM4_IRQ+0xe8>)
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5f4:	61bb      	str	r3, [r7, #24]

	float_t mps_L = motor[ML].mps * SPUR_GEAR / PINION_GEAR;
 800f5f6:	4b35      	ldr	r3, [pc, #212]	@ (800f6cc <Motor_LPTIM4_IRQ+0xec>)
 800f5f8:	edd3 7a00 	vldr	s15, [r3]
 800f5fc:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800f6d0 <Motor_LPTIM4_IRQ+0xf0>
 800f600:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f604:	eef2 6a06 	vmov.f32	s13, #38	@ 0x41300000  11.0
 800f608:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f60c:	edc7 7a05 	vstr	s15, [r7, #20]
	float_t rps_L = mps_L / METER_PER_ROTOR;
 800f610:	edd7 7a05 	vldr	s15, [r7, #20]
 800f614:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800f618:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 800f6c0 <Motor_LPTIM4_IRQ+0xe0>
 800f61c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f620:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800f624:	edc7 7a04 	vstr	s15, [r7, #16]

	uint32_t dutyL = arr_L * rps_L / MAX_SPEED_VALUE;
 800f628:	69fb      	ldr	r3, [r7, #28]
 800f62a:	ee07 3a90 	vmov	s15, r3
 800f62e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f632:	edd7 7a04 	vldr	s15, [r7, #16]
 800f636:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f63a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800f6d4 <Motor_LPTIM4_IRQ+0xf4>
 800f63e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f646:	ee17 3a90 	vmov	r3, s15
 800f64a:	60fb      	str	r3, [r7, #12]

	float_t mps_R = motor[MR].mps * SPUR_GEAR / PINION_GEAR;
 800f64c:	4b1f      	ldr	r3, [pc, #124]	@ (800f6cc <Motor_LPTIM4_IRQ+0xec>)
 800f64e:	edd3 7a02 	vldr	s15, [r3, #8]
 800f652:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800f6d0 <Motor_LPTIM4_IRQ+0xf0>
 800f656:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f65a:	eef2 6a06 	vmov.f32	s13, #38	@ 0x41300000  11.0
 800f65e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f662:	edc7 7a02 	vstr	s15, [r7, #8]
	float_t rps_R = mps_R / METER_PER_ROTOR;
 800f666:	edd7 7a02 	vldr	s15, [r7, #8]
 800f66a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800f66e:	ed9f 5b14 	vldr	d5, [pc, #80]	@ 800f6c0 <Motor_LPTIM4_IRQ+0xe0>
 800f672:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f676:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800f67a:	edc7 7a01 	vstr	s15, [r7, #4]

	uint32_t dutyR = arr_R * rps_R / MAX_SPEED_VALUE;
 800f67e:	69bb      	ldr	r3, [r7, #24]
 800f680:	ee07 3a90 	vmov	s15, r3
 800f684:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f688:	edd7 7a01 	vldr	s15, [r7, #4]
 800f68c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f690:	eddf 6a10 	vldr	s13, [pc, #64]	@ 800f6d4 <Motor_LPTIM4_IRQ+0xf4>
 800f694:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f698:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f69c:	ee17 3a90 	vmov	r3, s15
 800f6a0:	603b      	str	r3, [r7, #0]


	__HAL_TIM_SET_COMPARE(MOTOR_L_TIM, MOTOR_L_CHANNEL, dutyL);
 800f6a2:	4b09      	ldr	r3, [pc, #36]	@ (800f6c8 <Motor_LPTIM4_IRQ+0xe8>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	68fa      	ldr	r2, [r7, #12]
 800f6a8:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(MOTOR_R_TIM, MOTOR_R_CHANNEL, dutyR);
 800f6aa:	4b07      	ldr	r3, [pc, #28]	@ (800f6c8 <Motor_LPTIM4_IRQ+0xe8>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	683a      	ldr	r2, [r7, #0]
 800f6b0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800f6b2:	bf00      	nop
 800f6b4:	3724      	adds	r7, #36	@ 0x24
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6bc:	4770      	bx	lr
 800f6be:	bf00      	nop
 800f6c0:	607fcf5f 	.word	0x607fcf5f
 800f6c4:	3fc14a94 	.word	0x3fc14a94
 800f6c8:	24001080 	.word	0x24001080
 800f6cc:	24000acc 	.word	0x24000acc
 800f6d0:	421c0000 	.word	0x421c0000
 800f6d4:	444a8000 	.word	0x444a8000

0800f6d8 <Motor_Test_Encoder>:


void Motor_Test_Encoder() {
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	af00      	add	r7, sp, #0
	Encoder_Start();
 800f6dc:	f7ff ff2e 	bl	800f53c <Encoder_Start>
	Custom_LCD_Printf(0, 0, "EncoderL");
 800f6e0:	4a17      	ldr	r2, [pc, #92]	@ (800f740 <Motor_Test_Encoder+0x68>)
 800f6e2:	2100      	movs	r1, #0
 800f6e4:	2000      	movs	r0, #0
 800f6e6:	f7f1 fd19 	bl	800111c <Custom_LCD_Printf>
	Custom_LCD_Printf(0, 2, "EncoderR");
 800f6ea:	4a16      	ldr	r2, [pc, #88]	@ (800f744 <Motor_Test_Encoder+0x6c>)
 800f6ec:	2102      	movs	r1, #2
 800f6ee:	2000      	movs	r0, #0
 800f6f0:	f7f1 fd14 	bl	800111c <Custom_LCD_Printf>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 800f6f4:	e00f      	b.n	800f716 <Motor_Test_Encoder+0x3e>
		Custom_LCD_Printf(0, 1, "%5d", *ENCODER_L_TIM.Instance->CNT);
 800f6f6:	4b14      	ldr	r3, [pc, #80]	@ (800f748 <Motor_Test_Encoder+0x70>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	69db      	ldr	r3, [r3, #28]
 800f6fc:	4a13      	ldr	r2, [pc, #76]	@ (800f74c <Motor_Test_Encoder+0x74>)
 800f6fe:	2101      	movs	r1, #1
 800f700:	2000      	movs	r0, #0
 800f702:	f7f1 fd0b 	bl	800111c <Custom_LCD_Printf>
		Custom_LCD_Printf(0, 3, "%5d", *ENCODER_R_TIM.Instance->CNT);
 800f706:	4b12      	ldr	r3, [pc, #72]	@ (800f750 <Motor_Test_Encoder+0x78>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	69db      	ldr	r3, [r3, #28]
 800f70c:	4a0f      	ldr	r2, [pc, #60]	@ (800f74c <Motor_Test_Encoder+0x74>)
 800f70e:	2103      	movs	r1, #3
 800f710:	2000      	movs	r0, #0
 800f712:	f7f1 fd03 	bl	800111c <Custom_LCD_Printf>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 800f716:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f71a:	480e      	ldr	r0, [pc, #56]	@ (800f754 <Motor_Test_Encoder+0x7c>)
 800f71c:	f7f5 fa2c 	bl	8004b78 <HAL_GPIO_ReadPin>
 800f720:	4603      	mov	r3, r0
 800f722:	2b01      	cmp	r3, #1
 800f724:	d1e7      	bne.n	800f6f6 <Motor_Test_Encoder+0x1e>
	}
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 800f726:	bf00      	nop
 800f728:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f72c:	4809      	ldr	r0, [pc, #36]	@ (800f754 <Motor_Test_Encoder+0x7c>)
 800f72e:	f7f5 fa23 	bl	8004b78 <HAL_GPIO_ReadPin>
 800f732:	4603      	mov	r3, r0
 800f734:	2b01      	cmp	r3, #1
 800f736:	d0f7      	beq.n	800f728 <Motor_Test_Encoder+0x50>
		;
	Encoder_Stop();
 800f738:	f7ff ff42 	bl	800f5c0 <Encoder_Stop>
}
 800f73c:	bf00      	nop
 800f73e:	bd80      	pop	{r7, pc}
 800f740:	080170e4 	.word	0x080170e4
 800f744:	080170f0 	.word	0x080170f0
 800f748:	24000d18 	.word	0x24000d18
 800f74c:	080170fc 	.word	0x080170fc
 800f750:	24000ce0 	.word	0x24000ce0
 800f754:	58020800 	.word	0x58020800

0800f758 <Sensor_Test_Menu>:
//	if(hadc->Instance == ADC1){
//		adc_dma_complete_flag = 1;
//	}
//}

void Sensor_Test_Menu() {
 800f758:	b580      	push	{r7, lr}
 800f75a:	b082      	sub	sp, #8
 800f75c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, GPIO_PIN_SET);
 800f75e:	2201      	movs	r2, #1
 800f760:	2108      	movs	r1, #8
 800f762:	4836      	ldr	r0, [pc, #216]	@ (800f83c <Sensor_Test_Menu+0xe4>)
 800f764:	f7f5 fa20 	bl	8004ba8 <HAL_GPIO_WritePin>
//		ADC_Battery_Start();
	Encoder_Start();
 800f768:	f7ff fee8 	bl	800f53c <Encoder_Start>
	static uint8_t maxMenu = sizeof(sensorMenu) / sizeof(menu_t);
	static uint8_t beforeMenu = 0;
	while (1) {
		uint32_t cnt = ((hlptim1.Instance->CNT + 128) / 256 + beforeMenu)
 800f76c:	4b34      	ldr	r3, [pc, #208]	@ (800f840 <Sensor_Test_Menu+0xe8>)
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	69db      	ldr	r3, [r3, #28]
 800f772:	3380      	adds	r3, #128	@ 0x80
 800f774:	0a1b      	lsrs	r3, r3, #8
 800f776:	4a33      	ldr	r2, [pc, #204]	@ (800f844 <Sensor_Test_Menu+0xec>)
 800f778:	7812      	ldrb	r2, [r2, #0]
 800f77a:	4413      	add	r3, r2
				% maxMenu;
 800f77c:	4a32      	ldr	r2, [pc, #200]	@ (800f848 <Sensor_Test_Menu+0xf0>)
 800f77e:	7812      	ldrb	r2, [r2, #0]
		uint32_t cnt = ((hlptim1.Instance->CNT + 128) / 256 + beforeMenu)
 800f780:	fbb3 f1f2 	udiv	r1, r3, r2
 800f784:	fb01 f202 	mul.w	r2, r1, r2
 800f788:	1a9b      	subs	r3, r3, r2
 800f78a:	603b      	str	r3, [r7, #0]
		Custom_LCD_Printf(0, 0, "Main Menu", hlptim1.Instance->CNT);
 800f78c:	4b2c      	ldr	r3, [pc, #176]	@ (800f840 <Sensor_Test_Menu+0xe8>)
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	69db      	ldr	r3, [r3, #28]
 800f792:	4a2e      	ldr	r2, [pc, #184]	@ (800f84c <Sensor_Test_Menu+0xf4>)
 800f794:	2100      	movs	r1, #0
 800f796:	2000      	movs	r0, #0
 800f798:	f7f1 fcc0 	bl	800111c <Custom_LCD_Printf>
		for (uint8_t i = 0; i < maxMenu; i++) {
 800f79c:	2300      	movs	r3, #0
 800f79e:	71fb      	strb	r3, [r7, #7]
 800f7a0:	e011      	b.n	800f7c6 <Sensor_Test_Menu+0x6e>
			Set_Color(cnt, i);
 800f7a2:	79fb      	ldrb	r3, [r7, #7]
 800f7a4:	4619      	mov	r1, r3
 800f7a6:	6838      	ldr	r0, [r7, #0]
 800f7a8:	f7f1 fd26 	bl	80011f8 <Set_Color>
			Custom_LCD_Printf(0, i + 1, "%s", (sensorMenu + i)->name);
 800f7ac:	79fb      	ldrb	r3, [r7, #7]
 800f7ae:	1c59      	adds	r1, r3, #1
 800f7b0:	79fb      	ldrb	r3, [r7, #7]
 800f7b2:	011b      	lsls	r3, r3, #4
 800f7b4:	4a26      	ldr	r2, [pc, #152]	@ (800f850 <Sensor_Test_Menu+0xf8>)
 800f7b6:	4413      	add	r3, r2
 800f7b8:	4a26      	ldr	r2, [pc, #152]	@ (800f854 <Sensor_Test_Menu+0xfc>)
 800f7ba:	2000      	movs	r0, #0
 800f7bc:	f7f1 fcae 	bl	800111c <Custom_LCD_Printf>
		for (uint8_t i = 0; i < maxMenu; i++) {
 800f7c0:	79fb      	ldrb	r3, [r7, #7]
 800f7c2:	3301      	adds	r3, #1
 800f7c4:	71fb      	strb	r3, [r7, #7]
 800f7c6:	4b20      	ldr	r3, [pc, #128]	@ (800f848 <Sensor_Test_Menu+0xf0>)
 800f7c8:	781b      	ldrb	r3, [r3, #0]
 800f7ca:	79fa      	ldrb	r2, [r7, #7]
 800f7cc:	429a      	cmp	r2, r3
 800f7ce:	d3e8      	bcc.n	800f7a2 <Sensor_Test_Menu+0x4a>
		}
		POINT_COLOR = WHITE;
 800f7d0:	4b21      	ldr	r3, [pc, #132]	@ (800f858 <Sensor_Test_Menu+0x100>)
 800f7d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f7d6:	801a      	strh	r2, [r3, #0]
		BACK_COLOR = BLACK;
 800f7d8:	4b20      	ldr	r3, [pc, #128]	@ (800f85c <Sensor_Test_Menu+0x104>)
 800f7da:	2200      	movs	r2, #0
 800f7dc:	801a      	strh	r2, [r3, #0]
		//		Show_Remain_Battery();
		if (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET) {
 800f7de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f7e2:	481f      	ldr	r0, [pc, #124]	@ (800f860 <Sensor_Test_Menu+0x108>)
 800f7e4:	f7f5 f9c8 	bl	8004b78 <HAL_GPIO_ReadPin>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	2b01      	cmp	r3, #1
 800f7ec:	d1be      	bne.n	800f76c <Sensor_Test_Menu+0x14>
			while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 800f7ee:	bf00      	nop
 800f7f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f7f4:	481a      	ldr	r0, [pc, #104]	@ (800f860 <Sensor_Test_Menu+0x108>)
 800f7f6:	f7f5 f9bf 	bl	8004b78 <HAL_GPIO_ReadPin>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	2b01      	cmp	r3, #1
 800f7fe:	d0f7      	beq.n	800f7f0 <Sensor_Test_Menu+0x98>
				;
			Custom_LCD_Clear();
 800f800:	f7f1 fcde 	bl	80011c0 <Custom_LCD_Clear>
			Encoder_Stop();
 800f804:	f7ff fedc 	bl	800f5c0 <Encoder_Stop>
			if (cnt == maxMenu - 1)
 800f808:	4b0f      	ldr	r3, [pc, #60]	@ (800f848 <Sensor_Test_Menu+0xf0>)
 800f80a:	781b      	ldrb	r3, [r3, #0]
 800f80c:	1e5a      	subs	r2, r3, #1
 800f80e:	683b      	ldr	r3, [r7, #0]
 800f810:	429a      	cmp	r2, r3
 800f812:	d00e      	beq.n	800f832 <Sensor_Test_Menu+0xda>
				return;
			(sensorMenu + cnt)->func();
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	011b      	lsls	r3, r3, #4
 800f818:	4a0d      	ldr	r2, [pc, #52]	@ (800f850 <Sensor_Test_Menu+0xf8>)
 800f81a:	4413      	add	r3, r2
 800f81c:	68db      	ldr	r3, [r3, #12]
 800f81e:	4798      	blx	r3
			Encoder_Start();
 800f820:	f7ff fe8c 	bl	800f53c <Encoder_Start>
			Custom_LCD_Clear();
 800f824:	f7f1 fccc 	bl	80011c0 <Custom_LCD_Clear>
			beforeMenu = cnt;
 800f828:	683b      	ldr	r3, [r7, #0]
 800f82a:	b2da      	uxtb	r2, r3
 800f82c:	4b05      	ldr	r3, [pc, #20]	@ (800f844 <Sensor_Test_Menu+0xec>)
 800f82e:	701a      	strb	r2, [r3, #0]
	while (1) {
 800f830:	e79c      	b.n	800f76c <Sensor_Test_Menu+0x14>
				return;
 800f832:	bf00      	nop
		}
	}
}
 800f834:	3708      	adds	r7, #8
 800f836:	46bd      	mov	sp, r7
 800f838:	bd80      	pop	{r7, pc}
 800f83a:	bf00      	nop
 800f83c:	58021000 	.word	0x58021000
 800f840:	24000ce0 	.word	0x24000ce0
 800f844:	24000adf 	.word	0x24000adf
 800f848:	24000384 	.word	0x24000384
 800f84c:	08017100 	.word	0x08017100
 800f850:	240002cc 	.word	0x240002cc
 800f854:	0801710c 	.word	0x0801710c
 800f858:	24000020 	.word	0x24000020
 800f85c:	240005b0 	.word	0x240005b0
 800f860:	58020800 	.word	0x58020800

0800f864 <Sensor_Start>:

void Sensor_Start() {
 800f864:	b580      	push	{r7, lr}
 800f866:	af00      	add	r7, sp, #0
	is_sensor_start = true;
 800f868:	4b09      	ldr	r3, [pc, #36]	@ (800f890 <Sensor_Start+0x2c>)
 800f86a:	2201      	movs	r2, #1
 800f86c:	701a      	strb	r2, [r3, #0]
	is_marker_start = true;
 800f86e:	4b09      	ldr	r3, [pc, #36]	@ (800f894 <Sensor_Start+0x30>)
 800f870:	2201      	movs	r2, #1
 800f872:	701a      	strb	r2, [r3, #0]
	HAL_LPTIM_Counter_Start_IT(ADC_SENSOR_TIM, 0);
 800f874:	2100      	movs	r1, #0
 800f876:	4808      	ldr	r0, [pc, #32]	@ (800f898 <Sensor_Start+0x34>)
 800f878:	f7f6 f8d2 	bl	8005a20 <HAL_LPTIM_Counter_Start_IT>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 800f87c:	2100      	movs	r1, #0
 800f87e:	4807      	ldr	r0, [pc, #28]	@ (800f89c <Sensor_Start+0x38>)
 800f880:	f7fc fec4 	bl	800c60c <HAL_TIM_PWM_Start>
	htim15.Instance->CCR1 = 0;
 800f884:	4b05      	ldr	r3, [pc, #20]	@ (800f89c <Sensor_Start+0x38>)
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	2200      	movs	r2, #0
 800f88a:	635a      	str	r2, [r3, #52]	@ 0x34
//	if (HAL_ADC_Start_DMA(ADC_SENSOR_CHANNEL, (uint32_t*) adc_dma_buffer,
//			NUM_ADC_CHANNELS) != HAL_OK) {
//		Error_Handler();
//	}

}
 800f88c:	bf00      	nop
 800f88e:	bd80      	pop	{r7, pc}
 800f890:	24000add 	.word	0x24000add
 800f894:	24000ade 	.word	0x24000ade
 800f898:	24000d50 	.word	0x24000d50
 800f89c:	240010cc 	.word	0x240010cc

0800f8a0 <Sensor_Stop>:

void Sensor_Stop() {
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	af00      	add	r7, sp, #0
	htim15.Instance->CCR1 = 0;
 800f8a4:	4b0e      	ldr	r3, [pc, #56]	@ (800f8e0 <Sensor_Stop+0x40>)
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_GPIO_WritePin(MARK_L_GPIO_Port, MARK_L_Pin, 0);
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f8b2:	480c      	ldr	r0, [pc, #48]	@ (800f8e4 <Sensor_Stop+0x44>)
 800f8b4:	f7f5 f978 	bl	8004ba8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MARK_R_GPIO_Port, MARK_R_Pin, 0);
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	2104      	movs	r1, #4
 800f8bc:	4809      	ldr	r0, [pc, #36]	@ (800f8e4 <Sensor_Stop+0x44>)
 800f8be:	f7f5 f973 	bl	8004ba8 <HAL_GPIO_WritePin>
	HAL_ADC_Stop(ADC_SENSOR_CHANNEL);
 800f8c2:	4809      	ldr	r0, [pc, #36]	@ (800f8e8 <Sensor_Stop+0x48>)
 800f8c4:	f7f3 fdac 	bl	8003420 <HAL_ADC_Stop>
	HAL_ADC_Stop(ADC_MARKER_CHANNEL);
 800f8c8:	4808      	ldr	r0, [pc, #32]	@ (800f8ec <Sensor_Stop+0x4c>)
 800f8ca:	f7f3 fda9 	bl	8003420 <HAL_ADC_Stop>
	HAL_LPTIM_Counter_Stop_IT(ADC_SENSOR_TIM);
 800f8ce:	4808      	ldr	r0, [pc, #32]	@ (800f8f0 <Sensor_Stop+0x50>)
 800f8d0:	f7f6 f90d 	bl	8005aee <HAL_LPTIM_Counter_Stop_IT>
	HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 800f8d4:	2100      	movs	r1, #0
 800f8d6:	4802      	ldr	r0, [pc, #8]	@ (800f8e0 <Sensor_Stop+0x40>)
 800f8d8:	f7fc ffa6 	bl	800c828 <HAL_TIM_PWM_Stop>
}
 800f8dc:	bf00      	nop
 800f8de:	bd80      	pop	{r7, pc}
 800f8e0:	240010cc 	.word	0x240010cc
 800f8e4:	58021000 	.word	0x58021000
 800f8e8:	24000b00 	.word	0x24000b00
 800f8ec:	24000bc8 	.word	0x24000bc8
 800f8f0:	24000d50 	.word	0x24000d50

0800f8f4 <Sensor_ADC_Read>:

__STATIC_INLINE uint16_t Sensor_ADC_Read(ADC_HandleTypeDef *hadc) {
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b082      	sub	sp, #8
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800f8fc:	b672      	cpsid	i
}
 800f8fe:	bf00      	nop
	static uint16_t raw;
	__disable_irq();
	HAL_ADC_Start(hadc);
 800f900:	6878      	ldr	r0, [r7, #4]
 800f902:	f7f3 fcc3 	bl	800328c <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY) == HAL_OK) {
 800f906:	f04f 31ff 	mov.w	r1, #4294967295
 800f90a:	6878      	ldr	r0, [r7, #4]
 800f90c:	f7f3 fdbc 	bl	8003488 <HAL_ADC_PollForConversion>
 800f910:	4603      	mov	r3, r0
 800f912:	2b00      	cmp	r3, #0
 800f914:	d106      	bne.n	800f924 <Sensor_ADC_Read+0x30>
		raw = HAL_ADC_GetValue(hadc);
 800f916:	6878      	ldr	r0, [r7, #4]
 800f918:	f7f3 feaa 	bl	8003670 <HAL_ADC_GetValue>
 800f91c:	4603      	mov	r3, r0
 800f91e:	b29a      	uxth	r2, r3
 800f920:	4b04      	ldr	r3, [pc, #16]	@ (800f934 <Sensor_ADC_Read+0x40>)
 800f922:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800f924:	b662      	cpsie	i
}
 800f926:	bf00      	nop
	}
	__enable_irq();
	return raw;
 800f928:	4b02      	ldr	r3, [pc, #8]	@ (800f934 <Sensor_ADC_Read+0x40>)
 800f92a:	881b      	ldrh	r3, [r3, #0]
}
 800f92c:	4618      	mov	r0, r3
 800f92e:	3708      	adds	r7, #8
 800f930:	46bd      	mov	sp, r7
 800f932:	bd80      	pop	{r7, pc}
 800f934:	24000aee 	.word	0x24000aee

0800f938 <Sensor_LPTIM3_IRQ>:

void Sensor_LPTIM3_IRQ() {
 800f938:	b580      	push	{r7, lr}
 800f93a:	b082      	sub	sp, #8
 800f93c:	af00      	add	r7, sp, #0
	static uint8_t i = 0;
	static uint8_t raw;
	static float pos_sum1 = 0.f;
	static float pos_sum2 = 0.f;

	if (is_sensor_start) {
 800f93e:	4b76      	ldr	r3, [pc, #472]	@ (800fb18 <Sensor_LPTIM3_IRQ+0x1e0>)
 800f940:	781b      	ldrb	r3, [r3, #0]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d005      	beq.n	800f952 <Sensor_LPTIM3_IRQ+0x1a>
		i = 0;
 800f946:	4b75      	ldr	r3, [pc, #468]	@ (800fb1c <Sensor_LPTIM3_IRQ+0x1e4>)
 800f948:	2200      	movs	r2, #0
 800f94a:	701a      	strb	r2, [r3, #0]
		is_sensor_start = false;
 800f94c:	4b72      	ldr	r3, [pc, #456]	@ (800fb18 <Sensor_LPTIM3_IRQ+0x1e0>)
 800f94e:	2200      	movs	r2, #0
 800f950:	701a      	strb	r2, [r3, #0]
	}

	float pos_weight = *(positionWeight + i);
 800f952:	4b72      	ldr	r3, [pc, #456]	@ (800fb1c <Sensor_LPTIM3_IRQ+0x1e4>)
 800f954:	781b      	ldrb	r3, [r3, #0]
 800f956:	009b      	lsls	r3, r3, #2
 800f958:	4a71      	ldr	r2, [pc, #452]	@ (800fb20 <Sensor_LPTIM3_IRQ+0x1e8>)
 800f95a:	4413      	add	r3, r2
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	603b      	str	r3, [r7, #0]
	uint8_t normalize = *(sensor.normalized + i);
 800f960:	4b6e      	ldr	r3, [pc, #440]	@ (800fb1c <Sensor_LPTIM3_IRQ+0x1e4>)
 800f962:	781b      	ldrb	r3, [r3, #0]
 800f964:	009b      	lsls	r3, r3, #2
 800f966:	4a6f      	ldr	r2, [pc, #444]	@ (800fb24 <Sensor_LPTIM3_IRQ+0x1ec>)
 800f968:	4413      	add	r3, r2
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	71fb      	strb	r3, [r7, #7]

	pos_sum1 -= pos_weight * normalize;
 800f96e:	4b6e      	ldr	r3, [pc, #440]	@ (800fb28 <Sensor_LPTIM3_IRQ+0x1f0>)
 800f970:	ed93 7a00 	vldr	s14, [r3]
 800f974:	79fb      	ldrb	r3, [r7, #7]
 800f976:	ee07 3a90 	vmov	s15, r3
 800f97a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f97e:	edd7 7a00 	vldr	s15, [r7]
 800f982:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f986:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f98a:	4b67      	ldr	r3, [pc, #412]	@ (800fb28 <Sensor_LPTIM3_IRQ+0x1f0>)
 800f98c:	edc3 7a00 	vstr	s15, [r3]
	pos_sum2 -= normalize;
 800f990:	4b66      	ldr	r3, [pc, #408]	@ (800fb2c <Sensor_LPTIM3_IRQ+0x1f4>)
 800f992:	ed93 7a00 	vldr	s14, [r3]
 800f996:	79fb      	ldrb	r3, [r7, #7]
 800f998:	ee07 3a90 	vmov	s15, r3
 800f99c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f9a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f9a4:	4b61      	ldr	r3, [pc, #388]	@ (800fb2c <Sensor_LPTIM3_IRQ+0x1f4>)
 800f9a6:	edc3 7a00 	vstr	s15, [r3]

	raw = Sensor_ADC_Read(ADC_SENSOR_CHANNEL) >> 4;
 800f9aa:	4861      	ldr	r0, [pc, #388]	@ (800fb30 <Sensor_LPTIM3_IRQ+0x1f8>)
 800f9ac:	f7ff ffa2 	bl	800f8f4 <Sensor_ADC_Read>
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	091b      	lsrs	r3, r3, #4
 800f9b4:	b29b      	uxth	r3, r3
 800f9b6:	b2da      	uxtb	r2, r3
 800f9b8:	4b5e      	ldr	r3, [pc, #376]	@ (800fb34 <Sensor_LPTIM3_IRQ+0x1fc>)
 800f9ba:	701a      	strb	r2, [r3, #0]

	if (raw > *(sensor.whiteMax + i))
 800f9bc:	4b5d      	ldr	r3, [pc, #372]	@ (800fb34 <Sensor_LPTIM3_IRQ+0x1fc>)
 800f9be:	781b      	ldrb	r3, [r3, #0]
 800f9c0:	4619      	mov	r1, r3
 800f9c2:	4b56      	ldr	r3, [pc, #344]	@ (800fb1c <Sensor_LPTIM3_IRQ+0x1e4>)
 800f9c4:	781b      	ldrb	r3, [r3, #0]
 800f9c6:	009b      	lsls	r3, r3, #2
 800f9c8:	4a5b      	ldr	r2, [pc, #364]	@ (800fb38 <Sensor_LPTIM3_IRQ+0x200>)
 800f9ca:	4413      	add	r3, r2
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	4299      	cmp	r1, r3
 800f9d0:	dd02      	ble.n	800f9d8 <Sensor_LPTIM3_IRQ+0xa0>
		normalize = 0xff;
 800f9d2:	23ff      	movs	r3, #255	@ 0xff
 800f9d4:	71fb      	strb	r3, [r7, #7]
 800f9d6:	e023      	b.n	800fa20 <Sensor_LPTIM3_IRQ+0xe8>
	else if (raw < *(sensor.blackMax + i))
 800f9d8:	4b56      	ldr	r3, [pc, #344]	@ (800fb34 <Sensor_LPTIM3_IRQ+0x1fc>)
 800f9da:	781b      	ldrb	r3, [r3, #0]
 800f9dc:	4619      	mov	r1, r3
 800f9de:	4b4f      	ldr	r3, [pc, #316]	@ (800fb1c <Sensor_LPTIM3_IRQ+0x1e4>)
 800f9e0:	781b      	ldrb	r3, [r3, #0]
 800f9e2:	009b      	lsls	r3, r3, #2
 800f9e4:	4a55      	ldr	r2, [pc, #340]	@ (800fb3c <Sensor_LPTIM3_IRQ+0x204>)
 800f9e6:	4413      	add	r3, r2
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	4299      	cmp	r1, r3
 800f9ec:	da02      	bge.n	800f9f4 <Sensor_LPTIM3_IRQ+0xbc>
		normalize = 0;
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	71fb      	strb	r3, [r7, #7]
 800f9f2:	e015      	b.n	800fa20 <Sensor_LPTIM3_IRQ+0xe8>
	else
		normalize = 0xff * (raw - *(sensor.blackMax + i))
 800f9f4:	4b4f      	ldr	r3, [pc, #316]	@ (800fb34 <Sensor_LPTIM3_IRQ+0x1fc>)
 800f9f6:	781b      	ldrb	r3, [r3, #0]
 800f9f8:	4619      	mov	r1, r3
 800f9fa:	4b48      	ldr	r3, [pc, #288]	@ (800fb1c <Sensor_LPTIM3_IRQ+0x1e4>)
 800f9fc:	781b      	ldrb	r3, [r3, #0]
 800f9fe:	009b      	lsls	r3, r3, #2
 800fa00:	4a4e      	ldr	r2, [pc, #312]	@ (800fb3c <Sensor_LPTIM3_IRQ+0x204>)
 800fa02:	4413      	add	r3, r2
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	1aca      	subs	r2, r1, r3
 800fa08:	4613      	mov	r3, r2
 800fa0a:	021b      	lsls	r3, r3, #8
 800fa0c:	1a9a      	subs	r2, r3, r2
				/ *(sensor.normalizeCoef + i);
 800fa0e:	4b43      	ldr	r3, [pc, #268]	@ (800fb1c <Sensor_LPTIM3_IRQ+0x1e4>)
 800fa10:	781b      	ldrb	r3, [r3, #0]
 800fa12:	009b      	lsls	r3, r3, #2
 800fa14:	494a      	ldr	r1, [pc, #296]	@ (800fb40 <Sensor_LPTIM3_IRQ+0x208>)
 800fa16:	440b      	add	r3, r1
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	fb92 f3f3 	sdiv	r3, r2, r3
		normalize = 0xff * (raw - *(sensor.blackMax + i))
 800fa1e:	71fb      	strb	r3, [r7, #7]

	sensor.state = (sensor.state & ~(0x01 << i))
 800fa20:	4b48      	ldr	r3, [pc, #288]	@ (800fb44 <Sensor_LPTIM3_IRQ+0x20c>)
 800fa22:	f9b3 2118 	ldrsh.w	r2, [r3, #280]	@ 0x118
 800fa26:	4b3d      	ldr	r3, [pc, #244]	@ (800fb1c <Sensor_LPTIM3_IRQ+0x1e4>)
 800fa28:	781b      	ldrb	r3, [r3, #0]
 800fa2a:	4619      	mov	r1, r3
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	408b      	lsls	r3, r1
 800fa30:	b21b      	sxth	r3, r3
 800fa32:	43db      	mvns	r3, r3
 800fa34:	b21b      	sxth	r3, r3
 800fa36:	4013      	ands	r3, r2
 800fa38:	b21a      	sxth	r2, r3
			| ((normalize > sensor.threshold) << i);
 800fa3a:	4b42      	ldr	r3, [pc, #264]	@ (800fb44 <Sensor_LPTIM3_IRQ+0x20c>)
 800fa3c:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
 800fa40:	79f9      	ldrb	r1, [r7, #7]
 800fa42:	4299      	cmp	r1, r3
 800fa44:	bf8c      	ite	hi
 800fa46:	2301      	movhi	r3, #1
 800fa48:	2300      	movls	r3, #0
 800fa4a:	b2db      	uxtb	r3, r3
 800fa4c:	4619      	mov	r1, r3
 800fa4e:	4b33      	ldr	r3, [pc, #204]	@ (800fb1c <Sensor_LPTIM3_IRQ+0x1e4>)
 800fa50:	781b      	ldrb	r3, [r3, #0]
 800fa52:	fa01 f303 	lsl.w	r3, r1, r3
 800fa56:	b21b      	sxth	r3, r3
 800fa58:	4313      	orrs	r3, r2
 800fa5a:	b21a      	sxth	r2, r3
	sensor.state = (sensor.state & ~(0x01 << i))
 800fa5c:	4b39      	ldr	r3, [pc, #228]	@ (800fb44 <Sensor_LPTIM3_IRQ+0x20c>)
 800fa5e:	f8a3 2118 	strh.w	r2, [r3, #280]	@ 0x118

	pos_sum1 += pos_weight * normalize;
 800fa62:	79fb      	ldrb	r3, [r7, #7]
 800fa64:	ee07 3a90 	vmov	s15, r3
 800fa68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800fa6c:	edd7 7a00 	vldr	s15, [r7]
 800fa70:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fa74:	4b2c      	ldr	r3, [pc, #176]	@ (800fb28 <Sensor_LPTIM3_IRQ+0x1f0>)
 800fa76:	edd3 7a00 	vldr	s15, [r3]
 800fa7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa7e:	4b2a      	ldr	r3, [pc, #168]	@ (800fb28 <Sensor_LPTIM3_IRQ+0x1f0>)
 800fa80:	edc3 7a00 	vstr	s15, [r3]
	pos_sum2 += normalize;
 800fa84:	79fb      	ldrb	r3, [r7, #7]
 800fa86:	ee07 3a90 	vmov	s15, r3
 800fa8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800fa8e:	4b27      	ldr	r3, [pc, #156]	@ (800fb2c <Sensor_LPTIM3_IRQ+0x1f4>)
 800fa90:	edd3 7a00 	vldr	s15, [r3]
 800fa94:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa98:	4b24      	ldr	r3, [pc, #144]	@ (800fb2c <Sensor_LPTIM3_IRQ+0x1f4>)
 800fa9a:	edc3 7a00 	vstr	s15, [r3]

	sensor.position = (pos_sum2) ? pos_sum1 / pos_sum2 : 0;
 800fa9e:	4b23      	ldr	r3, [pc, #140]	@ (800fb2c <Sensor_LPTIM3_IRQ+0x1f4>)
 800faa0:	edd3 7a00 	vldr	s15, [r3]
 800faa4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800faa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faac:	d008      	beq.n	800fac0 <Sensor_LPTIM3_IRQ+0x188>
 800faae:	4b1e      	ldr	r3, [pc, #120]	@ (800fb28 <Sensor_LPTIM3_IRQ+0x1f0>)
 800fab0:	edd3 6a00 	vldr	s13, [r3]
 800fab4:	4b1d      	ldr	r3, [pc, #116]	@ (800fb2c <Sensor_LPTIM3_IRQ+0x1f4>)
 800fab6:	ed93 7a00 	vldr	s14, [r3]
 800faba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fabe:	e001      	b.n	800fac4 <Sensor_LPTIM3_IRQ+0x18c>
 800fac0:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800fb48 <Sensor_LPTIM3_IRQ+0x210>
 800fac4:	4b1f      	ldr	r3, [pc, #124]	@ (800fb44 <Sensor_LPTIM3_IRQ+0x20c>)
 800fac6:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
	*(sensor.normalized + i) = normalize;
 800faca:	4b14      	ldr	r3, [pc, #80]	@ (800fb1c <Sensor_LPTIM3_IRQ+0x1e4>)
 800facc:	781b      	ldrb	r3, [r3, #0]
 800face:	009b      	lsls	r3, r3, #2
 800fad0:	4a14      	ldr	r2, [pc, #80]	@ (800fb24 <Sensor_LPTIM3_IRQ+0x1ec>)
 800fad2:	4413      	add	r3, r2
 800fad4:	79fa      	ldrb	r2, [r7, #7]
 800fad6:	601a      	str	r2, [r3, #0]
////			 printf("ADC[%d]: %lu\r\n", i, adc_dma_buffer[i]); // 디버깅용 출력
//			*(sensor.raw + i) = *(adc_dma_buffer + i) >> 4;
//		}
//	}

	*(sensor.raw + i) = raw;
 800fad8:	4b16      	ldr	r3, [pc, #88]	@ (800fb34 <Sensor_LPTIM3_IRQ+0x1fc>)
 800fada:	7819      	ldrb	r1, [r3, #0]
 800fadc:	4b0f      	ldr	r3, [pc, #60]	@ (800fb1c <Sensor_LPTIM3_IRQ+0x1e4>)
 800fade:	781b      	ldrb	r3, [r3, #0]
 800fae0:	009b      	lsls	r3, r3, #2
 800fae2:	4a18      	ldr	r2, [pc, #96]	@ (800fb44 <Sensor_LPTIM3_IRQ+0x20c>)
 800fae4:	4413      	add	r3, r2
 800fae6:	460a      	mov	r2, r1
 800fae8:	601a      	str	r2, [r3, #0]

	i = (i + 1) % 14;
 800faea:	4b0c      	ldr	r3, [pc, #48]	@ (800fb1c <Sensor_LPTIM3_IRQ+0x1e4>)
 800faec:	781b      	ldrb	r3, [r3, #0]
 800faee:	1c5a      	adds	r2, r3, #1
 800faf0:	4b16      	ldr	r3, [pc, #88]	@ (800fb4c <Sensor_LPTIM3_IRQ+0x214>)
 800faf2:	fb83 1302 	smull	r1, r3, r3, r2
 800faf6:	4413      	add	r3, r2
 800faf8:	10d9      	asrs	r1, r3, #3
 800fafa:	17d3      	asrs	r3, r2, #31
 800fafc:	1ac9      	subs	r1, r1, r3
 800fafe:	460b      	mov	r3, r1
 800fb00:	00db      	lsls	r3, r3, #3
 800fb02:	1a5b      	subs	r3, r3, r1
 800fb04:	005b      	lsls	r3, r3, #1
 800fb06:	1ad1      	subs	r1, r2, r3
 800fb08:	b2ca      	uxtb	r2, r1
 800fb0a:	4b04      	ldr	r3, [pc, #16]	@ (800fb1c <Sensor_LPTIM3_IRQ+0x1e4>)
 800fb0c:	701a      	strb	r2, [r3, #0]
}
 800fb0e:	bf00      	nop
 800fb10:	3708      	adds	r7, #8
 800fb12:	46bd      	mov	sp, r7
 800fb14:	bd80      	pop	{r7, pc}
 800fb16:	bf00      	nop
 800fb18:	24000add 	.word	0x24000add
 800fb1c:	24000ae0 	.word	0x24000ae0
 800fb20:	2400034c 	.word	0x2400034c
 800fb24:	24000280 	.word	0x24000280
 800fb28:	24000ae4 	.word	0x24000ae4
 800fb2c:	24000ae8 	.word	0x24000ae8
 800fb30:	24000b00 	.word	0x24000b00
 800fb34:	24000aec 	.word	0x24000aec
 800fb38:	240001d8 	.word	0x240001d8
 800fb3c:	24000210 	.word	0x24000210
 800fb40:	24000248 	.word	0x24000248
 800fb44:	240001a0 	.word	0x240001a0
 800fb48:	00000000 	.word	0x00000000
 800fb4c:	92492493 	.word	0x92492493

0800fb50 <Marker_LPTIM3_IRQ>:

void Marker_LPTIM3_IRQ() {
 800fb50:	b580      	push	{r7, lr}
 800fb52:	af00      	add	r7, sp, #0
	static uint8_t i = 0;
	static uint8_t raw;
	static uint8_t normalize;
	if (is_marker_start) {
 800fb54:	4b5b      	ldr	r3, [pc, #364]	@ (800fcc4 <Marker_LPTIM3_IRQ+0x174>)
 800fb56:	781b      	ldrb	r3, [r3, #0]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d005      	beq.n	800fb68 <Marker_LPTIM3_IRQ+0x18>
		i = 0;
 800fb5c:	4b5a      	ldr	r3, [pc, #360]	@ (800fcc8 <Marker_LPTIM3_IRQ+0x178>)
 800fb5e:	2200      	movs	r2, #0
 800fb60:	701a      	strb	r2, [r3, #0]
		is_marker_start = false;
 800fb62:	4b58      	ldr	r3, [pc, #352]	@ (800fcc4 <Marker_LPTIM3_IRQ+0x174>)
 800fb64:	2200      	movs	r2, #0
 800fb66:	701a      	strb	r2, [r3, #0]
	}

	raw = Sensor_ADC_Read(ADC_MARKER_CHANNEL);
 800fb68:	4858      	ldr	r0, [pc, #352]	@ (800fccc <Marker_LPTIM3_IRQ+0x17c>)
 800fb6a:	f7ff fec3 	bl	800f8f4 <Sensor_ADC_Read>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	b2da      	uxtb	r2, r3
 800fb72:	4b57      	ldr	r3, [pc, #348]	@ (800fcd0 <Marker_LPTIM3_IRQ+0x180>)
 800fb74:	701a      	strb	r2, [r3, #0]

	if (raw > *(sensor.whiteMax + i + 14))
 800fb76:	4b56      	ldr	r3, [pc, #344]	@ (800fcd0 <Marker_LPTIM3_IRQ+0x180>)
 800fb78:	781b      	ldrb	r3, [r3, #0]
 800fb7a:	4619      	mov	r1, r3
 800fb7c:	4b52      	ldr	r3, [pc, #328]	@ (800fcc8 <Marker_LPTIM3_IRQ+0x178>)
 800fb7e:	781b      	ldrb	r3, [r3, #0]
 800fb80:	330e      	adds	r3, #14
 800fb82:	009b      	lsls	r3, r3, #2
 800fb84:	4a53      	ldr	r2, [pc, #332]	@ (800fcd4 <Marker_LPTIM3_IRQ+0x184>)
 800fb86:	4413      	add	r3, r2
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	4299      	cmp	r1, r3
 800fb8c:	dd03      	ble.n	800fb96 <Marker_LPTIM3_IRQ+0x46>
		normalize = 0xff;
 800fb8e:	4b52      	ldr	r3, [pc, #328]	@ (800fcd8 <Marker_LPTIM3_IRQ+0x188>)
 800fb90:	22ff      	movs	r2, #255	@ 0xff
 800fb92:	701a      	strb	r2, [r3, #0]
 800fb94:	e029      	b.n	800fbea <Marker_LPTIM3_IRQ+0x9a>
	else if (raw < *(sensor.blackMax + i + 14))
 800fb96:	4b4e      	ldr	r3, [pc, #312]	@ (800fcd0 <Marker_LPTIM3_IRQ+0x180>)
 800fb98:	781b      	ldrb	r3, [r3, #0]
 800fb9a:	4619      	mov	r1, r3
 800fb9c:	4b4a      	ldr	r3, [pc, #296]	@ (800fcc8 <Marker_LPTIM3_IRQ+0x178>)
 800fb9e:	781b      	ldrb	r3, [r3, #0]
 800fba0:	330e      	adds	r3, #14
 800fba2:	009b      	lsls	r3, r3, #2
 800fba4:	4a4d      	ldr	r2, [pc, #308]	@ (800fcdc <Marker_LPTIM3_IRQ+0x18c>)
 800fba6:	4413      	add	r3, r2
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	4299      	cmp	r1, r3
 800fbac:	da03      	bge.n	800fbb6 <Marker_LPTIM3_IRQ+0x66>
		normalize = 0;
 800fbae:	4b4a      	ldr	r3, [pc, #296]	@ (800fcd8 <Marker_LPTIM3_IRQ+0x188>)
 800fbb0:	2200      	movs	r2, #0
 800fbb2:	701a      	strb	r2, [r3, #0]
 800fbb4:	e019      	b.n	800fbea <Marker_LPTIM3_IRQ+0x9a>
	else
		normalize = 0xff * (raw - *(sensor.blackMax + i + 14))
 800fbb6:	4b46      	ldr	r3, [pc, #280]	@ (800fcd0 <Marker_LPTIM3_IRQ+0x180>)
 800fbb8:	781b      	ldrb	r3, [r3, #0]
 800fbba:	4619      	mov	r1, r3
 800fbbc:	4b42      	ldr	r3, [pc, #264]	@ (800fcc8 <Marker_LPTIM3_IRQ+0x178>)
 800fbbe:	781b      	ldrb	r3, [r3, #0]
 800fbc0:	330e      	adds	r3, #14
 800fbc2:	009b      	lsls	r3, r3, #2
 800fbc4:	4a45      	ldr	r2, [pc, #276]	@ (800fcdc <Marker_LPTIM3_IRQ+0x18c>)
 800fbc6:	4413      	add	r3, r2
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	1aca      	subs	r2, r1, r3
 800fbcc:	4613      	mov	r3, r2
 800fbce:	021b      	lsls	r3, r3, #8
 800fbd0:	1a9a      	subs	r2, r3, r2
				/ *(sensor.normalizeCoef + i + 14);
 800fbd2:	4b3d      	ldr	r3, [pc, #244]	@ (800fcc8 <Marker_LPTIM3_IRQ+0x178>)
 800fbd4:	781b      	ldrb	r3, [r3, #0]
 800fbd6:	330e      	adds	r3, #14
 800fbd8:	009b      	lsls	r3, r3, #2
 800fbda:	4941      	ldr	r1, [pc, #260]	@ (800fce0 <Marker_LPTIM3_IRQ+0x190>)
 800fbdc:	440b      	add	r3, r1
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	fb92 f3f3 	sdiv	r3, r2, r3
		normalize = 0xff * (raw - *(sensor.blackMax + i + 14))
 800fbe4:	b2da      	uxtb	r2, r3
 800fbe6:	4b3c      	ldr	r3, [pc, #240]	@ (800fcd8 <Marker_LPTIM3_IRQ+0x188>)
 800fbe8:	701a      	strb	r2, [r3, #0]
	sensor.state = (sensor.state & ~(0x01 << (i + 14)))
 800fbea:	4b3e      	ldr	r3, [pc, #248]	@ (800fce4 <Marker_LPTIM3_IRQ+0x194>)
 800fbec:	f9b3 2118 	ldrsh.w	r2, [r3, #280]	@ 0x118
 800fbf0:	4b35      	ldr	r3, [pc, #212]	@ (800fcc8 <Marker_LPTIM3_IRQ+0x178>)
 800fbf2:	781b      	ldrb	r3, [r3, #0]
 800fbf4:	330e      	adds	r3, #14
 800fbf6:	2101      	movs	r1, #1
 800fbf8:	fa01 f303 	lsl.w	r3, r1, r3
 800fbfc:	b21b      	sxth	r3, r3
 800fbfe:	43db      	mvns	r3, r3
 800fc00:	b21b      	sxth	r3, r3
 800fc02:	4013      	ands	r3, r2
 800fc04:	b21a      	sxth	r2, r3
			| ((normalize > sensor.threshold) << (i + 14));
 800fc06:	4b37      	ldr	r3, [pc, #220]	@ (800fce4 <Marker_LPTIM3_IRQ+0x194>)
 800fc08:	f893 1124 	ldrb.w	r1, [r3, #292]	@ 0x124
 800fc0c:	4b32      	ldr	r3, [pc, #200]	@ (800fcd8 <Marker_LPTIM3_IRQ+0x188>)
 800fc0e:	781b      	ldrb	r3, [r3, #0]
 800fc10:	4299      	cmp	r1, r3
 800fc12:	bf34      	ite	cc
 800fc14:	2301      	movcc	r3, #1
 800fc16:	2300      	movcs	r3, #0
 800fc18:	b2db      	uxtb	r3, r3
 800fc1a:	4619      	mov	r1, r3
 800fc1c:	4b2a      	ldr	r3, [pc, #168]	@ (800fcc8 <Marker_LPTIM3_IRQ+0x178>)
 800fc1e:	781b      	ldrb	r3, [r3, #0]
 800fc20:	330e      	adds	r3, #14
 800fc22:	fa01 f303 	lsl.w	r3, r1, r3
 800fc26:	b21b      	sxth	r3, r3
 800fc28:	4313      	orrs	r3, r2
 800fc2a:	b21a      	sxth	r2, r3
	sensor.state = (sensor.state & ~(0x01 << (i + 14)))
 800fc2c:	4b2d      	ldr	r3, [pc, #180]	@ (800fce4 <Marker_LPTIM3_IRQ+0x194>)
 800fc2e:	f8a3 2118 	strh.w	r2, [r3, #280]	@ 0x118


	HAL_GPIO_WritePin(MARK_L_GPIO_Port, MARK_L_Pin,
			(sensor.state >> 14) & 0x01);
 800fc32:	4b2c      	ldr	r3, [pc, #176]	@ (800fce4 <Marker_LPTIM3_IRQ+0x194>)
 800fc34:	f9b3 3118 	ldrsh.w	r3, [r3, #280]	@ 0x118
 800fc38:	139b      	asrs	r3, r3, #14
 800fc3a:	b21b      	sxth	r3, r3
 800fc3c:	b2db      	uxtb	r3, r3
 800fc3e:	f003 0301 	and.w	r3, r3, #1
 800fc42:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(MARK_L_GPIO_Port, MARK_L_Pin,
 800fc44:	461a      	mov	r2, r3
 800fc46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800fc4a:	4827      	ldr	r0, [pc, #156]	@ (800fce8 <Marker_LPTIM3_IRQ+0x198>)
 800fc4c:	f7f4 ffac 	bl	8004ba8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MARK_R_GPIO_Port, MARK_R_Pin,
			(sensor.state >> 15) & 0x01);
 800fc50:	4b24      	ldr	r3, [pc, #144]	@ (800fce4 <Marker_LPTIM3_IRQ+0x194>)
 800fc52:	f9b3 3118 	ldrsh.w	r3, [r3, #280]	@ 0x118
 800fc56:	13db      	asrs	r3, r3, #15
 800fc58:	b21b      	sxth	r3, r3
 800fc5a:	b2db      	uxtb	r3, r3
 800fc5c:	f003 0301 	and.w	r3, r3, #1
 800fc60:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(MARK_R_GPIO_Port, MARK_R_Pin,
 800fc62:	461a      	mov	r2, r3
 800fc64:	2104      	movs	r1, #4
 800fc66:	4820      	ldr	r0, [pc, #128]	@ (800fce8 <Marker_LPTIM3_IRQ+0x198>)
 800fc68:	f7f4 ff9e 	bl	8004ba8 <HAL_GPIO_WritePin>
	htim15.Instance->CCR1 = (sensor.state & (0x03 << 14)) ? 5 : 0;
 800fc6c:	4b1d      	ldr	r3, [pc, #116]	@ (800fce4 <Marker_LPTIM3_IRQ+0x194>)
 800fc6e:	f9b3 3118 	ldrsh.w	r3, [r3, #280]	@ 0x118
 800fc72:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d001      	beq.n	800fc7e <Marker_LPTIM3_IRQ+0x12e>
 800fc7a:	2205      	movs	r2, #5
 800fc7c:	e000      	b.n	800fc80 <Marker_LPTIM3_IRQ+0x130>
 800fc7e:	2200      	movs	r2, #0
 800fc80:	4b1a      	ldr	r3, [pc, #104]	@ (800fcec <Marker_LPTIM3_IRQ+0x19c>)
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	635a      	str	r2, [r3, #52]	@ 0x34

	*(sensor.normalized + i + 14) = normalize;
 800fc86:	4b14      	ldr	r3, [pc, #80]	@ (800fcd8 <Marker_LPTIM3_IRQ+0x188>)
 800fc88:	7819      	ldrb	r1, [r3, #0]
 800fc8a:	4b0f      	ldr	r3, [pc, #60]	@ (800fcc8 <Marker_LPTIM3_IRQ+0x178>)
 800fc8c:	781b      	ldrb	r3, [r3, #0]
 800fc8e:	330e      	adds	r3, #14
 800fc90:	009b      	lsls	r3, r3, #2
 800fc92:	4a17      	ldr	r2, [pc, #92]	@ (800fcf0 <Marker_LPTIM3_IRQ+0x1a0>)
 800fc94:	4413      	add	r3, r2
 800fc96:	460a      	mov	r2, r1
 800fc98:	601a      	str	r2, [r3, #0]
	*(sensor.raw + i + 14) = raw;
 800fc9a:	4b0d      	ldr	r3, [pc, #52]	@ (800fcd0 <Marker_LPTIM3_IRQ+0x180>)
 800fc9c:	7819      	ldrb	r1, [r3, #0]
 800fc9e:	4b0a      	ldr	r3, [pc, #40]	@ (800fcc8 <Marker_LPTIM3_IRQ+0x178>)
 800fca0:	781b      	ldrb	r3, [r3, #0]
 800fca2:	330e      	adds	r3, #14
 800fca4:	009b      	lsls	r3, r3, #2
 800fca6:	4a0f      	ldr	r2, [pc, #60]	@ (800fce4 <Marker_LPTIM3_IRQ+0x194>)
 800fca8:	4413      	add	r3, r2
 800fcaa:	460a      	mov	r2, r1
 800fcac:	601a      	str	r2, [r3, #0]

	i = (i + 1) & 0x01;
 800fcae:	4b06      	ldr	r3, [pc, #24]	@ (800fcc8 <Marker_LPTIM3_IRQ+0x178>)
 800fcb0:	781b      	ldrb	r3, [r3, #0]
 800fcb2:	3301      	adds	r3, #1
 800fcb4:	b2db      	uxtb	r3, r3
 800fcb6:	f003 0301 	and.w	r3, r3, #1
 800fcba:	b2da      	uxtb	r2, r3
 800fcbc:	4b02      	ldr	r3, [pc, #8]	@ (800fcc8 <Marker_LPTIM3_IRQ+0x178>)
 800fcbe:	701a      	strb	r2, [r3, #0]
}
 800fcc0:	bf00      	nop
 800fcc2:	bd80      	pop	{r7, pc}
 800fcc4:	24000ade 	.word	0x24000ade
 800fcc8:	24000af0 	.word	0x24000af0
 800fccc:	24000bc8 	.word	0x24000bc8
 800fcd0:	24000af1 	.word	0x24000af1
 800fcd4:	240001d8 	.word	0x240001d8
 800fcd8:	24000af2 	.word	0x24000af2
 800fcdc:	24000210 	.word	0x24000210
 800fce0:	24000248 	.word	0x24000248
 800fce4:	240001a0 	.word	0x240001a0
 800fce8:	58021000 	.word	0x58021000
 800fcec:	240010cc 	.word	0x240010cc
 800fcf0:	24000280 	.word	0x24000280

0800fcf4 <Sensor_Printf>:

void Sensor_Printf(char *name, int32_t *sensorValue) {
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b084      	sub	sp, #16
 800fcf8:	af02      	add	r7, sp, #8
 800fcfa:	6078      	str	r0, [r7, #4]
 800fcfc:	6039      	str	r1, [r7, #0]
	Custom_LCD_Printf(0, 0, name);
 800fcfe:	687a      	ldr	r2, [r7, #4]
 800fd00:	2100      	movs	r1, #0
 800fd02:	2000      	movs	r0, #0
 800fd04:	f7f1 fa0a 	bl	800111c <Custom_LCD_Printf>
	Custom_LCD_Printf(0, 1, "0/1:%02x %02x", *(sensorValue),
 800fd08:	683b      	ldr	r3, [r7, #0]
 800fd0a:	681a      	ldr	r2, [r3, #0]
			*(sensorValue + 1));
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	3304      	adds	r3, #4
	Custom_LCD_Printf(0, 1, "0/1:%02x %02x", *(sensorValue),
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	9300      	str	r3, [sp, #0]
 800fd14:	4613      	mov	r3, r2
 800fd16:	4a34      	ldr	r2, [pc, #208]	@ (800fde8 <Sensor_Printf+0xf4>)
 800fd18:	2101      	movs	r1, #1
 800fd1a:	2000      	movs	r0, #0
 800fd1c:	f7f1 f9fe 	bl	800111c <Custom_LCD_Printf>
	Custom_LCD_Printf(0, 2, "2/3:%02x %02x", *(sensorValue + 2),
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	3308      	adds	r3, #8
 800fd24:	681a      	ldr	r2, [r3, #0]
			*(sensorValue + 3));
 800fd26:	683b      	ldr	r3, [r7, #0]
 800fd28:	330c      	adds	r3, #12
	Custom_LCD_Printf(0, 2, "2/3:%02x %02x", *(sensorValue + 2),
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	9300      	str	r3, [sp, #0]
 800fd2e:	4613      	mov	r3, r2
 800fd30:	4a2e      	ldr	r2, [pc, #184]	@ (800fdec <Sensor_Printf+0xf8>)
 800fd32:	2102      	movs	r1, #2
 800fd34:	2000      	movs	r0, #0
 800fd36:	f7f1 f9f1 	bl	800111c <Custom_LCD_Printf>
	Custom_LCD_Printf(0, 3, "4/5:%02x %02x", *(sensorValue + 4),
 800fd3a:	683b      	ldr	r3, [r7, #0]
 800fd3c:	3310      	adds	r3, #16
 800fd3e:	681a      	ldr	r2, [r3, #0]
			*(sensorValue + 5));
 800fd40:	683b      	ldr	r3, [r7, #0]
 800fd42:	3314      	adds	r3, #20
	Custom_LCD_Printf(0, 3, "4/5:%02x %02x", *(sensorValue + 4),
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	9300      	str	r3, [sp, #0]
 800fd48:	4613      	mov	r3, r2
 800fd4a:	4a29      	ldr	r2, [pc, #164]	@ (800fdf0 <Sensor_Printf+0xfc>)
 800fd4c:	2103      	movs	r1, #3
 800fd4e:	2000      	movs	r0, #0
 800fd50:	f7f1 f9e4 	bl	800111c <Custom_LCD_Printf>
	Custom_LCD_Printf(0, 4, "6/7:%02x %02x", *(sensorValue + 6),
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	3318      	adds	r3, #24
 800fd58:	681a      	ldr	r2, [r3, #0]
			*(sensorValue + 7));
 800fd5a:	683b      	ldr	r3, [r7, #0]
 800fd5c:	331c      	adds	r3, #28
	Custom_LCD_Printf(0, 4, "6/7:%02x %02x", *(sensorValue + 6),
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	9300      	str	r3, [sp, #0]
 800fd62:	4613      	mov	r3, r2
 800fd64:	4a23      	ldr	r2, [pc, #140]	@ (800fdf4 <Sensor_Printf+0x100>)
 800fd66:	2104      	movs	r1, #4
 800fd68:	2000      	movs	r0, #0
 800fd6a:	f7f1 f9d7 	bl	800111c <Custom_LCD_Printf>
	Custom_LCD_Printf(0, 5, "8/9:%02x %02x", *(sensorValue + 8),
 800fd6e:	683b      	ldr	r3, [r7, #0]
 800fd70:	3320      	adds	r3, #32
 800fd72:	681a      	ldr	r2, [r3, #0]
			*(sensorValue + 9));
 800fd74:	683b      	ldr	r3, [r7, #0]
 800fd76:	3324      	adds	r3, #36	@ 0x24
	Custom_LCD_Printf(0, 5, "8/9:%02x %02x", *(sensorValue + 8),
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	9300      	str	r3, [sp, #0]
 800fd7c:	4613      	mov	r3, r2
 800fd7e:	4a1e      	ldr	r2, [pc, #120]	@ (800fdf8 <Sensor_Printf+0x104>)
 800fd80:	2105      	movs	r1, #5
 800fd82:	2000      	movs	r0, #0
 800fd84:	f7f1 f9ca 	bl	800111c <Custom_LCD_Printf>
	Custom_LCD_Printf(0, 6, "a/b:%02x %02x", *(sensorValue + 10),
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	3328      	adds	r3, #40	@ 0x28
 800fd8c:	681a      	ldr	r2, [r3, #0]
			*(sensorValue + 11));
 800fd8e:	683b      	ldr	r3, [r7, #0]
 800fd90:	332c      	adds	r3, #44	@ 0x2c
	Custom_LCD_Printf(0, 6, "a/b:%02x %02x", *(sensorValue + 10),
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	9300      	str	r3, [sp, #0]
 800fd96:	4613      	mov	r3, r2
 800fd98:	4a18      	ldr	r2, [pc, #96]	@ (800fdfc <Sensor_Printf+0x108>)
 800fd9a:	2106      	movs	r1, #6
 800fd9c:	2000      	movs	r0, #0
 800fd9e:	f7f1 f9bd 	bl	800111c <Custom_LCD_Printf>
	Custom_LCD_Printf(0, 7, "c/d:%02x %02x", *(sensorValue + 12),
 800fda2:	683b      	ldr	r3, [r7, #0]
 800fda4:	3330      	adds	r3, #48	@ 0x30
 800fda6:	681a      	ldr	r2, [r3, #0]
			*(sensorValue + 13));
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	3334      	adds	r3, #52	@ 0x34
	Custom_LCD_Printf(0, 7, "c/d:%02x %02x", *(sensorValue + 12),
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	9300      	str	r3, [sp, #0]
 800fdb0:	4613      	mov	r3, r2
 800fdb2:	4a13      	ldr	r2, [pc, #76]	@ (800fe00 <Sensor_Printf+0x10c>)
 800fdb4:	2107      	movs	r1, #7
 800fdb6:	2000      	movs	r0, #0
 800fdb8:	f7f1 f9b0 	bl	800111c <Custom_LCD_Printf>
	Custom_LCD_Printf(0, 8, "left right");
 800fdbc:	4a11      	ldr	r2, [pc, #68]	@ (800fe04 <Sensor_Printf+0x110>)
 800fdbe:	2108      	movs	r1, #8
 800fdc0:	2000      	movs	r0, #0
 800fdc2:	f7f1 f9ab 	bl	800111c <Custom_LCD_Printf>
	Custom_LCD_Printf(0, 9, "%02x      %02x", *(sensorValue + 14),
 800fdc6:	683b      	ldr	r3, [r7, #0]
 800fdc8:	3338      	adds	r3, #56	@ 0x38
 800fdca:	681a      	ldr	r2, [r3, #0]
			*(sensorValue + 15));
 800fdcc:	683b      	ldr	r3, [r7, #0]
 800fdce:	333c      	adds	r3, #60	@ 0x3c
	Custom_LCD_Printf(0, 9, "%02x      %02x", *(sensorValue + 14),
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	9300      	str	r3, [sp, #0]
 800fdd4:	4613      	mov	r3, r2
 800fdd6:	4a0c      	ldr	r2, [pc, #48]	@ (800fe08 <Sensor_Printf+0x114>)
 800fdd8:	2109      	movs	r1, #9
 800fdda:	2000      	movs	r0, #0
 800fddc:	f7f1 f99e 	bl	800111c <Custom_LCD_Printf>
}
 800fde0:	bf00      	nop
 800fde2:	3708      	adds	r7, #8
 800fde4:	46bd      	mov	sp, r7
 800fde6:	bd80      	pop	{r7, pc}
 800fde8:	08017110 	.word	0x08017110
 800fdec:	08017120 	.word	0x08017120
 800fdf0:	08017130 	.word	0x08017130
 800fdf4:	08017140 	.word	0x08017140
 800fdf8:	08017150 	.word	0x08017150
 800fdfc:	08017160 	.word	0x08017160
 800fe00:	08017170 	.word	0x08017170
 800fe04:	08017180 	.word	0x08017180
 800fe08:	0801718c 	.word	0x0801718c

0800fe0c <Sensor_Test_Raw>:

void Sensor_Test_Raw() {
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	af00      	add	r7, sp, #0
	Sensor_Start();
 800fe10:	f7ff fd28 	bl	800f864 <Sensor_Start>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 800fe14:	e003      	b.n	800fe1e <Sensor_Test_Raw+0x12>
		Sensor_Printf("S Raw ", sensor.raw);
 800fe16:	490c      	ldr	r1, [pc, #48]	@ (800fe48 <Sensor_Test_Raw+0x3c>)
 800fe18:	480c      	ldr	r0, [pc, #48]	@ (800fe4c <Sensor_Test_Raw+0x40>)
 800fe1a:	f7ff ff6b 	bl	800fcf4 <Sensor_Printf>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 800fe1e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800fe22:	480b      	ldr	r0, [pc, #44]	@ (800fe50 <Sensor_Test_Raw+0x44>)
 800fe24:	f7f4 fea8 	bl	8004b78 <HAL_GPIO_ReadPin>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	2b01      	cmp	r3, #1
 800fe2c:	d1f3      	bne.n	800fe16 <Sensor_Test_Raw+0xa>
	}
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 800fe2e:	bf00      	nop
 800fe30:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800fe34:	4806      	ldr	r0, [pc, #24]	@ (800fe50 <Sensor_Test_Raw+0x44>)
 800fe36:	f7f4 fe9f 	bl	8004b78 <HAL_GPIO_ReadPin>
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	2b01      	cmp	r3, #1
 800fe3e:	d0f7      	beq.n	800fe30 <Sensor_Test_Raw+0x24>
		;
	Sensor_Stop();
 800fe40:	f7ff fd2e 	bl	800f8a0 <Sensor_Stop>
}
 800fe44:	bf00      	nop
 800fe46:	bd80      	pop	{r7, pc}
 800fe48:	240001a0 	.word	0x240001a0
 800fe4c:	0801719c 	.word	0x0801719c
 800fe50:	58020800 	.word	0x58020800

0800fe54 <Sensor_Calibration>:

void Sensor_Calibration() {
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b082      	sub	sp, #8
 800fe58:	af00      	add	r7, sp, #0
	Sensor_Start();
 800fe5a:	f7ff fd03 	bl	800f864 <Sensor_Start>
	uint8_t i = 0;
 800fe5e:	2300      	movs	r3, #0
 800fe60:	71fb      	strb	r3, [r7, #7]
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 800fe62:	e01b      	b.n	800fe9c <Sensor_Calibration+0x48>
		Sensor_Printf("Cali WhiteMax", sensor.whiteMax);
 800fe64:	493f      	ldr	r1, [pc, #252]	@ (800ff64 <Sensor_Calibration+0x110>)
 800fe66:	4840      	ldr	r0, [pc, #256]	@ (800ff68 <Sensor_Calibration+0x114>)
 800fe68:	f7ff ff44 	bl	800fcf4 <Sensor_Printf>
		*(sensor.whiteMax + i) = (*(sensor.raw + i) > *(sensor.whiteMax + i)) ?
 800fe6c:	79fb      	ldrb	r3, [r7, #7]
 800fe6e:	009b      	lsls	r3, r3, #2
 800fe70:	4a3c      	ldr	r2, [pc, #240]	@ (800ff64 <Sensor_Calibration+0x110>)
 800fe72:	4413      	add	r3, r2
 800fe74:	6819      	ldr	r1, [r3, #0]
 800fe76:	79fb      	ldrb	r3, [r7, #7]
 800fe78:	009b      	lsls	r3, r3, #2
 800fe7a:	4a3c      	ldr	r2, [pc, #240]	@ (800ff6c <Sensor_Calibration+0x118>)
 800fe7c:	4413      	add	r3, r2
 800fe7e:	681a      	ldr	r2, [r3, #0]
 800fe80:	79fb      	ldrb	r3, [r7, #7]
 800fe82:	009b      	lsls	r3, r3, #2
 800fe84:	4837      	ldr	r0, [pc, #220]	@ (800ff64 <Sensor_Calibration+0x110>)
 800fe86:	4403      	add	r3, r0
				*(sensor.raw + i) : *(sensor.whiteMax + i);
 800fe88:	428a      	cmp	r2, r1
 800fe8a:	bfb8      	it	lt
 800fe8c:	460a      	movlt	r2, r1
		*(sensor.whiteMax + i) = (*(sensor.raw + i) > *(sensor.whiteMax + i)) ?
 800fe8e:	601a      	str	r2, [r3, #0]
		i = (i + 1) & 0x0F;
 800fe90:	79fb      	ldrb	r3, [r7, #7]
 800fe92:	3301      	adds	r3, #1
 800fe94:	b2db      	uxtb	r3, r3
 800fe96:	f003 030f 	and.w	r3, r3, #15
 800fe9a:	71fb      	strb	r3, [r7, #7]
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 800fe9c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800fea0:	4833      	ldr	r0, [pc, #204]	@ (800ff70 <Sensor_Calibration+0x11c>)
 800fea2:	f7f4 fe69 	bl	8004b78 <HAL_GPIO_ReadPin>
 800fea6:	4603      	mov	r3, r0
 800fea8:	2b01      	cmp	r3, #1
 800feaa:	d1db      	bne.n	800fe64 <Sensor_Calibration+0x10>
	}
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 800feac:	e001      	b.n	800feb2 <Sensor_Calibration+0x5e>
		Custom_LCD_Clear();
 800feae:	f7f1 f987 	bl	80011c0 <Custom_LCD_Clear>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 800feb2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800feb6:	482e      	ldr	r0, [pc, #184]	@ (800ff70 <Sensor_Calibration+0x11c>)
 800feb8:	f7f4 fe5e 	bl	8004b78 <HAL_GPIO_ReadPin>
 800febc:	4603      	mov	r3, r0
 800febe:	2b01      	cmp	r3, #1
 800fec0:	d0f5      	beq.n	800feae <Sensor_Calibration+0x5a>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 800fec2:	e01b      	b.n	800fefc <Sensor_Calibration+0xa8>
		Sensor_Printf("Cali BlackMax", sensor.blackMax);
 800fec4:	492b      	ldr	r1, [pc, #172]	@ (800ff74 <Sensor_Calibration+0x120>)
 800fec6:	482c      	ldr	r0, [pc, #176]	@ (800ff78 <Sensor_Calibration+0x124>)
 800fec8:	f7ff ff14 	bl	800fcf4 <Sensor_Printf>
		*(sensor.blackMax + i) =
				(*(sensor.raw + i) > *(sensor.blackMax + i)) ?
 800fecc:	79fb      	ldrb	r3, [r7, #7]
 800fece:	009b      	lsls	r3, r3, #2
 800fed0:	4a28      	ldr	r2, [pc, #160]	@ (800ff74 <Sensor_Calibration+0x120>)
 800fed2:	4413      	add	r3, r2
 800fed4:	6819      	ldr	r1, [r3, #0]
 800fed6:	79fb      	ldrb	r3, [r7, #7]
 800fed8:	009b      	lsls	r3, r3, #2
 800feda:	4a24      	ldr	r2, [pc, #144]	@ (800ff6c <Sensor_Calibration+0x118>)
 800fedc:	4413      	add	r3, r2
 800fede:	681a      	ldr	r2, [r3, #0]
		*(sensor.blackMax + i) =
 800fee0:	79fb      	ldrb	r3, [r7, #7]
 800fee2:	009b      	lsls	r3, r3, #2
 800fee4:	4823      	ldr	r0, [pc, #140]	@ (800ff74 <Sensor_Calibration+0x120>)
 800fee6:	4403      	add	r3, r0
						*(sensor.raw + i) : *(sensor.blackMax + i);
 800fee8:	428a      	cmp	r2, r1
 800feea:	bfb8      	it	lt
 800feec:	460a      	movlt	r2, r1
		*(sensor.blackMax + i) =
 800feee:	601a      	str	r2, [r3, #0]
		i = (i + 1) & 0x0F;
 800fef0:	79fb      	ldrb	r3, [r7, #7]
 800fef2:	3301      	adds	r3, #1
 800fef4:	b2db      	uxtb	r3, r3
 800fef6:	f003 030f 	and.w	r3, r3, #15
 800fefa:	71fb      	strb	r3, [r7, #7]
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 800fefc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ff00:	481b      	ldr	r0, [pc, #108]	@ (800ff70 <Sensor_Calibration+0x11c>)
 800ff02:	f7f4 fe39 	bl	8004b78 <HAL_GPIO_ReadPin>
 800ff06:	4603      	mov	r3, r0
 800ff08:	2b01      	cmp	r3, #1
 800ff0a:	d1db      	bne.n	800fec4 <Sensor_Calibration+0x70>
	}
	Sensor_Stop();
 800ff0c:	f7ff fcc8 	bl	800f8a0 <Sensor_Stop>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 800ff10:	e001      	b.n	800ff16 <Sensor_Calibration+0xc2>
		Custom_LCD_Clear();
 800ff12:	f7f1 f955 	bl	80011c0 <Custom_LCD_Clear>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 800ff16:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ff1a:	4815      	ldr	r0, [pc, #84]	@ (800ff70 <Sensor_Calibration+0x11c>)
 800ff1c:	f7f4 fe2c 	bl	8004b78 <HAL_GPIO_ReadPin>
 800ff20:	4603      	mov	r3, r0
 800ff22:	2b01      	cmp	r3, #1
 800ff24:	d0f5      	beq.n	800ff12 <Sensor_Calibration+0xbe>

	for (i = 0; i < 16; i++) {
 800ff26:	2300      	movs	r3, #0
 800ff28:	71fb      	strb	r3, [r7, #7]
 800ff2a:	e012      	b.n	800ff52 <Sensor_Calibration+0xfe>
		*(sensor.normalizeCoef + i) = *(sensor.whiteMax + i)
 800ff2c:	79fb      	ldrb	r3, [r7, #7]
 800ff2e:	009b      	lsls	r3, r3, #2
 800ff30:	4a0c      	ldr	r2, [pc, #48]	@ (800ff64 <Sensor_Calibration+0x110>)
 800ff32:	4413      	add	r3, r2
 800ff34:	6819      	ldr	r1, [r3, #0]
				- *(sensor.blackMax + i);
 800ff36:	79fb      	ldrb	r3, [r7, #7]
 800ff38:	009b      	lsls	r3, r3, #2
 800ff3a:	4a0e      	ldr	r2, [pc, #56]	@ (800ff74 <Sensor_Calibration+0x120>)
 800ff3c:	4413      	add	r3, r2
 800ff3e:	681a      	ldr	r2, [r3, #0]
		*(sensor.normalizeCoef + i) = *(sensor.whiteMax + i)
 800ff40:	79fb      	ldrb	r3, [r7, #7]
 800ff42:	009b      	lsls	r3, r3, #2
 800ff44:	480d      	ldr	r0, [pc, #52]	@ (800ff7c <Sensor_Calibration+0x128>)
 800ff46:	4403      	add	r3, r0
				- *(sensor.blackMax + i);
 800ff48:	1a8a      	subs	r2, r1, r2
		*(sensor.normalizeCoef + i) = *(sensor.whiteMax + i)
 800ff4a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 16; i++) {
 800ff4c:	79fb      	ldrb	r3, [r7, #7]
 800ff4e:	3301      	adds	r3, #1
 800ff50:	71fb      	strb	r3, [r7, #7]
 800ff52:	79fb      	ldrb	r3, [r7, #7]
 800ff54:	2b0f      	cmp	r3, #15
 800ff56:	d9e9      	bls.n	800ff2c <Sensor_Calibration+0xd8>
	}
}
 800ff58:	bf00      	nop
 800ff5a:	bf00      	nop
 800ff5c:	3708      	adds	r7, #8
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	bd80      	pop	{r7, pc}
 800ff62:	bf00      	nop
 800ff64:	240001d8 	.word	0x240001d8
 800ff68:	080171a4 	.word	0x080171a4
 800ff6c:	240001a0 	.word	0x240001a0
 800ff70:	58020800 	.word	0x58020800
 800ff74:	24000210 	.word	0x24000210
 800ff78:	080171b4 	.word	0x080171b4
 800ff7c:	24000248 	.word	0x24000248

0800ff80 <Sensor_Test_Normalized>:

void Sensor_Test_Normalized() {
 800ff80:	b580      	push	{r7, lr}
 800ff82:	af00      	add	r7, sp, #0
	Sensor_Start();
 800ff84:	f7ff fc6e 	bl	800f864 <Sensor_Start>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 800ff88:	e003      	b.n	800ff92 <Sensor_Test_Normalized+0x12>
		Sensor_Printf("S Normalize", sensor.normalized);
 800ff8a:	490d      	ldr	r1, [pc, #52]	@ (800ffc0 <Sensor_Test_Normalized+0x40>)
 800ff8c:	480d      	ldr	r0, [pc, #52]	@ (800ffc4 <Sensor_Test_Normalized+0x44>)
 800ff8e:	f7ff feb1 	bl	800fcf4 <Sensor_Printf>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 800ff92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ff96:	480c      	ldr	r0, [pc, #48]	@ (800ffc8 <Sensor_Test_Normalized+0x48>)
 800ff98:	f7f4 fdee 	bl	8004b78 <HAL_GPIO_ReadPin>
 800ff9c:	4603      	mov	r3, r0
 800ff9e:	2b01      	cmp	r3, #1
 800ffa0:	d1f3      	bne.n	800ff8a <Sensor_Test_Normalized+0xa>
	}
	Sensor_Stop();
 800ffa2:	f7ff fc7d 	bl	800f8a0 <Sensor_Stop>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 800ffa6:	bf00      	nop
 800ffa8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ffac:	4806      	ldr	r0, [pc, #24]	@ (800ffc8 <Sensor_Test_Normalized+0x48>)
 800ffae:	f7f4 fde3 	bl	8004b78 <HAL_GPIO_ReadPin>
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	2b01      	cmp	r3, #1
 800ffb6:	d0f7      	beq.n	800ffa8 <Sensor_Test_Normalized+0x28>
		;
}
 800ffb8:	bf00      	nop
 800ffba:	bf00      	nop
 800ffbc:	bd80      	pop	{r7, pc}
 800ffbe:	bf00      	nop
 800ffc0:	24000280 	.word	0x24000280
 800ffc4:	080171c4 	.word	0x080171c4
 800ffc8:	58020800 	.word	0x58020800

0800ffcc <Sensor_Test_State>:

void Sensor_Test_State() {
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b084      	sub	sp, #16
 800ffd0:	af00      	add	r7, sp, #0
	Sensor_Start();
 800ffd2:	f7ff fc47 	bl	800f864 <Sensor_Start>
	uint8_t i = 0;
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	73fb      	strb	r3, [r7, #15]
	char sensorStateL[7];
	char sensorStateR[7];

	Custom_LCD_Printf(0, 0, "S State");
 800ffda:	4a31      	ldr	r2, [pc, #196]	@ (80100a0 <Sensor_Test_State+0xd4>)
 800ffdc:	2100      	movs	r1, #0
 800ffde:	2000      	movs	r0, #0
 800ffe0:	f7f1 f89c 	bl	800111c <Custom_LCD_Printf>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 800ffe4:	e043      	b.n	801006e <Sensor_Test_State+0xa2>
		*(sensorStateL + i) = (sensor.state & (0x01 << i)) ? '1' : '0';
 800ffe6:	4b2f      	ldr	r3, [pc, #188]	@ (80100a4 <Sensor_Test_State+0xd8>)
 800ffe8:	f9b3 3118 	ldrsh.w	r3, [r3, #280]	@ 0x118
 800ffec:	461a      	mov	r2, r3
 800ffee:	7bfb      	ldrb	r3, [r7, #15]
 800fff0:	fa42 f303 	asr.w	r3, r2, r3
 800fff4:	f003 0301 	and.w	r3, r3, #1
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d001      	beq.n	8010000 <Sensor_Test_State+0x34>
 800fffc:	2131      	movs	r1, #49	@ 0x31
 800fffe:	e000      	b.n	8010002 <Sensor_Test_State+0x36>
 8010000:	2130      	movs	r1, #48	@ 0x30
 8010002:	7bfb      	ldrb	r3, [r7, #15]
 8010004:	f107 0208 	add.w	r2, r7, #8
 8010008:	4413      	add	r3, r2
 801000a:	460a      	mov	r2, r1
 801000c:	701a      	strb	r2, [r3, #0]
		*(sensorStateR + i) = (sensor.state & (0x01 << (i + 7))) ? '1' : '0';
 801000e:	4b25      	ldr	r3, [pc, #148]	@ (80100a4 <Sensor_Test_State+0xd8>)
 8010010:	f9b3 3118 	ldrsh.w	r3, [r3, #280]	@ 0x118
 8010014:	461a      	mov	r2, r3
 8010016:	7bfb      	ldrb	r3, [r7, #15]
 8010018:	3307      	adds	r3, #7
 801001a:	fa42 f303 	asr.w	r3, r2, r3
 801001e:	f003 0301 	and.w	r3, r3, #1
 8010022:	2b00      	cmp	r3, #0
 8010024:	d001      	beq.n	801002a <Sensor_Test_State+0x5e>
 8010026:	2131      	movs	r1, #49	@ 0x31
 8010028:	e000      	b.n	801002c <Sensor_Test_State+0x60>
 801002a:	2130      	movs	r1, #48	@ 0x30
 801002c:	7bfb      	ldrb	r3, [r7, #15]
 801002e:	463a      	mov	r2, r7
 8010030:	4413      	add	r3, r2
 8010032:	460a      	mov	r2, r1
 8010034:	701a      	strb	r2, [r3, #0]
		Custom_LCD_Printf(0, 1, "L:%.7s   ", sensorStateL);
 8010036:	f107 0308 	add.w	r3, r7, #8
 801003a:	4a1b      	ldr	r2, [pc, #108]	@ (80100a8 <Sensor_Test_State+0xdc>)
 801003c:	2101      	movs	r1, #1
 801003e:	2000      	movs	r0, #0
 8010040:	f7f1 f86c 	bl	800111c <Custom_LCD_Printf>
		Custom_LCD_Printf(0, 2, "R:%.7s   ", sensorStateR);
 8010044:	463b      	mov	r3, r7
 8010046:	4a19      	ldr	r2, [pc, #100]	@ (80100ac <Sensor_Test_State+0xe0>)
 8010048:	2102      	movs	r1, #2
 801004a:	2000      	movs	r0, #0
 801004c:	f7f1 f866 	bl	800111c <Custom_LCD_Printf>
		i = (i + 1) % 7;
 8010050:	7bfb      	ldrb	r3, [r7, #15]
 8010052:	1c5a      	adds	r2, r3, #1
 8010054:	4b16      	ldr	r3, [pc, #88]	@ (80100b0 <Sensor_Test_State+0xe4>)
 8010056:	fb83 1302 	smull	r1, r3, r3, r2
 801005a:	4413      	add	r3, r2
 801005c:	1099      	asrs	r1, r3, #2
 801005e:	17d3      	asrs	r3, r2, #31
 8010060:	1ac9      	subs	r1, r1, r3
 8010062:	460b      	mov	r3, r1
 8010064:	00db      	lsls	r3, r3, #3
 8010066:	1a5b      	subs	r3, r3, r1
 8010068:	1ad1      	subs	r1, r2, r3
 801006a:	460b      	mov	r3, r1
 801006c:	73fb      	strb	r3, [r7, #15]
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 801006e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8010072:	4810      	ldr	r0, [pc, #64]	@ (80100b4 <Sensor_Test_State+0xe8>)
 8010074:	f7f4 fd80 	bl	8004b78 <HAL_GPIO_ReadPin>
 8010078:	4603      	mov	r3, r0
 801007a:	2b01      	cmp	r3, #1
 801007c:	d1b3      	bne.n	800ffe6 <Sensor_Test_State+0x1a>
	}
	Sensor_Stop();
 801007e:	f7ff fc0f 	bl	800f8a0 <Sensor_Stop>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 8010082:	bf00      	nop
 8010084:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8010088:	480a      	ldr	r0, [pc, #40]	@ (80100b4 <Sensor_Test_State+0xe8>)
 801008a:	f7f4 fd75 	bl	8004b78 <HAL_GPIO_ReadPin>
 801008e:	4603      	mov	r3, r0
 8010090:	2b01      	cmp	r3, #1
 8010092:	d0f7      	beq.n	8010084 <Sensor_Test_State+0xb8>
		;
}
 8010094:	bf00      	nop
 8010096:	bf00      	nop
 8010098:	3710      	adds	r7, #16
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}
 801009e:	bf00      	nop
 80100a0:	080171d0 	.word	0x080171d0
 80100a4:	240001a0 	.word	0x240001a0
 80100a8:	080171d8 	.word	0x080171d8
 80100ac:	080171e4 	.word	0x080171e4
 80100b0:	92492493 	.word	0x92492493
 80100b4:	58020800 	.word	0x58020800

080100b8 <Sensor_Test_Position>:

void Sensor_Test_Position() {
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b082      	sub	sp, #8
 80100bc:	af02      	add	r7, sp, #8
	Sensor_Start();
 80100be:	f7ff fbd1 	bl	800f864 <Sensor_Start>
	Custom_LCD_Printf(0, 0, "S Position");
 80100c2:	4a14      	ldr	r2, [pc, #80]	@ (8010114 <Sensor_Test_Position+0x5c>)
 80100c4:	2100      	movs	r1, #0
 80100c6:	2000      	movs	r0, #0
 80100c8:	f7f1 f828 	bl	800111c <Custom_LCD_Printf>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 80100cc:	e00b      	b.n	80100e6 <Sensor_Test_Position+0x2e>
		Custom_LCD_Printf(0, 1, "%.6f ", sensor.position);
 80100ce:	4b12      	ldr	r3, [pc, #72]	@ (8010118 <Sensor_Test_Position+0x60>)
 80100d0:	edd3 7a47 	vldr	s15, [r3, #284]	@ 0x11c
 80100d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80100d8:	ed8d 7b00 	vstr	d7, [sp]
 80100dc:	4a0f      	ldr	r2, [pc, #60]	@ (801011c <Sensor_Test_Position+0x64>)
 80100de:	2101      	movs	r1, #1
 80100e0:	2000      	movs	r0, #0
 80100e2:	f7f1 f81b 	bl	800111c <Custom_LCD_Printf>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 80100e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80100ea:	480d      	ldr	r0, [pc, #52]	@ (8010120 <Sensor_Test_Position+0x68>)
 80100ec:	f7f4 fd44 	bl	8004b78 <HAL_GPIO_ReadPin>
 80100f0:	4603      	mov	r3, r0
 80100f2:	2b01      	cmp	r3, #1
 80100f4:	d1eb      	bne.n	80100ce <Sensor_Test_Position+0x16>
	}
	Sensor_Stop();
 80100f6:	f7ff fbd3 	bl	800f8a0 <Sensor_Stop>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 80100fa:	bf00      	nop
 80100fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8010100:	4807      	ldr	r0, [pc, #28]	@ (8010120 <Sensor_Test_Position+0x68>)
 8010102:	f7f4 fd39 	bl	8004b78 <HAL_GPIO_ReadPin>
 8010106:	4603      	mov	r3, r0
 8010108:	2b01      	cmp	r3, #1
 801010a:	d0f7      	beq.n	80100fc <Sensor_Test_Position+0x44>
		;
}
 801010c:	bf00      	nop
 801010e:	bf00      	nop
 8010110:	46bd      	mov	sp, r7
 8010112:	bd80      	pop	{r7, pc}
 8010114:	080171f0 	.word	0x080171f0
 8010118:	240001a0 	.word	0x240001a0
 801011c:	080171fc 	.word	0x080171fc
 8010120:	58020800 	.word	0x58020800

08010124 <Battery_Start>:

//__STATIC_INLINE uint16_t Battery_ADC_Read() {
//
//}

void Battery_Start(){
 8010124:	b580      	push	{r7, lr}
 8010126:	af00      	add	r7, sp, #0
	HAL_LPTIM_Counter_Start_IT(ADC_BATTERY_TIM, 0);
 8010128:	2100      	movs	r1, #0
 801012a:	4802      	ldr	r0, [pc, #8]	@ (8010134 <Battery_Start+0x10>)
 801012c:	f7f5 fc78 	bl	8005a20 <HAL_LPTIM_Counter_Start_IT>
}
 8010130:	bf00      	nop
 8010132:	bd80      	pop	{r7, pc}
 8010134:	24000dc0 	.word	0x24000dc0

08010138 <Battery_Stop>:

void Battery_Stop(){
 8010138:	b580      	push	{r7, lr}
 801013a:	af00      	add	r7, sp, #0
	HAL_LPTIM_Counter_Stop_IT(ADC_BATTERY_TIM);
 801013c:	4802      	ldr	r0, [pc, #8]	@ (8010148 <Battery_Stop+0x10>)
 801013e:	f7f5 fcd6 	bl	8005aee <HAL_LPTIM_Counter_Stop_IT>
}
 8010142:	bf00      	nop
 8010144:	bd80      	pop	{r7, pc}
 8010146:	bf00      	nop
 8010148:	24000dc0 	.word	0x24000dc0

0801014c <ADC_Battery_LPTIM5_IRQ>:

void ADC_Battery_LPTIM5_IRQ() {
 801014c:	b580      	push	{r7, lr}
 801014e:	b082      	sub	sp, #8
 8010150:	af00      	add	r7, sp, #0
	uint16_t adc_voltage = Sensor_ADC_Read(ADC_BATTERY_CHANNEL);
 8010152:	4812      	ldr	r0, [pc, #72]	@ (801019c <ADC_Battery_LPTIM5_IRQ+0x50>)
 8010154:	f7ff fbce 	bl	800f8f4 <Sensor_ADC_Read>
 8010158:	4603      	mov	r3, r0
 801015a:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(ADC_BATTERY_CHANNEL);
 801015c:	480f      	ldr	r0, [pc, #60]	@ (801019c <ADC_Battery_LPTIM5_IRQ+0x50>)
 801015e:	f7f3 f95f 	bl	8003420 <HAL_ADC_Stop>
	sensor.voltage = (float) (adc_voltage) / 65536.f * 3.3f * 11.f * 4.f;
 8010162:	88fb      	ldrh	r3, [r7, #6]
 8010164:	ee07 3a90 	vmov	s15, r3
 8010168:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801016c:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 80101a0 <ADC_Battery_LPTIM5_IRQ+0x54>
 8010170:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010174:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80101a4 <ADC_Battery_LPTIM5_IRQ+0x58>
 8010178:	ee67 7a87 	vmul.f32	s15, s15, s14
 801017c:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8010180:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010184:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8010188:	ee67 7a87 	vmul.f32	s15, s15, s14
 801018c:	4b06      	ldr	r3, [pc, #24]	@ (80101a8 <ADC_Battery_LPTIM5_IRQ+0x5c>)
 801018e:	edc3 7a4a 	vstr	s15, [r3, #296]	@ 0x128
}
 8010192:	bf00      	nop
 8010194:	3708      	adds	r7, #8
 8010196:	46bd      	mov	sp, r7
 8010198:	bd80      	pop	{r7, pc}
 801019a:	bf00      	nop
 801019c:	24000b64 	.word	0x24000b64
 80101a0:	47800000 	.word	0x47800000
 80101a4:	40533333 	.word	0x40533333
 80101a8:	240001a0 	.word	0x240001a0

080101ac <Sensor_Test_Voltage>:

void Sensor_Test_Voltage() {
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b082      	sub	sp, #8
 80101b0:	af02      	add	r7, sp, #8
	Battery_Start();
 80101b2:	f7ff ffb7 	bl	8010124 <Battery_Start>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 80101b6:	e00b      	b.n	80101d0 <Sensor_Test_Voltage+0x24>
		Custom_LCD_Printf(0, 0, "%.6f", sensor.voltage);
 80101b8:	4b11      	ldr	r3, [pc, #68]	@ (8010200 <Sensor_Test_Voltage+0x54>)
 80101ba:	edd3 7a4a 	vldr	s15, [r3, #296]	@ 0x128
 80101be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80101c2:	ed8d 7b00 	vstr	d7, [sp]
 80101c6:	4a0f      	ldr	r2, [pc, #60]	@ (8010204 <Sensor_Test_Voltage+0x58>)
 80101c8:	2100      	movs	r1, #0
 80101ca:	2000      	movs	r0, #0
 80101cc:	f7f0 ffa6 	bl	800111c <Custom_LCD_Printf>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 80101d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80101d4:	480c      	ldr	r0, [pc, #48]	@ (8010208 <Sensor_Test_Voltage+0x5c>)
 80101d6:	f7f4 fccf 	bl	8004b78 <HAL_GPIO_ReadPin>
 80101da:	4603      	mov	r3, r0
 80101dc:	2b01      	cmp	r3, #1
 80101de:	d1eb      	bne.n	80101b8 <Sensor_Test_Voltage+0xc>
	}
	Battery_Stop();
 80101e0:	f7ff ffaa 	bl	8010138 <Battery_Stop>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 80101e4:	bf00      	nop
 80101e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80101ea:	4807      	ldr	r0, [pc, #28]	@ (8010208 <Sensor_Test_Voltage+0x5c>)
 80101ec:	f7f4 fcc4 	bl	8004b78 <HAL_GPIO_ReadPin>
 80101f0:	4603      	mov	r3, r0
 80101f2:	2b01      	cmp	r3, #1
 80101f4:	d0f7      	beq.n	80101e6 <Sensor_Test_Voltage+0x3a>
		;
}
 80101f6:	bf00      	nop
 80101f8:	bf00      	nop
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}
 80101fe:	bf00      	nop
 8010200:	240001a0 	.word	0x240001a0
 8010204:	08017210 	.word	0x08017210
 8010208:	58020800 	.word	0x58020800

0801020c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801020c:	b480      	push	{r7}
 801020e:	b087      	sub	sp, #28
 8010210:	af00      	add	r7, sp, #0
 8010212:	60f8      	str	r0, [r7, #12]
 8010214:	60b9      	str	r1, [r7, #8]
 8010216:	4613      	mov	r3, r2
 8010218:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801021a:	2301      	movs	r3, #1
 801021c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801021e:	2300      	movs	r3, #0
 8010220:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010222:	4b1f      	ldr	r3, [pc, #124]	@ (80102a0 <FATFS_LinkDriverEx+0x94>)
 8010224:	7a5b      	ldrb	r3, [r3, #9]
 8010226:	b2db      	uxtb	r3, r3
 8010228:	2b00      	cmp	r3, #0
 801022a:	d131      	bne.n	8010290 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801022c:	4b1c      	ldr	r3, [pc, #112]	@ (80102a0 <FATFS_LinkDriverEx+0x94>)
 801022e:	7a5b      	ldrb	r3, [r3, #9]
 8010230:	b2db      	uxtb	r3, r3
 8010232:	461a      	mov	r2, r3
 8010234:	4b1a      	ldr	r3, [pc, #104]	@ (80102a0 <FATFS_LinkDriverEx+0x94>)
 8010236:	2100      	movs	r1, #0
 8010238:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801023a:	4b19      	ldr	r3, [pc, #100]	@ (80102a0 <FATFS_LinkDriverEx+0x94>)
 801023c:	7a5b      	ldrb	r3, [r3, #9]
 801023e:	b2db      	uxtb	r3, r3
 8010240:	4a17      	ldr	r2, [pc, #92]	@ (80102a0 <FATFS_LinkDriverEx+0x94>)
 8010242:	009b      	lsls	r3, r3, #2
 8010244:	4413      	add	r3, r2
 8010246:	68fa      	ldr	r2, [r7, #12]
 8010248:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801024a:	4b15      	ldr	r3, [pc, #84]	@ (80102a0 <FATFS_LinkDriverEx+0x94>)
 801024c:	7a5b      	ldrb	r3, [r3, #9]
 801024e:	b2db      	uxtb	r3, r3
 8010250:	461a      	mov	r2, r3
 8010252:	4b13      	ldr	r3, [pc, #76]	@ (80102a0 <FATFS_LinkDriverEx+0x94>)
 8010254:	4413      	add	r3, r2
 8010256:	79fa      	ldrb	r2, [r7, #7]
 8010258:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801025a:	4b11      	ldr	r3, [pc, #68]	@ (80102a0 <FATFS_LinkDriverEx+0x94>)
 801025c:	7a5b      	ldrb	r3, [r3, #9]
 801025e:	b2db      	uxtb	r3, r3
 8010260:	1c5a      	adds	r2, r3, #1
 8010262:	b2d1      	uxtb	r1, r2
 8010264:	4a0e      	ldr	r2, [pc, #56]	@ (80102a0 <FATFS_LinkDriverEx+0x94>)
 8010266:	7251      	strb	r1, [r2, #9]
 8010268:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801026a:	7dbb      	ldrb	r3, [r7, #22]
 801026c:	3330      	adds	r3, #48	@ 0x30
 801026e:	b2da      	uxtb	r2, r3
 8010270:	68bb      	ldr	r3, [r7, #8]
 8010272:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010274:	68bb      	ldr	r3, [r7, #8]
 8010276:	3301      	adds	r3, #1
 8010278:	223a      	movs	r2, #58	@ 0x3a
 801027a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801027c:	68bb      	ldr	r3, [r7, #8]
 801027e:	3302      	adds	r3, #2
 8010280:	222f      	movs	r2, #47	@ 0x2f
 8010282:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010284:	68bb      	ldr	r3, [r7, #8]
 8010286:	3303      	adds	r3, #3
 8010288:	2200      	movs	r2, #0
 801028a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801028c:	2300      	movs	r3, #0
 801028e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010290:	7dfb      	ldrb	r3, [r7, #23]
}
 8010292:	4618      	mov	r0, r3
 8010294:	371c      	adds	r7, #28
 8010296:	46bd      	mov	sp, r7
 8010298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop
 80102a0:	24000af4 	.word	0x24000af4

080102a4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b082      	sub	sp, #8
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
 80102ac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80102ae:	2200      	movs	r2, #0
 80102b0:	6839      	ldr	r1, [r7, #0]
 80102b2:	6878      	ldr	r0, [r7, #4]
 80102b4:	f7ff ffaa 	bl	801020c <FATFS_LinkDriverEx>
 80102b8:	4603      	mov	r3, r0
}
 80102ba:	4618      	mov	r0, r3
 80102bc:	3708      	adds	r7, #8
 80102be:	46bd      	mov	sp, r7
 80102c0:	bd80      	pop	{r7, pc}
	...

080102c4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b08a      	sub	sp, #40	@ 0x28
 80102c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80102ca:	f107 031c 	add.w	r3, r7, #28
 80102ce:	2200      	movs	r2, #0
 80102d0:	601a      	str	r2, [r3, #0]
 80102d2:	605a      	str	r2, [r3, #4]
 80102d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80102d6:	463b      	mov	r3, r7
 80102d8:	2200      	movs	r2, #0
 80102da:	601a      	str	r2, [r3, #0]
 80102dc:	605a      	str	r2, [r3, #4]
 80102de:	609a      	str	r2, [r3, #8]
 80102e0:	60da      	str	r2, [r3, #12]
 80102e2:	611a      	str	r2, [r3, #16]
 80102e4:	615a      	str	r2, [r3, #20]
 80102e6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80102e8:	4b97      	ldr	r3, [pc, #604]	@ (8010548 <MX_ADC1_Init+0x284>)
 80102ea:	4a98      	ldr	r2, [pc, #608]	@ (801054c <MX_ADC1_Init+0x288>)
 80102ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80102ee:	4b96      	ldr	r3, [pc, #600]	@ (8010548 <MX_ADC1_Init+0x284>)
 80102f0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80102f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B_OPT;
 80102f6:	4b94      	ldr	r3, [pc, #592]	@ (8010548 <MX_ADC1_Init+0x284>)
 80102f8:	2218      	movs	r2, #24
 80102fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80102fc:	4b92      	ldr	r3, [pc, #584]	@ (8010548 <MX_ADC1_Init+0x284>)
 80102fe:	2201      	movs	r2, #1
 8010300:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8010302:	4b91      	ldr	r3, [pc, #580]	@ (8010548 <MX_ADC1_Init+0x284>)
 8010304:	2204      	movs	r2, #4
 8010306:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8010308:	4b8f      	ldr	r3, [pc, #572]	@ (8010548 <MX_ADC1_Init+0x284>)
 801030a:	2200      	movs	r2, #0
 801030c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 801030e:	4b8e      	ldr	r3, [pc, #568]	@ (8010548 <MX_ADC1_Init+0x284>)
 8010310:	2200      	movs	r2, #0
 8010312:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 14;
 8010314:	4b8c      	ldr	r3, [pc, #560]	@ (8010548 <MX_ADC1_Init+0x284>)
 8010316:	220e      	movs	r2, #14
 8010318:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 801031a:	4b8b      	ldr	r3, [pc, #556]	@ (8010548 <MX_ADC1_Init+0x284>)
 801031c:	2201      	movs	r2, #1
 801031e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.NbrOfDiscConversion = 1;
 8010320:	4b89      	ldr	r3, [pc, #548]	@ (8010548 <MX_ADC1_Init+0x284>)
 8010322:	2201      	movs	r2, #1
 8010324:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8010326:	4b88      	ldr	r3, [pc, #544]	@ (8010548 <MX_ADC1_Init+0x284>)
 8010328:	2200      	movs	r2, #0
 801032a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 801032c:	4b86      	ldr	r3, [pc, #536]	@ (8010548 <MX_ADC1_Init+0x284>)
 801032e:	2200      	movs	r2, #0
 8010330:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8010332:	4b85      	ldr	r3, [pc, #532]	@ (8010548 <MX_ADC1_Init+0x284>)
 8010334:	2200      	movs	r2, #0
 8010336:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8010338:	4b83      	ldr	r3, [pc, #524]	@ (8010548 <MX_ADC1_Init+0x284>)
 801033a:	2200      	movs	r2, #0
 801033c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 801033e:	4b82      	ldr	r3, [pc, #520]	@ (8010548 <MX_ADC1_Init+0x284>)
 8010340:	2200      	movs	r2, #0
 8010342:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8010344:	4b80      	ldr	r3, [pc, #512]	@ (8010548 <MX_ADC1_Init+0x284>)
 8010346:	2200      	movs	r2, #0
 8010348:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 801034c:	4b7e      	ldr	r3, [pc, #504]	@ (8010548 <MX_ADC1_Init+0x284>)
 801034e:	2201      	movs	r2, #1
 8010350:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8010352:	487d      	ldr	r0, [pc, #500]	@ (8010548 <MX_ADC1_Init+0x284>)
 8010354:	f7f2 fdf8 	bl	8002f48 <HAL_ADC_Init>
 8010358:	4603      	mov	r3, r0
 801035a:	2b00      	cmp	r3, #0
 801035c:	d001      	beq.n	8010362 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 801035e:	f001 fa69 	bl	8011834 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8010362:	2300      	movs	r3, #0
 8010364:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8010366:	f107 031c 	add.w	r3, r7, #28
 801036a:	4619      	mov	r1, r3
 801036c:	4876      	ldr	r0, [pc, #472]	@ (8010548 <MX_ADC1_Init+0x284>)
 801036e:	f7f3 ffed 	bl	800434c <HAL_ADCEx_MultiModeConfigChannel>
 8010372:	4603      	mov	r3, r0
 8010374:	2b00      	cmp	r3, #0
 8010376:	d001      	beq.n	801037c <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8010378:	f001 fa5c 	bl	8011834 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 801037c:	4b74      	ldr	r3, [pc, #464]	@ (8010550 <MX_ADC1_Init+0x28c>)
 801037e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8010380:	2306      	movs	r3, #6
 8010382:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8010384:	2303      	movs	r3, #3
 8010386:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8010388:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 801038c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 801038e:	2304      	movs	r3, #4
 8010390:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8010392:	2300      	movs	r3, #0
 8010394:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010396:	463b      	mov	r3, r7
 8010398:	4619      	mov	r1, r3
 801039a:	486b      	ldr	r0, [pc, #428]	@ (8010548 <MX_ADC1_Init+0x284>)
 801039c:	f7f3 f976 	bl	800368c <HAL_ADC_ConfigChannel>
 80103a0:	4603      	mov	r3, r0
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d001      	beq.n	80103aa <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 80103a6:	f001 fa45 	bl	8011834 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80103aa:	4b6a      	ldr	r3, [pc, #424]	@ (8010554 <MX_ADC1_Init+0x290>)
 80103ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80103ae:	230c      	movs	r3, #12
 80103b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80103b2:	463b      	mov	r3, r7
 80103b4:	4619      	mov	r1, r3
 80103b6:	4864      	ldr	r0, [pc, #400]	@ (8010548 <MX_ADC1_Init+0x284>)
 80103b8:	f7f3 f968 	bl	800368c <HAL_ADC_ConfigChannel>
 80103bc:	4603      	mov	r3, r0
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d001      	beq.n	80103c6 <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 80103c2:	f001 fa37 	bl	8011834 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80103c6:	4b64      	ldr	r3, [pc, #400]	@ (8010558 <MX_ADC1_Init+0x294>)
 80103c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80103ca:	2312      	movs	r3, #18
 80103cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80103ce:	463b      	mov	r3, r7
 80103d0:	4619      	mov	r1, r3
 80103d2:	485d      	ldr	r0, [pc, #372]	@ (8010548 <MX_ADC1_Init+0x284>)
 80103d4:	f7f3 f95a 	bl	800368c <HAL_ADC_ConfigChannel>
 80103d8:	4603      	mov	r3, r0
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d001      	beq.n	80103e2 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 80103de:	f001 fa29 	bl	8011834 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80103e2:	4b5e      	ldr	r3, [pc, #376]	@ (801055c <MX_ADC1_Init+0x298>)
 80103e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80103e6:	2318      	movs	r3, #24
 80103e8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80103ea:	463b      	mov	r3, r7
 80103ec:	4619      	mov	r1, r3
 80103ee:	4856      	ldr	r0, [pc, #344]	@ (8010548 <MX_ADC1_Init+0x284>)
 80103f0:	f7f3 f94c 	bl	800368c <HAL_ADC_ConfigChannel>
 80103f4:	4603      	mov	r3, r0
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d001      	beq.n	80103fe <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 80103fa:	f001 fa1b 	bl	8011834 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80103fe:	4b58      	ldr	r3, [pc, #352]	@ (8010560 <MX_ADC1_Init+0x29c>)
 8010400:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8010402:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010406:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010408:	463b      	mov	r3, r7
 801040a:	4619      	mov	r1, r3
 801040c:	484e      	ldr	r0, [pc, #312]	@ (8010548 <MX_ADC1_Init+0x284>)
 801040e:	f7f3 f93d 	bl	800368c <HAL_ADC_ConfigChannel>
 8010412:	4603      	mov	r3, r0
 8010414:	2b00      	cmp	r3, #0
 8010416:	d001      	beq.n	801041c <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 8010418:	f001 fa0c 	bl	8011834 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 801041c:	4b51      	ldr	r3, [pc, #324]	@ (8010564 <MX_ADC1_Init+0x2a0>)
 801041e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8010420:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8010424:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010426:	463b      	mov	r3, r7
 8010428:	4619      	mov	r1, r3
 801042a:	4847      	ldr	r0, [pc, #284]	@ (8010548 <MX_ADC1_Init+0x284>)
 801042c:	f7f3 f92e 	bl	800368c <HAL_ADC_ConfigChannel>
 8010430:	4603      	mov	r3, r0
 8010432:	2b00      	cmp	r3, #0
 8010434:	d001      	beq.n	801043a <MX_ADC1_Init+0x176>
  {
    Error_Handler();
 8010436:	f001 f9fd 	bl	8011834 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 801043a:	4b4b      	ldr	r3, [pc, #300]	@ (8010568 <MX_ADC1_Init+0x2a4>)
 801043c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 801043e:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8010442:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010444:	463b      	mov	r3, r7
 8010446:	4619      	mov	r1, r3
 8010448:	483f      	ldr	r0, [pc, #252]	@ (8010548 <MX_ADC1_Init+0x284>)
 801044a:	f7f3 f91f 	bl	800368c <HAL_ADC_ConfigChannel>
 801044e:	4603      	mov	r3, r0
 8010450:	2b00      	cmp	r3, #0
 8010452:	d001      	beq.n	8010458 <MX_ADC1_Init+0x194>
  {
    Error_Handler();
 8010454:	f001 f9ee 	bl	8011834 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8010458:	4b44      	ldr	r3, [pc, #272]	@ (801056c <MX_ADC1_Init+0x2a8>)
 801045a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 801045c:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8010460:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010462:	463b      	mov	r3, r7
 8010464:	4619      	mov	r1, r3
 8010466:	4838      	ldr	r0, [pc, #224]	@ (8010548 <MX_ADC1_Init+0x284>)
 8010468:	f7f3 f910 	bl	800368c <HAL_ADC_ConfigChannel>
 801046c:	4603      	mov	r3, r0
 801046e:	2b00      	cmp	r3, #0
 8010470:	d001      	beq.n	8010476 <MX_ADC1_Init+0x1b2>
  {
    Error_Handler();
 8010472:	f001 f9df 	bl	8011834 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8010476:	4b3e      	ldr	r3, [pc, #248]	@ (8010570 <MX_ADC1_Init+0x2ac>)
 8010478:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 801047a:	f44f 738c 	mov.w	r3, #280	@ 0x118
 801047e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010480:	463b      	mov	r3, r7
 8010482:	4619      	mov	r1, r3
 8010484:	4830      	ldr	r0, [pc, #192]	@ (8010548 <MX_ADC1_Init+0x284>)
 8010486:	f7f3 f901 	bl	800368c <HAL_ADC_ConfigChannel>
 801048a:	4603      	mov	r3, r0
 801048c:	2b00      	cmp	r3, #0
 801048e:	d001      	beq.n	8010494 <MX_ADC1_Init+0x1d0>
  {
    Error_Handler();
 8010490:	f001 f9d0 	bl	8011834 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8010494:	4b37      	ldr	r3, [pc, #220]	@ (8010574 <MX_ADC1_Init+0x2b0>)
 8010496:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8010498:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801049c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801049e:	463b      	mov	r3, r7
 80104a0:	4619      	mov	r1, r3
 80104a2:	4829      	ldr	r0, [pc, #164]	@ (8010548 <MX_ADC1_Init+0x284>)
 80104a4:	f7f3 f8f2 	bl	800368c <HAL_ADC_ConfigChannel>
 80104a8:	4603      	mov	r3, r0
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d001      	beq.n	80104b2 <MX_ADC1_Init+0x1ee>
  {
    Error_Handler();
 80104ae:	f001 f9c1 	bl	8011834 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80104b2:	4b31      	ldr	r3, [pc, #196]	@ (8010578 <MX_ADC1_Init+0x2b4>)
 80104b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80104b6:	f240 2306 	movw	r3, #518	@ 0x206
 80104ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80104bc:	463b      	mov	r3, r7
 80104be:	4619      	mov	r1, r3
 80104c0:	4821      	ldr	r0, [pc, #132]	@ (8010548 <MX_ADC1_Init+0x284>)
 80104c2:	f7f3 f8e3 	bl	800368c <HAL_ADC_ConfigChannel>
 80104c6:	4603      	mov	r3, r0
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d001      	beq.n	80104d0 <MX_ADC1_Init+0x20c>
  {
    Error_Handler();
 80104cc:	f001 f9b2 	bl	8011834 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80104d0:	4b2a      	ldr	r3, [pc, #168]	@ (801057c <MX_ADC1_Init+0x2b8>)
 80104d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80104d4:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 80104d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80104da:	463b      	mov	r3, r7
 80104dc:	4619      	mov	r1, r3
 80104de:	481a      	ldr	r0, [pc, #104]	@ (8010548 <MX_ADC1_Init+0x284>)
 80104e0:	f7f3 f8d4 	bl	800368c <HAL_ADC_ConfigChannel>
 80104e4:	4603      	mov	r3, r0
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d001      	beq.n	80104ee <MX_ADC1_Init+0x22a>
  {
    Error_Handler();
 80104ea:	f001 f9a3 	bl	8011834 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80104ee:	4b24      	ldr	r3, [pc, #144]	@ (8010580 <MX_ADC1_Init+0x2bc>)
 80104f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 80104f2:	f240 2312 	movw	r3, #530	@ 0x212
 80104f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80104f8:	463b      	mov	r3, r7
 80104fa:	4619      	mov	r1, r3
 80104fc:	4812      	ldr	r0, [pc, #72]	@ (8010548 <MX_ADC1_Init+0x284>)
 80104fe:	f7f3 f8c5 	bl	800368c <HAL_ADC_ConfigChannel>
 8010502:	4603      	mov	r3, r0
 8010504:	2b00      	cmp	r3, #0
 8010506:	d001      	beq.n	801050c <MX_ADC1_Init+0x248>
  {
    Error_Handler();
 8010508:	f001 f994 	bl	8011834 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 801050c:	4b1d      	ldr	r3, [pc, #116]	@ (8010584 <MX_ADC1_Init+0x2c0>)
 801050e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8010510:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8010514:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010516:	463b      	mov	r3, r7
 8010518:	4619      	mov	r1, r3
 801051a:	480b      	ldr	r0, [pc, #44]	@ (8010548 <MX_ADC1_Init+0x284>)
 801051c:	f7f3 f8b6 	bl	800368c <HAL_ADC_ConfigChannel>
 8010520:	4603      	mov	r3, r0
 8010522:	2b00      	cmp	r3, #0
 8010524:	d001      	beq.n	801052a <MX_ADC1_Init+0x266>
  {
    Error_Handler();
 8010526:	f001 f985 	bl	8011834 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED)
 801052a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801052e:	2100      	movs	r1, #0
 8010530:	4805      	ldr	r0, [pc, #20]	@ (8010548 <MX_ADC1_Init+0x284>)
 8010532:	f7f3 fea7 	bl	8004284 <HAL_ADCEx_Calibration_Start>
 8010536:	4603      	mov	r3, r0
 8010538:	2b00      	cmp	r3, #0
 801053a:	d001      	beq.n	8010540 <MX_ADC1_Init+0x27c>
			!= HAL_OK) {
		Error_Handler();
 801053c:	f001 f97a 	bl	8011834 <Error_Handler>
	}
  /* USER CODE END ADC1_Init 2 */

}
 8010540:	bf00      	nop
 8010542:	3728      	adds	r7, #40	@ 0x28
 8010544:	46bd      	mov	sp, r7
 8010546:	bd80      	pop	{r7, pc}
 8010548:	24000b00 	.word	0x24000b00
 801054c:	40022000 	.word	0x40022000
 8010550:	14f00020 	.word	0x14f00020
 8010554:	25b00200 	.word	0x25b00200
 8010558:	21800100 	.word	0x21800100
 801055c:	10c00010 	.word	0x10c00010
 8010560:	1d500080 	.word	0x1d500080
 8010564:	0c900008 	.word	0x0c900008
 8010568:	4fb80000 	.word	0x4fb80000
 801056c:	4b840000 	.word	0x4b840000
 8010570:	3ef08000 	.word	0x3ef08000
 8010574:	3ac04000 	.word	0x3ac04000
 8010578:	47520000 	.word	0x47520000
 801057c:	43210000 	.word	0x43210000
 8010580:	2e300800 	.word	0x2e300800
 8010584:	2a000400 	.word	0x2a000400

08010588 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b088      	sub	sp, #32
 801058c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 801058e:	1d3b      	adds	r3, r7, #4
 8010590:	2200      	movs	r2, #0
 8010592:	601a      	str	r2, [r3, #0]
 8010594:	605a      	str	r2, [r3, #4]
 8010596:	609a      	str	r2, [r3, #8]
 8010598:	60da      	str	r2, [r3, #12]
 801059a:	611a      	str	r2, [r3, #16]
 801059c:	615a      	str	r2, [r3, #20]
 801059e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80105a0:	4b2b      	ldr	r3, [pc, #172]	@ (8010650 <MX_ADC2_Init+0xc8>)
 80105a2:	4a2c      	ldr	r2, [pc, #176]	@ (8010654 <MX_ADC2_Init+0xcc>)
 80105a4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80105a6:	4b2a      	ldr	r3, [pc, #168]	@ (8010650 <MX_ADC2_Init+0xc8>)
 80105a8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80105ac:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80105ae:	4b28      	ldr	r3, [pc, #160]	@ (8010650 <MX_ADC2_Init+0xc8>)
 80105b0:	2200      	movs	r2, #0
 80105b2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80105b4:	4b26      	ldr	r3, [pc, #152]	@ (8010650 <MX_ADC2_Init+0xc8>)
 80105b6:	2200      	movs	r2, #0
 80105b8:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80105ba:	4b25      	ldr	r3, [pc, #148]	@ (8010650 <MX_ADC2_Init+0xc8>)
 80105bc:	2204      	movs	r2, #4
 80105be:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80105c0:	4b23      	ldr	r3, [pc, #140]	@ (8010650 <MX_ADC2_Init+0xc8>)
 80105c2:	2200      	movs	r2, #0
 80105c4:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80105c6:	4b22      	ldr	r3, [pc, #136]	@ (8010650 <MX_ADC2_Init+0xc8>)
 80105c8:	2200      	movs	r2, #0
 80105ca:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80105cc:	4b20      	ldr	r3, [pc, #128]	@ (8010650 <MX_ADC2_Init+0xc8>)
 80105ce:	2201      	movs	r2, #1
 80105d0:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80105d2:	4b1f      	ldr	r3, [pc, #124]	@ (8010650 <MX_ADC2_Init+0xc8>)
 80105d4:	2200      	movs	r2, #0
 80105d6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80105d8:	4b1d      	ldr	r3, [pc, #116]	@ (8010650 <MX_ADC2_Init+0xc8>)
 80105da:	2200      	movs	r2, #0
 80105dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80105de:	4b1c      	ldr	r3, [pc, #112]	@ (8010650 <MX_ADC2_Init+0xc8>)
 80105e0:	2200      	movs	r2, #0
 80105e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80105e4:	4b1a      	ldr	r3, [pc, #104]	@ (8010650 <MX_ADC2_Init+0xc8>)
 80105e6:	2200      	movs	r2, #0
 80105e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80105ea:	4b19      	ldr	r3, [pc, #100]	@ (8010650 <MX_ADC2_Init+0xc8>)
 80105ec:	2200      	movs	r2, #0
 80105ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80105f0:	4b17      	ldr	r3, [pc, #92]	@ (8010650 <MX_ADC2_Init+0xc8>)
 80105f2:	2200      	movs	r2, #0
 80105f4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80105f6:	4b16      	ldr	r3, [pc, #88]	@ (8010650 <MX_ADC2_Init+0xc8>)
 80105f8:	2200      	movs	r2, #0
 80105fa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Oversampling.Ratio = 1;
 80105fe:	4b14      	ldr	r3, [pc, #80]	@ (8010650 <MX_ADC2_Init+0xc8>)
 8010600:	2201      	movs	r2, #1
 8010602:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8010604:	4812      	ldr	r0, [pc, #72]	@ (8010650 <MX_ADC2_Init+0xc8>)
 8010606:	f7f2 fc9f 	bl	8002f48 <HAL_ADC_Init>
 801060a:	4603      	mov	r3, r0
 801060c:	2b00      	cmp	r3, #0
 801060e:	d001      	beq.n	8010614 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8010610:	f001 f910 	bl	8011834 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8010614:	4b10      	ldr	r3, [pc, #64]	@ (8010658 <MX_ADC2_Init+0xd0>)
 8010616:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8010618:	2306      	movs	r3, #6
 801061a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 801061c:	2307      	movs	r3, #7
 801061e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8010620:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8010624:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8010626:	2304      	movs	r3, #4
 8010628:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 801062a:	2300      	movs	r3, #0
 801062c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 801062e:	2300      	movs	r3, #0
 8010630:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8010632:	1d3b      	adds	r3, r7, #4
 8010634:	4619      	mov	r1, r3
 8010636:	4806      	ldr	r0, [pc, #24]	@ (8010650 <MX_ADC2_Init+0xc8>)
 8010638:	f7f3 f828 	bl	800368c <HAL_ADC_ConfigChannel>
 801063c:	4603      	mov	r3, r0
 801063e:	2b00      	cmp	r3, #0
 8010640:	d001      	beq.n	8010646 <MX_ADC2_Init+0xbe>
  {
    Error_Handler();
 8010642:	f001 f8f7 	bl	8011834 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8010646:	bf00      	nop
 8010648:	3720      	adds	r7, #32
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}
 801064e:	bf00      	nop
 8010650:	24000b64 	.word	0x24000b64
 8010654:	40022100 	.word	0x40022100
 8010658:	c7520000 	.word	0xc7520000

0801065c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b088      	sub	sp, #32
 8010660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8010662:	1d3b      	adds	r3, r7, #4
 8010664:	2200      	movs	r2, #0
 8010666:	601a      	str	r2, [r3, #0]
 8010668:	605a      	str	r2, [r3, #4]
 801066a:	609a      	str	r2, [r3, #8]
 801066c:	60da      	str	r2, [r3, #12]
 801066e:	611a      	str	r2, [r3, #16]
 8010670:	615a      	str	r2, [r3, #20]
 8010672:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8010674:	4b33      	ldr	r3, [pc, #204]	@ (8010744 <MX_ADC3_Init+0xe8>)
 8010676:	4a34      	ldr	r2, [pc, #208]	@ (8010748 <MX_ADC3_Init+0xec>)
 8010678:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 801067a:	4b32      	ldr	r3, [pc, #200]	@ (8010744 <MX_ADC3_Init+0xe8>)
 801067c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8010680:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_8B;
 8010682:	4b30      	ldr	r3, [pc, #192]	@ (8010744 <MX_ADC3_Init+0xe8>)
 8010684:	2210      	movs	r2, #16
 8010686:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8010688:	4b2e      	ldr	r3, [pc, #184]	@ (8010744 <MX_ADC3_Init+0xe8>)
 801068a:	2201      	movs	r2, #1
 801068c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801068e:	4b2d      	ldr	r3, [pc, #180]	@ (8010744 <MX_ADC3_Init+0xe8>)
 8010690:	2204      	movs	r2, #4
 8010692:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8010694:	4b2b      	ldr	r3, [pc, #172]	@ (8010744 <MX_ADC3_Init+0xe8>)
 8010696:	2200      	movs	r2, #0
 8010698:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 801069a:	4b2a      	ldr	r3, [pc, #168]	@ (8010744 <MX_ADC3_Init+0xe8>)
 801069c:	2200      	movs	r2, #0
 801069e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 2;
 80106a0:	4b28      	ldr	r3, [pc, #160]	@ (8010744 <MX_ADC3_Init+0xe8>)
 80106a2:	2202      	movs	r2, #2
 80106a4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = ENABLE;
 80106a6:	4b27      	ldr	r3, [pc, #156]	@ (8010744 <MX_ADC3_Init+0xe8>)
 80106a8:	2201      	movs	r2, #1
 80106aa:	771a      	strb	r2, [r3, #28]
  hadc3.Init.NbrOfDiscConversion = 1;
 80106ac:	4b25      	ldr	r3, [pc, #148]	@ (8010744 <MX_ADC3_Init+0xe8>)
 80106ae:	2201      	movs	r2, #1
 80106b0:	621a      	str	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80106b2:	4b24      	ldr	r3, [pc, #144]	@ (8010744 <MX_ADC3_Init+0xe8>)
 80106b4:	2200      	movs	r2, #0
 80106b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80106b8:	4b22      	ldr	r3, [pc, #136]	@ (8010744 <MX_ADC3_Init+0xe8>)
 80106ba:	2200      	movs	r2, #0
 80106bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80106be:	4b21      	ldr	r3, [pc, #132]	@ (8010744 <MX_ADC3_Init+0xe8>)
 80106c0:	2200      	movs	r2, #0
 80106c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80106c4:	4b1f      	ldr	r3, [pc, #124]	@ (8010744 <MX_ADC3_Init+0xe8>)
 80106c6:	2200      	movs	r2, #0
 80106c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80106ca:	4b1e      	ldr	r3, [pc, #120]	@ (8010744 <MX_ADC3_Init+0xe8>)
 80106cc:	2200      	movs	r2, #0
 80106ce:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80106d0:	4b1c      	ldr	r3, [pc, #112]	@ (8010744 <MX_ADC3_Init+0xe8>)
 80106d2:	2200      	movs	r2, #0
 80106d4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 80106d8:	4b1a      	ldr	r3, [pc, #104]	@ (8010744 <MX_ADC3_Init+0xe8>)
 80106da:	2201      	movs	r2, #1
 80106dc:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80106de:	4819      	ldr	r0, [pc, #100]	@ (8010744 <MX_ADC3_Init+0xe8>)
 80106e0:	f7f2 fc32 	bl	8002f48 <HAL_ADC_Init>
 80106e4:	4603      	mov	r3, r0
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d001      	beq.n	80106ee <MX_ADC3_Init+0x92>
  {
    Error_Handler();
 80106ea:	f001 f8a3 	bl	8011834 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80106ee:	2301      	movs	r3, #1
 80106f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80106f2:	2306      	movs	r3, #6
 80106f4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 80106f6:	2302      	movs	r3, #2
 80106f8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80106fa:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80106fe:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8010700:	2304      	movs	r3, #4
 8010702:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8010704:	2300      	movs	r3, #0
 8010706:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8010708:	2300      	movs	r3, #0
 801070a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 801070c:	1d3b      	adds	r3, r7, #4
 801070e:	4619      	mov	r1, r3
 8010710:	480c      	ldr	r0, [pc, #48]	@ (8010744 <MX_ADC3_Init+0xe8>)
 8010712:	f7f2 ffbb 	bl	800368c <HAL_ADC_ConfigChannel>
 8010716:	4603      	mov	r3, r0
 8010718:	2b00      	cmp	r3, #0
 801071a:	d001      	beq.n	8010720 <MX_ADC3_Init+0xc4>
  {
    Error_Handler();
 801071c:	f001 f88a 	bl	8011834 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8010720:	4b0a      	ldr	r3, [pc, #40]	@ (801074c <MX_ADC3_Init+0xf0>)
 8010722:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8010724:	230c      	movs	r3, #12
 8010726:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8010728:	1d3b      	adds	r3, r7, #4
 801072a:	4619      	mov	r1, r3
 801072c:	4805      	ldr	r0, [pc, #20]	@ (8010744 <MX_ADC3_Init+0xe8>)
 801072e:	f7f2 ffad 	bl	800368c <HAL_ADC_ConfigChannel>
 8010732:	4603      	mov	r3, r0
 8010734:	2b00      	cmp	r3, #0
 8010736:	d001      	beq.n	801073c <MX_ADC3_Init+0xe0>
  {
    Error_Handler();
 8010738:	f001 f87c 	bl	8011834 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 801073c:	bf00      	nop
 801073e:	3720      	adds	r7, #32
 8010740:	46bd      	mov	sp, r7
 8010742:	bd80      	pop	{r7, pc}
 8010744:	24000bc8 	.word	0x24000bc8
 8010748:	58026000 	.word	0x58026000
 801074c:	04300002 	.word	0x04300002

08010750 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b08e      	sub	sp, #56	@ 0x38
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010758:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801075c:	2200      	movs	r2, #0
 801075e:	601a      	str	r2, [r3, #0]
 8010760:	605a      	str	r2, [r3, #4]
 8010762:	609a      	str	r2, [r3, #8]
 8010764:	60da      	str	r2, [r3, #12]
 8010766:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	4a5e      	ldr	r2, [pc, #376]	@ (80108e8 <HAL_ADC_MspInit+0x198>)
 801076e:	4293      	cmp	r3, r2
 8010770:	d169      	bne.n	8010846 <HAL_ADC_MspInit+0xf6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8010772:	4b5e      	ldr	r3, [pc, #376]	@ (80108ec <HAL_ADC_MspInit+0x19c>)
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	3301      	adds	r3, #1
 8010778:	4a5c      	ldr	r2, [pc, #368]	@ (80108ec <HAL_ADC_MspInit+0x19c>)
 801077a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 801077c:	4b5b      	ldr	r3, [pc, #364]	@ (80108ec <HAL_ADC_MspInit+0x19c>)
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	2b01      	cmp	r3, #1
 8010782:	d10e      	bne.n	80107a2 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8010784:	4b5a      	ldr	r3, [pc, #360]	@ (80108f0 <HAL_ADC_MspInit+0x1a0>)
 8010786:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801078a:	4a59      	ldr	r2, [pc, #356]	@ (80108f0 <HAL_ADC_MspInit+0x1a0>)
 801078c:	f043 0320 	orr.w	r3, r3, #32
 8010790:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8010794:	4b56      	ldr	r3, [pc, #344]	@ (80108f0 <HAL_ADC_MspInit+0x1a0>)
 8010796:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801079a:	f003 0320 	and.w	r3, r3, #32
 801079e:	623b      	str	r3, [r7, #32]
 80107a0:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80107a2:	4b53      	ldr	r3, [pc, #332]	@ (80108f0 <HAL_ADC_MspInit+0x1a0>)
 80107a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80107a8:	4a51      	ldr	r2, [pc, #324]	@ (80108f0 <HAL_ADC_MspInit+0x1a0>)
 80107aa:	f043 0304 	orr.w	r3, r3, #4
 80107ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80107b2:	4b4f      	ldr	r3, [pc, #316]	@ (80108f0 <HAL_ADC_MspInit+0x1a0>)
 80107b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80107b8:	f003 0304 	and.w	r3, r3, #4
 80107bc:	61fb      	str	r3, [r7, #28]
 80107be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80107c0:	4b4b      	ldr	r3, [pc, #300]	@ (80108f0 <HAL_ADC_MspInit+0x1a0>)
 80107c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80107c6:	4a4a      	ldr	r2, [pc, #296]	@ (80108f0 <HAL_ADC_MspInit+0x1a0>)
 80107c8:	f043 0301 	orr.w	r3, r3, #1
 80107cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80107d0:	4b47      	ldr	r3, [pc, #284]	@ (80108f0 <HAL_ADC_MspInit+0x1a0>)
 80107d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80107d6:	f003 0301 	and.w	r3, r3, #1
 80107da:	61bb      	str	r3, [r7, #24]
 80107dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80107de:	4b44      	ldr	r3, [pc, #272]	@ (80108f0 <HAL_ADC_MspInit+0x1a0>)
 80107e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80107e4:	4a42      	ldr	r2, [pc, #264]	@ (80108f0 <HAL_ADC_MspInit+0x1a0>)
 80107e6:	f043 0302 	orr.w	r3, r3, #2
 80107ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80107ee:	4b40      	ldr	r3, [pc, #256]	@ (80108f0 <HAL_ADC_MspInit+0x1a0>)
 80107f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80107f4:	f003 0302 	and.w	r3, r3, #2
 80107f8:	617b      	str	r3, [r7, #20]
 80107fa:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80107fc:	2333      	movs	r3, #51	@ 0x33
 80107fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8010800:	2303      	movs	r3, #3
 8010802:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010804:	2300      	movs	r3, #0
 8010806:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010808:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801080c:	4619      	mov	r1, r3
 801080e:	4839      	ldr	r0, [pc, #228]	@ (80108f4 <HAL_ADC_MspInit+0x1a4>)
 8010810:	f7f4 f802 	bl	8004818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8010814:	23ff      	movs	r3, #255	@ 0xff
 8010816:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8010818:	2303      	movs	r3, #3
 801081a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801081c:	2300      	movs	r3, #0
 801081e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010820:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010824:	4619      	mov	r1, r3
 8010826:	4834      	ldr	r0, [pc, #208]	@ (80108f8 <HAL_ADC_MspInit+0x1a8>)
 8010828:	f7f3 fff6 	bl	8004818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 801082c:	2303      	movs	r3, #3
 801082e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8010830:	2303      	movs	r3, #3
 8010832:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010834:	2300      	movs	r3, #0
 8010836:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010838:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801083c:	4619      	mov	r1, r3
 801083e:	482f      	ldr	r0, [pc, #188]	@ (80108fc <HAL_ADC_MspInit+0x1ac>)
 8010840:	f7f3 ffea 	bl	8004818 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8010844:	e04c      	b.n	80108e0 <HAL_ADC_MspInit+0x190>
  else if(adcHandle->Instance==ADC2)
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	4a2d      	ldr	r2, [pc, #180]	@ (8010900 <HAL_ADC_MspInit+0x1b0>)
 801084c:	4293      	cmp	r3, r2
 801084e:	d118      	bne.n	8010882 <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8010850:	4b26      	ldr	r3, [pc, #152]	@ (80108ec <HAL_ADC_MspInit+0x19c>)
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	3301      	adds	r3, #1
 8010856:	4a25      	ldr	r2, [pc, #148]	@ (80108ec <HAL_ADC_MspInit+0x19c>)
 8010858:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 801085a:	4b24      	ldr	r3, [pc, #144]	@ (80108ec <HAL_ADC_MspInit+0x19c>)
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	2b01      	cmp	r3, #1
 8010860:	d13e      	bne.n	80108e0 <HAL_ADC_MspInit+0x190>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8010862:	4b23      	ldr	r3, [pc, #140]	@ (80108f0 <HAL_ADC_MspInit+0x1a0>)
 8010864:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010868:	4a21      	ldr	r2, [pc, #132]	@ (80108f0 <HAL_ADC_MspInit+0x1a0>)
 801086a:	f043 0320 	orr.w	r3, r3, #32
 801086e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8010872:	4b1f      	ldr	r3, [pc, #124]	@ (80108f0 <HAL_ADC_MspInit+0x1a0>)
 8010874:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010878:	f003 0320 	and.w	r3, r3, #32
 801087c:	613b      	str	r3, [r7, #16]
 801087e:	693b      	ldr	r3, [r7, #16]
}
 8010880:	e02e      	b.n	80108e0 <HAL_ADC_MspInit+0x190>
  else if(adcHandle->Instance==ADC3)
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	4a1f      	ldr	r2, [pc, #124]	@ (8010904 <HAL_ADC_MspInit+0x1b4>)
 8010888:	4293      	cmp	r3, r2
 801088a:	d129      	bne.n	80108e0 <HAL_ADC_MspInit+0x190>
    __HAL_RCC_ADC3_CLK_ENABLE();
 801088c:	4b18      	ldr	r3, [pc, #96]	@ (80108f0 <HAL_ADC_MspInit+0x1a0>)
 801088e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010892:	4a17      	ldr	r2, [pc, #92]	@ (80108f0 <HAL_ADC_MspInit+0x1a0>)
 8010894:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8010898:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801089c:	4b14      	ldr	r3, [pc, #80]	@ (80108f0 <HAL_ADC_MspInit+0x1a0>)
 801089e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80108a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80108a6:	60fb      	str	r3, [r7, #12]
 80108a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80108aa:	4b11      	ldr	r3, [pc, #68]	@ (80108f0 <HAL_ADC_MspInit+0x1a0>)
 80108ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80108b0:	4a0f      	ldr	r2, [pc, #60]	@ (80108f0 <HAL_ADC_MspInit+0x1a0>)
 80108b2:	f043 0304 	orr.w	r3, r3, #4
 80108b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80108ba:	4b0d      	ldr	r3, [pc, #52]	@ (80108f0 <HAL_ADC_MspInit+0x1a0>)
 80108bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80108c0:	f003 0304 	and.w	r3, r3, #4
 80108c4:	60bb      	str	r3, [r7, #8]
 80108c6:	68bb      	ldr	r3, [r7, #8]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80108c8:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 80108cc:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80108d0:	f7f2 f8be 	bl	8002a50 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80108d4:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 80108d8:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 80108dc:	f7f2 f8b8 	bl	8002a50 <HAL_SYSCFG_AnalogSwitchConfig>
}
 80108e0:	bf00      	nop
 80108e2:	3738      	adds	r7, #56	@ 0x38
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}
 80108e8:	40022000 	.word	0x40022000
 80108ec:	24000c2c 	.word	0x24000c2c
 80108f0:	58024400 	.word	0x58024400
 80108f4:	58020800 	.word	0x58020800
 80108f8:	58020000 	.word	0x58020000
 80108fc:	58020400 	.word	0x58020400
 8010900:	40022100 	.word	0x40022100
 8010904:	58026000 	.word	0x58026000

08010908 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b082      	sub	sp, #8
 801090c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801090e:	2300      	movs	r3, #0
 8010910:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010912:	f000 f879 	bl	8010a08 <BSP_SD_IsDetected>
 8010916:	4603      	mov	r3, r0
 8010918:	2b01      	cmp	r3, #1
 801091a:	d001      	beq.n	8010920 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 801091c:	2302      	movs	r3, #2
 801091e:	e012      	b.n	8010946 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8010920:	480b      	ldr	r0, [pc, #44]	@ (8010950 <BSP_SD_Init+0x48>)
 8010922:	f7f9 fba5 	bl	800a070 <HAL_SD_Init>
 8010926:	4603      	mov	r3, r0
 8010928:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801092a:	79fb      	ldrb	r3, [r7, #7]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d109      	bne.n	8010944 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8010930:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8010934:	4806      	ldr	r0, [pc, #24]	@ (8010950 <BSP_SD_Init+0x48>)
 8010936:	f7fa fa61 	bl	800adfc <HAL_SD_ConfigWideBusOperation>
 801093a:	4603      	mov	r3, r0
 801093c:	2b00      	cmp	r3, #0
 801093e:	d001      	beq.n	8010944 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010940:	2301      	movs	r3, #1
 8010942:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010944:	79fb      	ldrb	r3, [r7, #7]
}
 8010946:	4618      	mov	r0, r3
 8010948:	3708      	adds	r7, #8
 801094a:	46bd      	mov	sp, r7
 801094c:	bd80      	pop	{r7, pc}
 801094e:	bf00      	nop
 8010950:	24000e1c 	.word	0x24000e1c

08010954 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8010954:	b580      	push	{r7, lr}
 8010956:	b088      	sub	sp, #32
 8010958:	af02      	add	r7, sp, #8
 801095a:	60f8      	str	r0, [r7, #12]
 801095c:	60b9      	str	r1, [r7, #8]
 801095e:	607a      	str	r2, [r7, #4]
 8010960:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8010962:	2300      	movs	r3, #0
 8010964:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8010966:	683b      	ldr	r3, [r7, #0]
 8010968:	9300      	str	r3, [sp, #0]
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	68ba      	ldr	r2, [r7, #8]
 801096e:	68f9      	ldr	r1, [r7, #12]
 8010970:	4806      	ldr	r0, [pc, #24]	@ (801098c <BSP_SD_ReadBlocks+0x38>)
 8010972:	f7f9 fc9d 	bl	800a2b0 <HAL_SD_ReadBlocks>
 8010976:	4603      	mov	r3, r0
 8010978:	2b00      	cmp	r3, #0
 801097a:	d001      	beq.n	8010980 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 801097c:	2301      	movs	r3, #1
 801097e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010980:	7dfb      	ldrb	r3, [r7, #23]
}
 8010982:	4618      	mov	r0, r3
 8010984:	3718      	adds	r7, #24
 8010986:	46bd      	mov	sp, r7
 8010988:	bd80      	pop	{r7, pc}
 801098a:	bf00      	nop
 801098c:	24000e1c 	.word	0x24000e1c

08010990 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b088      	sub	sp, #32
 8010994:	af02      	add	r7, sp, #8
 8010996:	60f8      	str	r0, [r7, #12]
 8010998:	60b9      	str	r1, [r7, #8]
 801099a:	607a      	str	r2, [r7, #4]
 801099c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 801099e:	2300      	movs	r3, #0
 80109a0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80109a2:	683b      	ldr	r3, [r7, #0]
 80109a4:	9300      	str	r3, [sp, #0]
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	68ba      	ldr	r2, [r7, #8]
 80109aa:	68f9      	ldr	r1, [r7, #12]
 80109ac:	4806      	ldr	r0, [pc, #24]	@ (80109c8 <BSP_SD_WriteBlocks+0x38>)
 80109ae:	f7f9 fe09 	bl	800a5c4 <HAL_SD_WriteBlocks>
 80109b2:	4603      	mov	r3, r0
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d001      	beq.n	80109bc <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80109b8:	2301      	movs	r3, #1
 80109ba:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80109bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80109be:	4618      	mov	r0, r3
 80109c0:	3718      	adds	r7, #24
 80109c2:	46bd      	mov	sp, r7
 80109c4:	bd80      	pop	{r7, pc}
 80109c6:	bf00      	nop
 80109c8:	24000e1c 	.word	0x24000e1c

080109cc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80109d0:	4805      	ldr	r0, [pc, #20]	@ (80109e8 <BSP_SD_GetCardState+0x1c>)
 80109d2:	f7fa fb25 	bl	800b020 <HAL_SD_GetCardState>
 80109d6:	4603      	mov	r3, r0
 80109d8:	2b04      	cmp	r3, #4
 80109da:	bf14      	ite	ne
 80109dc:	2301      	movne	r3, #1
 80109de:	2300      	moveq	r3, #0
 80109e0:	b2db      	uxtb	r3, r3
}
 80109e2:	4618      	mov	r0, r3
 80109e4:	bd80      	pop	{r7, pc}
 80109e6:	bf00      	nop
 80109e8:	24000e1c 	.word	0x24000e1c

080109ec <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b082      	sub	sp, #8
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80109f4:	6879      	ldr	r1, [r7, #4]
 80109f6:	4803      	ldr	r0, [pc, #12]	@ (8010a04 <BSP_SD_GetCardInfo+0x18>)
 80109f8:	f7fa f9d4 	bl	800ada4 <HAL_SD_GetCardInfo>
}
 80109fc:	bf00      	nop
 80109fe:	3708      	adds	r7, #8
 8010a00:	46bd      	mov	sp, r7
 8010a02:	bd80      	pop	{r7, pc}
 8010a04:	24000e1c 	.word	0x24000e1c

08010a08 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010a08:	b480      	push	{r7}
 8010a0a:	b083      	sub	sp, #12
 8010a0c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010a0e:	2301      	movs	r3, #1
 8010a10:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 8010a12:	79fb      	ldrb	r3, [r7, #7]
 8010a14:	b2db      	uxtb	r3, r3
}
 8010a16:	4618      	mov	r0, r3
 8010a18:	370c      	adds	r7, #12
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a20:	4770      	bx	lr
	...

08010a24 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010a28:	4904      	ldr	r1, [pc, #16]	@ (8010a3c <MX_FATFS_Init+0x18>)
 8010a2a:	4805      	ldr	r0, [pc, #20]	@ (8010a40 <MX_FATFS_Init+0x1c>)
 8010a2c:	f7ff fc3a 	bl	80102a4 <FATFS_LinkDriver>
 8010a30:	4603      	mov	r3, r0
 8010a32:	461a      	mov	r2, r3
 8010a34:	4b03      	ldr	r3, [pc, #12]	@ (8010a44 <MX_FATFS_Init+0x20>)
 8010a36:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010a38:	bf00      	nop
 8010a3a:	bd80      	pop	{r7, pc}
 8010a3c:	24000c34 	.word	0x24000c34
 8010a40:	0801e0a0 	.word	0x0801e0a0
 8010a44:	24000c30 	.word	0x24000c30

08010a48 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b08c      	sub	sp, #48	@ 0x30
 8010a4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010a4e:	f107 031c 	add.w	r3, r7, #28
 8010a52:	2200      	movs	r2, #0
 8010a54:	601a      	str	r2, [r3, #0]
 8010a56:	605a      	str	r2, [r3, #4]
 8010a58:	609a      	str	r2, [r3, #8]
 8010a5a:	60da      	str	r2, [r3, #12]
 8010a5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8010a5e:	4b77      	ldr	r3, [pc, #476]	@ (8010c3c <MX_GPIO_Init+0x1f4>)
 8010a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010a64:	4a75      	ldr	r2, [pc, #468]	@ (8010c3c <MX_GPIO_Init+0x1f4>)
 8010a66:	f043 0310 	orr.w	r3, r3, #16
 8010a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010a6e:	4b73      	ldr	r3, [pc, #460]	@ (8010c3c <MX_GPIO_Init+0x1f4>)
 8010a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010a74:	f003 0310 	and.w	r3, r3, #16
 8010a78:	61bb      	str	r3, [r7, #24]
 8010a7a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8010a7c:	4b6f      	ldr	r3, [pc, #444]	@ (8010c3c <MX_GPIO_Init+0x1f4>)
 8010a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010a82:	4a6e      	ldr	r2, [pc, #440]	@ (8010c3c <MX_GPIO_Init+0x1f4>)
 8010a84:	f043 0304 	orr.w	r3, r3, #4
 8010a88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010a8c:	4b6b      	ldr	r3, [pc, #428]	@ (8010c3c <MX_GPIO_Init+0x1f4>)
 8010a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010a92:	f003 0304 	and.w	r3, r3, #4
 8010a96:	617b      	str	r3, [r7, #20]
 8010a98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8010a9a:	4b68      	ldr	r3, [pc, #416]	@ (8010c3c <MX_GPIO_Init+0x1f4>)
 8010a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010aa0:	4a66      	ldr	r2, [pc, #408]	@ (8010c3c <MX_GPIO_Init+0x1f4>)
 8010aa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010aa6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010aaa:	4b64      	ldr	r3, [pc, #400]	@ (8010c3c <MX_GPIO_Init+0x1f4>)
 8010aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010ab4:	613b      	str	r3, [r7, #16]
 8010ab6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8010ab8:	4b60      	ldr	r3, [pc, #384]	@ (8010c3c <MX_GPIO_Init+0x1f4>)
 8010aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010abe:	4a5f      	ldr	r2, [pc, #380]	@ (8010c3c <MX_GPIO_Init+0x1f4>)
 8010ac0:	f043 0301 	orr.w	r3, r3, #1
 8010ac4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010ac8:	4b5c      	ldr	r3, [pc, #368]	@ (8010c3c <MX_GPIO_Init+0x1f4>)
 8010aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010ace:	f003 0301 	and.w	r3, r3, #1
 8010ad2:	60fb      	str	r3, [r7, #12]
 8010ad4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8010ad6:	4b59      	ldr	r3, [pc, #356]	@ (8010c3c <MX_GPIO_Init+0x1f4>)
 8010ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010adc:	4a57      	ldr	r2, [pc, #348]	@ (8010c3c <MX_GPIO_Init+0x1f4>)
 8010ade:	f043 0302 	orr.w	r3, r3, #2
 8010ae2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010ae6:	4b55      	ldr	r3, [pc, #340]	@ (8010c3c <MX_GPIO_Init+0x1f4>)
 8010ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010aec:	f003 0302 	and.w	r3, r3, #2
 8010af0:	60bb      	str	r3, [r7, #8]
 8010af2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8010af4:	4b51      	ldr	r3, [pc, #324]	@ (8010c3c <MX_GPIO_Init+0x1f4>)
 8010af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010afa:	4a50      	ldr	r2, [pc, #320]	@ (8010c3c <MX_GPIO_Init+0x1f4>)
 8010afc:	f043 0308 	orr.w	r3, r3, #8
 8010b00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010b04:	4b4d      	ldr	r3, [pc, #308]	@ (8010c3c <MX_GPIO_Init+0x1f4>)
 8010b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010b0a:	f003 0308 	and.w	r3, r3, #8
 8010b0e:	607b      	str	r3, [r7, #4]
 8010b10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MARK_R_Pin|E3_Pin|MARK_L_Pin, GPIO_PIN_RESET);
 8010b12:	2200      	movs	r2, #0
 8010b14:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8010b18:	4849      	ldr	r0, [pc, #292]	@ (8010c40 <MX_GPIO_Init+0x1f8>)
 8010b1a:	f7f4 f845 	bl	8004ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_SET);
 8010b1e:	2201      	movs	r2, #1
 8010b20:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 8010b24:	4846      	ldr	r0, [pc, #280]	@ (8010c40 <MX_GPIO_Init+0x1f8>)
 8010b26:	f7f4 f83f 	bl	8004ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8010b30:	4844      	ldr	r0, [pc, #272]	@ (8010c44 <MX_GPIO_Init+0x1fc>)
 8010b32:	f7f4 f839 	bl	8004ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Motor_L_Driveoff_Pin|Motor_L_Dir_Pin|Motor_L_Brake_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8010b36:	2200      	movs	r2, #0
 8010b38:	f24e 0140 	movw	r1, #57408	@ 0xe040
 8010b3c:	4842      	ldr	r0, [pc, #264]	@ (8010c48 <MX_GPIO_Init+0x200>)
 8010b3e:	f7f4 f833 	bl	8004ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor_R_Driveoff_Pin|Motor_R_Dir_Pin|Motor_R_Brake_Pin, GPIO_PIN_RESET);
 8010b42:	2200      	movs	r2, #0
 8010b44:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8010b48:	4840      	ldr	r0, [pc, #256]	@ (8010c4c <MX_GPIO_Init+0x204>)
 8010b4a:	f7f4 f82d 	bl	8004ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MARK_R_Pin E3_Pin MARK_L_Pin */
  GPIO_InitStruct.Pin = MARK_R_Pin|E3_Pin|MARK_L_Pin;
 8010b4e:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8010b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010b54:	2301      	movs	r3, #1
 8010b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010b58:	2300      	movs	r3, #0
 8010b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8010b60:	f107 031c 	add.w	r3, r7, #28
 8010b64:	4619      	mov	r1, r3
 8010b66:	4836      	ldr	r0, [pc, #216]	@ (8010c40 <MX_GPIO_Init+0x1f8>)
 8010b68:	f7f3 fe56 	bl	8004818 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8010b6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010b72:	2300      	movs	r3, #0
 8010b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8010b76:	2302      	movs	r3, #2
 8010b78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8010b7a:	f107 031c 	add.w	r3, r7, #28
 8010b7e:	4619      	mov	r1, r3
 8010b80:	4833      	ldr	r0, [pc, #204]	@ (8010c50 <MX_GPIO_Init+0x208>)
 8010b82:	f7f3 fe49 	bl	8004818 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_WR_RS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 8010b86:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8010b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010b8c:	2301      	movs	r3, #1
 8010b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010b90:	2300      	movs	r3, #0
 8010b92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010b94:	2303      	movs	r3, #3
 8010b96:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8010b98:	f107 031c 	add.w	r3, r7, #28
 8010b9c:	4619      	mov	r1, r3
 8010b9e:	4828      	ldr	r0, [pc, #160]	@ (8010c40 <MX_GPIO_Init+0x1f8>)
 8010ba0:	f7f3 fe3a 	bl	8004818 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8010ba4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010baa:	2301      	movs	r3, #1
 8010bac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010bae:	2300      	movs	r3, #0
 8010bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8010bb6:	f107 031c 	add.w	r3, r7, #28
 8010bba:	4619      	mov	r1, r3
 8010bbc:	4821      	ldr	r0, [pc, #132]	@ (8010c44 <MX_GPIO_Init+0x1fc>)
 8010bbe:	f7f3 fe2b 	bl	8004818 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor_L_nFAULT_Pin PD1 PD3 PD4
                           PD5 */
  GPIO_InitStruct.Pin = Motor_L_nFAULT_Pin|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8010bc2:	f240 433a 	movw	r3, #1082	@ 0x43a
 8010bc6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010bc8:	2300      	movs	r3, #0
 8010bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010bcc:	2300      	movs	r3, #0
 8010bce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010bd0:	f107 031c 	add.w	r3, r7, #28
 8010bd4:	4619      	mov	r1, r3
 8010bd6:	481c      	ldr	r0, [pc, #112]	@ (8010c48 <MX_GPIO_Init+0x200>)
 8010bd8:	f7f3 fe1e 	bl	8004818 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor_L_Driveoff_Pin Motor_L_Dir_Pin Motor_L_Brake_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = Motor_L_Driveoff_Pin|Motor_L_Dir_Pin|Motor_L_Brake_Pin|SPI1_CS_Pin;
 8010bdc:	f24e 0340 	movw	r3, #57408	@ 0xe040
 8010be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010be2:	2301      	movs	r3, #1
 8010be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010be6:	2300      	movs	r3, #0
 8010be8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010bea:	2300      	movs	r3, #0
 8010bec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010bee:	f107 031c 	add.w	r3, r7, #28
 8010bf2:	4619      	mov	r1, r3
 8010bf4:	4814      	ldr	r0, [pc, #80]	@ (8010c48 <MX_GPIO_Init+0x200>)
 8010bf6:	f7f3 fe0f 	bl	8004818 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor_R_Driveoff_Pin Motor_R_Dir_Pin Motor_R_Brake_Pin */
  GPIO_InitStruct.Pin = Motor_R_Driveoff_Pin|Motor_R_Dir_Pin|Motor_R_Brake_Pin;
 8010bfa:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8010bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010c00:	2301      	movs	r3, #1
 8010c02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c04:	2300      	movs	r3, #0
 8010c06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010c08:	2300      	movs	r3, #0
 8010c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010c0c:	f107 031c 	add.w	r3, r7, #28
 8010c10:	4619      	mov	r1, r3
 8010c12:	480e      	ldr	r0, [pc, #56]	@ (8010c4c <MX_GPIO_Init+0x204>)
 8010c14:	f7f3 fe00 	bl	8004818 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_R_nFAULT_Pin */
  GPIO_InitStruct.Pin = Motor_R_nFAULT_Pin;
 8010c18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010c1e:	2300      	movs	r3, #0
 8010c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c22:	2300      	movs	r3, #0
 8010c24:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Motor_R_nFAULT_GPIO_Port, &GPIO_InitStruct);
 8010c26:	f107 031c 	add.w	r3, r7, #28
 8010c2a:	4619      	mov	r1, r3
 8010c2c:	4807      	ldr	r0, [pc, #28]	@ (8010c4c <MX_GPIO_Init+0x204>)
 8010c2e:	f7f3 fdf3 	bl	8004818 <HAL_GPIO_Init>

}
 8010c32:	bf00      	nop
 8010c34:	3730      	adds	r7, #48	@ 0x30
 8010c36:	46bd      	mov	sp, r7
 8010c38:	bd80      	pop	{r7, pc}
 8010c3a:	bf00      	nop
 8010c3c:	58024400 	.word	0x58024400
 8010c40:	58021000 	.word	0x58021000
 8010c44:	58020400 	.word	0x58020400
 8010c48:	58020c00 	.word	0x58020c00
 8010c4c:	58020000 	.word	0x58020000
 8010c50:	58020800 	.word	0x58020800

08010c54 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8010c58:	4b1b      	ldr	r3, [pc, #108]	@ (8010cc8 <MX_I2C1_Init+0x74>)
 8010c5a:	4a1c      	ldr	r2, [pc, #112]	@ (8010ccc <MX_I2C1_Init+0x78>)
 8010c5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0F1FF;
 8010c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8010cc8 <MX_I2C1_Init+0x74>)
 8010c60:	4a1b      	ldr	r2, [pc, #108]	@ (8010cd0 <MX_I2C1_Init+0x7c>)
 8010c62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8010c64:	4b18      	ldr	r3, [pc, #96]	@ (8010cc8 <MX_I2C1_Init+0x74>)
 8010c66:	2200      	movs	r2, #0
 8010c68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8010c6a:	4b17      	ldr	r3, [pc, #92]	@ (8010cc8 <MX_I2C1_Init+0x74>)
 8010c6c:	2201      	movs	r2, #1
 8010c6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8010c70:	4b15      	ldr	r3, [pc, #84]	@ (8010cc8 <MX_I2C1_Init+0x74>)
 8010c72:	2200      	movs	r2, #0
 8010c74:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8010c76:	4b14      	ldr	r3, [pc, #80]	@ (8010cc8 <MX_I2C1_Init+0x74>)
 8010c78:	2200      	movs	r2, #0
 8010c7a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8010c7c:	4b12      	ldr	r3, [pc, #72]	@ (8010cc8 <MX_I2C1_Init+0x74>)
 8010c7e:	2200      	movs	r2, #0
 8010c80:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8010c82:	4b11      	ldr	r3, [pc, #68]	@ (8010cc8 <MX_I2C1_Init+0x74>)
 8010c84:	2200      	movs	r2, #0
 8010c86:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8010c88:	4b0f      	ldr	r3, [pc, #60]	@ (8010cc8 <MX_I2C1_Init+0x74>)
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8010c8e:	480e      	ldr	r0, [pc, #56]	@ (8010cc8 <MX_I2C1_Init+0x74>)
 8010c90:	f7f3 ffbe 	bl	8004c10 <HAL_I2C_Init>
 8010c94:	4603      	mov	r3, r0
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d001      	beq.n	8010c9e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8010c9a:	f000 fdcb 	bl	8011834 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8010c9e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8010ca2:	4809      	ldr	r0, [pc, #36]	@ (8010cc8 <MX_I2C1_Init+0x74>)
 8010ca4:	f7f4 fd04 	bl	80056b0 <HAL_I2CEx_ConfigAnalogFilter>
 8010ca8:	4603      	mov	r3, r0
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d001      	beq.n	8010cb2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8010cae:	f000 fdc1 	bl	8011834 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8010cb2:	2100      	movs	r1, #0
 8010cb4:	4804      	ldr	r0, [pc, #16]	@ (8010cc8 <MX_I2C1_Init+0x74>)
 8010cb6:	f7f4 fd46 	bl	8005746 <HAL_I2CEx_ConfigDigitalFilter>
 8010cba:	4603      	mov	r3, r0
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d001      	beq.n	8010cc4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8010cc0:	f000 fdb8 	bl	8011834 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8010cc4:	bf00      	nop
 8010cc6:	bd80      	pop	{r7, pc}
 8010cc8:	24000c38 	.word	0x24000c38
 8010ccc:	40005400 	.word	0x40005400
 8010cd0:	10c0f1ff 	.word	0x10c0f1ff

08010cd4 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8010cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8010d48 <MX_I2C4_Init+0x74>)
 8010cda:	4a1c      	ldr	r2, [pc, #112]	@ (8010d4c <MX_I2C4_Init+0x78>)
 8010cdc:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 8010cde:	4b1a      	ldr	r3, [pc, #104]	@ (8010d48 <MX_I2C4_Init+0x74>)
 8010ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8010d50 <MX_I2C4_Init+0x7c>)
 8010ce2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8010ce4:	4b18      	ldr	r3, [pc, #96]	@ (8010d48 <MX_I2C4_Init+0x74>)
 8010ce6:	2200      	movs	r2, #0
 8010ce8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8010cea:	4b17      	ldr	r3, [pc, #92]	@ (8010d48 <MX_I2C4_Init+0x74>)
 8010cec:	2201      	movs	r2, #1
 8010cee:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8010cf0:	4b15      	ldr	r3, [pc, #84]	@ (8010d48 <MX_I2C4_Init+0x74>)
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8010cf6:	4b14      	ldr	r3, [pc, #80]	@ (8010d48 <MX_I2C4_Init+0x74>)
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8010cfc:	4b12      	ldr	r3, [pc, #72]	@ (8010d48 <MX_I2C4_Init+0x74>)
 8010cfe:	2200      	movs	r2, #0
 8010d00:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8010d02:	4b11      	ldr	r3, [pc, #68]	@ (8010d48 <MX_I2C4_Init+0x74>)
 8010d04:	2200      	movs	r2, #0
 8010d06:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8010d08:	4b0f      	ldr	r3, [pc, #60]	@ (8010d48 <MX_I2C4_Init+0x74>)
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8010d0e:	480e      	ldr	r0, [pc, #56]	@ (8010d48 <MX_I2C4_Init+0x74>)
 8010d10:	f7f3 ff7e 	bl	8004c10 <HAL_I2C_Init>
 8010d14:	4603      	mov	r3, r0
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d001      	beq.n	8010d1e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8010d1a:	f000 fd8b 	bl	8011834 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8010d1e:	2100      	movs	r1, #0
 8010d20:	4809      	ldr	r0, [pc, #36]	@ (8010d48 <MX_I2C4_Init+0x74>)
 8010d22:	f7f4 fcc5 	bl	80056b0 <HAL_I2CEx_ConfigAnalogFilter>
 8010d26:	4603      	mov	r3, r0
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d001      	beq.n	8010d30 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8010d2c:	f000 fd82 	bl	8011834 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8010d30:	2100      	movs	r1, #0
 8010d32:	4805      	ldr	r0, [pc, #20]	@ (8010d48 <MX_I2C4_Init+0x74>)
 8010d34:	f7f4 fd07 	bl	8005746 <HAL_I2CEx_ConfigDigitalFilter>
 8010d38:	4603      	mov	r3, r0
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d001      	beq.n	8010d42 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8010d3e:	f000 fd79 	bl	8011834 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8010d42:	bf00      	nop
 8010d44:	bd80      	pop	{r7, pc}
 8010d46:	bf00      	nop
 8010d48:	24000c8c 	.word	0x24000c8c
 8010d4c:	58001c00 	.word	0x58001c00
 8010d50:	307075b1 	.word	0x307075b1

08010d54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b0bc      	sub	sp, #240	@ 0xf0
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010d5c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8010d60:	2200      	movs	r2, #0
 8010d62:	601a      	str	r2, [r3, #0]
 8010d64:	605a      	str	r2, [r3, #4]
 8010d66:	609a      	str	r2, [r3, #8]
 8010d68:	60da      	str	r2, [r3, #12]
 8010d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010d6c:	f107 0318 	add.w	r3, r7, #24
 8010d70:	22c0      	movs	r2, #192	@ 0xc0
 8010d72:	2100      	movs	r1, #0
 8010d74:	4618      	mov	r0, r3
 8010d76:	f002 fdfb 	bl	8013970 <memset>
  if(i2cHandle->Instance==I2C1)
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	4a56      	ldr	r2, [pc, #344]	@ (8010ed8 <HAL_I2C_MspInit+0x184>)
 8010d80:	4293      	cmp	r3, r2
 8010d82:	d158      	bne.n	8010e36 <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8010d84:	f04f 0208 	mov.w	r2, #8
 8010d88:	f04f 0300 	mov.w	r3, #0
 8010d8c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 8010d90:	2304      	movs	r3, #4
 8010d92:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 32;
 8010d94:	2320      	movs	r3, #32
 8010d96:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8010d98:	2302      	movs	r3, #2
 8010d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8010d9c:	2302      	movs	r3, #2
 8010d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8010da0:	2302      	movs	r3, #2
 8010da2:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8010da4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010da8:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8010daa:	2300      	movs	r3, #0
 8010dac:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8010dae:	2300      	movs	r3, #0
 8010db0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 8010db2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010db6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010dba:	f107 0318 	add.w	r3, r7, #24
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	f7f6 f9cc 	bl	800715c <HAL_RCCEx_PeriphCLKConfig>
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d001      	beq.n	8010dce <HAL_I2C_MspInit+0x7a>
    {
      Error_Handler();
 8010dca:	f000 fd33 	bl	8011834 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010dce:	4b43      	ldr	r3, [pc, #268]	@ (8010edc <HAL_I2C_MspInit+0x188>)
 8010dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010dd4:	4a41      	ldr	r2, [pc, #260]	@ (8010edc <HAL_I2C_MspInit+0x188>)
 8010dd6:	f043 0302 	orr.w	r3, r3, #2
 8010dda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010dde:	4b3f      	ldr	r3, [pc, #252]	@ (8010edc <HAL_I2C_MspInit+0x188>)
 8010de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010de4:	f003 0302 	and.w	r3, r3, #2
 8010de8:	617b      	str	r3, [r7, #20]
 8010dea:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = L_SCL_Pin|L_SDA_Pin;
 8010dec:	23c0      	movs	r3, #192	@ 0xc0
 8010dee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8010df2:	2312      	movs	r3, #18
 8010df4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010df8:	2300      	movs	r3, #0
 8010dfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010dfe:	2300      	movs	r3, #0
 8010e00:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8010e04:	2304      	movs	r3, #4
 8010e06:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010e0a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8010e0e:	4619      	mov	r1, r3
 8010e10:	4833      	ldr	r0, [pc, #204]	@ (8010ee0 <HAL_I2C_MspInit+0x18c>)
 8010e12:	f7f3 fd01 	bl	8004818 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8010e16:	4b31      	ldr	r3, [pc, #196]	@ (8010edc <HAL_I2C_MspInit+0x188>)
 8010e18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010e1c:	4a2f      	ldr	r2, [pc, #188]	@ (8010edc <HAL_I2C_MspInit+0x188>)
 8010e1e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010e22:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8010e26:	4b2d      	ldr	r3, [pc, #180]	@ (8010edc <HAL_I2C_MspInit+0x188>)
 8010e28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010e2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010e30:	613b      	str	r3, [r7, #16]
 8010e32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8010e34:	e04b      	b.n	8010ece <HAL_I2C_MspInit+0x17a>
  else if(i2cHandle->Instance==I2C4)
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	4a2a      	ldr	r2, [pc, #168]	@ (8010ee4 <HAL_I2C_MspInit+0x190>)
 8010e3c:	4293      	cmp	r3, r2
 8010e3e:	d146      	bne.n	8010ece <HAL_I2C_MspInit+0x17a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8010e40:	f04f 0210 	mov.w	r2, #16
 8010e44:	f04f 0300 	mov.w	r3, #0
 8010e48:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010e52:	f107 0318 	add.w	r3, r7, #24
 8010e56:	4618      	mov	r0, r3
 8010e58:	f7f6 f980 	bl	800715c <HAL_RCCEx_PeriphCLKConfig>
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d001      	beq.n	8010e66 <HAL_I2C_MspInit+0x112>
      Error_Handler();
 8010e62:	f000 fce7 	bl	8011834 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010e66:	4b1d      	ldr	r3, [pc, #116]	@ (8010edc <HAL_I2C_MspInit+0x188>)
 8010e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010e6c:	4a1b      	ldr	r2, [pc, #108]	@ (8010edc <HAL_I2C_MspInit+0x188>)
 8010e6e:	f043 0302 	orr.w	r3, r3, #2
 8010e72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010e76:	4b19      	ldr	r3, [pc, #100]	@ (8010edc <HAL_I2C_MspInit+0x188>)
 8010e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010e7c:	f003 0302 	and.w	r3, r3, #2
 8010e80:	60fb      	str	r3, [r7, #12]
 8010e82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = R_SCL_Pin|R_SDA_Pin;
 8010e84:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8010e88:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8010e8c:	2312      	movs	r3, #18
 8010e8e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e92:	2300      	movs	r3, #0
 8010e94:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010e98:	2300      	movs	r3, #0
 8010e9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 8010e9e:	2306      	movs	r3, #6
 8010ea0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010ea4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8010ea8:	4619      	mov	r1, r3
 8010eaa:	480d      	ldr	r0, [pc, #52]	@ (8010ee0 <HAL_I2C_MspInit+0x18c>)
 8010eac:	f7f3 fcb4 	bl	8004818 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8010eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8010edc <HAL_I2C_MspInit+0x188>)
 8010eb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010eb6:	4a09      	ldr	r2, [pc, #36]	@ (8010edc <HAL_I2C_MspInit+0x188>)
 8010eb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010ebc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8010ec0:	4b06      	ldr	r3, [pc, #24]	@ (8010edc <HAL_I2C_MspInit+0x188>)
 8010ec2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010eca:	60bb      	str	r3, [r7, #8]
 8010ecc:	68bb      	ldr	r3, [r7, #8]
}
 8010ece:	bf00      	nop
 8010ed0:	37f0      	adds	r7, #240	@ 0xf0
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd80      	pop	{r7, pc}
 8010ed6:	bf00      	nop
 8010ed8:	40005400 	.word	0x40005400
 8010edc:	58024400 	.word	0x58024400
 8010ee0:	58020400 	.word	0x58020400
 8010ee4:	58001c00 	.word	0x58001c00

08010ee8 <I2C_Error>:
  /* USER CODE END I2C4_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void I2C_Error(){
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	af00      	add	r7, sp, #0
	while(1){
	HAL_GPIO_TogglePin(E3_GPIO_Port, E3_Pin);
 8010eec:	2108      	movs	r1, #8
 8010eee:	4804      	ldr	r0, [pc, #16]	@ (8010f00 <I2C_Error+0x18>)
 8010ef0:	f7f3 fe73 	bl	8004bda <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8010ef4:	2064      	movs	r0, #100	@ 0x64
 8010ef6:	f7f1 fd7b 	bl	80029f0 <HAL_Delay>
	HAL_GPIO_TogglePin(E3_GPIO_Port, E3_Pin);
 8010efa:	bf00      	nop
 8010efc:	e7f6      	b.n	8010eec <I2C_Error+0x4>
 8010efe:	bf00      	nop
 8010f00:	58021000 	.word	0x58021000

08010f04 <MX_LPTIM1_Init>:
LPTIM_HandleTypeDef hlptim4;
LPTIM_HandleTypeDef hlptim5;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8010f08:	4b16      	ldr	r3, [pc, #88]	@ (8010f64 <MX_LPTIM1_Init+0x60>)
 8010f0a:	4a17      	ldr	r2, [pc, #92]	@ (8010f68 <MX_LPTIM1_Init+0x64>)
 8010f0c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8010f0e:	4b15      	ldr	r3, [pc, #84]	@ (8010f64 <MX_LPTIM1_Init+0x60>)
 8010f10:	2200      	movs	r2, #0
 8010f12:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8010f14:	4b13      	ldr	r3, [pc, #76]	@ (8010f64 <MX_LPTIM1_Init+0x60>)
 8010f16:	2200      	movs	r2, #0
 8010f18:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8010f1a:	4b12      	ldr	r3, [pc, #72]	@ (8010f64 <MX_LPTIM1_Init+0x60>)
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_2TRANSITIONS;
 8010f20:	4b10      	ldr	r3, [pc, #64]	@ (8010f64 <MX_LPTIM1_Init+0x60>)
 8010f22:	2208      	movs	r2, #8
 8010f24:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8010f26:	4b0f      	ldr	r3, [pc, #60]	@ (8010f64 <MX_LPTIM1_Init+0x60>)
 8010f28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010f2c:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8010f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8010f64 <MX_LPTIM1_Init+0x60>)
 8010f30:	2200      	movs	r2, #0
 8010f32:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8010f34:	4b0b      	ldr	r3, [pc, #44]	@ (8010f64 <MX_LPTIM1_Init+0x60>)
 8010f36:	2200      	movs	r2, #0
 8010f38:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8010f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8010f64 <MX_LPTIM1_Init+0x60>)
 8010f3c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8010f40:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8010f42:	4b08      	ldr	r3, [pc, #32]	@ (8010f64 <MX_LPTIM1_Init+0x60>)
 8010f44:	2200      	movs	r2, #0
 8010f46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8010f48:	4b06      	ldr	r3, [pc, #24]	@ (8010f64 <MX_LPTIM1_Init+0x60>)
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8010f4e:	4805      	ldr	r0, [pc, #20]	@ (8010f64 <MX_LPTIM1_Init+0x60>)
 8010f50:	f7f4 fc46 	bl	80057e0 <HAL_LPTIM_Init>
 8010f54:	4603      	mov	r3, r0
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d001      	beq.n	8010f5e <MX_LPTIM1_Init+0x5a>
  {
    Error_Handler();
 8010f5a:	f000 fc6b 	bl	8011834 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8010f5e:	bf00      	nop
 8010f60:	bd80      	pop	{r7, pc}
 8010f62:	bf00      	nop
 8010f64:	24000ce0 	.word	0x24000ce0
 8010f68:	40002400 	.word	0x40002400

08010f6c <MX_LPTIM2_Init>:
/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 8010f70:	4b16      	ldr	r3, [pc, #88]	@ (8010fcc <MX_LPTIM2_Init+0x60>)
 8010f72:	4a17      	ldr	r2, [pc, #92]	@ (8010fd0 <MX_LPTIM2_Init+0x64>)
 8010f74:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8010f76:	4b15      	ldr	r3, [pc, #84]	@ (8010fcc <MX_LPTIM2_Init+0x60>)
 8010f78:	2200      	movs	r2, #0
 8010f7a:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8010f7c:	4b13      	ldr	r3, [pc, #76]	@ (8010fcc <MX_LPTIM2_Init+0x60>)
 8010f7e:	2200      	movs	r2, #0
 8010f80:	609a      	str	r2, [r3, #8]
  hlptim2.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8010f82:	4b12      	ldr	r3, [pc, #72]	@ (8010fcc <MX_LPTIM2_Init+0x60>)
 8010f84:	2200      	movs	r2, #0
 8010f86:	60da      	str	r2, [r3, #12]
  hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_2TRANSITIONS;
 8010f88:	4b10      	ldr	r3, [pc, #64]	@ (8010fcc <MX_LPTIM2_Init+0x60>)
 8010f8a:	2208      	movs	r2, #8
 8010f8c:	611a      	str	r2, [r3, #16]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8010f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8010fcc <MX_LPTIM2_Init+0x60>)
 8010f90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010f94:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8010f96:	4b0d      	ldr	r3, [pc, #52]	@ (8010fcc <MX_LPTIM2_Init+0x60>)
 8010f98:	2200      	movs	r2, #0
 8010f9a:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8010f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8010fcc <MX_LPTIM2_Init+0x60>)
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8010fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8010fcc <MX_LPTIM2_Init+0x60>)
 8010fa4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8010fa8:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8010faa:	4b08      	ldr	r3, [pc, #32]	@ (8010fcc <MX_LPTIM2_Init+0x60>)
 8010fac:	2200      	movs	r2, #0
 8010fae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8010fb0:	4b06      	ldr	r3, [pc, #24]	@ (8010fcc <MX_LPTIM2_Init+0x60>)
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8010fb6:	4805      	ldr	r0, [pc, #20]	@ (8010fcc <MX_LPTIM2_Init+0x60>)
 8010fb8:	f7f4 fc12 	bl	80057e0 <HAL_LPTIM_Init>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d001      	beq.n	8010fc6 <MX_LPTIM2_Init+0x5a>
  {
    Error_Handler();
 8010fc2:	f000 fc37 	bl	8011834 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8010fc6:	bf00      	nop
 8010fc8:	bd80      	pop	{r7, pc}
 8010fca:	bf00      	nop
 8010fcc:	24000d18 	.word	0x24000d18
 8010fd0:	58002400 	.word	0x58002400

08010fd4 <MX_LPTIM3_Init>:
/* LPTIM3 init function */
void MX_LPTIM3_Init(void)
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM3_Init 0 */

  /* USER CODE BEGIN LPTIM3_Init 1 */

  /* USER CODE END LPTIM3_Init 1 */
  hlptim3.Instance = LPTIM3;
 8010fd8:	4b11      	ldr	r3, [pc, #68]	@ (8011020 <MX_LPTIM3_Init+0x4c>)
 8010fda:	4a12      	ldr	r2, [pc, #72]	@ (8011024 <MX_LPTIM3_Init+0x50>)
 8010fdc:	601a      	str	r2, [r3, #0]
  hlptim3.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8010fde:	4b10      	ldr	r3, [pc, #64]	@ (8011020 <MX_LPTIM3_Init+0x4c>)
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	605a      	str	r2, [r3, #4]
  hlptim3.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8010fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8011020 <MX_LPTIM3_Init+0x4c>)
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	609a      	str	r2, [r3, #8]
  hlptim3.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8010fea:	4b0d      	ldr	r3, [pc, #52]	@ (8011020 <MX_LPTIM3_Init+0x4c>)
 8010fec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010ff0:	615a      	str	r2, [r3, #20]
  hlptim3.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8010ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8011020 <MX_LPTIM3_Init+0x4c>)
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	621a      	str	r2, [r3, #32]
  hlptim3.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8010ff8:	4b09      	ldr	r3, [pc, #36]	@ (8011020 <MX_LPTIM3_Init+0x4c>)
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim3.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8010ffe:	4b08      	ldr	r3, [pc, #32]	@ (8011020 <MX_LPTIM3_Init+0x4c>)
 8011000:	2200      	movs	r2, #0
 8011002:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim3.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8011004:	4b06      	ldr	r3, [pc, #24]	@ (8011020 <MX_LPTIM3_Init+0x4c>)
 8011006:	2200      	movs	r2, #0
 8011008:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_LPTIM_Init(&hlptim3) != HAL_OK)
 801100a:	4805      	ldr	r0, [pc, #20]	@ (8011020 <MX_LPTIM3_Init+0x4c>)
 801100c:	f7f4 fbe8 	bl	80057e0 <HAL_LPTIM_Init>
 8011010:	4603      	mov	r3, r0
 8011012:	2b00      	cmp	r3, #0
 8011014:	d001      	beq.n	801101a <MX_LPTIM3_Init+0x46>
  {
    Error_Handler();
 8011016:	f000 fc0d 	bl	8011834 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM3_Init 2 */

  /* USER CODE END LPTIM3_Init 2 */

}
 801101a:	bf00      	nop
 801101c:	bd80      	pop	{r7, pc}
 801101e:	bf00      	nop
 8011020:	24000d50 	.word	0x24000d50
 8011024:	58002800 	.word	0x58002800

08011028 <MX_LPTIM4_Init>:
/* LPTIM4 init function */
void MX_LPTIM4_Init(void)
{
 8011028:	b580      	push	{r7, lr}
 801102a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM4_Init 0 */

  /* USER CODE BEGIN LPTIM4_Init 1 */

  /* USER CODE END LPTIM4_Init 1 */
  hlptim4.Instance = LPTIM4;
 801102c:	4b10      	ldr	r3, [pc, #64]	@ (8011070 <MX_LPTIM4_Init+0x48>)
 801102e:	4a11      	ldr	r2, [pc, #68]	@ (8011074 <MX_LPTIM4_Init+0x4c>)
 8011030:	601a      	str	r2, [r3, #0]
  hlptim4.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8011032:	4b0f      	ldr	r3, [pc, #60]	@ (8011070 <MX_LPTIM4_Init+0x48>)
 8011034:	2200      	movs	r2, #0
 8011036:	605a      	str	r2, [r3, #4]
  hlptim4.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV16;
 8011038:	4b0d      	ldr	r3, [pc, #52]	@ (8011070 <MX_LPTIM4_Init+0x48>)
 801103a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801103e:	609a      	str	r2, [r3, #8]
  hlptim4.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8011040:	4b0b      	ldr	r3, [pc, #44]	@ (8011070 <MX_LPTIM4_Init+0x48>)
 8011042:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011046:	615a      	str	r2, [r3, #20]
  hlptim4.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8011048:	4b09      	ldr	r3, [pc, #36]	@ (8011070 <MX_LPTIM4_Init+0x48>)
 801104a:	2200      	movs	r2, #0
 801104c:	621a      	str	r2, [r3, #32]
  hlptim4.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 801104e:	4b08      	ldr	r3, [pc, #32]	@ (8011070 <MX_LPTIM4_Init+0x48>)
 8011050:	2200      	movs	r2, #0
 8011052:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim4.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8011054:	4b06      	ldr	r3, [pc, #24]	@ (8011070 <MX_LPTIM4_Init+0x48>)
 8011056:	2200      	movs	r2, #0
 8011058:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_LPTIM_Init(&hlptim4) != HAL_OK)
 801105a:	4805      	ldr	r0, [pc, #20]	@ (8011070 <MX_LPTIM4_Init+0x48>)
 801105c:	f7f4 fbc0 	bl	80057e0 <HAL_LPTIM_Init>
 8011060:	4603      	mov	r3, r0
 8011062:	2b00      	cmp	r3, #0
 8011064:	d001      	beq.n	801106a <MX_LPTIM4_Init+0x42>
  {
    Error_Handler();
 8011066:	f000 fbe5 	bl	8011834 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM4_Init 2 */

  /* USER CODE END LPTIM4_Init 2 */

}
 801106a:	bf00      	nop
 801106c:	bd80      	pop	{r7, pc}
 801106e:	bf00      	nop
 8011070:	24000d88 	.word	0x24000d88
 8011074:	58002c00 	.word	0x58002c00

08011078 <MX_LPTIM5_Init>:
/* LPTIM5 init function */
void MX_LPTIM5_Init(void)
{
 8011078:	b580      	push	{r7, lr}
 801107a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM5_Init 0 */

  /* USER CODE BEGIN LPTIM5_Init 1 */

  /* USER CODE END LPTIM5_Init 1 */
  hlptim5.Instance = LPTIM5;
 801107c:	4b10      	ldr	r3, [pc, #64]	@ (80110c0 <MX_LPTIM5_Init+0x48>)
 801107e:	4a11      	ldr	r2, [pc, #68]	@ (80110c4 <MX_LPTIM5_Init+0x4c>)
 8011080:	601a      	str	r2, [r3, #0]
  hlptim5.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8011082:	4b0f      	ldr	r3, [pc, #60]	@ (80110c0 <MX_LPTIM5_Init+0x48>)
 8011084:	2200      	movs	r2, #0
 8011086:	605a      	str	r2, [r3, #4]
  hlptim5.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV16;
 8011088:	4b0d      	ldr	r3, [pc, #52]	@ (80110c0 <MX_LPTIM5_Init+0x48>)
 801108a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801108e:	609a      	str	r2, [r3, #8]
  hlptim5.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8011090:	4b0b      	ldr	r3, [pc, #44]	@ (80110c0 <MX_LPTIM5_Init+0x48>)
 8011092:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011096:	615a      	str	r2, [r3, #20]
  hlptim5.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8011098:	4b09      	ldr	r3, [pc, #36]	@ (80110c0 <MX_LPTIM5_Init+0x48>)
 801109a:	2200      	movs	r2, #0
 801109c:	621a      	str	r2, [r3, #32]
  hlptim5.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 801109e:	4b08      	ldr	r3, [pc, #32]	@ (80110c0 <MX_LPTIM5_Init+0x48>)
 80110a0:	2200      	movs	r2, #0
 80110a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim5.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80110a4:	4b06      	ldr	r3, [pc, #24]	@ (80110c0 <MX_LPTIM5_Init+0x48>)
 80110a6:	2200      	movs	r2, #0
 80110a8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_LPTIM_Init(&hlptim5) != HAL_OK)
 80110aa:	4805      	ldr	r0, [pc, #20]	@ (80110c0 <MX_LPTIM5_Init+0x48>)
 80110ac:	f7f4 fb98 	bl	80057e0 <HAL_LPTIM_Init>
 80110b0:	4603      	mov	r3, r0
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d001      	beq.n	80110ba <MX_LPTIM5_Init+0x42>
  {
    Error_Handler();
 80110b6:	f000 fbbd 	bl	8011834 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM5_Init 2 */

  /* USER CODE END LPTIM5_Init 2 */

}
 80110ba:	bf00      	nop
 80110bc:	bd80      	pop	{r7, pc}
 80110be:	bf00      	nop
 80110c0:	24000dc0 	.word	0x24000dc0
 80110c4:	58003000 	.word	0x58003000

080110c8 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b0c2      	sub	sp, #264	@ 0x108
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80110d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80110d6:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80110d8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80110dc:	2200      	movs	r2, #0
 80110de:	601a      	str	r2, [r3, #0]
 80110e0:	605a      	str	r2, [r3, #4]
 80110e2:	609a      	str	r2, [r3, #8]
 80110e4:	60da      	str	r2, [r3, #12]
 80110e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80110e8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80110ec:	22c0      	movs	r2, #192	@ 0xc0
 80110ee:	2100      	movs	r1, #0
 80110f0:	4618      	mov	r0, r3
 80110f2:	f002 fc3d 	bl	8013970 <memset>
  if(lptimHandle->Instance==LPTIM1)
 80110f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80110fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	4ac4      	ldr	r2, [pc, #784]	@ (8011414 <HAL_LPTIM_MspInit+0x34c>)
 8011104:	4293      	cmp	r3, r2
 8011106:	d16b      	bne.n	80111e0 <HAL_LPTIM_MspInit+0x118>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8011108:	f04f 0220 	mov.w	r2, #32
 801110c:	f04f 0300 	mov.w	r3, #0
 8011110:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_D2PCLK1;
 8011114:	2300      	movs	r3, #0
 8011116:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801111a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801111e:	4618      	mov	r0, r3
 8011120:	f7f6 f81c 	bl	800715c <HAL_RCCEx_PeriphCLKConfig>
 8011124:	4603      	mov	r3, r0
 8011126:	2b00      	cmp	r3, #0
 8011128:	d001      	beq.n	801112e <HAL_LPTIM_MspInit+0x66>
    {
      Error_Handler();
 801112a:	f000 fb83 	bl	8011834 <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 801112e:	4bba      	ldr	r3, [pc, #744]	@ (8011418 <HAL_LPTIM_MspInit+0x350>)
 8011130:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8011134:	4ab8      	ldr	r2, [pc, #736]	@ (8011418 <HAL_LPTIM_MspInit+0x350>)
 8011136:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801113a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 801113e:	4bb6      	ldr	r3, [pc, #728]	@ (8011418 <HAL_LPTIM_MspInit+0x350>)
 8011140:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8011144:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011148:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801114a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOD_CLK_ENABLE();
 801114c:	4bb2      	ldr	r3, [pc, #712]	@ (8011418 <HAL_LPTIM_MspInit+0x350>)
 801114e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011152:	4ab1      	ldr	r2, [pc, #708]	@ (8011418 <HAL_LPTIM_MspInit+0x350>)
 8011154:	f043 0308 	orr.w	r3, r3, #8
 8011158:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801115c:	4bae      	ldr	r3, [pc, #696]	@ (8011418 <HAL_LPTIM_MspInit+0x350>)
 801115e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011162:	f003 0308 	and.w	r3, r3, #8
 8011166:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 801116a:	4bab      	ldr	r3, [pc, #684]	@ (8011418 <HAL_LPTIM_MspInit+0x350>)
 801116c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011170:	4aa9      	ldr	r2, [pc, #676]	@ (8011418 <HAL_LPTIM_MspInit+0x350>)
 8011172:	f043 0310 	orr.w	r3, r3, #16
 8011176:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801117a:	4ba7      	ldr	r3, [pc, #668]	@ (8011418 <HAL_LPTIM_MspInit+0x350>)
 801117c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011180:	f003 0310 	and.w	r3, r3, #16
 8011184:	627b      	str	r3, [r7, #36]	@ 0x24
 8011186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**LPTIM1 GPIO Configuration
    PD12     ------> LPTIM1_IN1
    PE1     ------> LPTIM1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8011188:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801118c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011190:	2302      	movs	r3, #2
 8011192:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011196:	2300      	movs	r3, #0
 8011198:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801119c:	2300      	movs	r3, #0
 801119e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 80111a2:	2301      	movs	r3, #1
 80111a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80111a8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80111ac:	4619      	mov	r1, r3
 80111ae:	489b      	ldr	r0, [pc, #620]	@ (801141c <HAL_LPTIM_MspInit+0x354>)
 80111b0:	f7f3 fb32 	bl	8004818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80111b4:	2302      	movs	r3, #2
 80111b6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80111ba:	2302      	movs	r3, #2
 80111bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80111c0:	2300      	movs	r3, #0
 80111c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80111c6:	2300      	movs	r3, #0
 80111c8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 80111cc:	2301      	movs	r3, #1
 80111ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80111d2:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80111d6:	4619      	mov	r1, r3
 80111d8:	4891      	ldr	r0, [pc, #580]	@ (8011420 <HAL_LPTIM_MspInit+0x358>)
 80111da:	f7f3 fb1d 	bl	8004818 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(LPTIM5_IRQn);
  /* USER CODE BEGIN LPTIM5_MspInit 1 */

  /* USER CODE END LPTIM5_MspInit 1 */
  }
}
 80111de:	e113      	b.n	8011408 <HAL_LPTIM_MspInit+0x340>
  else if(lptimHandle->Instance==LPTIM2)
 80111e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80111e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	4a8d      	ldr	r2, [pc, #564]	@ (8011424 <HAL_LPTIM_MspInit+0x35c>)
 80111ee:	4293      	cmp	r3, r2
 80111f0:	d16c      	bne.n	80112cc <HAL_LPTIM_MspInit+0x204>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 80111f2:	f04f 0240 	mov.w	r2, #64	@ 0x40
 80111f6:	f04f 0300 	mov.w	r3, #0
 80111fa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_D3PCLK1;
 80111fe:	2300      	movs	r3, #0
 8011200:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011204:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011208:	4618      	mov	r0, r3
 801120a:	f7f5 ffa7 	bl	800715c <HAL_RCCEx_PeriphCLKConfig>
 801120e:	4603      	mov	r3, r0
 8011210:	2b00      	cmp	r3, #0
 8011212:	d001      	beq.n	8011218 <HAL_LPTIM_MspInit+0x150>
      Error_Handler();
 8011214:	f000 fb0e 	bl	8011834 <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8011218:	4b7f      	ldr	r3, [pc, #508]	@ (8011418 <HAL_LPTIM_MspInit+0x350>)
 801121a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801121e:	4a7e      	ldr	r2, [pc, #504]	@ (8011418 <HAL_LPTIM_MspInit+0x350>)
 8011220:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8011224:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8011228:	4b7b      	ldr	r3, [pc, #492]	@ (8011418 <HAL_LPTIM_MspInit+0x350>)
 801122a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801122e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011232:	623b      	str	r3, [r7, #32]
 8011234:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011236:	4b78      	ldr	r3, [pc, #480]	@ (8011418 <HAL_LPTIM_MspInit+0x350>)
 8011238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801123c:	4a76      	ldr	r2, [pc, #472]	@ (8011418 <HAL_LPTIM_MspInit+0x350>)
 801123e:	f043 0302 	orr.w	r3, r3, #2
 8011242:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011246:	4b74      	ldr	r3, [pc, #464]	@ (8011418 <HAL_LPTIM_MspInit+0x350>)
 8011248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801124c:	f003 0302 	and.w	r3, r3, #2
 8011250:	61fb      	str	r3, [r7, #28]
 8011252:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8011254:	4b70      	ldr	r3, [pc, #448]	@ (8011418 <HAL_LPTIM_MspInit+0x350>)
 8011256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801125a:	4a6f      	ldr	r2, [pc, #444]	@ (8011418 <HAL_LPTIM_MspInit+0x350>)
 801125c:	f043 0308 	orr.w	r3, r3, #8
 8011260:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011264:	4b6c      	ldr	r3, [pc, #432]	@ (8011418 <HAL_LPTIM_MspInit+0x350>)
 8011266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801126a:	f003 0308 	and.w	r3, r3, #8
 801126e:	61bb      	str	r3, [r7, #24]
 8011270:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8011272:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011276:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801127a:	2302      	movs	r3, #2
 801127c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011280:	2300      	movs	r3, #0
 8011282:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011286:	2300      	movs	r3, #0
 8011288:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 801128c:	2303      	movs	r3, #3
 801128e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011292:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8011296:	4619      	mov	r1, r3
 8011298:	4863      	ldr	r0, [pc, #396]	@ (8011428 <HAL_LPTIM_MspInit+0x360>)
 801129a:	f7f3 fabd 	bl	8004818 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 801129e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80112a2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80112a6:	2302      	movs	r3, #2
 80112a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80112ac:	2300      	movs	r3, #0
 80112ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80112b2:	2300      	movs	r3, #0
 80112b4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 80112b8:	2303      	movs	r3, #3
 80112ba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80112be:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80112c2:	4619      	mov	r1, r3
 80112c4:	4855      	ldr	r0, [pc, #340]	@ (801141c <HAL_LPTIM_MspInit+0x354>)
 80112c6:	f7f3 faa7 	bl	8004818 <HAL_GPIO_Init>
}
 80112ca:	e09d      	b.n	8011408 <HAL_LPTIM_MspInit+0x340>
  else if(lptimHandle->Instance==LPTIM3)
 80112cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80112d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	4a54      	ldr	r2, [pc, #336]	@ (801142c <HAL_LPTIM_MspInit+0x364>)
 80112da:	4293      	cmp	r3, r2
 80112dc:	d12b      	bne.n	8011336 <HAL_LPTIM_MspInit+0x26e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM3;
 80112de:	f04f 0280 	mov.w	r2, #128	@ 0x80
 80112e2:	f04f 0300 	mov.w	r3, #0
 80112e6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Lptim345ClockSelection = RCC_LPTIM345CLKSOURCE_LSI;
 80112ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80112ee:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80112f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80112f6:	4618      	mov	r0, r3
 80112f8:	f7f5 ff30 	bl	800715c <HAL_RCCEx_PeriphCLKConfig>
 80112fc:	4603      	mov	r3, r0
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d001      	beq.n	8011306 <HAL_LPTIM_MspInit+0x23e>
      Error_Handler();
 8011302:	f000 fa97 	bl	8011834 <Error_Handler>
    __HAL_RCC_LPTIM3_CLK_ENABLE();
 8011306:	4b44      	ldr	r3, [pc, #272]	@ (8011418 <HAL_LPTIM_MspInit+0x350>)
 8011308:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801130c:	4a42      	ldr	r2, [pc, #264]	@ (8011418 <HAL_LPTIM_MspInit+0x350>)
 801130e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8011312:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8011316:	4b40      	ldr	r3, [pc, #256]	@ (8011418 <HAL_LPTIM_MspInit+0x350>)
 8011318:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801131c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8011320:	617b      	str	r3, [r7, #20]
 8011322:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(LPTIM3_IRQn, 0, 0);
 8011324:	2200      	movs	r2, #0
 8011326:	2100      	movs	r1, #0
 8011328:	208b      	movs	r0, #139	@ 0x8b
 801132a:	f7f3 f9c8 	bl	80046be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM3_IRQn);
 801132e:	208b      	movs	r0, #139	@ 0x8b
 8011330:	f7f3 f9df 	bl	80046f2 <HAL_NVIC_EnableIRQ>
}
 8011334:	e068      	b.n	8011408 <HAL_LPTIM_MspInit+0x340>
  else if(lptimHandle->Instance==LPTIM4)
 8011336:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801133a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	4a3b      	ldr	r2, [pc, #236]	@ (8011430 <HAL_LPTIM_MspInit+0x368>)
 8011344:	4293      	cmp	r3, r2
 8011346:	d12b      	bne.n	80113a0 <HAL_LPTIM_MspInit+0x2d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM4;
 8011348:	f04f 0280 	mov.w	r2, #128	@ 0x80
 801134c:	f04f 0300 	mov.w	r3, #0
 8011350:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Lptim345ClockSelection = RCC_LPTIM345CLKSOURCE_LSI;
 8011354:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011358:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801135c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011360:	4618      	mov	r0, r3
 8011362:	f7f5 fefb 	bl	800715c <HAL_RCCEx_PeriphCLKConfig>
 8011366:	4603      	mov	r3, r0
 8011368:	2b00      	cmp	r3, #0
 801136a:	d001      	beq.n	8011370 <HAL_LPTIM_MspInit+0x2a8>
      Error_Handler();
 801136c:	f000 fa62 	bl	8011834 <Error_Handler>
    __HAL_RCC_LPTIM4_CLK_ENABLE();
 8011370:	4b29      	ldr	r3, [pc, #164]	@ (8011418 <HAL_LPTIM_MspInit+0x350>)
 8011372:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8011376:	4a28      	ldr	r2, [pc, #160]	@ (8011418 <HAL_LPTIM_MspInit+0x350>)
 8011378:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801137c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8011380:	4b25      	ldr	r3, [pc, #148]	@ (8011418 <HAL_LPTIM_MspInit+0x350>)
 8011382:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8011386:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801138a:	613b      	str	r3, [r7, #16]
 801138c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(LPTIM4_IRQn, 0, 0);
 801138e:	2200      	movs	r2, #0
 8011390:	2100      	movs	r1, #0
 8011392:	208c      	movs	r0, #140	@ 0x8c
 8011394:	f7f3 f993 	bl	80046be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM4_IRQn);
 8011398:	208c      	movs	r0, #140	@ 0x8c
 801139a:	f7f3 f9aa 	bl	80046f2 <HAL_NVIC_EnableIRQ>
}
 801139e:	e033      	b.n	8011408 <HAL_LPTIM_MspInit+0x340>
  else if(lptimHandle->Instance==LPTIM5)
 80113a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80113a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	4a21      	ldr	r2, [pc, #132]	@ (8011434 <HAL_LPTIM_MspInit+0x36c>)
 80113ae:	4293      	cmp	r3, r2
 80113b0:	d12a      	bne.n	8011408 <HAL_LPTIM_MspInit+0x340>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM5;
 80113b2:	f04f 0280 	mov.w	r2, #128	@ 0x80
 80113b6:	f04f 0300 	mov.w	r3, #0
 80113ba:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Lptim345ClockSelection = RCC_LPTIM345CLKSOURCE_LSI;
 80113be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80113c2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80113c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80113ca:	4618      	mov	r0, r3
 80113cc:	f7f5 fec6 	bl	800715c <HAL_RCCEx_PeriphCLKConfig>
 80113d0:	4603      	mov	r3, r0
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d001      	beq.n	80113da <HAL_LPTIM_MspInit+0x312>
      Error_Handler();
 80113d6:	f000 fa2d 	bl	8011834 <Error_Handler>
    __HAL_RCC_LPTIM5_CLK_ENABLE();
 80113da:	4b0f      	ldr	r3, [pc, #60]	@ (8011418 <HAL_LPTIM_MspInit+0x350>)
 80113dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80113e0:	4a0d      	ldr	r2, [pc, #52]	@ (8011418 <HAL_LPTIM_MspInit+0x350>)
 80113e2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80113e6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80113ea:	4b0b      	ldr	r3, [pc, #44]	@ (8011418 <HAL_LPTIM_MspInit+0x350>)
 80113ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80113f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80113f4:	60fb      	str	r3, [r7, #12]
 80113f6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(LPTIM5_IRQn, 0, 0);
 80113f8:	2200      	movs	r2, #0
 80113fa:	2100      	movs	r1, #0
 80113fc:	208d      	movs	r0, #141	@ 0x8d
 80113fe:	f7f3 f95e 	bl	80046be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM5_IRQn);
 8011402:	208d      	movs	r0, #141	@ 0x8d
 8011404:	f7f3 f975 	bl	80046f2 <HAL_NVIC_EnableIRQ>
}
 8011408:	bf00      	nop
 801140a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 801140e:	46bd      	mov	sp, r7
 8011410:	bd80      	pop	{r7, pc}
 8011412:	bf00      	nop
 8011414:	40002400 	.word	0x40002400
 8011418:	58024400 	.word	0x58024400
 801141c:	58020c00 	.word	0x58020c00
 8011420:	58021000 	.word	0x58021000
 8011424:	58002400 	.word	0x58002400
 8011428:	58020400 	.word	0x58020400
 801142c:	58002800 	.word	0x58002800
 8011430:	58002c00 	.word	0x58002c00
 8011434:	58003000 	.word	0x58003000

08011438 <MPU_Config>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void MPU_Config(void) {
 8011438:	b580      	push	{r7, lr}
 801143a:	b084      	sub	sp, #16
 801143c:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 801143e:	463b      	mov	r3, r7
 8011440:	2200      	movs	r2, #0
 8011442:	601a      	str	r2, [r3, #0]
 8011444:	605a      	str	r2, [r3, #4]
 8011446:	609a      	str	r2, [r3, #8]
 8011448:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 801144a:	f7f3 f96d 	bl	8004728 <HAL_MPU_Disable>

	/* Configure the MPU attributes for the QSPI 256MB without instruction access */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 801144e:	2301      	movs	r3, #1
 8011450:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8011452:	2300      	movs	r3, #0
 8011454:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = QSPI_BASE;
 8011456:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 801145a:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 801145c:	231b      	movs	r3, #27
 801145e:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8011460:	2300      	movs	r3, #0
 8011462:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8011464:	2300      	movs	r3, #0
 8011466:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8011468:	2300      	movs	r3, #0
 801146a:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 801146c:	2300      	movs	r3, #0
 801146e:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8011470:	2301      	movs	r3, #1
 8011472:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8011474:	2301      	movs	r3, #1
 8011476:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8011478:	2300      	movs	r3, #0
 801147a:	727b      	strb	r3, [r7, #9]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 801147c:	463b      	mov	r3, r7
 801147e:	4618      	mov	r0, r3
 8011480:	f7f3 f98a 	bl	8004798 <HAL_MPU_ConfigRegion>

	/* Configure the MPU attributes for the QSPI 8MB (QSPI Flash Size) to Cacheable WT */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8011484:	2301      	movs	r3, #1
 8011486:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8011488:	2301      	movs	r3, #1
 801148a:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = QSPI_BASE;
 801148c:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 8011490:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8011492:	2316      	movs	r3, #22
 8011494:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO;
 8011496:	2305      	movs	r3, #5
 8011498:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 801149a:	2301      	movs	r3, #1
 801149c:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 801149e:	2301      	movs	r3, #1
 80114a0:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80114a2:	2300      	movs	r3, #0
 80114a4:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80114a6:	2300      	movs	r3, #0
 80114a8:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80114aa:	2301      	movs	r3, #1
 80114ac:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 80114ae:	2300      	movs	r3, #0
 80114b0:	727b      	strb	r3, [r7, #9]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80114b2:	463b      	mov	r3, r7
 80114b4:	4618      	mov	r0, r3
 80114b6:	f7f3 f96f 	bl	8004798 <HAL_MPU_ConfigRegion>

	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80114ba:	2004      	movs	r0, #4
 80114bc:	f7f3 f94c 	bl	8004758 <HAL_MPU_Enable>
}
 80114c0:	bf00      	nop
 80114c2:	3710      	adds	r7, #16
 80114c4:	46bd      	mov	sp, r7
 80114c6:	bd80      	pop	{r7, pc}

080114c8 <CPU_CACHE_Enable>:

static void CPU_CACHE_Enable(void) {
 80114c8:	b480      	push	{r7}
 80114ca:	b085      	sub	sp, #20
 80114cc:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80114ce:	4b34      	ldr	r3, [pc, #208]	@ (80115a0 <CPU_CACHE_Enable+0xd8>)
 80114d0:	695b      	ldr	r3, [r3, #20]
 80114d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d11b      	bne.n	8011512 <CPU_CACHE_Enable+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 80114da:	f3bf 8f4f 	dsb	sy
}
 80114de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80114e0:	f3bf 8f6f 	isb	sy
}
 80114e4:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80114e6:	4b2e      	ldr	r3, [pc, #184]	@ (80115a0 <CPU_CACHE_Enable+0xd8>)
 80114e8:	2200      	movs	r2, #0
 80114ea:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80114ee:	f3bf 8f4f 	dsb	sy
}
 80114f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80114f4:	f3bf 8f6f 	isb	sy
}
 80114f8:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80114fa:	4b29      	ldr	r3, [pc, #164]	@ (80115a0 <CPU_CACHE_Enable+0xd8>)
 80114fc:	695b      	ldr	r3, [r3, #20]
 80114fe:	4a28      	ldr	r2, [pc, #160]	@ (80115a0 <CPU_CACHE_Enable+0xd8>)
 8011500:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011504:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8011506:	f3bf 8f4f 	dsb	sy
}
 801150a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801150c:	f3bf 8f6f 	isb	sy
}
 8011510:	e000      	b.n	8011514 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8011512:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8011514:	4b22      	ldr	r3, [pc, #136]	@ (80115a0 <CPU_CACHE_Enable+0xd8>)
 8011516:	695b      	ldr	r3, [r3, #20]
 8011518:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801151c:	2b00      	cmp	r3, #0
 801151e:	d138      	bne.n	8011592 <CPU_CACHE_Enable+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8011520:	4b1f      	ldr	r3, [pc, #124]	@ (80115a0 <CPU_CACHE_Enable+0xd8>)
 8011522:	2200      	movs	r2, #0
 8011524:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8011528:	f3bf 8f4f 	dsb	sy
}
 801152c:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 801152e:	4b1c      	ldr	r3, [pc, #112]	@ (80115a0 <CPU_CACHE_Enable+0xd8>)
 8011530:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011534:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	0b5b      	lsrs	r3, r3, #13
 801153a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801153e:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	08db      	lsrs	r3, r3, #3
 8011544:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011548:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 801154a:	68bb      	ldr	r3, [r7, #8]
 801154c:	015a      	lsls	r2, r3, #5
 801154e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8011552:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8011554:	687a      	ldr	r2, [r7, #4]
 8011556:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8011558:	4911      	ldr	r1, [pc, #68]	@ (80115a0 <CPU_CACHE_Enable+0xd8>)
 801155a:	4313      	orrs	r3, r2
 801155c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	1e5a      	subs	r2, r3, #1
 8011564:	607a      	str	r2, [r7, #4]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d1ef      	bne.n	801154a <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 801156a:	68bb      	ldr	r3, [r7, #8]
 801156c:	1e5a      	subs	r2, r3, #1
 801156e:	60ba      	str	r2, [r7, #8]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d1e5      	bne.n	8011540 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8011574:	f3bf 8f4f 	dsb	sy
}
 8011578:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 801157a:	4b09      	ldr	r3, [pc, #36]	@ (80115a0 <CPU_CACHE_Enable+0xd8>)
 801157c:	695b      	ldr	r3, [r3, #20]
 801157e:	4a08      	ldr	r2, [pc, #32]	@ (80115a0 <CPU_CACHE_Enable+0xd8>)
 8011580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011584:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8011586:	f3bf 8f4f 	dsb	sy
}
 801158a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801158c:	f3bf 8f6f 	isb	sy
}
 8011590:	e000      	b.n	8011594 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8011592:	bf00      	nop
	/* Enable I-Cache */
	SCB_EnableICache();

	/* Enable D-Cache */
	SCB_EnableDCache();
}
 8011594:	bf00      	nop
 8011596:	3714      	adds	r7, #20
 8011598:	46bd      	mov	sp, r7
 801159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159e:	4770      	bx	lr
 80115a0:	e000ed00 	.word	0xe000ed00

080115a4 <LED_Blink>:

static void LED_Blink(uint32_t Hdelay, uint32_t Ldelay) {
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b082      	sub	sp, #8
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	6078      	str	r0, [r7, #4]
 80115ac:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, GPIO_PIN_SET);
 80115ae:	2201      	movs	r2, #1
 80115b0:	2108      	movs	r1, #8
 80115b2:	480b      	ldr	r0, [pc, #44]	@ (80115e0 <LED_Blink+0x3c>)
 80115b4:	f7f3 faf8 	bl	8004ba8 <HAL_GPIO_WritePin>
	HAL_Delay(Hdelay - 1);
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	3b01      	subs	r3, #1
 80115bc:	4618      	mov	r0, r3
 80115be:	f7f1 fa17 	bl	80029f0 <HAL_Delay>
	HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, GPIO_PIN_RESET);
 80115c2:	2200      	movs	r2, #0
 80115c4:	2108      	movs	r1, #8
 80115c6:	4806      	ldr	r0, [pc, #24]	@ (80115e0 <LED_Blink+0x3c>)
 80115c8:	f7f3 faee 	bl	8004ba8 <HAL_GPIO_WritePin>
	HAL_Delay(Ldelay - 1);
 80115cc:	683b      	ldr	r3, [r7, #0]
 80115ce:	3b01      	subs	r3, #1
 80115d0:	4618      	mov	r0, r3
 80115d2:	f7f1 fa0d 	bl	80029f0 <HAL_Delay>
}
 80115d6:	bf00      	nop
 80115d8:	3708      	adds	r7, #8
 80115da:	46bd      	mov	sp, r7
 80115dc:	bd80      	pop	{r7, pc}
 80115de:	bf00      	nop
 80115e0:	58021000 	.word	0x58021000

080115e4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80115e4:	b580      	push	{r7, lr}
 80115e6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */
#ifdef W25Qxx
    SCB->VTOR = QSPI_BASE;
  #endif
	MPU_Config();
 80115e8:	f7ff ff26 	bl	8011438 <MPU_Config>
	CPU_CACHE_Enable();
 80115ec:	f7ff ff6c 	bl	80114c8 <CPU_CACHE_Enable>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80115f0:	f7f1 f96c 	bl	80028cc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80115f4:	f000 f85a 	bl	80116ac <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80115f8:	f000 f8e6 	bl	80117c8 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80115fc:	f7ff fa24 	bl	8010a48 <MX_GPIO_Init>
	MX_RTC_Init();
 8011600:	f000 f922 	bl	8011848 <MX_RTC_Init>
	MX_SPI4_Init();
 8011604:	f000 fc22 	bl	8011e4c <MX_SPI4_Init>
	MX_TIM1_Init();
 8011608:	f000 ff44 	bl	8012494 <MX_TIM1_Init>
	MX_ADC1_Init();
 801160c:	f7fe fe5a 	bl	80102c4 <MX_ADC1_Init>
	MX_LPTIM1_Init();
 8011610:	f7ff fc78 	bl	8010f04 <MX_LPTIM1_Init>
	MX_LPTIM2_Init();
 8011614:	f7ff fcaa 	bl	8010f6c <MX_LPTIM2_Init>
	MX_SPI1_Init();
 8011618:	f000 fb6c 	bl	8011cf4 <MX_SPI1_Init>
	MX_SPI2_Init();
 801161c:	f000 fbc0 	bl	8011da0 <MX_SPI2_Init>
	MX_TIM8_Init();
 8011620:	f000 ffe4 	bl	80125ec <MX_TIM8_Init>
	MX_LPTIM3_Init();
 8011624:	f7ff fcd6 	bl	8010fd4 <MX_LPTIM3_Init>
	MX_I2C1_Init();
 8011628:	f7ff fb14 	bl	8010c54 <MX_I2C1_Init>
	MX_LPTIM4_Init();
 801162c:	f7ff fcfc 	bl	8011028 <MX_LPTIM4_Init>
	MX_LPTIM5_Init();
 8011630:	f7ff fd22 	bl	8011078 <MX_LPTIM5_Init>
	MX_ADC3_Init();
 8011634:	f7ff f812 	bl	801065c <MX_ADC3_Init>
	MX_I2C4_Init();
 8011638:	f7ff fb4c 	bl	8010cd4 <MX_I2C4_Init>
	MX_SDMMC1_SD_Init();
 801163c:	f000 faca 	bl	8011bd4 <MX_SDMMC1_SD_Init>
	MX_TIM15_Init();
 8011640:	f001 f870 	bl	8012724 <MX_TIM15_Init>
	MX_ADC2_Init();
 8011644:	f7fe ffa0 	bl	8010588 <MX_ADC2_Init>
	MX_FATFS_Init();
 8011648:	f7ff f9ec 	bl	8010a24 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */
	Motor_Init();
 801164c:	f7fd fece 	bl	800f3ec <Motor_Init>
	Custom_LCD_Clear();
 8011650:	f7ef fdb6 	bl	80011c0 <Custom_LCD_Clear>
//	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
//	__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,10);
	HAL_GPIO_WritePin(E3_GPIO_Port, MARK_L_Pin | MARK_R_Pin | E3_Pin,
 8011654:	2201      	movs	r2, #1
 8011656:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 801165a:	4812      	ldr	r0, [pc, #72]	@ (80116a4 <main+0xc0>)
 801165c:	f7f3 faa4 	bl	8004ba8 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8011660:	2100      	movs	r1, #0
 8011662:	4811      	ldr	r0, [pc, #68]	@ (80116a8 <main+0xc4>)
 8011664:	f7fa ffd2 	bl	800c60c <HAL_TIM_PWM_Start>
	__HAL_TIM_SetCompare(&htim15,TIM_CHANNEL_1, 5);
 8011668:	4b0f      	ldr	r3, [pc, #60]	@ (80116a8 <main+0xc4>)
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	2205      	movs	r2, #5
 801166e:	635a      	str	r2, [r3, #52]	@ 0x34
	LCD_Test();
 8011670:	f7ef f882 	bl	8000778 <LCD_Test>
	__HAL_TIM_SetCompare(&htim15, TIM_CHANNEL_1, 0);
 8011674:	4b0c      	ldr	r3, [pc, #48]	@ (80116a8 <main+0xc4>)
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	2200      	movs	r2, #0
 801167a:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 801167c:	2100      	movs	r1, #0
 801167e:	480a      	ldr	r0, [pc, #40]	@ (80116a8 <main+0xc4>)
 8011680:	f7fb f8d2 	bl	800c828 <HAL_TIM_PWM_Stop>
	Custom_LCD_Clear();
 8011684:	f7ef fd9c 	bl	80011c0 <Custom_LCD_Clear>
	/* USER CODE BEGIN WHILE */
//	MCF8316C_Init();
//	uint8_t text[20];
//	RTC_DateTypeDef sdatestructureget;
//	RTC_TimeTypeDef stimestructureget;
	HAL_GPIO_WritePin(E3_GPIO_Port, MARK_L_Pin | MARK_R_Pin | E3_Pin,
 8011688:	2200      	movs	r2, #0
 801168a:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 801168e:	4805      	ldr	r0, [pc, #20]	@ (80116a4 <main+0xc0>)
 8011690:	f7f3 fa8a 	bl	8004ba8 <HAL_GPIO_WritePin>
//			sprintf((char *)&text,"Time: %02d %02d", stimestructureget.Hours, stimestructureget.Minutes);
//		LCD_ShowString(4, 58, 160, 16, 16, text);
//
//		sprintf((char *)&text,"Tick: %d ms",HAL_GetTick());
//		LCD_ShowString(4, 74, 160, 16, 16,text);
		HAL_Delay(500);
 8011694:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011698:	f7f1 f9aa 	bl	80029f0 <HAL_Delay>
		Init();
 801169c:	f7fc ff82 	bl	800e5a4 <Init>
		HAL_Delay(500);
 80116a0:	bf00      	nop
 80116a2:	e7f7      	b.n	8011694 <main+0xb0>
 80116a4:	58021000 	.word	0x58021000
 80116a8:	240010cc 	.word	0x240010cc

080116ac <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b09c      	sub	sp, #112	@ 0x70
 80116b0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80116b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80116b6:	224c      	movs	r2, #76	@ 0x4c
 80116b8:	2100      	movs	r1, #0
 80116ba:	4618      	mov	r0, r3
 80116bc:	f002 f958 	bl	8013970 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80116c0:	1d3b      	adds	r3, r7, #4
 80116c2:	2220      	movs	r2, #32
 80116c4:	2100      	movs	r1, #0
 80116c6:	4618      	mov	r0, r3
 80116c8:	f002 f952 	bl	8013970 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80116cc:	2002      	movs	r0, #2
 80116ce:	f7f4 fd3b 	bl	8006148 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80116d2:	2300      	movs	r3, #0
 80116d4:	603b      	str	r3, [r7, #0]
 80116d6:	4b39      	ldr	r3, [pc, #228]	@ (80117bc <SystemClock_Config+0x110>)
 80116d8:	699b      	ldr	r3, [r3, #24]
 80116da:	4a38      	ldr	r2, [pc, #224]	@ (80117bc <SystemClock_Config+0x110>)
 80116dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80116e0:	6193      	str	r3, [r2, #24]
 80116e2:	4b36      	ldr	r3, [pc, #216]	@ (80117bc <SystemClock_Config+0x110>)
 80116e4:	699b      	ldr	r3, [r3, #24]
 80116e6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80116ea:	603b      	str	r3, [r7, #0]
 80116ec:	4b34      	ldr	r3, [pc, #208]	@ (80117c0 <SystemClock_Config+0x114>)
 80116ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116f0:	4a33      	ldr	r2, [pc, #204]	@ (80117c0 <SystemClock_Config+0x114>)
 80116f2:	f043 0301 	orr.w	r3, r3, #1
 80116f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80116f8:	4b31      	ldr	r3, [pc, #196]	@ (80117c0 <SystemClock_Config+0x114>)
 80116fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116fc:	f003 0301 	and.w	r3, r3, #1
 8011700:	603b      	str	r3, [r7, #0]
 8011702:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8011704:	bf00      	nop
 8011706:	4b2d      	ldr	r3, [pc, #180]	@ (80117bc <SystemClock_Config+0x110>)
 8011708:	699b      	ldr	r3, [r3, #24]
 801170a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801170e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011712:	d1f8      	bne.n	8011706 <SystemClock_Config+0x5a>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8011714:	f7f4 fd08 	bl	8006128 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8011718:	f7f1 f98e 	bl	8002a38 <HAL_GetREVID>
 801171c:	4b29      	ldr	r3, [pc, #164]	@ (80117c4 <SystemClock_Config+0x118>)
 801171e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011720:	4a28      	ldr	r2, [pc, #160]	@ (80117c4 <SystemClock_Config+0x118>)
 8011722:	f023 0318 	bic.w	r3, r3, #24
 8011726:	6713      	str	r3, [r2, #112]	@ 0x70

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8011728:	230f      	movs	r3, #15
 801172a:	627b      	str	r3, [r7, #36]	@ 0x24
			| RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801172c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8011730:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8011732:	2301      	movs	r3, #1
 8011734:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8011736:	2301      	movs	r3, #1
 8011738:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 801173a:	2340      	movs	r3, #64	@ 0x40
 801173c:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 801173e:	2301      	movs	r3, #1
 8011740:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8011742:	2302      	movs	r3, #2
 8011744:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8011746:	2302      	movs	r3, #2
 8011748:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 5;
 801174a:	2305      	movs	r3, #5
 801174c:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 192;
 801174e:	23c0      	movs	r3, #192	@ 0xc0
 8011750:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8011752:	2302      	movs	r3, #2
 8011754:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8011756:	2304      	movs	r3, #4
 8011758:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 801175a:	2302      	movs	r3, #2
 801175c:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 801175e:	2308      	movs	r3, #8
 8011760:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8011762:	2300      	movs	r3, #0
 8011764:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8011766:	2300      	movs	r3, #0
 8011768:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 801176a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801176e:	4618      	mov	r0, r3
 8011770:	f7f4 fd24 	bl	80061bc <HAL_RCC_OscConfig>
 8011774:	4603      	mov	r3, r0
 8011776:	2b00      	cmp	r3, #0
 8011778:	d001      	beq.n	801177e <SystemClock_Config+0xd2>
		Error_Handler();
 801177a:	f000 f85b 	bl	8011834 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 801177e:	233f      	movs	r3, #63	@ 0x3f
 8011780:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8011782:	2303      	movs	r3, #3
 8011784:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8011786:	2300      	movs	r3, #0
 8011788:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 801178a:	2308      	movs	r3, #8
 801178c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 801178e:	2340      	movs	r3, #64	@ 0x40
 8011790:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8011792:	2340      	movs	r3, #64	@ 0x40
 8011794:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8011796:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801179a:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 801179c:	2340      	movs	r3, #64	@ 0x40
 801179e:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80117a0:	1d3b      	adds	r3, r7, #4
 80117a2:	2104      	movs	r1, #4
 80117a4:	4618      	mov	r0, r3
 80117a6:	f7f5 f963 	bl	8006a70 <HAL_RCC_ClockConfig>
 80117aa:	4603      	mov	r3, r0
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d001      	beq.n	80117b4 <SystemClock_Config+0x108>
		Error_Handler();
 80117b0:	f000 f840 	bl	8011834 <Error_Handler>
	}
}
 80117b4:	bf00      	nop
 80117b6:	3770      	adds	r7, #112	@ 0x70
 80117b8:	46bd      	mov	sp, r7
 80117ba:	bd80      	pop	{r7, pc}
 80117bc:	58024800 	.word	0x58024800
 80117c0:	58000400 	.word	0x58000400
 80117c4:	58024400 	.word	0x58024400

080117c8 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b0b0      	sub	sp, #192	@ 0xc0
 80117cc:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80117ce:	463b      	mov	r3, r7
 80117d0:	22c0      	movs	r2, #192	@ 0xc0
 80117d2:	2100      	movs	r1, #0
 80117d4:	4618      	mov	r0, r3
 80117d6:	f002 f8cb 	bl	8013970 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC
 80117da:	4a15      	ldr	r2, [pc, #84]	@ (8011830 <PeriphCommonClock_Config+0x68>)
 80117dc:	f04f 0300 	mov.w	r3, #0
 80117e0:	e9c7 2300 	strd	r2, r3, [r7]
			| RCC_PERIPHCLK_SDMMC | RCC_PERIPHCLK_CKPER;
	PeriphClkInitStruct.PLL2.PLL2M = 25;
 80117e4:	2319      	movs	r3, #25
 80117e6:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 200;
 80117e8:	23c8      	movs	r3, #200	@ 0xc8
 80117ea:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 2;
 80117ec:	2302      	movs	r3, #2
 80117ee:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 1;
 80117f0:	2301      	movs	r3, #1
 80117f2:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 8;
 80117f4:	2308      	movs	r3, #8
 80117f6:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80117f8:	2300      	movs	r3, #0
 80117fa:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80117fc:	2300      	movs	r3, #0
 80117fe:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8011800:	2300      	movs	r3, #0
 8011802:	627b      	str	r3, [r7, #36]	@ 0x24
	PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8011804:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8011808:	653b      	str	r3, [r7, #80]	@ 0x50
	PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 801180a:	2300      	movs	r3, #0
 801180c:	657b      	str	r3, [r7, #84]	@ 0x54
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 801180e:	2300      	movs	r3, #0
 8011810:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8011814:	463b      	mov	r3, r7
 8011816:	4618      	mov	r0, r3
 8011818:	f7f5 fca0 	bl	800715c <HAL_RCCEx_PeriphCLKConfig>
 801181c:	4603      	mov	r3, r0
 801181e:	2b00      	cmp	r3, #0
 8011820:	d001      	beq.n	8011826 <PeriphCommonClock_Config+0x5e>
		Error_Handler();
 8011822:	f000 f807 	bl	8011834 <Error_Handler>
	}
}
 8011826:	bf00      	nop
 8011828:	37c0      	adds	r7, #192	@ 0xc0
 801182a:	46bd      	mov	sp, r7
 801182c:	bd80      	pop	{r7, pc}
 801182e:	bf00      	nop
 8011830:	80090000 	.word	0x80090000

08011834 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8011834:	b580      	push	{r7, lr}
 8011836:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	LED_Blink(500, 500);
 8011838:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 801183c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011840:	f7ff feb0 	bl	80115a4 <LED_Blink>

	/* USER CODE END Error_Handler_Debug */
}
 8011844:	bf00      	nop
 8011846:	bd80      	pop	{r7, pc}

08011848 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8011848:	b580      	push	{r7, lr}
 801184a:	b086      	sub	sp, #24
 801184c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 801184e:	1d3b      	adds	r3, r7, #4
 8011850:	2200      	movs	r2, #0
 8011852:	601a      	str	r2, [r3, #0]
 8011854:	605a      	str	r2, [r3, #4]
 8011856:	609a      	str	r2, [r3, #8]
 8011858:	60da      	str	r2, [r3, #12]
 801185a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 801185c:	2300      	movs	r3, #0
 801185e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8011860:	4b4d      	ldr	r3, [pc, #308]	@ (8011998 <MX_RTC_Init+0x150>)
 8011862:	4a4e      	ldr	r2, [pc, #312]	@ (801199c <MX_RTC_Init+0x154>)
 8011864:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8011866:	4b4c      	ldr	r3, [pc, #304]	@ (8011998 <MX_RTC_Init+0x150>)
 8011868:	2200      	movs	r2, #0
 801186a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 801186c:	4b4a      	ldr	r3, [pc, #296]	@ (8011998 <MX_RTC_Init+0x150>)
 801186e:	227f      	movs	r2, #127	@ 0x7f
 8011870:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8011872:	4b49      	ldr	r3, [pc, #292]	@ (8011998 <MX_RTC_Init+0x150>)
 8011874:	22ff      	movs	r2, #255	@ 0xff
 8011876:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8011878:	4b47      	ldr	r3, [pc, #284]	@ (8011998 <MX_RTC_Init+0x150>)
 801187a:	2200      	movs	r2, #0
 801187c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 801187e:	4b46      	ldr	r3, [pc, #280]	@ (8011998 <MX_RTC_Init+0x150>)
 8011880:	2200      	movs	r2, #0
 8011882:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8011884:	4b44      	ldr	r3, [pc, #272]	@ (8011998 <MX_RTC_Init+0x150>)
 8011886:	2200      	movs	r2, #0
 8011888:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 801188a:	4b43      	ldr	r3, [pc, #268]	@ (8011998 <MX_RTC_Init+0x150>)
 801188c:	2200      	movs	r2, #0
 801188e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8011890:	4841      	ldr	r0, [pc, #260]	@ (8011998 <MX_RTC_Init+0x150>)
 8011892:	f7f8 f961 	bl	8009b58 <HAL_RTC_Init>
 8011896:	4603      	mov	r3, r0
 8011898:	2b00      	cmp	r3, #0
 801189a:	d001      	beq.n	80118a0 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 801189c:	f7ff ffca 	bl	8011834 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2)
 80118a0:	2101      	movs	r1, #1
 80118a2:	483d      	ldr	r0, [pc, #244]	@ (8011998 <MX_RTC_Init+0x150>)
 80118a4:	f7f8 fbce 	bl	800a044 <HAL_RTCEx_BKUPRead>
 80118a8:	4603      	mov	r3, r0
 80118aa:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 80118ae:	4293      	cmp	r3, r2
 80118b0:	d019      	beq.n	80118e6 <MX_RTC_Init+0x9e>
  {
    /* Configure RTC Calendar */
	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 80118b2:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 80118b6:	2101      	movs	r1, #1
 80118b8:	4837      	ldr	r0, [pc, #220]	@ (8011998 <MX_RTC_Init+0x150>)
 80118ba:	f7f8 fbab 	bl	800a014 <HAL_RTCEx_BKUPWrite>
  }
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 80118be:	2312      	movs	r3, #18
 80118c0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80118c2:	2300      	movs	r3, #0
 80118c4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80118c6:	2300      	movs	r3, #0
 80118c8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80118ca:	2300      	movs	r3, #0
 80118cc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80118ce:	2300      	movs	r3, #0
 80118d0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80118d2:	1d3b      	adds	r3, r7, #4
 80118d4:	2201      	movs	r2, #1
 80118d6:	4619      	mov	r1, r3
 80118d8:	482f      	ldr	r0, [pc, #188]	@ (8011998 <MX_RTC_Init+0x150>)
 80118da:	f7f8 f9bf 	bl	8009c5c <HAL_RTC_SetTime>
 80118de:	4603      	mov	r3, r0
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d043      	beq.n	801196c <MX_RTC_Init+0x124>
 80118e4:	e040      	b.n	8011968 <MX_RTC_Init+0x120>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 80118e6:	4b2e      	ldr	r3, [pc, #184]	@ (80119a0 <MX_RTC_Init+0x158>)
 80118e8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80118ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d00c      	beq.n	801190e <MX_RTC_Init+0xc6>
		 HAL_GPIO_WritePin(E3_GPIO_Port,E3_Pin,GPIO_PIN_SET);
 80118f4:	2201      	movs	r2, #1
 80118f6:	2108      	movs	r1, #8
 80118f8:	482a      	ldr	r0, [pc, #168]	@ (80119a4 <MX_RTC_Init+0x15c>)
 80118fa:	f7f3 f955 	bl	8004ba8 <HAL_GPIO_WritePin>
		 HAL_Delay(10-1);
 80118fe:	2009      	movs	r0, #9
 8011900:	f7f1 f876 	bl	80029f0 <HAL_Delay>
		 HAL_GPIO_WritePin(E3_GPIO_Port,E3_Pin,GPIO_PIN_RESET);
 8011904:	2200      	movs	r2, #0
 8011906:	2108      	movs	r1, #8
 8011908:	4826      	ldr	r0, [pc, #152]	@ (80119a4 <MX_RTC_Init+0x15c>)
 801190a:	f7f3 f94d 	bl	8004ba8 <HAL_GPIO_WritePin>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 801190e:	4b24      	ldr	r3, [pc, #144]	@ (80119a0 <MX_RTC_Init+0x158>)
 8011910:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8011914:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011918:	2b00      	cmp	r3, #0
 801191a:	d01c      	beq.n	8011956 <MX_RTC_Init+0x10e>
		 HAL_GPIO_WritePin(E3_GPIO_Port,E3_Pin,GPIO_PIN_SET);
 801191c:	2201      	movs	r2, #1
 801191e:	2108      	movs	r1, #8
 8011920:	4820      	ldr	r0, [pc, #128]	@ (80119a4 <MX_RTC_Init+0x15c>)
 8011922:	f7f3 f941 	bl	8004ba8 <HAL_GPIO_WritePin>
		 HAL_Delay(10-1);
 8011926:	2009      	movs	r0, #9
 8011928:	f7f1 f862 	bl	80029f0 <HAL_Delay>
		 HAL_GPIO_WritePin(E3_GPIO_Port,E3_Pin,GPIO_PIN_RESET);
 801192c:	2200      	movs	r2, #0
 801192e:	2108      	movs	r1, #8
 8011930:	481c      	ldr	r0, [pc, #112]	@ (80119a4 <MX_RTC_Init+0x15c>)
 8011932:	f7f3 f939 	bl	8004ba8 <HAL_GPIO_WritePin>
		 HAL_Delay(100-1);
 8011936:	2063      	movs	r0, #99	@ 0x63
 8011938:	f7f1 f85a 	bl	80029f0 <HAL_Delay>
		 HAL_GPIO_WritePin(E3_GPIO_Port,E3_Pin,GPIO_PIN_SET);
 801193c:	2201      	movs	r2, #1
 801193e:	2108      	movs	r1, #8
 8011940:	4818      	ldr	r0, [pc, #96]	@ (80119a4 <MX_RTC_Init+0x15c>)
 8011942:	f7f3 f931 	bl	8004ba8 <HAL_GPIO_WritePin>
		 HAL_Delay(10-1);
 8011946:	2009      	movs	r0, #9
 8011948:	f7f1 f852 	bl	80029f0 <HAL_Delay>
		 HAL_GPIO_WritePin(E3_GPIO_Port,E3_Pin,GPIO_PIN_RESET);
 801194c:	2200      	movs	r2, #0
 801194e:	2108      	movs	r1, #8
 8011950:	4814      	ldr	r0, [pc, #80]	@ (80119a4 <MX_RTC_Init+0x15c>)
 8011952:	f7f3 f929 	bl	8004ba8 <HAL_GPIO_WritePin>
    __HAL_RCC_CLEAR_RESET_FLAGS();
 8011956:	4b12      	ldr	r3, [pc, #72]	@ (80119a0 <MX_RTC_Init+0x158>)
 8011958:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 801195c:	4a10      	ldr	r2, [pc, #64]	@ (80119a0 <MX_RTC_Init+0x158>)
 801195e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011962:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
 8011966:	e014      	b.n	8011992 <MX_RTC_Init+0x14a>
  {
    Error_Handler();
 8011968:	f7ff ff64 	bl	8011834 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 801196c:	2301      	movs	r3, #1
 801196e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JUNE;
 8011970:	2306      	movs	r3, #6
 8011972:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8011974:	2301      	movs	r3, #1
 8011976:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x20;
 8011978:	2320      	movs	r3, #32
 801197a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 801197c:	463b      	mov	r3, r7
 801197e:	2201      	movs	r2, #1
 8011980:	4619      	mov	r1, r3
 8011982:	4805      	ldr	r0, [pc, #20]	@ (8011998 <MX_RTC_Init+0x150>)
 8011984:	f7f8 fa08 	bl	8009d98 <HAL_RTC_SetDate>
 8011988:	4603      	mov	r3, r0
 801198a:	2b00      	cmp	r3, #0
 801198c:	d001      	beq.n	8011992 <MX_RTC_Init+0x14a>
  {
    Error_Handler();
 801198e:	f7ff ff51 	bl	8011834 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8011992:	3718      	adds	r7, #24
 8011994:	46bd      	mov	sp, r7
 8011996:	bd80      	pop	{r7, pc}
 8011998:	24000df8 	.word	0x24000df8
 801199c:	58004000 	.word	0x58004000
 80119a0:	58024400 	.word	0x58024400
 80119a4:	58021000 	.word	0x58021000

080119a8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b0b2      	sub	sp, #200	@ 0xc8
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80119b0:	f107 0308 	add.w	r3, r7, #8
 80119b4:	22c0      	movs	r2, #192	@ 0xc0
 80119b6:	2100      	movs	r1, #0
 80119b8:	4618      	mov	r0, r3
 80119ba:	f001 ffd9 	bl	8013970 <memset>
  if(rtcHandle->Instance==RTC)
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	4a10      	ldr	r2, [pc, #64]	@ (8011a04 <HAL_RTC_MspInit+0x5c>)
 80119c4:	4293      	cmp	r3, r2
 80119c6:	d119      	bne.n	80119fc <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80119c8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80119cc:	f04f 0300 	mov.w	r3, #0
 80119d0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80119d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80119d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80119dc:	f107 0308 	add.w	r3, r7, #8
 80119e0:	4618      	mov	r0, r3
 80119e2:	f7f5 fbbb 	bl	800715c <HAL_RCCEx_PeriphCLKConfig>
 80119e6:	4603      	mov	r3, r0
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d001      	beq.n	80119f0 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80119ec:	f7ff ff22 	bl	8011834 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80119f0:	4b05      	ldr	r3, [pc, #20]	@ (8011a08 <HAL_RTC_MspInit+0x60>)
 80119f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80119f4:	4a04      	ldr	r2, [pc, #16]	@ (8011a08 <HAL_RTC_MspInit+0x60>)
 80119f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80119fa:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80119fc:	bf00      	nop
 80119fe:	37c8      	adds	r7, #200	@ 0xc8
 8011a00:	46bd      	mov	sp, r7
 8011a02:	bd80      	pop	{r7, pc}
 8011a04:	58004000 	.word	0x58004000
 8011a08:	58024400 	.word	0x58024400

08011a0c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	b082      	sub	sp, #8
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	4603      	mov	r3, r0
 8011a14:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011a16:	4b0b      	ldr	r3, [pc, #44]	@ (8011a44 <SD_CheckStatus+0x38>)
 8011a18:	2201      	movs	r2, #1
 8011a1a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011a1c:	f7fe ffd6 	bl	80109cc <BSP_SD_GetCardState>
 8011a20:	4603      	mov	r3, r0
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d107      	bne.n	8011a36 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011a26:	4b07      	ldr	r3, [pc, #28]	@ (8011a44 <SD_CheckStatus+0x38>)
 8011a28:	781b      	ldrb	r3, [r3, #0]
 8011a2a:	b2db      	uxtb	r3, r3
 8011a2c:	f023 0301 	bic.w	r3, r3, #1
 8011a30:	b2da      	uxtb	r2, r3
 8011a32:	4b04      	ldr	r3, [pc, #16]	@ (8011a44 <SD_CheckStatus+0x38>)
 8011a34:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8011a36:	4b03      	ldr	r3, [pc, #12]	@ (8011a44 <SD_CheckStatus+0x38>)
 8011a38:	781b      	ldrb	r3, [r3, #0]
 8011a3a:	b2db      	uxtb	r3, r3
}
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	3708      	adds	r7, #8
 8011a40:	46bd      	mov	sp, r7
 8011a42:	bd80      	pop	{r7, pc}
 8011a44:	24000385 	.word	0x24000385

08011a48 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b082      	sub	sp, #8
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	4603      	mov	r3, r0
 8011a50:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8011a52:	4b0b      	ldr	r3, [pc, #44]	@ (8011a80 <SD_initialize+0x38>)
 8011a54:	2201      	movs	r2, #1
 8011a56:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8011a58:	f7fe ff56 	bl	8010908 <BSP_SD_Init>
 8011a5c:	4603      	mov	r3, r0
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d107      	bne.n	8011a72 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8011a62:	79fb      	ldrb	r3, [r7, #7]
 8011a64:	4618      	mov	r0, r3
 8011a66:	f7ff ffd1 	bl	8011a0c <SD_CheckStatus>
 8011a6a:	4603      	mov	r3, r0
 8011a6c:	461a      	mov	r2, r3
 8011a6e:	4b04      	ldr	r3, [pc, #16]	@ (8011a80 <SD_initialize+0x38>)
 8011a70:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8011a72:	4b03      	ldr	r3, [pc, #12]	@ (8011a80 <SD_initialize+0x38>)
 8011a74:	781b      	ldrb	r3, [r3, #0]
 8011a76:	b2db      	uxtb	r3, r3
}
 8011a78:	4618      	mov	r0, r3
 8011a7a:	3708      	adds	r7, #8
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	bd80      	pop	{r7, pc}
 8011a80:	24000385 	.word	0x24000385

08011a84 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011a84:	b580      	push	{r7, lr}
 8011a86:	b082      	sub	sp, #8
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8011a8e:	79fb      	ldrb	r3, [r7, #7]
 8011a90:	4618      	mov	r0, r3
 8011a92:	f7ff ffbb 	bl	8011a0c <SD_CheckStatus>
 8011a96:	4603      	mov	r3, r0
}
 8011a98:	4618      	mov	r0, r3
 8011a9a:	3708      	adds	r7, #8
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	bd80      	pop	{r7, pc}

08011aa0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b086      	sub	sp, #24
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	60b9      	str	r1, [r7, #8]
 8011aa8:	607a      	str	r2, [r7, #4]
 8011aaa:	603b      	str	r3, [r7, #0]
 8011aac:	4603      	mov	r3, r0
 8011aae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011ab0:	2301      	movs	r3, #1
 8011ab2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8011ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8011ab8:	683a      	ldr	r2, [r7, #0]
 8011aba:	6879      	ldr	r1, [r7, #4]
 8011abc:	68b8      	ldr	r0, [r7, #8]
 8011abe:	f7fe ff49 	bl	8010954 <BSP_SD_ReadBlocks>
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d107      	bne.n	8011ad8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8011ac8:	bf00      	nop
 8011aca:	f7fe ff7f 	bl	80109cc <BSP_SD_GetCardState>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d1fa      	bne.n	8011aca <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8011ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ada:	4618      	mov	r0, r3
 8011adc:	3718      	adds	r7, #24
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	bd80      	pop	{r7, pc}

08011ae2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011ae2:	b580      	push	{r7, lr}
 8011ae4:	b086      	sub	sp, #24
 8011ae6:	af00      	add	r7, sp, #0
 8011ae8:	60b9      	str	r1, [r7, #8]
 8011aea:	607a      	str	r2, [r7, #4]
 8011aec:	603b      	str	r3, [r7, #0]
 8011aee:	4603      	mov	r3, r0
 8011af0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011af2:	2301      	movs	r3, #1
 8011af4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8011af6:	f04f 33ff 	mov.w	r3, #4294967295
 8011afa:	683a      	ldr	r2, [r7, #0]
 8011afc:	6879      	ldr	r1, [r7, #4]
 8011afe:	68b8      	ldr	r0, [r7, #8]
 8011b00:	f7fe ff46 	bl	8010990 <BSP_SD_WriteBlocks>
 8011b04:	4603      	mov	r3, r0
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d107      	bne.n	8011b1a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8011b0a:	bf00      	nop
 8011b0c:	f7fe ff5e 	bl	80109cc <BSP_SD_GetCardState>
 8011b10:	4603      	mov	r3, r0
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d1fa      	bne.n	8011b0c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8011b16:	2300      	movs	r3, #0
 8011b18:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8011b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	3718      	adds	r7, #24
 8011b20:	46bd      	mov	sp, r7
 8011b22:	bd80      	pop	{r7, pc}

08011b24 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b08c      	sub	sp, #48	@ 0x30
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	4603      	mov	r3, r0
 8011b2c:	603a      	str	r2, [r7, #0]
 8011b2e:	71fb      	strb	r3, [r7, #7]
 8011b30:	460b      	mov	r3, r1
 8011b32:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011b34:	2301      	movs	r3, #1
 8011b36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011b3a:	4b25      	ldr	r3, [pc, #148]	@ (8011bd0 <SD_ioctl+0xac>)
 8011b3c:	781b      	ldrb	r3, [r3, #0]
 8011b3e:	b2db      	uxtb	r3, r3
 8011b40:	f003 0301 	and.w	r3, r3, #1
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d001      	beq.n	8011b4c <SD_ioctl+0x28>
 8011b48:	2303      	movs	r3, #3
 8011b4a:	e03c      	b.n	8011bc6 <SD_ioctl+0xa2>

  switch (cmd)
 8011b4c:	79bb      	ldrb	r3, [r7, #6]
 8011b4e:	2b03      	cmp	r3, #3
 8011b50:	d834      	bhi.n	8011bbc <SD_ioctl+0x98>
 8011b52:	a201      	add	r2, pc, #4	@ (adr r2, 8011b58 <SD_ioctl+0x34>)
 8011b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b58:	08011b69 	.word	0x08011b69
 8011b5c:	08011b71 	.word	0x08011b71
 8011b60:	08011b89 	.word	0x08011b89
 8011b64:	08011ba3 	.word	0x08011ba3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011b68:	2300      	movs	r3, #0
 8011b6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011b6e:	e028      	b.n	8011bc2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011b70:	f107 0308 	add.w	r3, r7, #8
 8011b74:	4618      	mov	r0, r3
 8011b76:	f7fe ff39 	bl	80109ec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011b7a:	6a3a      	ldr	r2, [r7, #32]
 8011b7c:	683b      	ldr	r3, [r7, #0]
 8011b7e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011b80:	2300      	movs	r3, #0
 8011b82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011b86:	e01c      	b.n	8011bc2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011b88:	f107 0308 	add.w	r3, r7, #8
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	f7fe ff2d 	bl	80109ec <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b94:	b29a      	uxth	r2, r3
 8011b96:	683b      	ldr	r3, [r7, #0]
 8011b98:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011ba0:	e00f      	b.n	8011bc2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011ba2:	f107 0308 	add.w	r3, r7, #8
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	f7fe ff20 	bl	80109ec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bae:	0a5a      	lsrs	r2, r3, #9
 8011bb0:	683b      	ldr	r3, [r7, #0]
 8011bb2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011bba:	e002      	b.n	8011bc2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011bbc:	2304      	movs	r3, #4
 8011bbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8011bc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	3730      	adds	r7, #48	@ 0x30
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	bd80      	pop	{r7, pc}
 8011bce:	bf00      	nop
 8011bd0:	24000385 	.word	0x24000385

08011bd4 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8011bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8011c14 <MX_SDMMC1_SD_Init+0x40>)
 8011bda:	4a0f      	ldr	r2, [pc, #60]	@ (8011c18 <MX_SDMMC1_SD_Init+0x44>)
 8011bdc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8011bde:	4b0d      	ldr	r3, [pc, #52]	@ (8011c14 <MX_SDMMC1_SD_Init+0x40>)
 8011be0:	2200      	movs	r2, #0
 8011be2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8011be4:	4b0b      	ldr	r3, [pc, #44]	@ (8011c14 <MX_SDMMC1_SD_Init+0x40>)
 8011be6:	2200      	movs	r2, #0
 8011be8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8011bea:	4b0a      	ldr	r3, [pc, #40]	@ (8011c14 <MX_SDMMC1_SD_Init+0x40>)
 8011bec:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8011bf0:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8011bf2:	4b08      	ldr	r3, [pc, #32]	@ (8011c14 <MX_SDMMC1_SD_Init+0x40>)
 8011bf4:	2200      	movs	r2, #0
 8011bf6:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8011bf8:	4b06      	ldr	r3, [pc, #24]	@ (8011c14 <MX_SDMMC1_SD_Init+0x40>)
 8011bfa:	2200      	movs	r2, #0
 8011bfc:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8011bfe:	4805      	ldr	r0, [pc, #20]	@ (8011c14 <MX_SDMMC1_SD_Init+0x40>)
 8011c00:	f7f8 fa36 	bl	800a070 <HAL_SD_Init>
 8011c04:	4603      	mov	r3, r0
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d001      	beq.n	8011c0e <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8011c0a:	f7ff fe13 	bl	8011834 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8011c0e:	bf00      	nop
 8011c10:	bd80      	pop	{r7, pc}
 8011c12:	bf00      	nop
 8011c14:	24000e1c 	.word	0x24000e1c
 8011c18:	52007000 	.word	0x52007000

08011c1c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	b08a      	sub	sp, #40	@ 0x28
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011c24:	f107 0314 	add.w	r3, r7, #20
 8011c28:	2200      	movs	r2, #0
 8011c2a:	601a      	str	r2, [r3, #0]
 8011c2c:	605a      	str	r2, [r3, #4]
 8011c2e:	609a      	str	r2, [r3, #8]
 8011c30:	60da      	str	r2, [r3, #12]
 8011c32:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	4a2a      	ldr	r2, [pc, #168]	@ (8011ce4 <HAL_SD_MspInit+0xc8>)
 8011c3a:	4293      	cmp	r3, r2
 8011c3c:	d14d      	bne.n	8011cda <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8011c3e:	4b2a      	ldr	r3, [pc, #168]	@ (8011ce8 <HAL_SD_MspInit+0xcc>)
 8011c40:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8011c44:	4a28      	ldr	r2, [pc, #160]	@ (8011ce8 <HAL_SD_MspInit+0xcc>)
 8011c46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011c4a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8011c4e:	4b26      	ldr	r3, [pc, #152]	@ (8011ce8 <HAL_SD_MspInit+0xcc>)
 8011c50:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8011c54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011c58:	613b      	str	r3, [r7, #16]
 8011c5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011c5c:	4b22      	ldr	r3, [pc, #136]	@ (8011ce8 <HAL_SD_MspInit+0xcc>)
 8011c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011c62:	4a21      	ldr	r2, [pc, #132]	@ (8011ce8 <HAL_SD_MspInit+0xcc>)
 8011c64:	f043 0304 	orr.w	r3, r3, #4
 8011c68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011c6c:	4b1e      	ldr	r3, [pc, #120]	@ (8011ce8 <HAL_SD_MspInit+0xcc>)
 8011c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011c72:	f003 0304 	and.w	r3, r3, #4
 8011c76:	60fb      	str	r3, [r7, #12]
 8011c78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8011c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8011ce8 <HAL_SD_MspInit+0xcc>)
 8011c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011c80:	4a19      	ldr	r2, [pc, #100]	@ (8011ce8 <HAL_SD_MspInit+0xcc>)
 8011c82:	f043 0308 	orr.w	r3, r3, #8
 8011c86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011c8a:	4b17      	ldr	r3, [pc, #92]	@ (8011ce8 <HAL_SD_MspInit+0xcc>)
 8011c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011c90:	f003 0308 	and.w	r3, r3, #8
 8011c94:	60bb      	str	r3, [r7, #8]
 8011c96:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8011c98:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8011c9c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011c9e:	2302      	movs	r3, #2
 8011ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011ca6:	2303      	movs	r3, #3
 8011ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8011caa:	230c      	movs	r3, #12
 8011cac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011cae:	f107 0314 	add.w	r3, r7, #20
 8011cb2:	4619      	mov	r1, r3
 8011cb4:	480d      	ldr	r0, [pc, #52]	@ (8011cec <HAL_SD_MspInit+0xd0>)
 8011cb6:	f7f2 fdaf 	bl	8004818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8011cba:	2304      	movs	r3, #4
 8011cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011cbe:	2302      	movs	r3, #2
 8011cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011cc6:	2303      	movs	r3, #3
 8011cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8011cca:	230c      	movs	r3, #12
 8011ccc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011cce:	f107 0314 	add.w	r3, r7, #20
 8011cd2:	4619      	mov	r1, r3
 8011cd4:	4806      	ldr	r0, [pc, #24]	@ (8011cf0 <HAL_SD_MspInit+0xd4>)
 8011cd6:	f7f2 fd9f 	bl	8004818 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8011cda:	bf00      	nop
 8011cdc:	3728      	adds	r7, #40	@ 0x28
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	bd80      	pop	{r7, pc}
 8011ce2:	bf00      	nop
 8011ce4:	52007000 	.word	0x52007000
 8011ce8:	58024400 	.word	0x58024400
 8011cec:	58020800 	.word	0x58020800
 8011cf0:	58020c00 	.word	0x58020c00

08011cf4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8011cf8:	4b27      	ldr	r3, [pc, #156]	@ (8011d98 <MX_SPI1_Init+0xa4>)
 8011cfa:	4a28      	ldr	r2, [pc, #160]	@ (8011d9c <MX_SPI1_Init+0xa8>)
 8011cfc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8011cfe:	4b26      	ldr	r3, [pc, #152]	@ (8011d98 <MX_SPI1_Init+0xa4>)
 8011d00:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8011d04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8011d06:	4b24      	ldr	r3, [pc, #144]	@ (8011d98 <MX_SPI1_Init+0xa4>)
 8011d08:	2200      	movs	r2, #0
 8011d0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8011d0c:	4b22      	ldr	r3, [pc, #136]	@ (8011d98 <MX_SPI1_Init+0xa4>)
 8011d0e:	2203      	movs	r2, #3
 8011d10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8011d12:	4b21      	ldr	r3, [pc, #132]	@ (8011d98 <MX_SPI1_Init+0xa4>)
 8011d14:	2200      	movs	r2, #0
 8011d16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8011d18:	4b1f      	ldr	r3, [pc, #124]	@ (8011d98 <MX_SPI1_Init+0xa4>)
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8011d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8011d98 <MX_SPI1_Init+0xa4>)
 8011d20:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8011d24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011d26:	4b1c      	ldr	r3, [pc, #112]	@ (8011d98 <MX_SPI1_Init+0xa4>)
 8011d28:	2200      	movs	r2, #0
 8011d2a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8011d98 <MX_SPI1_Init+0xa4>)
 8011d2e:	2200      	movs	r2, #0
 8011d30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8011d32:	4b19      	ldr	r3, [pc, #100]	@ (8011d98 <MX_SPI1_Init+0xa4>)
 8011d34:	2200      	movs	r2, #0
 8011d36:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011d38:	4b17      	ldr	r3, [pc, #92]	@ (8011d98 <MX_SPI1_Init+0xa4>)
 8011d3a:	2200      	movs	r2, #0
 8011d3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8011d3e:	4b16      	ldr	r3, [pc, #88]	@ (8011d98 <MX_SPI1_Init+0xa4>)
 8011d40:	2200      	movs	r2, #0
 8011d42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8011d44:	4b14      	ldr	r3, [pc, #80]	@ (8011d98 <MX_SPI1_Init+0xa4>)
 8011d46:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8011d4a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8011d4c:	4b12      	ldr	r3, [pc, #72]	@ (8011d98 <MX_SPI1_Init+0xa4>)
 8011d4e:	2200      	movs	r2, #0
 8011d50:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8011d52:	4b11      	ldr	r3, [pc, #68]	@ (8011d98 <MX_SPI1_Init+0xa4>)
 8011d54:	2200      	movs	r2, #0
 8011d56:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8011d58:	4b0f      	ldr	r3, [pc, #60]	@ (8011d98 <MX_SPI1_Init+0xa4>)
 8011d5a:	2200      	movs	r2, #0
 8011d5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8011d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8011d98 <MX_SPI1_Init+0xa4>)
 8011d60:	2200      	movs	r2, #0
 8011d62:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8011d64:	4b0c      	ldr	r3, [pc, #48]	@ (8011d98 <MX_SPI1_Init+0xa4>)
 8011d66:	2200      	movs	r2, #0
 8011d68:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8011d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8011d98 <MX_SPI1_Init+0xa4>)
 8011d6c:	2200      	movs	r2, #0
 8011d6e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8011d70:	4b09      	ldr	r3, [pc, #36]	@ (8011d98 <MX_SPI1_Init+0xa4>)
 8011d72:	2200      	movs	r2, #0
 8011d74:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8011d76:	4b08      	ldr	r3, [pc, #32]	@ (8011d98 <MX_SPI1_Init+0xa4>)
 8011d78:	2200      	movs	r2, #0
 8011d7a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8011d7c:	4b06      	ldr	r3, [pc, #24]	@ (8011d98 <MX_SPI1_Init+0xa4>)
 8011d7e:	2200      	movs	r2, #0
 8011d80:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8011d82:	4805      	ldr	r0, [pc, #20]	@ (8011d98 <MX_SPI1_Init+0xa4>)
 8011d84:	f7f9 fd26 	bl	800b7d4 <HAL_SPI_Init>
 8011d88:	4603      	mov	r3, r0
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d001      	beq.n	8011d92 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8011d8e:	f7ff fd51 	bl	8011834 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8011d92:	bf00      	nop
 8011d94:	bd80      	pop	{r7, pc}
 8011d96:	bf00      	nop
 8011d98:	24000e98 	.word	0x24000e98
 8011d9c:	40013000 	.word	0x40013000

08011da0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8011da0:	b580      	push	{r7, lr}
 8011da2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8011da4:	4b27      	ldr	r3, [pc, #156]	@ (8011e44 <MX_SPI2_Init+0xa4>)
 8011da6:	4a28      	ldr	r2, [pc, #160]	@ (8011e48 <MX_SPI2_Init+0xa8>)
 8011da8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8011daa:	4b26      	ldr	r3, [pc, #152]	@ (8011e44 <MX_SPI2_Init+0xa4>)
 8011dac:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8011db0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8011db2:	4b24      	ldr	r3, [pc, #144]	@ (8011e44 <MX_SPI2_Init+0xa4>)
 8011db4:	2200      	movs	r2, #0
 8011db6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8011db8:	4b22      	ldr	r3, [pc, #136]	@ (8011e44 <MX_SPI2_Init+0xa4>)
 8011dba:	2207      	movs	r2, #7
 8011dbc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8011dbe:	4b21      	ldr	r3, [pc, #132]	@ (8011e44 <MX_SPI2_Init+0xa4>)
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8011dc4:	4b1f      	ldr	r3, [pc, #124]	@ (8011e44 <MX_SPI2_Init+0xa4>)
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8011dca:	4b1e      	ldr	r3, [pc, #120]	@ (8011e44 <MX_SPI2_Init+0xa4>)
 8011dcc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8011dd0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8011dd2:	4b1c      	ldr	r3, [pc, #112]	@ (8011e44 <MX_SPI2_Init+0xa4>)
 8011dd4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8011dd8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011dda:	4b1a      	ldr	r3, [pc, #104]	@ (8011e44 <MX_SPI2_Init+0xa4>)
 8011ddc:	2200      	movs	r2, #0
 8011dde:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8011de0:	4b18      	ldr	r3, [pc, #96]	@ (8011e44 <MX_SPI2_Init+0xa4>)
 8011de2:	2200      	movs	r2, #0
 8011de4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011de6:	4b17      	ldr	r3, [pc, #92]	@ (8011e44 <MX_SPI2_Init+0xa4>)
 8011de8:	2200      	movs	r2, #0
 8011dea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8011dec:	4b15      	ldr	r3, [pc, #84]	@ (8011e44 <MX_SPI2_Init+0xa4>)
 8011dee:	2200      	movs	r2, #0
 8011df0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8011df2:	4b14      	ldr	r3, [pc, #80]	@ (8011e44 <MX_SPI2_Init+0xa4>)
 8011df4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8011df8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8011dfa:	4b12      	ldr	r3, [pc, #72]	@ (8011e44 <MX_SPI2_Init+0xa4>)
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8011e00:	4b10      	ldr	r3, [pc, #64]	@ (8011e44 <MX_SPI2_Init+0xa4>)
 8011e02:	2200      	movs	r2, #0
 8011e04:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8011e06:	4b0f      	ldr	r3, [pc, #60]	@ (8011e44 <MX_SPI2_Init+0xa4>)
 8011e08:	2200      	movs	r2, #0
 8011e0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8011e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8011e44 <MX_SPI2_Init+0xa4>)
 8011e0e:	2200      	movs	r2, #0
 8011e10:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8011e12:	4b0c      	ldr	r3, [pc, #48]	@ (8011e44 <MX_SPI2_Init+0xa4>)
 8011e14:	2200      	movs	r2, #0
 8011e16:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8011e18:	4b0a      	ldr	r3, [pc, #40]	@ (8011e44 <MX_SPI2_Init+0xa4>)
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8011e1e:	4b09      	ldr	r3, [pc, #36]	@ (8011e44 <MX_SPI2_Init+0xa4>)
 8011e20:	2200      	movs	r2, #0
 8011e22:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8011e24:	4b07      	ldr	r3, [pc, #28]	@ (8011e44 <MX_SPI2_Init+0xa4>)
 8011e26:	2200      	movs	r2, #0
 8011e28:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8011e2a:	4b06      	ldr	r3, [pc, #24]	@ (8011e44 <MX_SPI2_Init+0xa4>)
 8011e2c:	2200      	movs	r2, #0
 8011e2e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8011e30:	4804      	ldr	r0, [pc, #16]	@ (8011e44 <MX_SPI2_Init+0xa4>)
 8011e32:	f7f9 fccf 	bl	800b7d4 <HAL_SPI_Init>
 8011e36:	4603      	mov	r3, r0
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d001      	beq.n	8011e40 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8011e3c:	f7ff fcfa 	bl	8011834 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8011e40:	bf00      	nop
 8011e42:	bd80      	pop	{r7, pc}
 8011e44:	24000f20 	.word	0x24000f20
 8011e48:	40003800 	.word	0x40003800

08011e4c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8011e50:	4b28      	ldr	r3, [pc, #160]	@ (8011ef4 <MX_SPI4_Init+0xa8>)
 8011e52:	4a29      	ldr	r2, [pc, #164]	@ (8011ef8 <MX_SPI4_Init+0xac>)
 8011e54:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8011e56:	4b27      	ldr	r3, [pc, #156]	@ (8011ef4 <MX_SPI4_Init+0xa8>)
 8011e58:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8011e5c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8011e5e:	4b25      	ldr	r3, [pc, #148]	@ (8011ef4 <MX_SPI4_Init+0xa8>)
 8011e60:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8011e64:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8011e66:	4b23      	ldr	r3, [pc, #140]	@ (8011ef4 <MX_SPI4_Init+0xa8>)
 8011e68:	2207      	movs	r2, #7
 8011e6a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8011e6c:	4b21      	ldr	r3, [pc, #132]	@ (8011ef4 <MX_SPI4_Init+0xa8>)
 8011e6e:	2200      	movs	r2, #0
 8011e70:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8011e72:	4b20      	ldr	r3, [pc, #128]	@ (8011ef4 <MX_SPI4_Init+0xa8>)
 8011e74:	2200      	movs	r2, #0
 8011e76:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8011e78:	4b1e      	ldr	r3, [pc, #120]	@ (8011ef4 <MX_SPI4_Init+0xa8>)
 8011e7a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8011e7e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8011e80:	4b1c      	ldr	r3, [pc, #112]	@ (8011ef4 <MX_SPI4_Init+0xa8>)
 8011e82:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8011e86:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011e88:	4b1a      	ldr	r3, [pc, #104]	@ (8011ef4 <MX_SPI4_Init+0xa8>)
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8011e8e:	4b19      	ldr	r3, [pc, #100]	@ (8011ef4 <MX_SPI4_Init+0xa8>)
 8011e90:	2200      	movs	r2, #0
 8011e92:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011e94:	4b17      	ldr	r3, [pc, #92]	@ (8011ef4 <MX_SPI4_Init+0xa8>)
 8011e96:	2200      	movs	r2, #0
 8011e98:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8011e9a:	4b16      	ldr	r3, [pc, #88]	@ (8011ef4 <MX_SPI4_Init+0xa8>)
 8011e9c:	2200      	movs	r2, #0
 8011e9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8011ea0:	4b14      	ldr	r3, [pc, #80]	@ (8011ef4 <MX_SPI4_Init+0xa8>)
 8011ea2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8011ea6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8011ea8:	4b12      	ldr	r3, [pc, #72]	@ (8011ef4 <MX_SPI4_Init+0xa8>)
 8011eaa:	2200      	movs	r2, #0
 8011eac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8011eae:	4b11      	ldr	r3, [pc, #68]	@ (8011ef4 <MX_SPI4_Init+0xa8>)
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8011eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8011ef4 <MX_SPI4_Init+0xa8>)
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8011eba:	4b0e      	ldr	r3, [pc, #56]	@ (8011ef4 <MX_SPI4_Init+0xa8>)
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8011ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8011ef4 <MX_SPI4_Init+0xa8>)
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8011ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8011ef4 <MX_SPI4_Init+0xa8>)
 8011ec8:	2200      	movs	r2, #0
 8011eca:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8011ecc:	4b09      	ldr	r3, [pc, #36]	@ (8011ef4 <MX_SPI4_Init+0xa8>)
 8011ece:	2200      	movs	r2, #0
 8011ed0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8011ed2:	4b08      	ldr	r3, [pc, #32]	@ (8011ef4 <MX_SPI4_Init+0xa8>)
 8011ed4:	2200      	movs	r2, #0
 8011ed6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8011ed8:	4b06      	ldr	r3, [pc, #24]	@ (8011ef4 <MX_SPI4_Init+0xa8>)
 8011eda:	2200      	movs	r2, #0
 8011edc:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8011ede:	4805      	ldr	r0, [pc, #20]	@ (8011ef4 <MX_SPI4_Init+0xa8>)
 8011ee0:	f7f9 fc78 	bl	800b7d4 <HAL_SPI_Init>
 8011ee4:	4603      	mov	r3, r0
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d001      	beq.n	8011eee <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 8011eea:	f7ff fca3 	bl	8011834 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8011eee:	bf00      	nop
 8011ef0:	bd80      	pop	{r7, pc}
 8011ef2:	bf00      	nop
 8011ef4:	24000fa8 	.word	0x24000fa8
 8011ef8:	40013400 	.word	0x40013400

08011efc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b0c0      	sub	sp, #256	@ 0x100
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011f04:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8011f08:	2200      	movs	r2, #0
 8011f0a:	601a      	str	r2, [r3, #0]
 8011f0c:	605a      	str	r2, [r3, #4]
 8011f0e:	609a      	str	r2, [r3, #8]
 8011f10:	60da      	str	r2, [r3, #12]
 8011f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011f14:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011f18:	22c0      	movs	r2, #192	@ 0xc0
 8011f1a:	2100      	movs	r1, #0
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	f001 fd27 	bl	8013970 <memset>
  if(spiHandle->Instance==SPI1)
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	4a87      	ldr	r2, [pc, #540]	@ (8012144 <HAL_SPI_MspInit+0x248>)
 8011f28:	4293      	cmp	r3, r2
 8011f2a:	d16b      	bne.n	8012004 <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8011f2c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8011f30:	f04f 0300 	mov.w	r3, #0
 8011f34:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8011f38:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8011f3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011f40:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011f44:	4618      	mov	r0, r3
 8011f46:	f7f5 f909 	bl	800715c <HAL_RCCEx_PeriphCLKConfig>
 8011f4a:	4603      	mov	r3, r0
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d001      	beq.n	8011f54 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8011f50:	f7ff fc70 	bl	8011834 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8011f54:	4b7c      	ldr	r3, [pc, #496]	@ (8012148 <HAL_SPI_MspInit+0x24c>)
 8011f56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8011f5a:	4a7b      	ldr	r2, [pc, #492]	@ (8012148 <HAL_SPI_MspInit+0x24c>)
 8011f5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8011f60:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8011f64:	4b78      	ldr	r3, [pc, #480]	@ (8012148 <HAL_SPI_MspInit+0x24c>)
 8011f66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8011f6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8011f6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8011f72:	4b75      	ldr	r3, [pc, #468]	@ (8012148 <HAL_SPI_MspInit+0x24c>)
 8011f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011f78:	4a73      	ldr	r2, [pc, #460]	@ (8012148 <HAL_SPI_MspInit+0x24c>)
 8011f7a:	f043 0308 	orr.w	r3, r3, #8
 8011f7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011f82:	4b71      	ldr	r3, [pc, #452]	@ (8012148 <HAL_SPI_MspInit+0x24c>)
 8011f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011f88:	f003 0308 	and.w	r3, r3, #8
 8011f8c:	623b      	str	r3, [r7, #32]
 8011f8e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011f90:	4b6d      	ldr	r3, [pc, #436]	@ (8012148 <HAL_SPI_MspInit+0x24c>)
 8011f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011f96:	4a6c      	ldr	r2, [pc, #432]	@ (8012148 <HAL_SPI_MspInit+0x24c>)
 8011f98:	f043 0302 	orr.w	r3, r3, #2
 8011f9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011fa0:	4b69      	ldr	r3, [pc, #420]	@ (8012148 <HAL_SPI_MspInit+0x24c>)
 8011fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011fa6:	f003 0302 	and.w	r3, r3, #2
 8011faa:	61fb      	str	r3, [r7, #28]
 8011fac:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8011fae:	2380      	movs	r3, #128	@ 0x80
 8011fb0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011fb4:	2302      	movs	r3, #2
 8011fb6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011fba:	2300      	movs	r3, #0
 8011fbc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8011fc6:	2305      	movs	r3, #5
 8011fc8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011fcc:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8011fd0:	4619      	mov	r1, r3
 8011fd2:	485e      	ldr	r0, [pc, #376]	@ (801214c <HAL_SPI_MspInit+0x250>)
 8011fd4:	f7f2 fc20 	bl	8004818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8011fd8:	2318      	movs	r3, #24
 8011fda:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011fde:	2302      	movs	r3, #2
 8011fe0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011fea:	2300      	movs	r3, #0
 8011fec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8011ff0:	2305      	movs	r3, #5
 8011ff2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011ff6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8011ffa:	4619      	mov	r1, r3
 8011ffc:	4854      	ldr	r0, [pc, #336]	@ (8012150 <HAL_SPI_MspInit+0x254>)
 8011ffe:	f7f2 fc0b 	bl	8004818 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8012002:	e09a      	b.n	801213a <HAL_SPI_MspInit+0x23e>
  else if(spiHandle->Instance==SPI2)
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	4a52      	ldr	r2, [pc, #328]	@ (8012154 <HAL_SPI_MspInit+0x258>)
 801200a:	4293      	cmp	r3, r2
 801200c:	d148      	bne.n	80120a0 <HAL_SPI_MspInit+0x1a4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 801200e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8012012:	f04f 0300 	mov.w	r3, #0
 8012016:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 801201a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801201e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012022:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8012026:	4618      	mov	r0, r3
 8012028:	f7f5 f898 	bl	800715c <HAL_RCCEx_PeriphCLKConfig>
 801202c:	4603      	mov	r3, r0
 801202e:	2b00      	cmp	r3, #0
 8012030:	d001      	beq.n	8012036 <HAL_SPI_MspInit+0x13a>
      Error_Handler();
 8012032:	f7ff fbff 	bl	8011834 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8012036:	4b44      	ldr	r3, [pc, #272]	@ (8012148 <HAL_SPI_MspInit+0x24c>)
 8012038:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801203c:	4a42      	ldr	r2, [pc, #264]	@ (8012148 <HAL_SPI_MspInit+0x24c>)
 801203e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8012042:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8012046:	4b40      	ldr	r3, [pc, #256]	@ (8012148 <HAL_SPI_MspInit+0x24c>)
 8012048:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801204c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012050:	61bb      	str	r3, [r7, #24]
 8012052:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012054:	4b3c      	ldr	r3, [pc, #240]	@ (8012148 <HAL_SPI_MspInit+0x24c>)
 8012056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801205a:	4a3b      	ldr	r2, [pc, #236]	@ (8012148 <HAL_SPI_MspInit+0x24c>)
 801205c:	f043 0302 	orr.w	r3, r3, #2
 8012060:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8012064:	4b38      	ldr	r3, [pc, #224]	@ (8012148 <HAL_SPI_MspInit+0x24c>)
 8012066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801206a:	f003 0302 	and.w	r3, r3, #2
 801206e:	617b      	str	r3, [r7, #20]
 8012070:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8012072:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8012076:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801207a:	2302      	movs	r3, #2
 801207c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012080:	2300      	movs	r3, #0
 8012082:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012086:	2300      	movs	r3, #0
 8012088:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801208c:	2305      	movs	r3, #5
 801208e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012092:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8012096:	4619      	mov	r1, r3
 8012098:	482d      	ldr	r0, [pc, #180]	@ (8012150 <HAL_SPI_MspInit+0x254>)
 801209a:	f7f2 fbbd 	bl	8004818 <HAL_GPIO_Init>
}
 801209e:	e04c      	b.n	801213a <HAL_SPI_MspInit+0x23e>
  else if(spiHandle->Instance==SPI4)
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	4a2c      	ldr	r2, [pc, #176]	@ (8012158 <HAL_SPI_MspInit+0x25c>)
 80120a6:	4293      	cmp	r3, r2
 80120a8:	d147      	bne.n	801213a <HAL_SPI_MspInit+0x23e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80120aa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80120ae:	f04f 0300 	mov.w	r3, #0
 80120b2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_HSI;
 80120b6:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80120ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80120be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80120c2:	4618      	mov	r0, r3
 80120c4:	f7f5 f84a 	bl	800715c <HAL_RCCEx_PeriphCLKConfig>
 80120c8:	4603      	mov	r3, r0
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d001      	beq.n	80120d2 <HAL_SPI_MspInit+0x1d6>
      Error_Handler();
 80120ce:	f7ff fbb1 	bl	8011834 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80120d2:	4b1d      	ldr	r3, [pc, #116]	@ (8012148 <HAL_SPI_MspInit+0x24c>)
 80120d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80120d8:	4a1b      	ldr	r2, [pc, #108]	@ (8012148 <HAL_SPI_MspInit+0x24c>)
 80120da:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80120de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80120e2:	4b19      	ldr	r3, [pc, #100]	@ (8012148 <HAL_SPI_MspInit+0x24c>)
 80120e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80120e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80120ec:	613b      	str	r3, [r7, #16]
 80120ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80120f0:	4b15      	ldr	r3, [pc, #84]	@ (8012148 <HAL_SPI_MspInit+0x24c>)
 80120f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80120f6:	4a14      	ldr	r2, [pc, #80]	@ (8012148 <HAL_SPI_MspInit+0x24c>)
 80120f8:	f043 0310 	orr.w	r3, r3, #16
 80120fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8012100:	4b11      	ldr	r3, [pc, #68]	@ (8012148 <HAL_SPI_MspInit+0x24c>)
 8012102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012106:	f003 0310 	and.w	r3, r3, #16
 801210a:	60fb      	str	r3, [r7, #12]
 801210c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 801210e:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8012112:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012116:	2302      	movs	r3, #2
 8012118:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801211c:	2300      	movs	r3, #0
 801211e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8012122:	2302      	movs	r3, #2
 8012124:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8012128:	2305      	movs	r3, #5
 801212a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801212e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8012132:	4619      	mov	r1, r3
 8012134:	4809      	ldr	r0, [pc, #36]	@ (801215c <HAL_SPI_MspInit+0x260>)
 8012136:	f7f2 fb6f 	bl	8004818 <HAL_GPIO_Init>
}
 801213a:	bf00      	nop
 801213c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8012140:	46bd      	mov	sp, r7
 8012142:	bd80      	pop	{r7, pc}
 8012144:	40013000 	.word	0x40013000
 8012148:	58024400 	.word	0x58024400
 801214c:	58020c00 	.word	0x58020c00
 8012150:	58020400 	.word	0x58020400
 8012154:	40003800 	.word	0x40003800
 8012158:	40013400 	.word	0x40013400
 801215c:	58021000 	.word	0x58021000

08012160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8012160:	b480      	push	{r7}
 8012162:	b083      	sub	sp, #12
 8012164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012166:	4b0a      	ldr	r3, [pc, #40]	@ (8012190 <HAL_MspInit+0x30>)
 8012168:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801216c:	4a08      	ldr	r2, [pc, #32]	@ (8012190 <HAL_MspInit+0x30>)
 801216e:	f043 0302 	orr.w	r3, r3, #2
 8012172:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8012176:	4b06      	ldr	r3, [pc, #24]	@ (8012190 <HAL_MspInit+0x30>)
 8012178:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801217c:	f003 0302 	and.w	r3, r3, #2
 8012180:	607b      	str	r3, [r7, #4]
 8012182:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8012184:	bf00      	nop
 8012186:	370c      	adds	r7, #12
 8012188:	46bd      	mov	sp, r7
 801218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218e:	4770      	bx	lr
 8012190:	58024400 	.word	0x58024400

08012194 <NMI_Handler>:
/*           Cortex Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8012194:	b480      	push	{r7}
 8012196:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8012198:	bf00      	nop
 801219a:	46bd      	mov	sp, r7
 801219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a0:	4770      	bx	lr

080121a2 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80121a2:	b480      	push	{r7}
 80121a4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80121a6:	bf00      	nop
 80121a8:	e7fd      	b.n	80121a6 <HardFault_Handler+0x4>

080121aa <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80121aa:	b480      	push	{r7}
 80121ac:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80121ae:	bf00      	nop
 80121b0:	e7fd      	b.n	80121ae <MemManage_Handler+0x4>

080121b2 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80121b2:	b480      	push	{r7}
 80121b4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80121b6:	bf00      	nop
 80121b8:	e7fd      	b.n	80121b6 <BusFault_Handler+0x4>

080121ba <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80121ba:	b480      	push	{r7}
 80121bc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80121be:	bf00      	nop
 80121c0:	e7fd      	b.n	80121be <UsageFault_Handler+0x4>

080121c2 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80121c2:	b480      	push	{r7}
 80121c4:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80121c6:	bf00      	nop
 80121c8:	46bd      	mov	sp, r7
 80121ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ce:	4770      	bx	lr

080121d0 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80121d0:	b480      	push	{r7}
 80121d2:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80121d4:	bf00      	nop
 80121d6:	46bd      	mov	sp, r7
 80121d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121dc:	4770      	bx	lr

080121de <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80121de:	b480      	push	{r7}
 80121e0:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80121e2:	bf00      	nop
 80121e4:	46bd      	mov	sp, r7
 80121e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ea:	4770      	bx	lr

080121ec <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80121ec:	b580      	push	{r7, lr}
 80121ee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80121f0:	f7f0 fbde 	bl	80029b0 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80121f4:	bf00      	nop
 80121f6:	bd80      	pop	{r7, pc}

080121f8 <LPTIM3_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles LPTIM3 global interrupt.
 */
void LPTIM3_IRQHandler(void) {
 80121f8:	b580      	push	{r7, lr}
 80121fa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN LPTIM3_IRQn 0 */
	Sensor_LPTIM3_IRQ();
 80121fc:	f7fd fb9c 	bl	800f938 <Sensor_LPTIM3_IRQ>
	Marker_LPTIM3_IRQ();
 8012200:	f7fd fca6 	bl	800fb50 <Marker_LPTIM3_IRQ>
	/* USER CODE END LPTIM3_IRQn 0 */
	HAL_LPTIM_IRQHandler(&hlptim3);
 8012204:	4802      	ldr	r0, [pc, #8]	@ (8012210 <LPTIM3_IRQHandler+0x18>)
 8012206:	f7f3 fc9e 	bl	8005b46 <HAL_LPTIM_IRQHandler>
	/* USER CODE BEGIN LPTIM3_IRQn 1 */

	/* USER CODE END LPTIM3_IRQn 1 */
}
 801220a:	bf00      	nop
 801220c:	bd80      	pop	{r7, pc}
 801220e:	bf00      	nop
 8012210:	24000d50 	.word	0x24000d50

08012214 <LPTIM4_IRQHandler>:

/**
 * @brief This function handles LPTIM4 global interrupt.
 */
void LPTIM4_IRQHandler(void) {
 8012214:	b580      	push	{r7, lr}
 8012216:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN LPTIM4_IRQn 0 */
	Motor_LPTIM4_IRQ();
 8012218:	f7fd f9e2 	bl	800f5e0 <Motor_LPTIM4_IRQ>
	/* USER CODE END LPTIM4_IRQn 0 */
	HAL_LPTIM_IRQHandler(&hlptim4);
 801221c:	4802      	ldr	r0, [pc, #8]	@ (8012228 <LPTIM4_IRQHandler+0x14>)
 801221e:	f7f3 fc92 	bl	8005b46 <HAL_LPTIM_IRQHandler>
	/* USER CODE BEGIN LPTIM4_IRQn 1 */

	/* USER CODE END LPTIM4_IRQn 1 */
}
 8012222:	bf00      	nop
 8012224:	bd80      	pop	{r7, pc}
 8012226:	bf00      	nop
 8012228:	24000d88 	.word	0x24000d88

0801222c <LPTIM5_IRQHandler>:

/**
 * @brief This function handles LPTIM5 global interrupt.
 */
void LPTIM5_IRQHandler(void) {
 801222c:	b580      	push	{r7, lr}
 801222e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN LPTIM5_IRQn 0 */
	ADC_Battery_LPTIM5_IRQ();
 8012230:	f7fd ff8c 	bl	801014c <ADC_Battery_LPTIM5_IRQ>

	/* USER CODE END LPTIM5_IRQn 0 */
	HAL_LPTIM_IRQHandler(&hlptim5);
 8012234:	4802      	ldr	r0, [pc, #8]	@ (8012240 <LPTIM5_IRQHandler+0x14>)
 8012236:	f7f3 fc86 	bl	8005b46 <HAL_LPTIM_IRQHandler>
	/* USER CODE BEGIN LPTIM5_IRQn 1 */

	/* USER CODE END LPTIM5_IRQn 1 */
}
 801223a:	bf00      	nop
 801223c:	bd80      	pop	{r7, pc}
 801223e:	bf00      	nop
 8012240:	24000dc0 	.word	0x24000dc0

08012244 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8012244:	b480      	push	{r7}
 8012246:	af00      	add	r7, sp, #0
  return 1;
 8012248:	2301      	movs	r3, #1
}
 801224a:	4618      	mov	r0, r3
 801224c:	46bd      	mov	sp, r7
 801224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012252:	4770      	bx	lr

08012254 <_kill>:

int _kill(int pid, int sig)
{
 8012254:	b580      	push	{r7, lr}
 8012256:	b082      	sub	sp, #8
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
 801225c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 801225e:	f001 fbd9 	bl	8013a14 <__errno>
 8012262:	4603      	mov	r3, r0
 8012264:	2216      	movs	r2, #22
 8012266:	601a      	str	r2, [r3, #0]
  return -1;
 8012268:	f04f 33ff 	mov.w	r3, #4294967295
}
 801226c:	4618      	mov	r0, r3
 801226e:	3708      	adds	r7, #8
 8012270:	46bd      	mov	sp, r7
 8012272:	bd80      	pop	{r7, pc}

08012274 <_exit>:

void _exit (int status)
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b082      	sub	sp, #8
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 801227c:	f04f 31ff 	mov.w	r1, #4294967295
 8012280:	6878      	ldr	r0, [r7, #4]
 8012282:	f7ff ffe7 	bl	8012254 <_kill>
  while (1) {}    /* Make sure we hang here */
 8012286:	bf00      	nop
 8012288:	e7fd      	b.n	8012286 <_exit+0x12>

0801228a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801228a:	b580      	push	{r7, lr}
 801228c:	b086      	sub	sp, #24
 801228e:	af00      	add	r7, sp, #0
 8012290:	60f8      	str	r0, [r7, #12]
 8012292:	60b9      	str	r1, [r7, #8]
 8012294:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012296:	2300      	movs	r3, #0
 8012298:	617b      	str	r3, [r7, #20]
 801229a:	e00a      	b.n	80122b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 801229c:	f3af 8000 	nop.w
 80122a0:	4601      	mov	r1, r0
 80122a2:	68bb      	ldr	r3, [r7, #8]
 80122a4:	1c5a      	adds	r2, r3, #1
 80122a6:	60ba      	str	r2, [r7, #8]
 80122a8:	b2ca      	uxtb	r2, r1
 80122aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80122ac:	697b      	ldr	r3, [r7, #20]
 80122ae:	3301      	adds	r3, #1
 80122b0:	617b      	str	r3, [r7, #20]
 80122b2:	697a      	ldr	r2, [r7, #20]
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	429a      	cmp	r2, r3
 80122b8:	dbf0      	blt.n	801229c <_read+0x12>
  }

  return len;
 80122ba:	687b      	ldr	r3, [r7, #4]
}
 80122bc:	4618      	mov	r0, r3
 80122be:	3718      	adds	r7, #24
 80122c0:	46bd      	mov	sp, r7
 80122c2:	bd80      	pop	{r7, pc}

080122c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80122c4:	b580      	push	{r7, lr}
 80122c6:	b086      	sub	sp, #24
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	60f8      	str	r0, [r7, #12]
 80122cc:	60b9      	str	r1, [r7, #8]
 80122ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80122d0:	2300      	movs	r3, #0
 80122d2:	617b      	str	r3, [r7, #20]
 80122d4:	e009      	b.n	80122ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80122d6:	68bb      	ldr	r3, [r7, #8]
 80122d8:	1c5a      	adds	r2, r3, #1
 80122da:	60ba      	str	r2, [r7, #8]
 80122dc:	781b      	ldrb	r3, [r3, #0]
 80122de:	4618      	mov	r0, r3
 80122e0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80122e4:	697b      	ldr	r3, [r7, #20]
 80122e6:	3301      	adds	r3, #1
 80122e8:	617b      	str	r3, [r7, #20]
 80122ea:	697a      	ldr	r2, [r7, #20]
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	429a      	cmp	r2, r3
 80122f0:	dbf1      	blt.n	80122d6 <_write+0x12>
  }
  return len;
 80122f2:	687b      	ldr	r3, [r7, #4]
}
 80122f4:	4618      	mov	r0, r3
 80122f6:	3718      	adds	r7, #24
 80122f8:	46bd      	mov	sp, r7
 80122fa:	bd80      	pop	{r7, pc}

080122fc <_close>:

int _close(int file)
{
 80122fc:	b480      	push	{r7}
 80122fe:	b083      	sub	sp, #12
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8012304:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012308:	4618      	mov	r0, r3
 801230a:	370c      	adds	r7, #12
 801230c:	46bd      	mov	sp, r7
 801230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012312:	4770      	bx	lr

08012314 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8012314:	b480      	push	{r7}
 8012316:	b083      	sub	sp, #12
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
 801231c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 801231e:	683b      	ldr	r3, [r7, #0]
 8012320:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8012324:	605a      	str	r2, [r3, #4]
  return 0;
 8012326:	2300      	movs	r3, #0
}
 8012328:	4618      	mov	r0, r3
 801232a:	370c      	adds	r7, #12
 801232c:	46bd      	mov	sp, r7
 801232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012332:	4770      	bx	lr

08012334 <_isatty>:

int _isatty(int file)
{
 8012334:	b480      	push	{r7}
 8012336:	b083      	sub	sp, #12
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 801233c:	2301      	movs	r3, #1
}
 801233e:	4618      	mov	r0, r3
 8012340:	370c      	adds	r7, #12
 8012342:	46bd      	mov	sp, r7
 8012344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012348:	4770      	bx	lr

0801234a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801234a:	b480      	push	{r7}
 801234c:	b085      	sub	sp, #20
 801234e:	af00      	add	r7, sp, #0
 8012350:	60f8      	str	r0, [r7, #12]
 8012352:	60b9      	str	r1, [r7, #8]
 8012354:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8012356:	2300      	movs	r3, #0
}
 8012358:	4618      	mov	r0, r3
 801235a:	3714      	adds	r7, #20
 801235c:	46bd      	mov	sp, r7
 801235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012362:	4770      	bx	lr

08012364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8012364:	b580      	push	{r7, lr}
 8012366:	b086      	sub	sp, #24
 8012368:	af00      	add	r7, sp, #0
 801236a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 801236c:	4a14      	ldr	r2, [pc, #80]	@ (80123c0 <_sbrk+0x5c>)
 801236e:	4b15      	ldr	r3, [pc, #84]	@ (80123c4 <_sbrk+0x60>)
 8012370:	1ad3      	subs	r3, r2, r3
 8012372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8012374:	697b      	ldr	r3, [r7, #20]
 8012376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8012378:	4b13      	ldr	r3, [pc, #76]	@ (80123c8 <_sbrk+0x64>)
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d102      	bne.n	8012386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8012380:	4b11      	ldr	r3, [pc, #68]	@ (80123c8 <_sbrk+0x64>)
 8012382:	4a12      	ldr	r2, [pc, #72]	@ (80123cc <_sbrk+0x68>)
 8012384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8012386:	4b10      	ldr	r3, [pc, #64]	@ (80123c8 <_sbrk+0x64>)
 8012388:	681a      	ldr	r2, [r3, #0]
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	4413      	add	r3, r2
 801238e:	693a      	ldr	r2, [r7, #16]
 8012390:	429a      	cmp	r2, r3
 8012392:	d207      	bcs.n	80123a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8012394:	f001 fb3e 	bl	8013a14 <__errno>
 8012398:	4603      	mov	r3, r0
 801239a:	220c      	movs	r2, #12
 801239c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801239e:	f04f 33ff 	mov.w	r3, #4294967295
 80123a2:	e009      	b.n	80123b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80123a4:	4b08      	ldr	r3, [pc, #32]	@ (80123c8 <_sbrk+0x64>)
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80123aa:	4b07      	ldr	r3, [pc, #28]	@ (80123c8 <_sbrk+0x64>)
 80123ac:	681a      	ldr	r2, [r3, #0]
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	4413      	add	r3, r2
 80123b2:	4a05      	ldr	r2, [pc, #20]	@ (80123c8 <_sbrk+0x64>)
 80123b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80123b6:	68fb      	ldr	r3, [r7, #12]
}
 80123b8:	4618      	mov	r0, r3
 80123ba:	3718      	adds	r7, #24
 80123bc:	46bd      	mov	sp, r7
 80123be:	bd80      	pop	{r7, pc}
 80123c0:	24080000 	.word	0x24080000
 80123c4:	00000400 	.word	0x00000400
 80123c8:	24001030 	.word	0x24001030
 80123cc:	24001268 	.word	0x24001268

080123d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80123d0:	b480      	push	{r7}
 80123d2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80123d4:	4b29      	ldr	r3, [pc, #164]	@ (801247c <SystemInit+0xac>)
 80123d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80123da:	4a28      	ldr	r2, [pc, #160]	@ (801247c <SystemInit+0xac>)
 80123dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80123e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80123e4:	4b26      	ldr	r3, [pc, #152]	@ (8012480 <SystemInit+0xb0>)
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	4a25      	ldr	r2, [pc, #148]	@ (8012480 <SystemInit+0xb0>)
 80123ea:	f043 0301 	orr.w	r3, r3, #1
 80123ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80123f0:	4b23      	ldr	r3, [pc, #140]	@ (8012480 <SystemInit+0xb0>)
 80123f2:	2200      	movs	r2, #0
 80123f4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80123f6:	4b22      	ldr	r3, [pc, #136]	@ (8012480 <SystemInit+0xb0>)
 80123f8:	681a      	ldr	r2, [r3, #0]
 80123fa:	4921      	ldr	r1, [pc, #132]	@ (8012480 <SystemInit+0xb0>)
 80123fc:	4b21      	ldr	r3, [pc, #132]	@ (8012484 <SystemInit+0xb4>)
 80123fe:	4013      	ands	r3, r2
 8012400:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8012402:	4b1f      	ldr	r3, [pc, #124]	@ (8012480 <SystemInit+0xb0>)
 8012404:	2200      	movs	r2, #0
 8012406:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8012408:	4b1d      	ldr	r3, [pc, #116]	@ (8012480 <SystemInit+0xb0>)
 801240a:	2200      	movs	r2, #0
 801240c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 801240e:	4b1c      	ldr	r3, [pc, #112]	@ (8012480 <SystemInit+0xb0>)
 8012410:	2200      	movs	r2, #0
 8012412:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8012414:	4b1a      	ldr	r3, [pc, #104]	@ (8012480 <SystemInit+0xb0>)
 8012416:	2200      	movs	r2, #0
 8012418:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 801241a:	4b19      	ldr	r3, [pc, #100]	@ (8012480 <SystemInit+0xb0>)
 801241c:	2200      	movs	r2, #0
 801241e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8012420:	4b17      	ldr	r3, [pc, #92]	@ (8012480 <SystemInit+0xb0>)
 8012422:	2200      	movs	r2, #0
 8012424:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8012426:	4b16      	ldr	r3, [pc, #88]	@ (8012480 <SystemInit+0xb0>)
 8012428:	2200      	movs	r2, #0
 801242a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 801242c:	4b14      	ldr	r3, [pc, #80]	@ (8012480 <SystemInit+0xb0>)
 801242e:	2200      	movs	r2, #0
 8012430:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8012432:	4b13      	ldr	r3, [pc, #76]	@ (8012480 <SystemInit+0xb0>)
 8012434:	2200      	movs	r2, #0
 8012436:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8012438:	4b11      	ldr	r3, [pc, #68]	@ (8012480 <SystemInit+0xb0>)
 801243a:	2200      	movs	r2, #0
 801243c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 801243e:	4b10      	ldr	r3, [pc, #64]	@ (8012480 <SystemInit+0xb0>)
 8012440:	2200      	movs	r2, #0
 8012442:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8012444:	4b0e      	ldr	r3, [pc, #56]	@ (8012480 <SystemInit+0xb0>)
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	4a0d      	ldr	r2, [pc, #52]	@ (8012480 <SystemInit+0xb0>)
 801244a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801244e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8012450:	4b0b      	ldr	r3, [pc, #44]	@ (8012480 <SystemInit+0xb0>)
 8012452:	2200      	movs	r2, #0
 8012454:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8012456:	4b0c      	ldr	r3, [pc, #48]	@ (8012488 <SystemInit+0xb8>)
 8012458:	681a      	ldr	r2, [r3, #0]
 801245a:	4b0c      	ldr	r3, [pc, #48]	@ (801248c <SystemInit+0xbc>)
 801245c:	4013      	ands	r3, r2
 801245e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012462:	d202      	bcs.n	801246a <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8012464:	4b0a      	ldr	r3, [pc, #40]	@ (8012490 <SystemInit+0xc0>)
 8012466:	2201      	movs	r2, #1
 8012468:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801246a:	4b04      	ldr	r3, [pc, #16]	@ (801247c <SystemInit+0xac>)
 801246c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8012470:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8012472:	bf00      	nop
 8012474:	46bd      	mov	sp, r7
 8012476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247a:	4770      	bx	lr
 801247c:	e000ed00 	.word	0xe000ed00
 8012480:	58024400 	.word	0x58024400
 8012484:	eaf6ed7f 	.word	0xeaf6ed7f
 8012488:	5c001000 	.word	0x5c001000
 801248c:	ffff0000 	.word	0xffff0000
 8012490:	51008108 	.word	0x51008108

08012494 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8012494:	b580      	push	{r7, lr}
 8012496:	b09a      	sub	sp, #104	@ 0x68
 8012498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801249a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801249e:	2200      	movs	r2, #0
 80124a0:	601a      	str	r2, [r3, #0]
 80124a2:	605a      	str	r2, [r3, #4]
 80124a4:	609a      	str	r2, [r3, #8]
 80124a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80124a8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80124ac:	2200      	movs	r2, #0
 80124ae:	601a      	str	r2, [r3, #0]
 80124b0:	605a      	str	r2, [r3, #4]
 80124b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80124b4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80124b8:	2200      	movs	r2, #0
 80124ba:	601a      	str	r2, [r3, #0]
 80124bc:	605a      	str	r2, [r3, #4]
 80124be:	609a      	str	r2, [r3, #8]
 80124c0:	60da      	str	r2, [r3, #12]
 80124c2:	611a      	str	r2, [r3, #16]
 80124c4:	615a      	str	r2, [r3, #20]
 80124c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80124c8:	1d3b      	adds	r3, r7, #4
 80124ca:	222c      	movs	r2, #44	@ 0x2c
 80124cc:	2100      	movs	r1, #0
 80124ce:	4618      	mov	r0, r3
 80124d0:	f001 fa4e 	bl	8013970 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80124d4:	4b43      	ldr	r3, [pc, #268]	@ (80125e4 <MX_TIM1_Init+0x150>)
 80124d6:	4a44      	ldr	r2, [pc, #272]	@ (80125e8 <MX_TIM1_Init+0x154>)
 80124d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 11;
 80124da:	4b42      	ldr	r3, [pc, #264]	@ (80125e4 <MX_TIM1_Init+0x150>)
 80124dc:	220b      	movs	r2, #11
 80124de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80124e0:	4b40      	ldr	r3, [pc, #256]	@ (80125e4 <MX_TIM1_Init+0x150>)
 80124e2:	2200      	movs	r2, #0
 80124e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80124e6:	4b3f      	ldr	r3, [pc, #252]	@ (80125e4 <MX_TIM1_Init+0x150>)
 80124e8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80124ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80124ee:	4b3d      	ldr	r3, [pc, #244]	@ (80125e4 <MX_TIM1_Init+0x150>)
 80124f0:	2200      	movs	r2, #0
 80124f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80124f4:	4b3b      	ldr	r3, [pc, #236]	@ (80125e4 <MX_TIM1_Init+0x150>)
 80124f6:	2200      	movs	r2, #0
 80124f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80124fa:	4b3a      	ldr	r3, [pc, #232]	@ (80125e4 <MX_TIM1_Init+0x150>)
 80124fc:	2280      	movs	r2, #128	@ 0x80
 80124fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8012500:	4838      	ldr	r0, [pc, #224]	@ (80125e4 <MX_TIM1_Init+0x150>)
 8012502:	f7f9 ffd4 	bl	800c4ae <HAL_TIM_Base_Init>
 8012506:	4603      	mov	r3, r0
 8012508:	2b00      	cmp	r3, #0
 801250a:	d001      	beq.n	8012510 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 801250c:	f7ff f992 	bl	8011834 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8012510:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012514:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8012516:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801251a:	4619      	mov	r1, r3
 801251c:	4831      	ldr	r0, [pc, #196]	@ (80125e4 <MX_TIM1_Init+0x150>)
 801251e:	f7fa fb2d 	bl	800cb7c <HAL_TIM_ConfigClockSource>
 8012522:	4603      	mov	r3, r0
 8012524:	2b00      	cmp	r3, #0
 8012526:	d001      	beq.n	801252c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8012528:	f7ff f984 	bl	8011834 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 801252c:	482d      	ldr	r0, [pc, #180]	@ (80125e4 <MX_TIM1_Init+0x150>)
 801252e:	f7fa f815 	bl	800c55c <HAL_TIM_PWM_Init>
 8012532:	4603      	mov	r3, r0
 8012534:	2b00      	cmp	r3, #0
 8012536:	d001      	beq.n	801253c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8012538:	f7ff f97c 	bl	8011834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801253c:	2300      	movs	r3, #0
 801253e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8012540:	2300      	movs	r3, #0
 8012542:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012544:	2300      	movs	r3, #0
 8012546:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8012548:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801254c:	4619      	mov	r1, r3
 801254e:	4825      	ldr	r0, [pc, #148]	@ (80125e4 <MX_TIM1_Init+0x150>)
 8012550:	f7fb f908 	bl	800d764 <HAL_TIMEx_MasterConfigSynchronization>
 8012554:	4603      	mov	r3, r0
 8012556:	2b00      	cmp	r3, #0
 8012558:	d001      	beq.n	801255e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 801255a:	f7ff f96b 	bl	8011834 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 801255e:	2370      	movs	r3, #112	@ 0x70
 8012560:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8012562:	2300      	movs	r3, #0
 8012564:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8012566:	2300      	movs	r3, #0
 8012568:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 801256a:	2300      	movs	r3, #0
 801256c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801256e:	2300      	movs	r3, #0
 8012570:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8012572:	2300      	movs	r3, #0
 8012574:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8012576:	2300      	movs	r3, #0
 8012578:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 801257a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801257e:	2204      	movs	r2, #4
 8012580:	4619      	mov	r1, r3
 8012582:	4818      	ldr	r0, [pc, #96]	@ (80125e4 <MX_TIM1_Init+0x150>)
 8012584:	f7fa f9e6 	bl	800c954 <HAL_TIM_PWM_ConfigChannel>
 8012588:	4603      	mov	r3, r0
 801258a:	2b00      	cmp	r3, #0
 801258c:	d001      	beq.n	8012592 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 801258e:	f7ff f951 	bl	8011834 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8012592:	2300      	movs	r3, #0
 8012594:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8012596:	2300      	movs	r3, #0
 8012598:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 801259a:	2300      	movs	r3, #0
 801259c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 801259e:	2300      	movs	r3, #0
 80125a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80125a2:	2300      	movs	r3, #0
 80125a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80125a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80125aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80125ac:	2300      	movs	r3, #0
 80125ae:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80125b0:	2300      	movs	r3, #0
 80125b2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80125b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80125b8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80125ba:	2300      	movs	r3, #0
 80125bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80125be:	2300      	movs	r3, #0
 80125c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80125c2:	1d3b      	adds	r3, r7, #4
 80125c4:	4619      	mov	r1, r3
 80125c6:	4807      	ldr	r0, [pc, #28]	@ (80125e4 <MX_TIM1_Init+0x150>)
 80125c8:	f7fb f95a 	bl	800d880 <HAL_TIMEx_ConfigBreakDeadTime>
 80125cc:	4603      	mov	r3, r0
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d001      	beq.n	80125d6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80125d2:	f7ff f92f 	bl	8011834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80125d6:	4803      	ldr	r0, [pc, #12]	@ (80125e4 <MX_TIM1_Init+0x150>)
 80125d8:	f000 f992 	bl	8012900 <HAL_TIM_MspPostInit>

}
 80125dc:	bf00      	nop
 80125de:	3768      	adds	r7, #104	@ 0x68
 80125e0:	46bd      	mov	sp, r7
 80125e2:	bd80      	pop	{r7, pc}
 80125e4:	24001034 	.word	0x24001034
 80125e8:	40010000 	.word	0x40010000

080125ec <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b096      	sub	sp, #88	@ 0x58
 80125f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80125f2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80125f6:	2200      	movs	r2, #0
 80125f8:	601a      	str	r2, [r3, #0]
 80125fa:	605a      	str	r2, [r3, #4]
 80125fc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80125fe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8012602:	2200      	movs	r2, #0
 8012604:	601a      	str	r2, [r3, #0]
 8012606:	605a      	str	r2, [r3, #4]
 8012608:	609a      	str	r2, [r3, #8]
 801260a:	60da      	str	r2, [r3, #12]
 801260c:	611a      	str	r2, [r3, #16]
 801260e:	615a      	str	r2, [r3, #20]
 8012610:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8012612:	1d3b      	adds	r3, r7, #4
 8012614:	222c      	movs	r2, #44	@ 0x2c
 8012616:	2100      	movs	r1, #0
 8012618:	4618      	mov	r0, r3
 801261a:	f001 f9a9 	bl	8013970 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 801261e:	4b3f      	ldr	r3, [pc, #252]	@ (801271c <MX_TIM8_Init+0x130>)
 8012620:	4a3f      	ldr	r2, [pc, #252]	@ (8012720 <MX_TIM8_Init+0x134>)
 8012622:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8012624:	4b3d      	ldr	r3, [pc, #244]	@ (801271c <MX_TIM8_Init+0x130>)
 8012626:	2200      	movs	r2, #0
 8012628:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 801262a:	4b3c      	ldr	r3, [pc, #240]	@ (801271c <MX_TIM8_Init+0x130>)
 801262c:	2200      	movs	r2, #0
 801262e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9599;
 8012630:	4b3a      	ldr	r3, [pc, #232]	@ (801271c <MX_TIM8_Init+0x130>)
 8012632:	f242 527f 	movw	r2, #9599	@ 0x257f
 8012636:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8012638:	4b38      	ldr	r3, [pc, #224]	@ (801271c <MX_TIM8_Init+0x130>)
 801263a:	2200      	movs	r2, #0
 801263c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 801263e:	4b37      	ldr	r3, [pc, #220]	@ (801271c <MX_TIM8_Init+0x130>)
 8012640:	2200      	movs	r2, #0
 8012642:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8012644:	4b35      	ldr	r3, [pc, #212]	@ (801271c <MX_TIM8_Init+0x130>)
 8012646:	2280      	movs	r2, #128	@ 0x80
 8012648:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 801264a:	4834      	ldr	r0, [pc, #208]	@ (801271c <MX_TIM8_Init+0x130>)
 801264c:	f7f9 ff86 	bl	800c55c <HAL_TIM_PWM_Init>
 8012650:	4603      	mov	r3, r0
 8012652:	2b00      	cmp	r3, #0
 8012654:	d001      	beq.n	801265a <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8012656:	f7ff f8ed 	bl	8011834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801265a:	2300      	movs	r3, #0
 801265c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 801265e:	2300      	movs	r3, #0
 8012660:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012662:	2300      	movs	r3, #0
 8012664:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8012666:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801266a:	4619      	mov	r1, r3
 801266c:	482b      	ldr	r0, [pc, #172]	@ (801271c <MX_TIM8_Init+0x130>)
 801266e:	f7fb f879 	bl	800d764 <HAL_TIMEx_MasterConfigSynchronization>
 8012672:	4603      	mov	r3, r0
 8012674:	2b00      	cmp	r3, #0
 8012676:	d001      	beq.n	801267c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8012678:	f7ff f8dc 	bl	8011834 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801267c:	2360      	movs	r3, #96	@ 0x60
 801267e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8012680:	2300      	movs	r3, #0
 8012682:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8012684:	2300      	movs	r3, #0
 8012686:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8012688:	2300      	movs	r3, #0
 801268a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801268c:	2300      	movs	r3, #0
 801268e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8012690:	2300      	movs	r3, #0
 8012692:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8012694:	2300      	movs	r3, #0
 8012696:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8012698:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801269c:	2200      	movs	r2, #0
 801269e:	4619      	mov	r1, r3
 80126a0:	481e      	ldr	r0, [pc, #120]	@ (801271c <MX_TIM8_Init+0x130>)
 80126a2:	f7fa f957 	bl	800c954 <HAL_TIM_PWM_ConfigChannel>
 80126a6:	4603      	mov	r3, r0
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d001      	beq.n	80126b0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80126ac:	f7ff f8c2 	bl	8011834 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80126b0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80126b4:	2204      	movs	r2, #4
 80126b6:	4619      	mov	r1, r3
 80126b8:	4818      	ldr	r0, [pc, #96]	@ (801271c <MX_TIM8_Init+0x130>)
 80126ba:	f7fa f94b 	bl	800c954 <HAL_TIM_PWM_ConfigChannel>
 80126be:	4603      	mov	r3, r0
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d001      	beq.n	80126c8 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 80126c4:	f7ff f8b6 	bl	8011834 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80126c8:	2300      	movs	r3, #0
 80126ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80126cc:	2300      	movs	r3, #0
 80126ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80126d0:	2300      	movs	r3, #0
 80126d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80126d4:	2300      	movs	r3, #0
 80126d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80126d8:	2300      	movs	r3, #0
 80126da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80126dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80126e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80126e2:	2300      	movs	r3, #0
 80126e4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80126e6:	2300      	movs	r3, #0
 80126e8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80126ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80126ee:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80126f0:	2300      	movs	r3, #0
 80126f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 80126f4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80126f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80126fa:	1d3b      	adds	r3, r7, #4
 80126fc:	4619      	mov	r1, r3
 80126fe:	4807      	ldr	r0, [pc, #28]	@ (801271c <MX_TIM8_Init+0x130>)
 8012700:	f7fb f8be 	bl	800d880 <HAL_TIMEx_ConfigBreakDeadTime>
 8012704:	4603      	mov	r3, r0
 8012706:	2b00      	cmp	r3, #0
 8012708:	d001      	beq.n	801270e <MX_TIM8_Init+0x122>
  {
    Error_Handler();
 801270a:	f7ff f893 	bl	8011834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 801270e:	4803      	ldr	r0, [pc, #12]	@ (801271c <MX_TIM8_Init+0x130>)
 8012710:	f000 f8f6 	bl	8012900 <HAL_TIM_MspPostInit>

}
 8012714:	bf00      	nop
 8012716:	3758      	adds	r7, #88	@ 0x58
 8012718:	46bd      	mov	sp, r7
 801271a:	bd80      	pop	{r7, pc}
 801271c:	24001080 	.word	0x24001080
 8012720:	40010400 	.word	0x40010400

08012724 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8012724:	b580      	push	{r7, lr}
 8012726:	b096      	sub	sp, #88	@ 0x58
 8012728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801272a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801272e:	2200      	movs	r2, #0
 8012730:	601a      	str	r2, [r3, #0]
 8012732:	605a      	str	r2, [r3, #4]
 8012734:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8012736:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801273a:	2200      	movs	r2, #0
 801273c:	601a      	str	r2, [r3, #0]
 801273e:	605a      	str	r2, [r3, #4]
 8012740:	609a      	str	r2, [r3, #8]
 8012742:	60da      	str	r2, [r3, #12]
 8012744:	611a      	str	r2, [r3, #16]
 8012746:	615a      	str	r2, [r3, #20]
 8012748:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 801274a:	1d3b      	adds	r3, r7, #4
 801274c:	222c      	movs	r2, #44	@ 0x2c
 801274e:	2100      	movs	r1, #0
 8012750:	4618      	mov	r0, r3
 8012752:	f001 f90d 	bl	8013970 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8012756:	4b3a      	ldr	r3, [pc, #232]	@ (8012840 <MX_TIM15_Init+0x11c>)
 8012758:	4a3a      	ldr	r2, [pc, #232]	@ (8012844 <MX_TIM15_Init+0x120>)
 801275a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 249;
 801275c:	4b38      	ldr	r3, [pc, #224]	@ (8012840 <MX_TIM15_Init+0x11c>)
 801275e:	22f9      	movs	r2, #249	@ 0xf9
 8012760:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012762:	4b37      	ldr	r3, [pc, #220]	@ (8012840 <MX_TIM15_Init+0x11c>)
 8012764:	2200      	movs	r2, #0
 8012766:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 319;
 8012768:	4b35      	ldr	r3, [pc, #212]	@ (8012840 <MX_TIM15_Init+0x11c>)
 801276a:	f240 123f 	movw	r2, #319	@ 0x13f
 801276e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8012770:	4b33      	ldr	r3, [pc, #204]	@ (8012840 <MX_TIM15_Init+0x11c>)
 8012772:	2200      	movs	r2, #0
 8012774:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8012776:	4b32      	ldr	r3, [pc, #200]	@ (8012840 <MX_TIM15_Init+0x11c>)
 8012778:	2200      	movs	r2, #0
 801277a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801277c:	4b30      	ldr	r3, [pc, #192]	@ (8012840 <MX_TIM15_Init+0x11c>)
 801277e:	2200      	movs	r2, #0
 8012780:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8012782:	482f      	ldr	r0, [pc, #188]	@ (8012840 <MX_TIM15_Init+0x11c>)
 8012784:	f7f9 feea 	bl	800c55c <HAL_TIM_PWM_Init>
 8012788:	4603      	mov	r3, r0
 801278a:	2b00      	cmp	r3, #0
 801278c:	d001      	beq.n	8012792 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 801278e:	f7ff f851 	bl	8011834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012792:	2300      	movs	r3, #0
 8012794:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012796:	2300      	movs	r3, #0
 8012798:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 801279a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801279e:	4619      	mov	r1, r3
 80127a0:	4827      	ldr	r0, [pc, #156]	@ (8012840 <MX_TIM15_Init+0x11c>)
 80127a2:	f7fa ffdf 	bl	800d764 <HAL_TIMEx_MasterConfigSynchronization>
 80127a6:	4603      	mov	r3, r0
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d001      	beq.n	80127b0 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80127ac:	f7ff f842 	bl	8011834 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80127b0:	2360      	movs	r3, #96	@ 0x60
 80127b2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80127b4:	2300      	movs	r3, #0
 80127b6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80127b8:	2300      	movs	r3, #0
 80127ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80127bc:	2300      	movs	r3, #0
 80127be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80127c0:	2300      	movs	r3, #0
 80127c2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80127c4:	2300      	movs	r3, #0
 80127c6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80127c8:	2300      	movs	r3, #0
 80127ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80127cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80127d0:	2200      	movs	r2, #0
 80127d2:	4619      	mov	r1, r3
 80127d4:	481a      	ldr	r0, [pc, #104]	@ (8012840 <MX_TIM15_Init+0x11c>)
 80127d6:	f7fa f8bd 	bl	800c954 <HAL_TIM_PWM_ConfigChannel>
 80127da:	4603      	mov	r3, r0
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d001      	beq.n	80127e4 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80127e0:	f7ff f828 	bl	8011834 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80127e4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80127e8:	2204      	movs	r2, #4
 80127ea:	4619      	mov	r1, r3
 80127ec:	4814      	ldr	r0, [pc, #80]	@ (8012840 <MX_TIM15_Init+0x11c>)
 80127ee:	f7fa f8b1 	bl	800c954 <HAL_TIM_PWM_ConfigChannel>
 80127f2:	4603      	mov	r3, r0
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d001      	beq.n	80127fc <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 80127f8:	f7ff f81c 	bl	8011834 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80127fc:	2300      	movs	r3, #0
 80127fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8012800:	2300      	movs	r3, #0
 8012802:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8012804:	2300      	movs	r3, #0
 8012806:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8012808:	2300      	movs	r3, #0
 801280a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 801280c:	2300      	movs	r3, #0
 801280e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8012810:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8012814:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8012816:	2300      	movs	r3, #0
 8012818:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 801281a:	2300      	movs	r3, #0
 801281c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 801281e:	1d3b      	adds	r3, r7, #4
 8012820:	4619      	mov	r1, r3
 8012822:	4807      	ldr	r0, [pc, #28]	@ (8012840 <MX_TIM15_Init+0x11c>)
 8012824:	f7fb f82c 	bl	800d880 <HAL_TIMEx_ConfigBreakDeadTime>
 8012828:	4603      	mov	r3, r0
 801282a:	2b00      	cmp	r3, #0
 801282c:	d001      	beq.n	8012832 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 801282e:	f7ff f801 	bl	8011834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8012832:	4803      	ldr	r0, [pc, #12]	@ (8012840 <MX_TIM15_Init+0x11c>)
 8012834:	f000 f864 	bl	8012900 <HAL_TIM_MspPostInit>

}
 8012838:	bf00      	nop
 801283a:	3758      	adds	r7, #88	@ 0x58
 801283c:	46bd      	mov	sp, r7
 801283e:	bd80      	pop	{r7, pc}
 8012840:	240010cc 	.word	0x240010cc
 8012844:	40014000 	.word	0x40014000

08012848 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8012848:	b480      	push	{r7}
 801284a:	b085      	sub	sp, #20
 801284c:	af00      	add	r7, sp, #0
 801284e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	4a0b      	ldr	r2, [pc, #44]	@ (8012884 <HAL_TIM_Base_MspInit+0x3c>)
 8012856:	4293      	cmp	r3, r2
 8012858:	d10e      	bne.n	8012878 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 801285a:	4b0b      	ldr	r3, [pc, #44]	@ (8012888 <HAL_TIM_Base_MspInit+0x40>)
 801285c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012860:	4a09      	ldr	r2, [pc, #36]	@ (8012888 <HAL_TIM_Base_MspInit+0x40>)
 8012862:	f043 0301 	orr.w	r3, r3, #1
 8012866:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 801286a:	4b07      	ldr	r3, [pc, #28]	@ (8012888 <HAL_TIM_Base_MspInit+0x40>)
 801286c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012870:	f003 0301 	and.w	r3, r3, #1
 8012874:	60fb      	str	r3, [r7, #12]
 8012876:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8012878:	bf00      	nop
 801287a:	3714      	adds	r7, #20
 801287c:	46bd      	mov	sp, r7
 801287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012882:	4770      	bx	lr
 8012884:	40010000 	.word	0x40010000
 8012888:	58024400 	.word	0x58024400

0801288c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 801288c:	b480      	push	{r7}
 801288e:	b085      	sub	sp, #20
 8012890:	af00      	add	r7, sp, #0
 8012892:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	4a16      	ldr	r2, [pc, #88]	@ (80128f4 <HAL_TIM_PWM_MspInit+0x68>)
 801289a:	4293      	cmp	r3, r2
 801289c:	d10f      	bne.n	80128be <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 801289e:	4b16      	ldr	r3, [pc, #88]	@ (80128f8 <HAL_TIM_PWM_MspInit+0x6c>)
 80128a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80128a4:	4a14      	ldr	r2, [pc, #80]	@ (80128f8 <HAL_TIM_PWM_MspInit+0x6c>)
 80128a6:	f043 0302 	orr.w	r3, r3, #2
 80128aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80128ae:	4b12      	ldr	r3, [pc, #72]	@ (80128f8 <HAL_TIM_PWM_MspInit+0x6c>)
 80128b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80128b4:	f003 0302 	and.w	r3, r3, #2
 80128b8:	60fb      	str	r3, [r7, #12]
 80128ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80128bc:	e013      	b.n	80128e6 <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM15)
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	4a0e      	ldr	r2, [pc, #56]	@ (80128fc <HAL_TIM_PWM_MspInit+0x70>)
 80128c4:	4293      	cmp	r3, r2
 80128c6:	d10e      	bne.n	80128e6 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80128c8:	4b0b      	ldr	r3, [pc, #44]	@ (80128f8 <HAL_TIM_PWM_MspInit+0x6c>)
 80128ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80128ce:	4a0a      	ldr	r2, [pc, #40]	@ (80128f8 <HAL_TIM_PWM_MspInit+0x6c>)
 80128d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80128d4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80128d8:	4b07      	ldr	r3, [pc, #28]	@ (80128f8 <HAL_TIM_PWM_MspInit+0x6c>)
 80128da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80128de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80128e2:	60bb      	str	r3, [r7, #8]
 80128e4:	68bb      	ldr	r3, [r7, #8]
}
 80128e6:	bf00      	nop
 80128e8:	3714      	adds	r7, #20
 80128ea:	46bd      	mov	sp, r7
 80128ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f0:	4770      	bx	lr
 80128f2:	bf00      	nop
 80128f4:	40010400 	.word	0x40010400
 80128f8:	58024400 	.word	0x58024400
 80128fc:	40014000 	.word	0x40014000

08012900 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8012900:	b580      	push	{r7, lr}
 8012902:	b08a      	sub	sp, #40	@ 0x28
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012908:	f107 0314 	add.w	r3, r7, #20
 801290c:	2200      	movs	r2, #0
 801290e:	601a      	str	r2, [r3, #0]
 8012910:	605a      	str	r2, [r3, #4]
 8012912:	609a      	str	r2, [r3, #8]
 8012914:	60da      	str	r2, [r3, #12]
 8012916:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	4a38      	ldr	r2, [pc, #224]	@ (8012a00 <HAL_TIM_MspPostInit+0x100>)
 801291e:	4293      	cmp	r3, r2
 8012920:	d120      	bne.n	8012964 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8012922:	4b38      	ldr	r3, [pc, #224]	@ (8012a04 <HAL_TIM_MspPostInit+0x104>)
 8012924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012928:	4a36      	ldr	r2, [pc, #216]	@ (8012a04 <HAL_TIM_MspPostInit+0x104>)
 801292a:	f043 0310 	orr.w	r3, r3, #16
 801292e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8012932:	4b34      	ldr	r3, [pc, #208]	@ (8012a04 <HAL_TIM_MspPostInit+0x104>)
 8012934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012938:	f003 0310 	and.w	r3, r3, #16
 801293c:	613b      	str	r3, [r7, #16]
 801293e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE10     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8012940:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012946:	2302      	movs	r3, #2
 8012948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801294a:	2300      	movs	r3, #0
 801294c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801294e:	2300      	movs	r3, #0
 8012950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8012952:	2301      	movs	r3, #1
 8012954:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8012956:	f107 0314 	add.w	r3, r7, #20
 801295a:	4619      	mov	r1, r3
 801295c:	482a      	ldr	r0, [pc, #168]	@ (8012a08 <HAL_TIM_MspPostInit+0x108>)
 801295e:	f7f1 ff5b 	bl	8004818 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8012962:	e048      	b.n	80129f6 <HAL_TIM_MspPostInit+0xf6>
  else if(timHandle->Instance==TIM8)
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	4a28      	ldr	r2, [pc, #160]	@ (8012a0c <HAL_TIM_MspPostInit+0x10c>)
 801296a:	4293      	cmp	r3, r2
 801296c:	d11f      	bne.n	80129ae <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801296e:	4b25      	ldr	r3, [pc, #148]	@ (8012a04 <HAL_TIM_MspPostInit+0x104>)
 8012970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012974:	4a23      	ldr	r2, [pc, #140]	@ (8012a04 <HAL_TIM_MspPostInit+0x104>)
 8012976:	f043 0304 	orr.w	r3, r3, #4
 801297a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801297e:	4b21      	ldr	r3, [pc, #132]	@ (8012a04 <HAL_TIM_MspPostInit+0x104>)
 8012980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012984:	f003 0304 	and.w	r3, r3, #4
 8012988:	60fb      	str	r3, [r7, #12]
 801298a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_L_PWM_Pin|Motor_R_PWM_Pin;
 801298c:	23c0      	movs	r3, #192	@ 0xc0
 801298e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012990:	2302      	movs	r3, #2
 8012992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012994:	2300      	movs	r3, #0
 8012996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012998:	2300      	movs	r3, #0
 801299a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 801299c:	2303      	movs	r3, #3
 801299e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80129a0:	f107 0314 	add.w	r3, r7, #20
 80129a4:	4619      	mov	r1, r3
 80129a6:	481a      	ldr	r0, [pc, #104]	@ (8012a10 <HAL_TIM_MspPostInit+0x110>)
 80129a8:	f7f1 ff36 	bl	8004818 <HAL_GPIO_Init>
}
 80129ac:	e023      	b.n	80129f6 <HAL_TIM_MspPostInit+0xf6>
  else if(timHandle->Instance==TIM15)
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	4a18      	ldr	r2, [pc, #96]	@ (8012a14 <HAL_TIM_MspPostInit+0x114>)
 80129b4:	4293      	cmp	r3, r2
 80129b6:	d11e      	bne.n	80129f6 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80129b8:	4b12      	ldr	r3, [pc, #72]	@ (8012a04 <HAL_TIM_MspPostInit+0x104>)
 80129ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80129be:	4a11      	ldr	r2, [pc, #68]	@ (8012a04 <HAL_TIM_MspPostInit+0x104>)
 80129c0:	f043 0310 	orr.w	r3, r3, #16
 80129c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80129c8:	4b0e      	ldr	r3, [pc, #56]	@ (8012a04 <HAL_TIM_MspPostInit+0x104>)
 80129ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80129ce:	f003 0310 	and.w	r3, r3, #16
 80129d2:	60bb      	str	r3, [r7, #8]
 80129d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80129d6:	2360      	movs	r3, #96	@ 0x60
 80129d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80129da:	2302      	movs	r3, #2
 80129dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80129de:	2300      	movs	r3, #0
 80129e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80129e2:	2300      	movs	r3, #0
 80129e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80129e6:	2304      	movs	r3, #4
 80129e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80129ea:	f107 0314 	add.w	r3, r7, #20
 80129ee:	4619      	mov	r1, r3
 80129f0:	4805      	ldr	r0, [pc, #20]	@ (8012a08 <HAL_TIM_MspPostInit+0x108>)
 80129f2:	f7f1 ff11 	bl	8004818 <HAL_GPIO_Init>
}
 80129f6:	bf00      	nop
 80129f8:	3728      	adds	r7, #40	@ 0x28
 80129fa:	46bd      	mov	sp, r7
 80129fc:	bd80      	pop	{r7, pc}
 80129fe:	bf00      	nop
 8012a00:	40010000 	.word	0x40010000
 8012a04:	58024400 	.word	0x58024400
 8012a08:	58021000 	.word	0x58021000
 8012a0c:	40010400 	.word	0x40010400
 8012a10:	58020800 	.word	0x58020800
 8012a14:	40014000 	.word	0x40014000

08012a18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8012a18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8012a50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8012a1c:	f7ff fcd8 	bl	80123d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8012a20:	480c      	ldr	r0, [pc, #48]	@ (8012a54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8012a22:	490d      	ldr	r1, [pc, #52]	@ (8012a58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8012a24:	4a0d      	ldr	r2, [pc, #52]	@ (8012a5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8012a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8012a28:	e002      	b.n	8012a30 <LoopCopyDataInit>

08012a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8012a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8012a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8012a2e:	3304      	adds	r3, #4

08012a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8012a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8012a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8012a34:	d3f9      	bcc.n	8012a2a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8012a36:	4a0a      	ldr	r2, [pc, #40]	@ (8012a60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8012a38:	4c0a      	ldr	r4, [pc, #40]	@ (8012a64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8012a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8012a3c:	e001      	b.n	8012a42 <LoopFillZerobss>

08012a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8012a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8012a40:	3204      	adds	r2, #4

08012a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8012a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8012a44:	d3fb      	bcc.n	8012a3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8012a46:	f000 ffeb 	bl	8013a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8012a4a:	f7fe fdcb 	bl	80115e4 <main>
  bx  lr
 8012a4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8012a50:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8012a54:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8012a58:	24000558 	.word	0x24000558
  ldr r2, =_sidata
 8012a5c:	0801e4fc 	.word	0x0801e4fc
  ldr r2, =_sbss
 8012a60:	24000558 	.word	0x24000558
  ldr r4, =_ebss
 8012a64:	24001264 	.word	0x24001264

08012a68 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8012a68:	e7fe      	b.n	8012a68 <ADC3_IRQHandler>

08012a6a <__cvt>:
 8012a6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a6c:	ed2d 8b02 	vpush	{d8}
 8012a70:	eeb0 8b40 	vmov.f64	d8, d0
 8012a74:	b085      	sub	sp, #20
 8012a76:	4617      	mov	r7, r2
 8012a78:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8012a7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012a7c:	ee18 2a90 	vmov	r2, s17
 8012a80:	f025 0520 	bic.w	r5, r5, #32
 8012a84:	2a00      	cmp	r2, #0
 8012a86:	bfb6      	itet	lt
 8012a88:	222d      	movlt	r2, #45	@ 0x2d
 8012a8a:	2200      	movge	r2, #0
 8012a8c:	eeb1 8b40 	vneglt.f64	d8, d0
 8012a90:	2d46      	cmp	r5, #70	@ 0x46
 8012a92:	460c      	mov	r4, r1
 8012a94:	701a      	strb	r2, [r3, #0]
 8012a96:	d004      	beq.n	8012aa2 <__cvt+0x38>
 8012a98:	2d45      	cmp	r5, #69	@ 0x45
 8012a9a:	d100      	bne.n	8012a9e <__cvt+0x34>
 8012a9c:	3401      	adds	r4, #1
 8012a9e:	2102      	movs	r1, #2
 8012aa0:	e000      	b.n	8012aa4 <__cvt+0x3a>
 8012aa2:	2103      	movs	r1, #3
 8012aa4:	ab03      	add	r3, sp, #12
 8012aa6:	9301      	str	r3, [sp, #4]
 8012aa8:	ab02      	add	r3, sp, #8
 8012aaa:	9300      	str	r3, [sp, #0]
 8012aac:	4622      	mov	r2, r4
 8012aae:	4633      	mov	r3, r6
 8012ab0:	eeb0 0b48 	vmov.f64	d0, d8
 8012ab4:	f001 f86c 	bl	8013b90 <_dtoa_r>
 8012ab8:	2d47      	cmp	r5, #71	@ 0x47
 8012aba:	d114      	bne.n	8012ae6 <__cvt+0x7c>
 8012abc:	07fb      	lsls	r3, r7, #31
 8012abe:	d50a      	bpl.n	8012ad6 <__cvt+0x6c>
 8012ac0:	1902      	adds	r2, r0, r4
 8012ac2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aca:	bf08      	it	eq
 8012acc:	9203      	streq	r2, [sp, #12]
 8012ace:	2130      	movs	r1, #48	@ 0x30
 8012ad0:	9b03      	ldr	r3, [sp, #12]
 8012ad2:	4293      	cmp	r3, r2
 8012ad4:	d319      	bcc.n	8012b0a <__cvt+0xa0>
 8012ad6:	9b03      	ldr	r3, [sp, #12]
 8012ad8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012ada:	1a1b      	subs	r3, r3, r0
 8012adc:	6013      	str	r3, [r2, #0]
 8012ade:	b005      	add	sp, #20
 8012ae0:	ecbd 8b02 	vpop	{d8}
 8012ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ae6:	2d46      	cmp	r5, #70	@ 0x46
 8012ae8:	eb00 0204 	add.w	r2, r0, r4
 8012aec:	d1e9      	bne.n	8012ac2 <__cvt+0x58>
 8012aee:	7803      	ldrb	r3, [r0, #0]
 8012af0:	2b30      	cmp	r3, #48	@ 0x30
 8012af2:	d107      	bne.n	8012b04 <__cvt+0x9a>
 8012af4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012afc:	bf1c      	itt	ne
 8012afe:	f1c4 0401 	rsbne	r4, r4, #1
 8012b02:	6034      	strne	r4, [r6, #0]
 8012b04:	6833      	ldr	r3, [r6, #0]
 8012b06:	441a      	add	r2, r3
 8012b08:	e7db      	b.n	8012ac2 <__cvt+0x58>
 8012b0a:	1c5c      	adds	r4, r3, #1
 8012b0c:	9403      	str	r4, [sp, #12]
 8012b0e:	7019      	strb	r1, [r3, #0]
 8012b10:	e7de      	b.n	8012ad0 <__cvt+0x66>

08012b12 <__exponent>:
 8012b12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012b14:	2900      	cmp	r1, #0
 8012b16:	bfba      	itte	lt
 8012b18:	4249      	neglt	r1, r1
 8012b1a:	232d      	movlt	r3, #45	@ 0x2d
 8012b1c:	232b      	movge	r3, #43	@ 0x2b
 8012b1e:	2909      	cmp	r1, #9
 8012b20:	7002      	strb	r2, [r0, #0]
 8012b22:	7043      	strb	r3, [r0, #1]
 8012b24:	dd29      	ble.n	8012b7a <__exponent+0x68>
 8012b26:	f10d 0307 	add.w	r3, sp, #7
 8012b2a:	461d      	mov	r5, r3
 8012b2c:	270a      	movs	r7, #10
 8012b2e:	461a      	mov	r2, r3
 8012b30:	fbb1 f6f7 	udiv	r6, r1, r7
 8012b34:	fb07 1416 	mls	r4, r7, r6, r1
 8012b38:	3430      	adds	r4, #48	@ 0x30
 8012b3a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012b3e:	460c      	mov	r4, r1
 8012b40:	2c63      	cmp	r4, #99	@ 0x63
 8012b42:	f103 33ff 	add.w	r3, r3, #4294967295
 8012b46:	4631      	mov	r1, r6
 8012b48:	dcf1      	bgt.n	8012b2e <__exponent+0x1c>
 8012b4a:	3130      	adds	r1, #48	@ 0x30
 8012b4c:	1e94      	subs	r4, r2, #2
 8012b4e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012b52:	1c41      	adds	r1, r0, #1
 8012b54:	4623      	mov	r3, r4
 8012b56:	42ab      	cmp	r3, r5
 8012b58:	d30a      	bcc.n	8012b70 <__exponent+0x5e>
 8012b5a:	f10d 0309 	add.w	r3, sp, #9
 8012b5e:	1a9b      	subs	r3, r3, r2
 8012b60:	42ac      	cmp	r4, r5
 8012b62:	bf88      	it	hi
 8012b64:	2300      	movhi	r3, #0
 8012b66:	3302      	adds	r3, #2
 8012b68:	4403      	add	r3, r0
 8012b6a:	1a18      	subs	r0, r3, r0
 8012b6c:	b003      	add	sp, #12
 8012b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b70:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012b74:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012b78:	e7ed      	b.n	8012b56 <__exponent+0x44>
 8012b7a:	2330      	movs	r3, #48	@ 0x30
 8012b7c:	3130      	adds	r1, #48	@ 0x30
 8012b7e:	7083      	strb	r3, [r0, #2]
 8012b80:	70c1      	strb	r1, [r0, #3]
 8012b82:	1d03      	adds	r3, r0, #4
 8012b84:	e7f1      	b.n	8012b6a <__exponent+0x58>
	...

08012b88 <_printf_float>:
 8012b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b8c:	b08d      	sub	sp, #52	@ 0x34
 8012b8e:	460c      	mov	r4, r1
 8012b90:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8012b94:	4616      	mov	r6, r2
 8012b96:	461f      	mov	r7, r3
 8012b98:	4605      	mov	r5, r0
 8012b9a:	f000 fef1 	bl	8013980 <_localeconv_r>
 8012b9e:	f8d0 b000 	ldr.w	fp, [r0]
 8012ba2:	4658      	mov	r0, fp
 8012ba4:	f7ed fbec 	bl	8000380 <strlen>
 8012ba8:	2300      	movs	r3, #0
 8012baa:	930a      	str	r3, [sp, #40]	@ 0x28
 8012bac:	f8d8 3000 	ldr.w	r3, [r8]
 8012bb0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8012bb4:	6822      	ldr	r2, [r4, #0]
 8012bb6:	9005      	str	r0, [sp, #20]
 8012bb8:	3307      	adds	r3, #7
 8012bba:	f023 0307 	bic.w	r3, r3, #7
 8012bbe:	f103 0108 	add.w	r1, r3, #8
 8012bc2:	f8c8 1000 	str.w	r1, [r8]
 8012bc6:	ed93 0b00 	vldr	d0, [r3]
 8012bca:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8012e28 <_printf_float+0x2a0>
 8012bce:	eeb0 7bc0 	vabs.f64	d7, d0
 8012bd2:	eeb4 7b46 	vcmp.f64	d7, d6
 8012bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bda:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8012bde:	dd24      	ble.n	8012c2a <_printf_float+0xa2>
 8012be0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012be8:	d502      	bpl.n	8012bf0 <_printf_float+0x68>
 8012bea:	232d      	movs	r3, #45	@ 0x2d
 8012bec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012bf0:	498f      	ldr	r1, [pc, #572]	@ (8012e30 <_printf_float+0x2a8>)
 8012bf2:	4b90      	ldr	r3, [pc, #576]	@ (8012e34 <_printf_float+0x2ac>)
 8012bf4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8012bf8:	bf8c      	ite	hi
 8012bfa:	4688      	movhi	r8, r1
 8012bfc:	4698      	movls	r8, r3
 8012bfe:	f022 0204 	bic.w	r2, r2, #4
 8012c02:	2303      	movs	r3, #3
 8012c04:	6123      	str	r3, [r4, #16]
 8012c06:	6022      	str	r2, [r4, #0]
 8012c08:	f04f 0a00 	mov.w	sl, #0
 8012c0c:	9700      	str	r7, [sp, #0]
 8012c0e:	4633      	mov	r3, r6
 8012c10:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012c12:	4621      	mov	r1, r4
 8012c14:	4628      	mov	r0, r5
 8012c16:	f000 f9d1 	bl	8012fbc <_printf_common>
 8012c1a:	3001      	adds	r0, #1
 8012c1c:	f040 8089 	bne.w	8012d32 <_printf_float+0x1aa>
 8012c20:	f04f 30ff 	mov.w	r0, #4294967295
 8012c24:	b00d      	add	sp, #52	@ 0x34
 8012c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c2a:	eeb4 0b40 	vcmp.f64	d0, d0
 8012c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c32:	d709      	bvc.n	8012c48 <_printf_float+0xc0>
 8012c34:	ee10 3a90 	vmov	r3, s1
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	bfbc      	itt	lt
 8012c3c:	232d      	movlt	r3, #45	@ 0x2d
 8012c3e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012c42:	497d      	ldr	r1, [pc, #500]	@ (8012e38 <_printf_float+0x2b0>)
 8012c44:	4b7d      	ldr	r3, [pc, #500]	@ (8012e3c <_printf_float+0x2b4>)
 8012c46:	e7d5      	b.n	8012bf4 <_printf_float+0x6c>
 8012c48:	6863      	ldr	r3, [r4, #4]
 8012c4a:	1c59      	adds	r1, r3, #1
 8012c4c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8012c50:	d139      	bne.n	8012cc6 <_printf_float+0x13e>
 8012c52:	2306      	movs	r3, #6
 8012c54:	6063      	str	r3, [r4, #4]
 8012c56:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	6022      	str	r2, [r4, #0]
 8012c5e:	9303      	str	r3, [sp, #12]
 8012c60:	ab0a      	add	r3, sp, #40	@ 0x28
 8012c62:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8012c66:	ab09      	add	r3, sp, #36	@ 0x24
 8012c68:	9300      	str	r3, [sp, #0]
 8012c6a:	6861      	ldr	r1, [r4, #4]
 8012c6c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012c70:	4628      	mov	r0, r5
 8012c72:	f7ff fefa 	bl	8012a6a <__cvt>
 8012c76:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012c7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012c7c:	4680      	mov	r8, r0
 8012c7e:	d129      	bne.n	8012cd4 <_printf_float+0x14c>
 8012c80:	1cc8      	adds	r0, r1, #3
 8012c82:	db02      	blt.n	8012c8a <_printf_float+0x102>
 8012c84:	6863      	ldr	r3, [r4, #4]
 8012c86:	4299      	cmp	r1, r3
 8012c88:	dd41      	ble.n	8012d0e <_printf_float+0x186>
 8012c8a:	f1a9 0902 	sub.w	r9, r9, #2
 8012c8e:	fa5f f989 	uxtb.w	r9, r9
 8012c92:	3901      	subs	r1, #1
 8012c94:	464a      	mov	r2, r9
 8012c96:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012c9a:	9109      	str	r1, [sp, #36]	@ 0x24
 8012c9c:	f7ff ff39 	bl	8012b12 <__exponent>
 8012ca0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012ca2:	1813      	adds	r3, r2, r0
 8012ca4:	2a01      	cmp	r2, #1
 8012ca6:	4682      	mov	sl, r0
 8012ca8:	6123      	str	r3, [r4, #16]
 8012caa:	dc02      	bgt.n	8012cb2 <_printf_float+0x12a>
 8012cac:	6822      	ldr	r2, [r4, #0]
 8012cae:	07d2      	lsls	r2, r2, #31
 8012cb0:	d501      	bpl.n	8012cb6 <_printf_float+0x12e>
 8012cb2:	3301      	adds	r3, #1
 8012cb4:	6123      	str	r3, [r4, #16]
 8012cb6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d0a6      	beq.n	8012c0c <_printf_float+0x84>
 8012cbe:	232d      	movs	r3, #45	@ 0x2d
 8012cc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012cc4:	e7a2      	b.n	8012c0c <_printf_float+0x84>
 8012cc6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012cca:	d1c4      	bne.n	8012c56 <_printf_float+0xce>
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d1c2      	bne.n	8012c56 <_printf_float+0xce>
 8012cd0:	2301      	movs	r3, #1
 8012cd2:	e7bf      	b.n	8012c54 <_printf_float+0xcc>
 8012cd4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8012cd8:	d9db      	bls.n	8012c92 <_printf_float+0x10a>
 8012cda:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8012cde:	d118      	bne.n	8012d12 <_printf_float+0x18a>
 8012ce0:	2900      	cmp	r1, #0
 8012ce2:	6863      	ldr	r3, [r4, #4]
 8012ce4:	dd0b      	ble.n	8012cfe <_printf_float+0x176>
 8012ce6:	6121      	str	r1, [r4, #16]
 8012ce8:	b913      	cbnz	r3, 8012cf0 <_printf_float+0x168>
 8012cea:	6822      	ldr	r2, [r4, #0]
 8012cec:	07d0      	lsls	r0, r2, #31
 8012cee:	d502      	bpl.n	8012cf6 <_printf_float+0x16e>
 8012cf0:	3301      	adds	r3, #1
 8012cf2:	440b      	add	r3, r1
 8012cf4:	6123      	str	r3, [r4, #16]
 8012cf6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012cf8:	f04f 0a00 	mov.w	sl, #0
 8012cfc:	e7db      	b.n	8012cb6 <_printf_float+0x12e>
 8012cfe:	b913      	cbnz	r3, 8012d06 <_printf_float+0x17e>
 8012d00:	6822      	ldr	r2, [r4, #0]
 8012d02:	07d2      	lsls	r2, r2, #31
 8012d04:	d501      	bpl.n	8012d0a <_printf_float+0x182>
 8012d06:	3302      	adds	r3, #2
 8012d08:	e7f4      	b.n	8012cf4 <_printf_float+0x16c>
 8012d0a:	2301      	movs	r3, #1
 8012d0c:	e7f2      	b.n	8012cf4 <_printf_float+0x16c>
 8012d0e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8012d12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012d14:	4299      	cmp	r1, r3
 8012d16:	db05      	blt.n	8012d24 <_printf_float+0x19c>
 8012d18:	6823      	ldr	r3, [r4, #0]
 8012d1a:	6121      	str	r1, [r4, #16]
 8012d1c:	07d8      	lsls	r0, r3, #31
 8012d1e:	d5ea      	bpl.n	8012cf6 <_printf_float+0x16e>
 8012d20:	1c4b      	adds	r3, r1, #1
 8012d22:	e7e7      	b.n	8012cf4 <_printf_float+0x16c>
 8012d24:	2900      	cmp	r1, #0
 8012d26:	bfd4      	ite	le
 8012d28:	f1c1 0202 	rsble	r2, r1, #2
 8012d2c:	2201      	movgt	r2, #1
 8012d2e:	4413      	add	r3, r2
 8012d30:	e7e0      	b.n	8012cf4 <_printf_float+0x16c>
 8012d32:	6823      	ldr	r3, [r4, #0]
 8012d34:	055a      	lsls	r2, r3, #21
 8012d36:	d407      	bmi.n	8012d48 <_printf_float+0x1c0>
 8012d38:	6923      	ldr	r3, [r4, #16]
 8012d3a:	4642      	mov	r2, r8
 8012d3c:	4631      	mov	r1, r6
 8012d3e:	4628      	mov	r0, r5
 8012d40:	47b8      	blx	r7
 8012d42:	3001      	adds	r0, #1
 8012d44:	d12a      	bne.n	8012d9c <_printf_float+0x214>
 8012d46:	e76b      	b.n	8012c20 <_printf_float+0x98>
 8012d48:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8012d4c:	f240 80e0 	bls.w	8012f10 <_printf_float+0x388>
 8012d50:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8012d54:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d5c:	d133      	bne.n	8012dc6 <_printf_float+0x23e>
 8012d5e:	4a38      	ldr	r2, [pc, #224]	@ (8012e40 <_printf_float+0x2b8>)
 8012d60:	2301      	movs	r3, #1
 8012d62:	4631      	mov	r1, r6
 8012d64:	4628      	mov	r0, r5
 8012d66:	47b8      	blx	r7
 8012d68:	3001      	adds	r0, #1
 8012d6a:	f43f af59 	beq.w	8012c20 <_printf_float+0x98>
 8012d6e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012d72:	4543      	cmp	r3, r8
 8012d74:	db02      	blt.n	8012d7c <_printf_float+0x1f4>
 8012d76:	6823      	ldr	r3, [r4, #0]
 8012d78:	07d8      	lsls	r0, r3, #31
 8012d7a:	d50f      	bpl.n	8012d9c <_printf_float+0x214>
 8012d7c:	9b05      	ldr	r3, [sp, #20]
 8012d7e:	465a      	mov	r2, fp
 8012d80:	4631      	mov	r1, r6
 8012d82:	4628      	mov	r0, r5
 8012d84:	47b8      	blx	r7
 8012d86:	3001      	adds	r0, #1
 8012d88:	f43f af4a 	beq.w	8012c20 <_printf_float+0x98>
 8012d8c:	f04f 0900 	mov.w	r9, #0
 8012d90:	f108 38ff 	add.w	r8, r8, #4294967295
 8012d94:	f104 0a1a 	add.w	sl, r4, #26
 8012d98:	45c8      	cmp	r8, r9
 8012d9a:	dc09      	bgt.n	8012db0 <_printf_float+0x228>
 8012d9c:	6823      	ldr	r3, [r4, #0]
 8012d9e:	079b      	lsls	r3, r3, #30
 8012da0:	f100 8107 	bmi.w	8012fb2 <_printf_float+0x42a>
 8012da4:	68e0      	ldr	r0, [r4, #12]
 8012da6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012da8:	4298      	cmp	r0, r3
 8012daa:	bfb8      	it	lt
 8012dac:	4618      	movlt	r0, r3
 8012dae:	e739      	b.n	8012c24 <_printf_float+0x9c>
 8012db0:	2301      	movs	r3, #1
 8012db2:	4652      	mov	r2, sl
 8012db4:	4631      	mov	r1, r6
 8012db6:	4628      	mov	r0, r5
 8012db8:	47b8      	blx	r7
 8012dba:	3001      	adds	r0, #1
 8012dbc:	f43f af30 	beq.w	8012c20 <_printf_float+0x98>
 8012dc0:	f109 0901 	add.w	r9, r9, #1
 8012dc4:	e7e8      	b.n	8012d98 <_printf_float+0x210>
 8012dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	dc3b      	bgt.n	8012e44 <_printf_float+0x2bc>
 8012dcc:	4a1c      	ldr	r2, [pc, #112]	@ (8012e40 <_printf_float+0x2b8>)
 8012dce:	2301      	movs	r3, #1
 8012dd0:	4631      	mov	r1, r6
 8012dd2:	4628      	mov	r0, r5
 8012dd4:	47b8      	blx	r7
 8012dd6:	3001      	adds	r0, #1
 8012dd8:	f43f af22 	beq.w	8012c20 <_printf_float+0x98>
 8012ddc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012de0:	ea59 0303 	orrs.w	r3, r9, r3
 8012de4:	d102      	bne.n	8012dec <_printf_float+0x264>
 8012de6:	6823      	ldr	r3, [r4, #0]
 8012de8:	07d9      	lsls	r1, r3, #31
 8012dea:	d5d7      	bpl.n	8012d9c <_printf_float+0x214>
 8012dec:	9b05      	ldr	r3, [sp, #20]
 8012dee:	465a      	mov	r2, fp
 8012df0:	4631      	mov	r1, r6
 8012df2:	4628      	mov	r0, r5
 8012df4:	47b8      	blx	r7
 8012df6:	3001      	adds	r0, #1
 8012df8:	f43f af12 	beq.w	8012c20 <_printf_float+0x98>
 8012dfc:	f04f 0a00 	mov.w	sl, #0
 8012e00:	f104 0b1a 	add.w	fp, r4, #26
 8012e04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e06:	425b      	negs	r3, r3
 8012e08:	4553      	cmp	r3, sl
 8012e0a:	dc01      	bgt.n	8012e10 <_printf_float+0x288>
 8012e0c:	464b      	mov	r3, r9
 8012e0e:	e794      	b.n	8012d3a <_printf_float+0x1b2>
 8012e10:	2301      	movs	r3, #1
 8012e12:	465a      	mov	r2, fp
 8012e14:	4631      	mov	r1, r6
 8012e16:	4628      	mov	r0, r5
 8012e18:	47b8      	blx	r7
 8012e1a:	3001      	adds	r0, #1
 8012e1c:	f43f af00 	beq.w	8012c20 <_printf_float+0x98>
 8012e20:	f10a 0a01 	add.w	sl, sl, #1
 8012e24:	e7ee      	b.n	8012e04 <_printf_float+0x27c>
 8012e26:	bf00      	nop
 8012e28:	ffffffff 	.word	0xffffffff
 8012e2c:	7fefffff 	.word	0x7fefffff
 8012e30:	0801e0c8 	.word	0x0801e0c8
 8012e34:	0801e0c4 	.word	0x0801e0c4
 8012e38:	0801e0d0 	.word	0x0801e0d0
 8012e3c:	0801e0cc 	.word	0x0801e0cc
 8012e40:	0801e0d4 	.word	0x0801e0d4
 8012e44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012e46:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012e4a:	4553      	cmp	r3, sl
 8012e4c:	bfa8      	it	ge
 8012e4e:	4653      	movge	r3, sl
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	4699      	mov	r9, r3
 8012e54:	dc37      	bgt.n	8012ec6 <_printf_float+0x33e>
 8012e56:	2300      	movs	r3, #0
 8012e58:	9307      	str	r3, [sp, #28]
 8012e5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012e5e:	f104 021a 	add.w	r2, r4, #26
 8012e62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012e64:	9907      	ldr	r1, [sp, #28]
 8012e66:	9306      	str	r3, [sp, #24]
 8012e68:	eba3 0309 	sub.w	r3, r3, r9
 8012e6c:	428b      	cmp	r3, r1
 8012e6e:	dc31      	bgt.n	8012ed4 <_printf_float+0x34c>
 8012e70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e72:	459a      	cmp	sl, r3
 8012e74:	dc3b      	bgt.n	8012eee <_printf_float+0x366>
 8012e76:	6823      	ldr	r3, [r4, #0]
 8012e78:	07da      	lsls	r2, r3, #31
 8012e7a:	d438      	bmi.n	8012eee <_printf_float+0x366>
 8012e7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e7e:	ebaa 0903 	sub.w	r9, sl, r3
 8012e82:	9b06      	ldr	r3, [sp, #24]
 8012e84:	ebaa 0303 	sub.w	r3, sl, r3
 8012e88:	4599      	cmp	r9, r3
 8012e8a:	bfa8      	it	ge
 8012e8c:	4699      	movge	r9, r3
 8012e8e:	f1b9 0f00 	cmp.w	r9, #0
 8012e92:	dc34      	bgt.n	8012efe <_printf_float+0x376>
 8012e94:	f04f 0800 	mov.w	r8, #0
 8012e98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012e9c:	f104 0b1a 	add.w	fp, r4, #26
 8012ea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ea2:	ebaa 0303 	sub.w	r3, sl, r3
 8012ea6:	eba3 0309 	sub.w	r3, r3, r9
 8012eaa:	4543      	cmp	r3, r8
 8012eac:	f77f af76 	ble.w	8012d9c <_printf_float+0x214>
 8012eb0:	2301      	movs	r3, #1
 8012eb2:	465a      	mov	r2, fp
 8012eb4:	4631      	mov	r1, r6
 8012eb6:	4628      	mov	r0, r5
 8012eb8:	47b8      	blx	r7
 8012eba:	3001      	adds	r0, #1
 8012ebc:	f43f aeb0 	beq.w	8012c20 <_printf_float+0x98>
 8012ec0:	f108 0801 	add.w	r8, r8, #1
 8012ec4:	e7ec      	b.n	8012ea0 <_printf_float+0x318>
 8012ec6:	4642      	mov	r2, r8
 8012ec8:	4631      	mov	r1, r6
 8012eca:	4628      	mov	r0, r5
 8012ecc:	47b8      	blx	r7
 8012ece:	3001      	adds	r0, #1
 8012ed0:	d1c1      	bne.n	8012e56 <_printf_float+0x2ce>
 8012ed2:	e6a5      	b.n	8012c20 <_printf_float+0x98>
 8012ed4:	2301      	movs	r3, #1
 8012ed6:	4631      	mov	r1, r6
 8012ed8:	4628      	mov	r0, r5
 8012eda:	9206      	str	r2, [sp, #24]
 8012edc:	47b8      	blx	r7
 8012ede:	3001      	adds	r0, #1
 8012ee0:	f43f ae9e 	beq.w	8012c20 <_printf_float+0x98>
 8012ee4:	9b07      	ldr	r3, [sp, #28]
 8012ee6:	9a06      	ldr	r2, [sp, #24]
 8012ee8:	3301      	adds	r3, #1
 8012eea:	9307      	str	r3, [sp, #28]
 8012eec:	e7b9      	b.n	8012e62 <_printf_float+0x2da>
 8012eee:	9b05      	ldr	r3, [sp, #20]
 8012ef0:	465a      	mov	r2, fp
 8012ef2:	4631      	mov	r1, r6
 8012ef4:	4628      	mov	r0, r5
 8012ef6:	47b8      	blx	r7
 8012ef8:	3001      	adds	r0, #1
 8012efa:	d1bf      	bne.n	8012e7c <_printf_float+0x2f4>
 8012efc:	e690      	b.n	8012c20 <_printf_float+0x98>
 8012efe:	9a06      	ldr	r2, [sp, #24]
 8012f00:	464b      	mov	r3, r9
 8012f02:	4442      	add	r2, r8
 8012f04:	4631      	mov	r1, r6
 8012f06:	4628      	mov	r0, r5
 8012f08:	47b8      	blx	r7
 8012f0a:	3001      	adds	r0, #1
 8012f0c:	d1c2      	bne.n	8012e94 <_printf_float+0x30c>
 8012f0e:	e687      	b.n	8012c20 <_printf_float+0x98>
 8012f10:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8012f14:	f1b9 0f01 	cmp.w	r9, #1
 8012f18:	dc01      	bgt.n	8012f1e <_printf_float+0x396>
 8012f1a:	07db      	lsls	r3, r3, #31
 8012f1c:	d536      	bpl.n	8012f8c <_printf_float+0x404>
 8012f1e:	2301      	movs	r3, #1
 8012f20:	4642      	mov	r2, r8
 8012f22:	4631      	mov	r1, r6
 8012f24:	4628      	mov	r0, r5
 8012f26:	47b8      	blx	r7
 8012f28:	3001      	adds	r0, #1
 8012f2a:	f43f ae79 	beq.w	8012c20 <_printf_float+0x98>
 8012f2e:	9b05      	ldr	r3, [sp, #20]
 8012f30:	465a      	mov	r2, fp
 8012f32:	4631      	mov	r1, r6
 8012f34:	4628      	mov	r0, r5
 8012f36:	47b8      	blx	r7
 8012f38:	3001      	adds	r0, #1
 8012f3a:	f43f ae71 	beq.w	8012c20 <_printf_float+0x98>
 8012f3e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8012f42:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f4a:	f109 39ff 	add.w	r9, r9, #4294967295
 8012f4e:	d018      	beq.n	8012f82 <_printf_float+0x3fa>
 8012f50:	464b      	mov	r3, r9
 8012f52:	f108 0201 	add.w	r2, r8, #1
 8012f56:	4631      	mov	r1, r6
 8012f58:	4628      	mov	r0, r5
 8012f5a:	47b8      	blx	r7
 8012f5c:	3001      	adds	r0, #1
 8012f5e:	d10c      	bne.n	8012f7a <_printf_float+0x3f2>
 8012f60:	e65e      	b.n	8012c20 <_printf_float+0x98>
 8012f62:	2301      	movs	r3, #1
 8012f64:	465a      	mov	r2, fp
 8012f66:	4631      	mov	r1, r6
 8012f68:	4628      	mov	r0, r5
 8012f6a:	47b8      	blx	r7
 8012f6c:	3001      	adds	r0, #1
 8012f6e:	f43f ae57 	beq.w	8012c20 <_printf_float+0x98>
 8012f72:	f108 0801 	add.w	r8, r8, #1
 8012f76:	45c8      	cmp	r8, r9
 8012f78:	dbf3      	blt.n	8012f62 <_printf_float+0x3da>
 8012f7a:	4653      	mov	r3, sl
 8012f7c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012f80:	e6dc      	b.n	8012d3c <_printf_float+0x1b4>
 8012f82:	f04f 0800 	mov.w	r8, #0
 8012f86:	f104 0b1a 	add.w	fp, r4, #26
 8012f8a:	e7f4      	b.n	8012f76 <_printf_float+0x3ee>
 8012f8c:	2301      	movs	r3, #1
 8012f8e:	4642      	mov	r2, r8
 8012f90:	e7e1      	b.n	8012f56 <_printf_float+0x3ce>
 8012f92:	2301      	movs	r3, #1
 8012f94:	464a      	mov	r2, r9
 8012f96:	4631      	mov	r1, r6
 8012f98:	4628      	mov	r0, r5
 8012f9a:	47b8      	blx	r7
 8012f9c:	3001      	adds	r0, #1
 8012f9e:	f43f ae3f 	beq.w	8012c20 <_printf_float+0x98>
 8012fa2:	f108 0801 	add.w	r8, r8, #1
 8012fa6:	68e3      	ldr	r3, [r4, #12]
 8012fa8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012faa:	1a5b      	subs	r3, r3, r1
 8012fac:	4543      	cmp	r3, r8
 8012fae:	dcf0      	bgt.n	8012f92 <_printf_float+0x40a>
 8012fb0:	e6f8      	b.n	8012da4 <_printf_float+0x21c>
 8012fb2:	f04f 0800 	mov.w	r8, #0
 8012fb6:	f104 0919 	add.w	r9, r4, #25
 8012fba:	e7f4      	b.n	8012fa6 <_printf_float+0x41e>

08012fbc <_printf_common>:
 8012fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012fc0:	4616      	mov	r6, r2
 8012fc2:	4698      	mov	r8, r3
 8012fc4:	688a      	ldr	r2, [r1, #8]
 8012fc6:	690b      	ldr	r3, [r1, #16]
 8012fc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012fcc:	4293      	cmp	r3, r2
 8012fce:	bfb8      	it	lt
 8012fd0:	4613      	movlt	r3, r2
 8012fd2:	6033      	str	r3, [r6, #0]
 8012fd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012fd8:	4607      	mov	r7, r0
 8012fda:	460c      	mov	r4, r1
 8012fdc:	b10a      	cbz	r2, 8012fe2 <_printf_common+0x26>
 8012fde:	3301      	adds	r3, #1
 8012fe0:	6033      	str	r3, [r6, #0]
 8012fe2:	6823      	ldr	r3, [r4, #0]
 8012fe4:	0699      	lsls	r1, r3, #26
 8012fe6:	bf42      	ittt	mi
 8012fe8:	6833      	ldrmi	r3, [r6, #0]
 8012fea:	3302      	addmi	r3, #2
 8012fec:	6033      	strmi	r3, [r6, #0]
 8012fee:	6825      	ldr	r5, [r4, #0]
 8012ff0:	f015 0506 	ands.w	r5, r5, #6
 8012ff4:	d106      	bne.n	8013004 <_printf_common+0x48>
 8012ff6:	f104 0a19 	add.w	sl, r4, #25
 8012ffa:	68e3      	ldr	r3, [r4, #12]
 8012ffc:	6832      	ldr	r2, [r6, #0]
 8012ffe:	1a9b      	subs	r3, r3, r2
 8013000:	42ab      	cmp	r3, r5
 8013002:	dc26      	bgt.n	8013052 <_printf_common+0x96>
 8013004:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013008:	6822      	ldr	r2, [r4, #0]
 801300a:	3b00      	subs	r3, #0
 801300c:	bf18      	it	ne
 801300e:	2301      	movne	r3, #1
 8013010:	0692      	lsls	r2, r2, #26
 8013012:	d42b      	bmi.n	801306c <_printf_common+0xb0>
 8013014:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013018:	4641      	mov	r1, r8
 801301a:	4638      	mov	r0, r7
 801301c:	47c8      	blx	r9
 801301e:	3001      	adds	r0, #1
 8013020:	d01e      	beq.n	8013060 <_printf_common+0xa4>
 8013022:	6823      	ldr	r3, [r4, #0]
 8013024:	6922      	ldr	r2, [r4, #16]
 8013026:	f003 0306 	and.w	r3, r3, #6
 801302a:	2b04      	cmp	r3, #4
 801302c:	bf02      	ittt	eq
 801302e:	68e5      	ldreq	r5, [r4, #12]
 8013030:	6833      	ldreq	r3, [r6, #0]
 8013032:	1aed      	subeq	r5, r5, r3
 8013034:	68a3      	ldr	r3, [r4, #8]
 8013036:	bf0c      	ite	eq
 8013038:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801303c:	2500      	movne	r5, #0
 801303e:	4293      	cmp	r3, r2
 8013040:	bfc4      	itt	gt
 8013042:	1a9b      	subgt	r3, r3, r2
 8013044:	18ed      	addgt	r5, r5, r3
 8013046:	2600      	movs	r6, #0
 8013048:	341a      	adds	r4, #26
 801304a:	42b5      	cmp	r5, r6
 801304c:	d11a      	bne.n	8013084 <_printf_common+0xc8>
 801304e:	2000      	movs	r0, #0
 8013050:	e008      	b.n	8013064 <_printf_common+0xa8>
 8013052:	2301      	movs	r3, #1
 8013054:	4652      	mov	r2, sl
 8013056:	4641      	mov	r1, r8
 8013058:	4638      	mov	r0, r7
 801305a:	47c8      	blx	r9
 801305c:	3001      	adds	r0, #1
 801305e:	d103      	bne.n	8013068 <_printf_common+0xac>
 8013060:	f04f 30ff 	mov.w	r0, #4294967295
 8013064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013068:	3501      	adds	r5, #1
 801306a:	e7c6      	b.n	8012ffa <_printf_common+0x3e>
 801306c:	18e1      	adds	r1, r4, r3
 801306e:	1c5a      	adds	r2, r3, #1
 8013070:	2030      	movs	r0, #48	@ 0x30
 8013072:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013076:	4422      	add	r2, r4
 8013078:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801307c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013080:	3302      	adds	r3, #2
 8013082:	e7c7      	b.n	8013014 <_printf_common+0x58>
 8013084:	2301      	movs	r3, #1
 8013086:	4622      	mov	r2, r4
 8013088:	4641      	mov	r1, r8
 801308a:	4638      	mov	r0, r7
 801308c:	47c8      	blx	r9
 801308e:	3001      	adds	r0, #1
 8013090:	d0e6      	beq.n	8013060 <_printf_common+0xa4>
 8013092:	3601      	adds	r6, #1
 8013094:	e7d9      	b.n	801304a <_printf_common+0x8e>
	...

08013098 <_printf_i>:
 8013098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801309c:	7e0f      	ldrb	r7, [r1, #24]
 801309e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80130a0:	2f78      	cmp	r7, #120	@ 0x78
 80130a2:	4691      	mov	r9, r2
 80130a4:	4680      	mov	r8, r0
 80130a6:	460c      	mov	r4, r1
 80130a8:	469a      	mov	sl, r3
 80130aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80130ae:	d807      	bhi.n	80130c0 <_printf_i+0x28>
 80130b0:	2f62      	cmp	r7, #98	@ 0x62
 80130b2:	d80a      	bhi.n	80130ca <_printf_i+0x32>
 80130b4:	2f00      	cmp	r7, #0
 80130b6:	f000 80d1 	beq.w	801325c <_printf_i+0x1c4>
 80130ba:	2f58      	cmp	r7, #88	@ 0x58
 80130bc:	f000 80b8 	beq.w	8013230 <_printf_i+0x198>
 80130c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80130c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80130c8:	e03a      	b.n	8013140 <_printf_i+0xa8>
 80130ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80130ce:	2b15      	cmp	r3, #21
 80130d0:	d8f6      	bhi.n	80130c0 <_printf_i+0x28>
 80130d2:	a101      	add	r1, pc, #4	@ (adr r1, 80130d8 <_printf_i+0x40>)
 80130d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80130d8:	08013131 	.word	0x08013131
 80130dc:	08013145 	.word	0x08013145
 80130e0:	080130c1 	.word	0x080130c1
 80130e4:	080130c1 	.word	0x080130c1
 80130e8:	080130c1 	.word	0x080130c1
 80130ec:	080130c1 	.word	0x080130c1
 80130f0:	08013145 	.word	0x08013145
 80130f4:	080130c1 	.word	0x080130c1
 80130f8:	080130c1 	.word	0x080130c1
 80130fc:	080130c1 	.word	0x080130c1
 8013100:	080130c1 	.word	0x080130c1
 8013104:	08013243 	.word	0x08013243
 8013108:	0801316f 	.word	0x0801316f
 801310c:	080131fd 	.word	0x080131fd
 8013110:	080130c1 	.word	0x080130c1
 8013114:	080130c1 	.word	0x080130c1
 8013118:	08013265 	.word	0x08013265
 801311c:	080130c1 	.word	0x080130c1
 8013120:	0801316f 	.word	0x0801316f
 8013124:	080130c1 	.word	0x080130c1
 8013128:	080130c1 	.word	0x080130c1
 801312c:	08013205 	.word	0x08013205
 8013130:	6833      	ldr	r3, [r6, #0]
 8013132:	1d1a      	adds	r2, r3, #4
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	6032      	str	r2, [r6, #0]
 8013138:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801313c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013140:	2301      	movs	r3, #1
 8013142:	e09c      	b.n	801327e <_printf_i+0x1e6>
 8013144:	6833      	ldr	r3, [r6, #0]
 8013146:	6820      	ldr	r0, [r4, #0]
 8013148:	1d19      	adds	r1, r3, #4
 801314a:	6031      	str	r1, [r6, #0]
 801314c:	0606      	lsls	r6, r0, #24
 801314e:	d501      	bpl.n	8013154 <_printf_i+0xbc>
 8013150:	681d      	ldr	r5, [r3, #0]
 8013152:	e003      	b.n	801315c <_printf_i+0xc4>
 8013154:	0645      	lsls	r5, r0, #25
 8013156:	d5fb      	bpl.n	8013150 <_printf_i+0xb8>
 8013158:	f9b3 5000 	ldrsh.w	r5, [r3]
 801315c:	2d00      	cmp	r5, #0
 801315e:	da03      	bge.n	8013168 <_printf_i+0xd0>
 8013160:	232d      	movs	r3, #45	@ 0x2d
 8013162:	426d      	negs	r5, r5
 8013164:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013168:	4858      	ldr	r0, [pc, #352]	@ (80132cc <_printf_i+0x234>)
 801316a:	230a      	movs	r3, #10
 801316c:	e011      	b.n	8013192 <_printf_i+0xfa>
 801316e:	6821      	ldr	r1, [r4, #0]
 8013170:	6833      	ldr	r3, [r6, #0]
 8013172:	0608      	lsls	r0, r1, #24
 8013174:	f853 5b04 	ldr.w	r5, [r3], #4
 8013178:	d402      	bmi.n	8013180 <_printf_i+0xe8>
 801317a:	0649      	lsls	r1, r1, #25
 801317c:	bf48      	it	mi
 801317e:	b2ad      	uxthmi	r5, r5
 8013180:	2f6f      	cmp	r7, #111	@ 0x6f
 8013182:	4852      	ldr	r0, [pc, #328]	@ (80132cc <_printf_i+0x234>)
 8013184:	6033      	str	r3, [r6, #0]
 8013186:	bf14      	ite	ne
 8013188:	230a      	movne	r3, #10
 801318a:	2308      	moveq	r3, #8
 801318c:	2100      	movs	r1, #0
 801318e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013192:	6866      	ldr	r6, [r4, #4]
 8013194:	60a6      	str	r6, [r4, #8]
 8013196:	2e00      	cmp	r6, #0
 8013198:	db05      	blt.n	80131a6 <_printf_i+0x10e>
 801319a:	6821      	ldr	r1, [r4, #0]
 801319c:	432e      	orrs	r6, r5
 801319e:	f021 0104 	bic.w	r1, r1, #4
 80131a2:	6021      	str	r1, [r4, #0]
 80131a4:	d04b      	beq.n	801323e <_printf_i+0x1a6>
 80131a6:	4616      	mov	r6, r2
 80131a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80131ac:	fb03 5711 	mls	r7, r3, r1, r5
 80131b0:	5dc7      	ldrb	r7, [r0, r7]
 80131b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80131b6:	462f      	mov	r7, r5
 80131b8:	42bb      	cmp	r3, r7
 80131ba:	460d      	mov	r5, r1
 80131bc:	d9f4      	bls.n	80131a8 <_printf_i+0x110>
 80131be:	2b08      	cmp	r3, #8
 80131c0:	d10b      	bne.n	80131da <_printf_i+0x142>
 80131c2:	6823      	ldr	r3, [r4, #0]
 80131c4:	07df      	lsls	r7, r3, #31
 80131c6:	d508      	bpl.n	80131da <_printf_i+0x142>
 80131c8:	6923      	ldr	r3, [r4, #16]
 80131ca:	6861      	ldr	r1, [r4, #4]
 80131cc:	4299      	cmp	r1, r3
 80131ce:	bfde      	ittt	le
 80131d0:	2330      	movle	r3, #48	@ 0x30
 80131d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80131d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80131da:	1b92      	subs	r2, r2, r6
 80131dc:	6122      	str	r2, [r4, #16]
 80131de:	f8cd a000 	str.w	sl, [sp]
 80131e2:	464b      	mov	r3, r9
 80131e4:	aa03      	add	r2, sp, #12
 80131e6:	4621      	mov	r1, r4
 80131e8:	4640      	mov	r0, r8
 80131ea:	f7ff fee7 	bl	8012fbc <_printf_common>
 80131ee:	3001      	adds	r0, #1
 80131f0:	d14a      	bne.n	8013288 <_printf_i+0x1f0>
 80131f2:	f04f 30ff 	mov.w	r0, #4294967295
 80131f6:	b004      	add	sp, #16
 80131f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131fc:	6823      	ldr	r3, [r4, #0]
 80131fe:	f043 0320 	orr.w	r3, r3, #32
 8013202:	6023      	str	r3, [r4, #0]
 8013204:	4832      	ldr	r0, [pc, #200]	@ (80132d0 <_printf_i+0x238>)
 8013206:	2778      	movs	r7, #120	@ 0x78
 8013208:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801320c:	6823      	ldr	r3, [r4, #0]
 801320e:	6831      	ldr	r1, [r6, #0]
 8013210:	061f      	lsls	r7, r3, #24
 8013212:	f851 5b04 	ldr.w	r5, [r1], #4
 8013216:	d402      	bmi.n	801321e <_printf_i+0x186>
 8013218:	065f      	lsls	r7, r3, #25
 801321a:	bf48      	it	mi
 801321c:	b2ad      	uxthmi	r5, r5
 801321e:	6031      	str	r1, [r6, #0]
 8013220:	07d9      	lsls	r1, r3, #31
 8013222:	bf44      	itt	mi
 8013224:	f043 0320 	orrmi.w	r3, r3, #32
 8013228:	6023      	strmi	r3, [r4, #0]
 801322a:	b11d      	cbz	r5, 8013234 <_printf_i+0x19c>
 801322c:	2310      	movs	r3, #16
 801322e:	e7ad      	b.n	801318c <_printf_i+0xf4>
 8013230:	4826      	ldr	r0, [pc, #152]	@ (80132cc <_printf_i+0x234>)
 8013232:	e7e9      	b.n	8013208 <_printf_i+0x170>
 8013234:	6823      	ldr	r3, [r4, #0]
 8013236:	f023 0320 	bic.w	r3, r3, #32
 801323a:	6023      	str	r3, [r4, #0]
 801323c:	e7f6      	b.n	801322c <_printf_i+0x194>
 801323e:	4616      	mov	r6, r2
 8013240:	e7bd      	b.n	80131be <_printf_i+0x126>
 8013242:	6833      	ldr	r3, [r6, #0]
 8013244:	6825      	ldr	r5, [r4, #0]
 8013246:	6961      	ldr	r1, [r4, #20]
 8013248:	1d18      	adds	r0, r3, #4
 801324a:	6030      	str	r0, [r6, #0]
 801324c:	062e      	lsls	r6, r5, #24
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	d501      	bpl.n	8013256 <_printf_i+0x1be>
 8013252:	6019      	str	r1, [r3, #0]
 8013254:	e002      	b.n	801325c <_printf_i+0x1c4>
 8013256:	0668      	lsls	r0, r5, #25
 8013258:	d5fb      	bpl.n	8013252 <_printf_i+0x1ba>
 801325a:	8019      	strh	r1, [r3, #0]
 801325c:	2300      	movs	r3, #0
 801325e:	6123      	str	r3, [r4, #16]
 8013260:	4616      	mov	r6, r2
 8013262:	e7bc      	b.n	80131de <_printf_i+0x146>
 8013264:	6833      	ldr	r3, [r6, #0]
 8013266:	1d1a      	adds	r2, r3, #4
 8013268:	6032      	str	r2, [r6, #0]
 801326a:	681e      	ldr	r6, [r3, #0]
 801326c:	6862      	ldr	r2, [r4, #4]
 801326e:	2100      	movs	r1, #0
 8013270:	4630      	mov	r0, r6
 8013272:	f7ed f835 	bl	80002e0 <memchr>
 8013276:	b108      	cbz	r0, 801327c <_printf_i+0x1e4>
 8013278:	1b80      	subs	r0, r0, r6
 801327a:	6060      	str	r0, [r4, #4]
 801327c:	6863      	ldr	r3, [r4, #4]
 801327e:	6123      	str	r3, [r4, #16]
 8013280:	2300      	movs	r3, #0
 8013282:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013286:	e7aa      	b.n	80131de <_printf_i+0x146>
 8013288:	6923      	ldr	r3, [r4, #16]
 801328a:	4632      	mov	r2, r6
 801328c:	4649      	mov	r1, r9
 801328e:	4640      	mov	r0, r8
 8013290:	47d0      	blx	sl
 8013292:	3001      	adds	r0, #1
 8013294:	d0ad      	beq.n	80131f2 <_printf_i+0x15a>
 8013296:	6823      	ldr	r3, [r4, #0]
 8013298:	079b      	lsls	r3, r3, #30
 801329a:	d413      	bmi.n	80132c4 <_printf_i+0x22c>
 801329c:	68e0      	ldr	r0, [r4, #12]
 801329e:	9b03      	ldr	r3, [sp, #12]
 80132a0:	4298      	cmp	r0, r3
 80132a2:	bfb8      	it	lt
 80132a4:	4618      	movlt	r0, r3
 80132a6:	e7a6      	b.n	80131f6 <_printf_i+0x15e>
 80132a8:	2301      	movs	r3, #1
 80132aa:	4632      	mov	r2, r6
 80132ac:	4649      	mov	r1, r9
 80132ae:	4640      	mov	r0, r8
 80132b0:	47d0      	blx	sl
 80132b2:	3001      	adds	r0, #1
 80132b4:	d09d      	beq.n	80131f2 <_printf_i+0x15a>
 80132b6:	3501      	adds	r5, #1
 80132b8:	68e3      	ldr	r3, [r4, #12]
 80132ba:	9903      	ldr	r1, [sp, #12]
 80132bc:	1a5b      	subs	r3, r3, r1
 80132be:	42ab      	cmp	r3, r5
 80132c0:	dcf2      	bgt.n	80132a8 <_printf_i+0x210>
 80132c2:	e7eb      	b.n	801329c <_printf_i+0x204>
 80132c4:	2500      	movs	r5, #0
 80132c6:	f104 0619 	add.w	r6, r4, #25
 80132ca:	e7f5      	b.n	80132b8 <_printf_i+0x220>
 80132cc:	0801e0d6 	.word	0x0801e0d6
 80132d0:	0801e0e7 	.word	0x0801e0e7

080132d4 <_scanf_float>:
 80132d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132d8:	b087      	sub	sp, #28
 80132da:	4691      	mov	r9, r2
 80132dc:	9303      	str	r3, [sp, #12]
 80132de:	688b      	ldr	r3, [r1, #8]
 80132e0:	1e5a      	subs	r2, r3, #1
 80132e2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80132e6:	bf81      	itttt	hi
 80132e8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80132ec:	eb03 0b05 	addhi.w	fp, r3, r5
 80132f0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80132f4:	608b      	strhi	r3, [r1, #8]
 80132f6:	680b      	ldr	r3, [r1, #0]
 80132f8:	460a      	mov	r2, r1
 80132fa:	f04f 0500 	mov.w	r5, #0
 80132fe:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8013302:	f842 3b1c 	str.w	r3, [r2], #28
 8013306:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801330a:	4680      	mov	r8, r0
 801330c:	460c      	mov	r4, r1
 801330e:	bf98      	it	ls
 8013310:	f04f 0b00 	movls.w	fp, #0
 8013314:	9201      	str	r2, [sp, #4]
 8013316:	4616      	mov	r6, r2
 8013318:	46aa      	mov	sl, r5
 801331a:	462f      	mov	r7, r5
 801331c:	9502      	str	r5, [sp, #8]
 801331e:	68a2      	ldr	r2, [r4, #8]
 8013320:	b15a      	cbz	r2, 801333a <_scanf_float+0x66>
 8013322:	f8d9 3000 	ldr.w	r3, [r9]
 8013326:	781b      	ldrb	r3, [r3, #0]
 8013328:	2b4e      	cmp	r3, #78	@ 0x4e
 801332a:	d863      	bhi.n	80133f4 <_scanf_float+0x120>
 801332c:	2b40      	cmp	r3, #64	@ 0x40
 801332e:	d83b      	bhi.n	80133a8 <_scanf_float+0xd4>
 8013330:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8013334:	b2c8      	uxtb	r0, r1
 8013336:	280e      	cmp	r0, #14
 8013338:	d939      	bls.n	80133ae <_scanf_float+0xda>
 801333a:	b11f      	cbz	r7, 8013344 <_scanf_float+0x70>
 801333c:	6823      	ldr	r3, [r4, #0]
 801333e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013342:	6023      	str	r3, [r4, #0]
 8013344:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013348:	f1ba 0f01 	cmp.w	sl, #1
 801334c:	f200 8114 	bhi.w	8013578 <_scanf_float+0x2a4>
 8013350:	9b01      	ldr	r3, [sp, #4]
 8013352:	429e      	cmp	r6, r3
 8013354:	f200 8105 	bhi.w	8013562 <_scanf_float+0x28e>
 8013358:	2001      	movs	r0, #1
 801335a:	b007      	add	sp, #28
 801335c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013360:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8013364:	2a0d      	cmp	r2, #13
 8013366:	d8e8      	bhi.n	801333a <_scanf_float+0x66>
 8013368:	a101      	add	r1, pc, #4	@ (adr r1, 8013370 <_scanf_float+0x9c>)
 801336a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801336e:	bf00      	nop
 8013370:	080134b9 	.word	0x080134b9
 8013374:	0801333b 	.word	0x0801333b
 8013378:	0801333b 	.word	0x0801333b
 801337c:	0801333b 	.word	0x0801333b
 8013380:	08013515 	.word	0x08013515
 8013384:	080134ef 	.word	0x080134ef
 8013388:	0801333b 	.word	0x0801333b
 801338c:	0801333b 	.word	0x0801333b
 8013390:	080134c7 	.word	0x080134c7
 8013394:	0801333b 	.word	0x0801333b
 8013398:	0801333b 	.word	0x0801333b
 801339c:	0801333b 	.word	0x0801333b
 80133a0:	0801333b 	.word	0x0801333b
 80133a4:	08013483 	.word	0x08013483
 80133a8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80133ac:	e7da      	b.n	8013364 <_scanf_float+0x90>
 80133ae:	290e      	cmp	r1, #14
 80133b0:	d8c3      	bhi.n	801333a <_scanf_float+0x66>
 80133b2:	a001      	add	r0, pc, #4	@ (adr r0, 80133b8 <_scanf_float+0xe4>)
 80133b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80133b8:	08013473 	.word	0x08013473
 80133bc:	0801333b 	.word	0x0801333b
 80133c0:	08013473 	.word	0x08013473
 80133c4:	08013503 	.word	0x08013503
 80133c8:	0801333b 	.word	0x0801333b
 80133cc:	08013415 	.word	0x08013415
 80133d0:	08013459 	.word	0x08013459
 80133d4:	08013459 	.word	0x08013459
 80133d8:	08013459 	.word	0x08013459
 80133dc:	08013459 	.word	0x08013459
 80133e0:	08013459 	.word	0x08013459
 80133e4:	08013459 	.word	0x08013459
 80133e8:	08013459 	.word	0x08013459
 80133ec:	08013459 	.word	0x08013459
 80133f0:	08013459 	.word	0x08013459
 80133f4:	2b6e      	cmp	r3, #110	@ 0x6e
 80133f6:	d809      	bhi.n	801340c <_scanf_float+0x138>
 80133f8:	2b60      	cmp	r3, #96	@ 0x60
 80133fa:	d8b1      	bhi.n	8013360 <_scanf_float+0x8c>
 80133fc:	2b54      	cmp	r3, #84	@ 0x54
 80133fe:	d07b      	beq.n	80134f8 <_scanf_float+0x224>
 8013400:	2b59      	cmp	r3, #89	@ 0x59
 8013402:	d19a      	bne.n	801333a <_scanf_float+0x66>
 8013404:	2d07      	cmp	r5, #7
 8013406:	d198      	bne.n	801333a <_scanf_float+0x66>
 8013408:	2508      	movs	r5, #8
 801340a:	e02f      	b.n	801346c <_scanf_float+0x198>
 801340c:	2b74      	cmp	r3, #116	@ 0x74
 801340e:	d073      	beq.n	80134f8 <_scanf_float+0x224>
 8013410:	2b79      	cmp	r3, #121	@ 0x79
 8013412:	e7f6      	b.n	8013402 <_scanf_float+0x12e>
 8013414:	6821      	ldr	r1, [r4, #0]
 8013416:	05c8      	lsls	r0, r1, #23
 8013418:	d51e      	bpl.n	8013458 <_scanf_float+0x184>
 801341a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801341e:	6021      	str	r1, [r4, #0]
 8013420:	3701      	adds	r7, #1
 8013422:	f1bb 0f00 	cmp.w	fp, #0
 8013426:	d003      	beq.n	8013430 <_scanf_float+0x15c>
 8013428:	3201      	adds	r2, #1
 801342a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801342e:	60a2      	str	r2, [r4, #8]
 8013430:	68a3      	ldr	r3, [r4, #8]
 8013432:	3b01      	subs	r3, #1
 8013434:	60a3      	str	r3, [r4, #8]
 8013436:	6923      	ldr	r3, [r4, #16]
 8013438:	3301      	adds	r3, #1
 801343a:	6123      	str	r3, [r4, #16]
 801343c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013440:	3b01      	subs	r3, #1
 8013442:	2b00      	cmp	r3, #0
 8013444:	f8c9 3004 	str.w	r3, [r9, #4]
 8013448:	f340 8082 	ble.w	8013550 <_scanf_float+0x27c>
 801344c:	f8d9 3000 	ldr.w	r3, [r9]
 8013450:	3301      	adds	r3, #1
 8013452:	f8c9 3000 	str.w	r3, [r9]
 8013456:	e762      	b.n	801331e <_scanf_float+0x4a>
 8013458:	eb1a 0105 	adds.w	r1, sl, r5
 801345c:	f47f af6d 	bne.w	801333a <_scanf_float+0x66>
 8013460:	6822      	ldr	r2, [r4, #0]
 8013462:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8013466:	6022      	str	r2, [r4, #0]
 8013468:	460d      	mov	r5, r1
 801346a:	468a      	mov	sl, r1
 801346c:	f806 3b01 	strb.w	r3, [r6], #1
 8013470:	e7de      	b.n	8013430 <_scanf_float+0x15c>
 8013472:	6822      	ldr	r2, [r4, #0]
 8013474:	0610      	lsls	r0, r2, #24
 8013476:	f57f af60 	bpl.w	801333a <_scanf_float+0x66>
 801347a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801347e:	6022      	str	r2, [r4, #0]
 8013480:	e7f4      	b.n	801346c <_scanf_float+0x198>
 8013482:	f1ba 0f00 	cmp.w	sl, #0
 8013486:	d10c      	bne.n	80134a2 <_scanf_float+0x1ce>
 8013488:	b977      	cbnz	r7, 80134a8 <_scanf_float+0x1d4>
 801348a:	6822      	ldr	r2, [r4, #0]
 801348c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8013490:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8013494:	d108      	bne.n	80134a8 <_scanf_float+0x1d4>
 8013496:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801349a:	6022      	str	r2, [r4, #0]
 801349c:	f04f 0a01 	mov.w	sl, #1
 80134a0:	e7e4      	b.n	801346c <_scanf_float+0x198>
 80134a2:	f1ba 0f02 	cmp.w	sl, #2
 80134a6:	d050      	beq.n	801354a <_scanf_float+0x276>
 80134a8:	2d01      	cmp	r5, #1
 80134aa:	d002      	beq.n	80134b2 <_scanf_float+0x1de>
 80134ac:	2d04      	cmp	r5, #4
 80134ae:	f47f af44 	bne.w	801333a <_scanf_float+0x66>
 80134b2:	3501      	adds	r5, #1
 80134b4:	b2ed      	uxtb	r5, r5
 80134b6:	e7d9      	b.n	801346c <_scanf_float+0x198>
 80134b8:	f1ba 0f01 	cmp.w	sl, #1
 80134bc:	f47f af3d 	bne.w	801333a <_scanf_float+0x66>
 80134c0:	f04f 0a02 	mov.w	sl, #2
 80134c4:	e7d2      	b.n	801346c <_scanf_float+0x198>
 80134c6:	b975      	cbnz	r5, 80134e6 <_scanf_float+0x212>
 80134c8:	2f00      	cmp	r7, #0
 80134ca:	f47f af37 	bne.w	801333c <_scanf_float+0x68>
 80134ce:	6822      	ldr	r2, [r4, #0]
 80134d0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80134d4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80134d8:	f040 80fc 	bne.w	80136d4 <_scanf_float+0x400>
 80134dc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80134e0:	6022      	str	r2, [r4, #0]
 80134e2:	2501      	movs	r5, #1
 80134e4:	e7c2      	b.n	801346c <_scanf_float+0x198>
 80134e6:	2d03      	cmp	r5, #3
 80134e8:	d0e3      	beq.n	80134b2 <_scanf_float+0x1de>
 80134ea:	2d05      	cmp	r5, #5
 80134ec:	e7df      	b.n	80134ae <_scanf_float+0x1da>
 80134ee:	2d02      	cmp	r5, #2
 80134f0:	f47f af23 	bne.w	801333a <_scanf_float+0x66>
 80134f4:	2503      	movs	r5, #3
 80134f6:	e7b9      	b.n	801346c <_scanf_float+0x198>
 80134f8:	2d06      	cmp	r5, #6
 80134fa:	f47f af1e 	bne.w	801333a <_scanf_float+0x66>
 80134fe:	2507      	movs	r5, #7
 8013500:	e7b4      	b.n	801346c <_scanf_float+0x198>
 8013502:	6822      	ldr	r2, [r4, #0]
 8013504:	0591      	lsls	r1, r2, #22
 8013506:	f57f af18 	bpl.w	801333a <_scanf_float+0x66>
 801350a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801350e:	6022      	str	r2, [r4, #0]
 8013510:	9702      	str	r7, [sp, #8]
 8013512:	e7ab      	b.n	801346c <_scanf_float+0x198>
 8013514:	6822      	ldr	r2, [r4, #0]
 8013516:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801351a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801351e:	d005      	beq.n	801352c <_scanf_float+0x258>
 8013520:	0550      	lsls	r0, r2, #21
 8013522:	f57f af0a 	bpl.w	801333a <_scanf_float+0x66>
 8013526:	2f00      	cmp	r7, #0
 8013528:	f000 80d4 	beq.w	80136d4 <_scanf_float+0x400>
 801352c:	0591      	lsls	r1, r2, #22
 801352e:	bf58      	it	pl
 8013530:	9902      	ldrpl	r1, [sp, #8]
 8013532:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8013536:	bf58      	it	pl
 8013538:	1a79      	subpl	r1, r7, r1
 801353a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801353e:	bf58      	it	pl
 8013540:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8013544:	6022      	str	r2, [r4, #0]
 8013546:	2700      	movs	r7, #0
 8013548:	e790      	b.n	801346c <_scanf_float+0x198>
 801354a:	f04f 0a03 	mov.w	sl, #3
 801354e:	e78d      	b.n	801346c <_scanf_float+0x198>
 8013550:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8013554:	4649      	mov	r1, r9
 8013556:	4640      	mov	r0, r8
 8013558:	4798      	blx	r3
 801355a:	2800      	cmp	r0, #0
 801355c:	f43f aedf 	beq.w	801331e <_scanf_float+0x4a>
 8013560:	e6eb      	b.n	801333a <_scanf_float+0x66>
 8013562:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013566:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801356a:	464a      	mov	r2, r9
 801356c:	4640      	mov	r0, r8
 801356e:	4798      	blx	r3
 8013570:	6923      	ldr	r3, [r4, #16]
 8013572:	3b01      	subs	r3, #1
 8013574:	6123      	str	r3, [r4, #16]
 8013576:	e6eb      	b.n	8013350 <_scanf_float+0x7c>
 8013578:	1e6b      	subs	r3, r5, #1
 801357a:	2b06      	cmp	r3, #6
 801357c:	d824      	bhi.n	80135c8 <_scanf_float+0x2f4>
 801357e:	2d02      	cmp	r5, #2
 8013580:	d836      	bhi.n	80135f0 <_scanf_float+0x31c>
 8013582:	9b01      	ldr	r3, [sp, #4]
 8013584:	429e      	cmp	r6, r3
 8013586:	f67f aee7 	bls.w	8013358 <_scanf_float+0x84>
 801358a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801358e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013592:	464a      	mov	r2, r9
 8013594:	4640      	mov	r0, r8
 8013596:	4798      	blx	r3
 8013598:	6923      	ldr	r3, [r4, #16]
 801359a:	3b01      	subs	r3, #1
 801359c:	6123      	str	r3, [r4, #16]
 801359e:	e7f0      	b.n	8013582 <_scanf_float+0x2ae>
 80135a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80135a4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80135a8:	464a      	mov	r2, r9
 80135aa:	4640      	mov	r0, r8
 80135ac:	4798      	blx	r3
 80135ae:	6923      	ldr	r3, [r4, #16]
 80135b0:	3b01      	subs	r3, #1
 80135b2:	6123      	str	r3, [r4, #16]
 80135b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80135b8:	fa5f fa8a 	uxtb.w	sl, sl
 80135bc:	f1ba 0f02 	cmp.w	sl, #2
 80135c0:	d1ee      	bne.n	80135a0 <_scanf_float+0x2cc>
 80135c2:	3d03      	subs	r5, #3
 80135c4:	b2ed      	uxtb	r5, r5
 80135c6:	1b76      	subs	r6, r6, r5
 80135c8:	6823      	ldr	r3, [r4, #0]
 80135ca:	05da      	lsls	r2, r3, #23
 80135cc:	d530      	bpl.n	8013630 <_scanf_float+0x35c>
 80135ce:	055b      	lsls	r3, r3, #21
 80135d0:	d511      	bpl.n	80135f6 <_scanf_float+0x322>
 80135d2:	9b01      	ldr	r3, [sp, #4]
 80135d4:	429e      	cmp	r6, r3
 80135d6:	f67f aebf 	bls.w	8013358 <_scanf_float+0x84>
 80135da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80135de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80135e2:	464a      	mov	r2, r9
 80135e4:	4640      	mov	r0, r8
 80135e6:	4798      	blx	r3
 80135e8:	6923      	ldr	r3, [r4, #16]
 80135ea:	3b01      	subs	r3, #1
 80135ec:	6123      	str	r3, [r4, #16]
 80135ee:	e7f0      	b.n	80135d2 <_scanf_float+0x2fe>
 80135f0:	46aa      	mov	sl, r5
 80135f2:	46b3      	mov	fp, r6
 80135f4:	e7de      	b.n	80135b4 <_scanf_float+0x2e0>
 80135f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80135fa:	6923      	ldr	r3, [r4, #16]
 80135fc:	2965      	cmp	r1, #101	@ 0x65
 80135fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8013602:	f106 35ff 	add.w	r5, r6, #4294967295
 8013606:	6123      	str	r3, [r4, #16]
 8013608:	d00c      	beq.n	8013624 <_scanf_float+0x350>
 801360a:	2945      	cmp	r1, #69	@ 0x45
 801360c:	d00a      	beq.n	8013624 <_scanf_float+0x350>
 801360e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013612:	464a      	mov	r2, r9
 8013614:	4640      	mov	r0, r8
 8013616:	4798      	blx	r3
 8013618:	6923      	ldr	r3, [r4, #16]
 801361a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801361e:	3b01      	subs	r3, #1
 8013620:	1eb5      	subs	r5, r6, #2
 8013622:	6123      	str	r3, [r4, #16]
 8013624:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013628:	464a      	mov	r2, r9
 801362a:	4640      	mov	r0, r8
 801362c:	4798      	blx	r3
 801362e:	462e      	mov	r6, r5
 8013630:	6822      	ldr	r2, [r4, #0]
 8013632:	f012 0210 	ands.w	r2, r2, #16
 8013636:	d001      	beq.n	801363c <_scanf_float+0x368>
 8013638:	2000      	movs	r0, #0
 801363a:	e68e      	b.n	801335a <_scanf_float+0x86>
 801363c:	7032      	strb	r2, [r6, #0]
 801363e:	6823      	ldr	r3, [r4, #0]
 8013640:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8013644:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013648:	d123      	bne.n	8013692 <_scanf_float+0x3be>
 801364a:	9b02      	ldr	r3, [sp, #8]
 801364c:	429f      	cmp	r7, r3
 801364e:	d00a      	beq.n	8013666 <_scanf_float+0x392>
 8013650:	1bda      	subs	r2, r3, r7
 8013652:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8013656:	429e      	cmp	r6, r3
 8013658:	bf28      	it	cs
 801365a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801365e:	491e      	ldr	r1, [pc, #120]	@ (80136d8 <_scanf_float+0x404>)
 8013660:	4630      	mov	r0, r6
 8013662:	f000 f8ff 	bl	8013864 <siprintf>
 8013666:	9901      	ldr	r1, [sp, #4]
 8013668:	2200      	movs	r2, #0
 801366a:	4640      	mov	r0, r8
 801366c:	f002 fb4a 	bl	8015d04 <_strtod_r>
 8013670:	9b03      	ldr	r3, [sp, #12]
 8013672:	6821      	ldr	r1, [r4, #0]
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	f011 0f02 	tst.w	r1, #2
 801367a:	f103 0204 	add.w	r2, r3, #4
 801367e:	d015      	beq.n	80136ac <_scanf_float+0x3d8>
 8013680:	9903      	ldr	r1, [sp, #12]
 8013682:	600a      	str	r2, [r1, #0]
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	ed83 0b00 	vstr	d0, [r3]
 801368a:	68e3      	ldr	r3, [r4, #12]
 801368c:	3301      	adds	r3, #1
 801368e:	60e3      	str	r3, [r4, #12]
 8013690:	e7d2      	b.n	8013638 <_scanf_float+0x364>
 8013692:	9b04      	ldr	r3, [sp, #16]
 8013694:	2b00      	cmp	r3, #0
 8013696:	d0e6      	beq.n	8013666 <_scanf_float+0x392>
 8013698:	9905      	ldr	r1, [sp, #20]
 801369a:	230a      	movs	r3, #10
 801369c:	3101      	adds	r1, #1
 801369e:	4640      	mov	r0, r8
 80136a0:	f002 fbb0 	bl	8015e04 <_strtol_r>
 80136a4:	9b04      	ldr	r3, [sp, #16]
 80136a6:	9e05      	ldr	r6, [sp, #20]
 80136a8:	1ac2      	subs	r2, r0, r3
 80136aa:	e7d2      	b.n	8013652 <_scanf_float+0x37e>
 80136ac:	f011 0f04 	tst.w	r1, #4
 80136b0:	9903      	ldr	r1, [sp, #12]
 80136b2:	600a      	str	r2, [r1, #0]
 80136b4:	d1e6      	bne.n	8013684 <_scanf_float+0x3b0>
 80136b6:	eeb4 0b40 	vcmp.f64	d0, d0
 80136ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136be:	681d      	ldr	r5, [r3, #0]
 80136c0:	d705      	bvc.n	80136ce <_scanf_float+0x3fa>
 80136c2:	4806      	ldr	r0, [pc, #24]	@ (80136dc <_scanf_float+0x408>)
 80136c4:	f000 f9d4 	bl	8013a70 <nanf>
 80136c8:	ed85 0a00 	vstr	s0, [r5]
 80136cc:	e7dd      	b.n	801368a <_scanf_float+0x3b6>
 80136ce:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80136d2:	e7f9      	b.n	80136c8 <_scanf_float+0x3f4>
 80136d4:	2700      	movs	r7, #0
 80136d6:	e635      	b.n	8013344 <_scanf_float+0x70>
 80136d8:	0801e0f8 	.word	0x0801e0f8
 80136dc:	0801e239 	.word	0x0801e239

080136e0 <std>:
 80136e0:	2300      	movs	r3, #0
 80136e2:	b510      	push	{r4, lr}
 80136e4:	4604      	mov	r4, r0
 80136e6:	e9c0 3300 	strd	r3, r3, [r0]
 80136ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80136ee:	6083      	str	r3, [r0, #8]
 80136f0:	8181      	strh	r1, [r0, #12]
 80136f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80136f4:	81c2      	strh	r2, [r0, #14]
 80136f6:	6183      	str	r3, [r0, #24]
 80136f8:	4619      	mov	r1, r3
 80136fa:	2208      	movs	r2, #8
 80136fc:	305c      	adds	r0, #92	@ 0x5c
 80136fe:	f000 f937 	bl	8013970 <memset>
 8013702:	4b0d      	ldr	r3, [pc, #52]	@ (8013738 <std+0x58>)
 8013704:	6263      	str	r3, [r4, #36]	@ 0x24
 8013706:	4b0d      	ldr	r3, [pc, #52]	@ (801373c <std+0x5c>)
 8013708:	62a3      	str	r3, [r4, #40]	@ 0x28
 801370a:	4b0d      	ldr	r3, [pc, #52]	@ (8013740 <std+0x60>)
 801370c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801370e:	4b0d      	ldr	r3, [pc, #52]	@ (8013744 <std+0x64>)
 8013710:	6323      	str	r3, [r4, #48]	@ 0x30
 8013712:	4b0d      	ldr	r3, [pc, #52]	@ (8013748 <std+0x68>)
 8013714:	6224      	str	r4, [r4, #32]
 8013716:	429c      	cmp	r4, r3
 8013718:	d006      	beq.n	8013728 <std+0x48>
 801371a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801371e:	4294      	cmp	r4, r2
 8013720:	d002      	beq.n	8013728 <std+0x48>
 8013722:	33d0      	adds	r3, #208	@ 0xd0
 8013724:	429c      	cmp	r4, r3
 8013726:	d105      	bne.n	8013734 <std+0x54>
 8013728:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801372c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013730:	f000 b99a 	b.w	8013a68 <__retarget_lock_init_recursive>
 8013734:	bd10      	pop	{r4, pc}
 8013736:	bf00      	nop
 8013738:	080138a9 	.word	0x080138a9
 801373c:	080138cb 	.word	0x080138cb
 8013740:	08013903 	.word	0x08013903
 8013744:	08013927 	.word	0x08013927
 8013748:	24001118 	.word	0x24001118

0801374c <stdio_exit_handler>:
 801374c:	4a02      	ldr	r2, [pc, #8]	@ (8013758 <stdio_exit_handler+0xc>)
 801374e:	4903      	ldr	r1, [pc, #12]	@ (801375c <stdio_exit_handler+0x10>)
 8013750:	4803      	ldr	r0, [pc, #12]	@ (8013760 <stdio_exit_handler+0x14>)
 8013752:	f000 b869 	b.w	8013828 <_fwalk_sglue>
 8013756:	bf00      	nop
 8013758:	24000390 	.word	0x24000390
 801375c:	080161c1 	.word	0x080161c1
 8013760:	240003a0 	.word	0x240003a0

08013764 <cleanup_stdio>:
 8013764:	6841      	ldr	r1, [r0, #4]
 8013766:	4b0c      	ldr	r3, [pc, #48]	@ (8013798 <cleanup_stdio+0x34>)
 8013768:	4299      	cmp	r1, r3
 801376a:	b510      	push	{r4, lr}
 801376c:	4604      	mov	r4, r0
 801376e:	d001      	beq.n	8013774 <cleanup_stdio+0x10>
 8013770:	f002 fd26 	bl	80161c0 <_fflush_r>
 8013774:	68a1      	ldr	r1, [r4, #8]
 8013776:	4b09      	ldr	r3, [pc, #36]	@ (801379c <cleanup_stdio+0x38>)
 8013778:	4299      	cmp	r1, r3
 801377a:	d002      	beq.n	8013782 <cleanup_stdio+0x1e>
 801377c:	4620      	mov	r0, r4
 801377e:	f002 fd1f 	bl	80161c0 <_fflush_r>
 8013782:	68e1      	ldr	r1, [r4, #12]
 8013784:	4b06      	ldr	r3, [pc, #24]	@ (80137a0 <cleanup_stdio+0x3c>)
 8013786:	4299      	cmp	r1, r3
 8013788:	d004      	beq.n	8013794 <cleanup_stdio+0x30>
 801378a:	4620      	mov	r0, r4
 801378c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013790:	f002 bd16 	b.w	80161c0 <_fflush_r>
 8013794:	bd10      	pop	{r4, pc}
 8013796:	bf00      	nop
 8013798:	24001118 	.word	0x24001118
 801379c:	24001180 	.word	0x24001180
 80137a0:	240011e8 	.word	0x240011e8

080137a4 <global_stdio_init.part.0>:
 80137a4:	b510      	push	{r4, lr}
 80137a6:	4b0b      	ldr	r3, [pc, #44]	@ (80137d4 <global_stdio_init.part.0+0x30>)
 80137a8:	4c0b      	ldr	r4, [pc, #44]	@ (80137d8 <global_stdio_init.part.0+0x34>)
 80137aa:	4a0c      	ldr	r2, [pc, #48]	@ (80137dc <global_stdio_init.part.0+0x38>)
 80137ac:	601a      	str	r2, [r3, #0]
 80137ae:	4620      	mov	r0, r4
 80137b0:	2200      	movs	r2, #0
 80137b2:	2104      	movs	r1, #4
 80137b4:	f7ff ff94 	bl	80136e0 <std>
 80137b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80137bc:	2201      	movs	r2, #1
 80137be:	2109      	movs	r1, #9
 80137c0:	f7ff ff8e 	bl	80136e0 <std>
 80137c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80137c8:	2202      	movs	r2, #2
 80137ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80137ce:	2112      	movs	r1, #18
 80137d0:	f7ff bf86 	b.w	80136e0 <std>
 80137d4:	24001250 	.word	0x24001250
 80137d8:	24001118 	.word	0x24001118
 80137dc:	0801374d 	.word	0x0801374d

080137e0 <__sfp_lock_acquire>:
 80137e0:	4801      	ldr	r0, [pc, #4]	@ (80137e8 <__sfp_lock_acquire+0x8>)
 80137e2:	f000 b942 	b.w	8013a6a <__retarget_lock_acquire_recursive>
 80137e6:	bf00      	nop
 80137e8:	24001259 	.word	0x24001259

080137ec <__sfp_lock_release>:
 80137ec:	4801      	ldr	r0, [pc, #4]	@ (80137f4 <__sfp_lock_release+0x8>)
 80137ee:	f000 b93d 	b.w	8013a6c <__retarget_lock_release_recursive>
 80137f2:	bf00      	nop
 80137f4:	24001259 	.word	0x24001259

080137f8 <__sinit>:
 80137f8:	b510      	push	{r4, lr}
 80137fa:	4604      	mov	r4, r0
 80137fc:	f7ff fff0 	bl	80137e0 <__sfp_lock_acquire>
 8013800:	6a23      	ldr	r3, [r4, #32]
 8013802:	b11b      	cbz	r3, 801380c <__sinit+0x14>
 8013804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013808:	f7ff bff0 	b.w	80137ec <__sfp_lock_release>
 801380c:	4b04      	ldr	r3, [pc, #16]	@ (8013820 <__sinit+0x28>)
 801380e:	6223      	str	r3, [r4, #32]
 8013810:	4b04      	ldr	r3, [pc, #16]	@ (8013824 <__sinit+0x2c>)
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	2b00      	cmp	r3, #0
 8013816:	d1f5      	bne.n	8013804 <__sinit+0xc>
 8013818:	f7ff ffc4 	bl	80137a4 <global_stdio_init.part.0>
 801381c:	e7f2      	b.n	8013804 <__sinit+0xc>
 801381e:	bf00      	nop
 8013820:	08013765 	.word	0x08013765
 8013824:	24001250 	.word	0x24001250

08013828 <_fwalk_sglue>:
 8013828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801382c:	4607      	mov	r7, r0
 801382e:	4688      	mov	r8, r1
 8013830:	4614      	mov	r4, r2
 8013832:	2600      	movs	r6, #0
 8013834:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013838:	f1b9 0901 	subs.w	r9, r9, #1
 801383c:	d505      	bpl.n	801384a <_fwalk_sglue+0x22>
 801383e:	6824      	ldr	r4, [r4, #0]
 8013840:	2c00      	cmp	r4, #0
 8013842:	d1f7      	bne.n	8013834 <_fwalk_sglue+0xc>
 8013844:	4630      	mov	r0, r6
 8013846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801384a:	89ab      	ldrh	r3, [r5, #12]
 801384c:	2b01      	cmp	r3, #1
 801384e:	d907      	bls.n	8013860 <_fwalk_sglue+0x38>
 8013850:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013854:	3301      	adds	r3, #1
 8013856:	d003      	beq.n	8013860 <_fwalk_sglue+0x38>
 8013858:	4629      	mov	r1, r5
 801385a:	4638      	mov	r0, r7
 801385c:	47c0      	blx	r8
 801385e:	4306      	orrs	r6, r0
 8013860:	3568      	adds	r5, #104	@ 0x68
 8013862:	e7e9      	b.n	8013838 <_fwalk_sglue+0x10>

08013864 <siprintf>:
 8013864:	b40e      	push	{r1, r2, r3}
 8013866:	b510      	push	{r4, lr}
 8013868:	b09d      	sub	sp, #116	@ 0x74
 801386a:	ab1f      	add	r3, sp, #124	@ 0x7c
 801386c:	9002      	str	r0, [sp, #8]
 801386e:	9006      	str	r0, [sp, #24]
 8013870:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013874:	480a      	ldr	r0, [pc, #40]	@ (80138a0 <siprintf+0x3c>)
 8013876:	9107      	str	r1, [sp, #28]
 8013878:	9104      	str	r1, [sp, #16]
 801387a:	490a      	ldr	r1, [pc, #40]	@ (80138a4 <siprintf+0x40>)
 801387c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013880:	9105      	str	r1, [sp, #20]
 8013882:	2400      	movs	r4, #0
 8013884:	a902      	add	r1, sp, #8
 8013886:	6800      	ldr	r0, [r0, #0]
 8013888:	9301      	str	r3, [sp, #4]
 801388a:	941b      	str	r4, [sp, #108]	@ 0x6c
 801388c:	f002 fb18 	bl	8015ec0 <_svfiprintf_r>
 8013890:	9b02      	ldr	r3, [sp, #8]
 8013892:	701c      	strb	r4, [r3, #0]
 8013894:	b01d      	add	sp, #116	@ 0x74
 8013896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801389a:	b003      	add	sp, #12
 801389c:	4770      	bx	lr
 801389e:	bf00      	nop
 80138a0:	2400039c 	.word	0x2400039c
 80138a4:	ffff0208 	.word	0xffff0208

080138a8 <__sread>:
 80138a8:	b510      	push	{r4, lr}
 80138aa:	460c      	mov	r4, r1
 80138ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138b0:	f000 f88c 	bl	80139cc <_read_r>
 80138b4:	2800      	cmp	r0, #0
 80138b6:	bfab      	itete	ge
 80138b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80138ba:	89a3      	ldrhlt	r3, [r4, #12]
 80138bc:	181b      	addge	r3, r3, r0
 80138be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80138c2:	bfac      	ite	ge
 80138c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80138c6:	81a3      	strhlt	r3, [r4, #12]
 80138c8:	bd10      	pop	{r4, pc}

080138ca <__swrite>:
 80138ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138ce:	461f      	mov	r7, r3
 80138d0:	898b      	ldrh	r3, [r1, #12]
 80138d2:	05db      	lsls	r3, r3, #23
 80138d4:	4605      	mov	r5, r0
 80138d6:	460c      	mov	r4, r1
 80138d8:	4616      	mov	r6, r2
 80138da:	d505      	bpl.n	80138e8 <__swrite+0x1e>
 80138dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138e0:	2302      	movs	r3, #2
 80138e2:	2200      	movs	r2, #0
 80138e4:	f000 f860 	bl	80139a8 <_lseek_r>
 80138e8:	89a3      	ldrh	r3, [r4, #12]
 80138ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80138ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80138f2:	81a3      	strh	r3, [r4, #12]
 80138f4:	4632      	mov	r2, r6
 80138f6:	463b      	mov	r3, r7
 80138f8:	4628      	mov	r0, r5
 80138fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80138fe:	f000 b877 	b.w	80139f0 <_write_r>

08013902 <__sseek>:
 8013902:	b510      	push	{r4, lr}
 8013904:	460c      	mov	r4, r1
 8013906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801390a:	f000 f84d 	bl	80139a8 <_lseek_r>
 801390e:	1c43      	adds	r3, r0, #1
 8013910:	89a3      	ldrh	r3, [r4, #12]
 8013912:	bf15      	itete	ne
 8013914:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013916:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801391a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801391e:	81a3      	strheq	r3, [r4, #12]
 8013920:	bf18      	it	ne
 8013922:	81a3      	strhne	r3, [r4, #12]
 8013924:	bd10      	pop	{r4, pc}

08013926 <__sclose>:
 8013926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801392a:	f000 b82d 	b.w	8013988 <_close_r>
	...

08013930 <_vsiprintf_r>:
 8013930:	b510      	push	{r4, lr}
 8013932:	b09a      	sub	sp, #104	@ 0x68
 8013934:	2400      	movs	r4, #0
 8013936:	9100      	str	r1, [sp, #0]
 8013938:	9104      	str	r1, [sp, #16]
 801393a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801393e:	9105      	str	r1, [sp, #20]
 8013940:	9102      	str	r1, [sp, #8]
 8013942:	4905      	ldr	r1, [pc, #20]	@ (8013958 <_vsiprintf_r+0x28>)
 8013944:	9103      	str	r1, [sp, #12]
 8013946:	4669      	mov	r1, sp
 8013948:	9419      	str	r4, [sp, #100]	@ 0x64
 801394a:	f002 fab9 	bl	8015ec0 <_svfiprintf_r>
 801394e:	9b00      	ldr	r3, [sp, #0]
 8013950:	701c      	strb	r4, [r3, #0]
 8013952:	b01a      	add	sp, #104	@ 0x68
 8013954:	bd10      	pop	{r4, pc}
 8013956:	bf00      	nop
 8013958:	ffff0208 	.word	0xffff0208

0801395c <vsiprintf>:
 801395c:	4613      	mov	r3, r2
 801395e:	460a      	mov	r2, r1
 8013960:	4601      	mov	r1, r0
 8013962:	4802      	ldr	r0, [pc, #8]	@ (801396c <vsiprintf+0x10>)
 8013964:	6800      	ldr	r0, [r0, #0]
 8013966:	f7ff bfe3 	b.w	8013930 <_vsiprintf_r>
 801396a:	bf00      	nop
 801396c:	2400039c 	.word	0x2400039c

08013970 <memset>:
 8013970:	4402      	add	r2, r0
 8013972:	4603      	mov	r3, r0
 8013974:	4293      	cmp	r3, r2
 8013976:	d100      	bne.n	801397a <memset+0xa>
 8013978:	4770      	bx	lr
 801397a:	f803 1b01 	strb.w	r1, [r3], #1
 801397e:	e7f9      	b.n	8013974 <memset+0x4>

08013980 <_localeconv_r>:
 8013980:	4800      	ldr	r0, [pc, #0]	@ (8013984 <_localeconv_r+0x4>)
 8013982:	4770      	bx	lr
 8013984:	240004dc 	.word	0x240004dc

08013988 <_close_r>:
 8013988:	b538      	push	{r3, r4, r5, lr}
 801398a:	4d06      	ldr	r5, [pc, #24]	@ (80139a4 <_close_r+0x1c>)
 801398c:	2300      	movs	r3, #0
 801398e:	4604      	mov	r4, r0
 8013990:	4608      	mov	r0, r1
 8013992:	602b      	str	r3, [r5, #0]
 8013994:	f7fe fcb2 	bl	80122fc <_close>
 8013998:	1c43      	adds	r3, r0, #1
 801399a:	d102      	bne.n	80139a2 <_close_r+0x1a>
 801399c:	682b      	ldr	r3, [r5, #0]
 801399e:	b103      	cbz	r3, 80139a2 <_close_r+0x1a>
 80139a0:	6023      	str	r3, [r4, #0]
 80139a2:	bd38      	pop	{r3, r4, r5, pc}
 80139a4:	24001254 	.word	0x24001254

080139a8 <_lseek_r>:
 80139a8:	b538      	push	{r3, r4, r5, lr}
 80139aa:	4d07      	ldr	r5, [pc, #28]	@ (80139c8 <_lseek_r+0x20>)
 80139ac:	4604      	mov	r4, r0
 80139ae:	4608      	mov	r0, r1
 80139b0:	4611      	mov	r1, r2
 80139b2:	2200      	movs	r2, #0
 80139b4:	602a      	str	r2, [r5, #0]
 80139b6:	461a      	mov	r2, r3
 80139b8:	f7fe fcc7 	bl	801234a <_lseek>
 80139bc:	1c43      	adds	r3, r0, #1
 80139be:	d102      	bne.n	80139c6 <_lseek_r+0x1e>
 80139c0:	682b      	ldr	r3, [r5, #0]
 80139c2:	b103      	cbz	r3, 80139c6 <_lseek_r+0x1e>
 80139c4:	6023      	str	r3, [r4, #0]
 80139c6:	bd38      	pop	{r3, r4, r5, pc}
 80139c8:	24001254 	.word	0x24001254

080139cc <_read_r>:
 80139cc:	b538      	push	{r3, r4, r5, lr}
 80139ce:	4d07      	ldr	r5, [pc, #28]	@ (80139ec <_read_r+0x20>)
 80139d0:	4604      	mov	r4, r0
 80139d2:	4608      	mov	r0, r1
 80139d4:	4611      	mov	r1, r2
 80139d6:	2200      	movs	r2, #0
 80139d8:	602a      	str	r2, [r5, #0]
 80139da:	461a      	mov	r2, r3
 80139dc:	f7fe fc55 	bl	801228a <_read>
 80139e0:	1c43      	adds	r3, r0, #1
 80139e2:	d102      	bne.n	80139ea <_read_r+0x1e>
 80139e4:	682b      	ldr	r3, [r5, #0]
 80139e6:	b103      	cbz	r3, 80139ea <_read_r+0x1e>
 80139e8:	6023      	str	r3, [r4, #0]
 80139ea:	bd38      	pop	{r3, r4, r5, pc}
 80139ec:	24001254 	.word	0x24001254

080139f0 <_write_r>:
 80139f0:	b538      	push	{r3, r4, r5, lr}
 80139f2:	4d07      	ldr	r5, [pc, #28]	@ (8013a10 <_write_r+0x20>)
 80139f4:	4604      	mov	r4, r0
 80139f6:	4608      	mov	r0, r1
 80139f8:	4611      	mov	r1, r2
 80139fa:	2200      	movs	r2, #0
 80139fc:	602a      	str	r2, [r5, #0]
 80139fe:	461a      	mov	r2, r3
 8013a00:	f7fe fc60 	bl	80122c4 <_write>
 8013a04:	1c43      	adds	r3, r0, #1
 8013a06:	d102      	bne.n	8013a0e <_write_r+0x1e>
 8013a08:	682b      	ldr	r3, [r5, #0]
 8013a0a:	b103      	cbz	r3, 8013a0e <_write_r+0x1e>
 8013a0c:	6023      	str	r3, [r4, #0]
 8013a0e:	bd38      	pop	{r3, r4, r5, pc}
 8013a10:	24001254 	.word	0x24001254

08013a14 <__errno>:
 8013a14:	4b01      	ldr	r3, [pc, #4]	@ (8013a1c <__errno+0x8>)
 8013a16:	6818      	ldr	r0, [r3, #0]
 8013a18:	4770      	bx	lr
 8013a1a:	bf00      	nop
 8013a1c:	2400039c 	.word	0x2400039c

08013a20 <__libc_init_array>:
 8013a20:	b570      	push	{r4, r5, r6, lr}
 8013a22:	4d0d      	ldr	r5, [pc, #52]	@ (8013a58 <__libc_init_array+0x38>)
 8013a24:	4c0d      	ldr	r4, [pc, #52]	@ (8013a5c <__libc_init_array+0x3c>)
 8013a26:	1b64      	subs	r4, r4, r5
 8013a28:	10a4      	asrs	r4, r4, #2
 8013a2a:	2600      	movs	r6, #0
 8013a2c:	42a6      	cmp	r6, r4
 8013a2e:	d109      	bne.n	8013a44 <__libc_init_array+0x24>
 8013a30:	4d0b      	ldr	r5, [pc, #44]	@ (8013a60 <__libc_init_array+0x40>)
 8013a32:	4c0c      	ldr	r4, [pc, #48]	@ (8013a64 <__libc_init_array+0x44>)
 8013a34:	f003 fab6 	bl	8016fa4 <_init>
 8013a38:	1b64      	subs	r4, r4, r5
 8013a3a:	10a4      	asrs	r4, r4, #2
 8013a3c:	2600      	movs	r6, #0
 8013a3e:	42a6      	cmp	r6, r4
 8013a40:	d105      	bne.n	8013a4e <__libc_init_array+0x2e>
 8013a42:	bd70      	pop	{r4, r5, r6, pc}
 8013a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8013a48:	4798      	blx	r3
 8013a4a:	3601      	adds	r6, #1
 8013a4c:	e7ee      	b.n	8013a2c <__libc_init_array+0xc>
 8013a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013a52:	4798      	blx	r3
 8013a54:	3601      	adds	r6, #1
 8013a56:	e7f2      	b.n	8013a3e <__libc_init_array+0x1e>
 8013a58:	0801e4f4 	.word	0x0801e4f4
 8013a5c:	0801e4f4 	.word	0x0801e4f4
 8013a60:	0801e4f4 	.word	0x0801e4f4
 8013a64:	0801e4f8 	.word	0x0801e4f8

08013a68 <__retarget_lock_init_recursive>:
 8013a68:	4770      	bx	lr

08013a6a <__retarget_lock_acquire_recursive>:
 8013a6a:	4770      	bx	lr

08013a6c <__retarget_lock_release_recursive>:
 8013a6c:	4770      	bx	lr
	...

08013a70 <nanf>:
 8013a70:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8013a78 <nanf+0x8>
 8013a74:	4770      	bx	lr
 8013a76:	bf00      	nop
 8013a78:	7fc00000 	.word	0x7fc00000

08013a7c <quorem>:
 8013a7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a80:	6903      	ldr	r3, [r0, #16]
 8013a82:	690c      	ldr	r4, [r1, #16]
 8013a84:	42a3      	cmp	r3, r4
 8013a86:	4607      	mov	r7, r0
 8013a88:	db7e      	blt.n	8013b88 <quorem+0x10c>
 8013a8a:	3c01      	subs	r4, #1
 8013a8c:	f101 0814 	add.w	r8, r1, #20
 8013a90:	00a3      	lsls	r3, r4, #2
 8013a92:	f100 0514 	add.w	r5, r0, #20
 8013a96:	9300      	str	r3, [sp, #0]
 8013a98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013a9c:	9301      	str	r3, [sp, #4]
 8013a9e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013aa2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013aa6:	3301      	adds	r3, #1
 8013aa8:	429a      	cmp	r2, r3
 8013aaa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013aae:	fbb2 f6f3 	udiv	r6, r2, r3
 8013ab2:	d32e      	bcc.n	8013b12 <quorem+0x96>
 8013ab4:	f04f 0a00 	mov.w	sl, #0
 8013ab8:	46c4      	mov	ip, r8
 8013aba:	46ae      	mov	lr, r5
 8013abc:	46d3      	mov	fp, sl
 8013abe:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013ac2:	b298      	uxth	r0, r3
 8013ac4:	fb06 a000 	mla	r0, r6, r0, sl
 8013ac8:	0c02      	lsrs	r2, r0, #16
 8013aca:	0c1b      	lsrs	r3, r3, #16
 8013acc:	fb06 2303 	mla	r3, r6, r3, r2
 8013ad0:	f8de 2000 	ldr.w	r2, [lr]
 8013ad4:	b280      	uxth	r0, r0
 8013ad6:	b292      	uxth	r2, r2
 8013ad8:	1a12      	subs	r2, r2, r0
 8013ada:	445a      	add	r2, fp
 8013adc:	f8de 0000 	ldr.w	r0, [lr]
 8013ae0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013ae4:	b29b      	uxth	r3, r3
 8013ae6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013aea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8013aee:	b292      	uxth	r2, r2
 8013af0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8013af4:	45e1      	cmp	r9, ip
 8013af6:	f84e 2b04 	str.w	r2, [lr], #4
 8013afa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8013afe:	d2de      	bcs.n	8013abe <quorem+0x42>
 8013b00:	9b00      	ldr	r3, [sp, #0]
 8013b02:	58eb      	ldr	r3, [r5, r3]
 8013b04:	b92b      	cbnz	r3, 8013b12 <quorem+0x96>
 8013b06:	9b01      	ldr	r3, [sp, #4]
 8013b08:	3b04      	subs	r3, #4
 8013b0a:	429d      	cmp	r5, r3
 8013b0c:	461a      	mov	r2, r3
 8013b0e:	d32f      	bcc.n	8013b70 <quorem+0xf4>
 8013b10:	613c      	str	r4, [r7, #16]
 8013b12:	4638      	mov	r0, r7
 8013b14:	f001 f956 	bl	8014dc4 <__mcmp>
 8013b18:	2800      	cmp	r0, #0
 8013b1a:	db25      	blt.n	8013b68 <quorem+0xec>
 8013b1c:	4629      	mov	r1, r5
 8013b1e:	2000      	movs	r0, #0
 8013b20:	f858 2b04 	ldr.w	r2, [r8], #4
 8013b24:	f8d1 c000 	ldr.w	ip, [r1]
 8013b28:	fa1f fe82 	uxth.w	lr, r2
 8013b2c:	fa1f f38c 	uxth.w	r3, ip
 8013b30:	eba3 030e 	sub.w	r3, r3, lr
 8013b34:	4403      	add	r3, r0
 8013b36:	0c12      	lsrs	r2, r2, #16
 8013b38:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8013b3c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8013b40:	b29b      	uxth	r3, r3
 8013b42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013b46:	45c1      	cmp	r9, r8
 8013b48:	f841 3b04 	str.w	r3, [r1], #4
 8013b4c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013b50:	d2e6      	bcs.n	8013b20 <quorem+0xa4>
 8013b52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013b56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013b5a:	b922      	cbnz	r2, 8013b66 <quorem+0xea>
 8013b5c:	3b04      	subs	r3, #4
 8013b5e:	429d      	cmp	r5, r3
 8013b60:	461a      	mov	r2, r3
 8013b62:	d30b      	bcc.n	8013b7c <quorem+0x100>
 8013b64:	613c      	str	r4, [r7, #16]
 8013b66:	3601      	adds	r6, #1
 8013b68:	4630      	mov	r0, r6
 8013b6a:	b003      	add	sp, #12
 8013b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b70:	6812      	ldr	r2, [r2, #0]
 8013b72:	3b04      	subs	r3, #4
 8013b74:	2a00      	cmp	r2, #0
 8013b76:	d1cb      	bne.n	8013b10 <quorem+0x94>
 8013b78:	3c01      	subs	r4, #1
 8013b7a:	e7c6      	b.n	8013b0a <quorem+0x8e>
 8013b7c:	6812      	ldr	r2, [r2, #0]
 8013b7e:	3b04      	subs	r3, #4
 8013b80:	2a00      	cmp	r2, #0
 8013b82:	d1ef      	bne.n	8013b64 <quorem+0xe8>
 8013b84:	3c01      	subs	r4, #1
 8013b86:	e7ea      	b.n	8013b5e <quorem+0xe2>
 8013b88:	2000      	movs	r0, #0
 8013b8a:	e7ee      	b.n	8013b6a <quorem+0xee>
 8013b8c:	0000      	movs	r0, r0
	...

08013b90 <_dtoa_r>:
 8013b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b94:	ed2d 8b02 	vpush	{d8}
 8013b98:	69c7      	ldr	r7, [r0, #28]
 8013b9a:	b091      	sub	sp, #68	@ 0x44
 8013b9c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013ba0:	ec55 4b10 	vmov	r4, r5, d0
 8013ba4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8013ba6:	9107      	str	r1, [sp, #28]
 8013ba8:	4681      	mov	r9, r0
 8013baa:	9209      	str	r2, [sp, #36]	@ 0x24
 8013bac:	930d      	str	r3, [sp, #52]	@ 0x34
 8013bae:	b97f      	cbnz	r7, 8013bd0 <_dtoa_r+0x40>
 8013bb0:	2010      	movs	r0, #16
 8013bb2:	f000 fd95 	bl	80146e0 <malloc>
 8013bb6:	4602      	mov	r2, r0
 8013bb8:	f8c9 001c 	str.w	r0, [r9, #28]
 8013bbc:	b920      	cbnz	r0, 8013bc8 <_dtoa_r+0x38>
 8013bbe:	4ba0      	ldr	r3, [pc, #640]	@ (8013e40 <_dtoa_r+0x2b0>)
 8013bc0:	21ef      	movs	r1, #239	@ 0xef
 8013bc2:	48a0      	ldr	r0, [pc, #640]	@ (8013e44 <_dtoa_r+0x2b4>)
 8013bc4:	f002 fb78 	bl	80162b8 <__assert_func>
 8013bc8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013bcc:	6007      	str	r7, [r0, #0]
 8013bce:	60c7      	str	r7, [r0, #12]
 8013bd0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013bd4:	6819      	ldr	r1, [r3, #0]
 8013bd6:	b159      	cbz	r1, 8013bf0 <_dtoa_r+0x60>
 8013bd8:	685a      	ldr	r2, [r3, #4]
 8013bda:	604a      	str	r2, [r1, #4]
 8013bdc:	2301      	movs	r3, #1
 8013bde:	4093      	lsls	r3, r2
 8013be0:	608b      	str	r3, [r1, #8]
 8013be2:	4648      	mov	r0, r9
 8013be4:	f000 fe72 	bl	80148cc <_Bfree>
 8013be8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013bec:	2200      	movs	r2, #0
 8013bee:	601a      	str	r2, [r3, #0]
 8013bf0:	1e2b      	subs	r3, r5, #0
 8013bf2:	bfbb      	ittet	lt
 8013bf4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8013bf8:	9303      	strlt	r3, [sp, #12]
 8013bfa:	2300      	movge	r3, #0
 8013bfc:	2201      	movlt	r2, #1
 8013bfe:	bfac      	ite	ge
 8013c00:	6033      	strge	r3, [r6, #0]
 8013c02:	6032      	strlt	r2, [r6, #0]
 8013c04:	4b90      	ldr	r3, [pc, #576]	@ (8013e48 <_dtoa_r+0x2b8>)
 8013c06:	9e03      	ldr	r6, [sp, #12]
 8013c08:	43b3      	bics	r3, r6
 8013c0a:	d110      	bne.n	8013c2e <_dtoa_r+0x9e>
 8013c0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013c0e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8013c12:	6013      	str	r3, [r2, #0]
 8013c14:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8013c18:	4323      	orrs	r3, r4
 8013c1a:	f000 84e6 	beq.w	80145ea <_dtoa_r+0xa5a>
 8013c1e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013c20:	4f8a      	ldr	r7, [pc, #552]	@ (8013e4c <_dtoa_r+0x2bc>)
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	f000 84e8 	beq.w	80145f8 <_dtoa_r+0xa68>
 8013c28:	1cfb      	adds	r3, r7, #3
 8013c2a:	f000 bce3 	b.w	80145f4 <_dtoa_r+0xa64>
 8013c2e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8013c32:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c3a:	d10a      	bne.n	8013c52 <_dtoa_r+0xc2>
 8013c3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013c3e:	2301      	movs	r3, #1
 8013c40:	6013      	str	r3, [r2, #0]
 8013c42:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013c44:	b113      	cbz	r3, 8013c4c <_dtoa_r+0xbc>
 8013c46:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013c48:	4b81      	ldr	r3, [pc, #516]	@ (8013e50 <_dtoa_r+0x2c0>)
 8013c4a:	6013      	str	r3, [r2, #0]
 8013c4c:	4f81      	ldr	r7, [pc, #516]	@ (8013e54 <_dtoa_r+0x2c4>)
 8013c4e:	f000 bcd3 	b.w	80145f8 <_dtoa_r+0xa68>
 8013c52:	aa0e      	add	r2, sp, #56	@ 0x38
 8013c54:	a90f      	add	r1, sp, #60	@ 0x3c
 8013c56:	4648      	mov	r0, r9
 8013c58:	eeb0 0b48 	vmov.f64	d0, d8
 8013c5c:	f001 f9d2 	bl	8015004 <__d2b>
 8013c60:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8013c64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013c66:	9001      	str	r0, [sp, #4]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d045      	beq.n	8013cf8 <_dtoa_r+0x168>
 8013c6c:	eeb0 7b48 	vmov.f64	d7, d8
 8013c70:	ee18 1a90 	vmov	r1, s17
 8013c74:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8013c78:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8013c7c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8013c80:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8013c84:	2500      	movs	r5, #0
 8013c86:	ee07 1a90 	vmov	s15, r1
 8013c8a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8013c8e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8013e28 <_dtoa_r+0x298>
 8013c92:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013c96:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8013e30 <_dtoa_r+0x2a0>
 8013c9a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013c9e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8013e38 <_dtoa_r+0x2a8>
 8013ca2:	ee07 3a90 	vmov	s15, r3
 8013ca6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8013caa:	eeb0 7b46 	vmov.f64	d7, d6
 8013cae:	eea4 7b05 	vfma.f64	d7, d4, d5
 8013cb2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8013cb6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8013cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cbe:	ee16 8a90 	vmov	r8, s13
 8013cc2:	d508      	bpl.n	8013cd6 <_dtoa_r+0x146>
 8013cc4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8013cc8:	eeb4 6b47 	vcmp.f64	d6, d7
 8013ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cd0:	bf18      	it	ne
 8013cd2:	f108 38ff 	addne.w	r8, r8, #4294967295
 8013cd6:	f1b8 0f16 	cmp.w	r8, #22
 8013cda:	d82b      	bhi.n	8013d34 <_dtoa_r+0x1a4>
 8013cdc:	495e      	ldr	r1, [pc, #376]	@ (8013e58 <_dtoa_r+0x2c8>)
 8013cde:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8013ce2:	ed91 7b00 	vldr	d7, [r1]
 8013ce6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cee:	d501      	bpl.n	8013cf4 <_dtoa_r+0x164>
 8013cf0:	f108 38ff 	add.w	r8, r8, #4294967295
 8013cf4:	2100      	movs	r1, #0
 8013cf6:	e01e      	b.n	8013d36 <_dtoa_r+0x1a6>
 8013cf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013cfa:	4413      	add	r3, r2
 8013cfc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8013d00:	2920      	cmp	r1, #32
 8013d02:	bfc1      	itttt	gt
 8013d04:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8013d08:	408e      	lslgt	r6, r1
 8013d0a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8013d0e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8013d12:	bfd6      	itet	le
 8013d14:	f1c1 0120 	rsble	r1, r1, #32
 8013d18:	4331      	orrgt	r1, r6
 8013d1a:	fa04 f101 	lslle.w	r1, r4, r1
 8013d1e:	ee07 1a90 	vmov	s15, r1
 8013d22:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013d26:	3b01      	subs	r3, #1
 8013d28:	ee17 1a90 	vmov	r1, s15
 8013d2c:	2501      	movs	r5, #1
 8013d2e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8013d32:	e7a8      	b.n	8013c86 <_dtoa_r+0xf6>
 8013d34:	2101      	movs	r1, #1
 8013d36:	1ad2      	subs	r2, r2, r3
 8013d38:	1e53      	subs	r3, r2, #1
 8013d3a:	9306      	str	r3, [sp, #24]
 8013d3c:	bf45      	ittet	mi
 8013d3e:	f1c2 0301 	rsbmi	r3, r2, #1
 8013d42:	9304      	strmi	r3, [sp, #16]
 8013d44:	2300      	movpl	r3, #0
 8013d46:	2300      	movmi	r3, #0
 8013d48:	bf4c      	ite	mi
 8013d4a:	9306      	strmi	r3, [sp, #24]
 8013d4c:	9304      	strpl	r3, [sp, #16]
 8013d4e:	f1b8 0f00 	cmp.w	r8, #0
 8013d52:	910c      	str	r1, [sp, #48]	@ 0x30
 8013d54:	db18      	blt.n	8013d88 <_dtoa_r+0x1f8>
 8013d56:	9b06      	ldr	r3, [sp, #24]
 8013d58:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8013d5c:	4443      	add	r3, r8
 8013d5e:	9306      	str	r3, [sp, #24]
 8013d60:	2300      	movs	r3, #0
 8013d62:	9a07      	ldr	r2, [sp, #28]
 8013d64:	2a09      	cmp	r2, #9
 8013d66:	d845      	bhi.n	8013df4 <_dtoa_r+0x264>
 8013d68:	2a05      	cmp	r2, #5
 8013d6a:	bfc4      	itt	gt
 8013d6c:	3a04      	subgt	r2, #4
 8013d6e:	9207      	strgt	r2, [sp, #28]
 8013d70:	9a07      	ldr	r2, [sp, #28]
 8013d72:	f1a2 0202 	sub.w	r2, r2, #2
 8013d76:	bfcc      	ite	gt
 8013d78:	2400      	movgt	r4, #0
 8013d7a:	2401      	movle	r4, #1
 8013d7c:	2a03      	cmp	r2, #3
 8013d7e:	d844      	bhi.n	8013e0a <_dtoa_r+0x27a>
 8013d80:	e8df f002 	tbb	[pc, r2]
 8013d84:	0b173634 	.word	0x0b173634
 8013d88:	9b04      	ldr	r3, [sp, #16]
 8013d8a:	2200      	movs	r2, #0
 8013d8c:	eba3 0308 	sub.w	r3, r3, r8
 8013d90:	9304      	str	r3, [sp, #16]
 8013d92:	920a      	str	r2, [sp, #40]	@ 0x28
 8013d94:	f1c8 0300 	rsb	r3, r8, #0
 8013d98:	e7e3      	b.n	8013d62 <_dtoa_r+0x1d2>
 8013d9a:	2201      	movs	r2, #1
 8013d9c:	9208      	str	r2, [sp, #32]
 8013d9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013da0:	eb08 0b02 	add.w	fp, r8, r2
 8013da4:	f10b 0a01 	add.w	sl, fp, #1
 8013da8:	4652      	mov	r2, sl
 8013daa:	2a01      	cmp	r2, #1
 8013dac:	bfb8      	it	lt
 8013dae:	2201      	movlt	r2, #1
 8013db0:	e006      	b.n	8013dc0 <_dtoa_r+0x230>
 8013db2:	2201      	movs	r2, #1
 8013db4:	9208      	str	r2, [sp, #32]
 8013db6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013db8:	2a00      	cmp	r2, #0
 8013dba:	dd29      	ble.n	8013e10 <_dtoa_r+0x280>
 8013dbc:	4693      	mov	fp, r2
 8013dbe:	4692      	mov	sl, r2
 8013dc0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8013dc4:	2100      	movs	r1, #0
 8013dc6:	2004      	movs	r0, #4
 8013dc8:	f100 0614 	add.w	r6, r0, #20
 8013dcc:	4296      	cmp	r6, r2
 8013dce:	d926      	bls.n	8013e1e <_dtoa_r+0x28e>
 8013dd0:	6079      	str	r1, [r7, #4]
 8013dd2:	4648      	mov	r0, r9
 8013dd4:	9305      	str	r3, [sp, #20]
 8013dd6:	f000 fd39 	bl	801484c <_Balloc>
 8013dda:	9b05      	ldr	r3, [sp, #20]
 8013ddc:	4607      	mov	r7, r0
 8013dde:	2800      	cmp	r0, #0
 8013de0:	d13e      	bne.n	8013e60 <_dtoa_r+0x2d0>
 8013de2:	4b1e      	ldr	r3, [pc, #120]	@ (8013e5c <_dtoa_r+0x2cc>)
 8013de4:	4602      	mov	r2, r0
 8013de6:	f240 11af 	movw	r1, #431	@ 0x1af
 8013dea:	e6ea      	b.n	8013bc2 <_dtoa_r+0x32>
 8013dec:	2200      	movs	r2, #0
 8013dee:	e7e1      	b.n	8013db4 <_dtoa_r+0x224>
 8013df0:	2200      	movs	r2, #0
 8013df2:	e7d3      	b.n	8013d9c <_dtoa_r+0x20c>
 8013df4:	2401      	movs	r4, #1
 8013df6:	2200      	movs	r2, #0
 8013df8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8013dfc:	f04f 3bff 	mov.w	fp, #4294967295
 8013e00:	2100      	movs	r1, #0
 8013e02:	46da      	mov	sl, fp
 8013e04:	2212      	movs	r2, #18
 8013e06:	9109      	str	r1, [sp, #36]	@ 0x24
 8013e08:	e7da      	b.n	8013dc0 <_dtoa_r+0x230>
 8013e0a:	2201      	movs	r2, #1
 8013e0c:	9208      	str	r2, [sp, #32]
 8013e0e:	e7f5      	b.n	8013dfc <_dtoa_r+0x26c>
 8013e10:	f04f 0b01 	mov.w	fp, #1
 8013e14:	46da      	mov	sl, fp
 8013e16:	465a      	mov	r2, fp
 8013e18:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8013e1c:	e7d0      	b.n	8013dc0 <_dtoa_r+0x230>
 8013e1e:	3101      	adds	r1, #1
 8013e20:	0040      	lsls	r0, r0, #1
 8013e22:	e7d1      	b.n	8013dc8 <_dtoa_r+0x238>
 8013e24:	f3af 8000 	nop.w
 8013e28:	636f4361 	.word	0x636f4361
 8013e2c:	3fd287a7 	.word	0x3fd287a7
 8013e30:	8b60c8b3 	.word	0x8b60c8b3
 8013e34:	3fc68a28 	.word	0x3fc68a28
 8013e38:	509f79fb 	.word	0x509f79fb
 8013e3c:	3fd34413 	.word	0x3fd34413
 8013e40:	0801e10a 	.word	0x0801e10a
 8013e44:	0801e121 	.word	0x0801e121
 8013e48:	7ff00000 	.word	0x7ff00000
 8013e4c:	0801e106 	.word	0x0801e106
 8013e50:	0801e0d5 	.word	0x0801e0d5
 8013e54:	0801e0d4 	.word	0x0801e0d4
 8013e58:	0801e2d0 	.word	0x0801e2d0
 8013e5c:	0801e179 	.word	0x0801e179
 8013e60:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8013e64:	f1ba 0f0e 	cmp.w	sl, #14
 8013e68:	6010      	str	r0, [r2, #0]
 8013e6a:	d86e      	bhi.n	8013f4a <_dtoa_r+0x3ba>
 8013e6c:	2c00      	cmp	r4, #0
 8013e6e:	d06c      	beq.n	8013f4a <_dtoa_r+0x3ba>
 8013e70:	f1b8 0f00 	cmp.w	r8, #0
 8013e74:	f340 80b4 	ble.w	8013fe0 <_dtoa_r+0x450>
 8013e78:	4ac8      	ldr	r2, [pc, #800]	@ (801419c <_dtoa_r+0x60c>)
 8013e7a:	f008 010f 	and.w	r1, r8, #15
 8013e7e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8013e82:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8013e86:	ed92 7b00 	vldr	d7, [r2]
 8013e8a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8013e8e:	f000 809b 	beq.w	8013fc8 <_dtoa_r+0x438>
 8013e92:	4ac3      	ldr	r2, [pc, #780]	@ (80141a0 <_dtoa_r+0x610>)
 8013e94:	ed92 6b08 	vldr	d6, [r2, #32]
 8013e98:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8013e9c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013ea0:	f001 010f 	and.w	r1, r1, #15
 8013ea4:	2203      	movs	r2, #3
 8013ea6:	48be      	ldr	r0, [pc, #760]	@ (80141a0 <_dtoa_r+0x610>)
 8013ea8:	2900      	cmp	r1, #0
 8013eaa:	f040 808f 	bne.w	8013fcc <_dtoa_r+0x43c>
 8013eae:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013eb2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013eb6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013eba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013ebc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013ec0:	2900      	cmp	r1, #0
 8013ec2:	f000 80b3 	beq.w	801402c <_dtoa_r+0x49c>
 8013ec6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8013eca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ed2:	f140 80ab 	bpl.w	801402c <_dtoa_r+0x49c>
 8013ed6:	f1ba 0f00 	cmp.w	sl, #0
 8013eda:	f000 80a7 	beq.w	801402c <_dtoa_r+0x49c>
 8013ede:	f1bb 0f00 	cmp.w	fp, #0
 8013ee2:	dd30      	ble.n	8013f46 <_dtoa_r+0x3b6>
 8013ee4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8013ee8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013eec:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013ef0:	f108 31ff 	add.w	r1, r8, #4294967295
 8013ef4:	9105      	str	r1, [sp, #20]
 8013ef6:	3201      	adds	r2, #1
 8013ef8:	465c      	mov	r4, fp
 8013efa:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013efe:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8013f02:	ee07 2a90 	vmov	s15, r2
 8013f06:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013f0a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8013f0e:	ee15 2a90 	vmov	r2, s11
 8013f12:	ec51 0b15 	vmov	r0, r1, d5
 8013f16:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8013f1a:	2c00      	cmp	r4, #0
 8013f1c:	f040 808a 	bne.w	8014034 <_dtoa_r+0x4a4>
 8013f20:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8013f24:	ee36 6b47 	vsub.f64	d6, d6, d7
 8013f28:	ec41 0b17 	vmov	d7, r0, r1
 8013f2c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f34:	f300 826a 	bgt.w	801440c <_dtoa_r+0x87c>
 8013f38:	eeb1 7b47 	vneg.f64	d7, d7
 8013f3c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f44:	d423      	bmi.n	8013f8e <_dtoa_r+0x3fe>
 8013f46:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013f4a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013f4c:	2a00      	cmp	r2, #0
 8013f4e:	f2c0 8129 	blt.w	80141a4 <_dtoa_r+0x614>
 8013f52:	f1b8 0f0e 	cmp.w	r8, #14
 8013f56:	f300 8125 	bgt.w	80141a4 <_dtoa_r+0x614>
 8013f5a:	4b90      	ldr	r3, [pc, #576]	@ (801419c <_dtoa_r+0x60c>)
 8013f5c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013f60:	ed93 6b00 	vldr	d6, [r3]
 8013f64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	f280 80c8 	bge.w	80140fc <_dtoa_r+0x56c>
 8013f6c:	f1ba 0f00 	cmp.w	sl, #0
 8013f70:	f300 80c4 	bgt.w	80140fc <_dtoa_r+0x56c>
 8013f74:	d10b      	bne.n	8013f8e <_dtoa_r+0x3fe>
 8013f76:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8013f7a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8013f7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013f82:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f8a:	f2c0 823c 	blt.w	8014406 <_dtoa_r+0x876>
 8013f8e:	2400      	movs	r4, #0
 8013f90:	4625      	mov	r5, r4
 8013f92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f94:	43db      	mvns	r3, r3
 8013f96:	9305      	str	r3, [sp, #20]
 8013f98:	463e      	mov	r6, r7
 8013f9a:	f04f 0800 	mov.w	r8, #0
 8013f9e:	4621      	mov	r1, r4
 8013fa0:	4648      	mov	r0, r9
 8013fa2:	f000 fc93 	bl	80148cc <_Bfree>
 8013fa6:	2d00      	cmp	r5, #0
 8013fa8:	f000 80a2 	beq.w	80140f0 <_dtoa_r+0x560>
 8013fac:	f1b8 0f00 	cmp.w	r8, #0
 8013fb0:	d005      	beq.n	8013fbe <_dtoa_r+0x42e>
 8013fb2:	45a8      	cmp	r8, r5
 8013fb4:	d003      	beq.n	8013fbe <_dtoa_r+0x42e>
 8013fb6:	4641      	mov	r1, r8
 8013fb8:	4648      	mov	r0, r9
 8013fba:	f000 fc87 	bl	80148cc <_Bfree>
 8013fbe:	4629      	mov	r1, r5
 8013fc0:	4648      	mov	r0, r9
 8013fc2:	f000 fc83 	bl	80148cc <_Bfree>
 8013fc6:	e093      	b.n	80140f0 <_dtoa_r+0x560>
 8013fc8:	2202      	movs	r2, #2
 8013fca:	e76c      	b.n	8013ea6 <_dtoa_r+0x316>
 8013fcc:	07cc      	lsls	r4, r1, #31
 8013fce:	d504      	bpl.n	8013fda <_dtoa_r+0x44a>
 8013fd0:	ed90 6b00 	vldr	d6, [r0]
 8013fd4:	3201      	adds	r2, #1
 8013fd6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013fda:	1049      	asrs	r1, r1, #1
 8013fdc:	3008      	adds	r0, #8
 8013fde:	e763      	b.n	8013ea8 <_dtoa_r+0x318>
 8013fe0:	d022      	beq.n	8014028 <_dtoa_r+0x498>
 8013fe2:	f1c8 0100 	rsb	r1, r8, #0
 8013fe6:	4a6d      	ldr	r2, [pc, #436]	@ (801419c <_dtoa_r+0x60c>)
 8013fe8:	f001 000f 	and.w	r0, r1, #15
 8013fec:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8013ff0:	ed92 7b00 	vldr	d7, [r2]
 8013ff4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8013ff8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013ffc:	4868      	ldr	r0, [pc, #416]	@ (80141a0 <_dtoa_r+0x610>)
 8013ffe:	1109      	asrs	r1, r1, #4
 8014000:	2400      	movs	r4, #0
 8014002:	2202      	movs	r2, #2
 8014004:	b929      	cbnz	r1, 8014012 <_dtoa_r+0x482>
 8014006:	2c00      	cmp	r4, #0
 8014008:	f43f af57 	beq.w	8013eba <_dtoa_r+0x32a>
 801400c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014010:	e753      	b.n	8013eba <_dtoa_r+0x32a>
 8014012:	07ce      	lsls	r6, r1, #31
 8014014:	d505      	bpl.n	8014022 <_dtoa_r+0x492>
 8014016:	ed90 6b00 	vldr	d6, [r0]
 801401a:	3201      	adds	r2, #1
 801401c:	2401      	movs	r4, #1
 801401e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014022:	1049      	asrs	r1, r1, #1
 8014024:	3008      	adds	r0, #8
 8014026:	e7ed      	b.n	8014004 <_dtoa_r+0x474>
 8014028:	2202      	movs	r2, #2
 801402a:	e746      	b.n	8013eba <_dtoa_r+0x32a>
 801402c:	f8cd 8014 	str.w	r8, [sp, #20]
 8014030:	4654      	mov	r4, sl
 8014032:	e762      	b.n	8013efa <_dtoa_r+0x36a>
 8014034:	4a59      	ldr	r2, [pc, #356]	@ (801419c <_dtoa_r+0x60c>)
 8014036:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801403a:	ed12 4b02 	vldr	d4, [r2, #-8]
 801403e:	9a08      	ldr	r2, [sp, #32]
 8014040:	ec41 0b17 	vmov	d7, r0, r1
 8014044:	443c      	add	r4, r7
 8014046:	b34a      	cbz	r2, 801409c <_dtoa_r+0x50c>
 8014048:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801404c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8014050:	463e      	mov	r6, r7
 8014052:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8014056:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801405a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801405e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014062:	ee14 2a90 	vmov	r2, s9
 8014066:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801406a:	3230      	adds	r2, #48	@ 0x30
 801406c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014070:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014078:	f806 2b01 	strb.w	r2, [r6], #1
 801407c:	d438      	bmi.n	80140f0 <_dtoa_r+0x560>
 801407e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8014082:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8014086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801408a:	d46e      	bmi.n	801416a <_dtoa_r+0x5da>
 801408c:	42a6      	cmp	r6, r4
 801408e:	f43f af5a 	beq.w	8013f46 <_dtoa_r+0x3b6>
 8014092:	ee27 7b03 	vmul.f64	d7, d7, d3
 8014096:	ee26 6b03 	vmul.f64	d6, d6, d3
 801409a:	e7e0      	b.n	801405e <_dtoa_r+0x4ce>
 801409c:	4621      	mov	r1, r4
 801409e:	463e      	mov	r6, r7
 80140a0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80140a4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80140a8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80140ac:	ee14 2a90 	vmov	r2, s9
 80140b0:	3230      	adds	r2, #48	@ 0x30
 80140b2:	f806 2b01 	strb.w	r2, [r6], #1
 80140b6:	42a6      	cmp	r6, r4
 80140b8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80140bc:	ee36 6b45 	vsub.f64	d6, d6, d5
 80140c0:	d119      	bne.n	80140f6 <_dtoa_r+0x566>
 80140c2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80140c6:	ee37 4b05 	vadd.f64	d4, d7, d5
 80140ca:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80140ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140d2:	dc4a      	bgt.n	801416a <_dtoa_r+0x5da>
 80140d4:	ee35 5b47 	vsub.f64	d5, d5, d7
 80140d8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80140dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140e0:	f57f af31 	bpl.w	8013f46 <_dtoa_r+0x3b6>
 80140e4:	460e      	mov	r6, r1
 80140e6:	3901      	subs	r1, #1
 80140e8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80140ec:	2b30      	cmp	r3, #48	@ 0x30
 80140ee:	d0f9      	beq.n	80140e4 <_dtoa_r+0x554>
 80140f0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80140f4:	e027      	b.n	8014146 <_dtoa_r+0x5b6>
 80140f6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80140fa:	e7d5      	b.n	80140a8 <_dtoa_r+0x518>
 80140fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014100:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8014104:	463e      	mov	r6, r7
 8014106:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801410a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801410e:	ee15 3a10 	vmov	r3, s10
 8014112:	3330      	adds	r3, #48	@ 0x30
 8014114:	f806 3b01 	strb.w	r3, [r6], #1
 8014118:	1bf3      	subs	r3, r6, r7
 801411a:	459a      	cmp	sl, r3
 801411c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8014120:	eea3 7b46 	vfms.f64	d7, d3, d6
 8014124:	d132      	bne.n	801418c <_dtoa_r+0x5fc>
 8014126:	ee37 7b07 	vadd.f64	d7, d7, d7
 801412a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801412e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014132:	dc18      	bgt.n	8014166 <_dtoa_r+0x5d6>
 8014134:	eeb4 7b46 	vcmp.f64	d7, d6
 8014138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801413c:	d103      	bne.n	8014146 <_dtoa_r+0x5b6>
 801413e:	ee15 3a10 	vmov	r3, s10
 8014142:	07db      	lsls	r3, r3, #31
 8014144:	d40f      	bmi.n	8014166 <_dtoa_r+0x5d6>
 8014146:	9901      	ldr	r1, [sp, #4]
 8014148:	4648      	mov	r0, r9
 801414a:	f000 fbbf 	bl	80148cc <_Bfree>
 801414e:	2300      	movs	r3, #0
 8014150:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014152:	7033      	strb	r3, [r6, #0]
 8014154:	f108 0301 	add.w	r3, r8, #1
 8014158:	6013      	str	r3, [r2, #0]
 801415a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801415c:	2b00      	cmp	r3, #0
 801415e:	f000 824b 	beq.w	80145f8 <_dtoa_r+0xa68>
 8014162:	601e      	str	r6, [r3, #0]
 8014164:	e248      	b.n	80145f8 <_dtoa_r+0xa68>
 8014166:	f8cd 8014 	str.w	r8, [sp, #20]
 801416a:	4633      	mov	r3, r6
 801416c:	461e      	mov	r6, r3
 801416e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014172:	2a39      	cmp	r2, #57	@ 0x39
 8014174:	d106      	bne.n	8014184 <_dtoa_r+0x5f4>
 8014176:	429f      	cmp	r7, r3
 8014178:	d1f8      	bne.n	801416c <_dtoa_r+0x5dc>
 801417a:	9a05      	ldr	r2, [sp, #20]
 801417c:	3201      	adds	r2, #1
 801417e:	9205      	str	r2, [sp, #20]
 8014180:	2230      	movs	r2, #48	@ 0x30
 8014182:	703a      	strb	r2, [r7, #0]
 8014184:	781a      	ldrb	r2, [r3, #0]
 8014186:	3201      	adds	r2, #1
 8014188:	701a      	strb	r2, [r3, #0]
 801418a:	e7b1      	b.n	80140f0 <_dtoa_r+0x560>
 801418c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8014190:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014198:	d1b5      	bne.n	8014106 <_dtoa_r+0x576>
 801419a:	e7d4      	b.n	8014146 <_dtoa_r+0x5b6>
 801419c:	0801e2d0 	.word	0x0801e2d0
 80141a0:	0801e2a8 	.word	0x0801e2a8
 80141a4:	9908      	ldr	r1, [sp, #32]
 80141a6:	2900      	cmp	r1, #0
 80141a8:	f000 80e9 	beq.w	801437e <_dtoa_r+0x7ee>
 80141ac:	9907      	ldr	r1, [sp, #28]
 80141ae:	2901      	cmp	r1, #1
 80141b0:	f300 80cb 	bgt.w	801434a <_dtoa_r+0x7ba>
 80141b4:	2d00      	cmp	r5, #0
 80141b6:	f000 80c4 	beq.w	8014342 <_dtoa_r+0x7b2>
 80141ba:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80141be:	9e04      	ldr	r6, [sp, #16]
 80141c0:	461c      	mov	r4, r3
 80141c2:	9305      	str	r3, [sp, #20]
 80141c4:	9b04      	ldr	r3, [sp, #16]
 80141c6:	4413      	add	r3, r2
 80141c8:	9304      	str	r3, [sp, #16]
 80141ca:	9b06      	ldr	r3, [sp, #24]
 80141cc:	2101      	movs	r1, #1
 80141ce:	4413      	add	r3, r2
 80141d0:	4648      	mov	r0, r9
 80141d2:	9306      	str	r3, [sp, #24]
 80141d4:	f000 fc78 	bl	8014ac8 <__i2b>
 80141d8:	9b05      	ldr	r3, [sp, #20]
 80141da:	4605      	mov	r5, r0
 80141dc:	b166      	cbz	r6, 80141f8 <_dtoa_r+0x668>
 80141de:	9a06      	ldr	r2, [sp, #24]
 80141e0:	2a00      	cmp	r2, #0
 80141e2:	dd09      	ble.n	80141f8 <_dtoa_r+0x668>
 80141e4:	42b2      	cmp	r2, r6
 80141e6:	9904      	ldr	r1, [sp, #16]
 80141e8:	bfa8      	it	ge
 80141ea:	4632      	movge	r2, r6
 80141ec:	1a89      	subs	r1, r1, r2
 80141ee:	9104      	str	r1, [sp, #16]
 80141f0:	9906      	ldr	r1, [sp, #24]
 80141f2:	1ab6      	subs	r6, r6, r2
 80141f4:	1a8a      	subs	r2, r1, r2
 80141f6:	9206      	str	r2, [sp, #24]
 80141f8:	b30b      	cbz	r3, 801423e <_dtoa_r+0x6ae>
 80141fa:	9a08      	ldr	r2, [sp, #32]
 80141fc:	2a00      	cmp	r2, #0
 80141fe:	f000 80c5 	beq.w	801438c <_dtoa_r+0x7fc>
 8014202:	2c00      	cmp	r4, #0
 8014204:	f000 80bf 	beq.w	8014386 <_dtoa_r+0x7f6>
 8014208:	4629      	mov	r1, r5
 801420a:	4622      	mov	r2, r4
 801420c:	4648      	mov	r0, r9
 801420e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014210:	f000 fd12 	bl	8014c38 <__pow5mult>
 8014214:	9a01      	ldr	r2, [sp, #4]
 8014216:	4601      	mov	r1, r0
 8014218:	4605      	mov	r5, r0
 801421a:	4648      	mov	r0, r9
 801421c:	f000 fc6a 	bl	8014af4 <__multiply>
 8014220:	9901      	ldr	r1, [sp, #4]
 8014222:	9005      	str	r0, [sp, #20]
 8014224:	4648      	mov	r0, r9
 8014226:	f000 fb51 	bl	80148cc <_Bfree>
 801422a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801422c:	1b1b      	subs	r3, r3, r4
 801422e:	f000 80b0 	beq.w	8014392 <_dtoa_r+0x802>
 8014232:	9905      	ldr	r1, [sp, #20]
 8014234:	461a      	mov	r2, r3
 8014236:	4648      	mov	r0, r9
 8014238:	f000 fcfe 	bl	8014c38 <__pow5mult>
 801423c:	9001      	str	r0, [sp, #4]
 801423e:	2101      	movs	r1, #1
 8014240:	4648      	mov	r0, r9
 8014242:	f000 fc41 	bl	8014ac8 <__i2b>
 8014246:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014248:	4604      	mov	r4, r0
 801424a:	2b00      	cmp	r3, #0
 801424c:	f000 81da 	beq.w	8014604 <_dtoa_r+0xa74>
 8014250:	461a      	mov	r2, r3
 8014252:	4601      	mov	r1, r0
 8014254:	4648      	mov	r0, r9
 8014256:	f000 fcef 	bl	8014c38 <__pow5mult>
 801425a:	9b07      	ldr	r3, [sp, #28]
 801425c:	2b01      	cmp	r3, #1
 801425e:	4604      	mov	r4, r0
 8014260:	f300 80a0 	bgt.w	80143a4 <_dtoa_r+0x814>
 8014264:	9b02      	ldr	r3, [sp, #8]
 8014266:	2b00      	cmp	r3, #0
 8014268:	f040 8096 	bne.w	8014398 <_dtoa_r+0x808>
 801426c:	9b03      	ldr	r3, [sp, #12]
 801426e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8014272:	2a00      	cmp	r2, #0
 8014274:	f040 8092 	bne.w	801439c <_dtoa_r+0x80c>
 8014278:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801427c:	0d12      	lsrs	r2, r2, #20
 801427e:	0512      	lsls	r2, r2, #20
 8014280:	2a00      	cmp	r2, #0
 8014282:	f000 808d 	beq.w	80143a0 <_dtoa_r+0x810>
 8014286:	9b04      	ldr	r3, [sp, #16]
 8014288:	3301      	adds	r3, #1
 801428a:	9304      	str	r3, [sp, #16]
 801428c:	9b06      	ldr	r3, [sp, #24]
 801428e:	3301      	adds	r3, #1
 8014290:	9306      	str	r3, [sp, #24]
 8014292:	2301      	movs	r3, #1
 8014294:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014296:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014298:	2b00      	cmp	r3, #0
 801429a:	f000 81b9 	beq.w	8014610 <_dtoa_r+0xa80>
 801429e:	6922      	ldr	r2, [r4, #16]
 80142a0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80142a4:	6910      	ldr	r0, [r2, #16]
 80142a6:	f000 fbc3 	bl	8014a30 <__hi0bits>
 80142aa:	f1c0 0020 	rsb	r0, r0, #32
 80142ae:	9b06      	ldr	r3, [sp, #24]
 80142b0:	4418      	add	r0, r3
 80142b2:	f010 001f 	ands.w	r0, r0, #31
 80142b6:	f000 8081 	beq.w	80143bc <_dtoa_r+0x82c>
 80142ba:	f1c0 0220 	rsb	r2, r0, #32
 80142be:	2a04      	cmp	r2, #4
 80142c0:	dd73      	ble.n	80143aa <_dtoa_r+0x81a>
 80142c2:	9b04      	ldr	r3, [sp, #16]
 80142c4:	f1c0 001c 	rsb	r0, r0, #28
 80142c8:	4403      	add	r3, r0
 80142ca:	9304      	str	r3, [sp, #16]
 80142cc:	9b06      	ldr	r3, [sp, #24]
 80142ce:	4406      	add	r6, r0
 80142d0:	4403      	add	r3, r0
 80142d2:	9306      	str	r3, [sp, #24]
 80142d4:	9b04      	ldr	r3, [sp, #16]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	dd05      	ble.n	80142e6 <_dtoa_r+0x756>
 80142da:	9901      	ldr	r1, [sp, #4]
 80142dc:	461a      	mov	r2, r3
 80142de:	4648      	mov	r0, r9
 80142e0:	f000 fd04 	bl	8014cec <__lshift>
 80142e4:	9001      	str	r0, [sp, #4]
 80142e6:	9b06      	ldr	r3, [sp, #24]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	dd05      	ble.n	80142f8 <_dtoa_r+0x768>
 80142ec:	4621      	mov	r1, r4
 80142ee:	461a      	mov	r2, r3
 80142f0:	4648      	mov	r0, r9
 80142f2:	f000 fcfb 	bl	8014cec <__lshift>
 80142f6:	4604      	mov	r4, r0
 80142f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d060      	beq.n	80143c0 <_dtoa_r+0x830>
 80142fe:	9801      	ldr	r0, [sp, #4]
 8014300:	4621      	mov	r1, r4
 8014302:	f000 fd5f 	bl	8014dc4 <__mcmp>
 8014306:	2800      	cmp	r0, #0
 8014308:	da5a      	bge.n	80143c0 <_dtoa_r+0x830>
 801430a:	f108 33ff 	add.w	r3, r8, #4294967295
 801430e:	9305      	str	r3, [sp, #20]
 8014310:	9901      	ldr	r1, [sp, #4]
 8014312:	2300      	movs	r3, #0
 8014314:	220a      	movs	r2, #10
 8014316:	4648      	mov	r0, r9
 8014318:	f000 fafa 	bl	8014910 <__multadd>
 801431c:	9b08      	ldr	r3, [sp, #32]
 801431e:	9001      	str	r0, [sp, #4]
 8014320:	2b00      	cmp	r3, #0
 8014322:	f000 8177 	beq.w	8014614 <_dtoa_r+0xa84>
 8014326:	4629      	mov	r1, r5
 8014328:	2300      	movs	r3, #0
 801432a:	220a      	movs	r2, #10
 801432c:	4648      	mov	r0, r9
 801432e:	f000 faef 	bl	8014910 <__multadd>
 8014332:	f1bb 0f00 	cmp.w	fp, #0
 8014336:	4605      	mov	r5, r0
 8014338:	dc6e      	bgt.n	8014418 <_dtoa_r+0x888>
 801433a:	9b07      	ldr	r3, [sp, #28]
 801433c:	2b02      	cmp	r3, #2
 801433e:	dc48      	bgt.n	80143d2 <_dtoa_r+0x842>
 8014340:	e06a      	b.n	8014418 <_dtoa_r+0x888>
 8014342:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014344:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8014348:	e739      	b.n	80141be <_dtoa_r+0x62e>
 801434a:	f10a 34ff 	add.w	r4, sl, #4294967295
 801434e:	42a3      	cmp	r3, r4
 8014350:	db07      	blt.n	8014362 <_dtoa_r+0x7d2>
 8014352:	f1ba 0f00 	cmp.w	sl, #0
 8014356:	eba3 0404 	sub.w	r4, r3, r4
 801435a:	db0b      	blt.n	8014374 <_dtoa_r+0x7e4>
 801435c:	9e04      	ldr	r6, [sp, #16]
 801435e:	4652      	mov	r2, sl
 8014360:	e72f      	b.n	80141c2 <_dtoa_r+0x632>
 8014362:	1ae2      	subs	r2, r4, r3
 8014364:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014366:	9e04      	ldr	r6, [sp, #16]
 8014368:	4413      	add	r3, r2
 801436a:	930a      	str	r3, [sp, #40]	@ 0x28
 801436c:	4652      	mov	r2, sl
 801436e:	4623      	mov	r3, r4
 8014370:	2400      	movs	r4, #0
 8014372:	e726      	b.n	80141c2 <_dtoa_r+0x632>
 8014374:	9a04      	ldr	r2, [sp, #16]
 8014376:	eba2 060a 	sub.w	r6, r2, sl
 801437a:	2200      	movs	r2, #0
 801437c:	e721      	b.n	80141c2 <_dtoa_r+0x632>
 801437e:	9e04      	ldr	r6, [sp, #16]
 8014380:	9d08      	ldr	r5, [sp, #32]
 8014382:	461c      	mov	r4, r3
 8014384:	e72a      	b.n	80141dc <_dtoa_r+0x64c>
 8014386:	9a01      	ldr	r2, [sp, #4]
 8014388:	9205      	str	r2, [sp, #20]
 801438a:	e752      	b.n	8014232 <_dtoa_r+0x6a2>
 801438c:	9901      	ldr	r1, [sp, #4]
 801438e:	461a      	mov	r2, r3
 8014390:	e751      	b.n	8014236 <_dtoa_r+0x6a6>
 8014392:	9b05      	ldr	r3, [sp, #20]
 8014394:	9301      	str	r3, [sp, #4]
 8014396:	e752      	b.n	801423e <_dtoa_r+0x6ae>
 8014398:	2300      	movs	r3, #0
 801439a:	e77b      	b.n	8014294 <_dtoa_r+0x704>
 801439c:	9b02      	ldr	r3, [sp, #8]
 801439e:	e779      	b.n	8014294 <_dtoa_r+0x704>
 80143a0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80143a2:	e778      	b.n	8014296 <_dtoa_r+0x706>
 80143a4:	2300      	movs	r3, #0
 80143a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80143a8:	e779      	b.n	801429e <_dtoa_r+0x70e>
 80143aa:	d093      	beq.n	80142d4 <_dtoa_r+0x744>
 80143ac:	9b04      	ldr	r3, [sp, #16]
 80143ae:	321c      	adds	r2, #28
 80143b0:	4413      	add	r3, r2
 80143b2:	9304      	str	r3, [sp, #16]
 80143b4:	9b06      	ldr	r3, [sp, #24]
 80143b6:	4416      	add	r6, r2
 80143b8:	4413      	add	r3, r2
 80143ba:	e78a      	b.n	80142d2 <_dtoa_r+0x742>
 80143bc:	4602      	mov	r2, r0
 80143be:	e7f5      	b.n	80143ac <_dtoa_r+0x81c>
 80143c0:	f1ba 0f00 	cmp.w	sl, #0
 80143c4:	f8cd 8014 	str.w	r8, [sp, #20]
 80143c8:	46d3      	mov	fp, sl
 80143ca:	dc21      	bgt.n	8014410 <_dtoa_r+0x880>
 80143cc:	9b07      	ldr	r3, [sp, #28]
 80143ce:	2b02      	cmp	r3, #2
 80143d0:	dd1e      	ble.n	8014410 <_dtoa_r+0x880>
 80143d2:	f1bb 0f00 	cmp.w	fp, #0
 80143d6:	f47f addc 	bne.w	8013f92 <_dtoa_r+0x402>
 80143da:	4621      	mov	r1, r4
 80143dc:	465b      	mov	r3, fp
 80143de:	2205      	movs	r2, #5
 80143e0:	4648      	mov	r0, r9
 80143e2:	f000 fa95 	bl	8014910 <__multadd>
 80143e6:	4601      	mov	r1, r0
 80143e8:	4604      	mov	r4, r0
 80143ea:	9801      	ldr	r0, [sp, #4]
 80143ec:	f000 fcea 	bl	8014dc4 <__mcmp>
 80143f0:	2800      	cmp	r0, #0
 80143f2:	f77f adce 	ble.w	8013f92 <_dtoa_r+0x402>
 80143f6:	463e      	mov	r6, r7
 80143f8:	2331      	movs	r3, #49	@ 0x31
 80143fa:	f806 3b01 	strb.w	r3, [r6], #1
 80143fe:	9b05      	ldr	r3, [sp, #20]
 8014400:	3301      	adds	r3, #1
 8014402:	9305      	str	r3, [sp, #20]
 8014404:	e5c9      	b.n	8013f9a <_dtoa_r+0x40a>
 8014406:	f8cd 8014 	str.w	r8, [sp, #20]
 801440a:	4654      	mov	r4, sl
 801440c:	4625      	mov	r5, r4
 801440e:	e7f2      	b.n	80143f6 <_dtoa_r+0x866>
 8014410:	9b08      	ldr	r3, [sp, #32]
 8014412:	2b00      	cmp	r3, #0
 8014414:	f000 8102 	beq.w	801461c <_dtoa_r+0xa8c>
 8014418:	2e00      	cmp	r6, #0
 801441a:	dd05      	ble.n	8014428 <_dtoa_r+0x898>
 801441c:	4629      	mov	r1, r5
 801441e:	4632      	mov	r2, r6
 8014420:	4648      	mov	r0, r9
 8014422:	f000 fc63 	bl	8014cec <__lshift>
 8014426:	4605      	mov	r5, r0
 8014428:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801442a:	2b00      	cmp	r3, #0
 801442c:	d058      	beq.n	80144e0 <_dtoa_r+0x950>
 801442e:	6869      	ldr	r1, [r5, #4]
 8014430:	4648      	mov	r0, r9
 8014432:	f000 fa0b 	bl	801484c <_Balloc>
 8014436:	4606      	mov	r6, r0
 8014438:	b928      	cbnz	r0, 8014446 <_dtoa_r+0x8b6>
 801443a:	4b82      	ldr	r3, [pc, #520]	@ (8014644 <_dtoa_r+0xab4>)
 801443c:	4602      	mov	r2, r0
 801443e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8014442:	f7ff bbbe 	b.w	8013bc2 <_dtoa_r+0x32>
 8014446:	692a      	ldr	r2, [r5, #16]
 8014448:	3202      	adds	r2, #2
 801444a:	0092      	lsls	r2, r2, #2
 801444c:	f105 010c 	add.w	r1, r5, #12
 8014450:	300c      	adds	r0, #12
 8014452:	f001 ff19 	bl	8016288 <memcpy>
 8014456:	2201      	movs	r2, #1
 8014458:	4631      	mov	r1, r6
 801445a:	4648      	mov	r0, r9
 801445c:	f000 fc46 	bl	8014cec <__lshift>
 8014460:	1c7b      	adds	r3, r7, #1
 8014462:	9304      	str	r3, [sp, #16]
 8014464:	eb07 030b 	add.w	r3, r7, fp
 8014468:	9309      	str	r3, [sp, #36]	@ 0x24
 801446a:	9b02      	ldr	r3, [sp, #8]
 801446c:	f003 0301 	and.w	r3, r3, #1
 8014470:	46a8      	mov	r8, r5
 8014472:	9308      	str	r3, [sp, #32]
 8014474:	4605      	mov	r5, r0
 8014476:	9b04      	ldr	r3, [sp, #16]
 8014478:	9801      	ldr	r0, [sp, #4]
 801447a:	4621      	mov	r1, r4
 801447c:	f103 3bff 	add.w	fp, r3, #4294967295
 8014480:	f7ff fafc 	bl	8013a7c <quorem>
 8014484:	4641      	mov	r1, r8
 8014486:	9002      	str	r0, [sp, #8]
 8014488:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801448c:	9801      	ldr	r0, [sp, #4]
 801448e:	f000 fc99 	bl	8014dc4 <__mcmp>
 8014492:	462a      	mov	r2, r5
 8014494:	9006      	str	r0, [sp, #24]
 8014496:	4621      	mov	r1, r4
 8014498:	4648      	mov	r0, r9
 801449a:	f000 fcaf 	bl	8014dfc <__mdiff>
 801449e:	68c2      	ldr	r2, [r0, #12]
 80144a0:	4606      	mov	r6, r0
 80144a2:	b9fa      	cbnz	r2, 80144e4 <_dtoa_r+0x954>
 80144a4:	4601      	mov	r1, r0
 80144a6:	9801      	ldr	r0, [sp, #4]
 80144a8:	f000 fc8c 	bl	8014dc4 <__mcmp>
 80144ac:	4602      	mov	r2, r0
 80144ae:	4631      	mov	r1, r6
 80144b0:	4648      	mov	r0, r9
 80144b2:	920a      	str	r2, [sp, #40]	@ 0x28
 80144b4:	f000 fa0a 	bl	80148cc <_Bfree>
 80144b8:	9b07      	ldr	r3, [sp, #28]
 80144ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80144bc:	9e04      	ldr	r6, [sp, #16]
 80144be:	ea42 0103 	orr.w	r1, r2, r3
 80144c2:	9b08      	ldr	r3, [sp, #32]
 80144c4:	4319      	orrs	r1, r3
 80144c6:	d10f      	bne.n	80144e8 <_dtoa_r+0x958>
 80144c8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80144cc:	d028      	beq.n	8014520 <_dtoa_r+0x990>
 80144ce:	9b06      	ldr	r3, [sp, #24]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	dd02      	ble.n	80144da <_dtoa_r+0x94a>
 80144d4:	9b02      	ldr	r3, [sp, #8]
 80144d6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80144da:	f88b a000 	strb.w	sl, [fp]
 80144de:	e55e      	b.n	8013f9e <_dtoa_r+0x40e>
 80144e0:	4628      	mov	r0, r5
 80144e2:	e7bd      	b.n	8014460 <_dtoa_r+0x8d0>
 80144e4:	2201      	movs	r2, #1
 80144e6:	e7e2      	b.n	80144ae <_dtoa_r+0x91e>
 80144e8:	9b06      	ldr	r3, [sp, #24]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	db04      	blt.n	80144f8 <_dtoa_r+0x968>
 80144ee:	9907      	ldr	r1, [sp, #28]
 80144f0:	430b      	orrs	r3, r1
 80144f2:	9908      	ldr	r1, [sp, #32]
 80144f4:	430b      	orrs	r3, r1
 80144f6:	d120      	bne.n	801453a <_dtoa_r+0x9aa>
 80144f8:	2a00      	cmp	r2, #0
 80144fa:	ddee      	ble.n	80144da <_dtoa_r+0x94a>
 80144fc:	9901      	ldr	r1, [sp, #4]
 80144fe:	2201      	movs	r2, #1
 8014500:	4648      	mov	r0, r9
 8014502:	f000 fbf3 	bl	8014cec <__lshift>
 8014506:	4621      	mov	r1, r4
 8014508:	9001      	str	r0, [sp, #4]
 801450a:	f000 fc5b 	bl	8014dc4 <__mcmp>
 801450e:	2800      	cmp	r0, #0
 8014510:	dc03      	bgt.n	801451a <_dtoa_r+0x98a>
 8014512:	d1e2      	bne.n	80144da <_dtoa_r+0x94a>
 8014514:	f01a 0f01 	tst.w	sl, #1
 8014518:	d0df      	beq.n	80144da <_dtoa_r+0x94a>
 801451a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801451e:	d1d9      	bne.n	80144d4 <_dtoa_r+0x944>
 8014520:	2339      	movs	r3, #57	@ 0x39
 8014522:	f88b 3000 	strb.w	r3, [fp]
 8014526:	4633      	mov	r3, r6
 8014528:	461e      	mov	r6, r3
 801452a:	3b01      	subs	r3, #1
 801452c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014530:	2a39      	cmp	r2, #57	@ 0x39
 8014532:	d052      	beq.n	80145da <_dtoa_r+0xa4a>
 8014534:	3201      	adds	r2, #1
 8014536:	701a      	strb	r2, [r3, #0]
 8014538:	e531      	b.n	8013f9e <_dtoa_r+0x40e>
 801453a:	2a00      	cmp	r2, #0
 801453c:	dd07      	ble.n	801454e <_dtoa_r+0x9be>
 801453e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8014542:	d0ed      	beq.n	8014520 <_dtoa_r+0x990>
 8014544:	f10a 0301 	add.w	r3, sl, #1
 8014548:	f88b 3000 	strb.w	r3, [fp]
 801454c:	e527      	b.n	8013f9e <_dtoa_r+0x40e>
 801454e:	9b04      	ldr	r3, [sp, #16]
 8014550:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014552:	f803 ac01 	strb.w	sl, [r3, #-1]
 8014556:	4293      	cmp	r3, r2
 8014558:	d029      	beq.n	80145ae <_dtoa_r+0xa1e>
 801455a:	9901      	ldr	r1, [sp, #4]
 801455c:	2300      	movs	r3, #0
 801455e:	220a      	movs	r2, #10
 8014560:	4648      	mov	r0, r9
 8014562:	f000 f9d5 	bl	8014910 <__multadd>
 8014566:	45a8      	cmp	r8, r5
 8014568:	9001      	str	r0, [sp, #4]
 801456a:	f04f 0300 	mov.w	r3, #0
 801456e:	f04f 020a 	mov.w	r2, #10
 8014572:	4641      	mov	r1, r8
 8014574:	4648      	mov	r0, r9
 8014576:	d107      	bne.n	8014588 <_dtoa_r+0x9f8>
 8014578:	f000 f9ca 	bl	8014910 <__multadd>
 801457c:	4680      	mov	r8, r0
 801457e:	4605      	mov	r5, r0
 8014580:	9b04      	ldr	r3, [sp, #16]
 8014582:	3301      	adds	r3, #1
 8014584:	9304      	str	r3, [sp, #16]
 8014586:	e776      	b.n	8014476 <_dtoa_r+0x8e6>
 8014588:	f000 f9c2 	bl	8014910 <__multadd>
 801458c:	4629      	mov	r1, r5
 801458e:	4680      	mov	r8, r0
 8014590:	2300      	movs	r3, #0
 8014592:	220a      	movs	r2, #10
 8014594:	4648      	mov	r0, r9
 8014596:	f000 f9bb 	bl	8014910 <__multadd>
 801459a:	4605      	mov	r5, r0
 801459c:	e7f0      	b.n	8014580 <_dtoa_r+0x9f0>
 801459e:	f1bb 0f00 	cmp.w	fp, #0
 80145a2:	bfcc      	ite	gt
 80145a4:	465e      	movgt	r6, fp
 80145a6:	2601      	movle	r6, #1
 80145a8:	443e      	add	r6, r7
 80145aa:	f04f 0800 	mov.w	r8, #0
 80145ae:	9901      	ldr	r1, [sp, #4]
 80145b0:	2201      	movs	r2, #1
 80145b2:	4648      	mov	r0, r9
 80145b4:	f000 fb9a 	bl	8014cec <__lshift>
 80145b8:	4621      	mov	r1, r4
 80145ba:	9001      	str	r0, [sp, #4]
 80145bc:	f000 fc02 	bl	8014dc4 <__mcmp>
 80145c0:	2800      	cmp	r0, #0
 80145c2:	dcb0      	bgt.n	8014526 <_dtoa_r+0x996>
 80145c4:	d102      	bne.n	80145cc <_dtoa_r+0xa3c>
 80145c6:	f01a 0f01 	tst.w	sl, #1
 80145ca:	d1ac      	bne.n	8014526 <_dtoa_r+0x996>
 80145cc:	4633      	mov	r3, r6
 80145ce:	461e      	mov	r6, r3
 80145d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80145d4:	2a30      	cmp	r2, #48	@ 0x30
 80145d6:	d0fa      	beq.n	80145ce <_dtoa_r+0xa3e>
 80145d8:	e4e1      	b.n	8013f9e <_dtoa_r+0x40e>
 80145da:	429f      	cmp	r7, r3
 80145dc:	d1a4      	bne.n	8014528 <_dtoa_r+0x998>
 80145de:	9b05      	ldr	r3, [sp, #20]
 80145e0:	3301      	adds	r3, #1
 80145e2:	9305      	str	r3, [sp, #20]
 80145e4:	2331      	movs	r3, #49	@ 0x31
 80145e6:	703b      	strb	r3, [r7, #0]
 80145e8:	e4d9      	b.n	8013f9e <_dtoa_r+0x40e>
 80145ea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80145ec:	4f16      	ldr	r7, [pc, #88]	@ (8014648 <_dtoa_r+0xab8>)
 80145ee:	b11b      	cbz	r3, 80145f8 <_dtoa_r+0xa68>
 80145f0:	f107 0308 	add.w	r3, r7, #8
 80145f4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80145f6:	6013      	str	r3, [r2, #0]
 80145f8:	4638      	mov	r0, r7
 80145fa:	b011      	add	sp, #68	@ 0x44
 80145fc:	ecbd 8b02 	vpop	{d8}
 8014600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014604:	9b07      	ldr	r3, [sp, #28]
 8014606:	2b01      	cmp	r3, #1
 8014608:	f77f ae2c 	ble.w	8014264 <_dtoa_r+0x6d4>
 801460c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801460e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014610:	2001      	movs	r0, #1
 8014612:	e64c      	b.n	80142ae <_dtoa_r+0x71e>
 8014614:	f1bb 0f00 	cmp.w	fp, #0
 8014618:	f77f aed8 	ble.w	80143cc <_dtoa_r+0x83c>
 801461c:	463e      	mov	r6, r7
 801461e:	9801      	ldr	r0, [sp, #4]
 8014620:	4621      	mov	r1, r4
 8014622:	f7ff fa2b 	bl	8013a7c <quorem>
 8014626:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801462a:	f806 ab01 	strb.w	sl, [r6], #1
 801462e:	1bf2      	subs	r2, r6, r7
 8014630:	4593      	cmp	fp, r2
 8014632:	ddb4      	ble.n	801459e <_dtoa_r+0xa0e>
 8014634:	9901      	ldr	r1, [sp, #4]
 8014636:	2300      	movs	r3, #0
 8014638:	220a      	movs	r2, #10
 801463a:	4648      	mov	r0, r9
 801463c:	f000 f968 	bl	8014910 <__multadd>
 8014640:	9001      	str	r0, [sp, #4]
 8014642:	e7ec      	b.n	801461e <_dtoa_r+0xa8e>
 8014644:	0801e179 	.word	0x0801e179
 8014648:	0801e0fd 	.word	0x0801e0fd

0801464c <_free_r>:
 801464c:	b538      	push	{r3, r4, r5, lr}
 801464e:	4605      	mov	r5, r0
 8014650:	2900      	cmp	r1, #0
 8014652:	d041      	beq.n	80146d8 <_free_r+0x8c>
 8014654:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014658:	1f0c      	subs	r4, r1, #4
 801465a:	2b00      	cmp	r3, #0
 801465c:	bfb8      	it	lt
 801465e:	18e4      	addlt	r4, r4, r3
 8014660:	f000 f8e8 	bl	8014834 <__malloc_lock>
 8014664:	4a1d      	ldr	r2, [pc, #116]	@ (80146dc <_free_r+0x90>)
 8014666:	6813      	ldr	r3, [r2, #0]
 8014668:	b933      	cbnz	r3, 8014678 <_free_r+0x2c>
 801466a:	6063      	str	r3, [r4, #4]
 801466c:	6014      	str	r4, [r2, #0]
 801466e:	4628      	mov	r0, r5
 8014670:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014674:	f000 b8e4 	b.w	8014840 <__malloc_unlock>
 8014678:	42a3      	cmp	r3, r4
 801467a:	d908      	bls.n	801468e <_free_r+0x42>
 801467c:	6820      	ldr	r0, [r4, #0]
 801467e:	1821      	adds	r1, r4, r0
 8014680:	428b      	cmp	r3, r1
 8014682:	bf01      	itttt	eq
 8014684:	6819      	ldreq	r1, [r3, #0]
 8014686:	685b      	ldreq	r3, [r3, #4]
 8014688:	1809      	addeq	r1, r1, r0
 801468a:	6021      	streq	r1, [r4, #0]
 801468c:	e7ed      	b.n	801466a <_free_r+0x1e>
 801468e:	461a      	mov	r2, r3
 8014690:	685b      	ldr	r3, [r3, #4]
 8014692:	b10b      	cbz	r3, 8014698 <_free_r+0x4c>
 8014694:	42a3      	cmp	r3, r4
 8014696:	d9fa      	bls.n	801468e <_free_r+0x42>
 8014698:	6811      	ldr	r1, [r2, #0]
 801469a:	1850      	adds	r0, r2, r1
 801469c:	42a0      	cmp	r0, r4
 801469e:	d10b      	bne.n	80146b8 <_free_r+0x6c>
 80146a0:	6820      	ldr	r0, [r4, #0]
 80146a2:	4401      	add	r1, r0
 80146a4:	1850      	adds	r0, r2, r1
 80146a6:	4283      	cmp	r3, r0
 80146a8:	6011      	str	r1, [r2, #0]
 80146aa:	d1e0      	bne.n	801466e <_free_r+0x22>
 80146ac:	6818      	ldr	r0, [r3, #0]
 80146ae:	685b      	ldr	r3, [r3, #4]
 80146b0:	6053      	str	r3, [r2, #4]
 80146b2:	4408      	add	r0, r1
 80146b4:	6010      	str	r0, [r2, #0]
 80146b6:	e7da      	b.n	801466e <_free_r+0x22>
 80146b8:	d902      	bls.n	80146c0 <_free_r+0x74>
 80146ba:	230c      	movs	r3, #12
 80146bc:	602b      	str	r3, [r5, #0]
 80146be:	e7d6      	b.n	801466e <_free_r+0x22>
 80146c0:	6820      	ldr	r0, [r4, #0]
 80146c2:	1821      	adds	r1, r4, r0
 80146c4:	428b      	cmp	r3, r1
 80146c6:	bf04      	itt	eq
 80146c8:	6819      	ldreq	r1, [r3, #0]
 80146ca:	685b      	ldreq	r3, [r3, #4]
 80146cc:	6063      	str	r3, [r4, #4]
 80146ce:	bf04      	itt	eq
 80146d0:	1809      	addeq	r1, r1, r0
 80146d2:	6021      	streq	r1, [r4, #0]
 80146d4:	6054      	str	r4, [r2, #4]
 80146d6:	e7ca      	b.n	801466e <_free_r+0x22>
 80146d8:	bd38      	pop	{r3, r4, r5, pc}
 80146da:	bf00      	nop
 80146dc:	24001260 	.word	0x24001260

080146e0 <malloc>:
 80146e0:	4b02      	ldr	r3, [pc, #8]	@ (80146ec <malloc+0xc>)
 80146e2:	4601      	mov	r1, r0
 80146e4:	6818      	ldr	r0, [r3, #0]
 80146e6:	f000 b825 	b.w	8014734 <_malloc_r>
 80146ea:	bf00      	nop
 80146ec:	2400039c 	.word	0x2400039c

080146f0 <sbrk_aligned>:
 80146f0:	b570      	push	{r4, r5, r6, lr}
 80146f2:	4e0f      	ldr	r6, [pc, #60]	@ (8014730 <sbrk_aligned+0x40>)
 80146f4:	460c      	mov	r4, r1
 80146f6:	6831      	ldr	r1, [r6, #0]
 80146f8:	4605      	mov	r5, r0
 80146fa:	b911      	cbnz	r1, 8014702 <sbrk_aligned+0x12>
 80146fc:	f001 fdb4 	bl	8016268 <_sbrk_r>
 8014700:	6030      	str	r0, [r6, #0]
 8014702:	4621      	mov	r1, r4
 8014704:	4628      	mov	r0, r5
 8014706:	f001 fdaf 	bl	8016268 <_sbrk_r>
 801470a:	1c43      	adds	r3, r0, #1
 801470c:	d103      	bne.n	8014716 <sbrk_aligned+0x26>
 801470e:	f04f 34ff 	mov.w	r4, #4294967295
 8014712:	4620      	mov	r0, r4
 8014714:	bd70      	pop	{r4, r5, r6, pc}
 8014716:	1cc4      	adds	r4, r0, #3
 8014718:	f024 0403 	bic.w	r4, r4, #3
 801471c:	42a0      	cmp	r0, r4
 801471e:	d0f8      	beq.n	8014712 <sbrk_aligned+0x22>
 8014720:	1a21      	subs	r1, r4, r0
 8014722:	4628      	mov	r0, r5
 8014724:	f001 fda0 	bl	8016268 <_sbrk_r>
 8014728:	3001      	adds	r0, #1
 801472a:	d1f2      	bne.n	8014712 <sbrk_aligned+0x22>
 801472c:	e7ef      	b.n	801470e <sbrk_aligned+0x1e>
 801472e:	bf00      	nop
 8014730:	2400125c 	.word	0x2400125c

08014734 <_malloc_r>:
 8014734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014738:	1ccd      	adds	r5, r1, #3
 801473a:	f025 0503 	bic.w	r5, r5, #3
 801473e:	3508      	adds	r5, #8
 8014740:	2d0c      	cmp	r5, #12
 8014742:	bf38      	it	cc
 8014744:	250c      	movcc	r5, #12
 8014746:	2d00      	cmp	r5, #0
 8014748:	4606      	mov	r6, r0
 801474a:	db01      	blt.n	8014750 <_malloc_r+0x1c>
 801474c:	42a9      	cmp	r1, r5
 801474e:	d904      	bls.n	801475a <_malloc_r+0x26>
 8014750:	230c      	movs	r3, #12
 8014752:	6033      	str	r3, [r6, #0]
 8014754:	2000      	movs	r0, #0
 8014756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801475a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014830 <_malloc_r+0xfc>
 801475e:	f000 f869 	bl	8014834 <__malloc_lock>
 8014762:	f8d8 3000 	ldr.w	r3, [r8]
 8014766:	461c      	mov	r4, r3
 8014768:	bb44      	cbnz	r4, 80147bc <_malloc_r+0x88>
 801476a:	4629      	mov	r1, r5
 801476c:	4630      	mov	r0, r6
 801476e:	f7ff ffbf 	bl	80146f0 <sbrk_aligned>
 8014772:	1c43      	adds	r3, r0, #1
 8014774:	4604      	mov	r4, r0
 8014776:	d158      	bne.n	801482a <_malloc_r+0xf6>
 8014778:	f8d8 4000 	ldr.w	r4, [r8]
 801477c:	4627      	mov	r7, r4
 801477e:	2f00      	cmp	r7, #0
 8014780:	d143      	bne.n	801480a <_malloc_r+0xd6>
 8014782:	2c00      	cmp	r4, #0
 8014784:	d04b      	beq.n	801481e <_malloc_r+0xea>
 8014786:	6823      	ldr	r3, [r4, #0]
 8014788:	4639      	mov	r1, r7
 801478a:	4630      	mov	r0, r6
 801478c:	eb04 0903 	add.w	r9, r4, r3
 8014790:	f001 fd6a 	bl	8016268 <_sbrk_r>
 8014794:	4581      	cmp	r9, r0
 8014796:	d142      	bne.n	801481e <_malloc_r+0xea>
 8014798:	6821      	ldr	r1, [r4, #0]
 801479a:	1a6d      	subs	r5, r5, r1
 801479c:	4629      	mov	r1, r5
 801479e:	4630      	mov	r0, r6
 80147a0:	f7ff ffa6 	bl	80146f0 <sbrk_aligned>
 80147a4:	3001      	adds	r0, #1
 80147a6:	d03a      	beq.n	801481e <_malloc_r+0xea>
 80147a8:	6823      	ldr	r3, [r4, #0]
 80147aa:	442b      	add	r3, r5
 80147ac:	6023      	str	r3, [r4, #0]
 80147ae:	f8d8 3000 	ldr.w	r3, [r8]
 80147b2:	685a      	ldr	r2, [r3, #4]
 80147b4:	bb62      	cbnz	r2, 8014810 <_malloc_r+0xdc>
 80147b6:	f8c8 7000 	str.w	r7, [r8]
 80147ba:	e00f      	b.n	80147dc <_malloc_r+0xa8>
 80147bc:	6822      	ldr	r2, [r4, #0]
 80147be:	1b52      	subs	r2, r2, r5
 80147c0:	d420      	bmi.n	8014804 <_malloc_r+0xd0>
 80147c2:	2a0b      	cmp	r2, #11
 80147c4:	d917      	bls.n	80147f6 <_malloc_r+0xc2>
 80147c6:	1961      	adds	r1, r4, r5
 80147c8:	42a3      	cmp	r3, r4
 80147ca:	6025      	str	r5, [r4, #0]
 80147cc:	bf18      	it	ne
 80147ce:	6059      	strne	r1, [r3, #4]
 80147d0:	6863      	ldr	r3, [r4, #4]
 80147d2:	bf08      	it	eq
 80147d4:	f8c8 1000 	streq.w	r1, [r8]
 80147d8:	5162      	str	r2, [r4, r5]
 80147da:	604b      	str	r3, [r1, #4]
 80147dc:	4630      	mov	r0, r6
 80147de:	f000 f82f 	bl	8014840 <__malloc_unlock>
 80147e2:	f104 000b 	add.w	r0, r4, #11
 80147e6:	1d23      	adds	r3, r4, #4
 80147e8:	f020 0007 	bic.w	r0, r0, #7
 80147ec:	1ac2      	subs	r2, r0, r3
 80147ee:	bf1c      	itt	ne
 80147f0:	1a1b      	subne	r3, r3, r0
 80147f2:	50a3      	strne	r3, [r4, r2]
 80147f4:	e7af      	b.n	8014756 <_malloc_r+0x22>
 80147f6:	6862      	ldr	r2, [r4, #4]
 80147f8:	42a3      	cmp	r3, r4
 80147fa:	bf0c      	ite	eq
 80147fc:	f8c8 2000 	streq.w	r2, [r8]
 8014800:	605a      	strne	r2, [r3, #4]
 8014802:	e7eb      	b.n	80147dc <_malloc_r+0xa8>
 8014804:	4623      	mov	r3, r4
 8014806:	6864      	ldr	r4, [r4, #4]
 8014808:	e7ae      	b.n	8014768 <_malloc_r+0x34>
 801480a:	463c      	mov	r4, r7
 801480c:	687f      	ldr	r7, [r7, #4]
 801480e:	e7b6      	b.n	801477e <_malloc_r+0x4a>
 8014810:	461a      	mov	r2, r3
 8014812:	685b      	ldr	r3, [r3, #4]
 8014814:	42a3      	cmp	r3, r4
 8014816:	d1fb      	bne.n	8014810 <_malloc_r+0xdc>
 8014818:	2300      	movs	r3, #0
 801481a:	6053      	str	r3, [r2, #4]
 801481c:	e7de      	b.n	80147dc <_malloc_r+0xa8>
 801481e:	230c      	movs	r3, #12
 8014820:	6033      	str	r3, [r6, #0]
 8014822:	4630      	mov	r0, r6
 8014824:	f000 f80c 	bl	8014840 <__malloc_unlock>
 8014828:	e794      	b.n	8014754 <_malloc_r+0x20>
 801482a:	6005      	str	r5, [r0, #0]
 801482c:	e7d6      	b.n	80147dc <_malloc_r+0xa8>
 801482e:	bf00      	nop
 8014830:	24001260 	.word	0x24001260

08014834 <__malloc_lock>:
 8014834:	4801      	ldr	r0, [pc, #4]	@ (801483c <__malloc_lock+0x8>)
 8014836:	f7ff b918 	b.w	8013a6a <__retarget_lock_acquire_recursive>
 801483a:	bf00      	nop
 801483c:	24001258 	.word	0x24001258

08014840 <__malloc_unlock>:
 8014840:	4801      	ldr	r0, [pc, #4]	@ (8014848 <__malloc_unlock+0x8>)
 8014842:	f7ff b913 	b.w	8013a6c <__retarget_lock_release_recursive>
 8014846:	bf00      	nop
 8014848:	24001258 	.word	0x24001258

0801484c <_Balloc>:
 801484c:	b570      	push	{r4, r5, r6, lr}
 801484e:	69c6      	ldr	r6, [r0, #28]
 8014850:	4604      	mov	r4, r0
 8014852:	460d      	mov	r5, r1
 8014854:	b976      	cbnz	r6, 8014874 <_Balloc+0x28>
 8014856:	2010      	movs	r0, #16
 8014858:	f7ff ff42 	bl	80146e0 <malloc>
 801485c:	4602      	mov	r2, r0
 801485e:	61e0      	str	r0, [r4, #28]
 8014860:	b920      	cbnz	r0, 801486c <_Balloc+0x20>
 8014862:	4b18      	ldr	r3, [pc, #96]	@ (80148c4 <_Balloc+0x78>)
 8014864:	4818      	ldr	r0, [pc, #96]	@ (80148c8 <_Balloc+0x7c>)
 8014866:	216b      	movs	r1, #107	@ 0x6b
 8014868:	f001 fd26 	bl	80162b8 <__assert_func>
 801486c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014870:	6006      	str	r6, [r0, #0]
 8014872:	60c6      	str	r6, [r0, #12]
 8014874:	69e6      	ldr	r6, [r4, #28]
 8014876:	68f3      	ldr	r3, [r6, #12]
 8014878:	b183      	cbz	r3, 801489c <_Balloc+0x50>
 801487a:	69e3      	ldr	r3, [r4, #28]
 801487c:	68db      	ldr	r3, [r3, #12]
 801487e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014882:	b9b8      	cbnz	r0, 80148b4 <_Balloc+0x68>
 8014884:	2101      	movs	r1, #1
 8014886:	fa01 f605 	lsl.w	r6, r1, r5
 801488a:	1d72      	adds	r2, r6, #5
 801488c:	0092      	lsls	r2, r2, #2
 801488e:	4620      	mov	r0, r4
 8014890:	f001 fd30 	bl	80162f4 <_calloc_r>
 8014894:	b160      	cbz	r0, 80148b0 <_Balloc+0x64>
 8014896:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801489a:	e00e      	b.n	80148ba <_Balloc+0x6e>
 801489c:	2221      	movs	r2, #33	@ 0x21
 801489e:	2104      	movs	r1, #4
 80148a0:	4620      	mov	r0, r4
 80148a2:	f001 fd27 	bl	80162f4 <_calloc_r>
 80148a6:	69e3      	ldr	r3, [r4, #28]
 80148a8:	60f0      	str	r0, [r6, #12]
 80148aa:	68db      	ldr	r3, [r3, #12]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d1e4      	bne.n	801487a <_Balloc+0x2e>
 80148b0:	2000      	movs	r0, #0
 80148b2:	bd70      	pop	{r4, r5, r6, pc}
 80148b4:	6802      	ldr	r2, [r0, #0]
 80148b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80148ba:	2300      	movs	r3, #0
 80148bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80148c0:	e7f7      	b.n	80148b2 <_Balloc+0x66>
 80148c2:	bf00      	nop
 80148c4:	0801e10a 	.word	0x0801e10a
 80148c8:	0801e18a 	.word	0x0801e18a

080148cc <_Bfree>:
 80148cc:	b570      	push	{r4, r5, r6, lr}
 80148ce:	69c6      	ldr	r6, [r0, #28]
 80148d0:	4605      	mov	r5, r0
 80148d2:	460c      	mov	r4, r1
 80148d4:	b976      	cbnz	r6, 80148f4 <_Bfree+0x28>
 80148d6:	2010      	movs	r0, #16
 80148d8:	f7ff ff02 	bl	80146e0 <malloc>
 80148dc:	4602      	mov	r2, r0
 80148de:	61e8      	str	r0, [r5, #28]
 80148e0:	b920      	cbnz	r0, 80148ec <_Bfree+0x20>
 80148e2:	4b09      	ldr	r3, [pc, #36]	@ (8014908 <_Bfree+0x3c>)
 80148e4:	4809      	ldr	r0, [pc, #36]	@ (801490c <_Bfree+0x40>)
 80148e6:	218f      	movs	r1, #143	@ 0x8f
 80148e8:	f001 fce6 	bl	80162b8 <__assert_func>
 80148ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80148f0:	6006      	str	r6, [r0, #0]
 80148f2:	60c6      	str	r6, [r0, #12]
 80148f4:	b13c      	cbz	r4, 8014906 <_Bfree+0x3a>
 80148f6:	69eb      	ldr	r3, [r5, #28]
 80148f8:	6862      	ldr	r2, [r4, #4]
 80148fa:	68db      	ldr	r3, [r3, #12]
 80148fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014900:	6021      	str	r1, [r4, #0]
 8014902:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014906:	bd70      	pop	{r4, r5, r6, pc}
 8014908:	0801e10a 	.word	0x0801e10a
 801490c:	0801e18a 	.word	0x0801e18a

08014910 <__multadd>:
 8014910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014914:	690d      	ldr	r5, [r1, #16]
 8014916:	4607      	mov	r7, r0
 8014918:	460c      	mov	r4, r1
 801491a:	461e      	mov	r6, r3
 801491c:	f101 0c14 	add.w	ip, r1, #20
 8014920:	2000      	movs	r0, #0
 8014922:	f8dc 3000 	ldr.w	r3, [ip]
 8014926:	b299      	uxth	r1, r3
 8014928:	fb02 6101 	mla	r1, r2, r1, r6
 801492c:	0c1e      	lsrs	r6, r3, #16
 801492e:	0c0b      	lsrs	r3, r1, #16
 8014930:	fb02 3306 	mla	r3, r2, r6, r3
 8014934:	b289      	uxth	r1, r1
 8014936:	3001      	adds	r0, #1
 8014938:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801493c:	4285      	cmp	r5, r0
 801493e:	f84c 1b04 	str.w	r1, [ip], #4
 8014942:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014946:	dcec      	bgt.n	8014922 <__multadd+0x12>
 8014948:	b30e      	cbz	r6, 801498e <__multadd+0x7e>
 801494a:	68a3      	ldr	r3, [r4, #8]
 801494c:	42ab      	cmp	r3, r5
 801494e:	dc19      	bgt.n	8014984 <__multadd+0x74>
 8014950:	6861      	ldr	r1, [r4, #4]
 8014952:	4638      	mov	r0, r7
 8014954:	3101      	adds	r1, #1
 8014956:	f7ff ff79 	bl	801484c <_Balloc>
 801495a:	4680      	mov	r8, r0
 801495c:	b928      	cbnz	r0, 801496a <__multadd+0x5a>
 801495e:	4602      	mov	r2, r0
 8014960:	4b0c      	ldr	r3, [pc, #48]	@ (8014994 <__multadd+0x84>)
 8014962:	480d      	ldr	r0, [pc, #52]	@ (8014998 <__multadd+0x88>)
 8014964:	21ba      	movs	r1, #186	@ 0xba
 8014966:	f001 fca7 	bl	80162b8 <__assert_func>
 801496a:	6922      	ldr	r2, [r4, #16]
 801496c:	3202      	adds	r2, #2
 801496e:	f104 010c 	add.w	r1, r4, #12
 8014972:	0092      	lsls	r2, r2, #2
 8014974:	300c      	adds	r0, #12
 8014976:	f001 fc87 	bl	8016288 <memcpy>
 801497a:	4621      	mov	r1, r4
 801497c:	4638      	mov	r0, r7
 801497e:	f7ff ffa5 	bl	80148cc <_Bfree>
 8014982:	4644      	mov	r4, r8
 8014984:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014988:	3501      	adds	r5, #1
 801498a:	615e      	str	r6, [r3, #20]
 801498c:	6125      	str	r5, [r4, #16]
 801498e:	4620      	mov	r0, r4
 8014990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014994:	0801e179 	.word	0x0801e179
 8014998:	0801e18a 	.word	0x0801e18a

0801499c <__s2b>:
 801499c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80149a0:	460c      	mov	r4, r1
 80149a2:	4615      	mov	r5, r2
 80149a4:	461f      	mov	r7, r3
 80149a6:	2209      	movs	r2, #9
 80149a8:	3308      	adds	r3, #8
 80149aa:	4606      	mov	r6, r0
 80149ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80149b0:	2100      	movs	r1, #0
 80149b2:	2201      	movs	r2, #1
 80149b4:	429a      	cmp	r2, r3
 80149b6:	db09      	blt.n	80149cc <__s2b+0x30>
 80149b8:	4630      	mov	r0, r6
 80149ba:	f7ff ff47 	bl	801484c <_Balloc>
 80149be:	b940      	cbnz	r0, 80149d2 <__s2b+0x36>
 80149c0:	4602      	mov	r2, r0
 80149c2:	4b19      	ldr	r3, [pc, #100]	@ (8014a28 <__s2b+0x8c>)
 80149c4:	4819      	ldr	r0, [pc, #100]	@ (8014a2c <__s2b+0x90>)
 80149c6:	21d3      	movs	r1, #211	@ 0xd3
 80149c8:	f001 fc76 	bl	80162b8 <__assert_func>
 80149cc:	0052      	lsls	r2, r2, #1
 80149ce:	3101      	adds	r1, #1
 80149d0:	e7f0      	b.n	80149b4 <__s2b+0x18>
 80149d2:	9b08      	ldr	r3, [sp, #32]
 80149d4:	6143      	str	r3, [r0, #20]
 80149d6:	2d09      	cmp	r5, #9
 80149d8:	f04f 0301 	mov.w	r3, #1
 80149dc:	6103      	str	r3, [r0, #16]
 80149de:	dd16      	ble.n	8014a0e <__s2b+0x72>
 80149e0:	f104 0909 	add.w	r9, r4, #9
 80149e4:	46c8      	mov	r8, r9
 80149e6:	442c      	add	r4, r5
 80149e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80149ec:	4601      	mov	r1, r0
 80149ee:	3b30      	subs	r3, #48	@ 0x30
 80149f0:	220a      	movs	r2, #10
 80149f2:	4630      	mov	r0, r6
 80149f4:	f7ff ff8c 	bl	8014910 <__multadd>
 80149f8:	45a0      	cmp	r8, r4
 80149fa:	d1f5      	bne.n	80149e8 <__s2b+0x4c>
 80149fc:	f1a5 0408 	sub.w	r4, r5, #8
 8014a00:	444c      	add	r4, r9
 8014a02:	1b2d      	subs	r5, r5, r4
 8014a04:	1963      	adds	r3, r4, r5
 8014a06:	42bb      	cmp	r3, r7
 8014a08:	db04      	blt.n	8014a14 <__s2b+0x78>
 8014a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a0e:	340a      	adds	r4, #10
 8014a10:	2509      	movs	r5, #9
 8014a12:	e7f6      	b.n	8014a02 <__s2b+0x66>
 8014a14:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014a18:	4601      	mov	r1, r0
 8014a1a:	3b30      	subs	r3, #48	@ 0x30
 8014a1c:	220a      	movs	r2, #10
 8014a1e:	4630      	mov	r0, r6
 8014a20:	f7ff ff76 	bl	8014910 <__multadd>
 8014a24:	e7ee      	b.n	8014a04 <__s2b+0x68>
 8014a26:	bf00      	nop
 8014a28:	0801e179 	.word	0x0801e179
 8014a2c:	0801e18a 	.word	0x0801e18a

08014a30 <__hi0bits>:
 8014a30:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8014a34:	4603      	mov	r3, r0
 8014a36:	bf36      	itet	cc
 8014a38:	0403      	lslcc	r3, r0, #16
 8014a3a:	2000      	movcs	r0, #0
 8014a3c:	2010      	movcc	r0, #16
 8014a3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014a42:	bf3c      	itt	cc
 8014a44:	021b      	lslcc	r3, r3, #8
 8014a46:	3008      	addcc	r0, #8
 8014a48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014a4c:	bf3c      	itt	cc
 8014a4e:	011b      	lslcc	r3, r3, #4
 8014a50:	3004      	addcc	r0, #4
 8014a52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014a56:	bf3c      	itt	cc
 8014a58:	009b      	lslcc	r3, r3, #2
 8014a5a:	3002      	addcc	r0, #2
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	db05      	blt.n	8014a6c <__hi0bits+0x3c>
 8014a60:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8014a64:	f100 0001 	add.w	r0, r0, #1
 8014a68:	bf08      	it	eq
 8014a6a:	2020      	moveq	r0, #32
 8014a6c:	4770      	bx	lr

08014a6e <__lo0bits>:
 8014a6e:	6803      	ldr	r3, [r0, #0]
 8014a70:	4602      	mov	r2, r0
 8014a72:	f013 0007 	ands.w	r0, r3, #7
 8014a76:	d00b      	beq.n	8014a90 <__lo0bits+0x22>
 8014a78:	07d9      	lsls	r1, r3, #31
 8014a7a:	d421      	bmi.n	8014ac0 <__lo0bits+0x52>
 8014a7c:	0798      	lsls	r0, r3, #30
 8014a7e:	bf49      	itett	mi
 8014a80:	085b      	lsrmi	r3, r3, #1
 8014a82:	089b      	lsrpl	r3, r3, #2
 8014a84:	2001      	movmi	r0, #1
 8014a86:	6013      	strmi	r3, [r2, #0]
 8014a88:	bf5c      	itt	pl
 8014a8a:	6013      	strpl	r3, [r2, #0]
 8014a8c:	2002      	movpl	r0, #2
 8014a8e:	4770      	bx	lr
 8014a90:	b299      	uxth	r1, r3
 8014a92:	b909      	cbnz	r1, 8014a98 <__lo0bits+0x2a>
 8014a94:	0c1b      	lsrs	r3, r3, #16
 8014a96:	2010      	movs	r0, #16
 8014a98:	b2d9      	uxtb	r1, r3
 8014a9a:	b909      	cbnz	r1, 8014aa0 <__lo0bits+0x32>
 8014a9c:	3008      	adds	r0, #8
 8014a9e:	0a1b      	lsrs	r3, r3, #8
 8014aa0:	0719      	lsls	r1, r3, #28
 8014aa2:	bf04      	itt	eq
 8014aa4:	091b      	lsreq	r3, r3, #4
 8014aa6:	3004      	addeq	r0, #4
 8014aa8:	0799      	lsls	r1, r3, #30
 8014aaa:	bf04      	itt	eq
 8014aac:	089b      	lsreq	r3, r3, #2
 8014aae:	3002      	addeq	r0, #2
 8014ab0:	07d9      	lsls	r1, r3, #31
 8014ab2:	d403      	bmi.n	8014abc <__lo0bits+0x4e>
 8014ab4:	085b      	lsrs	r3, r3, #1
 8014ab6:	f100 0001 	add.w	r0, r0, #1
 8014aba:	d003      	beq.n	8014ac4 <__lo0bits+0x56>
 8014abc:	6013      	str	r3, [r2, #0]
 8014abe:	4770      	bx	lr
 8014ac0:	2000      	movs	r0, #0
 8014ac2:	4770      	bx	lr
 8014ac4:	2020      	movs	r0, #32
 8014ac6:	4770      	bx	lr

08014ac8 <__i2b>:
 8014ac8:	b510      	push	{r4, lr}
 8014aca:	460c      	mov	r4, r1
 8014acc:	2101      	movs	r1, #1
 8014ace:	f7ff febd 	bl	801484c <_Balloc>
 8014ad2:	4602      	mov	r2, r0
 8014ad4:	b928      	cbnz	r0, 8014ae2 <__i2b+0x1a>
 8014ad6:	4b05      	ldr	r3, [pc, #20]	@ (8014aec <__i2b+0x24>)
 8014ad8:	4805      	ldr	r0, [pc, #20]	@ (8014af0 <__i2b+0x28>)
 8014ada:	f240 1145 	movw	r1, #325	@ 0x145
 8014ade:	f001 fbeb 	bl	80162b8 <__assert_func>
 8014ae2:	2301      	movs	r3, #1
 8014ae4:	6144      	str	r4, [r0, #20]
 8014ae6:	6103      	str	r3, [r0, #16]
 8014ae8:	bd10      	pop	{r4, pc}
 8014aea:	bf00      	nop
 8014aec:	0801e179 	.word	0x0801e179
 8014af0:	0801e18a 	.word	0x0801e18a

08014af4 <__multiply>:
 8014af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014af8:	4617      	mov	r7, r2
 8014afa:	690a      	ldr	r2, [r1, #16]
 8014afc:	693b      	ldr	r3, [r7, #16]
 8014afe:	429a      	cmp	r2, r3
 8014b00:	bfa8      	it	ge
 8014b02:	463b      	movge	r3, r7
 8014b04:	4689      	mov	r9, r1
 8014b06:	bfa4      	itt	ge
 8014b08:	460f      	movge	r7, r1
 8014b0a:	4699      	movge	r9, r3
 8014b0c:	693d      	ldr	r5, [r7, #16]
 8014b0e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014b12:	68bb      	ldr	r3, [r7, #8]
 8014b14:	6879      	ldr	r1, [r7, #4]
 8014b16:	eb05 060a 	add.w	r6, r5, sl
 8014b1a:	42b3      	cmp	r3, r6
 8014b1c:	b085      	sub	sp, #20
 8014b1e:	bfb8      	it	lt
 8014b20:	3101      	addlt	r1, #1
 8014b22:	f7ff fe93 	bl	801484c <_Balloc>
 8014b26:	b930      	cbnz	r0, 8014b36 <__multiply+0x42>
 8014b28:	4602      	mov	r2, r0
 8014b2a:	4b41      	ldr	r3, [pc, #260]	@ (8014c30 <__multiply+0x13c>)
 8014b2c:	4841      	ldr	r0, [pc, #260]	@ (8014c34 <__multiply+0x140>)
 8014b2e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8014b32:	f001 fbc1 	bl	80162b8 <__assert_func>
 8014b36:	f100 0414 	add.w	r4, r0, #20
 8014b3a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8014b3e:	4623      	mov	r3, r4
 8014b40:	2200      	movs	r2, #0
 8014b42:	4573      	cmp	r3, lr
 8014b44:	d320      	bcc.n	8014b88 <__multiply+0x94>
 8014b46:	f107 0814 	add.w	r8, r7, #20
 8014b4a:	f109 0114 	add.w	r1, r9, #20
 8014b4e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8014b52:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8014b56:	9302      	str	r3, [sp, #8]
 8014b58:	1beb      	subs	r3, r5, r7
 8014b5a:	3b15      	subs	r3, #21
 8014b5c:	f023 0303 	bic.w	r3, r3, #3
 8014b60:	3304      	adds	r3, #4
 8014b62:	3715      	adds	r7, #21
 8014b64:	42bd      	cmp	r5, r7
 8014b66:	bf38      	it	cc
 8014b68:	2304      	movcc	r3, #4
 8014b6a:	9301      	str	r3, [sp, #4]
 8014b6c:	9b02      	ldr	r3, [sp, #8]
 8014b6e:	9103      	str	r1, [sp, #12]
 8014b70:	428b      	cmp	r3, r1
 8014b72:	d80c      	bhi.n	8014b8e <__multiply+0x9a>
 8014b74:	2e00      	cmp	r6, #0
 8014b76:	dd03      	ble.n	8014b80 <__multiply+0x8c>
 8014b78:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d055      	beq.n	8014c2c <__multiply+0x138>
 8014b80:	6106      	str	r6, [r0, #16]
 8014b82:	b005      	add	sp, #20
 8014b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b88:	f843 2b04 	str.w	r2, [r3], #4
 8014b8c:	e7d9      	b.n	8014b42 <__multiply+0x4e>
 8014b8e:	f8b1 a000 	ldrh.w	sl, [r1]
 8014b92:	f1ba 0f00 	cmp.w	sl, #0
 8014b96:	d01f      	beq.n	8014bd8 <__multiply+0xe4>
 8014b98:	46c4      	mov	ip, r8
 8014b9a:	46a1      	mov	r9, r4
 8014b9c:	2700      	movs	r7, #0
 8014b9e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8014ba2:	f8d9 3000 	ldr.w	r3, [r9]
 8014ba6:	fa1f fb82 	uxth.w	fp, r2
 8014baa:	b29b      	uxth	r3, r3
 8014bac:	fb0a 330b 	mla	r3, sl, fp, r3
 8014bb0:	443b      	add	r3, r7
 8014bb2:	f8d9 7000 	ldr.w	r7, [r9]
 8014bb6:	0c12      	lsrs	r2, r2, #16
 8014bb8:	0c3f      	lsrs	r7, r7, #16
 8014bba:	fb0a 7202 	mla	r2, sl, r2, r7
 8014bbe:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8014bc2:	b29b      	uxth	r3, r3
 8014bc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014bc8:	4565      	cmp	r5, ip
 8014bca:	f849 3b04 	str.w	r3, [r9], #4
 8014bce:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8014bd2:	d8e4      	bhi.n	8014b9e <__multiply+0xaa>
 8014bd4:	9b01      	ldr	r3, [sp, #4]
 8014bd6:	50e7      	str	r7, [r4, r3]
 8014bd8:	9b03      	ldr	r3, [sp, #12]
 8014bda:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014bde:	3104      	adds	r1, #4
 8014be0:	f1b9 0f00 	cmp.w	r9, #0
 8014be4:	d020      	beq.n	8014c28 <__multiply+0x134>
 8014be6:	6823      	ldr	r3, [r4, #0]
 8014be8:	4647      	mov	r7, r8
 8014bea:	46a4      	mov	ip, r4
 8014bec:	f04f 0a00 	mov.w	sl, #0
 8014bf0:	f8b7 b000 	ldrh.w	fp, [r7]
 8014bf4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8014bf8:	fb09 220b 	mla	r2, r9, fp, r2
 8014bfc:	4452      	add	r2, sl
 8014bfe:	b29b      	uxth	r3, r3
 8014c00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014c04:	f84c 3b04 	str.w	r3, [ip], #4
 8014c08:	f857 3b04 	ldr.w	r3, [r7], #4
 8014c0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014c10:	f8bc 3000 	ldrh.w	r3, [ip]
 8014c14:	fb09 330a 	mla	r3, r9, sl, r3
 8014c18:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8014c1c:	42bd      	cmp	r5, r7
 8014c1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014c22:	d8e5      	bhi.n	8014bf0 <__multiply+0xfc>
 8014c24:	9a01      	ldr	r2, [sp, #4]
 8014c26:	50a3      	str	r3, [r4, r2]
 8014c28:	3404      	adds	r4, #4
 8014c2a:	e79f      	b.n	8014b6c <__multiply+0x78>
 8014c2c:	3e01      	subs	r6, #1
 8014c2e:	e7a1      	b.n	8014b74 <__multiply+0x80>
 8014c30:	0801e179 	.word	0x0801e179
 8014c34:	0801e18a 	.word	0x0801e18a

08014c38 <__pow5mult>:
 8014c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c3c:	4615      	mov	r5, r2
 8014c3e:	f012 0203 	ands.w	r2, r2, #3
 8014c42:	4607      	mov	r7, r0
 8014c44:	460e      	mov	r6, r1
 8014c46:	d007      	beq.n	8014c58 <__pow5mult+0x20>
 8014c48:	4c25      	ldr	r4, [pc, #148]	@ (8014ce0 <__pow5mult+0xa8>)
 8014c4a:	3a01      	subs	r2, #1
 8014c4c:	2300      	movs	r3, #0
 8014c4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014c52:	f7ff fe5d 	bl	8014910 <__multadd>
 8014c56:	4606      	mov	r6, r0
 8014c58:	10ad      	asrs	r5, r5, #2
 8014c5a:	d03d      	beq.n	8014cd8 <__pow5mult+0xa0>
 8014c5c:	69fc      	ldr	r4, [r7, #28]
 8014c5e:	b97c      	cbnz	r4, 8014c80 <__pow5mult+0x48>
 8014c60:	2010      	movs	r0, #16
 8014c62:	f7ff fd3d 	bl	80146e0 <malloc>
 8014c66:	4602      	mov	r2, r0
 8014c68:	61f8      	str	r0, [r7, #28]
 8014c6a:	b928      	cbnz	r0, 8014c78 <__pow5mult+0x40>
 8014c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8014ce4 <__pow5mult+0xac>)
 8014c6e:	481e      	ldr	r0, [pc, #120]	@ (8014ce8 <__pow5mult+0xb0>)
 8014c70:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8014c74:	f001 fb20 	bl	80162b8 <__assert_func>
 8014c78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014c7c:	6004      	str	r4, [r0, #0]
 8014c7e:	60c4      	str	r4, [r0, #12]
 8014c80:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014c84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014c88:	b94c      	cbnz	r4, 8014c9e <__pow5mult+0x66>
 8014c8a:	f240 2171 	movw	r1, #625	@ 0x271
 8014c8e:	4638      	mov	r0, r7
 8014c90:	f7ff ff1a 	bl	8014ac8 <__i2b>
 8014c94:	2300      	movs	r3, #0
 8014c96:	f8c8 0008 	str.w	r0, [r8, #8]
 8014c9a:	4604      	mov	r4, r0
 8014c9c:	6003      	str	r3, [r0, #0]
 8014c9e:	f04f 0900 	mov.w	r9, #0
 8014ca2:	07eb      	lsls	r3, r5, #31
 8014ca4:	d50a      	bpl.n	8014cbc <__pow5mult+0x84>
 8014ca6:	4631      	mov	r1, r6
 8014ca8:	4622      	mov	r2, r4
 8014caa:	4638      	mov	r0, r7
 8014cac:	f7ff ff22 	bl	8014af4 <__multiply>
 8014cb0:	4631      	mov	r1, r6
 8014cb2:	4680      	mov	r8, r0
 8014cb4:	4638      	mov	r0, r7
 8014cb6:	f7ff fe09 	bl	80148cc <_Bfree>
 8014cba:	4646      	mov	r6, r8
 8014cbc:	106d      	asrs	r5, r5, #1
 8014cbe:	d00b      	beq.n	8014cd8 <__pow5mult+0xa0>
 8014cc0:	6820      	ldr	r0, [r4, #0]
 8014cc2:	b938      	cbnz	r0, 8014cd4 <__pow5mult+0x9c>
 8014cc4:	4622      	mov	r2, r4
 8014cc6:	4621      	mov	r1, r4
 8014cc8:	4638      	mov	r0, r7
 8014cca:	f7ff ff13 	bl	8014af4 <__multiply>
 8014cce:	6020      	str	r0, [r4, #0]
 8014cd0:	f8c0 9000 	str.w	r9, [r0]
 8014cd4:	4604      	mov	r4, r0
 8014cd6:	e7e4      	b.n	8014ca2 <__pow5mult+0x6a>
 8014cd8:	4630      	mov	r0, r6
 8014cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014cde:	bf00      	nop
 8014ce0:	0801e29c 	.word	0x0801e29c
 8014ce4:	0801e10a 	.word	0x0801e10a
 8014ce8:	0801e18a 	.word	0x0801e18a

08014cec <__lshift>:
 8014cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014cf0:	460c      	mov	r4, r1
 8014cf2:	6849      	ldr	r1, [r1, #4]
 8014cf4:	6923      	ldr	r3, [r4, #16]
 8014cf6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014cfa:	68a3      	ldr	r3, [r4, #8]
 8014cfc:	4607      	mov	r7, r0
 8014cfe:	4691      	mov	r9, r2
 8014d00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014d04:	f108 0601 	add.w	r6, r8, #1
 8014d08:	42b3      	cmp	r3, r6
 8014d0a:	db0b      	blt.n	8014d24 <__lshift+0x38>
 8014d0c:	4638      	mov	r0, r7
 8014d0e:	f7ff fd9d 	bl	801484c <_Balloc>
 8014d12:	4605      	mov	r5, r0
 8014d14:	b948      	cbnz	r0, 8014d2a <__lshift+0x3e>
 8014d16:	4602      	mov	r2, r0
 8014d18:	4b28      	ldr	r3, [pc, #160]	@ (8014dbc <__lshift+0xd0>)
 8014d1a:	4829      	ldr	r0, [pc, #164]	@ (8014dc0 <__lshift+0xd4>)
 8014d1c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014d20:	f001 faca 	bl	80162b8 <__assert_func>
 8014d24:	3101      	adds	r1, #1
 8014d26:	005b      	lsls	r3, r3, #1
 8014d28:	e7ee      	b.n	8014d08 <__lshift+0x1c>
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	f100 0114 	add.w	r1, r0, #20
 8014d30:	f100 0210 	add.w	r2, r0, #16
 8014d34:	4618      	mov	r0, r3
 8014d36:	4553      	cmp	r3, sl
 8014d38:	db33      	blt.n	8014da2 <__lshift+0xb6>
 8014d3a:	6920      	ldr	r0, [r4, #16]
 8014d3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014d40:	f104 0314 	add.w	r3, r4, #20
 8014d44:	f019 091f 	ands.w	r9, r9, #31
 8014d48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014d4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014d50:	d02b      	beq.n	8014daa <__lshift+0xbe>
 8014d52:	f1c9 0e20 	rsb	lr, r9, #32
 8014d56:	468a      	mov	sl, r1
 8014d58:	2200      	movs	r2, #0
 8014d5a:	6818      	ldr	r0, [r3, #0]
 8014d5c:	fa00 f009 	lsl.w	r0, r0, r9
 8014d60:	4310      	orrs	r0, r2
 8014d62:	f84a 0b04 	str.w	r0, [sl], #4
 8014d66:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d6a:	459c      	cmp	ip, r3
 8014d6c:	fa22 f20e 	lsr.w	r2, r2, lr
 8014d70:	d8f3      	bhi.n	8014d5a <__lshift+0x6e>
 8014d72:	ebac 0304 	sub.w	r3, ip, r4
 8014d76:	3b15      	subs	r3, #21
 8014d78:	f023 0303 	bic.w	r3, r3, #3
 8014d7c:	3304      	adds	r3, #4
 8014d7e:	f104 0015 	add.w	r0, r4, #21
 8014d82:	4560      	cmp	r0, ip
 8014d84:	bf88      	it	hi
 8014d86:	2304      	movhi	r3, #4
 8014d88:	50ca      	str	r2, [r1, r3]
 8014d8a:	b10a      	cbz	r2, 8014d90 <__lshift+0xa4>
 8014d8c:	f108 0602 	add.w	r6, r8, #2
 8014d90:	3e01      	subs	r6, #1
 8014d92:	4638      	mov	r0, r7
 8014d94:	612e      	str	r6, [r5, #16]
 8014d96:	4621      	mov	r1, r4
 8014d98:	f7ff fd98 	bl	80148cc <_Bfree>
 8014d9c:	4628      	mov	r0, r5
 8014d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014da2:	f842 0f04 	str.w	r0, [r2, #4]!
 8014da6:	3301      	adds	r3, #1
 8014da8:	e7c5      	b.n	8014d36 <__lshift+0x4a>
 8014daa:	3904      	subs	r1, #4
 8014dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8014db0:	f841 2f04 	str.w	r2, [r1, #4]!
 8014db4:	459c      	cmp	ip, r3
 8014db6:	d8f9      	bhi.n	8014dac <__lshift+0xc0>
 8014db8:	e7ea      	b.n	8014d90 <__lshift+0xa4>
 8014dba:	bf00      	nop
 8014dbc:	0801e179 	.word	0x0801e179
 8014dc0:	0801e18a 	.word	0x0801e18a

08014dc4 <__mcmp>:
 8014dc4:	690a      	ldr	r2, [r1, #16]
 8014dc6:	4603      	mov	r3, r0
 8014dc8:	6900      	ldr	r0, [r0, #16]
 8014dca:	1a80      	subs	r0, r0, r2
 8014dcc:	b530      	push	{r4, r5, lr}
 8014dce:	d10e      	bne.n	8014dee <__mcmp+0x2a>
 8014dd0:	3314      	adds	r3, #20
 8014dd2:	3114      	adds	r1, #20
 8014dd4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014dd8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014ddc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014de0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014de4:	4295      	cmp	r5, r2
 8014de6:	d003      	beq.n	8014df0 <__mcmp+0x2c>
 8014de8:	d205      	bcs.n	8014df6 <__mcmp+0x32>
 8014dea:	f04f 30ff 	mov.w	r0, #4294967295
 8014dee:	bd30      	pop	{r4, r5, pc}
 8014df0:	42a3      	cmp	r3, r4
 8014df2:	d3f3      	bcc.n	8014ddc <__mcmp+0x18>
 8014df4:	e7fb      	b.n	8014dee <__mcmp+0x2a>
 8014df6:	2001      	movs	r0, #1
 8014df8:	e7f9      	b.n	8014dee <__mcmp+0x2a>
	...

08014dfc <__mdiff>:
 8014dfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e00:	4689      	mov	r9, r1
 8014e02:	4606      	mov	r6, r0
 8014e04:	4611      	mov	r1, r2
 8014e06:	4648      	mov	r0, r9
 8014e08:	4614      	mov	r4, r2
 8014e0a:	f7ff ffdb 	bl	8014dc4 <__mcmp>
 8014e0e:	1e05      	subs	r5, r0, #0
 8014e10:	d112      	bne.n	8014e38 <__mdiff+0x3c>
 8014e12:	4629      	mov	r1, r5
 8014e14:	4630      	mov	r0, r6
 8014e16:	f7ff fd19 	bl	801484c <_Balloc>
 8014e1a:	4602      	mov	r2, r0
 8014e1c:	b928      	cbnz	r0, 8014e2a <__mdiff+0x2e>
 8014e1e:	4b3f      	ldr	r3, [pc, #252]	@ (8014f1c <__mdiff+0x120>)
 8014e20:	f240 2137 	movw	r1, #567	@ 0x237
 8014e24:	483e      	ldr	r0, [pc, #248]	@ (8014f20 <__mdiff+0x124>)
 8014e26:	f001 fa47 	bl	80162b8 <__assert_func>
 8014e2a:	2301      	movs	r3, #1
 8014e2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014e30:	4610      	mov	r0, r2
 8014e32:	b003      	add	sp, #12
 8014e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e38:	bfbc      	itt	lt
 8014e3a:	464b      	movlt	r3, r9
 8014e3c:	46a1      	movlt	r9, r4
 8014e3e:	4630      	mov	r0, r6
 8014e40:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014e44:	bfba      	itte	lt
 8014e46:	461c      	movlt	r4, r3
 8014e48:	2501      	movlt	r5, #1
 8014e4a:	2500      	movge	r5, #0
 8014e4c:	f7ff fcfe 	bl	801484c <_Balloc>
 8014e50:	4602      	mov	r2, r0
 8014e52:	b918      	cbnz	r0, 8014e5c <__mdiff+0x60>
 8014e54:	4b31      	ldr	r3, [pc, #196]	@ (8014f1c <__mdiff+0x120>)
 8014e56:	f240 2145 	movw	r1, #581	@ 0x245
 8014e5a:	e7e3      	b.n	8014e24 <__mdiff+0x28>
 8014e5c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014e60:	6926      	ldr	r6, [r4, #16]
 8014e62:	60c5      	str	r5, [r0, #12]
 8014e64:	f109 0310 	add.w	r3, r9, #16
 8014e68:	f109 0514 	add.w	r5, r9, #20
 8014e6c:	f104 0e14 	add.w	lr, r4, #20
 8014e70:	f100 0b14 	add.w	fp, r0, #20
 8014e74:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014e78:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014e7c:	9301      	str	r3, [sp, #4]
 8014e7e:	46d9      	mov	r9, fp
 8014e80:	f04f 0c00 	mov.w	ip, #0
 8014e84:	9b01      	ldr	r3, [sp, #4]
 8014e86:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014e8a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014e8e:	9301      	str	r3, [sp, #4]
 8014e90:	fa1f f38a 	uxth.w	r3, sl
 8014e94:	4619      	mov	r1, r3
 8014e96:	b283      	uxth	r3, r0
 8014e98:	1acb      	subs	r3, r1, r3
 8014e9a:	0c00      	lsrs	r0, r0, #16
 8014e9c:	4463      	add	r3, ip
 8014e9e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014ea2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014ea6:	b29b      	uxth	r3, r3
 8014ea8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014eac:	4576      	cmp	r6, lr
 8014eae:	f849 3b04 	str.w	r3, [r9], #4
 8014eb2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014eb6:	d8e5      	bhi.n	8014e84 <__mdiff+0x88>
 8014eb8:	1b33      	subs	r3, r6, r4
 8014eba:	3b15      	subs	r3, #21
 8014ebc:	f023 0303 	bic.w	r3, r3, #3
 8014ec0:	3415      	adds	r4, #21
 8014ec2:	3304      	adds	r3, #4
 8014ec4:	42a6      	cmp	r6, r4
 8014ec6:	bf38      	it	cc
 8014ec8:	2304      	movcc	r3, #4
 8014eca:	441d      	add	r5, r3
 8014ecc:	445b      	add	r3, fp
 8014ece:	461e      	mov	r6, r3
 8014ed0:	462c      	mov	r4, r5
 8014ed2:	4544      	cmp	r4, r8
 8014ed4:	d30e      	bcc.n	8014ef4 <__mdiff+0xf8>
 8014ed6:	f108 0103 	add.w	r1, r8, #3
 8014eda:	1b49      	subs	r1, r1, r5
 8014edc:	f021 0103 	bic.w	r1, r1, #3
 8014ee0:	3d03      	subs	r5, #3
 8014ee2:	45a8      	cmp	r8, r5
 8014ee4:	bf38      	it	cc
 8014ee6:	2100      	movcc	r1, #0
 8014ee8:	440b      	add	r3, r1
 8014eea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014eee:	b191      	cbz	r1, 8014f16 <__mdiff+0x11a>
 8014ef0:	6117      	str	r7, [r2, #16]
 8014ef2:	e79d      	b.n	8014e30 <__mdiff+0x34>
 8014ef4:	f854 1b04 	ldr.w	r1, [r4], #4
 8014ef8:	46e6      	mov	lr, ip
 8014efa:	0c08      	lsrs	r0, r1, #16
 8014efc:	fa1c fc81 	uxtah	ip, ip, r1
 8014f00:	4471      	add	r1, lr
 8014f02:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014f06:	b289      	uxth	r1, r1
 8014f08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014f0c:	f846 1b04 	str.w	r1, [r6], #4
 8014f10:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014f14:	e7dd      	b.n	8014ed2 <__mdiff+0xd6>
 8014f16:	3f01      	subs	r7, #1
 8014f18:	e7e7      	b.n	8014eea <__mdiff+0xee>
 8014f1a:	bf00      	nop
 8014f1c:	0801e179 	.word	0x0801e179
 8014f20:	0801e18a 	.word	0x0801e18a

08014f24 <__ulp>:
 8014f24:	b082      	sub	sp, #8
 8014f26:	ed8d 0b00 	vstr	d0, [sp]
 8014f2a:	9a01      	ldr	r2, [sp, #4]
 8014f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8014f6c <__ulp+0x48>)
 8014f2e:	4013      	ands	r3, r2
 8014f30:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	dc08      	bgt.n	8014f4a <__ulp+0x26>
 8014f38:	425b      	negs	r3, r3
 8014f3a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8014f3e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8014f42:	da04      	bge.n	8014f4e <__ulp+0x2a>
 8014f44:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8014f48:	4113      	asrs	r3, r2
 8014f4a:	2200      	movs	r2, #0
 8014f4c:	e008      	b.n	8014f60 <__ulp+0x3c>
 8014f4e:	f1a2 0314 	sub.w	r3, r2, #20
 8014f52:	2b1e      	cmp	r3, #30
 8014f54:	bfda      	itte	le
 8014f56:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8014f5a:	40da      	lsrle	r2, r3
 8014f5c:	2201      	movgt	r2, #1
 8014f5e:	2300      	movs	r3, #0
 8014f60:	4619      	mov	r1, r3
 8014f62:	4610      	mov	r0, r2
 8014f64:	ec41 0b10 	vmov	d0, r0, r1
 8014f68:	b002      	add	sp, #8
 8014f6a:	4770      	bx	lr
 8014f6c:	7ff00000 	.word	0x7ff00000

08014f70 <__b2d>:
 8014f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f74:	6906      	ldr	r6, [r0, #16]
 8014f76:	f100 0814 	add.w	r8, r0, #20
 8014f7a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8014f7e:	1f37      	subs	r7, r6, #4
 8014f80:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014f84:	4610      	mov	r0, r2
 8014f86:	f7ff fd53 	bl	8014a30 <__hi0bits>
 8014f8a:	f1c0 0320 	rsb	r3, r0, #32
 8014f8e:	280a      	cmp	r0, #10
 8014f90:	600b      	str	r3, [r1, #0]
 8014f92:	491b      	ldr	r1, [pc, #108]	@ (8015000 <__b2d+0x90>)
 8014f94:	dc15      	bgt.n	8014fc2 <__b2d+0x52>
 8014f96:	f1c0 0c0b 	rsb	ip, r0, #11
 8014f9a:	fa22 f30c 	lsr.w	r3, r2, ip
 8014f9e:	45b8      	cmp	r8, r7
 8014fa0:	ea43 0501 	orr.w	r5, r3, r1
 8014fa4:	bf34      	ite	cc
 8014fa6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014faa:	2300      	movcs	r3, #0
 8014fac:	3015      	adds	r0, #21
 8014fae:	fa02 f000 	lsl.w	r0, r2, r0
 8014fb2:	fa23 f30c 	lsr.w	r3, r3, ip
 8014fb6:	4303      	orrs	r3, r0
 8014fb8:	461c      	mov	r4, r3
 8014fba:	ec45 4b10 	vmov	d0, r4, r5
 8014fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fc2:	45b8      	cmp	r8, r7
 8014fc4:	bf3a      	itte	cc
 8014fc6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014fca:	f1a6 0708 	subcc.w	r7, r6, #8
 8014fce:	2300      	movcs	r3, #0
 8014fd0:	380b      	subs	r0, #11
 8014fd2:	d012      	beq.n	8014ffa <__b2d+0x8a>
 8014fd4:	f1c0 0120 	rsb	r1, r0, #32
 8014fd8:	fa23 f401 	lsr.w	r4, r3, r1
 8014fdc:	4082      	lsls	r2, r0
 8014fde:	4322      	orrs	r2, r4
 8014fe0:	4547      	cmp	r7, r8
 8014fe2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8014fe6:	bf8c      	ite	hi
 8014fe8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8014fec:	2200      	movls	r2, #0
 8014fee:	4083      	lsls	r3, r0
 8014ff0:	40ca      	lsrs	r2, r1
 8014ff2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8014ff6:	4313      	orrs	r3, r2
 8014ff8:	e7de      	b.n	8014fb8 <__b2d+0x48>
 8014ffa:	ea42 0501 	orr.w	r5, r2, r1
 8014ffe:	e7db      	b.n	8014fb8 <__b2d+0x48>
 8015000:	3ff00000 	.word	0x3ff00000

08015004 <__d2b>:
 8015004:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015008:	460f      	mov	r7, r1
 801500a:	2101      	movs	r1, #1
 801500c:	ec59 8b10 	vmov	r8, r9, d0
 8015010:	4616      	mov	r6, r2
 8015012:	f7ff fc1b 	bl	801484c <_Balloc>
 8015016:	4604      	mov	r4, r0
 8015018:	b930      	cbnz	r0, 8015028 <__d2b+0x24>
 801501a:	4602      	mov	r2, r0
 801501c:	4b23      	ldr	r3, [pc, #140]	@ (80150ac <__d2b+0xa8>)
 801501e:	4824      	ldr	r0, [pc, #144]	@ (80150b0 <__d2b+0xac>)
 8015020:	f240 310f 	movw	r1, #783	@ 0x30f
 8015024:	f001 f948 	bl	80162b8 <__assert_func>
 8015028:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801502c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015030:	b10d      	cbz	r5, 8015036 <__d2b+0x32>
 8015032:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015036:	9301      	str	r3, [sp, #4]
 8015038:	f1b8 0300 	subs.w	r3, r8, #0
 801503c:	d023      	beq.n	8015086 <__d2b+0x82>
 801503e:	4668      	mov	r0, sp
 8015040:	9300      	str	r3, [sp, #0]
 8015042:	f7ff fd14 	bl	8014a6e <__lo0bits>
 8015046:	e9dd 1200 	ldrd	r1, r2, [sp]
 801504a:	b1d0      	cbz	r0, 8015082 <__d2b+0x7e>
 801504c:	f1c0 0320 	rsb	r3, r0, #32
 8015050:	fa02 f303 	lsl.w	r3, r2, r3
 8015054:	430b      	orrs	r3, r1
 8015056:	40c2      	lsrs	r2, r0
 8015058:	6163      	str	r3, [r4, #20]
 801505a:	9201      	str	r2, [sp, #4]
 801505c:	9b01      	ldr	r3, [sp, #4]
 801505e:	61a3      	str	r3, [r4, #24]
 8015060:	2b00      	cmp	r3, #0
 8015062:	bf0c      	ite	eq
 8015064:	2201      	moveq	r2, #1
 8015066:	2202      	movne	r2, #2
 8015068:	6122      	str	r2, [r4, #16]
 801506a:	b1a5      	cbz	r5, 8015096 <__d2b+0x92>
 801506c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8015070:	4405      	add	r5, r0
 8015072:	603d      	str	r5, [r7, #0]
 8015074:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8015078:	6030      	str	r0, [r6, #0]
 801507a:	4620      	mov	r0, r4
 801507c:	b003      	add	sp, #12
 801507e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015082:	6161      	str	r1, [r4, #20]
 8015084:	e7ea      	b.n	801505c <__d2b+0x58>
 8015086:	a801      	add	r0, sp, #4
 8015088:	f7ff fcf1 	bl	8014a6e <__lo0bits>
 801508c:	9b01      	ldr	r3, [sp, #4]
 801508e:	6163      	str	r3, [r4, #20]
 8015090:	3020      	adds	r0, #32
 8015092:	2201      	movs	r2, #1
 8015094:	e7e8      	b.n	8015068 <__d2b+0x64>
 8015096:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801509a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801509e:	6038      	str	r0, [r7, #0]
 80150a0:	6918      	ldr	r0, [r3, #16]
 80150a2:	f7ff fcc5 	bl	8014a30 <__hi0bits>
 80150a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80150aa:	e7e5      	b.n	8015078 <__d2b+0x74>
 80150ac:	0801e179 	.word	0x0801e179
 80150b0:	0801e18a 	.word	0x0801e18a

080150b4 <__ratio>:
 80150b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150b8:	4688      	mov	r8, r1
 80150ba:	4669      	mov	r1, sp
 80150bc:	4681      	mov	r9, r0
 80150be:	f7ff ff57 	bl	8014f70 <__b2d>
 80150c2:	a901      	add	r1, sp, #4
 80150c4:	4640      	mov	r0, r8
 80150c6:	ec55 4b10 	vmov	r4, r5, d0
 80150ca:	f7ff ff51 	bl	8014f70 <__b2d>
 80150ce:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80150d2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80150d6:	1ad2      	subs	r2, r2, r3
 80150d8:	e9dd 3100 	ldrd	r3, r1, [sp]
 80150dc:	1a5b      	subs	r3, r3, r1
 80150de:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80150e2:	ec57 6b10 	vmov	r6, r7, d0
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	bfd6      	itet	le
 80150ea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80150ee:	462a      	movgt	r2, r5
 80150f0:	463a      	movle	r2, r7
 80150f2:	46ab      	mov	fp, r5
 80150f4:	46a2      	mov	sl, r4
 80150f6:	bfce      	itee	gt
 80150f8:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80150fc:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8015100:	ee00 3a90 	vmovle	s1, r3
 8015104:	ec4b ab17 	vmov	d7, sl, fp
 8015108:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801510c:	b003      	add	sp, #12
 801510e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015112 <__copybits>:
 8015112:	3901      	subs	r1, #1
 8015114:	b570      	push	{r4, r5, r6, lr}
 8015116:	1149      	asrs	r1, r1, #5
 8015118:	6914      	ldr	r4, [r2, #16]
 801511a:	3101      	adds	r1, #1
 801511c:	f102 0314 	add.w	r3, r2, #20
 8015120:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015124:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015128:	1f05      	subs	r5, r0, #4
 801512a:	42a3      	cmp	r3, r4
 801512c:	d30c      	bcc.n	8015148 <__copybits+0x36>
 801512e:	1aa3      	subs	r3, r4, r2
 8015130:	3b11      	subs	r3, #17
 8015132:	f023 0303 	bic.w	r3, r3, #3
 8015136:	3211      	adds	r2, #17
 8015138:	42a2      	cmp	r2, r4
 801513a:	bf88      	it	hi
 801513c:	2300      	movhi	r3, #0
 801513e:	4418      	add	r0, r3
 8015140:	2300      	movs	r3, #0
 8015142:	4288      	cmp	r0, r1
 8015144:	d305      	bcc.n	8015152 <__copybits+0x40>
 8015146:	bd70      	pop	{r4, r5, r6, pc}
 8015148:	f853 6b04 	ldr.w	r6, [r3], #4
 801514c:	f845 6f04 	str.w	r6, [r5, #4]!
 8015150:	e7eb      	b.n	801512a <__copybits+0x18>
 8015152:	f840 3b04 	str.w	r3, [r0], #4
 8015156:	e7f4      	b.n	8015142 <__copybits+0x30>

08015158 <__any_on>:
 8015158:	f100 0214 	add.w	r2, r0, #20
 801515c:	6900      	ldr	r0, [r0, #16]
 801515e:	114b      	asrs	r3, r1, #5
 8015160:	4298      	cmp	r0, r3
 8015162:	b510      	push	{r4, lr}
 8015164:	db11      	blt.n	801518a <__any_on+0x32>
 8015166:	dd0a      	ble.n	801517e <__any_on+0x26>
 8015168:	f011 011f 	ands.w	r1, r1, #31
 801516c:	d007      	beq.n	801517e <__any_on+0x26>
 801516e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015172:	fa24 f001 	lsr.w	r0, r4, r1
 8015176:	fa00 f101 	lsl.w	r1, r0, r1
 801517a:	428c      	cmp	r4, r1
 801517c:	d10b      	bne.n	8015196 <__any_on+0x3e>
 801517e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015182:	4293      	cmp	r3, r2
 8015184:	d803      	bhi.n	801518e <__any_on+0x36>
 8015186:	2000      	movs	r0, #0
 8015188:	bd10      	pop	{r4, pc}
 801518a:	4603      	mov	r3, r0
 801518c:	e7f7      	b.n	801517e <__any_on+0x26>
 801518e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015192:	2900      	cmp	r1, #0
 8015194:	d0f5      	beq.n	8015182 <__any_on+0x2a>
 8015196:	2001      	movs	r0, #1
 8015198:	e7f6      	b.n	8015188 <__any_on+0x30>

0801519a <sulp>:
 801519a:	b570      	push	{r4, r5, r6, lr}
 801519c:	4604      	mov	r4, r0
 801519e:	460d      	mov	r5, r1
 80151a0:	4616      	mov	r6, r2
 80151a2:	ec45 4b10 	vmov	d0, r4, r5
 80151a6:	f7ff febd 	bl	8014f24 <__ulp>
 80151aa:	b17e      	cbz	r6, 80151cc <sulp+0x32>
 80151ac:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80151b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	dd09      	ble.n	80151cc <sulp+0x32>
 80151b8:	051b      	lsls	r3, r3, #20
 80151ba:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80151be:	2000      	movs	r0, #0
 80151c0:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80151c4:	ec41 0b17 	vmov	d7, r0, r1
 80151c8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80151cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080151d0 <_strtod_l>:
 80151d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151d4:	ed2d 8b0a 	vpush	{d8-d12}
 80151d8:	b097      	sub	sp, #92	@ 0x5c
 80151da:	4688      	mov	r8, r1
 80151dc:	920e      	str	r2, [sp, #56]	@ 0x38
 80151de:	2200      	movs	r2, #0
 80151e0:	9212      	str	r2, [sp, #72]	@ 0x48
 80151e2:	9005      	str	r0, [sp, #20]
 80151e4:	f04f 0a00 	mov.w	sl, #0
 80151e8:	f04f 0b00 	mov.w	fp, #0
 80151ec:	460a      	mov	r2, r1
 80151ee:	9211      	str	r2, [sp, #68]	@ 0x44
 80151f0:	7811      	ldrb	r1, [r2, #0]
 80151f2:	292b      	cmp	r1, #43	@ 0x2b
 80151f4:	d04c      	beq.n	8015290 <_strtod_l+0xc0>
 80151f6:	d839      	bhi.n	801526c <_strtod_l+0x9c>
 80151f8:	290d      	cmp	r1, #13
 80151fa:	d833      	bhi.n	8015264 <_strtod_l+0x94>
 80151fc:	2908      	cmp	r1, #8
 80151fe:	d833      	bhi.n	8015268 <_strtod_l+0x98>
 8015200:	2900      	cmp	r1, #0
 8015202:	d03c      	beq.n	801527e <_strtod_l+0xae>
 8015204:	2200      	movs	r2, #0
 8015206:	9208      	str	r2, [sp, #32]
 8015208:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801520a:	782a      	ldrb	r2, [r5, #0]
 801520c:	2a30      	cmp	r2, #48	@ 0x30
 801520e:	f040 80b7 	bne.w	8015380 <_strtod_l+0x1b0>
 8015212:	786a      	ldrb	r2, [r5, #1]
 8015214:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8015218:	2a58      	cmp	r2, #88	@ 0x58
 801521a:	d170      	bne.n	80152fe <_strtod_l+0x12e>
 801521c:	9302      	str	r3, [sp, #8]
 801521e:	9b08      	ldr	r3, [sp, #32]
 8015220:	9301      	str	r3, [sp, #4]
 8015222:	ab12      	add	r3, sp, #72	@ 0x48
 8015224:	9300      	str	r3, [sp, #0]
 8015226:	4a90      	ldr	r2, [pc, #576]	@ (8015468 <_strtod_l+0x298>)
 8015228:	9805      	ldr	r0, [sp, #20]
 801522a:	ab13      	add	r3, sp, #76	@ 0x4c
 801522c:	a911      	add	r1, sp, #68	@ 0x44
 801522e:	f001 f8dd 	bl	80163ec <__gethex>
 8015232:	f010 060f 	ands.w	r6, r0, #15
 8015236:	4604      	mov	r4, r0
 8015238:	d005      	beq.n	8015246 <_strtod_l+0x76>
 801523a:	2e06      	cmp	r6, #6
 801523c:	d12a      	bne.n	8015294 <_strtod_l+0xc4>
 801523e:	3501      	adds	r5, #1
 8015240:	2300      	movs	r3, #0
 8015242:	9511      	str	r5, [sp, #68]	@ 0x44
 8015244:	9308      	str	r3, [sp, #32]
 8015246:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015248:	2b00      	cmp	r3, #0
 801524a:	f040 8537 	bne.w	8015cbc <_strtod_l+0xaec>
 801524e:	9b08      	ldr	r3, [sp, #32]
 8015250:	ec4b ab10 	vmov	d0, sl, fp
 8015254:	b1cb      	cbz	r3, 801528a <_strtod_l+0xba>
 8015256:	eeb1 0b40 	vneg.f64	d0, d0
 801525a:	b017      	add	sp, #92	@ 0x5c
 801525c:	ecbd 8b0a 	vpop	{d8-d12}
 8015260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015264:	2920      	cmp	r1, #32
 8015266:	d1cd      	bne.n	8015204 <_strtod_l+0x34>
 8015268:	3201      	adds	r2, #1
 801526a:	e7c0      	b.n	80151ee <_strtod_l+0x1e>
 801526c:	292d      	cmp	r1, #45	@ 0x2d
 801526e:	d1c9      	bne.n	8015204 <_strtod_l+0x34>
 8015270:	2101      	movs	r1, #1
 8015272:	9108      	str	r1, [sp, #32]
 8015274:	1c51      	adds	r1, r2, #1
 8015276:	9111      	str	r1, [sp, #68]	@ 0x44
 8015278:	7852      	ldrb	r2, [r2, #1]
 801527a:	2a00      	cmp	r2, #0
 801527c:	d1c4      	bne.n	8015208 <_strtod_l+0x38>
 801527e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015280:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8015284:	2b00      	cmp	r3, #0
 8015286:	f040 8517 	bne.w	8015cb8 <_strtod_l+0xae8>
 801528a:	ec4b ab10 	vmov	d0, sl, fp
 801528e:	e7e4      	b.n	801525a <_strtod_l+0x8a>
 8015290:	2100      	movs	r1, #0
 8015292:	e7ee      	b.n	8015272 <_strtod_l+0xa2>
 8015294:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015296:	b13a      	cbz	r2, 80152a8 <_strtod_l+0xd8>
 8015298:	2135      	movs	r1, #53	@ 0x35
 801529a:	a814      	add	r0, sp, #80	@ 0x50
 801529c:	f7ff ff39 	bl	8015112 <__copybits>
 80152a0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80152a2:	9805      	ldr	r0, [sp, #20]
 80152a4:	f7ff fb12 	bl	80148cc <_Bfree>
 80152a8:	1e73      	subs	r3, r6, #1
 80152aa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80152ac:	2b04      	cmp	r3, #4
 80152ae:	d806      	bhi.n	80152be <_strtod_l+0xee>
 80152b0:	e8df f003 	tbb	[pc, r3]
 80152b4:	201d0314 	.word	0x201d0314
 80152b8:	14          	.byte	0x14
 80152b9:	00          	.byte	0x00
 80152ba:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 80152be:	05e3      	lsls	r3, r4, #23
 80152c0:	bf48      	it	mi
 80152c2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80152c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80152ca:	0d1b      	lsrs	r3, r3, #20
 80152cc:	051b      	lsls	r3, r3, #20
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d1b9      	bne.n	8015246 <_strtod_l+0x76>
 80152d2:	f7fe fb9f 	bl	8013a14 <__errno>
 80152d6:	2322      	movs	r3, #34	@ 0x22
 80152d8:	6003      	str	r3, [r0, #0]
 80152da:	e7b4      	b.n	8015246 <_strtod_l+0x76>
 80152dc:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 80152e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80152e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80152e8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80152ec:	e7e7      	b.n	80152be <_strtod_l+0xee>
 80152ee:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8015470 <_strtod_l+0x2a0>
 80152f2:	e7e4      	b.n	80152be <_strtod_l+0xee>
 80152f4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80152f8:	f04f 3aff 	mov.w	sl, #4294967295
 80152fc:	e7df      	b.n	80152be <_strtod_l+0xee>
 80152fe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015300:	1c5a      	adds	r2, r3, #1
 8015302:	9211      	str	r2, [sp, #68]	@ 0x44
 8015304:	785b      	ldrb	r3, [r3, #1]
 8015306:	2b30      	cmp	r3, #48	@ 0x30
 8015308:	d0f9      	beq.n	80152fe <_strtod_l+0x12e>
 801530a:	2b00      	cmp	r3, #0
 801530c:	d09b      	beq.n	8015246 <_strtod_l+0x76>
 801530e:	2301      	movs	r3, #1
 8015310:	9307      	str	r3, [sp, #28]
 8015312:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015314:	930a      	str	r3, [sp, #40]	@ 0x28
 8015316:	2300      	movs	r3, #0
 8015318:	9306      	str	r3, [sp, #24]
 801531a:	4699      	mov	r9, r3
 801531c:	461d      	mov	r5, r3
 801531e:	220a      	movs	r2, #10
 8015320:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8015322:	7804      	ldrb	r4, [r0, #0]
 8015324:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8015328:	b2d9      	uxtb	r1, r3
 801532a:	2909      	cmp	r1, #9
 801532c:	d92a      	bls.n	8015384 <_strtod_l+0x1b4>
 801532e:	494f      	ldr	r1, [pc, #316]	@ (801546c <_strtod_l+0x29c>)
 8015330:	2201      	movs	r2, #1
 8015332:	f000 ff87 	bl	8016244 <strncmp>
 8015336:	b398      	cbz	r0, 80153a0 <_strtod_l+0x1d0>
 8015338:	2000      	movs	r0, #0
 801533a:	4622      	mov	r2, r4
 801533c:	462b      	mov	r3, r5
 801533e:	4607      	mov	r7, r0
 8015340:	4601      	mov	r1, r0
 8015342:	2a65      	cmp	r2, #101	@ 0x65
 8015344:	d001      	beq.n	801534a <_strtod_l+0x17a>
 8015346:	2a45      	cmp	r2, #69	@ 0x45
 8015348:	d118      	bne.n	801537c <_strtod_l+0x1ac>
 801534a:	b91b      	cbnz	r3, 8015354 <_strtod_l+0x184>
 801534c:	9b07      	ldr	r3, [sp, #28]
 801534e:	4303      	orrs	r3, r0
 8015350:	d095      	beq.n	801527e <_strtod_l+0xae>
 8015352:	2300      	movs	r3, #0
 8015354:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8015358:	f108 0201 	add.w	r2, r8, #1
 801535c:	9211      	str	r2, [sp, #68]	@ 0x44
 801535e:	f898 2001 	ldrb.w	r2, [r8, #1]
 8015362:	2a2b      	cmp	r2, #43	@ 0x2b
 8015364:	d074      	beq.n	8015450 <_strtod_l+0x280>
 8015366:	2a2d      	cmp	r2, #45	@ 0x2d
 8015368:	d07a      	beq.n	8015460 <_strtod_l+0x290>
 801536a:	f04f 0e00 	mov.w	lr, #0
 801536e:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8015372:	2c09      	cmp	r4, #9
 8015374:	f240 8082 	bls.w	801547c <_strtod_l+0x2ac>
 8015378:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 801537c:	2400      	movs	r4, #0
 801537e:	e09d      	b.n	80154bc <_strtod_l+0x2ec>
 8015380:	2300      	movs	r3, #0
 8015382:	e7c5      	b.n	8015310 <_strtod_l+0x140>
 8015384:	2d08      	cmp	r5, #8
 8015386:	bfc8      	it	gt
 8015388:	9906      	ldrgt	r1, [sp, #24]
 801538a:	f100 0001 	add.w	r0, r0, #1
 801538e:	bfca      	itet	gt
 8015390:	fb02 3301 	mlagt	r3, r2, r1, r3
 8015394:	fb02 3909 	mlale	r9, r2, r9, r3
 8015398:	9306      	strgt	r3, [sp, #24]
 801539a:	3501      	adds	r5, #1
 801539c:	9011      	str	r0, [sp, #68]	@ 0x44
 801539e:	e7bf      	b.n	8015320 <_strtod_l+0x150>
 80153a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80153a2:	1c5a      	adds	r2, r3, #1
 80153a4:	9211      	str	r2, [sp, #68]	@ 0x44
 80153a6:	785a      	ldrb	r2, [r3, #1]
 80153a8:	b3bd      	cbz	r5, 801541a <_strtod_l+0x24a>
 80153aa:	4607      	mov	r7, r0
 80153ac:	462b      	mov	r3, r5
 80153ae:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80153b2:	2909      	cmp	r1, #9
 80153b4:	d912      	bls.n	80153dc <_strtod_l+0x20c>
 80153b6:	2101      	movs	r1, #1
 80153b8:	e7c3      	b.n	8015342 <_strtod_l+0x172>
 80153ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80153bc:	1c5a      	adds	r2, r3, #1
 80153be:	9211      	str	r2, [sp, #68]	@ 0x44
 80153c0:	785a      	ldrb	r2, [r3, #1]
 80153c2:	3001      	adds	r0, #1
 80153c4:	2a30      	cmp	r2, #48	@ 0x30
 80153c6:	d0f8      	beq.n	80153ba <_strtod_l+0x1ea>
 80153c8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80153cc:	2b08      	cmp	r3, #8
 80153ce:	f200 847a 	bhi.w	8015cc6 <_strtod_l+0xaf6>
 80153d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80153d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80153d6:	4607      	mov	r7, r0
 80153d8:	2000      	movs	r0, #0
 80153da:	4603      	mov	r3, r0
 80153dc:	3a30      	subs	r2, #48	@ 0x30
 80153de:	f100 0101 	add.w	r1, r0, #1
 80153e2:	d014      	beq.n	801540e <_strtod_l+0x23e>
 80153e4:	440f      	add	r7, r1
 80153e6:	469c      	mov	ip, r3
 80153e8:	f04f 0e0a 	mov.w	lr, #10
 80153ec:	f10c 0401 	add.w	r4, ip, #1
 80153f0:	1ae6      	subs	r6, r4, r3
 80153f2:	42b1      	cmp	r1, r6
 80153f4:	dc13      	bgt.n	801541e <_strtod_l+0x24e>
 80153f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80153fa:	1819      	adds	r1, r3, r0
 80153fc:	2908      	cmp	r1, #8
 80153fe:	f103 0301 	add.w	r3, r3, #1
 8015402:	4403      	add	r3, r0
 8015404:	dc19      	bgt.n	801543a <_strtod_l+0x26a>
 8015406:	210a      	movs	r1, #10
 8015408:	fb01 2909 	mla	r9, r1, r9, r2
 801540c:	2100      	movs	r1, #0
 801540e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015410:	1c50      	adds	r0, r2, #1
 8015412:	9011      	str	r0, [sp, #68]	@ 0x44
 8015414:	7852      	ldrb	r2, [r2, #1]
 8015416:	4608      	mov	r0, r1
 8015418:	e7c9      	b.n	80153ae <_strtod_l+0x1de>
 801541a:	4628      	mov	r0, r5
 801541c:	e7d2      	b.n	80153c4 <_strtod_l+0x1f4>
 801541e:	f1bc 0f08 	cmp.w	ip, #8
 8015422:	dc03      	bgt.n	801542c <_strtod_l+0x25c>
 8015424:	fb0e f909 	mul.w	r9, lr, r9
 8015428:	46a4      	mov	ip, r4
 801542a:	e7df      	b.n	80153ec <_strtod_l+0x21c>
 801542c:	2c10      	cmp	r4, #16
 801542e:	bfde      	ittt	le
 8015430:	9e06      	ldrle	r6, [sp, #24]
 8015432:	fb0e f606 	mulle.w	r6, lr, r6
 8015436:	9606      	strle	r6, [sp, #24]
 8015438:	e7f6      	b.n	8015428 <_strtod_l+0x258>
 801543a:	290f      	cmp	r1, #15
 801543c:	bfdf      	itttt	le
 801543e:	9806      	ldrle	r0, [sp, #24]
 8015440:	210a      	movle	r1, #10
 8015442:	fb01 2200 	mlale	r2, r1, r0, r2
 8015446:	9206      	strle	r2, [sp, #24]
 8015448:	e7e0      	b.n	801540c <_strtod_l+0x23c>
 801544a:	2700      	movs	r7, #0
 801544c:	2101      	movs	r1, #1
 801544e:	e77d      	b.n	801534c <_strtod_l+0x17c>
 8015450:	f04f 0e00 	mov.w	lr, #0
 8015454:	f108 0202 	add.w	r2, r8, #2
 8015458:	9211      	str	r2, [sp, #68]	@ 0x44
 801545a:	f898 2002 	ldrb.w	r2, [r8, #2]
 801545e:	e786      	b.n	801536e <_strtod_l+0x19e>
 8015460:	f04f 0e01 	mov.w	lr, #1
 8015464:	e7f6      	b.n	8015454 <_strtod_l+0x284>
 8015466:	bf00      	nop
 8015468:	0801e3ac 	.word	0x0801e3ac
 801546c:	0801e1e3 	.word	0x0801e1e3
 8015470:	7ff00000 	.word	0x7ff00000
 8015474:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015476:	1c54      	adds	r4, r2, #1
 8015478:	9411      	str	r4, [sp, #68]	@ 0x44
 801547a:	7852      	ldrb	r2, [r2, #1]
 801547c:	2a30      	cmp	r2, #48	@ 0x30
 801547e:	d0f9      	beq.n	8015474 <_strtod_l+0x2a4>
 8015480:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8015484:	2c08      	cmp	r4, #8
 8015486:	f63f af79 	bhi.w	801537c <_strtod_l+0x1ac>
 801548a:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 801548e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015490:	9209      	str	r2, [sp, #36]	@ 0x24
 8015492:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015494:	1c54      	adds	r4, r2, #1
 8015496:	9411      	str	r4, [sp, #68]	@ 0x44
 8015498:	7852      	ldrb	r2, [r2, #1]
 801549a:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 801549e:	2e09      	cmp	r6, #9
 80154a0:	d937      	bls.n	8015512 <_strtod_l+0x342>
 80154a2:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80154a4:	1ba4      	subs	r4, r4, r6
 80154a6:	2c08      	cmp	r4, #8
 80154a8:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 80154ac:	dc02      	bgt.n	80154b4 <_strtod_l+0x2e4>
 80154ae:	4564      	cmp	r4, ip
 80154b0:	bfa8      	it	ge
 80154b2:	4664      	movge	r4, ip
 80154b4:	f1be 0f00 	cmp.w	lr, #0
 80154b8:	d000      	beq.n	80154bc <_strtod_l+0x2ec>
 80154ba:	4264      	negs	r4, r4
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d14d      	bne.n	801555c <_strtod_l+0x38c>
 80154c0:	9b07      	ldr	r3, [sp, #28]
 80154c2:	4318      	orrs	r0, r3
 80154c4:	f47f aebf 	bne.w	8015246 <_strtod_l+0x76>
 80154c8:	2900      	cmp	r1, #0
 80154ca:	f47f aed8 	bne.w	801527e <_strtod_l+0xae>
 80154ce:	2a69      	cmp	r2, #105	@ 0x69
 80154d0:	d027      	beq.n	8015522 <_strtod_l+0x352>
 80154d2:	dc24      	bgt.n	801551e <_strtod_l+0x34e>
 80154d4:	2a49      	cmp	r2, #73	@ 0x49
 80154d6:	d024      	beq.n	8015522 <_strtod_l+0x352>
 80154d8:	2a4e      	cmp	r2, #78	@ 0x4e
 80154da:	f47f aed0 	bne.w	801527e <_strtod_l+0xae>
 80154de:	4997      	ldr	r1, [pc, #604]	@ (801573c <_strtod_l+0x56c>)
 80154e0:	a811      	add	r0, sp, #68	@ 0x44
 80154e2:	f001 f9a5 	bl	8016830 <__match>
 80154e6:	2800      	cmp	r0, #0
 80154e8:	f43f aec9 	beq.w	801527e <_strtod_l+0xae>
 80154ec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80154ee:	781b      	ldrb	r3, [r3, #0]
 80154f0:	2b28      	cmp	r3, #40	@ 0x28
 80154f2:	d12d      	bne.n	8015550 <_strtod_l+0x380>
 80154f4:	4992      	ldr	r1, [pc, #584]	@ (8015740 <_strtod_l+0x570>)
 80154f6:	aa14      	add	r2, sp, #80	@ 0x50
 80154f8:	a811      	add	r0, sp, #68	@ 0x44
 80154fa:	f001 f9ad 	bl	8016858 <__hexnan>
 80154fe:	2805      	cmp	r0, #5
 8015500:	d126      	bne.n	8015550 <_strtod_l+0x380>
 8015502:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015504:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8015508:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801550c:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8015510:	e699      	b.n	8015246 <_strtod_l+0x76>
 8015512:	240a      	movs	r4, #10
 8015514:	fb04 2c0c 	mla	ip, r4, ip, r2
 8015518:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 801551c:	e7b9      	b.n	8015492 <_strtod_l+0x2c2>
 801551e:	2a6e      	cmp	r2, #110	@ 0x6e
 8015520:	e7db      	b.n	80154da <_strtod_l+0x30a>
 8015522:	4988      	ldr	r1, [pc, #544]	@ (8015744 <_strtod_l+0x574>)
 8015524:	a811      	add	r0, sp, #68	@ 0x44
 8015526:	f001 f983 	bl	8016830 <__match>
 801552a:	2800      	cmp	r0, #0
 801552c:	f43f aea7 	beq.w	801527e <_strtod_l+0xae>
 8015530:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015532:	4985      	ldr	r1, [pc, #532]	@ (8015748 <_strtod_l+0x578>)
 8015534:	3b01      	subs	r3, #1
 8015536:	a811      	add	r0, sp, #68	@ 0x44
 8015538:	9311      	str	r3, [sp, #68]	@ 0x44
 801553a:	f001 f979 	bl	8016830 <__match>
 801553e:	b910      	cbnz	r0, 8015546 <_strtod_l+0x376>
 8015540:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015542:	3301      	adds	r3, #1
 8015544:	9311      	str	r3, [sp, #68]	@ 0x44
 8015546:	f8df b214 	ldr.w	fp, [pc, #532]	@ 801575c <_strtod_l+0x58c>
 801554a:	f04f 0a00 	mov.w	sl, #0
 801554e:	e67a      	b.n	8015246 <_strtod_l+0x76>
 8015550:	487e      	ldr	r0, [pc, #504]	@ (801574c <_strtod_l+0x57c>)
 8015552:	f000 fea9 	bl	80162a8 <nan>
 8015556:	ec5b ab10 	vmov	sl, fp, d0
 801555a:	e674      	b.n	8015246 <_strtod_l+0x76>
 801555c:	ee07 9a90 	vmov	s15, r9
 8015560:	1be2      	subs	r2, r4, r7
 8015562:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8015566:	2d00      	cmp	r5, #0
 8015568:	bf08      	it	eq
 801556a:	461d      	moveq	r5, r3
 801556c:	2b10      	cmp	r3, #16
 801556e:	9209      	str	r2, [sp, #36]	@ 0x24
 8015570:	461a      	mov	r2, r3
 8015572:	bfa8      	it	ge
 8015574:	2210      	movge	r2, #16
 8015576:	2b09      	cmp	r3, #9
 8015578:	ec5b ab17 	vmov	sl, fp, d7
 801557c:	dc15      	bgt.n	80155aa <_strtod_l+0x3da>
 801557e:	1be1      	subs	r1, r4, r7
 8015580:	2900      	cmp	r1, #0
 8015582:	f43f ae60 	beq.w	8015246 <_strtod_l+0x76>
 8015586:	eba4 0107 	sub.w	r1, r4, r7
 801558a:	dd72      	ble.n	8015672 <_strtod_l+0x4a2>
 801558c:	2916      	cmp	r1, #22
 801558e:	dc59      	bgt.n	8015644 <_strtod_l+0x474>
 8015590:	4b6f      	ldr	r3, [pc, #444]	@ (8015750 <_strtod_l+0x580>)
 8015592:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015594:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015598:	ed93 7b00 	vldr	d7, [r3]
 801559c:	ec4b ab16 	vmov	d6, sl, fp
 80155a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80155a4:	ec5b ab17 	vmov	sl, fp, d7
 80155a8:	e64d      	b.n	8015246 <_strtod_l+0x76>
 80155aa:	4969      	ldr	r1, [pc, #420]	@ (8015750 <_strtod_l+0x580>)
 80155ac:	eddd 6a06 	vldr	s13, [sp, #24]
 80155b0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80155b4:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 80155b8:	2b0f      	cmp	r3, #15
 80155ba:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80155be:	eea7 6b05 	vfma.f64	d6, d7, d5
 80155c2:	ec5b ab16 	vmov	sl, fp, d6
 80155c6:	ddda      	ble.n	801557e <_strtod_l+0x3ae>
 80155c8:	1a9a      	subs	r2, r3, r2
 80155ca:	1be1      	subs	r1, r4, r7
 80155cc:	440a      	add	r2, r1
 80155ce:	2a00      	cmp	r2, #0
 80155d0:	f340 8094 	ble.w	80156fc <_strtod_l+0x52c>
 80155d4:	f012 000f 	ands.w	r0, r2, #15
 80155d8:	d00a      	beq.n	80155f0 <_strtod_l+0x420>
 80155da:	495d      	ldr	r1, [pc, #372]	@ (8015750 <_strtod_l+0x580>)
 80155dc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80155e0:	ed91 7b00 	vldr	d7, [r1]
 80155e4:	ec4b ab16 	vmov	d6, sl, fp
 80155e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80155ec:	ec5b ab17 	vmov	sl, fp, d7
 80155f0:	f032 020f 	bics.w	r2, r2, #15
 80155f4:	d073      	beq.n	80156de <_strtod_l+0x50e>
 80155f6:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 80155fa:	dd47      	ble.n	801568c <_strtod_l+0x4bc>
 80155fc:	2400      	movs	r4, #0
 80155fe:	4625      	mov	r5, r4
 8015600:	9407      	str	r4, [sp, #28]
 8015602:	4626      	mov	r6, r4
 8015604:	9a05      	ldr	r2, [sp, #20]
 8015606:	f8df b154 	ldr.w	fp, [pc, #340]	@ 801575c <_strtod_l+0x58c>
 801560a:	2322      	movs	r3, #34	@ 0x22
 801560c:	6013      	str	r3, [r2, #0]
 801560e:	f04f 0a00 	mov.w	sl, #0
 8015612:	9b07      	ldr	r3, [sp, #28]
 8015614:	2b00      	cmp	r3, #0
 8015616:	f43f ae16 	beq.w	8015246 <_strtod_l+0x76>
 801561a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801561c:	9805      	ldr	r0, [sp, #20]
 801561e:	f7ff f955 	bl	80148cc <_Bfree>
 8015622:	9805      	ldr	r0, [sp, #20]
 8015624:	4631      	mov	r1, r6
 8015626:	f7ff f951 	bl	80148cc <_Bfree>
 801562a:	9805      	ldr	r0, [sp, #20]
 801562c:	4629      	mov	r1, r5
 801562e:	f7ff f94d 	bl	80148cc <_Bfree>
 8015632:	9907      	ldr	r1, [sp, #28]
 8015634:	9805      	ldr	r0, [sp, #20]
 8015636:	f7ff f949 	bl	80148cc <_Bfree>
 801563a:	9805      	ldr	r0, [sp, #20]
 801563c:	4621      	mov	r1, r4
 801563e:	f7ff f945 	bl	80148cc <_Bfree>
 8015642:	e600      	b.n	8015246 <_strtod_l+0x76>
 8015644:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8015648:	1be0      	subs	r0, r4, r7
 801564a:	4281      	cmp	r1, r0
 801564c:	dbbc      	blt.n	80155c8 <_strtod_l+0x3f8>
 801564e:	4a40      	ldr	r2, [pc, #256]	@ (8015750 <_strtod_l+0x580>)
 8015650:	f1c3 030f 	rsb	r3, r3, #15
 8015654:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8015658:	ed91 7b00 	vldr	d7, [r1]
 801565c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801565e:	ec4b ab16 	vmov	d6, sl, fp
 8015662:	1acb      	subs	r3, r1, r3
 8015664:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8015668:	ee27 7b06 	vmul.f64	d7, d7, d6
 801566c:	ed92 6b00 	vldr	d6, [r2]
 8015670:	e796      	b.n	80155a0 <_strtod_l+0x3d0>
 8015672:	3116      	adds	r1, #22
 8015674:	dba8      	blt.n	80155c8 <_strtod_l+0x3f8>
 8015676:	4b36      	ldr	r3, [pc, #216]	@ (8015750 <_strtod_l+0x580>)
 8015678:	1b3c      	subs	r4, r7, r4
 801567a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801567e:	ed94 7b00 	vldr	d7, [r4]
 8015682:	ec4b ab16 	vmov	d6, sl, fp
 8015686:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801568a:	e78b      	b.n	80155a4 <_strtod_l+0x3d4>
 801568c:	2000      	movs	r0, #0
 801568e:	ec4b ab17 	vmov	d7, sl, fp
 8015692:	4e30      	ldr	r6, [pc, #192]	@ (8015754 <_strtod_l+0x584>)
 8015694:	1112      	asrs	r2, r2, #4
 8015696:	4601      	mov	r1, r0
 8015698:	2a01      	cmp	r2, #1
 801569a:	dc23      	bgt.n	80156e4 <_strtod_l+0x514>
 801569c:	b108      	cbz	r0, 80156a2 <_strtod_l+0x4d2>
 801569e:	ec5b ab17 	vmov	sl, fp, d7
 80156a2:	4a2c      	ldr	r2, [pc, #176]	@ (8015754 <_strtod_l+0x584>)
 80156a4:	482c      	ldr	r0, [pc, #176]	@ (8015758 <_strtod_l+0x588>)
 80156a6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80156aa:	ed92 7b00 	vldr	d7, [r2]
 80156ae:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80156b2:	ec4b ab16 	vmov	d6, sl, fp
 80156b6:	4a29      	ldr	r2, [pc, #164]	@ (801575c <_strtod_l+0x58c>)
 80156b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80156bc:	ee17 1a90 	vmov	r1, s15
 80156c0:	400a      	ands	r2, r1
 80156c2:	4282      	cmp	r2, r0
 80156c4:	ec5b ab17 	vmov	sl, fp, d7
 80156c8:	d898      	bhi.n	80155fc <_strtod_l+0x42c>
 80156ca:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 80156ce:	4282      	cmp	r2, r0
 80156d0:	bf86      	itte	hi
 80156d2:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8015760 <_strtod_l+0x590>
 80156d6:	f04f 3aff 	movhi.w	sl, #4294967295
 80156da:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 80156de:	2200      	movs	r2, #0
 80156e0:	9206      	str	r2, [sp, #24]
 80156e2:	e076      	b.n	80157d2 <_strtod_l+0x602>
 80156e4:	f012 0f01 	tst.w	r2, #1
 80156e8:	d004      	beq.n	80156f4 <_strtod_l+0x524>
 80156ea:	ed96 6b00 	vldr	d6, [r6]
 80156ee:	2001      	movs	r0, #1
 80156f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80156f4:	3101      	adds	r1, #1
 80156f6:	1052      	asrs	r2, r2, #1
 80156f8:	3608      	adds	r6, #8
 80156fa:	e7cd      	b.n	8015698 <_strtod_l+0x4c8>
 80156fc:	d0ef      	beq.n	80156de <_strtod_l+0x50e>
 80156fe:	4252      	negs	r2, r2
 8015700:	f012 000f 	ands.w	r0, r2, #15
 8015704:	d00a      	beq.n	801571c <_strtod_l+0x54c>
 8015706:	4912      	ldr	r1, [pc, #72]	@ (8015750 <_strtod_l+0x580>)
 8015708:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801570c:	ed91 7b00 	vldr	d7, [r1]
 8015710:	ec4b ab16 	vmov	d6, sl, fp
 8015714:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015718:	ec5b ab17 	vmov	sl, fp, d7
 801571c:	1112      	asrs	r2, r2, #4
 801571e:	d0de      	beq.n	80156de <_strtod_l+0x50e>
 8015720:	2a1f      	cmp	r2, #31
 8015722:	dd1f      	ble.n	8015764 <_strtod_l+0x594>
 8015724:	2400      	movs	r4, #0
 8015726:	4625      	mov	r5, r4
 8015728:	9407      	str	r4, [sp, #28]
 801572a:	4626      	mov	r6, r4
 801572c:	9a05      	ldr	r2, [sp, #20]
 801572e:	2322      	movs	r3, #34	@ 0x22
 8015730:	f04f 0a00 	mov.w	sl, #0
 8015734:	f04f 0b00 	mov.w	fp, #0
 8015738:	6013      	str	r3, [r2, #0]
 801573a:	e76a      	b.n	8015612 <_strtod_l+0x442>
 801573c:	0801e0d1 	.word	0x0801e0d1
 8015740:	0801e398 	.word	0x0801e398
 8015744:	0801e0c9 	.word	0x0801e0c9
 8015748:	0801e100 	.word	0x0801e100
 801574c:	0801e239 	.word	0x0801e239
 8015750:	0801e2d0 	.word	0x0801e2d0
 8015754:	0801e2a8 	.word	0x0801e2a8
 8015758:	7ca00000 	.word	0x7ca00000
 801575c:	7ff00000 	.word	0x7ff00000
 8015760:	7fefffff 	.word	0x7fefffff
 8015764:	f012 0110 	ands.w	r1, r2, #16
 8015768:	bf18      	it	ne
 801576a:	216a      	movne	r1, #106	@ 0x6a
 801576c:	9106      	str	r1, [sp, #24]
 801576e:	ec4b ab17 	vmov	d7, sl, fp
 8015772:	49af      	ldr	r1, [pc, #700]	@ (8015a30 <_strtod_l+0x860>)
 8015774:	2000      	movs	r0, #0
 8015776:	07d6      	lsls	r6, r2, #31
 8015778:	d504      	bpl.n	8015784 <_strtod_l+0x5b4>
 801577a:	ed91 6b00 	vldr	d6, [r1]
 801577e:	2001      	movs	r0, #1
 8015780:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015784:	1052      	asrs	r2, r2, #1
 8015786:	f101 0108 	add.w	r1, r1, #8
 801578a:	d1f4      	bne.n	8015776 <_strtod_l+0x5a6>
 801578c:	b108      	cbz	r0, 8015792 <_strtod_l+0x5c2>
 801578e:	ec5b ab17 	vmov	sl, fp, d7
 8015792:	9a06      	ldr	r2, [sp, #24]
 8015794:	b1b2      	cbz	r2, 80157c4 <_strtod_l+0x5f4>
 8015796:	f3cb 510a 	ubfx	r1, fp, #20, #11
 801579a:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 801579e:	2a00      	cmp	r2, #0
 80157a0:	4658      	mov	r0, fp
 80157a2:	dd0f      	ble.n	80157c4 <_strtod_l+0x5f4>
 80157a4:	2a1f      	cmp	r2, #31
 80157a6:	dd55      	ble.n	8015854 <_strtod_l+0x684>
 80157a8:	2a34      	cmp	r2, #52	@ 0x34
 80157aa:	bfde      	ittt	le
 80157ac:	f04f 32ff 	movle.w	r2, #4294967295
 80157b0:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 80157b4:	408a      	lslle	r2, r1
 80157b6:	f04f 0a00 	mov.w	sl, #0
 80157ba:	bfcc      	ite	gt
 80157bc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80157c0:	ea02 0b00 	andle.w	fp, r2, r0
 80157c4:	ec4b ab17 	vmov	d7, sl, fp
 80157c8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80157cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157d0:	d0a8      	beq.n	8015724 <_strtod_l+0x554>
 80157d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80157d4:	9805      	ldr	r0, [sp, #20]
 80157d6:	f8cd 9000 	str.w	r9, [sp]
 80157da:	462a      	mov	r2, r5
 80157dc:	f7ff f8de 	bl	801499c <__s2b>
 80157e0:	9007      	str	r0, [sp, #28]
 80157e2:	2800      	cmp	r0, #0
 80157e4:	f43f af0a 	beq.w	80155fc <_strtod_l+0x42c>
 80157e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80157ea:	1b3f      	subs	r7, r7, r4
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	bfb4      	ite	lt
 80157f0:	463b      	movlt	r3, r7
 80157f2:	2300      	movge	r3, #0
 80157f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80157f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80157f8:	ed9f bb89 	vldr	d11, [pc, #548]	@ 8015a20 <_strtod_l+0x850>
 80157fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015800:	2400      	movs	r4, #0
 8015802:	930d      	str	r3, [sp, #52]	@ 0x34
 8015804:	4625      	mov	r5, r4
 8015806:	9b07      	ldr	r3, [sp, #28]
 8015808:	9805      	ldr	r0, [sp, #20]
 801580a:	6859      	ldr	r1, [r3, #4]
 801580c:	f7ff f81e 	bl	801484c <_Balloc>
 8015810:	4606      	mov	r6, r0
 8015812:	2800      	cmp	r0, #0
 8015814:	f43f aef6 	beq.w	8015604 <_strtod_l+0x434>
 8015818:	9b07      	ldr	r3, [sp, #28]
 801581a:	691a      	ldr	r2, [r3, #16]
 801581c:	ec4b ab19 	vmov	d9, sl, fp
 8015820:	3202      	adds	r2, #2
 8015822:	f103 010c 	add.w	r1, r3, #12
 8015826:	0092      	lsls	r2, r2, #2
 8015828:	300c      	adds	r0, #12
 801582a:	f000 fd2d 	bl	8016288 <memcpy>
 801582e:	eeb0 0b49 	vmov.f64	d0, d9
 8015832:	9805      	ldr	r0, [sp, #20]
 8015834:	aa14      	add	r2, sp, #80	@ 0x50
 8015836:	a913      	add	r1, sp, #76	@ 0x4c
 8015838:	f7ff fbe4 	bl	8015004 <__d2b>
 801583c:	9012      	str	r0, [sp, #72]	@ 0x48
 801583e:	2800      	cmp	r0, #0
 8015840:	f43f aee0 	beq.w	8015604 <_strtod_l+0x434>
 8015844:	9805      	ldr	r0, [sp, #20]
 8015846:	2101      	movs	r1, #1
 8015848:	f7ff f93e 	bl	8014ac8 <__i2b>
 801584c:	4605      	mov	r5, r0
 801584e:	b940      	cbnz	r0, 8015862 <_strtod_l+0x692>
 8015850:	2500      	movs	r5, #0
 8015852:	e6d7      	b.n	8015604 <_strtod_l+0x434>
 8015854:	f04f 31ff 	mov.w	r1, #4294967295
 8015858:	fa01 f202 	lsl.w	r2, r1, r2
 801585c:	ea02 0a0a 	and.w	sl, r2, sl
 8015860:	e7b0      	b.n	80157c4 <_strtod_l+0x5f4>
 8015862:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8015864:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8015866:	2f00      	cmp	r7, #0
 8015868:	bfab      	itete	ge
 801586a:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 801586c:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 801586e:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8015872:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8015876:	bfac      	ite	ge
 8015878:	eb07 0903 	addge.w	r9, r7, r3
 801587c:	eba3 0807 	sublt.w	r8, r3, r7
 8015880:	9b06      	ldr	r3, [sp, #24]
 8015882:	1aff      	subs	r7, r7, r3
 8015884:	4417      	add	r7, r2
 8015886:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 801588a:	4a6a      	ldr	r2, [pc, #424]	@ (8015a34 <_strtod_l+0x864>)
 801588c:	3f01      	subs	r7, #1
 801588e:	4297      	cmp	r7, r2
 8015890:	da51      	bge.n	8015936 <_strtod_l+0x766>
 8015892:	1bd1      	subs	r1, r2, r7
 8015894:	291f      	cmp	r1, #31
 8015896:	eba3 0301 	sub.w	r3, r3, r1
 801589a:	f04f 0201 	mov.w	r2, #1
 801589e:	dc3e      	bgt.n	801591e <_strtod_l+0x74e>
 80158a0:	408a      	lsls	r2, r1
 80158a2:	920c      	str	r2, [sp, #48]	@ 0x30
 80158a4:	2200      	movs	r2, #0
 80158a6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80158a8:	eb09 0703 	add.w	r7, r9, r3
 80158ac:	4498      	add	r8, r3
 80158ae:	9b06      	ldr	r3, [sp, #24]
 80158b0:	45b9      	cmp	r9, r7
 80158b2:	4498      	add	r8, r3
 80158b4:	464b      	mov	r3, r9
 80158b6:	bfa8      	it	ge
 80158b8:	463b      	movge	r3, r7
 80158ba:	4543      	cmp	r3, r8
 80158bc:	bfa8      	it	ge
 80158be:	4643      	movge	r3, r8
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	bfc2      	ittt	gt
 80158c4:	1aff      	subgt	r7, r7, r3
 80158c6:	eba8 0803 	subgt.w	r8, r8, r3
 80158ca:	eba9 0903 	subgt.w	r9, r9, r3
 80158ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	dd16      	ble.n	8015902 <_strtod_l+0x732>
 80158d4:	4629      	mov	r1, r5
 80158d6:	9805      	ldr	r0, [sp, #20]
 80158d8:	461a      	mov	r2, r3
 80158da:	f7ff f9ad 	bl	8014c38 <__pow5mult>
 80158de:	4605      	mov	r5, r0
 80158e0:	2800      	cmp	r0, #0
 80158e2:	d0b5      	beq.n	8015850 <_strtod_l+0x680>
 80158e4:	4601      	mov	r1, r0
 80158e6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80158e8:	9805      	ldr	r0, [sp, #20]
 80158ea:	f7ff f903 	bl	8014af4 <__multiply>
 80158ee:	900f      	str	r0, [sp, #60]	@ 0x3c
 80158f0:	2800      	cmp	r0, #0
 80158f2:	f43f ae87 	beq.w	8015604 <_strtod_l+0x434>
 80158f6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80158f8:	9805      	ldr	r0, [sp, #20]
 80158fa:	f7fe ffe7 	bl	80148cc <_Bfree>
 80158fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015900:	9312      	str	r3, [sp, #72]	@ 0x48
 8015902:	2f00      	cmp	r7, #0
 8015904:	dc1b      	bgt.n	801593e <_strtod_l+0x76e>
 8015906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015908:	2b00      	cmp	r3, #0
 801590a:	dd21      	ble.n	8015950 <_strtod_l+0x780>
 801590c:	4631      	mov	r1, r6
 801590e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015910:	9805      	ldr	r0, [sp, #20]
 8015912:	f7ff f991 	bl	8014c38 <__pow5mult>
 8015916:	4606      	mov	r6, r0
 8015918:	b9d0      	cbnz	r0, 8015950 <_strtod_l+0x780>
 801591a:	2600      	movs	r6, #0
 801591c:	e672      	b.n	8015604 <_strtod_l+0x434>
 801591e:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8015922:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8015926:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 801592a:	37e2      	adds	r7, #226	@ 0xe2
 801592c:	fa02 f107 	lsl.w	r1, r2, r7
 8015930:	910b      	str	r1, [sp, #44]	@ 0x2c
 8015932:	920c      	str	r2, [sp, #48]	@ 0x30
 8015934:	e7b8      	b.n	80158a8 <_strtod_l+0x6d8>
 8015936:	2200      	movs	r2, #0
 8015938:	920b      	str	r2, [sp, #44]	@ 0x2c
 801593a:	2201      	movs	r2, #1
 801593c:	e7f9      	b.n	8015932 <_strtod_l+0x762>
 801593e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015940:	9805      	ldr	r0, [sp, #20]
 8015942:	463a      	mov	r2, r7
 8015944:	f7ff f9d2 	bl	8014cec <__lshift>
 8015948:	9012      	str	r0, [sp, #72]	@ 0x48
 801594a:	2800      	cmp	r0, #0
 801594c:	d1db      	bne.n	8015906 <_strtod_l+0x736>
 801594e:	e659      	b.n	8015604 <_strtod_l+0x434>
 8015950:	f1b8 0f00 	cmp.w	r8, #0
 8015954:	dd07      	ble.n	8015966 <_strtod_l+0x796>
 8015956:	4631      	mov	r1, r6
 8015958:	9805      	ldr	r0, [sp, #20]
 801595a:	4642      	mov	r2, r8
 801595c:	f7ff f9c6 	bl	8014cec <__lshift>
 8015960:	4606      	mov	r6, r0
 8015962:	2800      	cmp	r0, #0
 8015964:	d0d9      	beq.n	801591a <_strtod_l+0x74a>
 8015966:	f1b9 0f00 	cmp.w	r9, #0
 801596a:	dd08      	ble.n	801597e <_strtod_l+0x7ae>
 801596c:	4629      	mov	r1, r5
 801596e:	9805      	ldr	r0, [sp, #20]
 8015970:	464a      	mov	r2, r9
 8015972:	f7ff f9bb 	bl	8014cec <__lshift>
 8015976:	4605      	mov	r5, r0
 8015978:	2800      	cmp	r0, #0
 801597a:	f43f ae43 	beq.w	8015604 <_strtod_l+0x434>
 801597e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015980:	9805      	ldr	r0, [sp, #20]
 8015982:	4632      	mov	r2, r6
 8015984:	f7ff fa3a 	bl	8014dfc <__mdiff>
 8015988:	4604      	mov	r4, r0
 801598a:	2800      	cmp	r0, #0
 801598c:	f43f ae3a 	beq.w	8015604 <_strtod_l+0x434>
 8015990:	2300      	movs	r3, #0
 8015992:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8015996:	60c3      	str	r3, [r0, #12]
 8015998:	4629      	mov	r1, r5
 801599a:	f7ff fa13 	bl	8014dc4 <__mcmp>
 801599e:	2800      	cmp	r0, #0
 80159a0:	da4c      	bge.n	8015a3c <_strtod_l+0x86c>
 80159a2:	ea58 080a 	orrs.w	r8, r8, sl
 80159a6:	d172      	bne.n	8015a8e <_strtod_l+0x8be>
 80159a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d16e      	bne.n	8015a8e <_strtod_l+0x8be>
 80159b0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80159b4:	0d1b      	lsrs	r3, r3, #20
 80159b6:	051b      	lsls	r3, r3, #20
 80159b8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80159bc:	d967      	bls.n	8015a8e <_strtod_l+0x8be>
 80159be:	6963      	ldr	r3, [r4, #20]
 80159c0:	b913      	cbnz	r3, 80159c8 <_strtod_l+0x7f8>
 80159c2:	6923      	ldr	r3, [r4, #16]
 80159c4:	2b01      	cmp	r3, #1
 80159c6:	dd62      	ble.n	8015a8e <_strtod_l+0x8be>
 80159c8:	4621      	mov	r1, r4
 80159ca:	2201      	movs	r2, #1
 80159cc:	9805      	ldr	r0, [sp, #20]
 80159ce:	f7ff f98d 	bl	8014cec <__lshift>
 80159d2:	4629      	mov	r1, r5
 80159d4:	4604      	mov	r4, r0
 80159d6:	f7ff f9f5 	bl	8014dc4 <__mcmp>
 80159da:	2800      	cmp	r0, #0
 80159dc:	dd57      	ble.n	8015a8e <_strtod_l+0x8be>
 80159de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80159e2:	9a06      	ldr	r2, [sp, #24]
 80159e4:	0d1b      	lsrs	r3, r3, #20
 80159e6:	051b      	lsls	r3, r3, #20
 80159e8:	2a00      	cmp	r2, #0
 80159ea:	d06e      	beq.n	8015aca <_strtod_l+0x8fa>
 80159ec:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80159f0:	d86b      	bhi.n	8015aca <_strtod_l+0x8fa>
 80159f2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80159f6:	f67f ae99 	bls.w	801572c <_strtod_l+0x55c>
 80159fa:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8015a28 <_strtod_l+0x858>
 80159fe:	ec4b ab16 	vmov	d6, sl, fp
 8015a02:	4b0d      	ldr	r3, [pc, #52]	@ (8015a38 <_strtod_l+0x868>)
 8015a04:	ee26 7b07 	vmul.f64	d7, d6, d7
 8015a08:	ee17 2a90 	vmov	r2, s15
 8015a0c:	4013      	ands	r3, r2
 8015a0e:	ec5b ab17 	vmov	sl, fp, d7
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	f47f ae01 	bne.w	801561a <_strtod_l+0x44a>
 8015a18:	9a05      	ldr	r2, [sp, #20]
 8015a1a:	2322      	movs	r3, #34	@ 0x22
 8015a1c:	6013      	str	r3, [r2, #0]
 8015a1e:	e5fc      	b.n	801561a <_strtod_l+0x44a>
 8015a20:	ffc00000 	.word	0xffc00000
 8015a24:	41dfffff 	.word	0x41dfffff
 8015a28:	00000000 	.word	0x00000000
 8015a2c:	39500000 	.word	0x39500000
 8015a30:	0801e3c0 	.word	0x0801e3c0
 8015a34:	fffffc02 	.word	0xfffffc02
 8015a38:	7ff00000 	.word	0x7ff00000
 8015a3c:	46d9      	mov	r9, fp
 8015a3e:	d15d      	bne.n	8015afc <_strtod_l+0x92c>
 8015a40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015a44:	f1b8 0f00 	cmp.w	r8, #0
 8015a48:	d02a      	beq.n	8015aa0 <_strtod_l+0x8d0>
 8015a4a:	4aa9      	ldr	r2, [pc, #676]	@ (8015cf0 <_strtod_l+0xb20>)
 8015a4c:	4293      	cmp	r3, r2
 8015a4e:	d12a      	bne.n	8015aa6 <_strtod_l+0x8d6>
 8015a50:	9b06      	ldr	r3, [sp, #24]
 8015a52:	4652      	mov	r2, sl
 8015a54:	b1fb      	cbz	r3, 8015a96 <_strtod_l+0x8c6>
 8015a56:	4ba7      	ldr	r3, [pc, #668]	@ (8015cf4 <_strtod_l+0xb24>)
 8015a58:	ea0b 0303 	and.w	r3, fp, r3
 8015a5c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8015a60:	f04f 31ff 	mov.w	r1, #4294967295
 8015a64:	d81a      	bhi.n	8015a9c <_strtod_l+0x8cc>
 8015a66:	0d1b      	lsrs	r3, r3, #20
 8015a68:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8015a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8015a70:	429a      	cmp	r2, r3
 8015a72:	d118      	bne.n	8015aa6 <_strtod_l+0x8d6>
 8015a74:	4ba0      	ldr	r3, [pc, #640]	@ (8015cf8 <_strtod_l+0xb28>)
 8015a76:	4599      	cmp	r9, r3
 8015a78:	d102      	bne.n	8015a80 <_strtod_l+0x8b0>
 8015a7a:	3201      	adds	r2, #1
 8015a7c:	f43f adc2 	beq.w	8015604 <_strtod_l+0x434>
 8015a80:	4b9c      	ldr	r3, [pc, #624]	@ (8015cf4 <_strtod_l+0xb24>)
 8015a82:	ea09 0303 	and.w	r3, r9, r3
 8015a86:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8015a8a:	f04f 0a00 	mov.w	sl, #0
 8015a8e:	9b06      	ldr	r3, [sp, #24]
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d1b2      	bne.n	80159fa <_strtod_l+0x82a>
 8015a94:	e5c1      	b.n	801561a <_strtod_l+0x44a>
 8015a96:	f04f 33ff 	mov.w	r3, #4294967295
 8015a9a:	e7e9      	b.n	8015a70 <_strtod_l+0x8a0>
 8015a9c:	460b      	mov	r3, r1
 8015a9e:	e7e7      	b.n	8015a70 <_strtod_l+0x8a0>
 8015aa0:	ea53 030a 	orrs.w	r3, r3, sl
 8015aa4:	d09b      	beq.n	80159de <_strtod_l+0x80e>
 8015aa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015aa8:	b1c3      	cbz	r3, 8015adc <_strtod_l+0x90c>
 8015aaa:	ea13 0f09 	tst.w	r3, r9
 8015aae:	d0ee      	beq.n	8015a8e <_strtod_l+0x8be>
 8015ab0:	9a06      	ldr	r2, [sp, #24]
 8015ab2:	4650      	mov	r0, sl
 8015ab4:	4659      	mov	r1, fp
 8015ab6:	f1b8 0f00 	cmp.w	r8, #0
 8015aba:	d013      	beq.n	8015ae4 <_strtod_l+0x914>
 8015abc:	f7ff fb6d 	bl	801519a <sulp>
 8015ac0:	ee39 7b00 	vadd.f64	d7, d9, d0
 8015ac4:	ec5b ab17 	vmov	sl, fp, d7
 8015ac8:	e7e1      	b.n	8015a8e <_strtod_l+0x8be>
 8015aca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8015ace:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8015ad2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8015ad6:	f04f 3aff 	mov.w	sl, #4294967295
 8015ada:	e7d8      	b.n	8015a8e <_strtod_l+0x8be>
 8015adc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015ade:	ea13 0f0a 	tst.w	r3, sl
 8015ae2:	e7e4      	b.n	8015aae <_strtod_l+0x8de>
 8015ae4:	f7ff fb59 	bl	801519a <sulp>
 8015ae8:	ee39 0b40 	vsub.f64	d0, d9, d0
 8015aec:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8015af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015af4:	ec5b ab10 	vmov	sl, fp, d0
 8015af8:	d1c9      	bne.n	8015a8e <_strtod_l+0x8be>
 8015afa:	e617      	b.n	801572c <_strtod_l+0x55c>
 8015afc:	4629      	mov	r1, r5
 8015afe:	4620      	mov	r0, r4
 8015b00:	f7ff fad8 	bl	80150b4 <__ratio>
 8015b04:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8015b08:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8015b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b10:	d85d      	bhi.n	8015bce <_strtod_l+0x9fe>
 8015b12:	f1b8 0f00 	cmp.w	r8, #0
 8015b16:	d164      	bne.n	8015be2 <_strtod_l+0xa12>
 8015b18:	f1ba 0f00 	cmp.w	sl, #0
 8015b1c:	d14b      	bne.n	8015bb6 <_strtod_l+0x9e6>
 8015b1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015b22:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d160      	bne.n	8015bec <_strtod_l+0xa1c>
 8015b2a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8015b2e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8015b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b36:	d401      	bmi.n	8015b3c <_strtod_l+0x96c>
 8015b38:	ee20 8b08 	vmul.f64	d8, d0, d8
 8015b3c:	eeb1 ab48 	vneg.f64	d10, d8
 8015b40:	486c      	ldr	r0, [pc, #432]	@ (8015cf4 <_strtod_l+0xb24>)
 8015b42:	496e      	ldr	r1, [pc, #440]	@ (8015cfc <_strtod_l+0xb2c>)
 8015b44:	ea09 0700 	and.w	r7, r9, r0
 8015b48:	428f      	cmp	r7, r1
 8015b4a:	ec53 2b1a 	vmov	r2, r3, d10
 8015b4e:	d17d      	bne.n	8015c4c <_strtod_l+0xa7c>
 8015b50:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8015b54:	ec4b ab1c 	vmov	d12, sl, fp
 8015b58:	eeb0 0b4c 	vmov.f64	d0, d12
 8015b5c:	f7ff f9e2 	bl	8014f24 <__ulp>
 8015b60:	4864      	ldr	r0, [pc, #400]	@ (8015cf4 <_strtod_l+0xb24>)
 8015b62:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8015b66:	ee1c 3a90 	vmov	r3, s25
 8015b6a:	4a65      	ldr	r2, [pc, #404]	@ (8015d00 <_strtod_l+0xb30>)
 8015b6c:	ea03 0100 	and.w	r1, r3, r0
 8015b70:	4291      	cmp	r1, r2
 8015b72:	ec5b ab1c 	vmov	sl, fp, d12
 8015b76:	d93c      	bls.n	8015bf2 <_strtod_l+0xa22>
 8015b78:	ee19 2a90 	vmov	r2, s19
 8015b7c:	4b5e      	ldr	r3, [pc, #376]	@ (8015cf8 <_strtod_l+0xb28>)
 8015b7e:	429a      	cmp	r2, r3
 8015b80:	d104      	bne.n	8015b8c <_strtod_l+0x9bc>
 8015b82:	ee19 3a10 	vmov	r3, s18
 8015b86:	3301      	adds	r3, #1
 8015b88:	f43f ad3c 	beq.w	8015604 <_strtod_l+0x434>
 8015b8c:	f8df b168 	ldr.w	fp, [pc, #360]	@ 8015cf8 <_strtod_l+0xb28>
 8015b90:	f04f 3aff 	mov.w	sl, #4294967295
 8015b94:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015b96:	9805      	ldr	r0, [sp, #20]
 8015b98:	f7fe fe98 	bl	80148cc <_Bfree>
 8015b9c:	9805      	ldr	r0, [sp, #20]
 8015b9e:	4631      	mov	r1, r6
 8015ba0:	f7fe fe94 	bl	80148cc <_Bfree>
 8015ba4:	9805      	ldr	r0, [sp, #20]
 8015ba6:	4629      	mov	r1, r5
 8015ba8:	f7fe fe90 	bl	80148cc <_Bfree>
 8015bac:	9805      	ldr	r0, [sp, #20]
 8015bae:	4621      	mov	r1, r4
 8015bb0:	f7fe fe8c 	bl	80148cc <_Bfree>
 8015bb4:	e627      	b.n	8015806 <_strtod_l+0x636>
 8015bb6:	f1ba 0f01 	cmp.w	sl, #1
 8015bba:	d103      	bne.n	8015bc4 <_strtod_l+0x9f4>
 8015bbc:	f1bb 0f00 	cmp.w	fp, #0
 8015bc0:	f43f adb4 	beq.w	801572c <_strtod_l+0x55c>
 8015bc4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8015bc8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8015bcc:	e7b8      	b.n	8015b40 <_strtod_l+0x970>
 8015bce:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8015bd2:	ee20 8b08 	vmul.f64	d8, d0, d8
 8015bd6:	f1b8 0f00 	cmp.w	r8, #0
 8015bda:	d0af      	beq.n	8015b3c <_strtod_l+0x96c>
 8015bdc:	eeb0 ab48 	vmov.f64	d10, d8
 8015be0:	e7ae      	b.n	8015b40 <_strtod_l+0x970>
 8015be2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8015be6:	eeb0 8b4a 	vmov.f64	d8, d10
 8015bea:	e7a9      	b.n	8015b40 <_strtod_l+0x970>
 8015bec:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8015bf0:	e7a6      	b.n	8015b40 <_strtod_l+0x970>
 8015bf2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8015bf6:	9b06      	ldr	r3, [sp, #24]
 8015bf8:	46d9      	mov	r9, fp
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d1ca      	bne.n	8015b94 <_strtod_l+0x9c4>
 8015bfe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015c02:	0d1b      	lsrs	r3, r3, #20
 8015c04:	051b      	lsls	r3, r3, #20
 8015c06:	429f      	cmp	r7, r3
 8015c08:	d1c4      	bne.n	8015b94 <_strtod_l+0x9c4>
 8015c0a:	ec51 0b18 	vmov	r0, r1, d8
 8015c0e:	f7ea fd7b 	bl	8000708 <__aeabi_d2lz>
 8015c12:	f7ea fd4b 	bl	80006ac <__aeabi_l2d>
 8015c16:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8015c1a:	ec41 0b17 	vmov	d7, r0, r1
 8015c1e:	ea49 090a 	orr.w	r9, r9, sl
 8015c22:	ea59 0908 	orrs.w	r9, r9, r8
 8015c26:	ee38 8b47 	vsub.f64	d8, d8, d7
 8015c2a:	d03c      	beq.n	8015ca6 <_strtod_l+0xad6>
 8015c2c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8015cd8 <_strtod_l+0xb08>
 8015c30:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c38:	f53f acef 	bmi.w	801561a <_strtod_l+0x44a>
 8015c3c:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8015ce0 <_strtod_l+0xb10>
 8015c40:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c48:	dda4      	ble.n	8015b94 <_strtod_l+0x9c4>
 8015c4a:	e4e6      	b.n	801561a <_strtod_l+0x44a>
 8015c4c:	9906      	ldr	r1, [sp, #24]
 8015c4e:	b1e1      	cbz	r1, 8015c8a <_strtod_l+0xaba>
 8015c50:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8015c54:	d819      	bhi.n	8015c8a <_strtod_l+0xaba>
 8015c56:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8015c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c5e:	d811      	bhi.n	8015c84 <_strtod_l+0xab4>
 8015c60:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8015c64:	ee18 3a10 	vmov	r3, s16
 8015c68:	2b01      	cmp	r3, #1
 8015c6a:	bf38      	it	cc
 8015c6c:	2301      	movcc	r3, #1
 8015c6e:	ee08 3a10 	vmov	s16, r3
 8015c72:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8015c76:	f1b8 0f00 	cmp.w	r8, #0
 8015c7a:	d111      	bne.n	8015ca0 <_strtod_l+0xad0>
 8015c7c:	eeb1 7b48 	vneg.f64	d7, d8
 8015c80:	ec53 2b17 	vmov	r2, r3, d7
 8015c84:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8015c88:	1bcb      	subs	r3, r1, r7
 8015c8a:	eeb0 0b49 	vmov.f64	d0, d9
 8015c8e:	ec43 2b1a 	vmov	d10, r2, r3
 8015c92:	f7ff f947 	bl	8014f24 <__ulp>
 8015c96:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8015c9a:	ec5b ab19 	vmov	sl, fp, d9
 8015c9e:	e7aa      	b.n	8015bf6 <_strtod_l+0xa26>
 8015ca0:	eeb0 7b48 	vmov.f64	d7, d8
 8015ca4:	e7ec      	b.n	8015c80 <_strtod_l+0xab0>
 8015ca6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8015ce8 <_strtod_l+0xb18>
 8015caa:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cb2:	f57f af6f 	bpl.w	8015b94 <_strtod_l+0x9c4>
 8015cb6:	e4b0      	b.n	801561a <_strtod_l+0x44a>
 8015cb8:	2300      	movs	r3, #0
 8015cba:	9308      	str	r3, [sp, #32]
 8015cbc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015cbe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015cc0:	6013      	str	r3, [r2, #0]
 8015cc2:	f7ff bac4 	b.w	801524e <_strtod_l+0x7e>
 8015cc6:	2a65      	cmp	r2, #101	@ 0x65
 8015cc8:	f43f abbf 	beq.w	801544a <_strtod_l+0x27a>
 8015ccc:	2a45      	cmp	r2, #69	@ 0x45
 8015cce:	f43f abbc 	beq.w	801544a <_strtod_l+0x27a>
 8015cd2:	2101      	movs	r1, #1
 8015cd4:	f7ff bbf4 	b.w	80154c0 <_strtod_l+0x2f0>
 8015cd8:	94a03595 	.word	0x94a03595
 8015cdc:	3fdfffff 	.word	0x3fdfffff
 8015ce0:	35afe535 	.word	0x35afe535
 8015ce4:	3fe00000 	.word	0x3fe00000
 8015ce8:	94a03595 	.word	0x94a03595
 8015cec:	3fcfffff 	.word	0x3fcfffff
 8015cf0:	000fffff 	.word	0x000fffff
 8015cf4:	7ff00000 	.word	0x7ff00000
 8015cf8:	7fefffff 	.word	0x7fefffff
 8015cfc:	7fe00000 	.word	0x7fe00000
 8015d00:	7c9fffff 	.word	0x7c9fffff

08015d04 <_strtod_r>:
 8015d04:	4b01      	ldr	r3, [pc, #4]	@ (8015d0c <_strtod_r+0x8>)
 8015d06:	f7ff ba63 	b.w	80151d0 <_strtod_l>
 8015d0a:	bf00      	nop
 8015d0c:	240003ec 	.word	0x240003ec

08015d10 <_strtol_l.isra.0>:
 8015d10:	2b24      	cmp	r3, #36	@ 0x24
 8015d12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d16:	4686      	mov	lr, r0
 8015d18:	4690      	mov	r8, r2
 8015d1a:	d801      	bhi.n	8015d20 <_strtol_l.isra.0+0x10>
 8015d1c:	2b01      	cmp	r3, #1
 8015d1e:	d106      	bne.n	8015d2e <_strtol_l.isra.0+0x1e>
 8015d20:	f7fd fe78 	bl	8013a14 <__errno>
 8015d24:	2316      	movs	r3, #22
 8015d26:	6003      	str	r3, [r0, #0]
 8015d28:	2000      	movs	r0, #0
 8015d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d2e:	4834      	ldr	r0, [pc, #208]	@ (8015e00 <_strtol_l.isra.0+0xf0>)
 8015d30:	460d      	mov	r5, r1
 8015d32:	462a      	mov	r2, r5
 8015d34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015d38:	5d06      	ldrb	r6, [r0, r4]
 8015d3a:	f016 0608 	ands.w	r6, r6, #8
 8015d3e:	d1f8      	bne.n	8015d32 <_strtol_l.isra.0+0x22>
 8015d40:	2c2d      	cmp	r4, #45	@ 0x2d
 8015d42:	d110      	bne.n	8015d66 <_strtol_l.isra.0+0x56>
 8015d44:	782c      	ldrb	r4, [r5, #0]
 8015d46:	2601      	movs	r6, #1
 8015d48:	1c95      	adds	r5, r2, #2
 8015d4a:	f033 0210 	bics.w	r2, r3, #16
 8015d4e:	d115      	bne.n	8015d7c <_strtol_l.isra.0+0x6c>
 8015d50:	2c30      	cmp	r4, #48	@ 0x30
 8015d52:	d10d      	bne.n	8015d70 <_strtol_l.isra.0+0x60>
 8015d54:	782a      	ldrb	r2, [r5, #0]
 8015d56:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8015d5a:	2a58      	cmp	r2, #88	@ 0x58
 8015d5c:	d108      	bne.n	8015d70 <_strtol_l.isra.0+0x60>
 8015d5e:	786c      	ldrb	r4, [r5, #1]
 8015d60:	3502      	adds	r5, #2
 8015d62:	2310      	movs	r3, #16
 8015d64:	e00a      	b.n	8015d7c <_strtol_l.isra.0+0x6c>
 8015d66:	2c2b      	cmp	r4, #43	@ 0x2b
 8015d68:	bf04      	itt	eq
 8015d6a:	782c      	ldrbeq	r4, [r5, #0]
 8015d6c:	1c95      	addeq	r5, r2, #2
 8015d6e:	e7ec      	b.n	8015d4a <_strtol_l.isra.0+0x3a>
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d1f6      	bne.n	8015d62 <_strtol_l.isra.0+0x52>
 8015d74:	2c30      	cmp	r4, #48	@ 0x30
 8015d76:	bf14      	ite	ne
 8015d78:	230a      	movne	r3, #10
 8015d7a:	2308      	moveq	r3, #8
 8015d7c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8015d80:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015d84:	2200      	movs	r2, #0
 8015d86:	fbbc f9f3 	udiv	r9, ip, r3
 8015d8a:	4610      	mov	r0, r2
 8015d8c:	fb03 ca19 	mls	sl, r3, r9, ip
 8015d90:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8015d94:	2f09      	cmp	r7, #9
 8015d96:	d80f      	bhi.n	8015db8 <_strtol_l.isra.0+0xa8>
 8015d98:	463c      	mov	r4, r7
 8015d9a:	42a3      	cmp	r3, r4
 8015d9c:	dd1b      	ble.n	8015dd6 <_strtol_l.isra.0+0xc6>
 8015d9e:	1c57      	adds	r7, r2, #1
 8015da0:	d007      	beq.n	8015db2 <_strtol_l.isra.0+0xa2>
 8015da2:	4581      	cmp	r9, r0
 8015da4:	d314      	bcc.n	8015dd0 <_strtol_l.isra.0+0xc0>
 8015da6:	d101      	bne.n	8015dac <_strtol_l.isra.0+0x9c>
 8015da8:	45a2      	cmp	sl, r4
 8015daa:	db11      	blt.n	8015dd0 <_strtol_l.isra.0+0xc0>
 8015dac:	fb00 4003 	mla	r0, r0, r3, r4
 8015db0:	2201      	movs	r2, #1
 8015db2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015db6:	e7eb      	b.n	8015d90 <_strtol_l.isra.0+0x80>
 8015db8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8015dbc:	2f19      	cmp	r7, #25
 8015dbe:	d801      	bhi.n	8015dc4 <_strtol_l.isra.0+0xb4>
 8015dc0:	3c37      	subs	r4, #55	@ 0x37
 8015dc2:	e7ea      	b.n	8015d9a <_strtol_l.isra.0+0x8a>
 8015dc4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8015dc8:	2f19      	cmp	r7, #25
 8015dca:	d804      	bhi.n	8015dd6 <_strtol_l.isra.0+0xc6>
 8015dcc:	3c57      	subs	r4, #87	@ 0x57
 8015dce:	e7e4      	b.n	8015d9a <_strtol_l.isra.0+0x8a>
 8015dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8015dd4:	e7ed      	b.n	8015db2 <_strtol_l.isra.0+0xa2>
 8015dd6:	1c53      	adds	r3, r2, #1
 8015dd8:	d108      	bne.n	8015dec <_strtol_l.isra.0+0xdc>
 8015dda:	2322      	movs	r3, #34	@ 0x22
 8015ddc:	f8ce 3000 	str.w	r3, [lr]
 8015de0:	4660      	mov	r0, ip
 8015de2:	f1b8 0f00 	cmp.w	r8, #0
 8015de6:	d0a0      	beq.n	8015d2a <_strtol_l.isra.0+0x1a>
 8015de8:	1e69      	subs	r1, r5, #1
 8015dea:	e006      	b.n	8015dfa <_strtol_l.isra.0+0xea>
 8015dec:	b106      	cbz	r6, 8015df0 <_strtol_l.isra.0+0xe0>
 8015dee:	4240      	negs	r0, r0
 8015df0:	f1b8 0f00 	cmp.w	r8, #0
 8015df4:	d099      	beq.n	8015d2a <_strtol_l.isra.0+0x1a>
 8015df6:	2a00      	cmp	r2, #0
 8015df8:	d1f6      	bne.n	8015de8 <_strtol_l.isra.0+0xd8>
 8015dfa:	f8c8 1000 	str.w	r1, [r8]
 8015dfe:	e794      	b.n	8015d2a <_strtol_l.isra.0+0x1a>
 8015e00:	0801e3e9 	.word	0x0801e3e9

08015e04 <_strtol_r>:
 8015e04:	f7ff bf84 	b.w	8015d10 <_strtol_l.isra.0>

08015e08 <__ssputs_r>:
 8015e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e0c:	688e      	ldr	r6, [r1, #8]
 8015e0e:	461f      	mov	r7, r3
 8015e10:	42be      	cmp	r6, r7
 8015e12:	680b      	ldr	r3, [r1, #0]
 8015e14:	4682      	mov	sl, r0
 8015e16:	460c      	mov	r4, r1
 8015e18:	4690      	mov	r8, r2
 8015e1a:	d82d      	bhi.n	8015e78 <__ssputs_r+0x70>
 8015e1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015e20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015e24:	d026      	beq.n	8015e74 <__ssputs_r+0x6c>
 8015e26:	6965      	ldr	r5, [r4, #20]
 8015e28:	6909      	ldr	r1, [r1, #16]
 8015e2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015e2e:	eba3 0901 	sub.w	r9, r3, r1
 8015e32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015e36:	1c7b      	adds	r3, r7, #1
 8015e38:	444b      	add	r3, r9
 8015e3a:	106d      	asrs	r5, r5, #1
 8015e3c:	429d      	cmp	r5, r3
 8015e3e:	bf38      	it	cc
 8015e40:	461d      	movcc	r5, r3
 8015e42:	0553      	lsls	r3, r2, #21
 8015e44:	d527      	bpl.n	8015e96 <__ssputs_r+0x8e>
 8015e46:	4629      	mov	r1, r5
 8015e48:	f7fe fc74 	bl	8014734 <_malloc_r>
 8015e4c:	4606      	mov	r6, r0
 8015e4e:	b360      	cbz	r0, 8015eaa <__ssputs_r+0xa2>
 8015e50:	6921      	ldr	r1, [r4, #16]
 8015e52:	464a      	mov	r2, r9
 8015e54:	f000 fa18 	bl	8016288 <memcpy>
 8015e58:	89a3      	ldrh	r3, [r4, #12]
 8015e5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015e5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015e62:	81a3      	strh	r3, [r4, #12]
 8015e64:	6126      	str	r6, [r4, #16]
 8015e66:	6165      	str	r5, [r4, #20]
 8015e68:	444e      	add	r6, r9
 8015e6a:	eba5 0509 	sub.w	r5, r5, r9
 8015e6e:	6026      	str	r6, [r4, #0]
 8015e70:	60a5      	str	r5, [r4, #8]
 8015e72:	463e      	mov	r6, r7
 8015e74:	42be      	cmp	r6, r7
 8015e76:	d900      	bls.n	8015e7a <__ssputs_r+0x72>
 8015e78:	463e      	mov	r6, r7
 8015e7a:	6820      	ldr	r0, [r4, #0]
 8015e7c:	4632      	mov	r2, r6
 8015e7e:	4641      	mov	r1, r8
 8015e80:	f000 f9c6 	bl	8016210 <memmove>
 8015e84:	68a3      	ldr	r3, [r4, #8]
 8015e86:	1b9b      	subs	r3, r3, r6
 8015e88:	60a3      	str	r3, [r4, #8]
 8015e8a:	6823      	ldr	r3, [r4, #0]
 8015e8c:	4433      	add	r3, r6
 8015e8e:	6023      	str	r3, [r4, #0]
 8015e90:	2000      	movs	r0, #0
 8015e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e96:	462a      	mov	r2, r5
 8015e98:	f000 fd8b 	bl	80169b2 <_realloc_r>
 8015e9c:	4606      	mov	r6, r0
 8015e9e:	2800      	cmp	r0, #0
 8015ea0:	d1e0      	bne.n	8015e64 <__ssputs_r+0x5c>
 8015ea2:	6921      	ldr	r1, [r4, #16]
 8015ea4:	4650      	mov	r0, sl
 8015ea6:	f7fe fbd1 	bl	801464c <_free_r>
 8015eaa:	230c      	movs	r3, #12
 8015eac:	f8ca 3000 	str.w	r3, [sl]
 8015eb0:	89a3      	ldrh	r3, [r4, #12]
 8015eb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015eb6:	81a3      	strh	r3, [r4, #12]
 8015eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8015ebc:	e7e9      	b.n	8015e92 <__ssputs_r+0x8a>
	...

08015ec0 <_svfiprintf_r>:
 8015ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ec4:	4698      	mov	r8, r3
 8015ec6:	898b      	ldrh	r3, [r1, #12]
 8015ec8:	061b      	lsls	r3, r3, #24
 8015eca:	b09d      	sub	sp, #116	@ 0x74
 8015ecc:	4607      	mov	r7, r0
 8015ece:	460d      	mov	r5, r1
 8015ed0:	4614      	mov	r4, r2
 8015ed2:	d510      	bpl.n	8015ef6 <_svfiprintf_r+0x36>
 8015ed4:	690b      	ldr	r3, [r1, #16]
 8015ed6:	b973      	cbnz	r3, 8015ef6 <_svfiprintf_r+0x36>
 8015ed8:	2140      	movs	r1, #64	@ 0x40
 8015eda:	f7fe fc2b 	bl	8014734 <_malloc_r>
 8015ede:	6028      	str	r0, [r5, #0]
 8015ee0:	6128      	str	r0, [r5, #16]
 8015ee2:	b930      	cbnz	r0, 8015ef2 <_svfiprintf_r+0x32>
 8015ee4:	230c      	movs	r3, #12
 8015ee6:	603b      	str	r3, [r7, #0]
 8015ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8015eec:	b01d      	add	sp, #116	@ 0x74
 8015eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ef2:	2340      	movs	r3, #64	@ 0x40
 8015ef4:	616b      	str	r3, [r5, #20]
 8015ef6:	2300      	movs	r3, #0
 8015ef8:	9309      	str	r3, [sp, #36]	@ 0x24
 8015efa:	2320      	movs	r3, #32
 8015efc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015f00:	f8cd 800c 	str.w	r8, [sp, #12]
 8015f04:	2330      	movs	r3, #48	@ 0x30
 8015f06:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80160a4 <_svfiprintf_r+0x1e4>
 8015f0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015f0e:	f04f 0901 	mov.w	r9, #1
 8015f12:	4623      	mov	r3, r4
 8015f14:	469a      	mov	sl, r3
 8015f16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f1a:	b10a      	cbz	r2, 8015f20 <_svfiprintf_r+0x60>
 8015f1c:	2a25      	cmp	r2, #37	@ 0x25
 8015f1e:	d1f9      	bne.n	8015f14 <_svfiprintf_r+0x54>
 8015f20:	ebba 0b04 	subs.w	fp, sl, r4
 8015f24:	d00b      	beq.n	8015f3e <_svfiprintf_r+0x7e>
 8015f26:	465b      	mov	r3, fp
 8015f28:	4622      	mov	r2, r4
 8015f2a:	4629      	mov	r1, r5
 8015f2c:	4638      	mov	r0, r7
 8015f2e:	f7ff ff6b 	bl	8015e08 <__ssputs_r>
 8015f32:	3001      	adds	r0, #1
 8015f34:	f000 80a7 	beq.w	8016086 <_svfiprintf_r+0x1c6>
 8015f38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015f3a:	445a      	add	r2, fp
 8015f3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8015f3e:	f89a 3000 	ldrb.w	r3, [sl]
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	f000 809f 	beq.w	8016086 <_svfiprintf_r+0x1c6>
 8015f48:	2300      	movs	r3, #0
 8015f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8015f4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015f52:	f10a 0a01 	add.w	sl, sl, #1
 8015f56:	9304      	str	r3, [sp, #16]
 8015f58:	9307      	str	r3, [sp, #28]
 8015f5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015f5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8015f60:	4654      	mov	r4, sl
 8015f62:	2205      	movs	r2, #5
 8015f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f68:	484e      	ldr	r0, [pc, #312]	@ (80160a4 <_svfiprintf_r+0x1e4>)
 8015f6a:	f7ea f9b9 	bl	80002e0 <memchr>
 8015f6e:	9a04      	ldr	r2, [sp, #16]
 8015f70:	b9d8      	cbnz	r0, 8015faa <_svfiprintf_r+0xea>
 8015f72:	06d0      	lsls	r0, r2, #27
 8015f74:	bf44      	itt	mi
 8015f76:	2320      	movmi	r3, #32
 8015f78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015f7c:	0711      	lsls	r1, r2, #28
 8015f7e:	bf44      	itt	mi
 8015f80:	232b      	movmi	r3, #43	@ 0x2b
 8015f82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015f86:	f89a 3000 	ldrb.w	r3, [sl]
 8015f8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8015f8c:	d015      	beq.n	8015fba <_svfiprintf_r+0xfa>
 8015f8e:	9a07      	ldr	r2, [sp, #28]
 8015f90:	4654      	mov	r4, sl
 8015f92:	2000      	movs	r0, #0
 8015f94:	f04f 0c0a 	mov.w	ip, #10
 8015f98:	4621      	mov	r1, r4
 8015f9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015f9e:	3b30      	subs	r3, #48	@ 0x30
 8015fa0:	2b09      	cmp	r3, #9
 8015fa2:	d94b      	bls.n	801603c <_svfiprintf_r+0x17c>
 8015fa4:	b1b0      	cbz	r0, 8015fd4 <_svfiprintf_r+0x114>
 8015fa6:	9207      	str	r2, [sp, #28]
 8015fa8:	e014      	b.n	8015fd4 <_svfiprintf_r+0x114>
 8015faa:	eba0 0308 	sub.w	r3, r0, r8
 8015fae:	fa09 f303 	lsl.w	r3, r9, r3
 8015fb2:	4313      	orrs	r3, r2
 8015fb4:	9304      	str	r3, [sp, #16]
 8015fb6:	46a2      	mov	sl, r4
 8015fb8:	e7d2      	b.n	8015f60 <_svfiprintf_r+0xa0>
 8015fba:	9b03      	ldr	r3, [sp, #12]
 8015fbc:	1d19      	adds	r1, r3, #4
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	9103      	str	r1, [sp, #12]
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	bfbb      	ittet	lt
 8015fc6:	425b      	neglt	r3, r3
 8015fc8:	f042 0202 	orrlt.w	r2, r2, #2
 8015fcc:	9307      	strge	r3, [sp, #28]
 8015fce:	9307      	strlt	r3, [sp, #28]
 8015fd0:	bfb8      	it	lt
 8015fd2:	9204      	strlt	r2, [sp, #16]
 8015fd4:	7823      	ldrb	r3, [r4, #0]
 8015fd6:	2b2e      	cmp	r3, #46	@ 0x2e
 8015fd8:	d10a      	bne.n	8015ff0 <_svfiprintf_r+0x130>
 8015fda:	7863      	ldrb	r3, [r4, #1]
 8015fdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8015fde:	d132      	bne.n	8016046 <_svfiprintf_r+0x186>
 8015fe0:	9b03      	ldr	r3, [sp, #12]
 8015fe2:	1d1a      	adds	r2, r3, #4
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	9203      	str	r2, [sp, #12]
 8015fe8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015fec:	3402      	adds	r4, #2
 8015fee:	9305      	str	r3, [sp, #20]
 8015ff0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80160b4 <_svfiprintf_r+0x1f4>
 8015ff4:	7821      	ldrb	r1, [r4, #0]
 8015ff6:	2203      	movs	r2, #3
 8015ff8:	4650      	mov	r0, sl
 8015ffa:	f7ea f971 	bl	80002e0 <memchr>
 8015ffe:	b138      	cbz	r0, 8016010 <_svfiprintf_r+0x150>
 8016000:	9b04      	ldr	r3, [sp, #16]
 8016002:	eba0 000a 	sub.w	r0, r0, sl
 8016006:	2240      	movs	r2, #64	@ 0x40
 8016008:	4082      	lsls	r2, r0
 801600a:	4313      	orrs	r3, r2
 801600c:	3401      	adds	r4, #1
 801600e:	9304      	str	r3, [sp, #16]
 8016010:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016014:	4824      	ldr	r0, [pc, #144]	@ (80160a8 <_svfiprintf_r+0x1e8>)
 8016016:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801601a:	2206      	movs	r2, #6
 801601c:	f7ea f960 	bl	80002e0 <memchr>
 8016020:	2800      	cmp	r0, #0
 8016022:	d036      	beq.n	8016092 <_svfiprintf_r+0x1d2>
 8016024:	4b21      	ldr	r3, [pc, #132]	@ (80160ac <_svfiprintf_r+0x1ec>)
 8016026:	bb1b      	cbnz	r3, 8016070 <_svfiprintf_r+0x1b0>
 8016028:	9b03      	ldr	r3, [sp, #12]
 801602a:	3307      	adds	r3, #7
 801602c:	f023 0307 	bic.w	r3, r3, #7
 8016030:	3308      	adds	r3, #8
 8016032:	9303      	str	r3, [sp, #12]
 8016034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016036:	4433      	add	r3, r6
 8016038:	9309      	str	r3, [sp, #36]	@ 0x24
 801603a:	e76a      	b.n	8015f12 <_svfiprintf_r+0x52>
 801603c:	fb0c 3202 	mla	r2, ip, r2, r3
 8016040:	460c      	mov	r4, r1
 8016042:	2001      	movs	r0, #1
 8016044:	e7a8      	b.n	8015f98 <_svfiprintf_r+0xd8>
 8016046:	2300      	movs	r3, #0
 8016048:	3401      	adds	r4, #1
 801604a:	9305      	str	r3, [sp, #20]
 801604c:	4619      	mov	r1, r3
 801604e:	f04f 0c0a 	mov.w	ip, #10
 8016052:	4620      	mov	r0, r4
 8016054:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016058:	3a30      	subs	r2, #48	@ 0x30
 801605a:	2a09      	cmp	r2, #9
 801605c:	d903      	bls.n	8016066 <_svfiprintf_r+0x1a6>
 801605e:	2b00      	cmp	r3, #0
 8016060:	d0c6      	beq.n	8015ff0 <_svfiprintf_r+0x130>
 8016062:	9105      	str	r1, [sp, #20]
 8016064:	e7c4      	b.n	8015ff0 <_svfiprintf_r+0x130>
 8016066:	fb0c 2101 	mla	r1, ip, r1, r2
 801606a:	4604      	mov	r4, r0
 801606c:	2301      	movs	r3, #1
 801606e:	e7f0      	b.n	8016052 <_svfiprintf_r+0x192>
 8016070:	ab03      	add	r3, sp, #12
 8016072:	9300      	str	r3, [sp, #0]
 8016074:	462a      	mov	r2, r5
 8016076:	4b0e      	ldr	r3, [pc, #56]	@ (80160b0 <_svfiprintf_r+0x1f0>)
 8016078:	a904      	add	r1, sp, #16
 801607a:	4638      	mov	r0, r7
 801607c:	f7fc fd84 	bl	8012b88 <_printf_float>
 8016080:	1c42      	adds	r2, r0, #1
 8016082:	4606      	mov	r6, r0
 8016084:	d1d6      	bne.n	8016034 <_svfiprintf_r+0x174>
 8016086:	89ab      	ldrh	r3, [r5, #12]
 8016088:	065b      	lsls	r3, r3, #25
 801608a:	f53f af2d 	bmi.w	8015ee8 <_svfiprintf_r+0x28>
 801608e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016090:	e72c      	b.n	8015eec <_svfiprintf_r+0x2c>
 8016092:	ab03      	add	r3, sp, #12
 8016094:	9300      	str	r3, [sp, #0]
 8016096:	462a      	mov	r2, r5
 8016098:	4b05      	ldr	r3, [pc, #20]	@ (80160b0 <_svfiprintf_r+0x1f0>)
 801609a:	a904      	add	r1, sp, #16
 801609c:	4638      	mov	r0, r7
 801609e:	f7fc fffb 	bl	8013098 <_printf_i>
 80160a2:	e7ed      	b.n	8016080 <_svfiprintf_r+0x1c0>
 80160a4:	0801e1e5 	.word	0x0801e1e5
 80160a8:	0801e1ef 	.word	0x0801e1ef
 80160ac:	08012b89 	.word	0x08012b89
 80160b0:	08015e09 	.word	0x08015e09
 80160b4:	0801e1eb 	.word	0x0801e1eb

080160b8 <__sflush_r>:
 80160b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80160bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160c0:	0716      	lsls	r6, r2, #28
 80160c2:	4605      	mov	r5, r0
 80160c4:	460c      	mov	r4, r1
 80160c6:	d454      	bmi.n	8016172 <__sflush_r+0xba>
 80160c8:	684b      	ldr	r3, [r1, #4]
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	dc02      	bgt.n	80160d4 <__sflush_r+0x1c>
 80160ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	dd48      	ble.n	8016166 <__sflush_r+0xae>
 80160d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80160d6:	2e00      	cmp	r6, #0
 80160d8:	d045      	beq.n	8016166 <__sflush_r+0xae>
 80160da:	2300      	movs	r3, #0
 80160dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80160e0:	682f      	ldr	r7, [r5, #0]
 80160e2:	6a21      	ldr	r1, [r4, #32]
 80160e4:	602b      	str	r3, [r5, #0]
 80160e6:	d030      	beq.n	801614a <__sflush_r+0x92>
 80160e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80160ea:	89a3      	ldrh	r3, [r4, #12]
 80160ec:	0759      	lsls	r1, r3, #29
 80160ee:	d505      	bpl.n	80160fc <__sflush_r+0x44>
 80160f0:	6863      	ldr	r3, [r4, #4]
 80160f2:	1ad2      	subs	r2, r2, r3
 80160f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80160f6:	b10b      	cbz	r3, 80160fc <__sflush_r+0x44>
 80160f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80160fa:	1ad2      	subs	r2, r2, r3
 80160fc:	2300      	movs	r3, #0
 80160fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016100:	6a21      	ldr	r1, [r4, #32]
 8016102:	4628      	mov	r0, r5
 8016104:	47b0      	blx	r6
 8016106:	1c43      	adds	r3, r0, #1
 8016108:	89a3      	ldrh	r3, [r4, #12]
 801610a:	d106      	bne.n	801611a <__sflush_r+0x62>
 801610c:	6829      	ldr	r1, [r5, #0]
 801610e:	291d      	cmp	r1, #29
 8016110:	d82b      	bhi.n	801616a <__sflush_r+0xb2>
 8016112:	4a2a      	ldr	r2, [pc, #168]	@ (80161bc <__sflush_r+0x104>)
 8016114:	40ca      	lsrs	r2, r1
 8016116:	07d6      	lsls	r6, r2, #31
 8016118:	d527      	bpl.n	801616a <__sflush_r+0xb2>
 801611a:	2200      	movs	r2, #0
 801611c:	6062      	str	r2, [r4, #4]
 801611e:	04d9      	lsls	r1, r3, #19
 8016120:	6922      	ldr	r2, [r4, #16]
 8016122:	6022      	str	r2, [r4, #0]
 8016124:	d504      	bpl.n	8016130 <__sflush_r+0x78>
 8016126:	1c42      	adds	r2, r0, #1
 8016128:	d101      	bne.n	801612e <__sflush_r+0x76>
 801612a:	682b      	ldr	r3, [r5, #0]
 801612c:	b903      	cbnz	r3, 8016130 <__sflush_r+0x78>
 801612e:	6560      	str	r0, [r4, #84]	@ 0x54
 8016130:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016132:	602f      	str	r7, [r5, #0]
 8016134:	b1b9      	cbz	r1, 8016166 <__sflush_r+0xae>
 8016136:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801613a:	4299      	cmp	r1, r3
 801613c:	d002      	beq.n	8016144 <__sflush_r+0x8c>
 801613e:	4628      	mov	r0, r5
 8016140:	f7fe fa84 	bl	801464c <_free_r>
 8016144:	2300      	movs	r3, #0
 8016146:	6363      	str	r3, [r4, #52]	@ 0x34
 8016148:	e00d      	b.n	8016166 <__sflush_r+0xae>
 801614a:	2301      	movs	r3, #1
 801614c:	4628      	mov	r0, r5
 801614e:	47b0      	blx	r6
 8016150:	4602      	mov	r2, r0
 8016152:	1c50      	adds	r0, r2, #1
 8016154:	d1c9      	bne.n	80160ea <__sflush_r+0x32>
 8016156:	682b      	ldr	r3, [r5, #0]
 8016158:	2b00      	cmp	r3, #0
 801615a:	d0c6      	beq.n	80160ea <__sflush_r+0x32>
 801615c:	2b1d      	cmp	r3, #29
 801615e:	d001      	beq.n	8016164 <__sflush_r+0xac>
 8016160:	2b16      	cmp	r3, #22
 8016162:	d11e      	bne.n	80161a2 <__sflush_r+0xea>
 8016164:	602f      	str	r7, [r5, #0]
 8016166:	2000      	movs	r0, #0
 8016168:	e022      	b.n	80161b0 <__sflush_r+0xf8>
 801616a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801616e:	b21b      	sxth	r3, r3
 8016170:	e01b      	b.n	80161aa <__sflush_r+0xf2>
 8016172:	690f      	ldr	r7, [r1, #16]
 8016174:	2f00      	cmp	r7, #0
 8016176:	d0f6      	beq.n	8016166 <__sflush_r+0xae>
 8016178:	0793      	lsls	r3, r2, #30
 801617a:	680e      	ldr	r6, [r1, #0]
 801617c:	bf08      	it	eq
 801617e:	694b      	ldreq	r3, [r1, #20]
 8016180:	600f      	str	r7, [r1, #0]
 8016182:	bf18      	it	ne
 8016184:	2300      	movne	r3, #0
 8016186:	eba6 0807 	sub.w	r8, r6, r7
 801618a:	608b      	str	r3, [r1, #8]
 801618c:	f1b8 0f00 	cmp.w	r8, #0
 8016190:	dde9      	ble.n	8016166 <__sflush_r+0xae>
 8016192:	6a21      	ldr	r1, [r4, #32]
 8016194:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016196:	4643      	mov	r3, r8
 8016198:	463a      	mov	r2, r7
 801619a:	4628      	mov	r0, r5
 801619c:	47b0      	blx	r6
 801619e:	2800      	cmp	r0, #0
 80161a0:	dc08      	bgt.n	80161b4 <__sflush_r+0xfc>
 80161a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80161a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80161aa:	81a3      	strh	r3, [r4, #12]
 80161ac:	f04f 30ff 	mov.w	r0, #4294967295
 80161b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161b4:	4407      	add	r7, r0
 80161b6:	eba8 0800 	sub.w	r8, r8, r0
 80161ba:	e7e7      	b.n	801618c <__sflush_r+0xd4>
 80161bc:	20400001 	.word	0x20400001

080161c0 <_fflush_r>:
 80161c0:	b538      	push	{r3, r4, r5, lr}
 80161c2:	690b      	ldr	r3, [r1, #16]
 80161c4:	4605      	mov	r5, r0
 80161c6:	460c      	mov	r4, r1
 80161c8:	b913      	cbnz	r3, 80161d0 <_fflush_r+0x10>
 80161ca:	2500      	movs	r5, #0
 80161cc:	4628      	mov	r0, r5
 80161ce:	bd38      	pop	{r3, r4, r5, pc}
 80161d0:	b118      	cbz	r0, 80161da <_fflush_r+0x1a>
 80161d2:	6a03      	ldr	r3, [r0, #32]
 80161d4:	b90b      	cbnz	r3, 80161da <_fflush_r+0x1a>
 80161d6:	f7fd fb0f 	bl	80137f8 <__sinit>
 80161da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d0f3      	beq.n	80161ca <_fflush_r+0xa>
 80161e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80161e4:	07d0      	lsls	r0, r2, #31
 80161e6:	d404      	bmi.n	80161f2 <_fflush_r+0x32>
 80161e8:	0599      	lsls	r1, r3, #22
 80161ea:	d402      	bmi.n	80161f2 <_fflush_r+0x32>
 80161ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80161ee:	f7fd fc3c 	bl	8013a6a <__retarget_lock_acquire_recursive>
 80161f2:	4628      	mov	r0, r5
 80161f4:	4621      	mov	r1, r4
 80161f6:	f7ff ff5f 	bl	80160b8 <__sflush_r>
 80161fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80161fc:	07da      	lsls	r2, r3, #31
 80161fe:	4605      	mov	r5, r0
 8016200:	d4e4      	bmi.n	80161cc <_fflush_r+0xc>
 8016202:	89a3      	ldrh	r3, [r4, #12]
 8016204:	059b      	lsls	r3, r3, #22
 8016206:	d4e1      	bmi.n	80161cc <_fflush_r+0xc>
 8016208:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801620a:	f7fd fc2f 	bl	8013a6c <__retarget_lock_release_recursive>
 801620e:	e7dd      	b.n	80161cc <_fflush_r+0xc>

08016210 <memmove>:
 8016210:	4288      	cmp	r0, r1
 8016212:	b510      	push	{r4, lr}
 8016214:	eb01 0402 	add.w	r4, r1, r2
 8016218:	d902      	bls.n	8016220 <memmove+0x10>
 801621a:	4284      	cmp	r4, r0
 801621c:	4623      	mov	r3, r4
 801621e:	d807      	bhi.n	8016230 <memmove+0x20>
 8016220:	1e43      	subs	r3, r0, #1
 8016222:	42a1      	cmp	r1, r4
 8016224:	d008      	beq.n	8016238 <memmove+0x28>
 8016226:	f811 2b01 	ldrb.w	r2, [r1], #1
 801622a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801622e:	e7f8      	b.n	8016222 <memmove+0x12>
 8016230:	4402      	add	r2, r0
 8016232:	4601      	mov	r1, r0
 8016234:	428a      	cmp	r2, r1
 8016236:	d100      	bne.n	801623a <memmove+0x2a>
 8016238:	bd10      	pop	{r4, pc}
 801623a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801623e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016242:	e7f7      	b.n	8016234 <memmove+0x24>

08016244 <strncmp>:
 8016244:	b510      	push	{r4, lr}
 8016246:	b16a      	cbz	r2, 8016264 <strncmp+0x20>
 8016248:	3901      	subs	r1, #1
 801624a:	1884      	adds	r4, r0, r2
 801624c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016250:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016254:	429a      	cmp	r2, r3
 8016256:	d103      	bne.n	8016260 <strncmp+0x1c>
 8016258:	42a0      	cmp	r0, r4
 801625a:	d001      	beq.n	8016260 <strncmp+0x1c>
 801625c:	2a00      	cmp	r2, #0
 801625e:	d1f5      	bne.n	801624c <strncmp+0x8>
 8016260:	1ad0      	subs	r0, r2, r3
 8016262:	bd10      	pop	{r4, pc}
 8016264:	4610      	mov	r0, r2
 8016266:	e7fc      	b.n	8016262 <strncmp+0x1e>

08016268 <_sbrk_r>:
 8016268:	b538      	push	{r3, r4, r5, lr}
 801626a:	4d06      	ldr	r5, [pc, #24]	@ (8016284 <_sbrk_r+0x1c>)
 801626c:	2300      	movs	r3, #0
 801626e:	4604      	mov	r4, r0
 8016270:	4608      	mov	r0, r1
 8016272:	602b      	str	r3, [r5, #0]
 8016274:	f7fc f876 	bl	8012364 <_sbrk>
 8016278:	1c43      	adds	r3, r0, #1
 801627a:	d102      	bne.n	8016282 <_sbrk_r+0x1a>
 801627c:	682b      	ldr	r3, [r5, #0]
 801627e:	b103      	cbz	r3, 8016282 <_sbrk_r+0x1a>
 8016280:	6023      	str	r3, [r4, #0]
 8016282:	bd38      	pop	{r3, r4, r5, pc}
 8016284:	24001254 	.word	0x24001254

08016288 <memcpy>:
 8016288:	440a      	add	r2, r1
 801628a:	4291      	cmp	r1, r2
 801628c:	f100 33ff 	add.w	r3, r0, #4294967295
 8016290:	d100      	bne.n	8016294 <memcpy+0xc>
 8016292:	4770      	bx	lr
 8016294:	b510      	push	{r4, lr}
 8016296:	f811 4b01 	ldrb.w	r4, [r1], #1
 801629a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801629e:	4291      	cmp	r1, r2
 80162a0:	d1f9      	bne.n	8016296 <memcpy+0xe>
 80162a2:	bd10      	pop	{r4, pc}
 80162a4:	0000      	movs	r0, r0
	...

080162a8 <nan>:
 80162a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80162b0 <nan+0x8>
 80162ac:	4770      	bx	lr
 80162ae:	bf00      	nop
 80162b0:	00000000 	.word	0x00000000
 80162b4:	7ff80000 	.word	0x7ff80000

080162b8 <__assert_func>:
 80162b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80162ba:	4614      	mov	r4, r2
 80162bc:	461a      	mov	r2, r3
 80162be:	4b09      	ldr	r3, [pc, #36]	@ (80162e4 <__assert_func+0x2c>)
 80162c0:	681b      	ldr	r3, [r3, #0]
 80162c2:	4605      	mov	r5, r0
 80162c4:	68d8      	ldr	r0, [r3, #12]
 80162c6:	b14c      	cbz	r4, 80162dc <__assert_func+0x24>
 80162c8:	4b07      	ldr	r3, [pc, #28]	@ (80162e8 <__assert_func+0x30>)
 80162ca:	9100      	str	r1, [sp, #0]
 80162cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80162d0:	4906      	ldr	r1, [pc, #24]	@ (80162ec <__assert_func+0x34>)
 80162d2:	462b      	mov	r3, r5
 80162d4:	f000 fba8 	bl	8016a28 <fiprintf>
 80162d8:	f000 fbb8 	bl	8016a4c <abort>
 80162dc:	4b04      	ldr	r3, [pc, #16]	@ (80162f0 <__assert_func+0x38>)
 80162de:	461c      	mov	r4, r3
 80162e0:	e7f3      	b.n	80162ca <__assert_func+0x12>
 80162e2:	bf00      	nop
 80162e4:	2400039c 	.word	0x2400039c
 80162e8:	0801e1fe 	.word	0x0801e1fe
 80162ec:	0801e20b 	.word	0x0801e20b
 80162f0:	0801e239 	.word	0x0801e239

080162f4 <_calloc_r>:
 80162f4:	b570      	push	{r4, r5, r6, lr}
 80162f6:	fba1 5402 	umull	r5, r4, r1, r2
 80162fa:	b934      	cbnz	r4, 801630a <_calloc_r+0x16>
 80162fc:	4629      	mov	r1, r5
 80162fe:	f7fe fa19 	bl	8014734 <_malloc_r>
 8016302:	4606      	mov	r6, r0
 8016304:	b928      	cbnz	r0, 8016312 <_calloc_r+0x1e>
 8016306:	4630      	mov	r0, r6
 8016308:	bd70      	pop	{r4, r5, r6, pc}
 801630a:	220c      	movs	r2, #12
 801630c:	6002      	str	r2, [r0, #0]
 801630e:	2600      	movs	r6, #0
 8016310:	e7f9      	b.n	8016306 <_calloc_r+0x12>
 8016312:	462a      	mov	r2, r5
 8016314:	4621      	mov	r1, r4
 8016316:	f7fd fb2b 	bl	8013970 <memset>
 801631a:	e7f4      	b.n	8016306 <_calloc_r+0x12>

0801631c <rshift>:
 801631c:	6903      	ldr	r3, [r0, #16]
 801631e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016322:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016326:	ea4f 1261 	mov.w	r2, r1, asr #5
 801632a:	f100 0414 	add.w	r4, r0, #20
 801632e:	dd45      	ble.n	80163bc <rshift+0xa0>
 8016330:	f011 011f 	ands.w	r1, r1, #31
 8016334:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016338:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801633c:	d10c      	bne.n	8016358 <rshift+0x3c>
 801633e:	f100 0710 	add.w	r7, r0, #16
 8016342:	4629      	mov	r1, r5
 8016344:	42b1      	cmp	r1, r6
 8016346:	d334      	bcc.n	80163b2 <rshift+0x96>
 8016348:	1a9b      	subs	r3, r3, r2
 801634a:	009b      	lsls	r3, r3, #2
 801634c:	1eea      	subs	r2, r5, #3
 801634e:	4296      	cmp	r6, r2
 8016350:	bf38      	it	cc
 8016352:	2300      	movcc	r3, #0
 8016354:	4423      	add	r3, r4
 8016356:	e015      	b.n	8016384 <rshift+0x68>
 8016358:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801635c:	f1c1 0820 	rsb	r8, r1, #32
 8016360:	40cf      	lsrs	r7, r1
 8016362:	f105 0e04 	add.w	lr, r5, #4
 8016366:	46a1      	mov	r9, r4
 8016368:	4576      	cmp	r6, lr
 801636a:	46f4      	mov	ip, lr
 801636c:	d815      	bhi.n	801639a <rshift+0x7e>
 801636e:	1a9a      	subs	r2, r3, r2
 8016370:	0092      	lsls	r2, r2, #2
 8016372:	3a04      	subs	r2, #4
 8016374:	3501      	adds	r5, #1
 8016376:	42ae      	cmp	r6, r5
 8016378:	bf38      	it	cc
 801637a:	2200      	movcc	r2, #0
 801637c:	18a3      	adds	r3, r4, r2
 801637e:	50a7      	str	r7, [r4, r2]
 8016380:	b107      	cbz	r7, 8016384 <rshift+0x68>
 8016382:	3304      	adds	r3, #4
 8016384:	1b1a      	subs	r2, r3, r4
 8016386:	42a3      	cmp	r3, r4
 8016388:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801638c:	bf08      	it	eq
 801638e:	2300      	moveq	r3, #0
 8016390:	6102      	str	r2, [r0, #16]
 8016392:	bf08      	it	eq
 8016394:	6143      	streq	r3, [r0, #20]
 8016396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801639a:	f8dc c000 	ldr.w	ip, [ip]
 801639e:	fa0c fc08 	lsl.w	ip, ip, r8
 80163a2:	ea4c 0707 	orr.w	r7, ip, r7
 80163a6:	f849 7b04 	str.w	r7, [r9], #4
 80163aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80163ae:	40cf      	lsrs	r7, r1
 80163b0:	e7da      	b.n	8016368 <rshift+0x4c>
 80163b2:	f851 cb04 	ldr.w	ip, [r1], #4
 80163b6:	f847 cf04 	str.w	ip, [r7, #4]!
 80163ba:	e7c3      	b.n	8016344 <rshift+0x28>
 80163bc:	4623      	mov	r3, r4
 80163be:	e7e1      	b.n	8016384 <rshift+0x68>

080163c0 <__hexdig_fun>:
 80163c0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80163c4:	2b09      	cmp	r3, #9
 80163c6:	d802      	bhi.n	80163ce <__hexdig_fun+0xe>
 80163c8:	3820      	subs	r0, #32
 80163ca:	b2c0      	uxtb	r0, r0
 80163cc:	4770      	bx	lr
 80163ce:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80163d2:	2b05      	cmp	r3, #5
 80163d4:	d801      	bhi.n	80163da <__hexdig_fun+0x1a>
 80163d6:	3847      	subs	r0, #71	@ 0x47
 80163d8:	e7f7      	b.n	80163ca <__hexdig_fun+0xa>
 80163da:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80163de:	2b05      	cmp	r3, #5
 80163e0:	d801      	bhi.n	80163e6 <__hexdig_fun+0x26>
 80163e2:	3827      	subs	r0, #39	@ 0x27
 80163e4:	e7f1      	b.n	80163ca <__hexdig_fun+0xa>
 80163e6:	2000      	movs	r0, #0
 80163e8:	4770      	bx	lr
	...

080163ec <__gethex>:
 80163ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163f0:	b085      	sub	sp, #20
 80163f2:	468a      	mov	sl, r1
 80163f4:	9302      	str	r3, [sp, #8]
 80163f6:	680b      	ldr	r3, [r1, #0]
 80163f8:	9001      	str	r0, [sp, #4]
 80163fa:	4690      	mov	r8, r2
 80163fc:	1c9c      	adds	r4, r3, #2
 80163fe:	46a1      	mov	r9, r4
 8016400:	f814 0b01 	ldrb.w	r0, [r4], #1
 8016404:	2830      	cmp	r0, #48	@ 0x30
 8016406:	d0fa      	beq.n	80163fe <__gethex+0x12>
 8016408:	eba9 0303 	sub.w	r3, r9, r3
 801640c:	f1a3 0b02 	sub.w	fp, r3, #2
 8016410:	f7ff ffd6 	bl	80163c0 <__hexdig_fun>
 8016414:	4605      	mov	r5, r0
 8016416:	2800      	cmp	r0, #0
 8016418:	d168      	bne.n	80164ec <__gethex+0x100>
 801641a:	49a0      	ldr	r1, [pc, #640]	@ (801669c <__gethex+0x2b0>)
 801641c:	2201      	movs	r2, #1
 801641e:	4648      	mov	r0, r9
 8016420:	f7ff ff10 	bl	8016244 <strncmp>
 8016424:	4607      	mov	r7, r0
 8016426:	2800      	cmp	r0, #0
 8016428:	d167      	bne.n	80164fa <__gethex+0x10e>
 801642a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801642e:	4626      	mov	r6, r4
 8016430:	f7ff ffc6 	bl	80163c0 <__hexdig_fun>
 8016434:	2800      	cmp	r0, #0
 8016436:	d062      	beq.n	80164fe <__gethex+0x112>
 8016438:	4623      	mov	r3, r4
 801643a:	7818      	ldrb	r0, [r3, #0]
 801643c:	2830      	cmp	r0, #48	@ 0x30
 801643e:	4699      	mov	r9, r3
 8016440:	f103 0301 	add.w	r3, r3, #1
 8016444:	d0f9      	beq.n	801643a <__gethex+0x4e>
 8016446:	f7ff ffbb 	bl	80163c0 <__hexdig_fun>
 801644a:	fab0 f580 	clz	r5, r0
 801644e:	096d      	lsrs	r5, r5, #5
 8016450:	f04f 0b01 	mov.w	fp, #1
 8016454:	464a      	mov	r2, r9
 8016456:	4616      	mov	r6, r2
 8016458:	3201      	adds	r2, #1
 801645a:	7830      	ldrb	r0, [r6, #0]
 801645c:	f7ff ffb0 	bl	80163c0 <__hexdig_fun>
 8016460:	2800      	cmp	r0, #0
 8016462:	d1f8      	bne.n	8016456 <__gethex+0x6a>
 8016464:	498d      	ldr	r1, [pc, #564]	@ (801669c <__gethex+0x2b0>)
 8016466:	2201      	movs	r2, #1
 8016468:	4630      	mov	r0, r6
 801646a:	f7ff feeb 	bl	8016244 <strncmp>
 801646e:	2800      	cmp	r0, #0
 8016470:	d13f      	bne.n	80164f2 <__gethex+0x106>
 8016472:	b944      	cbnz	r4, 8016486 <__gethex+0x9a>
 8016474:	1c74      	adds	r4, r6, #1
 8016476:	4622      	mov	r2, r4
 8016478:	4616      	mov	r6, r2
 801647a:	3201      	adds	r2, #1
 801647c:	7830      	ldrb	r0, [r6, #0]
 801647e:	f7ff ff9f 	bl	80163c0 <__hexdig_fun>
 8016482:	2800      	cmp	r0, #0
 8016484:	d1f8      	bne.n	8016478 <__gethex+0x8c>
 8016486:	1ba4      	subs	r4, r4, r6
 8016488:	00a7      	lsls	r7, r4, #2
 801648a:	7833      	ldrb	r3, [r6, #0]
 801648c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8016490:	2b50      	cmp	r3, #80	@ 0x50
 8016492:	d13e      	bne.n	8016512 <__gethex+0x126>
 8016494:	7873      	ldrb	r3, [r6, #1]
 8016496:	2b2b      	cmp	r3, #43	@ 0x2b
 8016498:	d033      	beq.n	8016502 <__gethex+0x116>
 801649a:	2b2d      	cmp	r3, #45	@ 0x2d
 801649c:	d034      	beq.n	8016508 <__gethex+0x11c>
 801649e:	1c71      	adds	r1, r6, #1
 80164a0:	2400      	movs	r4, #0
 80164a2:	7808      	ldrb	r0, [r1, #0]
 80164a4:	f7ff ff8c 	bl	80163c0 <__hexdig_fun>
 80164a8:	1e43      	subs	r3, r0, #1
 80164aa:	b2db      	uxtb	r3, r3
 80164ac:	2b18      	cmp	r3, #24
 80164ae:	d830      	bhi.n	8016512 <__gethex+0x126>
 80164b0:	f1a0 0210 	sub.w	r2, r0, #16
 80164b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80164b8:	f7ff ff82 	bl	80163c0 <__hexdig_fun>
 80164bc:	f100 3cff 	add.w	ip, r0, #4294967295
 80164c0:	fa5f fc8c 	uxtb.w	ip, ip
 80164c4:	f1bc 0f18 	cmp.w	ip, #24
 80164c8:	f04f 030a 	mov.w	r3, #10
 80164cc:	d91e      	bls.n	801650c <__gethex+0x120>
 80164ce:	b104      	cbz	r4, 80164d2 <__gethex+0xe6>
 80164d0:	4252      	negs	r2, r2
 80164d2:	4417      	add	r7, r2
 80164d4:	f8ca 1000 	str.w	r1, [sl]
 80164d8:	b1ed      	cbz	r5, 8016516 <__gethex+0x12a>
 80164da:	f1bb 0f00 	cmp.w	fp, #0
 80164de:	bf0c      	ite	eq
 80164e0:	2506      	moveq	r5, #6
 80164e2:	2500      	movne	r5, #0
 80164e4:	4628      	mov	r0, r5
 80164e6:	b005      	add	sp, #20
 80164e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164ec:	2500      	movs	r5, #0
 80164ee:	462c      	mov	r4, r5
 80164f0:	e7b0      	b.n	8016454 <__gethex+0x68>
 80164f2:	2c00      	cmp	r4, #0
 80164f4:	d1c7      	bne.n	8016486 <__gethex+0x9a>
 80164f6:	4627      	mov	r7, r4
 80164f8:	e7c7      	b.n	801648a <__gethex+0x9e>
 80164fa:	464e      	mov	r6, r9
 80164fc:	462f      	mov	r7, r5
 80164fe:	2501      	movs	r5, #1
 8016500:	e7c3      	b.n	801648a <__gethex+0x9e>
 8016502:	2400      	movs	r4, #0
 8016504:	1cb1      	adds	r1, r6, #2
 8016506:	e7cc      	b.n	80164a2 <__gethex+0xb6>
 8016508:	2401      	movs	r4, #1
 801650a:	e7fb      	b.n	8016504 <__gethex+0x118>
 801650c:	fb03 0002 	mla	r0, r3, r2, r0
 8016510:	e7ce      	b.n	80164b0 <__gethex+0xc4>
 8016512:	4631      	mov	r1, r6
 8016514:	e7de      	b.n	80164d4 <__gethex+0xe8>
 8016516:	eba6 0309 	sub.w	r3, r6, r9
 801651a:	3b01      	subs	r3, #1
 801651c:	4629      	mov	r1, r5
 801651e:	2b07      	cmp	r3, #7
 8016520:	dc0a      	bgt.n	8016538 <__gethex+0x14c>
 8016522:	9801      	ldr	r0, [sp, #4]
 8016524:	f7fe f992 	bl	801484c <_Balloc>
 8016528:	4604      	mov	r4, r0
 801652a:	b940      	cbnz	r0, 801653e <__gethex+0x152>
 801652c:	4b5c      	ldr	r3, [pc, #368]	@ (80166a0 <__gethex+0x2b4>)
 801652e:	4602      	mov	r2, r0
 8016530:	21e4      	movs	r1, #228	@ 0xe4
 8016532:	485c      	ldr	r0, [pc, #368]	@ (80166a4 <__gethex+0x2b8>)
 8016534:	f7ff fec0 	bl	80162b8 <__assert_func>
 8016538:	3101      	adds	r1, #1
 801653a:	105b      	asrs	r3, r3, #1
 801653c:	e7ef      	b.n	801651e <__gethex+0x132>
 801653e:	f100 0a14 	add.w	sl, r0, #20
 8016542:	2300      	movs	r3, #0
 8016544:	4655      	mov	r5, sl
 8016546:	469b      	mov	fp, r3
 8016548:	45b1      	cmp	r9, r6
 801654a:	d337      	bcc.n	80165bc <__gethex+0x1d0>
 801654c:	f845 bb04 	str.w	fp, [r5], #4
 8016550:	eba5 050a 	sub.w	r5, r5, sl
 8016554:	10ad      	asrs	r5, r5, #2
 8016556:	6125      	str	r5, [r4, #16]
 8016558:	4658      	mov	r0, fp
 801655a:	f7fe fa69 	bl	8014a30 <__hi0bits>
 801655e:	016d      	lsls	r5, r5, #5
 8016560:	f8d8 6000 	ldr.w	r6, [r8]
 8016564:	1a2d      	subs	r5, r5, r0
 8016566:	42b5      	cmp	r5, r6
 8016568:	dd54      	ble.n	8016614 <__gethex+0x228>
 801656a:	1bad      	subs	r5, r5, r6
 801656c:	4629      	mov	r1, r5
 801656e:	4620      	mov	r0, r4
 8016570:	f7fe fdf2 	bl	8015158 <__any_on>
 8016574:	4681      	mov	r9, r0
 8016576:	b178      	cbz	r0, 8016598 <__gethex+0x1ac>
 8016578:	1e6b      	subs	r3, r5, #1
 801657a:	1159      	asrs	r1, r3, #5
 801657c:	f003 021f 	and.w	r2, r3, #31
 8016580:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8016584:	f04f 0901 	mov.w	r9, #1
 8016588:	fa09 f202 	lsl.w	r2, r9, r2
 801658c:	420a      	tst	r2, r1
 801658e:	d003      	beq.n	8016598 <__gethex+0x1ac>
 8016590:	454b      	cmp	r3, r9
 8016592:	dc36      	bgt.n	8016602 <__gethex+0x216>
 8016594:	f04f 0902 	mov.w	r9, #2
 8016598:	4629      	mov	r1, r5
 801659a:	4620      	mov	r0, r4
 801659c:	f7ff febe 	bl	801631c <rshift>
 80165a0:	442f      	add	r7, r5
 80165a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80165a6:	42bb      	cmp	r3, r7
 80165a8:	da42      	bge.n	8016630 <__gethex+0x244>
 80165aa:	9801      	ldr	r0, [sp, #4]
 80165ac:	4621      	mov	r1, r4
 80165ae:	f7fe f98d 	bl	80148cc <_Bfree>
 80165b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80165b4:	2300      	movs	r3, #0
 80165b6:	6013      	str	r3, [r2, #0]
 80165b8:	25a3      	movs	r5, #163	@ 0xa3
 80165ba:	e793      	b.n	80164e4 <__gethex+0xf8>
 80165bc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80165c0:	2a2e      	cmp	r2, #46	@ 0x2e
 80165c2:	d012      	beq.n	80165ea <__gethex+0x1fe>
 80165c4:	2b20      	cmp	r3, #32
 80165c6:	d104      	bne.n	80165d2 <__gethex+0x1e6>
 80165c8:	f845 bb04 	str.w	fp, [r5], #4
 80165cc:	f04f 0b00 	mov.w	fp, #0
 80165d0:	465b      	mov	r3, fp
 80165d2:	7830      	ldrb	r0, [r6, #0]
 80165d4:	9303      	str	r3, [sp, #12]
 80165d6:	f7ff fef3 	bl	80163c0 <__hexdig_fun>
 80165da:	9b03      	ldr	r3, [sp, #12]
 80165dc:	f000 000f 	and.w	r0, r0, #15
 80165e0:	4098      	lsls	r0, r3
 80165e2:	ea4b 0b00 	orr.w	fp, fp, r0
 80165e6:	3304      	adds	r3, #4
 80165e8:	e7ae      	b.n	8016548 <__gethex+0x15c>
 80165ea:	45b1      	cmp	r9, r6
 80165ec:	d8ea      	bhi.n	80165c4 <__gethex+0x1d8>
 80165ee:	492b      	ldr	r1, [pc, #172]	@ (801669c <__gethex+0x2b0>)
 80165f0:	9303      	str	r3, [sp, #12]
 80165f2:	2201      	movs	r2, #1
 80165f4:	4630      	mov	r0, r6
 80165f6:	f7ff fe25 	bl	8016244 <strncmp>
 80165fa:	9b03      	ldr	r3, [sp, #12]
 80165fc:	2800      	cmp	r0, #0
 80165fe:	d1e1      	bne.n	80165c4 <__gethex+0x1d8>
 8016600:	e7a2      	b.n	8016548 <__gethex+0x15c>
 8016602:	1ea9      	subs	r1, r5, #2
 8016604:	4620      	mov	r0, r4
 8016606:	f7fe fda7 	bl	8015158 <__any_on>
 801660a:	2800      	cmp	r0, #0
 801660c:	d0c2      	beq.n	8016594 <__gethex+0x1a8>
 801660e:	f04f 0903 	mov.w	r9, #3
 8016612:	e7c1      	b.n	8016598 <__gethex+0x1ac>
 8016614:	da09      	bge.n	801662a <__gethex+0x23e>
 8016616:	1b75      	subs	r5, r6, r5
 8016618:	4621      	mov	r1, r4
 801661a:	9801      	ldr	r0, [sp, #4]
 801661c:	462a      	mov	r2, r5
 801661e:	f7fe fb65 	bl	8014cec <__lshift>
 8016622:	1b7f      	subs	r7, r7, r5
 8016624:	4604      	mov	r4, r0
 8016626:	f100 0a14 	add.w	sl, r0, #20
 801662a:	f04f 0900 	mov.w	r9, #0
 801662e:	e7b8      	b.n	80165a2 <__gethex+0x1b6>
 8016630:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016634:	42bd      	cmp	r5, r7
 8016636:	dd6f      	ble.n	8016718 <__gethex+0x32c>
 8016638:	1bed      	subs	r5, r5, r7
 801663a:	42ae      	cmp	r6, r5
 801663c:	dc34      	bgt.n	80166a8 <__gethex+0x2bc>
 801663e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016642:	2b02      	cmp	r3, #2
 8016644:	d022      	beq.n	801668c <__gethex+0x2a0>
 8016646:	2b03      	cmp	r3, #3
 8016648:	d024      	beq.n	8016694 <__gethex+0x2a8>
 801664a:	2b01      	cmp	r3, #1
 801664c:	d115      	bne.n	801667a <__gethex+0x28e>
 801664e:	42ae      	cmp	r6, r5
 8016650:	d113      	bne.n	801667a <__gethex+0x28e>
 8016652:	2e01      	cmp	r6, #1
 8016654:	d10b      	bne.n	801666e <__gethex+0x282>
 8016656:	9a02      	ldr	r2, [sp, #8]
 8016658:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801665c:	6013      	str	r3, [r2, #0]
 801665e:	2301      	movs	r3, #1
 8016660:	6123      	str	r3, [r4, #16]
 8016662:	f8ca 3000 	str.w	r3, [sl]
 8016666:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016668:	2562      	movs	r5, #98	@ 0x62
 801666a:	601c      	str	r4, [r3, #0]
 801666c:	e73a      	b.n	80164e4 <__gethex+0xf8>
 801666e:	1e71      	subs	r1, r6, #1
 8016670:	4620      	mov	r0, r4
 8016672:	f7fe fd71 	bl	8015158 <__any_on>
 8016676:	2800      	cmp	r0, #0
 8016678:	d1ed      	bne.n	8016656 <__gethex+0x26a>
 801667a:	9801      	ldr	r0, [sp, #4]
 801667c:	4621      	mov	r1, r4
 801667e:	f7fe f925 	bl	80148cc <_Bfree>
 8016682:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016684:	2300      	movs	r3, #0
 8016686:	6013      	str	r3, [r2, #0]
 8016688:	2550      	movs	r5, #80	@ 0x50
 801668a:	e72b      	b.n	80164e4 <__gethex+0xf8>
 801668c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801668e:	2b00      	cmp	r3, #0
 8016690:	d1f3      	bne.n	801667a <__gethex+0x28e>
 8016692:	e7e0      	b.n	8016656 <__gethex+0x26a>
 8016694:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016696:	2b00      	cmp	r3, #0
 8016698:	d1dd      	bne.n	8016656 <__gethex+0x26a>
 801669a:	e7ee      	b.n	801667a <__gethex+0x28e>
 801669c:	0801e1e3 	.word	0x0801e1e3
 80166a0:	0801e179 	.word	0x0801e179
 80166a4:	0801e23a 	.word	0x0801e23a
 80166a8:	1e6f      	subs	r7, r5, #1
 80166aa:	f1b9 0f00 	cmp.w	r9, #0
 80166ae:	d130      	bne.n	8016712 <__gethex+0x326>
 80166b0:	b127      	cbz	r7, 80166bc <__gethex+0x2d0>
 80166b2:	4639      	mov	r1, r7
 80166b4:	4620      	mov	r0, r4
 80166b6:	f7fe fd4f 	bl	8015158 <__any_on>
 80166ba:	4681      	mov	r9, r0
 80166bc:	117a      	asrs	r2, r7, #5
 80166be:	2301      	movs	r3, #1
 80166c0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80166c4:	f007 071f 	and.w	r7, r7, #31
 80166c8:	40bb      	lsls	r3, r7
 80166ca:	4213      	tst	r3, r2
 80166cc:	4629      	mov	r1, r5
 80166ce:	4620      	mov	r0, r4
 80166d0:	bf18      	it	ne
 80166d2:	f049 0902 	orrne.w	r9, r9, #2
 80166d6:	f7ff fe21 	bl	801631c <rshift>
 80166da:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80166de:	1b76      	subs	r6, r6, r5
 80166e0:	2502      	movs	r5, #2
 80166e2:	f1b9 0f00 	cmp.w	r9, #0
 80166e6:	d047      	beq.n	8016778 <__gethex+0x38c>
 80166e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80166ec:	2b02      	cmp	r3, #2
 80166ee:	d015      	beq.n	801671c <__gethex+0x330>
 80166f0:	2b03      	cmp	r3, #3
 80166f2:	d017      	beq.n	8016724 <__gethex+0x338>
 80166f4:	2b01      	cmp	r3, #1
 80166f6:	d109      	bne.n	801670c <__gethex+0x320>
 80166f8:	f019 0f02 	tst.w	r9, #2
 80166fc:	d006      	beq.n	801670c <__gethex+0x320>
 80166fe:	f8da 3000 	ldr.w	r3, [sl]
 8016702:	ea49 0903 	orr.w	r9, r9, r3
 8016706:	f019 0f01 	tst.w	r9, #1
 801670a:	d10e      	bne.n	801672a <__gethex+0x33e>
 801670c:	f045 0510 	orr.w	r5, r5, #16
 8016710:	e032      	b.n	8016778 <__gethex+0x38c>
 8016712:	f04f 0901 	mov.w	r9, #1
 8016716:	e7d1      	b.n	80166bc <__gethex+0x2d0>
 8016718:	2501      	movs	r5, #1
 801671a:	e7e2      	b.n	80166e2 <__gethex+0x2f6>
 801671c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801671e:	f1c3 0301 	rsb	r3, r3, #1
 8016722:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016724:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016726:	2b00      	cmp	r3, #0
 8016728:	d0f0      	beq.n	801670c <__gethex+0x320>
 801672a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801672e:	f104 0314 	add.w	r3, r4, #20
 8016732:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016736:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801673a:	f04f 0c00 	mov.w	ip, #0
 801673e:	4618      	mov	r0, r3
 8016740:	f853 2b04 	ldr.w	r2, [r3], #4
 8016744:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016748:	d01b      	beq.n	8016782 <__gethex+0x396>
 801674a:	3201      	adds	r2, #1
 801674c:	6002      	str	r2, [r0, #0]
 801674e:	2d02      	cmp	r5, #2
 8016750:	f104 0314 	add.w	r3, r4, #20
 8016754:	d13c      	bne.n	80167d0 <__gethex+0x3e4>
 8016756:	f8d8 2000 	ldr.w	r2, [r8]
 801675a:	3a01      	subs	r2, #1
 801675c:	42b2      	cmp	r2, r6
 801675e:	d109      	bne.n	8016774 <__gethex+0x388>
 8016760:	1171      	asrs	r1, r6, #5
 8016762:	2201      	movs	r2, #1
 8016764:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016768:	f006 061f 	and.w	r6, r6, #31
 801676c:	fa02 f606 	lsl.w	r6, r2, r6
 8016770:	421e      	tst	r6, r3
 8016772:	d13a      	bne.n	80167ea <__gethex+0x3fe>
 8016774:	f045 0520 	orr.w	r5, r5, #32
 8016778:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801677a:	601c      	str	r4, [r3, #0]
 801677c:	9b02      	ldr	r3, [sp, #8]
 801677e:	601f      	str	r7, [r3, #0]
 8016780:	e6b0      	b.n	80164e4 <__gethex+0xf8>
 8016782:	4299      	cmp	r1, r3
 8016784:	f843 cc04 	str.w	ip, [r3, #-4]
 8016788:	d8d9      	bhi.n	801673e <__gethex+0x352>
 801678a:	68a3      	ldr	r3, [r4, #8]
 801678c:	459b      	cmp	fp, r3
 801678e:	db17      	blt.n	80167c0 <__gethex+0x3d4>
 8016790:	6861      	ldr	r1, [r4, #4]
 8016792:	9801      	ldr	r0, [sp, #4]
 8016794:	3101      	adds	r1, #1
 8016796:	f7fe f859 	bl	801484c <_Balloc>
 801679a:	4681      	mov	r9, r0
 801679c:	b918      	cbnz	r0, 80167a6 <__gethex+0x3ba>
 801679e:	4b1a      	ldr	r3, [pc, #104]	@ (8016808 <__gethex+0x41c>)
 80167a0:	4602      	mov	r2, r0
 80167a2:	2184      	movs	r1, #132	@ 0x84
 80167a4:	e6c5      	b.n	8016532 <__gethex+0x146>
 80167a6:	6922      	ldr	r2, [r4, #16]
 80167a8:	3202      	adds	r2, #2
 80167aa:	f104 010c 	add.w	r1, r4, #12
 80167ae:	0092      	lsls	r2, r2, #2
 80167b0:	300c      	adds	r0, #12
 80167b2:	f7ff fd69 	bl	8016288 <memcpy>
 80167b6:	4621      	mov	r1, r4
 80167b8:	9801      	ldr	r0, [sp, #4]
 80167ba:	f7fe f887 	bl	80148cc <_Bfree>
 80167be:	464c      	mov	r4, r9
 80167c0:	6923      	ldr	r3, [r4, #16]
 80167c2:	1c5a      	adds	r2, r3, #1
 80167c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80167c8:	6122      	str	r2, [r4, #16]
 80167ca:	2201      	movs	r2, #1
 80167cc:	615a      	str	r2, [r3, #20]
 80167ce:	e7be      	b.n	801674e <__gethex+0x362>
 80167d0:	6922      	ldr	r2, [r4, #16]
 80167d2:	455a      	cmp	r2, fp
 80167d4:	dd0b      	ble.n	80167ee <__gethex+0x402>
 80167d6:	2101      	movs	r1, #1
 80167d8:	4620      	mov	r0, r4
 80167da:	f7ff fd9f 	bl	801631c <rshift>
 80167de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80167e2:	3701      	adds	r7, #1
 80167e4:	42bb      	cmp	r3, r7
 80167e6:	f6ff aee0 	blt.w	80165aa <__gethex+0x1be>
 80167ea:	2501      	movs	r5, #1
 80167ec:	e7c2      	b.n	8016774 <__gethex+0x388>
 80167ee:	f016 061f 	ands.w	r6, r6, #31
 80167f2:	d0fa      	beq.n	80167ea <__gethex+0x3fe>
 80167f4:	4453      	add	r3, sl
 80167f6:	f1c6 0620 	rsb	r6, r6, #32
 80167fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80167fe:	f7fe f917 	bl	8014a30 <__hi0bits>
 8016802:	42b0      	cmp	r0, r6
 8016804:	dbe7      	blt.n	80167d6 <__gethex+0x3ea>
 8016806:	e7f0      	b.n	80167ea <__gethex+0x3fe>
 8016808:	0801e179 	.word	0x0801e179

0801680c <L_shift>:
 801680c:	f1c2 0208 	rsb	r2, r2, #8
 8016810:	0092      	lsls	r2, r2, #2
 8016812:	b570      	push	{r4, r5, r6, lr}
 8016814:	f1c2 0620 	rsb	r6, r2, #32
 8016818:	6843      	ldr	r3, [r0, #4]
 801681a:	6804      	ldr	r4, [r0, #0]
 801681c:	fa03 f506 	lsl.w	r5, r3, r6
 8016820:	432c      	orrs	r4, r5
 8016822:	40d3      	lsrs	r3, r2
 8016824:	6004      	str	r4, [r0, #0]
 8016826:	f840 3f04 	str.w	r3, [r0, #4]!
 801682a:	4288      	cmp	r0, r1
 801682c:	d3f4      	bcc.n	8016818 <L_shift+0xc>
 801682e:	bd70      	pop	{r4, r5, r6, pc}

08016830 <__match>:
 8016830:	b530      	push	{r4, r5, lr}
 8016832:	6803      	ldr	r3, [r0, #0]
 8016834:	3301      	adds	r3, #1
 8016836:	f811 4b01 	ldrb.w	r4, [r1], #1
 801683a:	b914      	cbnz	r4, 8016842 <__match+0x12>
 801683c:	6003      	str	r3, [r0, #0]
 801683e:	2001      	movs	r0, #1
 8016840:	bd30      	pop	{r4, r5, pc}
 8016842:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016846:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801684a:	2d19      	cmp	r5, #25
 801684c:	bf98      	it	ls
 801684e:	3220      	addls	r2, #32
 8016850:	42a2      	cmp	r2, r4
 8016852:	d0f0      	beq.n	8016836 <__match+0x6>
 8016854:	2000      	movs	r0, #0
 8016856:	e7f3      	b.n	8016840 <__match+0x10>

08016858 <__hexnan>:
 8016858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801685c:	680b      	ldr	r3, [r1, #0]
 801685e:	6801      	ldr	r1, [r0, #0]
 8016860:	115e      	asrs	r6, r3, #5
 8016862:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016866:	f013 031f 	ands.w	r3, r3, #31
 801686a:	b087      	sub	sp, #28
 801686c:	bf18      	it	ne
 801686e:	3604      	addne	r6, #4
 8016870:	2500      	movs	r5, #0
 8016872:	1f37      	subs	r7, r6, #4
 8016874:	4682      	mov	sl, r0
 8016876:	4690      	mov	r8, r2
 8016878:	9301      	str	r3, [sp, #4]
 801687a:	f846 5c04 	str.w	r5, [r6, #-4]
 801687e:	46b9      	mov	r9, r7
 8016880:	463c      	mov	r4, r7
 8016882:	9502      	str	r5, [sp, #8]
 8016884:	46ab      	mov	fp, r5
 8016886:	784a      	ldrb	r2, [r1, #1]
 8016888:	1c4b      	adds	r3, r1, #1
 801688a:	9303      	str	r3, [sp, #12]
 801688c:	b342      	cbz	r2, 80168e0 <__hexnan+0x88>
 801688e:	4610      	mov	r0, r2
 8016890:	9105      	str	r1, [sp, #20]
 8016892:	9204      	str	r2, [sp, #16]
 8016894:	f7ff fd94 	bl	80163c0 <__hexdig_fun>
 8016898:	2800      	cmp	r0, #0
 801689a:	d151      	bne.n	8016940 <__hexnan+0xe8>
 801689c:	9a04      	ldr	r2, [sp, #16]
 801689e:	9905      	ldr	r1, [sp, #20]
 80168a0:	2a20      	cmp	r2, #32
 80168a2:	d818      	bhi.n	80168d6 <__hexnan+0x7e>
 80168a4:	9b02      	ldr	r3, [sp, #8]
 80168a6:	459b      	cmp	fp, r3
 80168a8:	dd13      	ble.n	80168d2 <__hexnan+0x7a>
 80168aa:	454c      	cmp	r4, r9
 80168ac:	d206      	bcs.n	80168bc <__hexnan+0x64>
 80168ae:	2d07      	cmp	r5, #7
 80168b0:	dc04      	bgt.n	80168bc <__hexnan+0x64>
 80168b2:	462a      	mov	r2, r5
 80168b4:	4649      	mov	r1, r9
 80168b6:	4620      	mov	r0, r4
 80168b8:	f7ff ffa8 	bl	801680c <L_shift>
 80168bc:	4544      	cmp	r4, r8
 80168be:	d952      	bls.n	8016966 <__hexnan+0x10e>
 80168c0:	2300      	movs	r3, #0
 80168c2:	f1a4 0904 	sub.w	r9, r4, #4
 80168c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80168ca:	f8cd b008 	str.w	fp, [sp, #8]
 80168ce:	464c      	mov	r4, r9
 80168d0:	461d      	mov	r5, r3
 80168d2:	9903      	ldr	r1, [sp, #12]
 80168d4:	e7d7      	b.n	8016886 <__hexnan+0x2e>
 80168d6:	2a29      	cmp	r2, #41	@ 0x29
 80168d8:	d157      	bne.n	801698a <__hexnan+0x132>
 80168da:	3102      	adds	r1, #2
 80168dc:	f8ca 1000 	str.w	r1, [sl]
 80168e0:	f1bb 0f00 	cmp.w	fp, #0
 80168e4:	d051      	beq.n	801698a <__hexnan+0x132>
 80168e6:	454c      	cmp	r4, r9
 80168e8:	d206      	bcs.n	80168f8 <__hexnan+0xa0>
 80168ea:	2d07      	cmp	r5, #7
 80168ec:	dc04      	bgt.n	80168f8 <__hexnan+0xa0>
 80168ee:	462a      	mov	r2, r5
 80168f0:	4649      	mov	r1, r9
 80168f2:	4620      	mov	r0, r4
 80168f4:	f7ff ff8a 	bl	801680c <L_shift>
 80168f8:	4544      	cmp	r4, r8
 80168fa:	d936      	bls.n	801696a <__hexnan+0x112>
 80168fc:	f1a8 0204 	sub.w	r2, r8, #4
 8016900:	4623      	mov	r3, r4
 8016902:	f853 1b04 	ldr.w	r1, [r3], #4
 8016906:	f842 1f04 	str.w	r1, [r2, #4]!
 801690a:	429f      	cmp	r7, r3
 801690c:	d2f9      	bcs.n	8016902 <__hexnan+0xaa>
 801690e:	1b3b      	subs	r3, r7, r4
 8016910:	f023 0303 	bic.w	r3, r3, #3
 8016914:	3304      	adds	r3, #4
 8016916:	3401      	adds	r4, #1
 8016918:	3e03      	subs	r6, #3
 801691a:	42b4      	cmp	r4, r6
 801691c:	bf88      	it	hi
 801691e:	2304      	movhi	r3, #4
 8016920:	4443      	add	r3, r8
 8016922:	2200      	movs	r2, #0
 8016924:	f843 2b04 	str.w	r2, [r3], #4
 8016928:	429f      	cmp	r7, r3
 801692a:	d2fb      	bcs.n	8016924 <__hexnan+0xcc>
 801692c:	683b      	ldr	r3, [r7, #0]
 801692e:	b91b      	cbnz	r3, 8016938 <__hexnan+0xe0>
 8016930:	4547      	cmp	r7, r8
 8016932:	d128      	bne.n	8016986 <__hexnan+0x12e>
 8016934:	2301      	movs	r3, #1
 8016936:	603b      	str	r3, [r7, #0]
 8016938:	2005      	movs	r0, #5
 801693a:	b007      	add	sp, #28
 801693c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016940:	3501      	adds	r5, #1
 8016942:	2d08      	cmp	r5, #8
 8016944:	f10b 0b01 	add.w	fp, fp, #1
 8016948:	dd06      	ble.n	8016958 <__hexnan+0x100>
 801694a:	4544      	cmp	r4, r8
 801694c:	d9c1      	bls.n	80168d2 <__hexnan+0x7a>
 801694e:	2300      	movs	r3, #0
 8016950:	f844 3c04 	str.w	r3, [r4, #-4]
 8016954:	2501      	movs	r5, #1
 8016956:	3c04      	subs	r4, #4
 8016958:	6822      	ldr	r2, [r4, #0]
 801695a:	f000 000f 	and.w	r0, r0, #15
 801695e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016962:	6020      	str	r0, [r4, #0]
 8016964:	e7b5      	b.n	80168d2 <__hexnan+0x7a>
 8016966:	2508      	movs	r5, #8
 8016968:	e7b3      	b.n	80168d2 <__hexnan+0x7a>
 801696a:	9b01      	ldr	r3, [sp, #4]
 801696c:	2b00      	cmp	r3, #0
 801696e:	d0dd      	beq.n	801692c <__hexnan+0xd4>
 8016970:	f1c3 0320 	rsb	r3, r3, #32
 8016974:	f04f 32ff 	mov.w	r2, #4294967295
 8016978:	40da      	lsrs	r2, r3
 801697a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801697e:	4013      	ands	r3, r2
 8016980:	f846 3c04 	str.w	r3, [r6, #-4]
 8016984:	e7d2      	b.n	801692c <__hexnan+0xd4>
 8016986:	3f04      	subs	r7, #4
 8016988:	e7d0      	b.n	801692c <__hexnan+0xd4>
 801698a:	2004      	movs	r0, #4
 801698c:	e7d5      	b.n	801693a <__hexnan+0xe2>

0801698e <__ascii_mbtowc>:
 801698e:	b082      	sub	sp, #8
 8016990:	b901      	cbnz	r1, 8016994 <__ascii_mbtowc+0x6>
 8016992:	a901      	add	r1, sp, #4
 8016994:	b142      	cbz	r2, 80169a8 <__ascii_mbtowc+0x1a>
 8016996:	b14b      	cbz	r3, 80169ac <__ascii_mbtowc+0x1e>
 8016998:	7813      	ldrb	r3, [r2, #0]
 801699a:	600b      	str	r3, [r1, #0]
 801699c:	7812      	ldrb	r2, [r2, #0]
 801699e:	1e10      	subs	r0, r2, #0
 80169a0:	bf18      	it	ne
 80169a2:	2001      	movne	r0, #1
 80169a4:	b002      	add	sp, #8
 80169a6:	4770      	bx	lr
 80169a8:	4610      	mov	r0, r2
 80169aa:	e7fb      	b.n	80169a4 <__ascii_mbtowc+0x16>
 80169ac:	f06f 0001 	mvn.w	r0, #1
 80169b0:	e7f8      	b.n	80169a4 <__ascii_mbtowc+0x16>

080169b2 <_realloc_r>:
 80169b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169b6:	4607      	mov	r7, r0
 80169b8:	4614      	mov	r4, r2
 80169ba:	460d      	mov	r5, r1
 80169bc:	b921      	cbnz	r1, 80169c8 <_realloc_r+0x16>
 80169be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80169c2:	4611      	mov	r1, r2
 80169c4:	f7fd beb6 	b.w	8014734 <_malloc_r>
 80169c8:	b92a      	cbnz	r2, 80169d6 <_realloc_r+0x24>
 80169ca:	f7fd fe3f 	bl	801464c <_free_r>
 80169ce:	4625      	mov	r5, r4
 80169d0:	4628      	mov	r0, r5
 80169d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169d6:	f000 f840 	bl	8016a5a <_malloc_usable_size_r>
 80169da:	4284      	cmp	r4, r0
 80169dc:	4606      	mov	r6, r0
 80169de:	d802      	bhi.n	80169e6 <_realloc_r+0x34>
 80169e0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80169e4:	d8f4      	bhi.n	80169d0 <_realloc_r+0x1e>
 80169e6:	4621      	mov	r1, r4
 80169e8:	4638      	mov	r0, r7
 80169ea:	f7fd fea3 	bl	8014734 <_malloc_r>
 80169ee:	4680      	mov	r8, r0
 80169f0:	b908      	cbnz	r0, 80169f6 <_realloc_r+0x44>
 80169f2:	4645      	mov	r5, r8
 80169f4:	e7ec      	b.n	80169d0 <_realloc_r+0x1e>
 80169f6:	42b4      	cmp	r4, r6
 80169f8:	4622      	mov	r2, r4
 80169fa:	4629      	mov	r1, r5
 80169fc:	bf28      	it	cs
 80169fe:	4632      	movcs	r2, r6
 8016a00:	f7ff fc42 	bl	8016288 <memcpy>
 8016a04:	4629      	mov	r1, r5
 8016a06:	4638      	mov	r0, r7
 8016a08:	f7fd fe20 	bl	801464c <_free_r>
 8016a0c:	e7f1      	b.n	80169f2 <_realloc_r+0x40>

08016a0e <__ascii_wctomb>:
 8016a0e:	4603      	mov	r3, r0
 8016a10:	4608      	mov	r0, r1
 8016a12:	b141      	cbz	r1, 8016a26 <__ascii_wctomb+0x18>
 8016a14:	2aff      	cmp	r2, #255	@ 0xff
 8016a16:	d904      	bls.n	8016a22 <__ascii_wctomb+0x14>
 8016a18:	228a      	movs	r2, #138	@ 0x8a
 8016a1a:	601a      	str	r2, [r3, #0]
 8016a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8016a20:	4770      	bx	lr
 8016a22:	700a      	strb	r2, [r1, #0]
 8016a24:	2001      	movs	r0, #1
 8016a26:	4770      	bx	lr

08016a28 <fiprintf>:
 8016a28:	b40e      	push	{r1, r2, r3}
 8016a2a:	b503      	push	{r0, r1, lr}
 8016a2c:	4601      	mov	r1, r0
 8016a2e:	ab03      	add	r3, sp, #12
 8016a30:	4805      	ldr	r0, [pc, #20]	@ (8016a48 <fiprintf+0x20>)
 8016a32:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a36:	6800      	ldr	r0, [r0, #0]
 8016a38:	9301      	str	r3, [sp, #4]
 8016a3a:	f000 f83f 	bl	8016abc <_vfiprintf_r>
 8016a3e:	b002      	add	sp, #8
 8016a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8016a44:	b003      	add	sp, #12
 8016a46:	4770      	bx	lr
 8016a48:	2400039c 	.word	0x2400039c

08016a4c <abort>:
 8016a4c:	b508      	push	{r3, lr}
 8016a4e:	2006      	movs	r0, #6
 8016a50:	f000 fa08 	bl	8016e64 <raise>
 8016a54:	2001      	movs	r0, #1
 8016a56:	f7fb fc0d 	bl	8012274 <_exit>

08016a5a <_malloc_usable_size_r>:
 8016a5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016a5e:	1f18      	subs	r0, r3, #4
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	bfbc      	itt	lt
 8016a64:	580b      	ldrlt	r3, [r1, r0]
 8016a66:	18c0      	addlt	r0, r0, r3
 8016a68:	4770      	bx	lr

08016a6a <__sfputc_r>:
 8016a6a:	6893      	ldr	r3, [r2, #8]
 8016a6c:	3b01      	subs	r3, #1
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	b410      	push	{r4}
 8016a72:	6093      	str	r3, [r2, #8]
 8016a74:	da08      	bge.n	8016a88 <__sfputc_r+0x1e>
 8016a76:	6994      	ldr	r4, [r2, #24]
 8016a78:	42a3      	cmp	r3, r4
 8016a7a:	db01      	blt.n	8016a80 <__sfputc_r+0x16>
 8016a7c:	290a      	cmp	r1, #10
 8016a7e:	d103      	bne.n	8016a88 <__sfputc_r+0x1e>
 8016a80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016a84:	f000 b932 	b.w	8016cec <__swbuf_r>
 8016a88:	6813      	ldr	r3, [r2, #0]
 8016a8a:	1c58      	adds	r0, r3, #1
 8016a8c:	6010      	str	r0, [r2, #0]
 8016a8e:	7019      	strb	r1, [r3, #0]
 8016a90:	4608      	mov	r0, r1
 8016a92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016a96:	4770      	bx	lr

08016a98 <__sfputs_r>:
 8016a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a9a:	4606      	mov	r6, r0
 8016a9c:	460f      	mov	r7, r1
 8016a9e:	4614      	mov	r4, r2
 8016aa0:	18d5      	adds	r5, r2, r3
 8016aa2:	42ac      	cmp	r4, r5
 8016aa4:	d101      	bne.n	8016aaa <__sfputs_r+0x12>
 8016aa6:	2000      	movs	r0, #0
 8016aa8:	e007      	b.n	8016aba <__sfputs_r+0x22>
 8016aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016aae:	463a      	mov	r2, r7
 8016ab0:	4630      	mov	r0, r6
 8016ab2:	f7ff ffda 	bl	8016a6a <__sfputc_r>
 8016ab6:	1c43      	adds	r3, r0, #1
 8016ab8:	d1f3      	bne.n	8016aa2 <__sfputs_r+0xa>
 8016aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016abc <_vfiprintf_r>:
 8016abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ac0:	460d      	mov	r5, r1
 8016ac2:	b09d      	sub	sp, #116	@ 0x74
 8016ac4:	4614      	mov	r4, r2
 8016ac6:	4698      	mov	r8, r3
 8016ac8:	4606      	mov	r6, r0
 8016aca:	b118      	cbz	r0, 8016ad4 <_vfiprintf_r+0x18>
 8016acc:	6a03      	ldr	r3, [r0, #32]
 8016ace:	b90b      	cbnz	r3, 8016ad4 <_vfiprintf_r+0x18>
 8016ad0:	f7fc fe92 	bl	80137f8 <__sinit>
 8016ad4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016ad6:	07d9      	lsls	r1, r3, #31
 8016ad8:	d405      	bmi.n	8016ae6 <_vfiprintf_r+0x2a>
 8016ada:	89ab      	ldrh	r3, [r5, #12]
 8016adc:	059a      	lsls	r2, r3, #22
 8016ade:	d402      	bmi.n	8016ae6 <_vfiprintf_r+0x2a>
 8016ae0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016ae2:	f7fc ffc2 	bl	8013a6a <__retarget_lock_acquire_recursive>
 8016ae6:	89ab      	ldrh	r3, [r5, #12]
 8016ae8:	071b      	lsls	r3, r3, #28
 8016aea:	d501      	bpl.n	8016af0 <_vfiprintf_r+0x34>
 8016aec:	692b      	ldr	r3, [r5, #16]
 8016aee:	b99b      	cbnz	r3, 8016b18 <_vfiprintf_r+0x5c>
 8016af0:	4629      	mov	r1, r5
 8016af2:	4630      	mov	r0, r6
 8016af4:	f000 f938 	bl	8016d68 <__swsetup_r>
 8016af8:	b170      	cbz	r0, 8016b18 <_vfiprintf_r+0x5c>
 8016afa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016afc:	07dc      	lsls	r4, r3, #31
 8016afe:	d504      	bpl.n	8016b0a <_vfiprintf_r+0x4e>
 8016b00:	f04f 30ff 	mov.w	r0, #4294967295
 8016b04:	b01d      	add	sp, #116	@ 0x74
 8016b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b0a:	89ab      	ldrh	r3, [r5, #12]
 8016b0c:	0598      	lsls	r0, r3, #22
 8016b0e:	d4f7      	bmi.n	8016b00 <_vfiprintf_r+0x44>
 8016b10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016b12:	f7fc ffab 	bl	8013a6c <__retarget_lock_release_recursive>
 8016b16:	e7f3      	b.n	8016b00 <_vfiprintf_r+0x44>
 8016b18:	2300      	movs	r3, #0
 8016b1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8016b1c:	2320      	movs	r3, #32
 8016b1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016b22:	f8cd 800c 	str.w	r8, [sp, #12]
 8016b26:	2330      	movs	r3, #48	@ 0x30
 8016b28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016cd8 <_vfiprintf_r+0x21c>
 8016b2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016b30:	f04f 0901 	mov.w	r9, #1
 8016b34:	4623      	mov	r3, r4
 8016b36:	469a      	mov	sl, r3
 8016b38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016b3c:	b10a      	cbz	r2, 8016b42 <_vfiprintf_r+0x86>
 8016b3e:	2a25      	cmp	r2, #37	@ 0x25
 8016b40:	d1f9      	bne.n	8016b36 <_vfiprintf_r+0x7a>
 8016b42:	ebba 0b04 	subs.w	fp, sl, r4
 8016b46:	d00b      	beq.n	8016b60 <_vfiprintf_r+0xa4>
 8016b48:	465b      	mov	r3, fp
 8016b4a:	4622      	mov	r2, r4
 8016b4c:	4629      	mov	r1, r5
 8016b4e:	4630      	mov	r0, r6
 8016b50:	f7ff ffa2 	bl	8016a98 <__sfputs_r>
 8016b54:	3001      	adds	r0, #1
 8016b56:	f000 80a7 	beq.w	8016ca8 <_vfiprintf_r+0x1ec>
 8016b5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016b5c:	445a      	add	r2, fp
 8016b5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8016b60:	f89a 3000 	ldrb.w	r3, [sl]
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	f000 809f 	beq.w	8016ca8 <_vfiprintf_r+0x1ec>
 8016b6a:	2300      	movs	r3, #0
 8016b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8016b70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016b74:	f10a 0a01 	add.w	sl, sl, #1
 8016b78:	9304      	str	r3, [sp, #16]
 8016b7a:	9307      	str	r3, [sp, #28]
 8016b7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016b80:	931a      	str	r3, [sp, #104]	@ 0x68
 8016b82:	4654      	mov	r4, sl
 8016b84:	2205      	movs	r2, #5
 8016b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b8a:	4853      	ldr	r0, [pc, #332]	@ (8016cd8 <_vfiprintf_r+0x21c>)
 8016b8c:	f7e9 fba8 	bl	80002e0 <memchr>
 8016b90:	9a04      	ldr	r2, [sp, #16]
 8016b92:	b9d8      	cbnz	r0, 8016bcc <_vfiprintf_r+0x110>
 8016b94:	06d1      	lsls	r1, r2, #27
 8016b96:	bf44      	itt	mi
 8016b98:	2320      	movmi	r3, #32
 8016b9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016b9e:	0713      	lsls	r3, r2, #28
 8016ba0:	bf44      	itt	mi
 8016ba2:	232b      	movmi	r3, #43	@ 0x2b
 8016ba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016ba8:	f89a 3000 	ldrb.w	r3, [sl]
 8016bac:	2b2a      	cmp	r3, #42	@ 0x2a
 8016bae:	d015      	beq.n	8016bdc <_vfiprintf_r+0x120>
 8016bb0:	9a07      	ldr	r2, [sp, #28]
 8016bb2:	4654      	mov	r4, sl
 8016bb4:	2000      	movs	r0, #0
 8016bb6:	f04f 0c0a 	mov.w	ip, #10
 8016bba:	4621      	mov	r1, r4
 8016bbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016bc0:	3b30      	subs	r3, #48	@ 0x30
 8016bc2:	2b09      	cmp	r3, #9
 8016bc4:	d94b      	bls.n	8016c5e <_vfiprintf_r+0x1a2>
 8016bc6:	b1b0      	cbz	r0, 8016bf6 <_vfiprintf_r+0x13a>
 8016bc8:	9207      	str	r2, [sp, #28]
 8016bca:	e014      	b.n	8016bf6 <_vfiprintf_r+0x13a>
 8016bcc:	eba0 0308 	sub.w	r3, r0, r8
 8016bd0:	fa09 f303 	lsl.w	r3, r9, r3
 8016bd4:	4313      	orrs	r3, r2
 8016bd6:	9304      	str	r3, [sp, #16]
 8016bd8:	46a2      	mov	sl, r4
 8016bda:	e7d2      	b.n	8016b82 <_vfiprintf_r+0xc6>
 8016bdc:	9b03      	ldr	r3, [sp, #12]
 8016bde:	1d19      	adds	r1, r3, #4
 8016be0:	681b      	ldr	r3, [r3, #0]
 8016be2:	9103      	str	r1, [sp, #12]
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	bfbb      	ittet	lt
 8016be8:	425b      	neglt	r3, r3
 8016bea:	f042 0202 	orrlt.w	r2, r2, #2
 8016bee:	9307      	strge	r3, [sp, #28]
 8016bf0:	9307      	strlt	r3, [sp, #28]
 8016bf2:	bfb8      	it	lt
 8016bf4:	9204      	strlt	r2, [sp, #16]
 8016bf6:	7823      	ldrb	r3, [r4, #0]
 8016bf8:	2b2e      	cmp	r3, #46	@ 0x2e
 8016bfa:	d10a      	bne.n	8016c12 <_vfiprintf_r+0x156>
 8016bfc:	7863      	ldrb	r3, [r4, #1]
 8016bfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8016c00:	d132      	bne.n	8016c68 <_vfiprintf_r+0x1ac>
 8016c02:	9b03      	ldr	r3, [sp, #12]
 8016c04:	1d1a      	adds	r2, r3, #4
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	9203      	str	r2, [sp, #12]
 8016c0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016c0e:	3402      	adds	r4, #2
 8016c10:	9305      	str	r3, [sp, #20]
 8016c12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016ce8 <_vfiprintf_r+0x22c>
 8016c16:	7821      	ldrb	r1, [r4, #0]
 8016c18:	2203      	movs	r2, #3
 8016c1a:	4650      	mov	r0, sl
 8016c1c:	f7e9 fb60 	bl	80002e0 <memchr>
 8016c20:	b138      	cbz	r0, 8016c32 <_vfiprintf_r+0x176>
 8016c22:	9b04      	ldr	r3, [sp, #16]
 8016c24:	eba0 000a 	sub.w	r0, r0, sl
 8016c28:	2240      	movs	r2, #64	@ 0x40
 8016c2a:	4082      	lsls	r2, r0
 8016c2c:	4313      	orrs	r3, r2
 8016c2e:	3401      	adds	r4, #1
 8016c30:	9304      	str	r3, [sp, #16]
 8016c32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c36:	4829      	ldr	r0, [pc, #164]	@ (8016cdc <_vfiprintf_r+0x220>)
 8016c38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016c3c:	2206      	movs	r2, #6
 8016c3e:	f7e9 fb4f 	bl	80002e0 <memchr>
 8016c42:	2800      	cmp	r0, #0
 8016c44:	d03f      	beq.n	8016cc6 <_vfiprintf_r+0x20a>
 8016c46:	4b26      	ldr	r3, [pc, #152]	@ (8016ce0 <_vfiprintf_r+0x224>)
 8016c48:	bb1b      	cbnz	r3, 8016c92 <_vfiprintf_r+0x1d6>
 8016c4a:	9b03      	ldr	r3, [sp, #12]
 8016c4c:	3307      	adds	r3, #7
 8016c4e:	f023 0307 	bic.w	r3, r3, #7
 8016c52:	3308      	adds	r3, #8
 8016c54:	9303      	str	r3, [sp, #12]
 8016c56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016c58:	443b      	add	r3, r7
 8016c5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8016c5c:	e76a      	b.n	8016b34 <_vfiprintf_r+0x78>
 8016c5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8016c62:	460c      	mov	r4, r1
 8016c64:	2001      	movs	r0, #1
 8016c66:	e7a8      	b.n	8016bba <_vfiprintf_r+0xfe>
 8016c68:	2300      	movs	r3, #0
 8016c6a:	3401      	adds	r4, #1
 8016c6c:	9305      	str	r3, [sp, #20]
 8016c6e:	4619      	mov	r1, r3
 8016c70:	f04f 0c0a 	mov.w	ip, #10
 8016c74:	4620      	mov	r0, r4
 8016c76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016c7a:	3a30      	subs	r2, #48	@ 0x30
 8016c7c:	2a09      	cmp	r2, #9
 8016c7e:	d903      	bls.n	8016c88 <_vfiprintf_r+0x1cc>
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d0c6      	beq.n	8016c12 <_vfiprintf_r+0x156>
 8016c84:	9105      	str	r1, [sp, #20]
 8016c86:	e7c4      	b.n	8016c12 <_vfiprintf_r+0x156>
 8016c88:	fb0c 2101 	mla	r1, ip, r1, r2
 8016c8c:	4604      	mov	r4, r0
 8016c8e:	2301      	movs	r3, #1
 8016c90:	e7f0      	b.n	8016c74 <_vfiprintf_r+0x1b8>
 8016c92:	ab03      	add	r3, sp, #12
 8016c94:	9300      	str	r3, [sp, #0]
 8016c96:	462a      	mov	r2, r5
 8016c98:	4b12      	ldr	r3, [pc, #72]	@ (8016ce4 <_vfiprintf_r+0x228>)
 8016c9a:	a904      	add	r1, sp, #16
 8016c9c:	4630      	mov	r0, r6
 8016c9e:	f7fb ff73 	bl	8012b88 <_printf_float>
 8016ca2:	4607      	mov	r7, r0
 8016ca4:	1c78      	adds	r0, r7, #1
 8016ca6:	d1d6      	bne.n	8016c56 <_vfiprintf_r+0x19a>
 8016ca8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016caa:	07d9      	lsls	r1, r3, #31
 8016cac:	d405      	bmi.n	8016cba <_vfiprintf_r+0x1fe>
 8016cae:	89ab      	ldrh	r3, [r5, #12]
 8016cb0:	059a      	lsls	r2, r3, #22
 8016cb2:	d402      	bmi.n	8016cba <_vfiprintf_r+0x1fe>
 8016cb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016cb6:	f7fc fed9 	bl	8013a6c <__retarget_lock_release_recursive>
 8016cba:	89ab      	ldrh	r3, [r5, #12]
 8016cbc:	065b      	lsls	r3, r3, #25
 8016cbe:	f53f af1f 	bmi.w	8016b00 <_vfiprintf_r+0x44>
 8016cc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016cc4:	e71e      	b.n	8016b04 <_vfiprintf_r+0x48>
 8016cc6:	ab03      	add	r3, sp, #12
 8016cc8:	9300      	str	r3, [sp, #0]
 8016cca:	462a      	mov	r2, r5
 8016ccc:	4b05      	ldr	r3, [pc, #20]	@ (8016ce4 <_vfiprintf_r+0x228>)
 8016cce:	a904      	add	r1, sp, #16
 8016cd0:	4630      	mov	r0, r6
 8016cd2:	f7fc f9e1 	bl	8013098 <_printf_i>
 8016cd6:	e7e4      	b.n	8016ca2 <_vfiprintf_r+0x1e6>
 8016cd8:	0801e1e5 	.word	0x0801e1e5
 8016cdc:	0801e1ef 	.word	0x0801e1ef
 8016ce0:	08012b89 	.word	0x08012b89
 8016ce4:	08016a99 	.word	0x08016a99
 8016ce8:	0801e1eb 	.word	0x0801e1eb

08016cec <__swbuf_r>:
 8016cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cee:	460e      	mov	r6, r1
 8016cf0:	4614      	mov	r4, r2
 8016cf2:	4605      	mov	r5, r0
 8016cf4:	b118      	cbz	r0, 8016cfe <__swbuf_r+0x12>
 8016cf6:	6a03      	ldr	r3, [r0, #32]
 8016cf8:	b90b      	cbnz	r3, 8016cfe <__swbuf_r+0x12>
 8016cfa:	f7fc fd7d 	bl	80137f8 <__sinit>
 8016cfe:	69a3      	ldr	r3, [r4, #24]
 8016d00:	60a3      	str	r3, [r4, #8]
 8016d02:	89a3      	ldrh	r3, [r4, #12]
 8016d04:	071a      	lsls	r2, r3, #28
 8016d06:	d501      	bpl.n	8016d0c <__swbuf_r+0x20>
 8016d08:	6923      	ldr	r3, [r4, #16]
 8016d0a:	b943      	cbnz	r3, 8016d1e <__swbuf_r+0x32>
 8016d0c:	4621      	mov	r1, r4
 8016d0e:	4628      	mov	r0, r5
 8016d10:	f000 f82a 	bl	8016d68 <__swsetup_r>
 8016d14:	b118      	cbz	r0, 8016d1e <__swbuf_r+0x32>
 8016d16:	f04f 37ff 	mov.w	r7, #4294967295
 8016d1a:	4638      	mov	r0, r7
 8016d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d1e:	6823      	ldr	r3, [r4, #0]
 8016d20:	6922      	ldr	r2, [r4, #16]
 8016d22:	1a98      	subs	r0, r3, r2
 8016d24:	6963      	ldr	r3, [r4, #20]
 8016d26:	b2f6      	uxtb	r6, r6
 8016d28:	4283      	cmp	r3, r0
 8016d2a:	4637      	mov	r7, r6
 8016d2c:	dc05      	bgt.n	8016d3a <__swbuf_r+0x4e>
 8016d2e:	4621      	mov	r1, r4
 8016d30:	4628      	mov	r0, r5
 8016d32:	f7ff fa45 	bl	80161c0 <_fflush_r>
 8016d36:	2800      	cmp	r0, #0
 8016d38:	d1ed      	bne.n	8016d16 <__swbuf_r+0x2a>
 8016d3a:	68a3      	ldr	r3, [r4, #8]
 8016d3c:	3b01      	subs	r3, #1
 8016d3e:	60a3      	str	r3, [r4, #8]
 8016d40:	6823      	ldr	r3, [r4, #0]
 8016d42:	1c5a      	adds	r2, r3, #1
 8016d44:	6022      	str	r2, [r4, #0]
 8016d46:	701e      	strb	r6, [r3, #0]
 8016d48:	6962      	ldr	r2, [r4, #20]
 8016d4a:	1c43      	adds	r3, r0, #1
 8016d4c:	429a      	cmp	r2, r3
 8016d4e:	d004      	beq.n	8016d5a <__swbuf_r+0x6e>
 8016d50:	89a3      	ldrh	r3, [r4, #12]
 8016d52:	07db      	lsls	r3, r3, #31
 8016d54:	d5e1      	bpl.n	8016d1a <__swbuf_r+0x2e>
 8016d56:	2e0a      	cmp	r6, #10
 8016d58:	d1df      	bne.n	8016d1a <__swbuf_r+0x2e>
 8016d5a:	4621      	mov	r1, r4
 8016d5c:	4628      	mov	r0, r5
 8016d5e:	f7ff fa2f 	bl	80161c0 <_fflush_r>
 8016d62:	2800      	cmp	r0, #0
 8016d64:	d0d9      	beq.n	8016d1a <__swbuf_r+0x2e>
 8016d66:	e7d6      	b.n	8016d16 <__swbuf_r+0x2a>

08016d68 <__swsetup_r>:
 8016d68:	b538      	push	{r3, r4, r5, lr}
 8016d6a:	4b29      	ldr	r3, [pc, #164]	@ (8016e10 <__swsetup_r+0xa8>)
 8016d6c:	4605      	mov	r5, r0
 8016d6e:	6818      	ldr	r0, [r3, #0]
 8016d70:	460c      	mov	r4, r1
 8016d72:	b118      	cbz	r0, 8016d7c <__swsetup_r+0x14>
 8016d74:	6a03      	ldr	r3, [r0, #32]
 8016d76:	b90b      	cbnz	r3, 8016d7c <__swsetup_r+0x14>
 8016d78:	f7fc fd3e 	bl	80137f8 <__sinit>
 8016d7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016d80:	0719      	lsls	r1, r3, #28
 8016d82:	d422      	bmi.n	8016dca <__swsetup_r+0x62>
 8016d84:	06da      	lsls	r2, r3, #27
 8016d86:	d407      	bmi.n	8016d98 <__swsetup_r+0x30>
 8016d88:	2209      	movs	r2, #9
 8016d8a:	602a      	str	r2, [r5, #0]
 8016d8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016d90:	81a3      	strh	r3, [r4, #12]
 8016d92:	f04f 30ff 	mov.w	r0, #4294967295
 8016d96:	e033      	b.n	8016e00 <__swsetup_r+0x98>
 8016d98:	0758      	lsls	r0, r3, #29
 8016d9a:	d512      	bpl.n	8016dc2 <__swsetup_r+0x5a>
 8016d9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016d9e:	b141      	cbz	r1, 8016db2 <__swsetup_r+0x4a>
 8016da0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016da4:	4299      	cmp	r1, r3
 8016da6:	d002      	beq.n	8016dae <__swsetup_r+0x46>
 8016da8:	4628      	mov	r0, r5
 8016daa:	f7fd fc4f 	bl	801464c <_free_r>
 8016dae:	2300      	movs	r3, #0
 8016db0:	6363      	str	r3, [r4, #52]	@ 0x34
 8016db2:	89a3      	ldrh	r3, [r4, #12]
 8016db4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016db8:	81a3      	strh	r3, [r4, #12]
 8016dba:	2300      	movs	r3, #0
 8016dbc:	6063      	str	r3, [r4, #4]
 8016dbe:	6923      	ldr	r3, [r4, #16]
 8016dc0:	6023      	str	r3, [r4, #0]
 8016dc2:	89a3      	ldrh	r3, [r4, #12]
 8016dc4:	f043 0308 	orr.w	r3, r3, #8
 8016dc8:	81a3      	strh	r3, [r4, #12]
 8016dca:	6923      	ldr	r3, [r4, #16]
 8016dcc:	b94b      	cbnz	r3, 8016de2 <__swsetup_r+0x7a>
 8016dce:	89a3      	ldrh	r3, [r4, #12]
 8016dd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016dd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016dd8:	d003      	beq.n	8016de2 <__swsetup_r+0x7a>
 8016dda:	4621      	mov	r1, r4
 8016ddc:	4628      	mov	r0, r5
 8016dde:	f000 f883 	bl	8016ee8 <__smakebuf_r>
 8016de2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016de6:	f013 0201 	ands.w	r2, r3, #1
 8016dea:	d00a      	beq.n	8016e02 <__swsetup_r+0x9a>
 8016dec:	2200      	movs	r2, #0
 8016dee:	60a2      	str	r2, [r4, #8]
 8016df0:	6962      	ldr	r2, [r4, #20]
 8016df2:	4252      	negs	r2, r2
 8016df4:	61a2      	str	r2, [r4, #24]
 8016df6:	6922      	ldr	r2, [r4, #16]
 8016df8:	b942      	cbnz	r2, 8016e0c <__swsetup_r+0xa4>
 8016dfa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016dfe:	d1c5      	bne.n	8016d8c <__swsetup_r+0x24>
 8016e00:	bd38      	pop	{r3, r4, r5, pc}
 8016e02:	0799      	lsls	r1, r3, #30
 8016e04:	bf58      	it	pl
 8016e06:	6962      	ldrpl	r2, [r4, #20]
 8016e08:	60a2      	str	r2, [r4, #8]
 8016e0a:	e7f4      	b.n	8016df6 <__swsetup_r+0x8e>
 8016e0c:	2000      	movs	r0, #0
 8016e0e:	e7f7      	b.n	8016e00 <__swsetup_r+0x98>
 8016e10:	2400039c 	.word	0x2400039c

08016e14 <_raise_r>:
 8016e14:	291f      	cmp	r1, #31
 8016e16:	b538      	push	{r3, r4, r5, lr}
 8016e18:	4605      	mov	r5, r0
 8016e1a:	460c      	mov	r4, r1
 8016e1c:	d904      	bls.n	8016e28 <_raise_r+0x14>
 8016e1e:	2316      	movs	r3, #22
 8016e20:	6003      	str	r3, [r0, #0]
 8016e22:	f04f 30ff 	mov.w	r0, #4294967295
 8016e26:	bd38      	pop	{r3, r4, r5, pc}
 8016e28:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016e2a:	b112      	cbz	r2, 8016e32 <_raise_r+0x1e>
 8016e2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016e30:	b94b      	cbnz	r3, 8016e46 <_raise_r+0x32>
 8016e32:	4628      	mov	r0, r5
 8016e34:	f000 f830 	bl	8016e98 <_getpid_r>
 8016e38:	4622      	mov	r2, r4
 8016e3a:	4601      	mov	r1, r0
 8016e3c:	4628      	mov	r0, r5
 8016e3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016e42:	f000 b817 	b.w	8016e74 <_kill_r>
 8016e46:	2b01      	cmp	r3, #1
 8016e48:	d00a      	beq.n	8016e60 <_raise_r+0x4c>
 8016e4a:	1c59      	adds	r1, r3, #1
 8016e4c:	d103      	bne.n	8016e56 <_raise_r+0x42>
 8016e4e:	2316      	movs	r3, #22
 8016e50:	6003      	str	r3, [r0, #0]
 8016e52:	2001      	movs	r0, #1
 8016e54:	e7e7      	b.n	8016e26 <_raise_r+0x12>
 8016e56:	2100      	movs	r1, #0
 8016e58:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8016e5c:	4620      	mov	r0, r4
 8016e5e:	4798      	blx	r3
 8016e60:	2000      	movs	r0, #0
 8016e62:	e7e0      	b.n	8016e26 <_raise_r+0x12>

08016e64 <raise>:
 8016e64:	4b02      	ldr	r3, [pc, #8]	@ (8016e70 <raise+0xc>)
 8016e66:	4601      	mov	r1, r0
 8016e68:	6818      	ldr	r0, [r3, #0]
 8016e6a:	f7ff bfd3 	b.w	8016e14 <_raise_r>
 8016e6e:	bf00      	nop
 8016e70:	2400039c 	.word	0x2400039c

08016e74 <_kill_r>:
 8016e74:	b538      	push	{r3, r4, r5, lr}
 8016e76:	4d07      	ldr	r5, [pc, #28]	@ (8016e94 <_kill_r+0x20>)
 8016e78:	2300      	movs	r3, #0
 8016e7a:	4604      	mov	r4, r0
 8016e7c:	4608      	mov	r0, r1
 8016e7e:	4611      	mov	r1, r2
 8016e80:	602b      	str	r3, [r5, #0]
 8016e82:	f7fb f9e7 	bl	8012254 <_kill>
 8016e86:	1c43      	adds	r3, r0, #1
 8016e88:	d102      	bne.n	8016e90 <_kill_r+0x1c>
 8016e8a:	682b      	ldr	r3, [r5, #0]
 8016e8c:	b103      	cbz	r3, 8016e90 <_kill_r+0x1c>
 8016e8e:	6023      	str	r3, [r4, #0]
 8016e90:	bd38      	pop	{r3, r4, r5, pc}
 8016e92:	bf00      	nop
 8016e94:	24001254 	.word	0x24001254

08016e98 <_getpid_r>:
 8016e98:	f7fb b9d4 	b.w	8012244 <_getpid>

08016e9c <__swhatbuf_r>:
 8016e9c:	b570      	push	{r4, r5, r6, lr}
 8016e9e:	460c      	mov	r4, r1
 8016ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ea4:	2900      	cmp	r1, #0
 8016ea6:	b096      	sub	sp, #88	@ 0x58
 8016ea8:	4615      	mov	r5, r2
 8016eaa:	461e      	mov	r6, r3
 8016eac:	da0d      	bge.n	8016eca <__swhatbuf_r+0x2e>
 8016eae:	89a3      	ldrh	r3, [r4, #12]
 8016eb0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016eb4:	f04f 0100 	mov.w	r1, #0
 8016eb8:	bf14      	ite	ne
 8016eba:	2340      	movne	r3, #64	@ 0x40
 8016ebc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016ec0:	2000      	movs	r0, #0
 8016ec2:	6031      	str	r1, [r6, #0]
 8016ec4:	602b      	str	r3, [r5, #0]
 8016ec6:	b016      	add	sp, #88	@ 0x58
 8016ec8:	bd70      	pop	{r4, r5, r6, pc}
 8016eca:	466a      	mov	r2, sp
 8016ecc:	f000 f848 	bl	8016f60 <_fstat_r>
 8016ed0:	2800      	cmp	r0, #0
 8016ed2:	dbec      	blt.n	8016eae <__swhatbuf_r+0x12>
 8016ed4:	9901      	ldr	r1, [sp, #4]
 8016ed6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016eda:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016ede:	4259      	negs	r1, r3
 8016ee0:	4159      	adcs	r1, r3
 8016ee2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016ee6:	e7eb      	b.n	8016ec0 <__swhatbuf_r+0x24>

08016ee8 <__smakebuf_r>:
 8016ee8:	898b      	ldrh	r3, [r1, #12]
 8016eea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016eec:	079d      	lsls	r5, r3, #30
 8016eee:	4606      	mov	r6, r0
 8016ef0:	460c      	mov	r4, r1
 8016ef2:	d507      	bpl.n	8016f04 <__smakebuf_r+0x1c>
 8016ef4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016ef8:	6023      	str	r3, [r4, #0]
 8016efa:	6123      	str	r3, [r4, #16]
 8016efc:	2301      	movs	r3, #1
 8016efe:	6163      	str	r3, [r4, #20]
 8016f00:	b003      	add	sp, #12
 8016f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f04:	ab01      	add	r3, sp, #4
 8016f06:	466a      	mov	r2, sp
 8016f08:	f7ff ffc8 	bl	8016e9c <__swhatbuf_r>
 8016f0c:	9f00      	ldr	r7, [sp, #0]
 8016f0e:	4605      	mov	r5, r0
 8016f10:	4639      	mov	r1, r7
 8016f12:	4630      	mov	r0, r6
 8016f14:	f7fd fc0e 	bl	8014734 <_malloc_r>
 8016f18:	b948      	cbnz	r0, 8016f2e <__smakebuf_r+0x46>
 8016f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f1e:	059a      	lsls	r2, r3, #22
 8016f20:	d4ee      	bmi.n	8016f00 <__smakebuf_r+0x18>
 8016f22:	f023 0303 	bic.w	r3, r3, #3
 8016f26:	f043 0302 	orr.w	r3, r3, #2
 8016f2a:	81a3      	strh	r3, [r4, #12]
 8016f2c:	e7e2      	b.n	8016ef4 <__smakebuf_r+0xc>
 8016f2e:	89a3      	ldrh	r3, [r4, #12]
 8016f30:	6020      	str	r0, [r4, #0]
 8016f32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016f36:	81a3      	strh	r3, [r4, #12]
 8016f38:	9b01      	ldr	r3, [sp, #4]
 8016f3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016f3e:	b15b      	cbz	r3, 8016f58 <__smakebuf_r+0x70>
 8016f40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016f44:	4630      	mov	r0, r6
 8016f46:	f000 f81d 	bl	8016f84 <_isatty_r>
 8016f4a:	b128      	cbz	r0, 8016f58 <__smakebuf_r+0x70>
 8016f4c:	89a3      	ldrh	r3, [r4, #12]
 8016f4e:	f023 0303 	bic.w	r3, r3, #3
 8016f52:	f043 0301 	orr.w	r3, r3, #1
 8016f56:	81a3      	strh	r3, [r4, #12]
 8016f58:	89a3      	ldrh	r3, [r4, #12]
 8016f5a:	431d      	orrs	r5, r3
 8016f5c:	81a5      	strh	r5, [r4, #12]
 8016f5e:	e7cf      	b.n	8016f00 <__smakebuf_r+0x18>

08016f60 <_fstat_r>:
 8016f60:	b538      	push	{r3, r4, r5, lr}
 8016f62:	4d07      	ldr	r5, [pc, #28]	@ (8016f80 <_fstat_r+0x20>)
 8016f64:	2300      	movs	r3, #0
 8016f66:	4604      	mov	r4, r0
 8016f68:	4608      	mov	r0, r1
 8016f6a:	4611      	mov	r1, r2
 8016f6c:	602b      	str	r3, [r5, #0]
 8016f6e:	f7fb f9d1 	bl	8012314 <_fstat>
 8016f72:	1c43      	adds	r3, r0, #1
 8016f74:	d102      	bne.n	8016f7c <_fstat_r+0x1c>
 8016f76:	682b      	ldr	r3, [r5, #0]
 8016f78:	b103      	cbz	r3, 8016f7c <_fstat_r+0x1c>
 8016f7a:	6023      	str	r3, [r4, #0]
 8016f7c:	bd38      	pop	{r3, r4, r5, pc}
 8016f7e:	bf00      	nop
 8016f80:	24001254 	.word	0x24001254

08016f84 <_isatty_r>:
 8016f84:	b538      	push	{r3, r4, r5, lr}
 8016f86:	4d06      	ldr	r5, [pc, #24]	@ (8016fa0 <_isatty_r+0x1c>)
 8016f88:	2300      	movs	r3, #0
 8016f8a:	4604      	mov	r4, r0
 8016f8c:	4608      	mov	r0, r1
 8016f8e:	602b      	str	r3, [r5, #0]
 8016f90:	f7fb f9d0 	bl	8012334 <_isatty>
 8016f94:	1c43      	adds	r3, r0, #1
 8016f96:	d102      	bne.n	8016f9e <_isatty_r+0x1a>
 8016f98:	682b      	ldr	r3, [r5, #0]
 8016f9a:	b103      	cbz	r3, 8016f9e <_isatty_r+0x1a>
 8016f9c:	6023      	str	r3, [r4, #0]
 8016f9e:	bd38      	pop	{r3, r4, r5, pc}
 8016fa0:	24001254 	.word	0x24001254

08016fa4 <_init>:
 8016fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fa6:	bf00      	nop
 8016fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016faa:	bc08      	pop	{r3}
 8016fac:	469e      	mov	lr, r3
 8016fae:	4770      	bx	lr

08016fb0 <_fini>:
 8016fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fb2:	bf00      	nop
 8016fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016fb6:	bc08      	pop	{r3}
 8016fb8:	469e      	mov	lr, r3
 8016fba:	4770      	bx	lr
