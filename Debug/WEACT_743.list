
WEACT_743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016ae4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000755c  08016d88  08016d88  00017d88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801e2e4  0801e2e4  0001f2e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801e2ec  0801e2ec  0001f2ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801e2f0  0801e2f0  0001f2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000558  24000000  0801e2f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000cf8  24000558  0801e84c  00020558  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001250  0801e84c  00021250  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020558  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002c689  00000000  00000000  00020586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000061d9  00000000  00000000  0004cc0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002420  00000000  00000000  00052de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001bc0  00000000  00000000  00055208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000497e4  00000000  00000000  00056dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000341f6  00000000  00000000  000a05ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019add9  00000000  00000000  000d47a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0026f57b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a9ac  00000000  00000000  0026f5c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005c  00000000  00000000  00279f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000558 	.word	0x24000558
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016d6c 	.word	0x08016d6c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400055c 	.word	0x2400055c
 80002dc:	08016d6c 	.word	0x08016d6c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_d2lz>:
 8000708:	b508      	push	{r3, lr}
 800070a:	4602      	mov	r2, r0
 800070c:	460b      	mov	r3, r1
 800070e:	ec43 2b17 	vmov	d7, r2, r3
 8000712:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800071a:	d403      	bmi.n	8000724 <__aeabi_d2lz+0x1c>
 800071c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000720:	f000 b80a 	b.w	8000738 <__aeabi_d2ulz>
 8000724:	eeb1 7b47 	vneg.f64	d7, d7
 8000728:	ec51 0b17 	vmov	r0, r1, d7
 800072c:	f000 f804 	bl	8000738 <__aeabi_d2ulz>
 8000730:	4240      	negs	r0, r0
 8000732:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000736:	bd08      	pop	{r3, pc}

08000738 <__aeabi_d2ulz>:
 8000738:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000768 <__aeabi_d2ulz+0x30>
 800073c:	ec41 0b17 	vmov	d7, r0, r1
 8000740:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000770 <__aeabi_d2ulz+0x38>
 8000744:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000748:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800074c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000750:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000754:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000758:	ee16 1a10 	vmov	r1, s12
 800075c:	ee17 0a90 	vmov	r0, s15
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	f3af 8000 	nop.w
 8000768:	00000000 	.word	0x00000000
 800076c:	3df00000 	.word	0x3df00000
 8000770:	00000000 	.word	0x00000000
 8000774:	41f00000 	.word	0x41f00000

08000778 <LCD_Test>:
NULL, 0, lcd_writereg, lcd_readreg, lcd_senddata, lcd_recvdata, lcd_gettick };

ST7735_Object_t st7735_pObj;
uint32_t st7735_id;

void LCD_Test(void) {
 8000778:	b5b0      	push	{r4, r5, r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af02      	add	r7, sp, #8
	uint8_t text[20];
#ifdef TFT96
	ST7735Ctx.Orientation = ST7735_ORIENTATION_PORTRAIT;
 800077e:	4b62      	ldr	r3, [pc, #392]	@ (8000908 <LCD_Test+0x190>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
	ST7735Ctx.Panel = HannStar_Panel;
 8000784:	4b60      	ldr	r3, [pc, #384]	@ (8000908 <LCD_Test+0x190>)
 8000786:	2200      	movs	r2, #0
 8000788:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = ST7735_0_9_inch_screen;
 800078a:	4b5f      	ldr	r3, [pc, #380]	@ (8000908 <LCD_Test+0x190>)
 800078c:	2201      	movs	r2, #1
 800078e:	735a      	strb	r2, [r3, #13]
	#else
	error "Unknown Screen"
	
	#endif

	ST7735_RegisterBusIO(&st7735_pObj, &st7735_pIO);
 8000790:	495e      	ldr	r1, [pc, #376]	@ (800090c <LCD_Test+0x194>)
 8000792:	485f      	ldr	r0, [pc, #380]	@ (8000910 <LCD_Test+0x198>)
 8000794:	f000 fd54 	bl	8001240 <ST7735_RegisterBusIO>
	ST7735_LCD_Driver.Init(&st7735_pObj, ST7735_FORMAT_RBG565, &ST7735Ctx);
 8000798:	4b5e      	ldr	r3, [pc, #376]	@ (8000914 <LCD_Test+0x19c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a5a      	ldr	r2, [pc, #360]	@ (8000908 <LCD_Test+0x190>)
 800079e:	2105      	movs	r1, #5
 80007a0:	485b      	ldr	r0, [pc, #364]	@ (8000910 <LCD_Test+0x198>)
 80007a2:	4798      	blx	r3
	ST7735_LCD_Driver.ReadID(&st7735_pObj, &st7735_id);
 80007a4:	4b5b      	ldr	r3, [pc, #364]	@ (8000914 <LCD_Test+0x19c>)
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	495b      	ldr	r1, [pc, #364]	@ (8000918 <LCD_Test+0x1a0>)
 80007aa:	4859      	ldr	r0, [pc, #356]	@ (8000910 <LCD_Test+0x198>)
 80007ac:	4798      	blx	r3

	LCD_SetBrightness(0);
 80007ae:	2000      	movs	r0, #0
 80007b0:	f000 f8be 	bl	8000930 <LCD_SetBrightness>

#ifdef TFT96
	extern unsigned char WeActStudiologo_160_80[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj, 0, 0, WeActStudiologo_160_80);
 80007b4:	4b57      	ldr	r3, [pc, #348]	@ (8000914 <LCD_Test+0x19c>)
 80007b6:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80007b8:	4b58      	ldr	r3, [pc, #352]	@ (800091c <LCD_Test+0x1a4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	4854      	ldr	r0, [pc, #336]	@ (8000910 <LCD_Test+0x198>)
 80007c0:	47a0      	blx	r4
#elif TFT18
	extern unsigned char WeActStudiologo_128_160[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_128_160);	
	#endif

	uint32_t tick = get_tick();
 80007c2:	f002 f909 	bl	80029d8 <HAL_GetTick>
 80007c6:	6178      	str	r0, [r7, #20]
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 80007c8:	e06c      	b.n	80008a4 <LCD_Test+0x12c>
		delay_ms(10);
 80007ca:	200a      	movs	r0, #10
 80007cc:	f002 f910 	bl	80029f0 <HAL_Delay>

		if (get_tick() - tick <= 1000)
 80007d0:	f002 f902 	bl	80029d8 <HAL_GetTick>
 80007d4:	4602      	mov	r2, r0
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80007de:	d810      	bhi.n	8000802 <LCD_Test+0x8a>
			LCD_SetBrightness((get_tick() - tick) * 300 / 1000);
 80007e0:	f002 f8fa 	bl	80029d8 <HAL_GetTick>
 80007e4:	4602      	mov	r2, r0
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	1ad3      	subs	r3, r2, r3
 80007ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80007ee:	fb02 f303 	mul.w	r3, r2, r3
 80007f2:	4a4b      	ldr	r2, [pc, #300]	@ (8000920 <LCD_Test+0x1a8>)
 80007f4:	fba2 2303 	umull	r2, r3, r2, r3
 80007f8:	099b      	lsrs	r3, r3, #6
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 f898 	bl	8000930 <LCD_SetBrightness>
 8000800:	e050      	b.n	80008a4 <LCD_Test+0x12c>
		else if (get_tick() - tick <= 3000) {
 8000802:	f002 f8e9 	bl	80029d8 <HAL_GetTick>
 8000806:	4602      	mov	r2, r0
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000810:	4293      	cmp	r3, r2
 8000812:	d83e      	bhi.n	8000892 <LCD_Test+0x11a>
			sprintf((char*) &text, "%03d", (int)((get_tick() - tick - 1000) / 10));
 8000814:	f002 f8e0 	bl	80029d8 <HAL_GetTick>
 8000818:	4602      	mov	r2, r0
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000822:	4a40      	ldr	r2, [pc, #256]	@ (8000924 <LCD_Test+0x1ac>)
 8000824:	fba2 2303 	umull	r2, r3, r2, r3
 8000828:	08db      	lsrs	r3, r3, #3
 800082a:	461a      	mov	r2, r3
 800082c:	463b      	mov	r3, r7
 800082e:	493e      	ldr	r1, [pc, #248]	@ (8000928 <LCD_Test+0x1b0>)
 8000830:	4618      	mov	r0, r3
 8000832:	f012 fefb 	bl	801362c <siprintf>
			LCD_ShowString(ST7735Ctx.Width - 30, 1, ST7735Ctx.Width, 16, 16,
 8000836:	4b34      	ldr	r3, [pc, #208]	@ (8000908 <LCD_Test+0x190>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	b29b      	uxth	r3, r3
 800083c:	3b1e      	subs	r3, #30
 800083e:	b298      	uxth	r0, r3
 8000840:	4b31      	ldr	r3, [pc, #196]	@ (8000908 <LCD_Test+0x190>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	b29a      	uxth	r2, r3
 8000846:	463b      	mov	r3, r7
 8000848:	9301      	str	r3, [sp, #4]
 800084a:	2310      	movs	r3, #16
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	2310      	movs	r3, #16
 8000850:	2101      	movs	r1, #1
 8000852:	f000 fb15 	bl	8000e80 <LCD_ShowString>
					text);
			ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, ST7735Ctx.Height - 3,
 8000856:	4b2f      	ldr	r3, [pc, #188]	@ (8000914 <LCD_Test+0x19c>)
 8000858:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 800085a:	4b2b      	ldr	r3, [pc, #172]	@ (8000908 <LCD_Test+0x190>)
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	1edd      	subs	r5, r3, #3
					(get_tick() - tick - 1000) * ST7735Ctx.Width / 2000, 3,
 8000860:	f002 f8ba 	bl	80029d8 <HAL_GetTick>
 8000864:	4602      	mov	r2, r0
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800086e:	4a26      	ldr	r2, [pc, #152]	@ (8000908 <LCD_Test+0x190>)
 8000870:	6812      	ldr	r2, [r2, #0]
 8000872:	fb02 f303 	mul.w	r3, r2, r3
			ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, ST7735Ctx.Height - 3,
 8000876:	4a2a      	ldr	r2, [pc, #168]	@ (8000920 <LCD_Test+0x1a8>)
 8000878:	fba2 2303 	umull	r2, r3, r2, r3
 800087c:	09db      	lsrs	r3, r3, #7
 800087e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000882:	9201      	str	r2, [sp, #4]
 8000884:	2203      	movs	r2, #3
 8000886:	9200      	str	r2, [sp, #0]
 8000888:	462a      	mov	r2, r5
 800088a:	2100      	movs	r1, #0
 800088c:	4820      	ldr	r0, [pc, #128]	@ (8000910 <LCD_Test+0x198>)
 800088e:	47a0      	blx	r4
 8000890:	e008      	b.n	80008a4 <LCD_Test+0x12c>
					0xFFFF);
		} else if (get_tick() - tick > 3000)
 8000892:	f002 f8a1 	bl	80029d8 <HAL_GetTick>
 8000896:	4602      	mov	r2, r0
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	1ad3      	subs	r3, r2, r3
 800089c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d808      	bhi.n	80008b6 <LCD_Test+0x13e>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 80008a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008a8:	4820      	ldr	r0, [pc, #128]	@ (800092c <LCD_Test+0x1b4>)
 80008aa:	f004 f965 	bl	8004b78 <HAL_GPIO_ReadPin>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d18a      	bne.n	80007ca <LCD_Test+0x52>
 80008b4:	e004      	b.n	80008c0 <LCD_Test+0x148>
			break;
 80008b6:	bf00      	nop
	}
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET) {
 80008b8:	e002      	b.n	80008c0 <LCD_Test+0x148>
		delay_ms(10);
 80008ba:	200a      	movs	r0, #10
 80008bc:	f002 f898 	bl	80029f0 <HAL_Delay>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET) {
 80008c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008c4:	4819      	ldr	r0, [pc, #100]	@ (800092c <LCD_Test+0x1b4>)
 80008c6:	f004 f957 	bl	8004b78 <HAL_GPIO_ReadPin>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d0f4      	beq.n	80008ba <LCD_Test+0x142>
	}
	LCD_Light(0, 300);
 80008d0:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80008d4:	2000      	movs	r0, #0
 80008d6:	f000 f847 	bl	8000968 <LCD_Light>

	ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,
 80008da:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <LCD_Test+0x19c>)
 80008dc:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 80008de:	4b0a      	ldr	r3, [pc, #40]	@ (8000908 <LCD_Test+0x190>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <LCD_Test+0x190>)
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	2100      	movs	r1, #0
 80008e8:	9101      	str	r1, [sp, #4]
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	4613      	mov	r3, r2
 80008ee:	2200      	movs	r2, #0
 80008f0:	2100      	movs	r1, #0
 80008f2:	4807      	ldr	r0, [pc, #28]	@ (8000910 <LCD_Test+0x198>)
 80008f4:	47a0      	blx	r4
//	sprintf((char *)&text, "STM32H7xx 0x%x", HAL_GetDEVID());
//	LCD_ShowString(4, 20, ST7735Ctx.Width, 16, 16, text);
//	sprintf((char *)&text, "LCD ID:0x%x", st7735_id);
//	LCD_ShowString(4, 36, ST7735Ctx.Width, 16, 16, text);

	LCD_Light(100, 300);
 80008f6:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80008fa:	2064      	movs	r0, #100	@ 0x64
 80008fc:	f000 f834 	bl	8000968 <LCD_Light>
}
 8000900:	bf00      	nop
 8000902:	3718      	adds	r7, #24
 8000904:	46bd      	mov	sp, r7
 8000906:	bdb0      	pop	{r4, r5, r7, pc}
 8000908:	240005b4 	.word	0x240005b4
 800090c:	24000000 	.word	0x24000000
 8000910:	24000574 	.word	0x24000574
 8000914:	24000024 	.word	0x24000024
 8000918:	240005ac 	.word	0x240005ac
 800091c:	08017a70 	.word	0x08017a70
 8000920:	10624dd3 	.word	0x10624dd3
 8000924:	cccccccd 	.word	0xcccccccd
 8000928:	08016d88 	.word	0x08016d88
 800092c:	58020800 	.word	0x58020800

08000930 <LCD_SetBrightness>:

void LCD_SetBrightness(uint32_t Brightness) {
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 8000938:	4b04      	ldr	r3, [pc, #16]	@ (800094c <LCD_SetBrightness+0x1c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	24001020 	.word	0x24001020

08000950 <LCD_GetBrightness>:

uint32_t LCD_GetBrightness(void) {
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
	return __HAL_TIM_GetCompare(LCD_Brightness_timer, LCD_Brightness_channel);
 8000954:	4b03      	ldr	r3, [pc, #12]	@ (8000964 <LCD_GetBrightness+0x14>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 800095a:	4618      	mov	r0, r3
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	24001020 	.word	0x24001020

08000968 <LCD_Light>:

// ��Ļ�𽥱������߱䰵
// Brightness_Dis: Ŀ��ֵ
// time: �ﵽĿ��ֵ��ʱ��,��λ: ms
void LCD_Light(uint32_t Brightness_Dis, uint32_t time) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	@ 0x28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
	uint32_t Brightness_Now;
	uint32_t time_now;
	float temp1, temp2;
	float k, set;

	Brightness_Now = LCD_GetBrightness();
 8000972:	f7ff ffed 	bl	8000950 <LCD_GetBrightness>
 8000976:	6278      	str	r0, [r7, #36]	@ 0x24
	time_now = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
	if (Brightness_Now == Brightness_Dis)
 800097c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	429a      	cmp	r2, r3
 8000982:	d05e      	beq.n	8000a42 <LCD_Light+0xda>
		return;

	if (time == time_now)
 8000984:	683a      	ldr	r2, [r7, #0]
 8000986:	6a3b      	ldr	r3, [r7, #32]
 8000988:	429a      	cmp	r2, r3
 800098a:	d05c      	beq.n	8000a46 <LCD_Light+0xde>
		return;

	temp1 = Brightness_Now;
 800098c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800098e:	ee07 3a90 	vmov	s15, r3
 8000992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000996:	edc7 7a07 	vstr	s15, [r7, #28]
	temp1 = temp1 - Brightness_Dis;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	ee07 3a90 	vmov	s15, r3
 80009a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009a4:	ed97 7a07 	vldr	s14, [r7, #28]
 80009a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009ac:	edc7 7a07 	vstr	s15, [r7, #28]
	temp2 = time_now;
 80009b0:	6a3b      	ldr	r3, [r7, #32]
 80009b2:	ee07 3a90 	vmov	s15, r3
 80009b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009ba:	edc7 7a06 	vstr	s15, [r7, #24]
	temp2 = temp2 - time;
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	ee07 3a90 	vmov	s15, r3
 80009c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009c8:	ed97 7a06 	vldr	s14, [r7, #24]
 80009cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009d0:	edc7 7a06 	vstr	s15, [r7, #24]

	k = temp1 / temp2;
 80009d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80009d8:	ed97 7a06 	vldr	s14, [r7, #24]
 80009dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009e0:	edc7 7a05 	vstr	s15, [r7, #20]

	uint32_t tick = get_tick();
 80009e4:	f001 fff8 	bl	80029d8 <HAL_GetTick>
 80009e8:	6138      	str	r0, [r7, #16]
	while (1) {
		delay_ms(1);
 80009ea:	2001      	movs	r0, #1
 80009ec:	f002 f800 	bl	80029f0 <HAL_Delay>

		time_now = get_tick() - tick;
 80009f0:	f001 fff2 	bl	80029d8 <HAL_GetTick>
 80009f4:	4602      	mov	r2, r0
 80009f6:	693b      	ldr	r3, [r7, #16]
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	623b      	str	r3, [r7, #32]

		temp2 = time_now - 0;
 80009fc:	6a3b      	ldr	r3, [r7, #32]
 80009fe:	ee07 3a90 	vmov	s15, r3
 8000a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a06:	edc7 7a06 	vstr	s15, [r7, #24]

		set = Brightness_Now + temp2 * k;
 8000a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a0c:	ee07 3a90 	vmov	s15, r3
 8000a10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a14:	edd7 6a06 	vldr	s13, [r7, #24]
 8000a18:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a24:	edc7 7a03 	vstr	s15, [r7, #12]

		LCD_SetBrightness((uint32_t) set);
 8000a28:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a30:	ee17 0a90 	vmov	r0, s15
 8000a34:	f7ff ff7c 	bl	8000930 <LCD_SetBrightness>

		if (time_now >= time)
 8000a38:	6a3a      	ldr	r2, [r7, #32]
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d204      	bcs.n	8000a4a <LCD_Light+0xe2>
		delay_ms(1);
 8000a40:	e7d3      	b.n	80009ea <LCD_Light+0x82>
		return;
 8000a42:	bf00      	nop
 8000a44:	e002      	b.n	8000a4c <LCD_Light+0xe4>
		return;
 8000a46:	bf00      	nop
 8000a48:	e000      	b.n	8000a4c <LCD_Light+0xe4>
			break;
 8000a4a:	bf00      	nop

	}
}
 8000a4c:	3728      	adds	r7, #40	@ 0x28
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <LCD_ShowChar>:
//num:Ҫ��ʾ���ַ�:" "--->"~"
//size:�����С 12/16
//mode:���ӷ�ʽ(1)���Ƿǵ��ӷ�ʽ(0)  

void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 8000a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a58:	b097      	sub	sp, #92	@ 0x5c
 8000a5a:	af02      	add	r7, sp, #8
 8000a5c:	461e      	mov	r6, r3
 8000a5e:	4603      	mov	r3, r0
 8000a60:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000a62:	460b      	mov	r3, r1
 8000a64:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8000a66:	4613      	mov	r3, r2
 8000a68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8000a6c:	4633      	mov	r3, r6
 8000a6e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8000a72:	466b      	mov	r3, sp
 8000a74:	607b      	str	r3, [r7, #4]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 8000a76:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000a78:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
	uint16_t x0 = x;
 8000a7c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000a7e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	uint16_t colortemp = POINT_COLOR;
 8000a82:	4bb0      	ldr	r3, [pc, #704]	@ (8000d44 <LCD_ShowChar+0x2f0>)
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	uint32_t h, w;

	uint16_t write[size][size == 12 ? 6 : 8];
 8000a8a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000a8e:	2b0c      	cmp	r3, #12
 8000a90:	d101      	bne.n	8000a96 <LCD_ShowChar+0x42>
 8000a92:	2106      	movs	r1, #6
 8000a94:	e000      	b.n	8000a98 <LCD_ShowChar+0x44>
 8000a96:	2108      	movs	r1, #8
 8000a98:	f897 002a 	ldrb.w	r0, [r7, #42]	@ 0x2a
 8000a9c:	1e4b      	subs	r3, r1, #1
 8000a9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8000aa0:	460a      	mov	r2, r1
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	4692      	mov	sl, r2
 8000aa6:	469b      	mov	fp, r3
 8000aa8:	f04f 0200 	mov.w	r2, #0
 8000aac:	f04f 0300 	mov.w	r3, #0
 8000ab0:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8000ab4:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8000ab8:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8000abc:	460b      	mov	r3, r1
 8000abe:	005e      	lsls	r6, r3, #1
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000ac6:	460a      	mov	r2, r1
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61ba      	str	r2, [r7, #24]
 8000acc:	61fb      	str	r3, [r7, #28]
 8000ace:	b2c3      	uxtb	r3, r0
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	623b      	str	r3, [r7, #32]
 8000ad4:	627a      	str	r2, [r7, #36]	@ 0x24
 8000ad6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8000ada:	465b      	mov	r3, fp
 8000adc:	6a3a      	ldr	r2, [r7, #32]
 8000ade:	fb02 fc03 	mul.w	ip, r2, r3
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae4:	4652      	mov	r2, sl
 8000ae6:	fb02 f303 	mul.w	r3, r2, r3
 8000aea:	449c      	add	ip, r3
 8000aec:	4652      	mov	r2, sl
 8000aee:	6a3b      	ldr	r3, [r7, #32]
 8000af0:	fba2 8903 	umull	r8, r9, r2, r3
 8000af4:	eb0c 0309 	add.w	r3, ip, r9
 8000af8:	4699      	mov	r9, r3
 8000afa:	f04f 0200 	mov.w	r2, #0
 8000afe:	f04f 0300 	mov.w	r3, #0
 8000b02:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000b06:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000b0a:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000b0e:	460a      	mov	r2, r1
 8000b10:	2300      	movs	r3, #0
 8000b12:	613a      	str	r2, [r7, #16]
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	b2c3      	uxtb	r3, r0
 8000b18:	2200      	movs	r2, #0
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	60fa      	str	r2, [r7, #12]
 8000b1e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000b22:	464b      	mov	r3, r9
 8000b24:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8000b28:	4652      	mov	r2, sl
 8000b2a:	fb02 fc03 	mul.w	ip, r2, r3
 8000b2e:	465b      	mov	r3, fp
 8000b30:	4642      	mov	r2, r8
 8000b32:	fb02 f303 	mul.w	r3, r2, r3
 8000b36:	449c      	add	ip, r3
 8000b38:	4642      	mov	r2, r8
 8000b3a:	4653      	mov	r3, sl
 8000b3c:	fba2 4503 	umull	r4, r5, r2, r3
 8000b40:	eb0c 0305 	add.w	r3, ip, r5
 8000b44:	461d      	mov	r5, r3
 8000b46:	f04f 0200 	mov.w	r2, #0
 8000b4a:	f04f 0300 	mov.w	r3, #0
 8000b4e:	012b      	lsls	r3, r5, #4
 8000b50:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000b54:	0122      	lsls	r2, r4, #4
 8000b56:	460b      	mov	r3, r1
 8000b58:	4602      	mov	r2, r0
 8000b5a:	fb02 f303 	mul.w	r3, r2, r3
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	3307      	adds	r3, #7
 8000b62:	08db      	lsrs	r3, r3, #3
 8000b64:	00db      	lsls	r3, r3, #3
 8000b66:	ebad 0d03 	sub.w	sp, sp, r3
 8000b6a:	ab02      	add	r3, sp, #8
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	085b      	lsrs	r3, r3, #1
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint16_t count;

	ST7735_GetXSize(&st7735_pObj, &w);
 8000b74:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4873      	ldr	r0, [pc, #460]	@ (8000d48 <LCD_ShowChar+0x2f4>)
 8000b7c:	f001 fcca 	bl	8002514 <ST7735_GetXSize>
	ST7735_GetYSize(&st7735_pObj, &h);
 8000b80:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000b84:	4619      	mov	r1, r3
 8000b86:	4870      	ldr	r0, [pc, #448]	@ (8000d48 <LCD_ShowChar+0x2f4>)
 8000b88:	f001 fcd6 	bl	8002538 <ST7735_GetYSize>

	//���ô���		   
	num = num - ' ';  //�õ�ƫ�ƺ��ֵ
 8000b8c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000b90:	3b20      	subs	r3, #32
 8000b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	count = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

	if (!mode) //�ǵ��ӷ�ʽ
 8000b9c:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	f040 80a8 	bne.w	8000cf6 <LCD_ShowChar+0x2a2>
	{
		for (t = 0; t < size; t++) {
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8000bac:	e09b      	b.n	8000ce6 <LCD_ShowChar+0x292>
			if (size == 12)
 8000bae:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000bb2:	2b0c      	cmp	r3, #12
 8000bb4:	d10e      	bne.n	8000bd4 <LCD_ShowChar+0x180>
				temp = asc2_1206[num][t];  //����1206����
 8000bb6:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8000bba:	f897 104d 	ldrb.w	r1, [r7, #77]	@ 0x4d
 8000bbe:	4863      	ldr	r0, [pc, #396]	@ (8000d4c <LCD_ShowChar+0x2f8>)
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	4413      	add	r3, r2
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	4403      	add	r3, r0
 8000bca:	440b      	add	r3, r1
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8000bd2:	e00a      	b.n	8000bea <LCD_ShowChar+0x196>
			else
				temp = asc2_1608[num][t];		 //����1608����
 8000bd4:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8000bd8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000bdc:	495c      	ldr	r1, [pc, #368]	@ (8000d50 <LCD_ShowChar+0x2fc>)
 8000bde:	0112      	lsls	r2, r2, #4
 8000be0:	440a      	add	r2, r1
 8000be2:	4413      	add	r3, r2
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

			for (t1 = 0; t1 < 8; t1++) {
 8000bea:	2300      	movs	r3, #0
 8000bec:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8000bf0:	e06e      	b.n	8000cd0 <LCD_ShowChar+0x27c>
				if (temp & 0x80)
 8000bf2:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	da0e      	bge.n	8000c18 <LCD_ShowChar+0x1c4>
					POINT_COLOR = (colortemp & 0xFF) << 8 | colortemp >> 8;
 8000bfa:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8000bfe:	021b      	lsls	r3, r3, #8
 8000c00:	b21a      	sxth	r2, r3
 8000c02:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000c06:	0a1b      	lsrs	r3, r3, #8
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	b21b      	sxth	r3, r3
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	b21b      	sxth	r3, r3
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	4b4c      	ldr	r3, [pc, #304]	@ (8000d44 <LCD_ShowChar+0x2f0>)
 8000c14:	801a      	strh	r2, [r3, #0]
 8000c16:	e00e      	b.n	8000c36 <LCD_ShowChar+0x1e2>
				else
					POINT_COLOR = (BACK_COLOR & 0xFF) << 8 | BACK_COLOR >> 8;
 8000c18:	4b4e      	ldr	r3, [pc, #312]	@ (8000d54 <LCD_ShowChar+0x300>)
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	b21b      	sxth	r3, r3
 8000c1e:	021b      	lsls	r3, r3, #8
 8000c20:	b21a      	sxth	r2, r3
 8000c22:	4b4c      	ldr	r3, [pc, #304]	@ (8000d54 <LCD_ShowChar+0x300>)
 8000c24:	881b      	ldrh	r3, [r3, #0]
 8000c26:	0a1b      	lsrs	r3, r3, #8
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	b21b      	sxth	r3, r3
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	b21b      	sxth	r3, r3
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	4b44      	ldr	r3, [pc, #272]	@ (8000d44 <LCD_ShowChar+0x2f0>)
 8000c34:	801a      	strh	r2, [r3, #0]

				write[count][t / 2] = POINT_COLOR;
 8000c36:	0872      	lsrs	r2, r6, #1
 8000c38:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8000c3c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000c40:	085b      	lsrs	r3, r3, #1
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	461c      	mov	r4, r3
 8000c46:	4b3f      	ldr	r3, [pc, #252]	@ (8000d44 <LCD_ShowChar+0x2f0>)
 8000c48:	8818      	ldrh	r0, [r3, #0]
 8000c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c4c:	fb01 f202 	mul.w	r2, r1, r2
 8000c50:	4422      	add	r2, r4
 8000c52:	4601      	mov	r1, r0
 8000c54:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count++;
 8000c58:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				if (count >= size)
 8000c62:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d302      	bcc.n	8000c76 <LCD_ShowChar+0x222>
					count = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

				temp <<= 1;
 8000c76:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
				y++;
 8000c80:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000c82:	3301      	adds	r3, #1
 8000c84:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				if (y > h) {
 8000c86:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d904      	bls.n	8000c98 <LCD_ShowChar+0x244>
					POINT_COLOR = colortemp;
 8000c8e:	4a2d      	ldr	r2, [pc, #180]	@ (8000d44 <LCD_ShowChar+0x2f0>)
 8000c90:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000c94:	8013      	strh	r3, [r2, #0]
					return;
 8000c96:	e0e8      	b.n	8000e6a <LCD_ShowChar+0x416>
				}		 //��������
				if ((y - y0) == size) {
 8000c98:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000c9a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000c9e:	1ad2      	subs	r2, r2, r3
 8000ca0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d10e      	bne.n	8000cc6 <LCD_ShowChar+0x272>
					y = y0;
 8000ca8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000cac:	85bb      	strh	r3, [r7, #44]	@ 0x2c
					x++;
 8000cae:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
					if (x > w) {
 8000cb4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d90e      	bls.n	8000cda <LCD_ShowChar+0x286>
						POINT_COLOR = colortemp;
 8000cbc:	4a21      	ldr	r2, [pc, #132]	@ (8000d44 <LCD_ShowChar+0x2f0>)
 8000cbe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000cc2:	8013      	strh	r3, [r2, #0]
						return;
 8000cc4:	e0d1      	b.n	8000e6a <LCD_ShowChar+0x416>
			for (t1 = 0; t1 < 8; t1++) {
 8000cc6:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000cca:	3301      	adds	r3, #1
 8000ccc:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8000cd0:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000cd4:	2b07      	cmp	r3, #7
 8000cd6:	d98c      	bls.n	8000bf2 <LCD_ShowChar+0x19e>
 8000cd8:	e000      	b.n	8000cdc <LCD_ShowChar+0x288>
					}		 //��������
					break;
 8000cda:	bf00      	nop
		for (t = 0; t < size; t++) {
 8000cdc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8000ce6:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8000cea:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f4ff af5d 	bcc.w	8000bae <LCD_ShowChar+0x15a>
 8000cf4:	e09e      	b.n	8000e34 <LCD_ShowChar+0x3e0>
				}
			}
		}
	} else		 //���ӷ�ʽ
	{
		for (t = 0; t < size; t++) {
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8000cfc:	e093      	b.n	8000e26 <LCD_ShowChar+0x3d2>
			if (size == 12)
 8000cfe:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000d02:	2b0c      	cmp	r3, #12
 8000d04:	d10e      	bne.n	8000d24 <LCD_ShowChar+0x2d0>
				temp = asc2_1206[num][t];  //����1206����
 8000d06:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8000d0a:	f897 104d 	ldrb.w	r1, [r7, #77]	@ 0x4d
 8000d0e:	480f      	ldr	r0, [pc, #60]	@ (8000d4c <LCD_ShowChar+0x2f8>)
 8000d10:	4613      	mov	r3, r2
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	4413      	add	r3, r2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	4403      	add	r3, r0
 8000d1a:	440b      	add	r3, r1
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8000d22:	e00a      	b.n	8000d3a <LCD_ShowChar+0x2e6>
			else
				temp = asc2_1608[num][t];		 //����1608����
 8000d24:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8000d28:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000d2c:	4908      	ldr	r1, [pc, #32]	@ (8000d50 <LCD_ShowChar+0x2fc>)
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	440a      	add	r2, r1
 8000d32:	4413      	add	r3, r2
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			for (t1 = 0; t1 < 8; t1++) {
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8000d40:	e066      	b.n	8000e10 <LCD_ShowChar+0x3bc>
 8000d42:	bf00      	nop
 8000d44:	24000020 	.word	0x24000020
 8000d48:	24000574 	.word	0x24000574
 8000d4c:	0801700c 	.word	0x0801700c
 8000d50:	08017480 	.word	0x08017480
 8000d54:	240005b0 	.word	0x240005b0
				if (temp & 0x80)
 8000d58:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	da1b      	bge.n	8000d98 <LCD_ShowChar+0x344>
					write[count][t / 2] = (POINT_COLOR & 0xFF) << 8
							| POINT_COLOR >> 8;
 8000d60:	4b45      	ldr	r3, [pc, #276]	@ (8000e78 <LCD_ShowChar+0x424>)
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	b21b      	sxth	r3, r3
 8000d66:	021b      	lsls	r3, r3, #8
 8000d68:	b21a      	sxth	r2, r3
 8000d6a:	4b43      	ldr	r3, [pc, #268]	@ (8000e78 <LCD_ShowChar+0x424>)
 8000d6c:	881b      	ldrh	r3, [r3, #0]
 8000d6e:	0a1b      	lsrs	r3, r3, #8
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	b21b      	sxth	r3, r3
 8000d74:	4313      	orrs	r3, r2
 8000d76:	b218      	sxth	r0, r3
					write[count][t / 2] = (POINT_COLOR & 0xFF) << 8
 8000d78:	0872      	lsrs	r2, r6, #1
 8000d7a:	f8b7 104a 	ldrh.w	r1, [r7, #74]	@ 0x4a
 8000d7e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000d82:	085b      	lsrs	r3, r3, #1
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	461c      	mov	r4, r3
							| POINT_COLOR >> 8;
 8000d88:	b280      	uxth	r0, r0
					write[count][t / 2] = (POINT_COLOR & 0xFF) << 8
 8000d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d8c:	fb01 f202 	mul.w	r2, r1, r2
 8000d90:	4422      	add	r2, r4
 8000d92:	4601      	mov	r1, r0
 8000d94:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count++;
 8000d98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				if (count >= size)
 8000da2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d302      	bcc.n	8000db6 <LCD_ShowChar+0x362>
					count = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

				temp <<= 1;
 8000db6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
				y++;
 8000dc0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				if (y >= h) {
 8000dc6:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d304      	bcc.n	8000dd8 <LCD_ShowChar+0x384>
					POINT_COLOR = colortemp;
 8000dce:	4a2a      	ldr	r2, [pc, #168]	@ (8000e78 <LCD_ShowChar+0x424>)
 8000dd0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000dd4:	8013      	strh	r3, [r2, #0]
					return;
 8000dd6:	e048      	b.n	8000e6a <LCD_ShowChar+0x416>
				}		 //��������
				if ((y - y0) == size) {
 8000dd8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000dda:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000dde:	1ad2      	subs	r2, r2, r3
 8000de0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d10e      	bne.n	8000e06 <LCD_ShowChar+0x3b2>
					y = y0;
 8000de8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000dec:	85bb      	strh	r3, [r7, #44]	@ 0x2c
					x++;
 8000dee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000df0:	3301      	adds	r3, #1
 8000df2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
					if (x >= w) {
 8000df4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d30e      	bcc.n	8000e1a <LCD_ShowChar+0x3c6>
						POINT_COLOR = colortemp;
 8000dfc:	4a1e      	ldr	r2, [pc, #120]	@ (8000e78 <LCD_ShowChar+0x424>)
 8000dfe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000e02:	8013      	strh	r3, [r2, #0]
						return;
 8000e04:	e031      	b.n	8000e6a <LCD_ShowChar+0x416>
			for (t1 = 0; t1 < 8; t1++) {
 8000e06:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8000e10:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000e14:	2b07      	cmp	r3, #7
 8000e16:	d99f      	bls.n	8000d58 <LCD_ShowChar+0x304>
 8000e18:	e000      	b.n	8000e1c <LCD_ShowChar+0x3c8>
					}		 //��������
					break;
 8000e1a:	bf00      	nop
		for (t = 0; t < size; t++) {
 8000e1c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000e20:	3301      	adds	r3, #1
 8000e22:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8000e26:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8000e2a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	f4ff af65 	bcc.w	8000cfe <LCD_ShowChar+0x2aa>
				}
			}
		}
	}
	ST7735_FillRGBRect(&st7735_pObj, x0, y0, (uint8_t*) &write,
 8000e34:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8000e38:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 8000e3c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000e40:	2b0c      	cmp	r3, #12
 8000e42:	d101      	bne.n	8000e48 <LCD_ShowChar+0x3f4>
 8000e44:	2306      	movs	r3, #6
 8000e46:	e000      	b.n	8000e4a <LCD_ShowChar+0x3f6>
 8000e48:	2308      	movs	r3, #8
 8000e4a:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8000e4e:	9201      	str	r2, [sp, #4]
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e54:	4602      	mov	r2, r0
 8000e56:	4809      	ldr	r0, [pc, #36]	@ (8000e7c <LCD_ShowChar+0x428>)
 8000e58:	f001 f9ae 	bl	80021b8 <ST7735_FillRGBRect>
			size == 12 ? 6 : 8, size);
	POINT_COLOR = colortemp;
 8000e5c:	4a06      	ldr	r2, [pc, #24]	@ (8000e78 <LCD_ShowChar+0x424>)
 8000e5e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000e62:	8013      	strh	r3, [r2, #0]
 8000e64:	f8d7 d004 	ldr.w	sp, [r7, #4]
 8000e68:	e001      	b.n	8000e6e <LCD_ShowChar+0x41a>
					return;
 8000e6a:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
 8000e6e:	3754      	adds	r7, #84	@ 0x54
 8000e70:	46bd      	mov	sp, r7
 8000e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e76:	bf00      	nop
 8000e78:	24000020 	.word	0x24000020
 8000e7c:	24000574 	.word	0x24000574

08000e80 <LCD_ShowString>:
//x,y:�������
//width,height:�����С  
//size:�����С
//*p:�ַ�����ʼ��ַ
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size, uint8_t *p) {
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b087      	sub	sp, #28
 8000e84:	af02      	add	r7, sp, #8
 8000e86:	4604      	mov	r4, r0
 8000e88:	4608      	mov	r0, r1
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4623      	mov	r3, r4
 8000e90:	80fb      	strh	r3, [r7, #6]
 8000e92:	4603      	mov	r3, r0
 8000e94:	80bb      	strh	r3, [r7, #4]
 8000e96:	460b      	mov	r3, r1
 8000e98:	807b      	strh	r3, [r7, #2]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 8000e9e:	88fb      	ldrh	r3, [r7, #6]
 8000ea0:	73fb      	strb	r3, [r7, #15]
	width += x;
 8000ea2:	887a      	ldrh	r2, [r7, #2]
 8000ea4:	88fb      	ldrh	r3, [r7, #6]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	807b      	strh	r3, [r7, #2]
	height += y;
 8000eaa:	883a      	ldrh	r2, [r7, #0]
 8000eac:	88bb      	ldrh	r3, [r7, #4]
 8000eae:	4413      	add	r3, r2
 8000eb0:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' '))		 //�ж��ǲ��ǷǷ��ַ�!
 8000eb2:	e024      	b.n	8000efe <LCD_ShowString+0x7e>
	{
		if (x > width) {
 8000eb4:	88fa      	ldrh	r2, [r7, #6]
 8000eb6:	887b      	ldrh	r3, [r7, #2]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d907      	bls.n	8000ecc <LCD_ShowString+0x4c>
			x = x0;
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	80fb      	strh	r3, [r7, #6]
			y += size;
 8000ec0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	88bb      	ldrh	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	80bb      	strh	r3, [r7, #4]
		}
		if (y > height)
 8000ecc:	88ba      	ldrh	r2, [r7, #4]
 8000ece:	883b      	ldrh	r3, [r7, #0]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d81d      	bhi.n	8000f10 <LCD_ShowString+0x90>
			break;		 //�˳�
		LCD_ShowChar(x, y, *p, size, 0);
 8000ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed6:	781a      	ldrb	r2, [r3, #0]
 8000ed8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000edc:	88b9      	ldrh	r1, [r7, #4]
 8000ede:	88f8      	ldrh	r0, [r7, #6]
 8000ee0:	2400      	movs	r4, #0
 8000ee2:	9400      	str	r4, [sp, #0]
 8000ee4:	f7ff fdb6 	bl	8000a54 <LCD_ShowChar>
		x += size / 2;
 8000ee8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000eec:	085b      	lsrs	r3, r3, #1
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	88fb      	ldrh	r3, [r7, #6]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	80fb      	strh	r3, [r7, #6]
		p++;
 8000ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000efa:	3301      	adds	r3, #1
 8000efc:	627b      	str	r3, [r7, #36]	@ 0x24
	while ((*p <= '~') && (*p >= ' '))		 //�ж��ǲ��ǷǷ��ַ�!
 8000efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b7e      	cmp	r3, #126	@ 0x7e
 8000f04:	d805      	bhi.n	8000f12 <LCD_ShowString+0x92>
 8000f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b1f      	cmp	r3, #31
 8000f0c:	d8d2      	bhi.n	8000eb4 <LCD_ShowString+0x34>
	}
}
 8000f0e:	e000      	b.n	8000f12 <LCD_ShowString+0x92>
			break;		 //�˳�
 8000f10:	bf00      	nop
}
 8000f12:	bf00      	nop
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd90      	pop	{r4, r7, pc}
	...

08000f1c <lcd_init>:

static int32_t lcd_init(void) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
	int32_t result = ST7735_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
	HAL_TIMEx_PWMN_Start(LCD_Brightness_timer, LCD_Brightness_channel);
 8000f26:	2104      	movs	r1, #4
 8000f28:	4803      	ldr	r0, [pc, #12]	@ (8000f38 <lcd_init+0x1c>)
 8000f2a:	f00c fb3f 	bl	800d5ac <HAL_TIMEx_PWMN_Start>
	return result;
 8000f2e:	687b      	ldr	r3, [r7, #4]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	24001020 	.word	0x24001020

08000f3c <lcd_gettick>:

static int32_t lcd_gettick(void) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000f40:	f001 fd4a 	bl	80029d8 <HAL_GetTick>
 8000f44:	4603      	mov	r3, r0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <lcd_writereg>:

static int32_t lcd_writereg(uint8_t reg, uint8_t *pdata, uint32_t length) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
 8000f58:	73fb      	strb	r3, [r7, #15]
	int32_t result;
	LCD_CS_RESET;
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f60:	481d      	ldr	r0, [pc, #116]	@ (8000fd8 <lcd_writereg+0x8c>)
 8000f62:	f003 fe21 	bl	8004ba8 <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f6c:	481a      	ldr	r0, [pc, #104]	@ (8000fd8 <lcd_writereg+0x8c>)
 8000f6e:	f003 fe1b 	bl	8004ba8 <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(SPI_Drv, &reg, 1, 100);
 8000f72:	f107 010f 	add.w	r1, r7, #15
 8000f76:	2364      	movs	r3, #100	@ 0x64
 8000f78:	2201      	movs	r2, #1
 8000f7a:	4818      	ldr	r0, [pc, #96]	@ (8000fdc <lcd_writereg+0x90>)
 8000f7c:	f00a fd34 	bl	800b9e8 <HAL_SPI_Transmit>
 8000f80:	4603      	mov	r3, r0
 8000f82:	617b      	str	r3, [r7, #20]
	LCD_RS_SET;
 8000f84:	2201      	movs	r2, #1
 8000f86:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f8a:	4813      	ldr	r0, [pc, #76]	@ (8000fd8 <lcd_writereg+0x8c>)
 8000f8c:	f003 fe0c 	bl	8004ba8 <HAL_GPIO_WritePin>
	if (length > 0)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d00c      	beq.n	8000fb0 <lcd_writereg+0x64>
		result += HAL_SPI_Transmit(SPI_Drv, pdata, length, 500);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000f9e:	68b9      	ldr	r1, [r7, #8]
 8000fa0:	480e      	ldr	r0, [pc, #56]	@ (8000fdc <lcd_writereg+0x90>)
 8000fa2:	f00a fd21 	bl	800b9e8 <HAL_SPI_Transmit>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	461a      	mov	r2, r3
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	4413      	add	r3, r2
 8000fae:	617b      	str	r3, [r7, #20]
	LCD_CS_SET;
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fb6:	4808      	ldr	r0, [pc, #32]	@ (8000fd8 <lcd_writereg+0x8c>)
 8000fb8:	f003 fdf6 	bl	8004ba8 <HAL_GPIO_WritePin>
	if (result > 0) {
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	dd03      	ble.n	8000fca <lcd_writereg+0x7e>
		result = -1;
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	e001      	b.n	8000fce <lcd_writereg+0x82>
	} else {
		result = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
	}
	return result;
 8000fce:	697b      	ldr	r3, [r7, #20]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	58021000 	.word	0x58021000
 8000fdc:	24000f94 	.word	0x24000f94

08000fe0 <lcd_readreg>:

static int32_t lcd_readreg(uint8_t reg, uint8_t *pdata) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
	int32_t result;
	LCD_CS_RESET;
 8000fec:	2200      	movs	r2, #0
 8000fee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ff2:	481b      	ldr	r0, [pc, #108]	@ (8001060 <lcd_readreg+0x80>)
 8000ff4:	f003 fdd8 	bl	8004ba8 <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ffe:	4818      	ldr	r0, [pc, #96]	@ (8001060 <lcd_readreg+0x80>)
 8001000:	f003 fdd2 	bl	8004ba8 <HAL_GPIO_WritePin>

	result = HAL_SPI_Transmit(SPI_Drv, &reg, 1, 100);
 8001004:	1df9      	adds	r1, r7, #7
 8001006:	2364      	movs	r3, #100	@ 0x64
 8001008:	2201      	movs	r2, #1
 800100a:	4816      	ldr	r0, [pc, #88]	@ (8001064 <lcd_readreg+0x84>)
 800100c:	f00a fcec 	bl	800b9e8 <HAL_SPI_Transmit>
 8001010:	4603      	mov	r3, r0
 8001012:	60fb      	str	r3, [r7, #12]
	LCD_RS_SET;
 8001014:	2201      	movs	r2, #1
 8001016:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800101a:	4811      	ldr	r0, [pc, #68]	@ (8001060 <lcd_readreg+0x80>)
 800101c:	f003 fdc4 	bl	8004ba8 <HAL_GPIO_WritePin>
	result += HAL_SPI_Receive(SPI_Drv, pdata, 1, 500);
 8001020:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001024:	2201      	movs	r2, #1
 8001026:	6839      	ldr	r1, [r7, #0]
 8001028:	480e      	ldr	r0, [pc, #56]	@ (8001064 <lcd_readreg+0x84>)
 800102a:	f00a fecb 	bl	800bdc4 <HAL_SPI_Receive>
 800102e:	4603      	mov	r3, r0
 8001030:	461a      	mov	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	4413      	add	r3, r2
 8001036:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8001038:	2201      	movs	r2, #1
 800103a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800103e:	4808      	ldr	r0, [pc, #32]	@ (8001060 <lcd_readreg+0x80>)
 8001040:	f003 fdb2 	bl	8004ba8 <HAL_GPIO_WritePin>
	if (result > 0) {
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	dd03      	ble.n	8001052 <lcd_readreg+0x72>
		result = -1;
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	e001      	b.n	8001056 <lcd_readreg+0x76>
	} else {
		result = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
	}
	return result;
 8001056:	68fb      	ldr	r3, [r7, #12]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	58021000 	.word	0x58021000
 8001064:	24000f94 	.word	0x24000f94

08001068 <lcd_senddata>:

static int32_t lcd_senddata(uint8_t *pdata, uint32_t length) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 8001072:	2200      	movs	r2, #0
 8001074:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001078:	480f      	ldr	r0, [pc, #60]	@ (80010b8 <lcd_senddata+0x50>)
 800107a:	f003 fd95 	bl	8004ba8 <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result = HAL_SPI_Transmit(SPI_Drv, pdata, length, 100);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	b29a      	uxth	r2, r3
 8001082:	2364      	movs	r3, #100	@ 0x64
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	480d      	ldr	r0, [pc, #52]	@ (80010bc <lcd_senddata+0x54>)
 8001088:	f00a fcae 	bl	800b9e8 <HAL_SPI_Transmit>
 800108c:	4603      	mov	r3, r0
 800108e:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8001090:	2201      	movs	r2, #1
 8001092:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001096:	4808      	ldr	r0, [pc, #32]	@ (80010b8 <lcd_senddata+0x50>)
 8001098:	f003 fd86 	bl	8004ba8 <HAL_GPIO_WritePin>
	if (result > 0) {
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	dd03      	ble.n	80010aa <lcd_senddata+0x42>
		result = -1;
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	e001      	b.n	80010ae <lcd_senddata+0x46>
	} else {
		result = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
	}
	return result;
 80010ae:	68fb      	ldr	r3, [r7, #12]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	58021000 	.word	0x58021000
 80010bc:	24000f94 	.word	0x24000f94

080010c0 <lcd_recvdata>:

static int32_t lcd_recvdata(uint8_t *pdata, uint32_t length) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 80010ca:	2200      	movs	r2, #0
 80010cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010d0:	4810      	ldr	r0, [pc, #64]	@ (8001114 <lcd_recvdata+0x54>)
 80010d2:	f003 fd69 	bl	8004ba8 <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result = HAL_SPI_Receive(SPI_Drv, pdata, length, 500);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	b29a      	uxth	r2, r3
 80010da:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	480d      	ldr	r0, [pc, #52]	@ (8001118 <lcd_recvdata+0x58>)
 80010e2:	f00a fe6f 	bl	800bdc4 <HAL_SPI_Receive>
 80010e6:	4603      	mov	r3, r0
 80010e8:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 80010ea:	2201      	movs	r2, #1
 80010ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010f0:	4808      	ldr	r0, [pc, #32]	@ (8001114 <lcd_recvdata+0x54>)
 80010f2:	f003 fd59 	bl	8004ba8 <HAL_GPIO_WritePin>
	if (result > 0) {
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	dd03      	ble.n	8001104 <lcd_recvdata+0x44>
		result = -1;
 80010fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	e001      	b.n	8001108 <lcd_recvdata+0x48>
	} else {
		result = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
	}
	return result;
 8001108:	68fb      	ldr	r3, [r7, #12]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	58021000 	.word	0x58021000
 8001118:	24000f94 	.word	0x24000f94

0800111c <Custom_LCD_Printf>:

void Custom_LCD_Printf(int x, int y, const char *text, ...) {
 800111c:	b40c      	push	{r2, r3}
 800111e:	b580      	push	{r7, lr}
 8001120:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8001124:	af02      	add	r7, sp, #8
 8001126:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800112a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800112e:	6018      	str	r0, [r3, #0]
 8001130:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001134:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8001138:	6019      	str	r1, [r3, #0]
	char txt[512] = { 0 };
 800113a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800113e:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8001142:	4618      	mov	r0, r3
 8001144:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001148:	461a      	mov	r2, r3
 800114a:	2100      	movs	r1, #0
 800114c:	f012 faf4 	bl	8013738 <memset>
	va_list args;
	va_start(args, text);
 8001150:	f507 7207 	add.w	r2, r7, #540	@ 0x21c
 8001154:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001158:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800115c:	601a      	str	r2, [r3, #0]
	vsprintf(txt, text, args);
 800115e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001162:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001166:	f107 0010 	add.w	r0, r7, #16
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	f8d7 1218 	ldr.w	r1, [r7, #536]	@ 0x218
 8001170:	f012 fad8 	bl	8013724 <vsiprintf>
	va_end(args);

	LCD_ShowString(8 * x, 16 * y, ST7735Ctx.Width, 8, 16, (uint8_t*) (txt));
 8001174:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001178:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	b29b      	uxth	r3, r3
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	b298      	uxth	r0, r3
 8001184:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001188:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	b29b      	uxth	r3, r3
 8001190:	011b      	lsls	r3, r3, #4
 8001192:	b299      	uxth	r1, r3
 8001194:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <Custom_LCD_Printf+0xa0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	b29a      	uxth	r2, r3
 800119a:	f107 0310 	add.w	r3, r7, #16
 800119e:	9301      	str	r3, [sp, #4]
 80011a0:	2310      	movs	r3, #16
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2308      	movs	r3, #8
 80011a6:	f7ff fe6b 	bl	8000e80 <LCD_ShowString>
}
 80011aa:	bf00      	nop
 80011ac:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 80011b0:	46bd      	mov	sp, r7
 80011b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011b6:	b002      	add	sp, #8
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	240005b4 	.word	0x240005b4

080011c0 <Custom_LCD_Clear>:

void Custom_LCD_Clear() {
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af02      	add	r7, sp, #8
	ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,
 80011c6:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <Custom_LCD_Clear+0x2c>)
 80011c8:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 80011ca:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <Custom_LCD_Clear+0x30>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <Custom_LCD_Clear+0x30>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2100      	movs	r1, #0
 80011d4:	9101      	str	r1, [sp, #4]
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	4613      	mov	r3, r2
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	4805      	ldr	r0, [pc, #20]	@ (80011f4 <Custom_LCD_Clear+0x34>)
 80011e0:	47a0      	blx	r4
			ST7735Ctx.Height, BLACK);
}
 80011e2:	bf00      	nop
 80011e4:	3704      	adds	r7, #4
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd90      	pop	{r4, r7, pc}
 80011ea:	bf00      	nop
 80011ec:	24000024 	.word	0x24000024
 80011f0:	240005b4 	.word	0x240005b4
 80011f4:	24000574 	.word	0x24000574

080011f8 <Set_Color>:

void Set_Color(uint32_t cnt, uint32_t index) {
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
	if (cnt == index) {
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	429a      	cmp	r2, r3
 8001208:	d108      	bne.n	800121c <Set_Color+0x24>
		POINT_COLOR = WHITE;
 800120a:	4b0b      	ldr	r3, [pc, #44]	@ (8001238 <Set_Color+0x40>)
 800120c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001210:	801a      	strh	r2, [r3, #0]
		BACK_COLOR = 0X01B4;
 8001212:	4b0a      	ldr	r3, [pc, #40]	@ (800123c <Set_Color+0x44>)
 8001214:	f44f 72da 	mov.w	r2, #436	@ 0x1b4
 8001218:	801a      	strh	r2, [r3, #0]
	} else {
		POINT_COLOR = WHITE;
		BACK_COLOR = BLACK;
	}
}
 800121a:	e006      	b.n	800122a <Set_Color+0x32>
		POINT_COLOR = WHITE;
 800121c:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <Set_Color+0x40>)
 800121e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001222:	801a      	strh	r2, [r3, #0]
		BACK_COLOR = BLACK;
 8001224:	4b05      	ldr	r3, [pc, #20]	@ (800123c <Set_Color+0x44>)
 8001226:	2200      	movs	r2, #0
 8001228:	801a      	strh	r2, [r3, #0]
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	24000020 	.word	0x24000020
 800123c:	240005b0 	.word	0x240005b0

08001240 <ST7735_RegisterBusIO>:
 * @brief  Register component IO bus
 * @param  pObj Component object pointer
 * @param  pIO  Component IO structure pointer
 * @retval Component status
 */
int32_t ST7735_RegisterBusIO(ST7735_Object_t *pObj, ST7735_IO_t *pIO) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
	int32_t ret;

	if (pObj == NULL) {
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d103      	bne.n	8001258 <ST7735_RegisterBusIO+0x18>
		ret = ST7735_ERROR;
 8001250:	f04f 33ff 	mov.w	r3, #4294967295
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	e03a      	b.n	80012ce <ST7735_RegisterBusIO+0x8e>
	} else {
		pObj->IO.Init = pIO->Init;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	601a      	str	r2, [r3, #0]
		pObj->IO.DeInit = pIO->DeInit;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	605a      	str	r2, [r3, #4]
		pObj->IO.Address = pIO->Address;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	891a      	ldrh	r2, [r3, #8]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	811a      	strh	r2, [r3, #8]
		pObj->IO.WriteReg = pIO->WriteReg;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	68da      	ldr	r2, [r3, #12]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	60da      	str	r2, [r3, #12]
		pObj->IO.ReadReg = pIO->ReadReg;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	691a      	ldr	r2, [r3, #16]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	611a      	str	r2, [r3, #16]
		pObj->IO.SendData = pIO->SendData;
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	695a      	ldr	r2, [r3, #20]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	615a      	str	r2, [r3, #20]
		pObj->IO.RecvData = pIO->RecvData;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	699a      	ldr	r2, [r3, #24]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	619a      	str	r2, [r3, #24]
		pObj->IO.GetTick = pIO->GetTick;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	69da      	ldr	r2, [r3, #28]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	61da      	str	r2, [r3, #28]

		pObj->Ctx.ReadReg = ST7735_ReadRegWrap;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a0f      	ldr	r2, [pc, #60]	@ (80012d8 <ST7735_RegisterBusIO+0x98>)
 800129c:	625a      	str	r2, [r3, #36]	@ 0x24
		pObj->Ctx.WriteReg = ST7735_WriteRegWrap;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a0e      	ldr	r2, [pc, #56]	@ (80012dc <ST7735_RegisterBusIO+0x9c>)
 80012a2:	621a      	str	r2, [r3, #32]
		pObj->Ctx.SendData = ST7735_SendDataWrap;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a0e      	ldr	r2, [pc, #56]	@ (80012e0 <ST7735_RegisterBusIO+0xa0>)
 80012a8:	629a      	str	r2, [r3, #40]	@ 0x28
		pObj->Ctx.RecvData = ST7735_RecvDataWrap;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a0d      	ldr	r2, [pc, #52]	@ (80012e4 <ST7735_RegisterBusIO+0xa4>)
 80012ae:	62da      	str	r2, [r3, #44]	@ 0x2c
		pObj->Ctx.handle = pObj;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	631a      	str	r2, [r3, #48]	@ 0x30

		if (pObj->IO.Init != NULL) {
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d004      	beq.n	80012c8 <ST7735_RegisterBusIO+0x88>
			ret = pObj->IO.Init();
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4798      	blx	r3
 80012c4:	60f8      	str	r0, [r7, #12]
 80012c6:	e002      	b.n	80012ce <ST7735_RegisterBusIO+0x8e>
		} else {
			ret = ST7735_ERROR;
 80012c8:	f04f 33ff 	mov.w	r3, #4294967295
 80012cc:	60fb      	str	r3, [r7, #12]
		}
	}

	return ret;
 80012ce:	68fb      	ldr	r3, [r7, #12]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	08002765 	.word	0x08002765
 80012dc:	0800278d 	.word	0x0800278d
 80012e0:	080027b7 	.word	0x080027b7
 80012e4:	080027db 	.word	0x080027db

080012e8 <ST7735_Init>:
 * @param  ColorCoding RGB mode
 * @param  Orientation Display orientation
 * @retval Component status
 */
int32_t ST7735_Init(ST7735_Object_t *pObj, uint32_t ColorCoding,
		ST7735_Ctx_t *pDriver) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
	uint8_t tmp;
	int32_t ret;

	if (pObj == NULL) {
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d103      	bne.n	8001302 <ST7735_Init+0x1a>
		ret = ST7735_ERROR;
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	e3a6      	b.n	8001a50 <ST7735_Init+0x768>
	} else {
		/* Out of sleep mode, 0 args, delay 120ms */
		tmp = 0x00U;
 8001302:	2300      	movs	r3, #0
 8001304:	74fb      	strb	r3, [r7, #19]
		ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f103 0020 	add.w	r0, r3, #32
 800130c:	f107 0213 	add.w	r2, r7, #19
 8001310:	2300      	movs	r3, #0
 8001312:	2101      	movs	r1, #1
 8001314:	f001 faa0 	bl	8002858 <st7735_write_reg>
 8001318:	6178      	str	r0, [r7, #20]
		(void) ST7735_IO_Delay(pObj, 120);
 800131a:	2178      	movs	r1, #120	@ 0x78
 800131c:	68f8      	ldr	r0, [r7, #12]
 800131e:	f001 fa6e 	bl	80027fe <ST7735_IO_Delay>

		tmp = 0x00U;
 8001322:	2300      	movs	r3, #0
 8001324:	74fb      	strb	r3, [r7, #19]
		ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f103 0020 	add.w	r0, r3, #32
 800132c:	f107 0213 	add.w	r2, r7, #19
 8001330:	2300      	movs	r3, #0
 8001332:	2101      	movs	r1, #1
 8001334:	f001 fa90 	bl	8002858 <st7735_write_reg>
 8001338:	6178      	str	r0, [r7, #20]
		(void) ST7735_IO_Delay(pObj, 120);
 800133a:	2178      	movs	r1, #120	@ 0x78
 800133c:	68f8      	ldr	r0, [r7, #12]
 800133e:	f001 fa5e 	bl	80027fe <ST7735_IO_Delay>

		/* Out of sleep mode, 0 args, no delay */
		tmp = 0x00U;
 8001342:	2300      	movs	r3, #0
 8001344:	74fb      	strb	r3, [r7, #19]
		ret += st7735_write_reg(&pObj->Ctx, ST7735_SLEEP_OUT, &tmp, 1);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f103 0020 	add.w	r0, r3, #32
 800134c:	f107 0213 	add.w	r2, r7, #19
 8001350:	2301      	movs	r3, #1
 8001352:	2111      	movs	r1, #17
 8001354:	f001 fa80 	bl	8002858 <st7735_write_reg>
 8001358:	4602      	mov	r2, r0
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	4413      	add	r3, r2
 800135e:	617b      	str	r3, [r7, #20]

		/* Frame rate ctrl - normal mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D)*/
		ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL1, &tmp, 0);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f103 0020 	add.w	r0, r3, #32
 8001366:	f107 0213 	add.w	r2, r7, #19
 800136a:	2300      	movs	r3, #0
 800136c:	21b1      	movs	r1, #177	@ 0xb1
 800136e:	f001 fa73 	bl	8002858 <st7735_write_reg>
 8001372:	4602      	mov	r2, r0
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	4413      	add	r3, r2
 8001378:	617b      	str	r3, [r7, #20]
		tmp = 0x01U;
 800137a:	2301      	movs	r3, #1
 800137c:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	3320      	adds	r3, #32
 8001382:	f107 0113 	add.w	r1, r7, #19
 8001386:	2201      	movs	r2, #1
 8001388:	4618      	mov	r0, r3
 800138a:	f001 fa7a 	bl	8002882 <st7735_send_data>
 800138e:	4602      	mov	r2, r0
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	4413      	add	r3, r2
 8001394:	617b      	str	r3, [r7, #20]
		tmp = 0x2CU;
 8001396:	232c      	movs	r3, #44	@ 0x2c
 8001398:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	3320      	adds	r3, #32
 800139e:	f107 0113 	add.w	r1, r7, #19
 80013a2:	2201      	movs	r2, #1
 80013a4:	4618      	mov	r0, r3
 80013a6:	f001 fa6c 	bl	8002882 <st7735_send_data>
 80013aa:	4602      	mov	r2, r0
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	4413      	add	r3, r2
 80013b0:	617b      	str	r3, [r7, #20]
		tmp = 0x2DU;
 80013b2:	232d      	movs	r3, #45	@ 0x2d
 80013b4:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	3320      	adds	r3, #32
 80013ba:	f107 0113 	add.w	r1, r7, #19
 80013be:	2201      	movs	r2, #1
 80013c0:	4618      	mov	r0, r3
 80013c2:	f001 fa5e 	bl	8002882 <st7735_send_data>
 80013c6:	4602      	mov	r2, r0
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	4413      	add	r3, r2
 80013cc:	617b      	str	r3, [r7, #20]

		/* Frame rate control - idle mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D) */
		tmp = 0x01U;
 80013ce:	2301      	movs	r3, #1
 80013d0:	74fb      	strb	r3, [r7, #19]
		ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL2, &tmp, 1);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f103 0020 	add.w	r0, r3, #32
 80013d8:	f107 0213 	add.w	r2, r7, #19
 80013dc:	2301      	movs	r3, #1
 80013de:	21b2      	movs	r1, #178	@ 0xb2
 80013e0:	f001 fa3a 	bl	8002858 <st7735_write_reg>
 80013e4:	4602      	mov	r2, r0
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	4413      	add	r3, r2
 80013ea:	617b      	str	r3, [r7, #20]
		tmp = 0x2CU;
 80013ec:	232c      	movs	r3, #44	@ 0x2c
 80013ee:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3320      	adds	r3, #32
 80013f4:	f107 0113 	add.w	r1, r7, #19
 80013f8:	2201      	movs	r2, #1
 80013fa:	4618      	mov	r0, r3
 80013fc:	f001 fa41 	bl	8002882 <st7735_send_data>
 8001400:	4602      	mov	r2, r0
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	4413      	add	r3, r2
 8001406:	617b      	str	r3, [r7, #20]
		tmp = 0x2DU;
 8001408:	232d      	movs	r3, #45	@ 0x2d
 800140a:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	3320      	adds	r3, #32
 8001410:	f107 0113 	add.w	r1, r7, #19
 8001414:	2201      	movs	r2, #1
 8001416:	4618      	mov	r0, r3
 8001418:	f001 fa33 	bl	8002882 <st7735_send_data>
 800141c:	4602      	mov	r2, r0
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	4413      	add	r3, r2
 8001422:	617b      	str	r3, [r7, #20]

		/* Frame rate ctrl - partial mode, 6 args: Dot inversion mode, Line inversion mode */
		tmp = 0x01U;
 8001424:	2301      	movs	r3, #1
 8001426:	74fb      	strb	r3, [r7, #19]
		ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL3, &tmp, 1);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f103 0020 	add.w	r0, r3, #32
 800142e:	f107 0213 	add.w	r2, r7, #19
 8001432:	2301      	movs	r3, #1
 8001434:	21b3      	movs	r1, #179	@ 0xb3
 8001436:	f001 fa0f 	bl	8002858 <st7735_write_reg>
 800143a:	4602      	mov	r2, r0
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	4413      	add	r3, r2
 8001440:	617b      	str	r3, [r7, #20]
		tmp = 0x2CU;
 8001442:	232c      	movs	r3, #44	@ 0x2c
 8001444:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	3320      	adds	r3, #32
 800144a:	f107 0113 	add.w	r1, r7, #19
 800144e:	2201      	movs	r2, #1
 8001450:	4618      	mov	r0, r3
 8001452:	f001 fa16 	bl	8002882 <st7735_send_data>
 8001456:	4602      	mov	r2, r0
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	4413      	add	r3, r2
 800145c:	617b      	str	r3, [r7, #20]
		tmp = 0x2DU;
 800145e:	232d      	movs	r3, #45	@ 0x2d
 8001460:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	3320      	adds	r3, #32
 8001466:	f107 0113 	add.w	r1, r7, #19
 800146a:	2201      	movs	r2, #1
 800146c:	4618      	mov	r0, r3
 800146e:	f001 fa08 	bl	8002882 <st7735_send_data>
 8001472:	4602      	mov	r2, r0
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	4413      	add	r3, r2
 8001478:	617b      	str	r3, [r7, #20]
		tmp = 0x01U;
 800147a:	2301      	movs	r3, #1
 800147c:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	3320      	adds	r3, #32
 8001482:	f107 0113 	add.w	r1, r7, #19
 8001486:	2201      	movs	r2, #1
 8001488:	4618      	mov	r0, r3
 800148a:	f001 f9fa 	bl	8002882 <st7735_send_data>
 800148e:	4602      	mov	r2, r0
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	4413      	add	r3, r2
 8001494:	617b      	str	r3, [r7, #20]
		tmp = 0x2CU;
 8001496:	232c      	movs	r3, #44	@ 0x2c
 8001498:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	3320      	adds	r3, #32
 800149e:	f107 0113 	add.w	r1, r7, #19
 80014a2:	2201      	movs	r2, #1
 80014a4:	4618      	mov	r0, r3
 80014a6:	f001 f9ec 	bl	8002882 <st7735_send_data>
 80014aa:	4602      	mov	r2, r0
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	4413      	add	r3, r2
 80014b0:	617b      	str	r3, [r7, #20]
		tmp = 0x2DU;
 80014b2:	232d      	movs	r3, #45	@ 0x2d
 80014b4:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	3320      	adds	r3, #32
 80014ba:	f107 0113 	add.w	r1, r7, #19
 80014be:	2201      	movs	r2, #1
 80014c0:	4618      	mov	r0, r3
 80014c2:	f001 f9de 	bl	8002882 <st7735_send_data>
 80014c6:	4602      	mov	r2, r0
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	4413      	add	r3, r2
 80014cc:	617b      	str	r3, [r7, #20]

		/* Display inversion ctrl, 1 arg, no delay: No inversion */
		tmp = 0x07U;
 80014ce:	2307      	movs	r3, #7
 80014d0:	74fb      	strb	r3, [r7, #19]
		ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_INVERSION_CTRL, &tmp,
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f103 0020 	add.w	r0, r3, #32
 80014d8:	f107 0213 	add.w	r2, r7, #19
 80014dc:	2301      	movs	r3, #1
 80014de:	21b4      	movs	r1, #180	@ 0xb4
 80014e0:	f001 f9ba 	bl	8002858 <st7735_write_reg>
 80014e4:	4602      	mov	r2, r0
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	4413      	add	r3, r2
 80014ea:	617b      	str	r3, [r7, #20]
				1);

		/* Power control, 3 args, no delay: -4.6V , AUTO mode */
		tmp = 0xA2U;
 80014ec:	23a2      	movs	r3, #162	@ 0xa2
 80014ee:	74fb      	strb	r3, [r7, #19]
		ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL1, &tmp, 1);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f103 0020 	add.w	r0, r3, #32
 80014f6:	f107 0213 	add.w	r2, r7, #19
 80014fa:	2301      	movs	r3, #1
 80014fc:	21c0      	movs	r1, #192	@ 0xc0
 80014fe:	f001 f9ab 	bl	8002858 <st7735_write_reg>
 8001502:	4602      	mov	r2, r0
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	4413      	add	r3, r2
 8001508:	617b      	str	r3, [r7, #20]
		tmp = 0x02U;
 800150a:	2302      	movs	r3, #2
 800150c:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	3320      	adds	r3, #32
 8001512:	f107 0113 	add.w	r1, r7, #19
 8001516:	2201      	movs	r2, #1
 8001518:	4618      	mov	r0, r3
 800151a:	f001 f9b2 	bl	8002882 <st7735_send_data>
 800151e:	4602      	mov	r2, r0
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	4413      	add	r3, r2
 8001524:	617b      	str	r3, [r7, #20]
		tmp = 0x84U;
 8001526:	2384      	movs	r3, #132	@ 0x84
 8001528:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	3320      	adds	r3, #32
 800152e:	f107 0113 	add.w	r1, r7, #19
 8001532:	2201      	movs	r2, #1
 8001534:	4618      	mov	r0, r3
 8001536:	f001 f9a4 	bl	8002882 <st7735_send_data>
 800153a:	4602      	mov	r2, r0
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	4413      	add	r3, r2
 8001540:	617b      	str	r3, [r7, #20]

		/* Power control, 1 arg, no delay: VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD */
		tmp = 0xC5U;
 8001542:	23c5      	movs	r3, #197	@ 0xc5
 8001544:	74fb      	strb	r3, [r7, #19]
		ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL2, &tmp, 1);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f103 0020 	add.w	r0, r3, #32
 800154c:	f107 0213 	add.w	r2, r7, #19
 8001550:	2301      	movs	r3, #1
 8001552:	21c1      	movs	r1, #193	@ 0xc1
 8001554:	f001 f980 	bl	8002858 <st7735_write_reg>
 8001558:	4602      	mov	r2, r0
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	4413      	add	r3, r2
 800155e:	617b      	str	r3, [r7, #20]

		/* Power control, 2 args, no delay: Opamp current small, Boost frequency */
		tmp = 0x0AU;
 8001560:	230a      	movs	r3, #10
 8001562:	74fb      	strb	r3, [r7, #19]
		ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL3, &tmp, 1);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f103 0020 	add.w	r0, r3, #32
 800156a:	f107 0213 	add.w	r2, r7, #19
 800156e:	2301      	movs	r3, #1
 8001570:	21c2      	movs	r1, #194	@ 0xc2
 8001572:	f001 f971 	bl	8002858 <st7735_write_reg>
 8001576:	4602      	mov	r2, r0
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	4413      	add	r3, r2
 800157c:	617b      	str	r3, [r7, #20]
		tmp = 0x00U;
 800157e:	2300      	movs	r3, #0
 8001580:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	3320      	adds	r3, #32
 8001586:	f107 0113 	add.w	r1, r7, #19
 800158a:	2201      	movs	r2, #1
 800158c:	4618      	mov	r0, r3
 800158e:	f001 f978 	bl	8002882 <st7735_send_data>
 8001592:	4602      	mov	r2, r0
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	4413      	add	r3, r2
 8001598:	617b      	str	r3, [r7, #20]

		/* Power control, 2 args, no delay: BCLK/2, Opamp current small & Medium low */
		tmp = 0x8AU;
 800159a:	238a      	movs	r3, #138	@ 0x8a
 800159c:	74fb      	strb	r3, [r7, #19]
		ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL4, &tmp, 1);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f103 0020 	add.w	r0, r3, #32
 80015a4:	f107 0213 	add.w	r2, r7, #19
 80015a8:	2301      	movs	r3, #1
 80015aa:	21c3      	movs	r1, #195	@ 0xc3
 80015ac:	f001 f954 	bl	8002858 <st7735_write_reg>
 80015b0:	4602      	mov	r2, r0
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	4413      	add	r3, r2
 80015b6:	617b      	str	r3, [r7, #20]
		tmp = 0x2AU;
 80015b8:	232a      	movs	r3, #42	@ 0x2a
 80015ba:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	3320      	adds	r3, #32
 80015c0:	f107 0113 	add.w	r1, r7, #19
 80015c4:	2201      	movs	r2, #1
 80015c6:	4618      	mov	r0, r3
 80015c8:	f001 f95b 	bl	8002882 <st7735_send_data>
 80015cc:	4602      	mov	r2, r0
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	4413      	add	r3, r2
 80015d2:	617b      	str	r3, [r7, #20]

		/* Power control, 2 args, no delay */
		tmp = 0x8AU;
 80015d4:	238a      	movs	r3, #138	@ 0x8a
 80015d6:	74fb      	strb	r3, [r7, #19]
		ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL5, &tmp, 1);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f103 0020 	add.w	r0, r3, #32
 80015de:	f107 0213 	add.w	r2, r7, #19
 80015e2:	2301      	movs	r3, #1
 80015e4:	21c4      	movs	r1, #196	@ 0xc4
 80015e6:	f001 f937 	bl	8002858 <st7735_write_reg>
 80015ea:	4602      	mov	r2, r0
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	4413      	add	r3, r2
 80015f0:	617b      	str	r3, [r7, #20]
		tmp = 0xEEU;
 80015f2:	23ee      	movs	r3, #238	@ 0xee
 80015f4:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	3320      	adds	r3, #32
 80015fa:	f107 0113 	add.w	r1, r7, #19
 80015fe:	2201      	movs	r2, #1
 8001600:	4618      	mov	r0, r3
 8001602:	f001 f93e 	bl	8002882 <st7735_send_data>
 8001606:	4602      	mov	r2, r0
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	4413      	add	r3, r2
 800160c:	617b      	str	r3, [r7, #20]

		/* Power control, 1 arg, no delay */
		tmp = 0x0EU;
 800160e:	230e      	movs	r3, #14
 8001610:	74fb      	strb	r3, [r7, #19]
		ret += st7735_write_reg(&pObj->Ctx, ST7735_VCOMH_VCOML_CTRL1, &tmp, 1);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f103 0020 	add.w	r0, r3, #32
 8001618:	f107 0213 	add.w	r2, r7, #19
 800161c:	2301      	movs	r3, #1
 800161e:	21c5      	movs	r1, #197	@ 0xc5
 8001620:	f001 f91a 	bl	8002858 <st7735_write_reg>
 8001624:	4602      	mov	r2, r0
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	4413      	add	r3, r2
 800162a:	617b      	str	r3, [r7, #20]

		/* choose panel*/
		if (pDriver->Panel == HannStar_Panel) {
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	7b1b      	ldrb	r3, [r3, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d10d      	bne.n	8001650 <ST7735_Init+0x368>
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_ON,
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f103 0020 	add.w	r0, r3, #32
 800163a:	f107 0213 	add.w	r2, r7, #19
 800163e:	2300      	movs	r3, #0
 8001640:	2121      	movs	r1, #33	@ 0x21
 8001642:	f001 f909 	bl	8002858 <st7735_write_reg>
 8001646:	4602      	mov	r2, r0
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	4413      	add	r3, r2
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	e00c      	b.n	800166a <ST7735_Init+0x382>
					&tmp, 0);
		} else {
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_OFF,
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f103 0020 	add.w	r0, r3, #32
 8001656:	f107 0213 	add.w	r2, r7, #19
 800165a:	2300      	movs	r3, #0
 800165c:	2120      	movs	r1, #32
 800165e:	f001 f8fb 	bl	8002858 <st7735_write_reg>
 8001662:	4602      	mov	r2, r0
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	4413      	add	r3, r2
 8001668:	617b      	str	r3, [r7, #20]
					&tmp, 0);
		}
		/* Set color mode, 1 arg, no delay */
		ret += st7735_write_reg(&pObj->Ctx, ST7735_COLOR_MODE,
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f103 0020 	add.w	r0, r3, #32
 8001670:	f107 0208 	add.w	r2, r7, #8
 8001674:	2301      	movs	r3, #1
 8001676:	213a      	movs	r1, #58	@ 0x3a
 8001678:	f001 f8ee 	bl	8002858 <st7735_write_reg>
 800167c:	4602      	mov	r2, r0
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	4413      	add	r3, r2
 8001682:	617b      	str	r3, [r7, #20]
				(uint8_t*) &ColorCoding, 1);

		/* Magical unicorn dust, 16 args, no delay */
		tmp = 0x02U;
 8001684:	2302      	movs	r3, #2
 8001686:	74fb      	strb	r3, [r7, #19]
		ret += st7735_write_reg(&pObj->Ctx, ST7735_PV_GAMMA_CTRL, &tmp, 1);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f103 0020 	add.w	r0, r3, #32
 800168e:	f107 0213 	add.w	r2, r7, #19
 8001692:	2301      	movs	r3, #1
 8001694:	21e0      	movs	r1, #224	@ 0xe0
 8001696:	f001 f8df 	bl	8002858 <st7735_write_reg>
 800169a:	4602      	mov	r2, r0
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	4413      	add	r3, r2
 80016a0:	617b      	str	r3, [r7, #20]
		tmp = 0x1CU;
 80016a2:	231c      	movs	r3, #28
 80016a4:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	3320      	adds	r3, #32
 80016aa:	f107 0113 	add.w	r1, r7, #19
 80016ae:	2201      	movs	r2, #1
 80016b0:	4618      	mov	r0, r3
 80016b2:	f001 f8e6 	bl	8002882 <st7735_send_data>
 80016b6:	4602      	mov	r2, r0
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	4413      	add	r3, r2
 80016bc:	617b      	str	r3, [r7, #20]
		tmp = 0x07U;
 80016be:	2307      	movs	r3, #7
 80016c0:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	3320      	adds	r3, #32
 80016c6:	f107 0113 	add.w	r1, r7, #19
 80016ca:	2201      	movs	r2, #1
 80016cc:	4618      	mov	r0, r3
 80016ce:	f001 f8d8 	bl	8002882 <st7735_send_data>
 80016d2:	4602      	mov	r2, r0
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	4413      	add	r3, r2
 80016d8:	617b      	str	r3, [r7, #20]
		tmp = 0x12U;
 80016da:	2312      	movs	r3, #18
 80016dc:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	3320      	adds	r3, #32
 80016e2:	f107 0113 	add.w	r1, r7, #19
 80016e6:	2201      	movs	r2, #1
 80016e8:	4618      	mov	r0, r3
 80016ea:	f001 f8ca 	bl	8002882 <st7735_send_data>
 80016ee:	4602      	mov	r2, r0
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	4413      	add	r3, r2
 80016f4:	617b      	str	r3, [r7, #20]
		tmp = 0x37U;
 80016f6:	2337      	movs	r3, #55	@ 0x37
 80016f8:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	3320      	adds	r3, #32
 80016fe:	f107 0113 	add.w	r1, r7, #19
 8001702:	2201      	movs	r2, #1
 8001704:	4618      	mov	r0, r3
 8001706:	f001 f8bc 	bl	8002882 <st7735_send_data>
 800170a:	4602      	mov	r2, r0
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	4413      	add	r3, r2
 8001710:	617b      	str	r3, [r7, #20]
		tmp = 0x32U;
 8001712:	2332      	movs	r3, #50	@ 0x32
 8001714:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	3320      	adds	r3, #32
 800171a:	f107 0113 	add.w	r1, r7, #19
 800171e:	2201      	movs	r2, #1
 8001720:	4618      	mov	r0, r3
 8001722:	f001 f8ae 	bl	8002882 <st7735_send_data>
 8001726:	4602      	mov	r2, r0
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	4413      	add	r3, r2
 800172c:	617b      	str	r3, [r7, #20]
		tmp = 0x29U;
 800172e:	2329      	movs	r3, #41	@ 0x29
 8001730:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	3320      	adds	r3, #32
 8001736:	f107 0113 	add.w	r1, r7, #19
 800173a:	2201      	movs	r2, #1
 800173c:	4618      	mov	r0, r3
 800173e:	f001 f8a0 	bl	8002882 <st7735_send_data>
 8001742:	4602      	mov	r2, r0
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	4413      	add	r3, r2
 8001748:	617b      	str	r3, [r7, #20]
		tmp = 0x2DU;
 800174a:	232d      	movs	r3, #45	@ 0x2d
 800174c:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	3320      	adds	r3, #32
 8001752:	f107 0113 	add.w	r1, r7, #19
 8001756:	2201      	movs	r2, #1
 8001758:	4618      	mov	r0, r3
 800175a:	f001 f892 	bl	8002882 <st7735_send_data>
 800175e:	4602      	mov	r2, r0
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	4413      	add	r3, r2
 8001764:	617b      	str	r3, [r7, #20]
		tmp = 0x29U;
 8001766:	2329      	movs	r3, #41	@ 0x29
 8001768:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	3320      	adds	r3, #32
 800176e:	f107 0113 	add.w	r1, r7, #19
 8001772:	2201      	movs	r2, #1
 8001774:	4618      	mov	r0, r3
 8001776:	f001 f884 	bl	8002882 <st7735_send_data>
 800177a:	4602      	mov	r2, r0
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	4413      	add	r3, r2
 8001780:	617b      	str	r3, [r7, #20]
		tmp = 0x25U;
 8001782:	2325      	movs	r3, #37	@ 0x25
 8001784:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	3320      	adds	r3, #32
 800178a:	f107 0113 	add.w	r1, r7, #19
 800178e:	2201      	movs	r2, #1
 8001790:	4618      	mov	r0, r3
 8001792:	f001 f876 	bl	8002882 <st7735_send_data>
 8001796:	4602      	mov	r2, r0
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	4413      	add	r3, r2
 800179c:	617b      	str	r3, [r7, #20]
		tmp = 0x2BU;
 800179e:	232b      	movs	r3, #43	@ 0x2b
 80017a0:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	3320      	adds	r3, #32
 80017a6:	f107 0113 	add.w	r1, r7, #19
 80017aa:	2201      	movs	r2, #1
 80017ac:	4618      	mov	r0, r3
 80017ae:	f001 f868 	bl	8002882 <st7735_send_data>
 80017b2:	4602      	mov	r2, r0
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	4413      	add	r3, r2
 80017b8:	617b      	str	r3, [r7, #20]
		tmp = 0x39U;
 80017ba:	2339      	movs	r3, #57	@ 0x39
 80017bc:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	3320      	adds	r3, #32
 80017c2:	f107 0113 	add.w	r1, r7, #19
 80017c6:	2201      	movs	r2, #1
 80017c8:	4618      	mov	r0, r3
 80017ca:	f001 f85a 	bl	8002882 <st7735_send_data>
 80017ce:	4602      	mov	r2, r0
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	4413      	add	r3, r2
 80017d4:	617b      	str	r3, [r7, #20]
		tmp = 0x00U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	3320      	adds	r3, #32
 80017de:	f107 0113 	add.w	r1, r7, #19
 80017e2:	2201      	movs	r2, #1
 80017e4:	4618      	mov	r0, r3
 80017e6:	f001 f84c 	bl	8002882 <st7735_send_data>
 80017ea:	4602      	mov	r2, r0
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	4413      	add	r3, r2
 80017f0:	617b      	str	r3, [r7, #20]
		tmp = 0x01U;
 80017f2:	2301      	movs	r3, #1
 80017f4:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	3320      	adds	r3, #32
 80017fa:	f107 0113 	add.w	r1, r7, #19
 80017fe:	2201      	movs	r2, #1
 8001800:	4618      	mov	r0, r3
 8001802:	f001 f83e 	bl	8002882 <st7735_send_data>
 8001806:	4602      	mov	r2, r0
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	4413      	add	r3, r2
 800180c:	617b      	str	r3, [r7, #20]
		tmp = 0x03U;
 800180e:	2303      	movs	r3, #3
 8001810:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	3320      	adds	r3, #32
 8001816:	f107 0113 	add.w	r1, r7, #19
 800181a:	2201      	movs	r2, #1
 800181c:	4618      	mov	r0, r3
 800181e:	f001 f830 	bl	8002882 <st7735_send_data>
 8001822:	4602      	mov	r2, r0
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	4413      	add	r3, r2
 8001828:	617b      	str	r3, [r7, #20]
		tmp = 0x10U;
 800182a:	2310      	movs	r3, #16
 800182c:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	3320      	adds	r3, #32
 8001832:	f107 0113 	add.w	r1, r7, #19
 8001836:	2201      	movs	r2, #1
 8001838:	4618      	mov	r0, r3
 800183a:	f001 f822 	bl	8002882 <st7735_send_data>
 800183e:	4602      	mov	r2, r0
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	4413      	add	r3, r2
 8001844:	617b      	str	r3, [r7, #20]

		/* Sparkles and rainbows, 16 args, no delay */
		tmp = 0x03U;
 8001846:	2303      	movs	r3, #3
 8001848:	74fb      	strb	r3, [r7, #19]
		ret += st7735_write_reg(&pObj->Ctx, ST7735_NV_GAMMA_CTRL, &tmp, 1);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f103 0020 	add.w	r0, r3, #32
 8001850:	f107 0213 	add.w	r2, r7, #19
 8001854:	2301      	movs	r3, #1
 8001856:	21e1      	movs	r1, #225	@ 0xe1
 8001858:	f000 fffe 	bl	8002858 <st7735_write_reg>
 800185c:	4602      	mov	r2, r0
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	4413      	add	r3, r2
 8001862:	617b      	str	r3, [r7, #20]
		tmp = 0x1DU;
 8001864:	231d      	movs	r3, #29
 8001866:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	3320      	adds	r3, #32
 800186c:	f107 0113 	add.w	r1, r7, #19
 8001870:	2201      	movs	r2, #1
 8001872:	4618      	mov	r0, r3
 8001874:	f001 f805 	bl	8002882 <st7735_send_data>
 8001878:	4602      	mov	r2, r0
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	4413      	add	r3, r2
 800187e:	617b      	str	r3, [r7, #20]
		tmp = 0x07U;
 8001880:	2307      	movs	r3, #7
 8001882:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	3320      	adds	r3, #32
 8001888:	f107 0113 	add.w	r1, r7, #19
 800188c:	2201      	movs	r2, #1
 800188e:	4618      	mov	r0, r3
 8001890:	f000 fff7 	bl	8002882 <st7735_send_data>
 8001894:	4602      	mov	r2, r0
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	4413      	add	r3, r2
 800189a:	617b      	str	r3, [r7, #20]
		tmp = 0x06U;
 800189c:	2306      	movs	r3, #6
 800189e:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	3320      	adds	r3, #32
 80018a4:	f107 0113 	add.w	r1, r7, #19
 80018a8:	2201      	movs	r2, #1
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 ffe9 	bl	8002882 <st7735_send_data>
 80018b0:	4602      	mov	r2, r0
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	4413      	add	r3, r2
 80018b6:	617b      	str	r3, [r7, #20]
		tmp = 0x2EU;
 80018b8:	232e      	movs	r3, #46	@ 0x2e
 80018ba:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	3320      	adds	r3, #32
 80018c0:	f107 0113 	add.w	r1, r7, #19
 80018c4:	2201      	movs	r2, #1
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 ffdb 	bl	8002882 <st7735_send_data>
 80018cc:	4602      	mov	r2, r0
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	4413      	add	r3, r2
 80018d2:	617b      	str	r3, [r7, #20]
		tmp = 0x2CU;
 80018d4:	232c      	movs	r3, #44	@ 0x2c
 80018d6:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	3320      	adds	r3, #32
 80018dc:	f107 0113 	add.w	r1, r7, #19
 80018e0:	2201      	movs	r2, #1
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 ffcd 	bl	8002882 <st7735_send_data>
 80018e8:	4602      	mov	r2, r0
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	4413      	add	r3, r2
 80018ee:	617b      	str	r3, [r7, #20]
		tmp = 0x29U;
 80018f0:	2329      	movs	r3, #41	@ 0x29
 80018f2:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	3320      	adds	r3, #32
 80018f8:	f107 0113 	add.w	r1, r7, #19
 80018fc:	2201      	movs	r2, #1
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 ffbf 	bl	8002882 <st7735_send_data>
 8001904:	4602      	mov	r2, r0
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	4413      	add	r3, r2
 800190a:	617b      	str	r3, [r7, #20]
		tmp = 0x2DU;
 800190c:	232d      	movs	r3, #45	@ 0x2d
 800190e:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	3320      	adds	r3, #32
 8001914:	f107 0113 	add.w	r1, r7, #19
 8001918:	2201      	movs	r2, #1
 800191a:	4618      	mov	r0, r3
 800191c:	f000 ffb1 	bl	8002882 <st7735_send_data>
 8001920:	4602      	mov	r2, r0
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	4413      	add	r3, r2
 8001926:	617b      	str	r3, [r7, #20]
		tmp = 0x2EU;
 8001928:	232e      	movs	r3, #46	@ 0x2e
 800192a:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	3320      	adds	r3, #32
 8001930:	f107 0113 	add.w	r1, r7, #19
 8001934:	2201      	movs	r2, #1
 8001936:	4618      	mov	r0, r3
 8001938:	f000 ffa3 	bl	8002882 <st7735_send_data>
 800193c:	4602      	mov	r2, r0
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	4413      	add	r3, r2
 8001942:	617b      	str	r3, [r7, #20]
		tmp = 0x2EU;
 8001944:	232e      	movs	r3, #46	@ 0x2e
 8001946:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	3320      	adds	r3, #32
 800194c:	f107 0113 	add.w	r1, r7, #19
 8001950:	2201      	movs	r2, #1
 8001952:	4618      	mov	r0, r3
 8001954:	f000 ff95 	bl	8002882 <st7735_send_data>
 8001958:	4602      	mov	r2, r0
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	4413      	add	r3, r2
 800195e:	617b      	str	r3, [r7, #20]
		tmp = 0x37U;
 8001960:	2337      	movs	r3, #55	@ 0x37
 8001962:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	3320      	adds	r3, #32
 8001968:	f107 0113 	add.w	r1, r7, #19
 800196c:	2201      	movs	r2, #1
 800196e:	4618      	mov	r0, r3
 8001970:	f000 ff87 	bl	8002882 <st7735_send_data>
 8001974:	4602      	mov	r2, r0
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	4413      	add	r3, r2
 800197a:	617b      	str	r3, [r7, #20]
		tmp = 0x3FU;
 800197c:	233f      	movs	r3, #63	@ 0x3f
 800197e:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	3320      	adds	r3, #32
 8001984:	f107 0113 	add.w	r1, r7, #19
 8001988:	2201      	movs	r2, #1
 800198a:	4618      	mov	r0, r3
 800198c:	f000 ff79 	bl	8002882 <st7735_send_data>
 8001990:	4602      	mov	r2, r0
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	4413      	add	r3, r2
 8001996:	617b      	str	r3, [r7, #20]
		tmp = 0x00U;
 8001998:	2300      	movs	r3, #0
 800199a:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	3320      	adds	r3, #32
 80019a0:	f107 0113 	add.w	r1, r7, #19
 80019a4:	2201      	movs	r2, #1
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 ff6b 	bl	8002882 <st7735_send_data>
 80019ac:	4602      	mov	r2, r0
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	4413      	add	r3, r2
 80019b2:	617b      	str	r3, [r7, #20]
		tmp = 0x00U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	3320      	adds	r3, #32
 80019bc:	f107 0113 	add.w	r1, r7, #19
 80019c0:	2201      	movs	r2, #1
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 ff5d 	bl	8002882 <st7735_send_data>
 80019c8:	4602      	mov	r2, r0
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	4413      	add	r3, r2
 80019ce:	617b      	str	r3, [r7, #20]
		tmp = 0x02U;
 80019d0:	2302      	movs	r3, #2
 80019d2:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	3320      	adds	r3, #32
 80019d8:	f107 0113 	add.w	r1, r7, #19
 80019dc:	2201      	movs	r2, #1
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 ff4f 	bl	8002882 <st7735_send_data>
 80019e4:	4602      	mov	r2, r0
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	4413      	add	r3, r2
 80019ea:	617b      	str	r3, [r7, #20]
		tmp = 0x10U;
 80019ec:	2310      	movs	r3, #16
 80019ee:	74fb      	strb	r3, [r7, #19]
		ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	3320      	adds	r3, #32
 80019f4:	f107 0113 	add.w	r1, r7, #19
 80019f8:	2201      	movs	r2, #1
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 ff41 	bl	8002882 <st7735_send_data>
 8001a00:	4602      	mov	r2, r0
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	4413      	add	r3, r2
 8001a06:	617b      	str	r3, [r7, #20]

		/* Normal display on, no args, no delay */
		tmp = 0x00U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	74fb      	strb	r3, [r7, #19]
		ret += st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 1);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f103 0020 	add.w	r0, r3, #32
 8001a12:	f107 0213 	add.w	r2, r7, #19
 8001a16:	2301      	movs	r3, #1
 8001a18:	2113      	movs	r1, #19
 8001a1a:	f000 ff1d 	bl	8002858 <st7735_write_reg>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	4413      	add	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]

		/* Main screen turn on, no delay */
		ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 1);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f103 0020 	add.w	r0, r3, #32
 8001a2c:	f107 0213 	add.w	r2, r7, #19
 8001a30:	2301      	movs	r3, #1
 8001a32:	2129      	movs	r1, #41	@ 0x29
 8001a34:	f000 ff10 	bl	8002858 <st7735_write_reg>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	617b      	str	r3, [r7, #20]

		/* Set the display Orientation and the default display window */
		ret += ST7735_SetOrientation(pObj, pDriver);
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	f000 f944 	bl	8001cd0 <ST7735_SetOrientation>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	617b      	str	r3, [r7, #20]
	}

	if (ret != ST7735_OK) {
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d002      	beq.n	8001a5c <ST7735_Init+0x774>
		ret = ST7735_ERROR;
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5a:	617b      	str	r3, [r7, #20]
	}

	return ret;
 8001a5c:	697b      	ldr	r3, [r7, #20]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <ST7735_DeInit>:
/**
 * @brief  De-Initialize the st7735 LCD Component.
 * @param  pObj Component object
 * @retval Component status
 */
int32_t ST7735_DeInit(ST7735_Object_t *pObj) {
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
	(void) (pObj);

	return ST7735_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <ST7735_ReadID>:
 * @brief  Get the st7735 ID.
 * @param  pObj Component object
 * @param  Id Component ID
 * @retval The component status
 */
int32_t ST7735_ReadID(ST7735_Object_t *pObj, uint32_t *Id) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
	int32_t ret;
	uint8_t tmp[3];

	if (st7735_read_reg(&pObj->Ctx, ST7735_READ_ID1, &tmp[0]) != ST7735_OK) {
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3320      	adds	r3, #32
 8001a8a:	f107 0208 	add.w	r2, r7, #8
 8001a8e:	21da      	movs	r1, #218	@ 0xda
 8001a90:	4618      	mov	r0, r3
 8001a92:	f000 fece 	bl	8002832 <st7735_read_reg>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <ST7735_ReadID+0x28>
		ret = ST7735_ERROR;
 8001a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	e02d      	b.n	8001b00 <ST7735_ReadID+0x84>
	} else if (st7735_read_reg(&pObj->Ctx, ST7735_READ_ID2,
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f103 0020 	add.w	r0, r3, #32
 8001aaa:	f107 0308 	add.w	r3, r7, #8
 8001aae:	3301      	adds	r3, #1
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	21db      	movs	r1, #219	@ 0xdb
 8001ab4:	f000 febd 	bl	8002832 <st7735_read_reg>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <ST7735_ReadID+0x4a>
			&tmp[1]) != ST7735_OK) {
		ret = ST7735_ERROR;
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	e01c      	b.n	8001b00 <ST7735_ReadID+0x84>
	} else if (st7735_read_reg(&pObj->Ctx, ST7735_READ_ID3,
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f103 0020 	add.w	r0, r3, #32
 8001acc:	f107 0308 	add.w	r3, r7, #8
 8001ad0:	3302      	adds	r3, #2
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	21dc      	movs	r1, #220	@ 0xdc
 8001ad6:	f000 feac 	bl	8002832 <st7735_read_reg>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <ST7735_ReadID+0x6c>
			&tmp[2]) != ST7735_OK) {
		ret = ST7735_ERROR;
 8001ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	e00b      	b.n	8001b00 <ST7735_ReadID+0x84>
	} else {

		*Id = ((uint32_t) tmp[2]) << 0 | ((uint32_t) tmp[1]) << 8
 8001ae8:	7abb      	ldrb	r3, [r7, #10]
 8001aea:	461a      	mov	r2, r3
 8001aec:	7a7b      	ldrb	r3, [r7, #9]
 8001aee:	021b      	lsls	r3, r3, #8
 8001af0:	431a      	orrs	r2, r3
				| ((uint32_t) tmp[0]) << 16;
 8001af2:	7a3b      	ldrb	r3, [r7, #8]
 8001af4:	041b      	lsls	r3, r3, #16
 8001af6:	431a      	orrs	r2, r3
		*Id = ((uint32_t) tmp[2]) << 0 | ((uint32_t) tmp[1]) << 8
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	601a      	str	r2, [r3, #0]
		//*Id = __rbit(*Id);
		ret = ST7735_OK;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]
	}

	return ret;
 8001b00:	68fb      	ldr	r3, [r7, #12]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <ST7735_DisplayOn>:
/**
 * @brief  Enables the Display.
 * @param  pObj Component object
 * @retval The component status
 */
int32_t ST7735_DisplayOn(ST7735_Object_t *pObj) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	int32_t ret;
	uint8_t tmp = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	72fb      	strb	r3, [r7, #11]

	ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f103 0020 	add.w	r0, r3, #32
 8001b1e:	f107 020b 	add.w	r2, r7, #11
 8001b22:	2300      	movs	r3, #0
 8001b24:	2113      	movs	r1, #19
 8001b26:	f000 fe97 	bl	8002858 <st7735_write_reg>
 8001b2a:	60f8      	str	r0, [r7, #12]
	(void) ST7735_IO_Delay(pObj, 10);
 8001b2c:	210a      	movs	r1, #10
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 fe65 	bl	80027fe <ST7735_IO_Delay>
	ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 0);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f103 0020 	add.w	r0, r3, #32
 8001b3a:	f107 020b 	add.w	r2, r7, #11
 8001b3e:	2300      	movs	r3, #0
 8001b40:	2129      	movs	r1, #41	@ 0x29
 8001b42:	f000 fe89 	bl	8002858 <st7735_write_reg>
 8001b46:	4602      	mov	r2, r0
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	60fb      	str	r3, [r7, #12]
	(void) ST7735_IO_Delay(pObj, 10);
 8001b4e:	210a      	movs	r1, #10
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 fe54 	bl	80027fe <ST7735_IO_Delay>
	ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f103 0020 	add.w	r0, r3, #32
 8001b5c:	f107 020b 	add.w	r2, r7, #11
 8001b60:	2300      	movs	r3, #0
 8001b62:	2136      	movs	r1, #54	@ 0x36
 8001b64:	f000 fe78 	bl	8002858 <st7735_write_reg>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ?
 8001b70:	4b16      	ldr	r3, [pc, #88]	@ (8001bcc <ST7735_DisplayOn+0xc0>)
 8001b72:	7b1b      	ldrb	r3, [r3, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10a      	bne.n	8001b8e <ST7735_DisplayOn+0x82>
			(uint8_t) OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8001b78:	4b14      	ldr	r3, [pc, #80]	@ (8001bcc <ST7735_DisplayOn+0xc0>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	4a14      	ldr	r2, [pc, #80]	@ (8001bd0 <ST7735_DisplayOn+0xc4>)
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	4413      	add	r3, r2
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ?
 8001b86:	f043 0308 	orr.w	r3, r3, #8
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	e006      	b.n	8001b9c <ST7735_DisplayOn+0x90>
			(uint8_t) OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8001b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bcc <ST7735_DisplayOn+0xc0>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	4a0f      	ldr	r2, [pc, #60]	@ (8001bd0 <ST7735_DisplayOn+0xc4>)
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	4413      	add	r3, r2
 8001b98:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ?
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	72fb      	strb	r3, [r7, #11]
	ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3320      	adds	r3, #32
 8001ba2:	f107 010b 	add.w	r1, r7, #11
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f000 fe6a 	bl	8002882 <st7735_send_data>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]
	if (ret != ST7735_OK) {
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d002      	beq.n	8001bc2 <ST7735_DisplayOn+0xb6>
		ret = ST7735_ERROR;
 8001bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc0:	60fb      	str	r3, [r7, #12]
	}

	return ret;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	240005b4 	.word	0x240005b4
 8001bd0:	24000070 	.word	0x24000070

08001bd4 <ST7735_DisplayOff>:
/**
 * @brief  Disables the Display.
 * @param  pObj Component object
 * @retval The component status
 */
int32_t ST7735_DisplayOff(ST7735_Object_t *pObj) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	int32_t ret;
	uint8_t tmp = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	72fb      	strb	r3, [r7, #11]

	ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f103 0020 	add.w	r0, r3, #32
 8001be6:	f107 020b 	add.w	r2, r7, #11
 8001bea:	2300      	movs	r3, #0
 8001bec:	2113      	movs	r1, #19
 8001bee:	f000 fe33 	bl	8002858 <st7735_write_reg>
 8001bf2:	60f8      	str	r0, [r7, #12]
	(void) ST7735_IO_Delay(pObj, 10);
 8001bf4:	210a      	movs	r1, #10
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 fe01 	bl	80027fe <ST7735_IO_Delay>
	ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_OFF, &tmp, 0);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f103 0020 	add.w	r0, r3, #32
 8001c02:	f107 020b 	add.w	r2, r7, #11
 8001c06:	2300      	movs	r3, #0
 8001c08:	2128      	movs	r1, #40	@ 0x28
 8001c0a:	f000 fe25 	bl	8002858 <st7735_write_reg>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4413      	add	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]
	(void) ST7735_IO_Delay(pObj, 10);
 8001c16:	210a      	movs	r1, #10
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 fdf0 	bl	80027fe <ST7735_IO_Delay>
	ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f103 0020 	add.w	r0, r3, #32
 8001c24:	f107 020b 	add.w	r2, r7, #11
 8001c28:	2300      	movs	r3, #0
 8001c2a:	2136      	movs	r1, #54	@ 0x36
 8001c2c:	f000 fe14 	bl	8002858 <st7735_write_reg>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4413      	add	r3, r2
 8001c36:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ?
 8001c38:	4b16      	ldr	r3, [pc, #88]	@ (8001c94 <ST7735_DisplayOff+0xc0>)
 8001c3a:	7b1b      	ldrb	r3, [r3, #12]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d10a      	bne.n	8001c56 <ST7735_DisplayOff+0x82>
			(uint8_t) OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8001c40:	4b14      	ldr	r3, [pc, #80]	@ (8001c94 <ST7735_DisplayOff+0xc0>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	4a14      	ldr	r2, [pc, #80]	@ (8001c98 <ST7735_DisplayOff+0xc4>)
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	4413      	add	r3, r2
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ?
 8001c4e:	f043 0308 	orr.w	r3, r3, #8
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	e006      	b.n	8001c64 <ST7735_DisplayOff+0x90>
			(uint8_t) OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8001c56:	4b0f      	ldr	r3, [pc, #60]	@ (8001c94 <ST7735_DisplayOff+0xc0>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	4a0f      	ldr	r2, [pc, #60]	@ (8001c98 <ST7735_DisplayOff+0xc4>)
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	4413      	add	r3, r2
 8001c60:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ?
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	72fb      	strb	r3, [r7, #11]
	ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3320      	adds	r3, #32
 8001c6a:	f107 010b 	add.w	r1, r7, #11
 8001c6e:	2201      	movs	r2, #1
 8001c70:	4618      	mov	r0, r3
 8001c72:	f000 fe06 	bl	8002882 <st7735_send_data>
 8001c76:	4602      	mov	r2, r0
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]
	if (ret != ST7735_OK) {
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d002      	beq.n	8001c8a <ST7735_DisplayOff+0xb6>
		ret = ST7735_ERROR;
 8001c84:	f04f 33ff 	mov.w	r3, #4294967295
 8001c88:	60fb      	str	r3, [r7, #12]
	}

	return ret;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	240005b4 	.word	0x240005b4
 8001c98:	24000070 	.word	0x24000070

08001c9c <ST7735_SetBrightness>:
 * @brief  Set the display brightness.
 * @param  pObj Component object
 * @param  Brightness   display brightness to be set
 * @retval Component status
 */
int32_t ST7735_SetBrightness(ST7735_Object_t *pObj, uint32_t Brightness) {
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
	(void) (pObj);
	(void) (Brightness);

	/* Feature not supported */
	return ST7735_ERROR;
 8001ca6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <ST7735_GetBrightness>:
 * @brief  Get the display brightness.
 * @param  pObj Component object
 * @param  Brightness   display brightness to be returned
 * @retval Component status
 */
int32_t ST7735_GetBrightness(ST7735_Object_t *pObj, uint32_t *Brightness) {
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	6039      	str	r1, [r7, #0]
	(void) (pObj);
	(void) (Brightness);

	/* Feature not supported */
	return ST7735_ERROR;
 8001cc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <ST7735_SetOrientation>:
 * @param  pObj Component object
 * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_PORTRAIT_ROT180
 *                     ST7735_ORIENTATION_LANDSCAPE or ST7735_ORIENTATION_LANDSCAPE_ROT180
 * @retval The component status
 */
int32_t ST7735_SetOrientation(ST7735_Object_t *pObj, ST7735_Ctx_t *pDriver) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af02      	add	r7, sp, #8
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
	int32_t ret;
	uint8_t tmp;

	if ((pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <ST7735_SetOrientation+0x1a>
			|| (pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT_ROT180)) {
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d119      	bne.n	8001d1e <ST7735_SetOrientation+0x4e>
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	7b5b      	ldrb	r3, [r3, #13]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d106      	bne.n	8001d00 <ST7735_SetOrientation+0x30>
			ST7735Ctx.Width = ST7735_0_9_WIDTH;
 8001cf2:	4b43      	ldr	r3, [pc, #268]	@ (8001e00 <ST7735_SetOrientation+0x130>)
 8001cf4:	2250      	movs	r2, #80	@ 0x50
 8001cf6:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_HEIGHT;
 8001cf8:	4b41      	ldr	r3, [pc, #260]	@ (8001e00 <ST7735_SetOrientation+0x130>)
 8001cfa:	22a0      	movs	r2, #160	@ 0xa0
 8001cfc:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8001cfe:	e028      	b.n	8001d52 <ST7735_SetOrientation+0x82>
		} else if (pDriver->Type == ST7735_1_8_inch_screen
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	7b5b      	ldrb	r3, [r3, #13]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <ST7735_SetOrientation+0x40>
				|| pDriver->Type == ST7735_1_8a_inch_screen) {
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	7b5b      	ldrb	r3, [r3, #13]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d120      	bne.n	8001d52 <ST7735_SetOrientation+0x82>
			ST7735Ctx.Width = ST7735_1_8_WIDTH;
 8001d10:	4b3b      	ldr	r3, [pc, #236]	@ (8001e00 <ST7735_SetOrientation+0x130>)
 8001d12:	2280      	movs	r2, #128	@ 0x80
 8001d14:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_HEIGHT;
 8001d16:	4b3a      	ldr	r3, [pc, #232]	@ (8001e00 <ST7735_SetOrientation+0x130>)
 8001d18:	22a0      	movs	r2, #160	@ 0xa0
 8001d1a:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8001d1c:	e019      	b.n	8001d52 <ST7735_SetOrientation+0x82>
		}
	} else {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	7b5b      	ldrb	r3, [r3, #13]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d106      	bne.n	8001d34 <ST7735_SetOrientation+0x64>
			ST7735Ctx.Width = ST7735_0_9_HEIGHT;
 8001d26:	4b36      	ldr	r3, [pc, #216]	@ (8001e00 <ST7735_SetOrientation+0x130>)
 8001d28:	22a0      	movs	r2, #160	@ 0xa0
 8001d2a:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_WIDTH;
 8001d2c:	4b34      	ldr	r3, [pc, #208]	@ (8001e00 <ST7735_SetOrientation+0x130>)
 8001d2e:	2250      	movs	r2, #80	@ 0x50
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	e00f      	b.n	8001d54 <ST7735_SetOrientation+0x84>
		} else if (pDriver->Type == ST7735_1_8_inch_screen
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	7b5b      	ldrb	r3, [r3, #13]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <ST7735_SetOrientation+0x74>
				|| pDriver->Type == ST7735_1_8a_inch_screen) {
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	7b5b      	ldrb	r3, [r3, #13]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d107      	bne.n	8001d54 <ST7735_SetOrientation+0x84>
			ST7735Ctx.Width = ST7735_1_8_HEIGHT;
 8001d44:	4b2e      	ldr	r3, [pc, #184]	@ (8001e00 <ST7735_SetOrientation+0x130>)
 8001d46:	22a0      	movs	r2, #160	@ 0xa0
 8001d48:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_WIDTH;
 8001d4a:	4b2d      	ldr	r3, [pc, #180]	@ (8001e00 <ST7735_SetOrientation+0x130>)
 8001d4c:	2280      	movs	r2, #128	@ 0x80
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	e000      	b.n	8001d54 <ST7735_SetOrientation+0x84>
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8001d52:	bf00      	nop
		}
	}

	ST7735Ctx.Orientation = pDriver->Orientation;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	4a29      	ldr	r2, [pc, #164]	@ (8001e00 <ST7735_SetOrientation+0x130>)
 8001d5a:	6093      	str	r3, [r2, #8]
	ST7735Ctx.Panel = pDriver->Panel;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	7b1a      	ldrb	r2, [r3, #12]
 8001d60:	4b27      	ldr	r3, [pc, #156]	@ (8001e00 <ST7735_SetOrientation+0x130>)
 8001d62:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = pDriver->Type;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	7b5a      	ldrb	r2, [r3, #13]
 8001d68:	4b25      	ldr	r3, [pc, #148]	@ (8001e00 <ST7735_SetOrientation+0x130>)
 8001d6a:	735a      	strb	r2, [r3, #13]

	ret = ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width,
 8001d6c:	4b24      	ldr	r3, [pc, #144]	@ (8001e00 <ST7735_SetOrientation+0x130>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4b23      	ldr	r3, [pc, #140]	@ (8001e00 <ST7735_SetOrientation+0x130>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	4613      	mov	r3, r2
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 fbed 	bl	800255c <ST7735_SetDisplayWindow>
 8001d82:	60f8      	str	r0, [r7, #12]
			ST7735Ctx.Height);
	uint8_t madctl_value = 0x60; // 가로 180도 회전에 대한 예상 값, 데이터시트 확인 필요
 8001d84:	2360      	movs	r3, #96	@ 0x60
 8001d86:	72bb      	strb	r3, [r7, #10]
	ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &madctl_value, 1);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f103 0020 	add.w	r0, r3, #32
 8001d8e:	f107 020a 	add.w	r2, r7, #10
 8001d92:	2301      	movs	r3, #1
 8001d94:	2136      	movs	r1, #54	@ 0x36
 8001d96:	f000 fd5f 	bl	8002858 <st7735_write_reg>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4413      	add	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]

	tmp = ST7735Ctx.Panel == HannStar_Panel ?
 8001da2:	4b17      	ldr	r3, [pc, #92]	@ (8001e00 <ST7735_SetOrientation+0x130>)
 8001da4:	7b1b      	ldrb	r3, [r3, #12]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10a      	bne.n	8001dc0 <ST7735_SetOrientation+0xf0>
			(uint8_t) OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8001daa:	4b15      	ldr	r3, [pc, #84]	@ (8001e00 <ST7735_SetOrientation+0x130>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	4a15      	ldr	r2, [pc, #84]	@ (8001e04 <ST7735_SetOrientation+0x134>)
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4413      	add	r3, r2
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ?
 8001db8:	f043 0308 	orr.w	r3, r3, #8
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	e006      	b.n	8001dce <ST7735_SetOrientation+0xfe>
			(uint8_t) OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8001dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e00 <ST7735_SetOrientation+0x130>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	4a0f      	ldr	r2, [pc, #60]	@ (8001e04 <ST7735_SetOrientation+0x134>)
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4413      	add	r3, r2
 8001dca:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ?
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	72fb      	strb	r3, [r7, #11]
	ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f103 0020 	add.w	r0, r3, #32
 8001dd6:	f107 020b 	add.w	r2, r7, #11
 8001dda:	2301      	movs	r3, #1
 8001ddc:	2136      	movs	r1, #54	@ 0x36
 8001dde:	f000 fd3b 	bl	8002858 <st7735_write_reg>
 8001de2:	4602      	mov	r2, r0
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4413      	add	r3, r2
 8001de8:	60fb      	str	r3, [r7, #12]

	if (ret != ST7735_OK) {
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d002      	beq.n	8001df6 <ST7735_SetOrientation+0x126>
		ret = ST7735_ERROR;
 8001df0:	f04f 33ff 	mov.w	r3, #4294967295
 8001df4:	60fb      	str	r3, [r7, #12]
	}

	return ret;
 8001df6:	68fb      	ldr	r3, [r7, #12]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	240005b4 	.word	0x240005b4
 8001e04:	24000070 	.word	0x24000070

08001e08 <ST7735_GetOrientation>:
 * @param  pObj Component object
 * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_LANDSCAPE
 *                      or ST7735_ORIENTATION_LANDSCAPE_ROT180
 * @retval The component status
 */
int32_t ST7735_GetOrientation(ST7735_Object_t *pObj, uint32_t *Orientation) {
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]

	*Orientation = ST7735Ctx.Orientation;
 8001e12:	4b05      	ldr	r3, [pc, #20]	@ (8001e28 <ST7735_GetOrientation+0x20>)
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	601a      	str	r2, [r3, #0]

	return ST7735_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	240005b4 	.word	0x240005b4

08001e2c <ST7735_SetCursor>:
 * @param  pObj Component object
 * @param  Xpos specifies the X position.
 * @param  Ypos specifies the Y position.
 * @retval The component status
 */
int32_t ST7735_SetCursor(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos) {
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
	int32_t ret;
	uint8_t tmp;

	/* Cursor calibration */
	if (ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 8001e38:	4b59      	ldr	r3, [pc, #356]	@ (8001fa0 <ST7735_SetCursor+0x174>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d821      	bhi.n	8001e84 <ST7735_SetCursor+0x58>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8001e40:	4b57      	ldr	r3, [pc, #348]	@ (8001fa0 <ST7735_SetCursor+0x174>)
 8001e42:	7b5b      	ldrb	r3, [r3, #13]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d10e      	bne.n	8001e66 <ST7735_SetCursor+0x3a>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 8001e48:	4b55      	ldr	r3, [pc, #340]	@ (8001fa0 <ST7735_SetCursor+0x174>)
 8001e4a:	7b1b      	ldrb	r3, [r3, #12]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d106      	bne.n	8001e5e <ST7735_SetCursor+0x32>
				Xpos += 26;
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	331a      	adds	r3, #26
 8001e54:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	e033      	b.n	8001ec6 <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 24;
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	3318      	adds	r3, #24
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	e02f      	b.n	8001ec6 <ST7735_SetCursor+0x9a>
				Ypos += 0;
			}
		} else if (ST7735Ctx.Type == ST7735_1_8a_inch_screen) {
 8001e66:	4b4e      	ldr	r3, [pc, #312]	@ (8001fa0 <ST7735_SetCursor+0x174>)
 8001e68:	7b5b      	ldrb	r3, [r3, #13]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d12b      	bne.n	8001ec6 <ST7735_SetCursor+0x9a>
			if (ST7735Ctx.Panel == BOE_Panel) {
 8001e6e:	4b4c      	ldr	r3, [pc, #304]	@ (8001fa0 <ST7735_SetCursor+0x174>)
 8001e70:	7b1b      	ldrb	r3, [r3, #12]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d127      	bne.n	8001ec6 <ST7735_SetCursor+0x9a>
				Xpos += 2;
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	3302      	adds	r3, #2
 8001e7a:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	607b      	str	r3, [r7, #4]
 8001e82:	e020      	b.n	8001ec6 <ST7735_SetCursor+0x9a>
			}
		}
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 8001e84:	4b46      	ldr	r3, [pc, #280]	@ (8001fa0 <ST7735_SetCursor+0x174>)
 8001e86:	7b5b      	ldrb	r3, [r3, #13]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d10e      	bne.n	8001eaa <ST7735_SetCursor+0x7e>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 8001e8c:	4b44      	ldr	r3, [pc, #272]	@ (8001fa0 <ST7735_SetCursor+0x174>)
 8001e8e:	7b1b      	ldrb	r3, [r3, #12]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d106      	bne.n	8001ea2 <ST7735_SetCursor+0x76>
				Xpos += 1;
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	3301      	adds	r3, #1
 8001e98:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	331a      	adds	r3, #26
 8001e9e:	607b      	str	r3, [r7, #4]
 8001ea0:	e011      	b.n	8001ec6 <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 0;
				Ypos += 24;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3318      	adds	r3, #24
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	e00d      	b.n	8001ec6 <ST7735_SetCursor+0x9a>
			}
		} else if (ST7735Ctx.Type == ST7735_1_8a_inch_screen) {
 8001eaa:	4b3d      	ldr	r3, [pc, #244]	@ (8001fa0 <ST7735_SetCursor+0x174>)
 8001eac:	7b5b      	ldrb	r3, [r3, #13]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d109      	bne.n	8001ec6 <ST7735_SetCursor+0x9a>
			if (ST7735Ctx.Panel == BOE_Panel) {
 8001eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8001fa0 <ST7735_SetCursor+0x174>)
 8001eb4:	7b1b      	ldrb	r3, [r3, #12]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d105      	bne.n	8001ec6 <ST7735_SetCursor+0x9a>
				Xpos += 1;
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	607b      	str	r3, [r7, #4]
			}
		}
	}

	ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f103 0020 	add.w	r0, r3, #32
 8001ecc:	f107 0213 	add.w	r2, r7, #19
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	212a      	movs	r1, #42	@ 0x2a
 8001ed4:	f000 fcc0 	bl	8002858 <st7735_write_reg>
 8001ed8:	6178      	str	r0, [r7, #20]
	tmp = (uint8_t) (Xpos >> 8U);
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	0a1b      	lsrs	r3, r3, #8
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	74fb      	strb	r3, [r7, #19]
	ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	3320      	adds	r3, #32
 8001ee6:	f107 0113 	add.w	r1, r7, #19
 8001eea:	2201      	movs	r2, #1
 8001eec:	4618      	mov	r0, r3
 8001eee:	f000 fcc8 	bl	8002882 <st7735_send_data>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	617b      	str	r3, [r7, #20]
	tmp = (uint8_t) (Xpos & 0xFFU);
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	74fb      	strb	r3, [r7, #19]
	ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	3320      	adds	r3, #32
 8001f04:	f107 0113 	add.w	r1, r7, #19
 8001f08:	2201      	movs	r2, #1
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 fcb9 	bl	8002882 <st7735_send_data>
 8001f10:	4602      	mov	r2, r0
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	4413      	add	r3, r2
 8001f16:	617b      	str	r3, [r7, #20]

	ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f103 0020 	add.w	r0, r3, #32
 8001f1e:	f107 0213 	add.w	r2, r7, #19
 8001f22:	2300      	movs	r3, #0
 8001f24:	212b      	movs	r1, #43	@ 0x2b
 8001f26:	f000 fc97 	bl	8002858 <st7735_write_reg>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	4413      	add	r3, r2
 8001f30:	617b      	str	r3, [r7, #20]
	tmp = (uint8_t) (Ypos >> 8U);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	0a1b      	lsrs	r3, r3, #8
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	74fb      	strb	r3, [r7, #19]
	ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	3320      	adds	r3, #32
 8001f3e:	f107 0113 	add.w	r1, r7, #19
 8001f42:	2201      	movs	r2, #1
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 fc9c 	bl	8002882 <st7735_send_data>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	4413      	add	r3, r2
 8001f50:	617b      	str	r3, [r7, #20]
	tmp = (uint8_t) (Ypos & 0xFFU);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	74fb      	strb	r3, [r7, #19]
	ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	3320      	adds	r3, #32
 8001f5c:	f107 0113 	add.w	r1, r7, #19
 8001f60:	2201      	movs	r2, #1
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 fc8d 	bl	8002882 <st7735_send_data>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	617b      	str	r3, [r7, #20]
	ret += st7735_write_reg(&pObj->Ctx, ST7735_WRITE_RAM, &tmp, 0);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f103 0020 	add.w	r0, r3, #32
 8001f76:	f107 0213 	add.w	r2, r7, #19
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	212c      	movs	r1, #44	@ 0x2c
 8001f7e:	f000 fc6b 	bl	8002858 <st7735_write_reg>
 8001f82:	4602      	mov	r2, r0
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	4413      	add	r3, r2
 8001f88:	617b      	str	r3, [r7, #20]

	if (ret != ST7735_OK) {
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <ST7735_SetCursor+0x16a>
		ret = ST7735_ERROR;
 8001f90:	f04f 33ff 	mov.w	r3, #4294967295
 8001f94:	617b      	str	r3, [r7, #20]
	}

	return ret;
 8001f96:	697b      	ldr	r3, [r7, #20]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	240005b4 	.word	0x240005b4

08001fa4 <ST7735_DrawBitmap>:
 * @param  Ypos Bmp Y position in the LCD
 * @param  pBmp Bmp picture address.
 * @retval The component status
 */
int32_t ST7735_DrawBitmap(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos,
		uint8_t *pBmp) {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b090      	sub	sp, #64	@ 0x40
 8001fa8:	af02      	add	r7, sp, #8
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	603b      	str	r3, [r7, #0]
	int32_t ret = ST7735_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t index, size, width, height, y_pos;
	uint8_t pixel_val[2], tmp;
	uint8_t *pbmp;
	uint32_t counter = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Get bitmap data address offset */
	index = (uint32_t) pBmp[10] + ((uint32_t) pBmp[11] << 8)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	330a      	adds	r3, #10
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	330b      	adds	r3, #11
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	021b      	lsls	r3, r3, #8
 8001fca:	441a      	add	r2, r3
			+ ((uint32_t) pBmp[12] << 16) + ((uint32_t) pBmp[13] << 24);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	330c      	adds	r3, #12
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	041b      	lsls	r3, r3, #16
 8001fd4:	441a      	add	r2, r3
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	330d      	adds	r3, #13
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	061b      	lsls	r3, r3, #24
	index = (uint32_t) pBmp[10] + ((uint32_t) pBmp[11] << 8)
 8001fde:	4413      	add	r3, r2
 8001fe0:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Read bitmap width */
	width = (uint32_t) pBmp[18] + ((uint32_t) pBmp[19] << 8)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	3312      	adds	r3, #18
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	3313      	adds	r3, #19
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	021b      	lsls	r3, r3, #8
 8001ff2:	441a      	add	r2, r3
			+ ((uint32_t) pBmp[20] << 16) + ((uint32_t) pBmp[21] << 24);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	3314      	adds	r3, #20
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	041b      	lsls	r3, r3, #16
 8001ffc:	441a      	add	r2, r3
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	3315      	adds	r3, #21
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	061b      	lsls	r3, r3, #24
	width = (uint32_t) pBmp[18] + ((uint32_t) pBmp[19] << 8)
 8002006:	4413      	add	r3, r2
 8002008:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Read bitmap height */
	height = (uint32_t) pBmp[22] + ((uint32_t) pBmp[23] << 8)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	3316      	adds	r3, #22
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	461a      	mov	r2, r3
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	3317      	adds	r3, #23
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	021b      	lsls	r3, r3, #8
 800201a:	441a      	add	r2, r3
			+ ((uint32_t) pBmp[24] << 16) + ((uint32_t) pBmp[25] << 24);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	3318      	adds	r3, #24
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	041b      	lsls	r3, r3, #16
 8002024:	441a      	add	r2, r3
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	3319      	adds	r3, #25
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	061b      	lsls	r3, r3, #24
	height = (uint32_t) pBmp[22] + ((uint32_t) pBmp[23] << 8)
 800202e:	4413      	add	r3, r2
 8002030:	623b      	str	r3, [r7, #32]

	/* Read bitmap size */
	size = (uint32_t) pBmp[2] + ((uint32_t) pBmp[3] << 8)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	3302      	adds	r3, #2
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	461a      	mov	r2, r3
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	3303      	adds	r3, #3
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	021b      	lsls	r3, r3, #8
 8002042:	441a      	add	r2, r3
			+ ((uint32_t) pBmp[4] << 16) + ((uint32_t) pBmp[5] << 24);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	3304      	adds	r3, #4
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	041b      	lsls	r3, r3, #16
 800204c:	441a      	add	r2, r3
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	3305      	adds	r3, #5
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	061b      	lsls	r3, r3, #24
	size = (uint32_t) pBmp[2] + ((uint32_t) pBmp[3] << 8)
 8002056:	4413      	add	r3, r2
 8002058:	61fb      	str	r3, [r7, #28]
	size = size - index;
 800205a:	69fa      	ldr	r2, [r7, #28]
 800205c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	61fb      	str	r3, [r7, #28]

	pbmp = pBmp + index;
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002066:	4413      	add	r3, r2
 8002068:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Remap Ypos, st7735 works with inverted X in case of bitmap */
	/* X = 0, cursor is on Top corner */
	y_pos = ST7735Ctx.Height - Ypos - height;
 800206a:	4b51      	ldr	r3, [pc, #324]	@ (80021b0 <ST7735_DrawBitmap+0x20c>)
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	1ad2      	subs	r2, r2, r3
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	61bb      	str	r3, [r7, #24]

	if (ST7735_SetDisplayWindow(pObj, Xpos, y_pos, width, height) != ST7735_OK) {
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	68b9      	ldr	r1, [r7, #8]
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 fa6a 	bl	800255c <ST7735_SetDisplayWindow>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <ST7735_DrawBitmap+0xf2>
		ret = ST7735_ERROR;
 800208e:	f04f 33ff 	mov.w	r3, #4294967295
 8002092:	637b      	str	r3, [r7, #52]	@ 0x34
 8002094:	e087      	b.n	80021a6 <ST7735_DrawBitmap+0x202>
	} else {
		/* Set GRAM write direction and BGR = 0 */
		tmp = ST7735Ctx.Panel == HannStar_Panel ?
 8002096:	4b46      	ldr	r3, [pc, #280]	@ (80021b0 <ST7735_DrawBitmap+0x20c>)
 8002098:	7b1b      	ldrb	r3, [r3, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d109      	bne.n	80020b2 <ST7735_DrawBitmap+0x10e>
				(uint8_t) OrientationTab[ST7735Ctx.Orientation][0] | LCD_BGR :
 800209e:	4b44      	ldr	r3, [pc, #272]	@ (80021b0 <ST7735_DrawBitmap+0x20c>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	4a44      	ldr	r2, [pc, #272]	@ (80021b4 <ST7735_DrawBitmap+0x210>)
 80020a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80020a8:	b2db      	uxtb	r3, r3
		tmp = ST7735Ctx.Panel == HannStar_Panel ?
 80020aa:	f043 0308 	orr.w	r3, r3, #8
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	e005      	b.n	80020be <ST7735_DrawBitmap+0x11a>
				(uint8_t) OrientationTab[ST7735Ctx.Orientation][0] | LCD_RGB;
 80020b2:	4b3f      	ldr	r3, [pc, #252]	@ (80021b0 <ST7735_DrawBitmap+0x20c>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	4a3f      	ldr	r2, [pc, #252]	@ (80021b4 <ST7735_DrawBitmap+0x210>)
 80020b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
		tmp = ST7735Ctx.Panel == HannStar_Panel ?
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	74fb      	strb	r3, [r7, #19]

		if (st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK) {
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f103 0020 	add.w	r0, r3, #32
 80020c6:	f107 0213 	add.w	r2, r7, #19
 80020ca:	2301      	movs	r3, #1
 80020cc:	2136      	movs	r1, #54	@ 0x36
 80020ce:	f000 fbc3 	bl	8002858 <st7735_write_reg>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <ST7735_DrawBitmap+0x13c>
			ret = ST7735_ERROR;
 80020d8:	f04f 33ff 	mov.w	r3, #4294967295
 80020dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80020de:	e062      	b.n	80021a6 <ST7735_DrawBitmap+0x202>
		}/* Set Cursor */
		else if (ST7735_SetCursor(pObj, Xpos, y_pos) != ST7735_OK) {
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	68b9      	ldr	r1, [r7, #8]
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f7ff fea1 	bl	8001e2c <ST7735_SetCursor>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <ST7735_DrawBitmap+0x154>
			ret = ST7735_ERROR;
 80020f0:	f04f 33ff 	mov.w	r3, #4294967295
 80020f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80020f6:	e056      	b.n	80021a6 <ST7735_DrawBitmap+0x202>
		} else {
			do {
				pixel_val[0] = *(pbmp + 1);
 80020f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020fa:	785b      	ldrb	r3, [r3, #1]
 80020fc:	753b      	strb	r3, [r7, #20]
				pixel_val[1] = *(pbmp);
 80020fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	757b      	strb	r3, [r7, #21]
				if (st7735_send_data(&pObj->Ctx, pixel_val, 2U) != ST7735_OK) {
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	3320      	adds	r3, #32
 8002108:	f107 0114 	add.w	r1, r7, #20
 800210c:	2202      	movs	r2, #2
 800210e:	4618      	mov	r0, r3
 8002110:	f000 fbb7 	bl	8002882 <st7735_send_data>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <ST7735_DrawBitmap+0x17e>
					ret = ST7735_ERROR;
 800211a:	f04f 33ff 	mov.w	r3, #4294967295
 800211e:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8002120:	e009      	b.n	8002136 <ST7735_DrawBitmap+0x192>
				}
				counter += 2U;
 8002122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002124:	3302      	adds	r3, #2
 8002126:	62fb      	str	r3, [r7, #44]	@ 0x2c
				pbmp += 2;
 8002128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800212a:	3302      	adds	r3, #2
 800212c:	633b      	str	r3, [r7, #48]	@ 0x30
			} while (counter < size);
 800212e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	429a      	cmp	r2, r3
 8002134:	d3e0      	bcc.n	80020f8 <ST7735_DrawBitmap+0x154>

			tmp =
					ST7735Ctx.Panel == HannStar_Panel ?
 8002136:	4b1e      	ldr	r3, [pc, #120]	@ (80021b0 <ST7735_DrawBitmap+0x20c>)
 8002138:	7b1b      	ldrb	r3, [r3, #12]
			tmp =
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10a      	bne.n	8002154 <ST7735_DrawBitmap+0x1b0>
							(uint8_t) OrientationTab[ST7735Ctx.Orientation][1]
 800213e:	4b1c      	ldr	r3, [pc, #112]	@ (80021b0 <ST7735_DrawBitmap+0x20c>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	4a1c      	ldr	r2, [pc, #112]	@ (80021b4 <ST7735_DrawBitmap+0x210>)
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	4413      	add	r3, r2
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	b2db      	uxtb	r3, r3
			tmp =
 800214c:	f043 0308 	orr.w	r3, r3, #8
 8002150:	b2db      	uxtb	r3, r3
 8002152:	e006      	b.n	8002162 <ST7735_DrawBitmap+0x1be>
									| LCD_BGR :
							(uint8_t) OrientationTab[ST7735Ctx.Orientation][1]
 8002154:	4b16      	ldr	r3, [pc, #88]	@ (80021b0 <ST7735_DrawBitmap+0x20c>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	4a16      	ldr	r2, [pc, #88]	@ (80021b4 <ST7735_DrawBitmap+0x210>)
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4413      	add	r3, r2
 800215e:	685b      	ldr	r3, [r3, #4]
			tmp =
 8002160:	b2db      	uxtb	r3, r3
 8002162:	74fb      	strb	r3, [r7, #19]
									| LCD_RGB;
			if (st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp,
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f103 0020 	add.w	r0, r3, #32
 800216a:	f107 0213 	add.w	r2, r7, #19
 800216e:	2301      	movs	r3, #1
 8002170:	2136      	movs	r1, #54	@ 0x36
 8002172:	f000 fb71 	bl	8002858 <st7735_write_reg>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <ST7735_DrawBitmap+0x1e0>
					1) != ST7735_OK) {
				ret = ST7735_ERROR;
 800217c:	f04f 33ff 	mov.w	r3, #4294967295
 8002180:	637b      	str	r3, [r7, #52]	@ 0x34
 8002182:	e010      	b.n	80021a6 <ST7735_DrawBitmap+0x202>
			} else {
				if (ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width,
 8002184:	4b0a      	ldr	r3, [pc, #40]	@ (80021b0 <ST7735_DrawBitmap+0x20c>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4b09      	ldr	r3, [pc, #36]	@ (80021b0 <ST7735_DrawBitmap+0x20c>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	4613      	mov	r3, r2
 8002190:	2200      	movs	r2, #0
 8002192:	2100      	movs	r1, #0
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f000 f9e1 	bl	800255c <ST7735_SetDisplayWindow>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d002      	beq.n	80021a6 <ST7735_DrawBitmap+0x202>
						ST7735Ctx.Height) != ST7735_OK) {
					ret = ST7735_ERROR;
 80021a0:	f04f 33ff 	mov.w	r3, #4294967295
 80021a4:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
	}

	return ret;
 80021a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3738      	adds	r7, #56	@ 0x38
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	240005b4 	.word	0x240005b4
 80021b4:	24000070 	.word	0x24000070

080021b8 <ST7735_FillRGBRect>:
 * @param  Width  specifies the rectangle width.
 * @param  Height Specifies the rectangle height
 * @retval The component status
 */
int32_t ST7735_FillRGBRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos,
		uint8_t *pData, uint32_t Width, uint32_t Height) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	603b      	str	r3, [r7, #0]
	int32_t ret = ST7735_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61fb      	str	r3, [r7, #28]
	static uint8_t pdata[640];
	uint8_t *rgb_data = pData;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	61bb      	str	r3, [r7, #24]
	uint32_t i, j;

	if (((Xpos + Width) > ST7735Ctx.Width)
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021d2:	441a      	add	r2, r3
 80021d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002284 <ST7735_FillRGBRect+0xcc>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d806      	bhi.n	80021ea <ST7735_FillRGBRect+0x32>
			|| ((Ypos + Height) > ST7735Ctx.Height)) {
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021e0:	441a      	add	r2, r3
 80021e2:	4b28      	ldr	r3, [pc, #160]	@ (8002284 <ST7735_FillRGBRect+0xcc>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d903      	bls.n	80021f2 <ST7735_FillRGBRect+0x3a>
		ret = ST7735_ERROR;
 80021ea:	f04f 33ff 	mov.w	r3, #4294967295
 80021ee:	61fb      	str	r3, [r7, #28]
 80021f0:	e042      	b.n	8002278 <ST7735_FillRGBRect+0xc0>
	}/* Set Cursor */
	else {
		for (j = 0; j < Height; j++) {
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	e03b      	b.n	8002270 <ST7735_FillRGBRect+0xb8>
			if (ST7735_SetCursor(pObj, Xpos, Ypos + j) != ST7735_OK) {
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4413      	add	r3, r2
 80021fe:	461a      	mov	r2, r3
 8002200:	68b9      	ldr	r1, [r7, #8]
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f7ff fe12 	bl	8001e2c <ST7735_SetCursor>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <ST7735_FillRGBRect+0x5e>
				ret = ST7735_ERROR;
 800220e:	f04f 33ff 	mov.w	r3, #4294967295
 8002212:	61fb      	str	r3, [r7, #28]
 8002214:	e029      	b.n	800226a <ST7735_FillRGBRect+0xb2>
			} else {
				for (i = 0; i < Width; i++) {
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	e013      	b.n	8002244 <ST7735_FillRGBRect+0x8c>
					pdata[2U * i] = (uint8_t) (*(rgb_data));
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	7811      	ldrb	r1, [r2, #0]
 8002224:	4a18      	ldr	r2, [pc, #96]	@ (8002288 <ST7735_FillRGBRect+0xd0>)
 8002226:	54d1      	strb	r1, [r2, r3]
					pdata[(2U * i) + 1U] = (uint8_t) (*(rgb_data + 1));
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	3301      	adds	r3, #1
 8002232:	7811      	ldrb	r1, [r2, #0]
 8002234:	4a14      	ldr	r2, [pc, #80]	@ (8002288 <ST7735_FillRGBRect+0xd0>)
 8002236:	54d1      	strb	r1, [r2, r3]
					rgb_data += 2;
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	3302      	adds	r3, #2
 800223c:	61bb      	str	r3, [r7, #24]
				for (i = 0; i < Width; i++) {
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	3301      	adds	r3, #1
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002248:	429a      	cmp	r2, r3
 800224a:	d3e7      	bcc.n	800221c <ST7735_FillRGBRect+0x64>
				}
				if (st7735_send_data(&pObj->Ctx, (uint8_t*) &pdata[0],
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f103 0020 	add.w	r0, r3, #32
 8002252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	461a      	mov	r2, r3
 8002258:	490b      	ldr	r1, [pc, #44]	@ (8002288 <ST7735_FillRGBRect+0xd0>)
 800225a:	f000 fb12 	bl	8002882 <st7735_send_data>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d002      	beq.n	800226a <ST7735_FillRGBRect+0xb2>
						2U * Width) != ST7735_OK) {
					ret = ST7735_ERROR;
 8002264:	f04f 33ff 	mov.w	r3, #4294967295
 8002268:	61fb      	str	r3, [r7, #28]
		for (j = 0; j < Height; j++) {
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	3301      	adds	r3, #1
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002274:	429a      	cmp	r2, r3
 8002276:	d3bf      	bcc.n	80021f8 <ST7735_FillRGBRect+0x40>
				}
			}
		}
	}

	return ret;
 8002278:	69fb      	ldr	r3, [r7, #28]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3720      	adds	r7, #32
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	240005b4 	.word	0x240005b4
 8002288:	240005c4 	.word	0x240005c4

0800228c <ST7735_DrawHLine>:
 * @param  Length specifies the Line length.
 * @param  Color  Specifies the RGB color in RGB565 format
 * @retval The component status
 */
int32_t ST7735_DrawHLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos,
		uint32_t Length, uint32_t Color) {
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
 8002298:	603b      	str	r3, [r7, #0]
	int32_t ret = ST7735_OK;
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
	uint32_t i;
	static uint8_t pdata[640];

	if ((Xpos + Length) > ST7735Ctx.Width) {
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	441a      	add	r2, r3
 80022a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002324 <ST7735_DrawHLine+0x98>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d903      	bls.n	80022b4 <ST7735_DrawHLine+0x28>
		ret = ST7735_ERROR;
 80022ac:	f04f 33ff 	mov.w	r3, #4294967295
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	e032      	b.n	800231a <ST7735_DrawHLine+0x8e>
	}/* Set Cursor */
	else if (ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK) {
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	68b9      	ldr	r1, [r7, #8]
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f7ff fdb7 	bl	8001e2c <ST7735_SetCursor>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <ST7735_DrawHLine+0x40>
		ret = ST7735_ERROR;
 80022c4:	f04f 33ff 	mov.w	r3, #4294967295
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	e026      	b.n	800231a <ST7735_DrawHLine+0x8e>
	} else {
		for (i = 0; i < Length; i++) {
 80022cc:	2300      	movs	r3, #0
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	e010      	b.n	80022f4 <ST7735_DrawHLine+0x68>
			/* Exchange LSB and MSB to fit LCD specification */
			pdata[2U * i] = (uint8_t) (Color >> 8);
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	0a1a      	lsrs	r2, r3, #8
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	b2d1      	uxtb	r1, r2
 80022dc:	4a12      	ldr	r2, [pc, #72]	@ (8002328 <ST7735_DrawHLine+0x9c>)
 80022de:	54d1      	strb	r1, [r2, r3]
			pdata[(2U * i) + 1U] = (uint8_t) (Color);
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	3301      	adds	r3, #1
 80022e6:	6a3a      	ldr	r2, [r7, #32]
 80022e8:	b2d1      	uxtb	r1, r2
 80022ea:	4a0f      	ldr	r2, [pc, #60]	@ (8002328 <ST7735_DrawHLine+0x9c>)
 80022ec:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < Length; i++) {
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	3301      	adds	r3, #1
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d3ea      	bcc.n	80022d2 <ST7735_DrawHLine+0x46>

//      pdata[(2U*i) + 1U] = (uint8_t)(Color >> 8);
//      pdata[2U*i] = (uint8_t)(Color);			
		}
		if (st7735_send_data(&pObj->Ctx, (uint8_t*) &pdata[0],
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f103 0020 	add.w	r0, r3, #32
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	461a      	mov	r2, r3
 8002308:	4907      	ldr	r1, [pc, #28]	@ (8002328 <ST7735_DrawHLine+0x9c>)
 800230a:	f000 faba 	bl	8002882 <st7735_send_data>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d002      	beq.n	800231a <ST7735_DrawHLine+0x8e>
				2U * Length) != ST7735_OK) {
			ret = ST7735_ERROR;
 8002314:	f04f 33ff 	mov.w	r3, #4294967295
 8002318:	617b      	str	r3, [r7, #20]
		}
	}

	return ret;
 800231a:	697b      	ldr	r3, [r7, #20]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	240005b4 	.word	0x240005b4
 8002328:	24000844 	.word	0x24000844

0800232c <ST7735_DrawVLine>:
 * @param  Ypos     specifies the Y position.
 * @param  Length   specifies the Line length.
 * @retval The component status
 */
int32_t ST7735_DrawVLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos,
		uint32_t Length, uint32_t Color) {
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
 8002338:	603b      	str	r3, [r7, #0]
	int32_t ret = ST7735_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
	uint32_t counter;

	if ((Ypos + Length) > ST7735Ctx.Height) {
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	441a      	add	r2, r3
 8002344:	4b12      	ldr	r3, [pc, #72]	@ (8002390 <ST7735_DrawVLine+0x64>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	429a      	cmp	r2, r3
 800234a:	d903      	bls.n	8002354 <ST7735_DrawVLine+0x28>
		ret = ST7735_ERROR;
 800234c:	f04f 33ff 	mov.w	r3, #4294967295
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	e018      	b.n	8002386 <ST7735_DrawVLine+0x5a>
	} else {
		for (counter = 0; counter < Length; counter++) {
 8002354:	2300      	movs	r3, #0
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	e011      	b.n	800237e <ST7735_DrawVLine+0x52>
			if (ST7735_SetPixel(pObj, Xpos, Ypos + counter, Color) != ST7735_OK) {
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	441a      	add	r2, r3
 8002360:	6a3b      	ldr	r3, [r7, #32]
 8002362:	68b9      	ldr	r1, [r7, #8]
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 f841 	bl	80023ec <ST7735_SetPixel>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <ST7735_DrawVLine+0x4c>
				ret = ST7735_ERROR;
 8002370:	f04f 33ff 	mov.w	r3, #4294967295
 8002374:	617b      	str	r3, [r7, #20]
				break;
 8002376:	e006      	b.n	8002386 <ST7735_DrawVLine+0x5a>
		for (counter = 0; counter < Length; counter++) {
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	3301      	adds	r3, #1
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d3e9      	bcc.n	800235a <ST7735_DrawVLine+0x2e>
			}
		}
	}

	return ret;
 8002386:	697b      	ldr	r3, [r7, #20]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	240005b4 	.word	0x240005b4

08002394 <ST7735_FillRect>:
 * @param  Height Rectangle height
 * @param  Color Draw color
 * @retval Component status
 */
int32_t ST7735_FillRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos,
		uint32_t Width, uint32_t Height, uint32_t Color) {
 8002394:	b580      	push	{r7, lr}
 8002396:	b08a      	sub	sp, #40	@ 0x28
 8002398:	af02      	add	r7, sp, #8
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
 80023a0:	603b      	str	r3, [r7, #0]
	int32_t ret = ST7735_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
	uint32_t i, y_pos = Ypos;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	617b      	str	r3, [r7, #20]

	for (i = 0; i < Height; i++) {
 80023aa:	2300      	movs	r3, #0
 80023ac:	61bb      	str	r3, [r7, #24]
 80023ae:	e014      	b.n	80023da <ST7735_FillRect+0x46>
		if (ST7735_DrawHLine(pObj, Xpos, y_pos, Width, Color) != ST7735_OK) {
 80023b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	68b9      	ldr	r1, [r7, #8]
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f7ff ff66 	bl	800228c <ST7735_DrawHLine>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <ST7735_FillRect+0x3a>
			ret = ST7735_ERROR;
 80023c6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ca:	61fb      	str	r3, [r7, #28]
			break;
 80023cc:	e009      	b.n	80023e2 <ST7735_FillRect+0x4e>
		}
		y_pos++;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	3301      	adds	r3, #1
 80023d2:	617b      	str	r3, [r7, #20]
	for (i = 0; i < Height; i++) {
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	3301      	adds	r3, #1
 80023d8:	61bb      	str	r3, [r7, #24]
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023de:	429a      	cmp	r2, r3
 80023e0:	d3e6      	bcc.n	80023b0 <ST7735_FillRect+0x1c>
	}

	return ret;
 80023e2:	69fb      	ldr	r3, [r7, #28]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3720      	adds	r7, #32
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <ST7735_SetPixel>:
 * @param  Ypos specifies the Y position.
 * @param  Color the RGB pixel color in RGB565 format
 * @retval The component status
 */
int32_t ST7735_SetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos,
		uint32_t Color) {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
 80023f8:	603b      	str	r3, [r7, #0]
	int32_t ret = ST7735_OK;
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
	uint16_t color;

	/* Exchange LSB and MSB to fit LCD specification */
	color = (uint16_t) ((uint16_t) Color << 8);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	b29b      	uxth	r3, r3
 8002402:	021b      	lsls	r3, r3, #8
 8002404:	b29b      	uxth	r3, r3
 8002406:	827b      	strh	r3, [r7, #18]
	color |= (uint16_t) ((uint16_t) (Color >> 8));
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	0a1b      	lsrs	r3, r3, #8
 800240c:	b29a      	uxth	r2, r3
 800240e:	8a7b      	ldrh	r3, [r7, #18]
 8002410:	4313      	orrs	r3, r2
 8002412:	b29b      	uxth	r3, r3
 8002414:	827b      	strh	r3, [r7, #18]

	if ((Xpos >= ST7735Ctx.Width) || (Ypos >= ST7735Ctx.Height)) {
 8002416:	4b16      	ldr	r3, [pc, #88]	@ (8002470 <ST7735_SetPixel+0x84>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	429a      	cmp	r2, r3
 800241e:	d204      	bcs.n	800242a <ST7735_SetPixel+0x3e>
 8002420:	4b13      	ldr	r3, [pc, #76]	@ (8002470 <ST7735_SetPixel+0x84>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	429a      	cmp	r2, r3
 8002428:	d303      	bcc.n	8002432 <ST7735_SetPixel+0x46>
		ret = ST7735_ERROR;
 800242a:	f04f 33ff 	mov.w	r3, #4294967295
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	e019      	b.n	8002466 <ST7735_SetPixel+0x7a>
	}/* Set Cursor */
	else if (ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK) {
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f7ff fcf8 	bl	8001e2c <ST7735_SetCursor>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <ST7735_SetPixel+0x5e>
		ret = ST7735_ERROR;
 8002442:	f04f 33ff 	mov.w	r3, #4294967295
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	e00d      	b.n	8002466 <ST7735_SetPixel+0x7a>
	} else {
		/* Write RAM data */
		if (st7735_send_data(&pObj->Ctx, (uint8_t*) &color, 2) != ST7735_OK) {
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	3320      	adds	r3, #32
 800244e:	f107 0112 	add.w	r1, r7, #18
 8002452:	2202      	movs	r2, #2
 8002454:	4618      	mov	r0, r3
 8002456:	f000 fa14 	bl	8002882 <st7735_send_data>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <ST7735_SetPixel+0x7a>
			ret = ST7735_ERROR;
 8002460:	f04f 33ff 	mov.w	r3, #4294967295
 8002464:	617b      	str	r3, [r7, #20]
		}
	}

	return ret;
 8002466:	697b      	ldr	r3, [r7, #20]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	240005b4 	.word	0x240005b4

08002474 <ST7735_GetPixel>:
 * @param  Ypos specifies the Y position.
 * @param  Color the RGB pixel color in RGB565 format
 * @retval The component status
 */
int32_t ST7735_GetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos,
		uint32_t *Color) {
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
 8002480:	603b      	str	r3, [r7, #0]
	int32_t ret;
	uint8_t pixel_lsb, pixel_msb;
	uint8_t tmp;

	/* Set Cursor */
	ret = ST7735_SetCursor(pObj, Xpos, Ypos);
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68b9      	ldr	r1, [r7, #8]
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f7ff fcd0 	bl	8001e2c <ST7735_SetCursor>
 800248c:	6178      	str	r0, [r7, #20]

	/* Prepare to read LCD RAM */
	ret += st7735_read_reg(&pObj->Ctx, ST7735_READ_RAM, &tmp); /* RAM read data command */
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	3320      	adds	r3, #32
 8002492:	f107 0211 	add.w	r2, r7, #17
 8002496:	212e      	movs	r1, #46	@ 0x2e
 8002498:	4618      	mov	r0, r3
 800249a:	f000 f9ca 	bl	8002832 <st7735_read_reg>
 800249e:	4602      	mov	r2, r0
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	4413      	add	r3, r2
 80024a4:	617b      	str	r3, [r7, #20]

	/* Dummy read */
	ret += st7735_recv_data(&pObj->Ctx, &tmp, 1);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	3320      	adds	r3, #32
 80024aa:	f107 0111 	add.w	r1, r7, #17
 80024ae:	2201      	movs	r2, #1
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 f9f8 	bl	80028a6 <st7735_recv_data>
 80024b6:	4602      	mov	r2, r0
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	4413      	add	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]

	/* Read first part of the RGB888 data */
	ret += st7735_recv_data(&pObj->Ctx, &pixel_lsb, 1);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	3320      	adds	r3, #32
 80024c2:	f107 0113 	add.w	r1, r7, #19
 80024c6:	2201      	movs	r2, #1
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 f9ec 	bl	80028a6 <st7735_recv_data>
 80024ce:	4602      	mov	r2, r0
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	4413      	add	r3, r2
 80024d4:	617b      	str	r3, [r7, #20]
	/* Read first part of the RGB888 data */
	ret += st7735_recv_data(&pObj->Ctx, &pixel_msb, 1);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	3320      	adds	r3, #32
 80024da:	f107 0112 	add.w	r1, r7, #18
 80024de:	2201      	movs	r2, #1
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 f9e0 	bl	80028a6 <st7735_recv_data>
 80024e6:	4602      	mov	r2, r0
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	4413      	add	r3, r2
 80024ec:	617b      	str	r3, [r7, #20]

	*Color = ((uint32_t) (pixel_lsb)) + ((uint32_t) (pixel_msb) << 8);
 80024ee:	7cfb      	ldrb	r3, [r7, #19]
 80024f0:	461a      	mov	r2, r3
 80024f2:	7cbb      	ldrb	r3, [r7, #18]
 80024f4:	021b      	lsls	r3, r3, #8
 80024f6:	441a      	add	r2, r3
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	601a      	str	r2, [r3, #0]

	if (ret != ST7735_OK) {
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <ST7735_GetPixel+0x94>
		ret = ST7735_ERROR;
 8002502:	f04f 33ff 	mov.w	r3, #4294967295
 8002506:	617b      	str	r3, [r7, #20]
	}

	return ret;
 8002508:	697b      	ldr	r3, [r7, #20]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <ST7735_GetXSize>:
/**
 * @brief  Get the LCD pixel Width.
 * @param  pObj Component object
 * @retval The Lcd Pixel Width
 */
int32_t ST7735_GetXSize(ST7735_Object_t *pObj, uint32_t *XSize) {
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
	(void) pObj;

	*XSize = ST7735Ctx.Width;
 800251e:	4b05      	ldr	r3, [pc, #20]	@ (8002534 <ST7735_GetXSize+0x20>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	601a      	str	r2, [r3, #0]

	return ST7735_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	240005b4 	.word	0x240005b4

08002538 <ST7735_GetYSize>:
/**
 * @brief  Get the LCD pixel Height.
 * @param  pObj Component object
 * @retval The Lcd Pixel Height
 */
int32_t ST7735_GetYSize(ST7735_Object_t *pObj, uint32_t *YSize) {
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
	(void) pObj;

	*YSize = ST7735Ctx.Height;
 8002542:	4b05      	ldr	r3, [pc, #20]	@ (8002558 <ST7735_GetYSize+0x20>)
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	601a      	str	r2, [r3, #0]

	return ST7735_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	240005b4 	.word	0x240005b4

0800255c <ST7735_SetDisplayWindow>:
 * @param  Height display window height.
 * @param  Width  display window width.
 * @retval Component status
 */
static int32_t ST7735_SetDisplayWindow(ST7735_Object_t *pObj, uint32_t Xpos,
		uint32_t Ypos, uint32_t Width, uint32_t Height) {
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
 8002568:	603b      	str	r3, [r7, #0]
	int32_t ret;
	uint8_t tmp;

	/* Cursor calibration */
	if (ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 800256a:	4b7d      	ldr	r3, [pc, #500]	@ (8002760 <ST7735_SetDisplayWindow+0x204>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d821      	bhi.n	80025b6 <ST7735_SetDisplayWindow+0x5a>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8002572:	4b7b      	ldr	r3, [pc, #492]	@ (8002760 <ST7735_SetDisplayWindow+0x204>)
 8002574:	7b5b      	ldrb	r3, [r3, #13]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d10e      	bne.n	8002598 <ST7735_SetDisplayWindow+0x3c>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 800257a:	4b79      	ldr	r3, [pc, #484]	@ (8002760 <ST7735_SetDisplayWindow+0x204>)
 800257c:	7b1b      	ldrb	r3, [r3, #12]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d106      	bne.n	8002590 <ST7735_SetDisplayWindow+0x34>
				Xpos += 26;
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	331a      	adds	r3, #26
 8002586:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3301      	adds	r3, #1
 800258c:	607b      	str	r3, [r7, #4]
 800258e:	e036      	b.n	80025fe <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 24;
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	3318      	adds	r3, #24
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	e032      	b.n	80025fe <ST7735_SetDisplayWindow+0xa2>
				Ypos += 0;
			}
		} else if (ST7735Ctx.Type == ST7735_1_8a_inch_screen) {
 8002598:	4b71      	ldr	r3, [pc, #452]	@ (8002760 <ST7735_SetDisplayWindow+0x204>)
 800259a:	7b5b      	ldrb	r3, [r3, #13]
 800259c:	2b02      	cmp	r3, #2
 800259e:	d12e      	bne.n	80025fe <ST7735_SetDisplayWindow+0xa2>
			if (ST7735Ctx.Panel == BOE_Panel) {
 80025a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002760 <ST7735_SetDisplayWindow+0x204>)
 80025a2:	7b1b      	ldrb	r3, [r3, #12]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d12a      	bne.n	80025fe <ST7735_SetDisplayWindow+0xa2>
				Xpos += 2;
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	3302      	adds	r3, #2
 80025ac:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3301      	adds	r3, #1
 80025b2:	607b      	str	r3, [r7, #4]
 80025b4:	e023      	b.n	80025fe <ST7735_SetDisplayWindow+0xa2>
			}
		}
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 80025b6:	4b6a      	ldr	r3, [pc, #424]	@ (8002760 <ST7735_SetDisplayWindow+0x204>)
 80025b8:	7b5b      	ldrb	r3, [r3, #13]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d111      	bne.n	80025e2 <ST7735_SetDisplayWindow+0x86>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 80025be:	4b68      	ldr	r3, [pc, #416]	@ (8002760 <ST7735_SetDisplayWindow+0x204>)
 80025c0:	7b1b      	ldrb	r3, [r3, #12]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d106      	bne.n	80025d4 <ST7735_SetDisplayWindow+0x78>
				Xpos += 1;
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	3301      	adds	r3, #1
 80025ca:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	331a      	adds	r3, #26
 80025d0:	607b      	str	r3, [r7, #4]
 80025d2:	e014      	b.n	80025fe <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 1;
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	3301      	adds	r3, #1
 80025d8:	60bb      	str	r3, [r7, #8]
				Ypos += 24;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3318      	adds	r3, #24
 80025de:	607b      	str	r3, [r7, #4]
 80025e0:	e00d      	b.n	80025fe <ST7735_SetDisplayWindow+0xa2>
			}
		} else if (ST7735Ctx.Type == ST7735_1_8a_inch_screen) {
 80025e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002760 <ST7735_SetDisplayWindow+0x204>)
 80025e4:	7b5b      	ldrb	r3, [r3, #13]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d109      	bne.n	80025fe <ST7735_SetDisplayWindow+0xa2>
			if (ST7735Ctx.Panel == BOE_Panel) {
 80025ea:	4b5d      	ldr	r3, [pc, #372]	@ (8002760 <ST7735_SetDisplayWindow+0x204>)
 80025ec:	7b1b      	ldrb	r3, [r3, #12]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d105      	bne.n	80025fe <ST7735_SetDisplayWindow+0xa2>
				Xpos += 1;
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	3301      	adds	r3, #1
 80025f6:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3302      	adds	r3, #2
 80025fc:	607b      	str	r3, [r7, #4]
			}
		}
	}

	/* Column addr set, 4 args, no delay: XSTART = Xpos, XEND = (Xpos + Width - 1) */
	ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f103 0020 	add.w	r0, r3, #32
 8002604:	f107 0213 	add.w	r2, r7, #19
 8002608:	2300      	movs	r3, #0
 800260a:	212a      	movs	r1, #42	@ 0x2a
 800260c:	f000 f924 	bl	8002858 <st7735_write_reg>
 8002610:	6178      	str	r0, [r7, #20]
	tmp = (uint8_t) (Xpos >> 8U);
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	0a1b      	lsrs	r3, r3, #8
 8002616:	b2db      	uxtb	r3, r3
 8002618:	74fb      	strb	r3, [r7, #19]
	ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	3320      	adds	r3, #32
 800261e:	f107 0113 	add.w	r1, r7, #19
 8002622:	2201      	movs	r2, #1
 8002624:	4618      	mov	r0, r3
 8002626:	f000 f92c 	bl	8002882 <st7735_send_data>
 800262a:	4602      	mov	r2, r0
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	4413      	add	r3, r2
 8002630:	617b      	str	r3, [r7, #20]
	tmp = (uint8_t) (Xpos & 0xFFU);
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	b2db      	uxtb	r3, r3
 8002636:	74fb      	strb	r3, [r7, #19]
	ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	3320      	adds	r3, #32
 800263c:	f107 0113 	add.w	r1, r7, #19
 8002640:	2201      	movs	r2, #1
 8002642:	4618      	mov	r0, r3
 8002644:	f000 f91d 	bl	8002882 <st7735_send_data>
 8002648:	4602      	mov	r2, r0
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	4413      	add	r3, r2
 800264e:	617b      	str	r3, [r7, #20]
	tmp = (uint8_t) ((Xpos + Width - 1U) >> 8U);
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	4413      	add	r3, r2
 8002656:	3b01      	subs	r3, #1
 8002658:	0a1b      	lsrs	r3, r3, #8
 800265a:	b2db      	uxtb	r3, r3
 800265c:	74fb      	strb	r3, [r7, #19]
	ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	3320      	adds	r3, #32
 8002662:	f107 0113 	add.w	r1, r7, #19
 8002666:	2201      	movs	r2, #1
 8002668:	4618      	mov	r0, r3
 800266a:	f000 f90a 	bl	8002882 <st7735_send_data>
 800266e:	4602      	mov	r2, r0
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	4413      	add	r3, r2
 8002674:	617b      	str	r3, [r7, #20]
	tmp = (uint8_t) ((Xpos + Width - 1U) & 0xFFU);
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	b2da      	uxtb	r2, r3
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	b2db      	uxtb	r3, r3
 800267e:	4413      	add	r3, r2
 8002680:	b2db      	uxtb	r3, r3
 8002682:	3b01      	subs	r3, #1
 8002684:	b2db      	uxtb	r3, r3
 8002686:	74fb      	strb	r3, [r7, #19]
	ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	3320      	adds	r3, #32
 800268c:	f107 0113 	add.w	r1, r7, #19
 8002690:	2201      	movs	r2, #1
 8002692:	4618      	mov	r0, r3
 8002694:	f000 f8f5 	bl	8002882 <st7735_send_data>
 8002698:	4602      	mov	r2, r0
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	4413      	add	r3, r2
 800269e:	617b      	str	r3, [r7, #20]

	/* Row addr set, 4 args, no delay: YSTART = Ypos, YEND = (Ypos + Height - 1) */
	ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f103 0020 	add.w	r0, r3, #32
 80026a6:	f107 0213 	add.w	r2, r7, #19
 80026aa:	2300      	movs	r3, #0
 80026ac:	212b      	movs	r1, #43	@ 0x2b
 80026ae:	f000 f8d3 	bl	8002858 <st7735_write_reg>
 80026b2:	4602      	mov	r2, r0
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	4413      	add	r3, r2
 80026b8:	617b      	str	r3, [r7, #20]
	tmp = (uint8_t) (Ypos >> 8U);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	0a1b      	lsrs	r3, r3, #8
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	74fb      	strb	r3, [r7, #19]
	ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	3320      	adds	r3, #32
 80026c6:	f107 0113 	add.w	r1, r7, #19
 80026ca:	2201      	movs	r2, #1
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 f8d8 	bl	8002882 <st7735_send_data>
 80026d2:	4602      	mov	r2, r0
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	4413      	add	r3, r2
 80026d8:	617b      	str	r3, [r7, #20]
	tmp = (uint8_t) (Ypos & 0xFFU);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	74fb      	strb	r3, [r7, #19]
	ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	3320      	adds	r3, #32
 80026e4:	f107 0113 	add.w	r1, r7, #19
 80026e8:	2201      	movs	r2, #1
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 f8c9 	bl	8002882 <st7735_send_data>
 80026f0:	4602      	mov	r2, r0
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	4413      	add	r3, r2
 80026f6:	617b      	str	r3, [r7, #20]
	tmp = (uint8_t) ((Ypos + Height - 1U) >> 8U);
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6a3b      	ldr	r3, [r7, #32]
 80026fc:	4413      	add	r3, r2
 80026fe:	3b01      	subs	r3, #1
 8002700:	0a1b      	lsrs	r3, r3, #8
 8002702:	b2db      	uxtb	r3, r3
 8002704:	74fb      	strb	r3, [r7, #19]
	ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	3320      	adds	r3, #32
 800270a:	f107 0113 	add.w	r1, r7, #19
 800270e:	2201      	movs	r2, #1
 8002710:	4618      	mov	r0, r3
 8002712:	f000 f8b6 	bl	8002882 <st7735_send_data>
 8002716:	4602      	mov	r2, r0
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	4413      	add	r3, r2
 800271c:	617b      	str	r3, [r7, #20]
	tmp = (uint8_t) ((Ypos + Height - 1U) & 0xFFU);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	b2da      	uxtb	r2, r3
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	4413      	add	r3, r2
 8002728:	b2db      	uxtb	r3, r3
 800272a:	3b01      	subs	r3, #1
 800272c:	b2db      	uxtb	r3, r3
 800272e:	74fb      	strb	r3, [r7, #19]
	ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	3320      	adds	r3, #32
 8002734:	f107 0113 	add.w	r1, r7, #19
 8002738:	2201      	movs	r2, #1
 800273a:	4618      	mov	r0, r3
 800273c:	f000 f8a1 	bl	8002882 <st7735_send_data>
 8002740:	4602      	mov	r2, r0
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	4413      	add	r3, r2
 8002746:	617b      	str	r3, [r7, #20]

	if (ret != ST7735_OK) {
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d002      	beq.n	8002754 <ST7735_SetDisplayWindow+0x1f8>
		ret = ST7735_ERROR;
 800274e:	f04f 33ff 	mov.w	r3, #4294967295
 8002752:	617b      	str	r3, [r7, #20]
	}

	return ret;
 8002754:	697b      	ldr	r3, [r7, #20]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	240005b4 	.word	0x240005b4

08002764 <ST7735_ReadRegWrap>:
 * @param  Handle  Component object handle
 * @param  Reg  The target register address to write
 * @param  pData  The target register value to be written
 * @retval Component error status
 */
static int32_t ST7735_ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData) {
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	460b      	mov	r3, r1
 800276e:	607a      	str	r2, [r7, #4]
 8002770:	72fb      	strb	r3, [r7, #11]
	ST7735_Object_t *pObj = (ST7735_Object_t*) Handle;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	617b      	str	r3, [r7, #20]

	return pObj->IO.ReadReg(Reg, pData);
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	7afa      	ldrb	r2, [r7, #11]
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	4610      	mov	r0, r2
 8002780:	4798      	blx	r3
 8002782:	4603      	mov	r3, r0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <ST7735_WriteRegWrap>:
 * @param  pData  The target register value to be written
 * @param  Length  buffer size to be written
 * @retval Component error status
 */
static int32_t ST7735_WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData,
		uint32_t Length) {
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	603b      	str	r3, [r7, #0]
 8002798:	460b      	mov	r3, r1
 800279a:	72fb      	strb	r3, [r7, #11]
	ST7735_Object_t *pObj = (ST7735_Object_t*) Handle;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	617b      	str	r3, [r7, #20]

	return pObj->IO.WriteReg(Reg, pData, Length);
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	7af8      	ldrb	r0, [r7, #11]
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	4798      	blx	r3
 80027ac:	4603      	mov	r3, r0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <ST7735_SendDataWrap>:
 * @param  handle  Component object handle
 * @param  pData  The target register value to be written
 * @retval Component error status
 */
static int32_t ST7735_SendDataWrap(void *Handle, uint8_t *pData,
		uint32_t Length) {
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b086      	sub	sp, #24
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	60f8      	str	r0, [r7, #12]
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]
	ST7735_Object_t *pObj = (ST7735_Object_t*) Handle;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	617b      	str	r3, [r7, #20]

	return pObj->IO.SendData(pData, Length);
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	68b8      	ldr	r0, [r7, #8]
 80027ce:	4798      	blx	r3
 80027d0:	4603      	mov	r3, r0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <ST7735_RecvDataWrap>:
 * @param  handle  Component object handle
 * @param  pData  The target register value to be written
 * @retval Component error status
 */
static int32_t ST7735_RecvDataWrap(void *Handle, uint8_t *pData,
		uint32_t Length) {
 80027da:	b580      	push	{r7, lr}
 80027dc:	b086      	sub	sp, #24
 80027de:	af00      	add	r7, sp, #0
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	607a      	str	r2, [r7, #4]
	ST7735_Object_t *pObj = (ST7735_Object_t*) Handle;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	617b      	str	r3, [r7, #20]

	return pObj->IO.RecvData(pData, Length);
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	68b8      	ldr	r0, [r7, #8]
 80027f2:	4798      	blx	r3
 80027f4:	4603      	mov	r3, r0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <ST7735_IO_Delay>:
/**
 * @brief  ST7735 delay
 * @param  Delay  Delay in ms
 * @retval Component error status
 */
static int32_t ST7735_IO_Delay(ST7735_Object_t *pObj, uint32_t Delay) {
 80027fe:	b580      	push	{r7, lr}
 8002800:	b084      	sub	sp, #16
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	6039      	str	r1, [r7, #0]
	uint32_t tickstart;
	tickstart = pObj->IO.GetTick();
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	4798      	blx	r3
 800280e:	4603      	mov	r3, r0
 8002810:	60fb      	str	r3, [r7, #12]
	while ((pObj->IO.GetTick() - tickstart) < Delay) {
 8002812:	bf00      	nop
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	4798      	blx	r3
 800281a:	4603      	mov	r3, r0
 800281c:	461a      	mov	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d8f5      	bhi.n	8002814 <ST7735_IO_Delay+0x16>
	}
	return ST7735_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <st7735_read_reg>:
  * @param  reg   Register to read
  * @param  pdata data to read from the register
  * @retval Component status
  */
int32_t st7735_read_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b084      	sub	sp, #16
 8002836:	af00      	add	r7, sp, #0
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	460b      	mov	r3, r1
 800283c:	607a      	str	r2, [r7, #4]
 800283e:	72fb      	strb	r3, [r7, #11]
  return ctx->ReadReg(ctx->handle, reg, pdata);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	6910      	ldr	r0, [r2, #16]
 8002848:	7af9      	ldrb	r1, [r7, #11]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	4798      	blx	r3
 800284e:	4603      	mov	r3, r0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <st7735_write_reg>:
  * @param  pdata  data to write to the register
  * @param  length length of data to write to the register
  * @retval Component status
  */
int32_t st7735_write_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint32_t length)
{
 8002858:	b590      	push	{r4, r7, lr}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	607a      	str	r2, [r7, #4]
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	460b      	mov	r3, r1
 8002866:	72fb      	strb	r3, [r7, #11]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681c      	ldr	r4, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6918      	ldr	r0, [r3, #16]
 8002870:	7af9      	ldrb	r1, [r7, #11]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	47a0      	blx	r4
 8002878:	4603      	mov	r3, r0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	bd90      	pop	{r4, r7, pc}

08002882 <st7735_send_data>:
  * @param  pdata  data to write
  * @param  length length of data to write
  * @retval Component status
  */
int32_t st7735_send_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b084      	sub	sp, #16
 8002886:	af00      	add	r7, sp, #0
 8002888:	60f8      	str	r0, [r7, #12]
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	607a      	str	r2, [r7, #4]
  return ctx->SendData(ctx->handle, pdata, length);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	6910      	ldr	r0, [r2, #16]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	68b9      	ldr	r1, [r7, #8]
 800289a:	4798      	blx	r3
 800289c:	4603      	mov	r3, r0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <st7735_recv_data>:
  * @param  pdata  data to read
  * @param  length length of data to read
  * @retval Component status
  */
int32_t st7735_recv_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b084      	sub	sp, #16
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
  return ctx->RecvData(ctx->handle, pdata, length);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	6910      	ldr	r0, [r2, #16]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	4798      	blx	r3
 80028c0:	4603      	mov	r3, r0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028d2:	2003      	movs	r0, #3
 80028d4:	f001 fee8 	bl	80046a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80028d8:	f004 fa66 	bl	8006da8 <HAL_RCC_GetSysClockFreq>
 80028dc:	4602      	mov	r2, r0
 80028de:	4b15      	ldr	r3, [pc, #84]	@ (8002934 <HAL_Init+0x68>)
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	0a1b      	lsrs	r3, r3, #8
 80028e4:	f003 030f 	and.w	r3, r3, #15
 80028e8:	4913      	ldr	r1, [pc, #76]	@ (8002938 <HAL_Init+0x6c>)
 80028ea:	5ccb      	ldrb	r3, [r1, r3]
 80028ec:	f003 031f 	and.w	r3, r3, #31
 80028f0:	fa22 f303 	lsr.w	r3, r2, r3
 80028f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002934 <HAL_Init+0x68>)
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	4a0e      	ldr	r2, [pc, #56]	@ (8002938 <HAL_Init+0x6c>)
 8002900:	5cd3      	ldrb	r3, [r2, r3]
 8002902:	f003 031f 	and.w	r3, r3, #31
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	fa22 f303 	lsr.w	r3, r2, r3
 800290c:	4a0b      	ldr	r2, [pc, #44]	@ (800293c <HAL_Init+0x70>)
 800290e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002910:	4a0b      	ldr	r2, [pc, #44]	@ (8002940 <HAL_Init+0x74>)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002916:	2000      	movs	r0, #0
 8002918:	f000 f814 	bl	8002944 <HAL_InitTick>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e002      	b.n	800292c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002926:	f00f faff 	bl	8011f28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	58024400 	.word	0x58024400
 8002938:	0801dea8 	.word	0x0801dea8
 800293c:	2400038c 	.word	0x2400038c
 8002940:	24000388 	.word	0x24000388

08002944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800294c:	4b15      	ldr	r3, [pc, #84]	@ (80029a4 <HAL_InitTick+0x60>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e021      	b.n	800299c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002958:	4b13      	ldr	r3, [pc, #76]	@ (80029a8 <HAL_InitTick+0x64>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	4b11      	ldr	r3, [pc, #68]	@ (80029a4 <HAL_InitTick+0x60>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	4619      	mov	r1, r3
 8002962:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002966:	fbb3 f3f1 	udiv	r3, r3, r1
 800296a:	fbb2 f3f3 	udiv	r3, r2, r3
 800296e:	4618      	mov	r0, r3
 8002970:	f001 fecd 	bl	800470e <HAL_SYSTICK_Config>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e00e      	b.n	800299c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b0f      	cmp	r3, #15
 8002982:	d80a      	bhi.n	800299a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002984:	2200      	movs	r2, #0
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	f04f 30ff 	mov.w	r0, #4294967295
 800298c:	f001 fe97 	bl	80046be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002990:	4a06      	ldr	r2, [pc, #24]	@ (80029ac <HAL_InitTick+0x68>)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002996:	2300      	movs	r3, #0
 8002998:	e000      	b.n	800299c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
}
 800299c:	4618      	mov	r0, r3
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	24000094 	.word	0x24000094
 80029a8:	24000388 	.word	0x24000388
 80029ac:	24000090 	.word	0x24000090

080029b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029b4:	4b06      	ldr	r3, [pc, #24]	@ (80029d0 <HAL_IncTick+0x20>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	461a      	mov	r2, r3
 80029ba:	4b06      	ldr	r3, [pc, #24]	@ (80029d4 <HAL_IncTick+0x24>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4413      	add	r3, r2
 80029c0:	4a04      	ldr	r2, [pc, #16]	@ (80029d4 <HAL_IncTick+0x24>)
 80029c2:	6013      	str	r3, [r2, #0]
}
 80029c4:	bf00      	nop
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	24000094 	.word	0x24000094
 80029d4:	24000ac4 	.word	0x24000ac4

080029d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  return uwTick;
 80029dc:	4b03      	ldr	r3, [pc, #12]	@ (80029ec <HAL_GetTick+0x14>)
 80029de:	681b      	ldr	r3, [r3, #0]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	24000ac4 	.word	0x24000ac4

080029f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029f8:	f7ff ffee 	bl	80029d8 <HAL_GetTick>
 80029fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a08:	d005      	beq.n	8002a16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a34 <HAL_Delay+0x44>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4413      	add	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a16:	bf00      	nop
 8002a18:	f7ff ffde 	bl	80029d8 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d8f7      	bhi.n	8002a18 <HAL_Delay+0x28>
  {
  }
}
 8002a28:	bf00      	nop
 8002a2a:	bf00      	nop
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	24000094 	.word	0x24000094

08002a38 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002a3c:	4b03      	ldr	r3, [pc, #12]	@ (8002a4c <HAL_GetREVID+0x14>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	0c1b      	lsrs	r3, r3, #16
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	5c001000 	.word	0x5c001000

08002a50 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002a5a:	4b07      	ldr	r3, [pc, #28]	@ (8002a78 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	401a      	ands	r2, r3
 8002a64:	4904      	ldr	r1, [pc, #16]	@ (8002a78 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	604b      	str	r3, [r1, #4]
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	58000400 	.word	0x58000400

08002a7c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	431a      	orrs	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	609a      	str	r2, [r3, #8]
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	609a      	str	r2, [r3, #8]
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b087      	sub	sp, #28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d107      	bne.n	8002b08 <LL_ADC_SetChannelPreselection+0x24>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	0e9b      	lsrs	r3, r3, #26
 8002afc:	f003 031f 	and.w	r3, r3, #31
 8002b00:	2201      	movs	r2, #1
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	e015      	b.n	8002b34 <LL_ADC_SetChannelPreselection+0x50>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	fa93 f3a3 	rbit	r3, r3
 8002b12:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8002b1e:	2320      	movs	r3, #32
 8002b20:	e003      	b.n	8002b2a <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	fab3 f383 	clz	r3, r3
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	f003 031f 	and.w	r3, r3, #31
 8002b2e:	2201      	movs	r2, #1
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	69d2      	ldr	r2, [r2, #28]
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8002b3e:	bf00      	nop
 8002b40:	371c      	adds	r7, #28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b087      	sub	sp, #28
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	60f8      	str	r0, [r7, #12]
 8002b52:	60b9      	str	r1, [r7, #8]
 8002b54:	607a      	str	r2, [r7, #4]
 8002b56:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3360      	adds	r3, #96	@ 0x60
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	430b      	orrs	r3, r1
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002b7e:	bf00      	nop
 8002b80:	371c      	adds	r7, #28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b085      	sub	sp, #20
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	f003 031f 	and.w	r3, r3, #31
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8002baa:	431a      	orrs	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	611a      	str	r2, [r3, #16]
}
 8002bb0:	bf00      	nop
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	3360      	adds	r3, #96	@ 0x60
 8002bcc:	461a      	mov	r2, r3
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	431a      	orrs	r2, r3
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	601a      	str	r2, [r3, #0]
  }
}
 8002be6:	bf00      	nop
 8002be8:	371c      	adds	r7, #28
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	3330      	adds	r3, #48	@ 0x30
 8002c28:	461a      	mov	r2, r3
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	0a1b      	lsrs	r3, r3, #8
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	f003 030c 	and.w	r3, r3, #12
 8002c34:	4413      	add	r3, r2
 8002c36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	f003 031f 	and.w	r3, r3, #31
 8002c42:	211f      	movs	r1, #31
 8002c44:	fa01 f303 	lsl.w	r3, r1, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	401a      	ands	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	0e9b      	lsrs	r3, r3, #26
 8002c50:	f003 011f 	and.w	r1, r3, #31
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f003 031f 	and.w	r3, r3, #31
 8002c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c64:	bf00      	nop
 8002c66:	371c      	adds	r7, #28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b087      	sub	sp, #28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	3314      	adds	r3, #20
 8002c80:	461a      	mov	r2, r3
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	0e5b      	lsrs	r3, r3, #25
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	4413      	add	r3, r2
 8002c8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	0d1b      	lsrs	r3, r3, #20
 8002c98:	f003 031f 	and.w	r3, r3, #31
 8002c9c:	2107      	movs	r1, #7
 8002c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	401a      	ands	r2, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	0d1b      	lsrs	r3, r3, #20
 8002caa:	f003 031f 	and.w	r3, r3, #31
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002cba:	bf00      	nop
 8002cbc:	371c      	adds	r7, #28
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
	...

08002cc8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	401a      	ands	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f003 0318 	and.w	r3, r3, #24
 8002cea:	4908      	ldr	r1, [pc, #32]	@ (8002d0c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002cec:	40d9      	lsrs	r1, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	400b      	ands	r3, r1
 8002cf2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002cfe:	bf00      	nop
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	000fffff 	.word	0x000fffff

08002d10 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 031f 	and.w	r3, r3, #31
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	4b04      	ldr	r3, [pc, #16]	@ (8002d68 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6093      	str	r3, [r2, #8]
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	5fffffc0 	.word	0x5fffffc0

08002d6c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d80:	d101      	bne.n	8002d86 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	4b05      	ldr	r3, [pc, #20]	@ (8002db8 <LL_ADC_EnableInternalRegulator+0x24>)
 8002da2:	4013      	ands	r3, r2
 8002da4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	6fffffc0 	.word	0x6fffffc0

08002dbc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dcc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002dd0:	d101      	bne.n	8002dd6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	4b05      	ldr	r3, [pc, #20]	@ (8002e08 <LL_ADC_Enable+0x24>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	f043 0201 	orr.w	r2, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	7fffffc0 	.word	0x7fffffc0

08002e0c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	4b05      	ldr	r3, [pc, #20]	@ (8002e30 <LL_ADC_Disable+0x24>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	f043 0202 	orr.w	r2, r3, #2
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	7fffffc0 	.word	0x7fffffc0

08002e34 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <LL_ADC_IsEnabled+0x18>
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e000      	b.n	8002e4e <LL_ADC_IsEnabled+0x1a>
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d101      	bne.n	8002e72 <LL_ADC_IsDisableOngoing+0x18>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <LL_ADC_IsDisableOngoing+0x1a>
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	4b05      	ldr	r3, [pc, #20]	@ (8002ea4 <LL_ADC_REG_StartConversion+0x24>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	f043 0204 	orr.w	r2, r3, #4
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	7fffffc0 	.word	0x7fffffc0

08002ea8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	4b05      	ldr	r3, [pc, #20]	@ (8002ecc <LL_ADC_REG_StopConversion+0x24>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	f043 0210 	orr.w	r2, r3, #16
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	7fffffc0 	.word	0x7fffffc0

08002ed0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b04      	cmp	r3, #4
 8002ee2:	d101      	bne.n	8002ee8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e000      	b.n	8002eea <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	4b05      	ldr	r3, [pc, #20]	@ (8002f1c <LL_ADC_INJ_StopConversion+0x24>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	f043 0220 	orr.w	r2, r3, #32
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	7fffffc0 	.word	0x7fffffc0

08002f20 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 0308 	and.w	r3, r3, #8
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d101      	bne.n	8002f38 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f34:	2301      	movs	r3, #1
 8002f36:	e000      	b.n	8002f3a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
	...

08002f48 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f48:	b590      	push	{r4, r7, lr}
 8002f4a:	b089      	sub	sp, #36	@ 0x24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e18f      	b.n	8003282 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d109      	bne.n	8002f84 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f00d fadf 	bl	8010534 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff feef 	bl	8002d6c <LL_ADC_IsDeepPowerDownEnabled>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d004      	beq.n	8002f9e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff fed5 	bl	8002d48 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff ff0a 	bl	8002dbc <LL_ADC_IsInternalRegulatorEnabled>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d114      	bne.n	8002fd8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff feee 	bl	8002d94 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fb8:	4b87      	ldr	r3, [pc, #540]	@ (80031d8 <HAL_ADC_Init+0x290>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	099b      	lsrs	r3, r3, #6
 8002fbe:	4a87      	ldr	r2, [pc, #540]	@ (80031dc <HAL_ADC_Init+0x294>)
 8002fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc4:	099b      	lsrs	r3, r3, #6
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002fca:	e002      	b.n	8002fd2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1f9      	bne.n	8002fcc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff feed 	bl	8002dbc <LL_ADC_IsInternalRegulatorEnabled>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10d      	bne.n	8003004 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fec:	f043 0210 	orr.w	r2, r3, #16
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff8:	f043 0201 	orr.w	r2, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff ff61 	bl	8002ed0 <LL_ADC_REG_IsConversionOngoing>
 800300e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	2b00      	cmp	r3, #0
 800301a:	f040 8129 	bne.w	8003270 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	2b00      	cmp	r3, #0
 8003022:	f040 8125 	bne.w	8003270 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800302a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800302e:	f043 0202 	orr.w	r2, r3, #2
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff fefa 	bl	8002e34 <LL_ADC_IsEnabled>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d136      	bne.n	80030b4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a65      	ldr	r2, [pc, #404]	@ (80031e0 <HAL_ADC_Init+0x298>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d004      	beq.n	800305a <HAL_ADC_Init+0x112>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a63      	ldr	r2, [pc, #396]	@ (80031e4 <HAL_ADC_Init+0x29c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d10e      	bne.n	8003078 <HAL_ADC_Init+0x130>
 800305a:	4861      	ldr	r0, [pc, #388]	@ (80031e0 <HAL_ADC_Init+0x298>)
 800305c:	f7ff feea 	bl	8002e34 <LL_ADC_IsEnabled>
 8003060:	4604      	mov	r4, r0
 8003062:	4860      	ldr	r0, [pc, #384]	@ (80031e4 <HAL_ADC_Init+0x29c>)
 8003064:	f7ff fee6 	bl	8002e34 <LL_ADC_IsEnabled>
 8003068:	4603      	mov	r3, r0
 800306a:	4323      	orrs	r3, r4
 800306c:	2b00      	cmp	r3, #0
 800306e:	bf0c      	ite	eq
 8003070:	2301      	moveq	r3, #1
 8003072:	2300      	movne	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	e008      	b.n	800308a <HAL_ADC_Init+0x142>
 8003078:	485b      	ldr	r0, [pc, #364]	@ (80031e8 <HAL_ADC_Init+0x2a0>)
 800307a:	f7ff fedb 	bl	8002e34 <LL_ADC_IsEnabled>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	bf0c      	ite	eq
 8003084:	2301      	moveq	r3, #1
 8003086:	2300      	movne	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d012      	beq.n	80030b4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a53      	ldr	r2, [pc, #332]	@ (80031e0 <HAL_ADC_Init+0x298>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d004      	beq.n	80030a2 <HAL_ADC_Init+0x15a>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a51      	ldr	r2, [pc, #324]	@ (80031e4 <HAL_ADC_Init+0x29c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d101      	bne.n	80030a6 <HAL_ADC_Init+0x15e>
 80030a2:	4a52      	ldr	r2, [pc, #328]	@ (80031ec <HAL_ADC_Init+0x2a4>)
 80030a4:	e000      	b.n	80030a8 <HAL_ADC_Init+0x160>
 80030a6:	4a52      	ldr	r2, [pc, #328]	@ (80031f0 <HAL_ADC_Init+0x2a8>)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	4619      	mov	r1, r3
 80030ae:	4610      	mov	r0, r2
 80030b0:	f7ff fce4 	bl	8002a7c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80030b4:	f7ff fcc0 	bl	8002a38 <HAL_GetREVID>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f241 0203 	movw	r2, #4099	@ 0x1003
 80030be:	4293      	cmp	r3, r2
 80030c0:	d914      	bls.n	80030ec <HAL_ADC_Init+0x1a4>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b10      	cmp	r3, #16
 80030c8:	d110      	bne.n	80030ec <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	7d5b      	ldrb	r3, [r3, #21]
 80030ce:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030d4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80030da:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	7f1b      	ldrb	r3, [r3, #28]
 80030e0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80030e2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030e4:	f043 030c 	orr.w	r3, r3, #12
 80030e8:	61bb      	str	r3, [r7, #24]
 80030ea:	e00d      	b.n	8003108 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	7d5b      	ldrb	r3, [r3, #21]
 80030f0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030f6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80030fc:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	7f1b      	ldrb	r3, [r3, #28]
 8003102:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003104:	4313      	orrs	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	7f1b      	ldrb	r3, [r3, #28]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d106      	bne.n	800311e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	3b01      	subs	r3, #1
 8003116:	045b      	lsls	r3, r3, #17
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4313      	orrs	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003122:	2b00      	cmp	r3, #0
 8003124:	d009      	beq.n	800313a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003132:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4313      	orrs	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	4b2c      	ldr	r3, [pc, #176]	@ (80031f4 <HAL_ADC_Init+0x2ac>)
 8003142:	4013      	ands	r3, r2
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6812      	ldr	r2, [r2, #0]
 8003148:	69b9      	ldr	r1, [r7, #24]
 800314a:	430b      	orrs	r3, r1
 800314c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff febc 	bl	8002ed0 <LL_ADC_REG_IsConversionOngoing>
 8003158:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff fede 	bl	8002f20 <LL_ADC_INJ_IsConversionOngoing>
 8003164:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d15f      	bne.n	800322c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d15c      	bne.n	800322c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	7d1b      	ldrb	r3, [r3, #20]
 8003176:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 800317c:	4313      	orrs	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68da      	ldr	r2, [r3, #12]
 8003186:	4b1c      	ldr	r3, [pc, #112]	@ (80031f8 <HAL_ADC_Init+0x2b0>)
 8003188:	4013      	ands	r3, r2
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6812      	ldr	r2, [r2, #0]
 800318e:	69b9      	ldr	r1, [r7, #24]
 8003190:	430b      	orrs	r3, r1
 8003192:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800319a:	2b01      	cmp	r3, #1
 800319c:	d130      	bne.n	8003200 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691a      	ldr	r2, [r3, #16]
 80031aa:	4b14      	ldr	r3, [pc, #80]	@ (80031fc <HAL_ADC_Init+0x2b4>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80031b2:	3a01      	subs	r2, #1
 80031b4:	0411      	lsls	r1, r2, #16
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80031ba:	4311      	orrs	r1, r2
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80031c0:	4311      	orrs	r1, r2
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80031c6:	430a      	orrs	r2, r1
 80031c8:	431a      	orrs	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 0201 	orr.w	r2, r2, #1
 80031d2:	611a      	str	r2, [r3, #16]
 80031d4:	e01c      	b.n	8003210 <HAL_ADC_Init+0x2c8>
 80031d6:	bf00      	nop
 80031d8:	24000388 	.word	0x24000388
 80031dc:	053e2d63 	.word	0x053e2d63
 80031e0:	40022000 	.word	0x40022000
 80031e4:	40022100 	.word	0x40022100
 80031e8:	58026000 	.word	0x58026000
 80031ec:	40022300 	.word	0x40022300
 80031f0:	58026300 	.word	0x58026300
 80031f4:	fff0c003 	.word	0xfff0c003
 80031f8:	ffffbffc 	.word	0xffffbffc
 80031fc:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	691a      	ldr	r2, [r3, #16]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0201 	bic.w	r2, r2, #1
 800320e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 fec6 	bl	8003fb8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d10c      	bne.n	800324e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323a:	f023 010f 	bic.w	r1, r3, #15
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	1e5a      	subs	r2, r3, #1
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	631a      	str	r2, [r3, #48]	@ 0x30
 800324c:	e007      	b.n	800325e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 020f 	bic.w	r2, r2, #15
 800325c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003262:	f023 0303 	bic.w	r3, r3, #3
 8003266:	f043 0201 	orr.w	r2, r3, #1
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	655a      	str	r2, [r3, #84]	@ 0x54
 800326e:	e007      	b.n	8003280 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003274:	f043 0210 	orr.w	r2, r3, #16
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003280:	7ffb      	ldrb	r3, [r7, #31]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3724      	adds	r7, #36	@ 0x24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd90      	pop	{r4, r7, pc}
 800328a:	bf00      	nop

0800328c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a5c      	ldr	r2, [pc, #368]	@ (800340c <HAL_ADC_Start+0x180>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d004      	beq.n	80032a8 <HAL_ADC_Start+0x1c>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a5b      	ldr	r2, [pc, #364]	@ (8003410 <HAL_ADC_Start+0x184>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d101      	bne.n	80032ac <HAL_ADC_Start+0x20>
 80032a8:	4b5a      	ldr	r3, [pc, #360]	@ (8003414 <HAL_ADC_Start+0x188>)
 80032aa:	e000      	b.n	80032ae <HAL_ADC_Start+0x22>
 80032ac:	4b5a      	ldr	r3, [pc, #360]	@ (8003418 <HAL_ADC_Start+0x18c>)
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff fd2e 	bl	8002d10 <LL_ADC_GetMultimode>
 80032b4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff fe08 	bl	8002ed0 <LL_ADC_REG_IsConversionOngoing>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f040 809a 	bne.w	80033fc <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d101      	bne.n	80032d6 <HAL_ADC_Start+0x4a>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e095      	b.n	8003402 <HAL_ADC_Start+0x176>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fd80 	bl	8003de4 <ADC_Enable>
 80032e4:	4603      	mov	r3, r0
 80032e6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80032e8:	7dfb      	ldrb	r3, [r7, #23]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f040 8081 	bne.w	80033f2 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80032f4:	4b49      	ldr	r3, [pc, #292]	@ (800341c <HAL_ADC_Start+0x190>)
 80032f6:	4013      	ands	r3, r2
 80032f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a42      	ldr	r2, [pc, #264]	@ (8003410 <HAL_ADC_Start+0x184>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d002      	beq.n	8003310 <HAL_ADC_Start+0x84>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	e000      	b.n	8003312 <HAL_ADC_Start+0x86>
 8003310:	4b3e      	ldr	r3, [pc, #248]	@ (800340c <HAL_ADC_Start+0x180>)
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6812      	ldr	r2, [r2, #0]
 8003316:	4293      	cmp	r3, r2
 8003318:	d002      	beq.n	8003320 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d105      	bne.n	800332c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003324:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003330:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003334:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003338:	d106      	bne.n	8003348 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800333e:	f023 0206 	bic.w	r2, r3, #6
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	659a      	str	r2, [r3, #88]	@ 0x58
 8003346:	e002      	b.n	800334e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	221c      	movs	r2, #28
 8003354:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a2b      	ldr	r2, [pc, #172]	@ (8003410 <HAL_ADC_Start+0x184>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d002      	beq.n	800336e <HAL_ADC_Start+0xe2>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	e000      	b.n	8003370 <HAL_ADC_Start+0xe4>
 800336e:	4b27      	ldr	r3, [pc, #156]	@ (800340c <HAL_ADC_Start+0x180>)
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6812      	ldr	r2, [r2, #0]
 8003374:	4293      	cmp	r3, r2
 8003376:	d008      	beq.n	800338a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d005      	beq.n	800338a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	2b05      	cmp	r3, #5
 8003382:	d002      	beq.n	800338a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	2b09      	cmp	r3, #9
 8003388:	d114      	bne.n	80033b4 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d007      	beq.n	80033a8 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800339c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80033a0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff fd67 	bl	8002e80 <LL_ADC_REG_StartConversion>
 80033b2:	e025      	b.n	8003400 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a12      	ldr	r2, [pc, #72]	@ (8003410 <HAL_ADC_Start+0x184>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d002      	beq.n	80033d0 <HAL_ADC_Start+0x144>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	e000      	b.n	80033d2 <HAL_ADC_Start+0x146>
 80033d0:	4b0e      	ldr	r3, [pc, #56]	@ (800340c <HAL_ADC_Start+0x180>)
 80033d2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00f      	beq.n	8003400 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80033e8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80033f0:	e006      	b.n	8003400 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80033fa:	e001      	b.n	8003400 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80033fc:	2302      	movs	r3, #2
 80033fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003400:	7dfb      	ldrb	r3, [r7, #23]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40022000 	.word	0x40022000
 8003410:	40022100 	.word	0x40022100
 8003414:	40022300 	.word	0x40022300
 8003418:	58026300 	.word	0x58026300
 800341c:	fffff0fe 	.word	0xfffff0fe

08003420 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_ADC_Stop+0x16>
 8003432:	2302      	movs	r3, #2
 8003434:	e021      	b.n	800347a <HAL_ADC_Stop+0x5a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800343e:	2103      	movs	r1, #3
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 fc13 	bl	8003c6c <ADC_ConversionStop>
 8003446:	4603      	mov	r3, r0
 8003448:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10f      	bne.n	8003470 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 fd51 	bl	8003ef8 <ADC_Disable>
 8003456:	4603      	mov	r3, r0
 8003458:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800345a:	7bfb      	ldrb	r3, [r7, #15]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d107      	bne.n	8003470 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003464:	4b07      	ldr	r3, [pc, #28]	@ (8003484 <HAL_ADC_Stop+0x64>)
 8003466:	4013      	ands	r3, r2
 8003468:	f043 0201 	orr.w	r2, r3, #1
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003478:	7bfb      	ldrb	r3, [r7, #15]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	ffffeefe 	.word	0xffffeefe

08003488 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b088      	sub	sp, #32
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a72      	ldr	r2, [pc, #456]	@ (8003660 <HAL_ADC_PollForConversion+0x1d8>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d004      	beq.n	80034a6 <HAL_ADC_PollForConversion+0x1e>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a70      	ldr	r2, [pc, #448]	@ (8003664 <HAL_ADC_PollForConversion+0x1dc>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d101      	bne.n	80034aa <HAL_ADC_PollForConversion+0x22>
 80034a6:	4b70      	ldr	r3, [pc, #448]	@ (8003668 <HAL_ADC_PollForConversion+0x1e0>)
 80034a8:	e000      	b.n	80034ac <HAL_ADC_PollForConversion+0x24>
 80034aa:	4b70      	ldr	r3, [pc, #448]	@ (800366c <HAL_ADC_PollForConversion+0x1e4>)
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff fc2f 	bl	8002d10 <LL_ADC_GetMultimode>
 80034b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d102      	bne.n	80034c2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80034bc:	2308      	movs	r3, #8
 80034be:	61fb      	str	r3, [r7, #28]
 80034c0:	e037      	b.n	8003532 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	2b05      	cmp	r3, #5
 80034cc:	d002      	beq.n	80034d4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	2b09      	cmp	r3, #9
 80034d2:	d111      	bne.n	80034f8 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d007      	beq.n	80034f2 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e6:	f043 0220 	orr.w	r2, r3, #32
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e0b1      	b.n	8003656 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80034f2:	2304      	movs	r3, #4
 80034f4:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80034f6:	e01c      	b.n	8003532 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a58      	ldr	r2, [pc, #352]	@ (8003660 <HAL_ADC_PollForConversion+0x1d8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d004      	beq.n	800350c <HAL_ADC_PollForConversion+0x84>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a57      	ldr	r2, [pc, #348]	@ (8003664 <HAL_ADC_PollForConversion+0x1dc>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d101      	bne.n	8003510 <HAL_ADC_PollForConversion+0x88>
 800350c:	4b56      	ldr	r3, [pc, #344]	@ (8003668 <HAL_ADC_PollForConversion+0x1e0>)
 800350e:	e000      	b.n	8003512 <HAL_ADC_PollForConversion+0x8a>
 8003510:	4b56      	ldr	r3, [pc, #344]	@ (800366c <HAL_ADC_PollForConversion+0x1e4>)
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff fc0a 	bl	8002d2c <LL_ADC_GetMultiDMATransfer>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d007      	beq.n	800352e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003522:	f043 0220 	orr.w	r2, r3, #32
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e093      	b.n	8003656 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800352e:	2304      	movs	r3, #4
 8003530:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003532:	f7ff fa51 	bl	80029d8 <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003538:	e021      	b.n	800357e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003540:	d01d      	beq.n	800357e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003542:	f7ff fa49 	bl	80029d8 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d302      	bcc.n	8003558 <HAL_ADC_PollForConversion+0xd0>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d112      	bne.n	800357e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	4013      	ands	r3, r2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10b      	bne.n	800357e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800356a:	f043 0204 	orr.w	r2, r3, #4
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e06b      	b.n	8003656 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	4013      	ands	r3, r2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0d6      	beq.n	800353a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003590:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff fb28 	bl	8002bf2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d01c      	beq.n	80035e2 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	7d5b      	ldrb	r3, [r3, #21]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d118      	bne.n	80035e2 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b08      	cmp	r3, #8
 80035bc:	d111      	bne.n	80035e2 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d105      	bne.n	80035e2 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035da:	f043 0201 	orr.w	r2, r3, #1
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a1f      	ldr	r2, [pc, #124]	@ (8003664 <HAL_ADC_PollForConversion+0x1dc>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d002      	beq.n	80035f2 <HAL_ADC_PollForConversion+0x16a>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	e000      	b.n	80035f4 <HAL_ADC_PollForConversion+0x16c>
 80035f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003660 <HAL_ADC_PollForConversion+0x1d8>)
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d008      	beq.n	800360e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d005      	beq.n	800360e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2b05      	cmp	r3, #5
 8003606:	d002      	beq.n	800360e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	2b09      	cmp	r3, #9
 800360c:	d104      	bne.n	8003618 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	61bb      	str	r3, [r7, #24]
 8003616:	e00c      	b.n	8003632 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a11      	ldr	r2, [pc, #68]	@ (8003664 <HAL_ADC_PollForConversion+0x1dc>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d002      	beq.n	8003628 <HAL_ADC_PollForConversion+0x1a0>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	e000      	b.n	800362a <HAL_ADC_PollForConversion+0x1a2>
 8003628:	4b0d      	ldr	r3, [pc, #52]	@ (8003660 <HAL_ADC_PollForConversion+0x1d8>)
 800362a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	2b08      	cmp	r3, #8
 8003636:	d104      	bne.n	8003642 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2208      	movs	r2, #8
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	e008      	b.n	8003654 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d103      	bne.n	8003654 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	220c      	movs	r2, #12
 8003652:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3720      	adds	r7, #32
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40022000 	.word	0x40022000
 8003664:	40022100 	.word	0x40022100
 8003668:	40022300 	.word	0x40022300
 800366c:	58026300 	.word	0x58026300

08003670 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800367e:	4618      	mov	r0, r3
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
	...

0800368c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800368c:	b590      	push	{r4, r7, lr}
 800368e:	b08d      	sub	sp, #52	@ 0x34
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	4a65      	ldr	r2, [pc, #404]	@ (800383c <HAL_ADC_ConfigChannel+0x1b0>)
 80036a6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d101      	bne.n	80036b6 <HAL_ADC_ConfigChannel+0x2a>
 80036b2:	2302      	movs	r3, #2
 80036b4:	e2c7      	b.n	8003c46 <HAL_ADC_ConfigChannel+0x5ba>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff fc04 	bl	8002ed0 <LL_ADC_REG_IsConversionOngoing>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f040 82ac 	bne.w	8003c28 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	db2c      	blt.n	8003732 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d108      	bne.n	80036f6 <HAL_ADC_ConfigChannel+0x6a>
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	0e9b      	lsrs	r3, r3, #26
 80036ea:	f003 031f 	and.w	r3, r3, #31
 80036ee:	2201      	movs	r2, #1
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	e016      	b.n	8003724 <HAL_ADC_ConfigChannel+0x98>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	fa93 f3a3 	rbit	r3, r3
 8003702:	613b      	str	r3, [r7, #16]
  return result;
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 800370e:	2320      	movs	r3, #32
 8003710:	e003      	b.n	800371a <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	fab3 f383 	clz	r3, r3
 8003718:	b2db      	uxtb	r3, r3
 800371a:	f003 031f 	and.w	r3, r3, #31
 800371e:	2201      	movs	r2, #1
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	69d1      	ldr	r1, [r2, #28]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6812      	ldr	r2, [r2, #0]
 800372e:	430b      	orrs	r3, r1
 8003730:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6818      	ldr	r0, [r3, #0]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	6859      	ldr	r1, [r3, #4]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	f7ff fa6a 	bl	8002c18 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff fbc1 	bl	8002ed0 <LL_ADC_REG_IsConversionOngoing>
 800374e:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff fbe3 	bl	8002f20 <LL_ADC_INJ_IsConversionOngoing>
 800375a:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800375c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800375e:	2b00      	cmp	r3, #0
 8003760:	f040 80b8 	bne.w	80038d4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003766:	2b00      	cmp	r3, #0
 8003768:	f040 80b4 	bne.w	80038d4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6818      	ldr	r0, [r3, #0]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	6819      	ldr	r1, [r3, #0]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	461a      	mov	r2, r3
 800377a:	f7ff fa79 	bl	8002c70 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800377e:	4b30      	ldr	r3, [pc, #192]	@ (8003840 <HAL_ADC_ConfigChannel+0x1b4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003786:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800378a:	d10b      	bne.n	80037a4 <HAL_ADC_ConfigChannel+0x118>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	695a      	ldr	r2, [r3, #20]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	089b      	lsrs	r3, r3, #2
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	e01d      	b.n	80037e0 <HAL_ADC_ConfigChannel+0x154>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f003 0310 	and.w	r3, r3, #16
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10b      	bne.n	80037ca <HAL_ADC_ConfigChannel+0x13e>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	089b      	lsrs	r3, r3, #2
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	e00a      	b.n	80037e0 <HAL_ADC_ConfigChannel+0x154>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	695a      	ldr	r2, [r3, #20]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	089b      	lsrs	r3, r3, #2
 80037d6:	f003 0304 	and.w	r3, r3, #4
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d02c      	beq.n	8003844 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6818      	ldr	r0, [r3, #0]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	6919      	ldr	r1, [r3, #16]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	f7ff f9a7 	bl	8002b4a <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6818      	ldr	r0, [r3, #0]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	6919      	ldr	r1, [r3, #16]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	7e5b      	ldrb	r3, [r3, #25]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d102      	bne.n	8003812 <HAL_ADC_ConfigChannel+0x186>
 800380c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003810:	e000      	b.n	8003814 <HAL_ADC_ConfigChannel+0x188>
 8003812:	2300      	movs	r3, #0
 8003814:	461a      	mov	r2, r3
 8003816:	f7ff f9d1 	bl	8002bbc <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	6919      	ldr	r1, [r3, #16]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	7e1b      	ldrb	r3, [r3, #24]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d102      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x1a4>
 800382a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800382e:	e000      	b.n	8003832 <HAL_ADC_ConfigChannel+0x1a6>
 8003830:	2300      	movs	r3, #0
 8003832:	461a      	mov	r2, r3
 8003834:	f7ff f9a9 	bl	8002b8a <LL_ADC_SetDataRightShift>
 8003838:	e04c      	b.n	80038d4 <HAL_ADC_ConfigChannel+0x248>
 800383a:	bf00      	nop
 800383c:	47ff0000 	.word	0x47ff0000
 8003840:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800384a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	069b      	lsls	r3, r3, #26
 8003854:	429a      	cmp	r2, r3
 8003856:	d107      	bne.n	8003868 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003866:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800386e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	069b      	lsls	r3, r3, #26
 8003878:	429a      	cmp	r2, r3
 800387a:	d107      	bne.n	800388c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800388a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003892:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	069b      	lsls	r3, r3, #26
 800389c:	429a      	cmp	r2, r3
 800389e:	d107      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80038ae:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	069b      	lsls	r3, r3, #26
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d107      	bne.n	80038d4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80038d2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff faab 	bl	8002e34 <LL_ADC_IsEnabled>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f040 81aa 	bne.w	8003c3a <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6818      	ldr	r0, [r3, #0]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	6819      	ldr	r1, [r3, #0]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	461a      	mov	r2, r3
 80038f4:	f7ff f9e8 	bl	8002cc8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	4a87      	ldr	r2, [pc, #540]	@ (8003b1c <HAL_ADC_ConfigChannel+0x490>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	f040 809a 	bne.w	8003a38 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4984      	ldr	r1, [pc, #528]	@ (8003b20 <HAL_ADC_ConfigChannel+0x494>)
 800390e:	428b      	cmp	r3, r1
 8003910:	d147      	bne.n	80039a2 <HAL_ADC_ConfigChannel+0x316>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4983      	ldr	r1, [pc, #524]	@ (8003b24 <HAL_ADC_ConfigChannel+0x498>)
 8003918:	428b      	cmp	r3, r1
 800391a:	d040      	beq.n	800399e <HAL_ADC_ConfigChannel+0x312>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4981      	ldr	r1, [pc, #516]	@ (8003b28 <HAL_ADC_ConfigChannel+0x49c>)
 8003922:	428b      	cmp	r3, r1
 8003924:	d039      	beq.n	800399a <HAL_ADC_ConfigChannel+0x30e>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4980      	ldr	r1, [pc, #512]	@ (8003b2c <HAL_ADC_ConfigChannel+0x4a0>)
 800392c:	428b      	cmp	r3, r1
 800392e:	d032      	beq.n	8003996 <HAL_ADC_ConfigChannel+0x30a>
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	497e      	ldr	r1, [pc, #504]	@ (8003b30 <HAL_ADC_ConfigChannel+0x4a4>)
 8003936:	428b      	cmp	r3, r1
 8003938:	d02b      	beq.n	8003992 <HAL_ADC_ConfigChannel+0x306>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	497d      	ldr	r1, [pc, #500]	@ (8003b34 <HAL_ADC_ConfigChannel+0x4a8>)
 8003940:	428b      	cmp	r3, r1
 8003942:	d024      	beq.n	800398e <HAL_ADC_ConfigChannel+0x302>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	497b      	ldr	r1, [pc, #492]	@ (8003b38 <HAL_ADC_ConfigChannel+0x4ac>)
 800394a:	428b      	cmp	r3, r1
 800394c:	d01d      	beq.n	800398a <HAL_ADC_ConfigChannel+0x2fe>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	497a      	ldr	r1, [pc, #488]	@ (8003b3c <HAL_ADC_ConfigChannel+0x4b0>)
 8003954:	428b      	cmp	r3, r1
 8003956:	d016      	beq.n	8003986 <HAL_ADC_ConfigChannel+0x2fa>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4978      	ldr	r1, [pc, #480]	@ (8003b40 <HAL_ADC_ConfigChannel+0x4b4>)
 800395e:	428b      	cmp	r3, r1
 8003960:	d00f      	beq.n	8003982 <HAL_ADC_ConfigChannel+0x2f6>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4977      	ldr	r1, [pc, #476]	@ (8003b44 <HAL_ADC_ConfigChannel+0x4b8>)
 8003968:	428b      	cmp	r3, r1
 800396a:	d008      	beq.n	800397e <HAL_ADC_ConfigChannel+0x2f2>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4975      	ldr	r1, [pc, #468]	@ (8003b48 <HAL_ADC_ConfigChannel+0x4bc>)
 8003972:	428b      	cmp	r3, r1
 8003974:	d101      	bne.n	800397a <HAL_ADC_ConfigChannel+0x2ee>
 8003976:	4b75      	ldr	r3, [pc, #468]	@ (8003b4c <HAL_ADC_ConfigChannel+0x4c0>)
 8003978:	e05a      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 800397a:	2300      	movs	r3, #0
 800397c:	e058      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 800397e:	4b74      	ldr	r3, [pc, #464]	@ (8003b50 <HAL_ADC_ConfigChannel+0x4c4>)
 8003980:	e056      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 8003982:	4b74      	ldr	r3, [pc, #464]	@ (8003b54 <HAL_ADC_ConfigChannel+0x4c8>)
 8003984:	e054      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 8003986:	4b6e      	ldr	r3, [pc, #440]	@ (8003b40 <HAL_ADC_ConfigChannel+0x4b4>)
 8003988:	e052      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 800398a:	4b6c      	ldr	r3, [pc, #432]	@ (8003b3c <HAL_ADC_ConfigChannel+0x4b0>)
 800398c:	e050      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 800398e:	4b72      	ldr	r3, [pc, #456]	@ (8003b58 <HAL_ADC_ConfigChannel+0x4cc>)
 8003990:	e04e      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 8003992:	4b72      	ldr	r3, [pc, #456]	@ (8003b5c <HAL_ADC_ConfigChannel+0x4d0>)
 8003994:	e04c      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 8003996:	4b72      	ldr	r3, [pc, #456]	@ (8003b60 <HAL_ADC_ConfigChannel+0x4d4>)
 8003998:	e04a      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 800399a:	4b72      	ldr	r3, [pc, #456]	@ (8003b64 <HAL_ADC_ConfigChannel+0x4d8>)
 800399c:	e048      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 800399e:	2301      	movs	r3, #1
 80039a0:	e046      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4970      	ldr	r1, [pc, #448]	@ (8003b68 <HAL_ADC_ConfigChannel+0x4dc>)
 80039a8:	428b      	cmp	r3, r1
 80039aa:	d140      	bne.n	8003a2e <HAL_ADC_ConfigChannel+0x3a2>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	495c      	ldr	r1, [pc, #368]	@ (8003b24 <HAL_ADC_ConfigChannel+0x498>)
 80039b2:	428b      	cmp	r3, r1
 80039b4:	d039      	beq.n	8003a2a <HAL_ADC_ConfigChannel+0x39e>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	495b      	ldr	r1, [pc, #364]	@ (8003b28 <HAL_ADC_ConfigChannel+0x49c>)
 80039bc:	428b      	cmp	r3, r1
 80039be:	d032      	beq.n	8003a26 <HAL_ADC_ConfigChannel+0x39a>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4959      	ldr	r1, [pc, #356]	@ (8003b2c <HAL_ADC_ConfigChannel+0x4a0>)
 80039c6:	428b      	cmp	r3, r1
 80039c8:	d02b      	beq.n	8003a22 <HAL_ADC_ConfigChannel+0x396>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4958      	ldr	r1, [pc, #352]	@ (8003b30 <HAL_ADC_ConfigChannel+0x4a4>)
 80039d0:	428b      	cmp	r3, r1
 80039d2:	d024      	beq.n	8003a1e <HAL_ADC_ConfigChannel+0x392>
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4956      	ldr	r1, [pc, #344]	@ (8003b34 <HAL_ADC_ConfigChannel+0x4a8>)
 80039da:	428b      	cmp	r3, r1
 80039dc:	d01d      	beq.n	8003a1a <HAL_ADC_ConfigChannel+0x38e>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4955      	ldr	r1, [pc, #340]	@ (8003b38 <HAL_ADC_ConfigChannel+0x4ac>)
 80039e4:	428b      	cmp	r3, r1
 80039e6:	d016      	beq.n	8003a16 <HAL_ADC_ConfigChannel+0x38a>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4953      	ldr	r1, [pc, #332]	@ (8003b3c <HAL_ADC_ConfigChannel+0x4b0>)
 80039ee:	428b      	cmp	r3, r1
 80039f0:	d00f      	beq.n	8003a12 <HAL_ADC_ConfigChannel+0x386>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4952      	ldr	r1, [pc, #328]	@ (8003b40 <HAL_ADC_ConfigChannel+0x4b4>)
 80039f8:	428b      	cmp	r3, r1
 80039fa:	d008      	beq.n	8003a0e <HAL_ADC_ConfigChannel+0x382>
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4951      	ldr	r1, [pc, #324]	@ (8003b48 <HAL_ADC_ConfigChannel+0x4bc>)
 8003a02:	428b      	cmp	r3, r1
 8003a04:	d101      	bne.n	8003a0a <HAL_ADC_ConfigChannel+0x37e>
 8003a06:	4b51      	ldr	r3, [pc, #324]	@ (8003b4c <HAL_ADC_ConfigChannel+0x4c0>)
 8003a08:	e012      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	e010      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 8003a0e:	4b51      	ldr	r3, [pc, #324]	@ (8003b54 <HAL_ADC_ConfigChannel+0x4c8>)
 8003a10:	e00e      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 8003a12:	4b4b      	ldr	r3, [pc, #300]	@ (8003b40 <HAL_ADC_ConfigChannel+0x4b4>)
 8003a14:	e00c      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 8003a16:	4b49      	ldr	r3, [pc, #292]	@ (8003b3c <HAL_ADC_ConfigChannel+0x4b0>)
 8003a18:	e00a      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 8003a1a:	4b4f      	ldr	r3, [pc, #316]	@ (8003b58 <HAL_ADC_ConfigChannel+0x4cc>)
 8003a1c:	e008      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 8003a1e:	4b4f      	ldr	r3, [pc, #316]	@ (8003b5c <HAL_ADC_ConfigChannel+0x4d0>)
 8003a20:	e006      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 8003a22:	4b4f      	ldr	r3, [pc, #316]	@ (8003b60 <HAL_ADC_ConfigChannel+0x4d4>)
 8003a24:	e004      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 8003a26:	4b4f      	ldr	r3, [pc, #316]	@ (8003b64 <HAL_ADC_ConfigChannel+0x4d8>)
 8003a28:	e002      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x3a4>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	4619      	mov	r1, r3
 8003a32:	4610      	mov	r0, r2
 8003a34:	f7ff f856 	bl	8002ae4 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f280 80fc 	bge.w	8003c3a <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a36      	ldr	r2, [pc, #216]	@ (8003b20 <HAL_ADC_ConfigChannel+0x494>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d004      	beq.n	8003a56 <HAL_ADC_ConfigChannel+0x3ca>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a45      	ldr	r2, [pc, #276]	@ (8003b68 <HAL_ADC_ConfigChannel+0x4dc>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d101      	bne.n	8003a5a <HAL_ADC_ConfigChannel+0x3ce>
 8003a56:	4b45      	ldr	r3, [pc, #276]	@ (8003b6c <HAL_ADC_ConfigChannel+0x4e0>)
 8003a58:	e000      	b.n	8003a5c <HAL_ADC_ConfigChannel+0x3d0>
 8003a5a:	4b45      	ldr	r3, [pc, #276]	@ (8003b70 <HAL_ADC_ConfigChannel+0x4e4>)
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff f833 	bl	8002ac8 <LL_ADC_GetCommonPathInternalCh>
 8003a62:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a2d      	ldr	r2, [pc, #180]	@ (8003b20 <HAL_ADC_ConfigChannel+0x494>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d004      	beq.n	8003a78 <HAL_ADC_ConfigChannel+0x3ec>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a3d      	ldr	r2, [pc, #244]	@ (8003b68 <HAL_ADC_ConfigChannel+0x4dc>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d10e      	bne.n	8003a96 <HAL_ADC_ConfigChannel+0x40a>
 8003a78:	4829      	ldr	r0, [pc, #164]	@ (8003b20 <HAL_ADC_ConfigChannel+0x494>)
 8003a7a:	f7ff f9db 	bl	8002e34 <LL_ADC_IsEnabled>
 8003a7e:	4604      	mov	r4, r0
 8003a80:	4839      	ldr	r0, [pc, #228]	@ (8003b68 <HAL_ADC_ConfigChannel+0x4dc>)
 8003a82:	f7ff f9d7 	bl	8002e34 <LL_ADC_IsEnabled>
 8003a86:	4603      	mov	r3, r0
 8003a88:	4323      	orrs	r3, r4
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	bf0c      	ite	eq
 8003a8e:	2301      	moveq	r3, #1
 8003a90:	2300      	movne	r3, #0
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	e008      	b.n	8003aa8 <HAL_ADC_ConfigChannel+0x41c>
 8003a96:	4837      	ldr	r0, [pc, #220]	@ (8003b74 <HAL_ADC_ConfigChannel+0x4e8>)
 8003a98:	f7ff f9cc 	bl	8002e34 <LL_ADC_IsEnabled>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	bf0c      	ite	eq
 8003aa2:	2301      	moveq	r3, #1
 8003aa4:	2300      	movne	r3, #0
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 80b3 	beq.w	8003c14 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a31      	ldr	r2, [pc, #196]	@ (8003b78 <HAL_ADC_ConfigChannel+0x4ec>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d165      	bne.n	8003b84 <HAL_ADC_ConfigChannel+0x4f8>
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d160      	bne.n	8003b84 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a2b      	ldr	r2, [pc, #172]	@ (8003b74 <HAL_ADC_ConfigChannel+0x4e8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	f040 80b6 	bne.w	8003c3a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a13      	ldr	r2, [pc, #76]	@ (8003b20 <HAL_ADC_ConfigChannel+0x494>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d004      	beq.n	8003ae2 <HAL_ADC_ConfigChannel+0x456>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a22      	ldr	r2, [pc, #136]	@ (8003b68 <HAL_ADC_ConfigChannel+0x4dc>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d101      	bne.n	8003ae6 <HAL_ADC_ConfigChannel+0x45a>
 8003ae2:	4a22      	ldr	r2, [pc, #136]	@ (8003b6c <HAL_ADC_ConfigChannel+0x4e0>)
 8003ae4:	e000      	b.n	8003ae8 <HAL_ADC_ConfigChannel+0x45c>
 8003ae6:	4a22      	ldr	r2, [pc, #136]	@ (8003b70 <HAL_ADC_ConfigChannel+0x4e4>)
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003aee:	4619      	mov	r1, r3
 8003af0:	4610      	mov	r0, r2
 8003af2:	f7fe ffd6 	bl	8002aa2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003af6:	4b21      	ldr	r3, [pc, #132]	@ (8003b7c <HAL_ADC_ConfigChannel+0x4f0>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	099b      	lsrs	r3, r3, #6
 8003afc:	4a20      	ldr	r2, [pc, #128]	@ (8003b80 <HAL_ADC_ConfigChannel+0x4f4>)
 8003afe:	fba2 2303 	umull	r2, r3, r2, r3
 8003b02:	099b      	lsrs	r3, r3, #6
 8003b04:	3301      	adds	r3, #1
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003b0a:	e002      	b.n	8003b12 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1f9      	bne.n	8003b0c <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b18:	e08f      	b.n	8003c3a <HAL_ADC_ConfigChannel+0x5ae>
 8003b1a:	bf00      	nop
 8003b1c:	47ff0000 	.word	0x47ff0000
 8003b20:	40022000 	.word	0x40022000
 8003b24:	04300002 	.word	0x04300002
 8003b28:	08600004 	.word	0x08600004
 8003b2c:	0c900008 	.word	0x0c900008
 8003b30:	10c00010 	.word	0x10c00010
 8003b34:	14f00020 	.word	0x14f00020
 8003b38:	2a000400 	.word	0x2a000400
 8003b3c:	2e300800 	.word	0x2e300800
 8003b40:	32601000 	.word	0x32601000
 8003b44:	43210000 	.word	0x43210000
 8003b48:	4b840000 	.word	0x4b840000
 8003b4c:	4fb80000 	.word	0x4fb80000
 8003b50:	47520000 	.word	0x47520000
 8003b54:	36902000 	.word	0x36902000
 8003b58:	25b00200 	.word	0x25b00200
 8003b5c:	21800100 	.word	0x21800100
 8003b60:	1d500080 	.word	0x1d500080
 8003b64:	19200040 	.word	0x19200040
 8003b68:	40022100 	.word	0x40022100
 8003b6c:	40022300 	.word	0x40022300
 8003b70:	58026300 	.word	0x58026300
 8003b74:	58026000 	.word	0x58026000
 8003b78:	cb840000 	.word	0xcb840000
 8003b7c:	24000388 	.word	0x24000388
 8003b80:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a31      	ldr	r2, [pc, #196]	@ (8003c50 <HAL_ADC_ConfigChannel+0x5c4>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d11e      	bne.n	8003bcc <HAL_ADC_ConfigChannel+0x540>
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d119      	bne.n	8003bcc <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a2d      	ldr	r2, [pc, #180]	@ (8003c54 <HAL_ADC_ConfigChannel+0x5c8>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d14b      	bne.n	8003c3a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a2c      	ldr	r2, [pc, #176]	@ (8003c58 <HAL_ADC_ConfigChannel+0x5cc>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d004      	beq.n	8003bb6 <HAL_ADC_ConfigChannel+0x52a>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a2a      	ldr	r2, [pc, #168]	@ (8003c5c <HAL_ADC_ConfigChannel+0x5d0>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d101      	bne.n	8003bba <HAL_ADC_ConfigChannel+0x52e>
 8003bb6:	4a2a      	ldr	r2, [pc, #168]	@ (8003c60 <HAL_ADC_ConfigChannel+0x5d4>)
 8003bb8:	e000      	b.n	8003bbc <HAL_ADC_ConfigChannel+0x530>
 8003bba:	4a2a      	ldr	r2, [pc, #168]	@ (8003c64 <HAL_ADC_ConfigChannel+0x5d8>)
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	4610      	mov	r0, r2
 8003bc6:	f7fe ff6c 	bl	8002aa2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bca:	e036      	b.n	8003c3a <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a25      	ldr	r2, [pc, #148]	@ (8003c68 <HAL_ADC_ConfigChannel+0x5dc>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d131      	bne.n	8003c3a <HAL_ADC_ConfigChannel+0x5ae>
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d12c      	bne.n	8003c3a <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a1b      	ldr	r2, [pc, #108]	@ (8003c54 <HAL_ADC_ConfigChannel+0x5c8>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d127      	bne.n	8003c3a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a1a      	ldr	r2, [pc, #104]	@ (8003c58 <HAL_ADC_ConfigChannel+0x5cc>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d004      	beq.n	8003bfe <HAL_ADC_ConfigChannel+0x572>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a18      	ldr	r2, [pc, #96]	@ (8003c5c <HAL_ADC_ConfigChannel+0x5d0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d101      	bne.n	8003c02 <HAL_ADC_ConfigChannel+0x576>
 8003bfe:	4a18      	ldr	r2, [pc, #96]	@ (8003c60 <HAL_ADC_ConfigChannel+0x5d4>)
 8003c00:	e000      	b.n	8003c04 <HAL_ADC_ConfigChannel+0x578>
 8003c02:	4a18      	ldr	r2, [pc, #96]	@ (8003c64 <HAL_ADC_ConfigChannel+0x5d8>)
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	f7fe ff48 	bl	8002aa2 <LL_ADC_SetCommonPathInternalCh>
 8003c12:	e012      	b.n	8003c3a <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c18:	f043 0220 	orr.w	r2, r3, #32
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003c26:	e008      	b.n	8003c3a <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c2c:	f043 0220 	orr.w	r2, r3, #32
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003c42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3734      	adds	r7, #52	@ 0x34
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd90      	pop	{r4, r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	c7520000 	.word	0xc7520000
 8003c54:	58026000 	.word	0x58026000
 8003c58:	40022000 	.word	0x40022000
 8003c5c:	40022100 	.word	0x40022100
 8003c60:	40022300 	.word	0x40022300
 8003c64:	58026300 	.word	0x58026300
 8003c68:	cfb80000 	.word	0xcfb80000

08003c6c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b088      	sub	sp, #32
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003c76:	2300      	movs	r3, #0
 8003c78:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff f924 	bl	8002ed0 <LL_ADC_REG_IsConversionOngoing>
 8003c88:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff f946 	bl	8002f20 <LL_ADC_INJ_IsConversionOngoing>
 8003c94:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d103      	bne.n	8003ca4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 8098 	beq.w	8003dd4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d02a      	beq.n	8003d08 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	7d5b      	ldrb	r3, [r3, #21]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d126      	bne.n	8003d08 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	7d1b      	ldrb	r3, [r3, #20]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d122      	bne.n	8003d08 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003cc6:	e014      	b.n	8003cf2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	4a45      	ldr	r2, [pc, #276]	@ (8003de0 <ADC_ConversionStop+0x174>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d90d      	bls.n	8003cec <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd4:	f043 0210 	orr.w	r2, r3, #16
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce0:	f043 0201 	orr.w	r2, r3, #1
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e074      	b.n	8003dd6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cfc:	2b40      	cmp	r3, #64	@ 0x40
 8003cfe:	d1e3      	bne.n	8003cc8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2240      	movs	r2, #64	@ 0x40
 8003d06:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d014      	beq.n	8003d38 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff f8dc 	bl	8002ed0 <LL_ADC_REG_IsConversionOngoing>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00c      	beq.n	8003d38 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff f899 	bl	8002e5a <LL_ADC_IsDisableOngoing>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d104      	bne.n	8003d38 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7ff f8b8 	bl	8002ea8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d014      	beq.n	8003d68 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff f8ec 	bl	8002f20 <LL_ADC_INJ_IsConversionOngoing>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00c      	beq.n	8003d68 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff f881 	bl	8002e5a <LL_ADC_IsDisableOngoing>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d104      	bne.n	8003d68 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7ff f8c8 	bl	8002ef8 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d005      	beq.n	8003d7a <ADC_ConversionStop+0x10e>
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	2b03      	cmp	r3, #3
 8003d72:	d105      	bne.n	8003d80 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003d74:	230c      	movs	r3, #12
 8003d76:	617b      	str	r3, [r7, #20]
        break;
 8003d78:	e005      	b.n	8003d86 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003d7a:	2308      	movs	r3, #8
 8003d7c:	617b      	str	r3, [r7, #20]
        break;
 8003d7e:	e002      	b.n	8003d86 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003d80:	2304      	movs	r3, #4
 8003d82:	617b      	str	r3, [r7, #20]
        break;
 8003d84:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003d86:	f7fe fe27 	bl	80029d8 <HAL_GetTick>
 8003d8a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003d8c:	e01b      	b.n	8003dc6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003d8e:	f7fe fe23 	bl	80029d8 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b05      	cmp	r3, #5
 8003d9a:	d914      	bls.n	8003dc6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689a      	ldr	r2, [r3, #8]
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	4013      	ands	r3, r2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00d      	beq.n	8003dc6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dae:	f043 0210 	orr.w	r2, r3, #16
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dba:	f043 0201 	orr.w	r2, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e007      	b.n	8003dd6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1dc      	bne.n	8003d8e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3720      	adds	r7, #32
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	000cdbff 	.word	0x000cdbff

08003de4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff f81f 	bl	8002e34 <LL_ADC_IsEnabled>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d16e      	bne.n	8003eda <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	4b38      	ldr	r3, [pc, #224]	@ (8003ee4 <ADC_Enable+0x100>)
 8003e04:	4013      	ands	r3, r2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00d      	beq.n	8003e26 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e0e:	f043 0210 	orr.w	r2, r3, #16
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e1a:	f043 0201 	orr.w	r2, r3, #1
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e05a      	b.n	8003edc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fe ffda 	bl	8002de4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003e30:	f7fe fdd2 	bl	80029d8 <HAL_GetTick>
 8003e34:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a2b      	ldr	r2, [pc, #172]	@ (8003ee8 <ADC_Enable+0x104>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d004      	beq.n	8003e4a <ADC_Enable+0x66>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a29      	ldr	r2, [pc, #164]	@ (8003eec <ADC_Enable+0x108>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d101      	bne.n	8003e4e <ADC_Enable+0x6a>
 8003e4a:	4b29      	ldr	r3, [pc, #164]	@ (8003ef0 <ADC_Enable+0x10c>)
 8003e4c:	e000      	b.n	8003e50 <ADC_Enable+0x6c>
 8003e4e:	4b29      	ldr	r3, [pc, #164]	@ (8003ef4 <ADC_Enable+0x110>)
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fe ff5d 	bl	8002d10 <LL_ADC_GetMultimode>
 8003e56:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a23      	ldr	r2, [pc, #140]	@ (8003eec <ADC_Enable+0x108>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d002      	beq.n	8003e68 <ADC_Enable+0x84>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	e000      	b.n	8003e6a <ADC_Enable+0x86>
 8003e68:	4b1f      	ldr	r3, [pc, #124]	@ (8003ee8 <ADC_Enable+0x104>)
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6812      	ldr	r2, [r2, #0]
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d02c      	beq.n	8003ecc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d130      	bne.n	8003eda <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e78:	e028      	b.n	8003ecc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fe ffd8 	bl	8002e34 <LL_ADC_IsEnabled>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d104      	bne.n	8003e94 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fe ffa8 	bl	8002de4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e94:	f7fe fda0 	bl	80029d8 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d914      	bls.n	8003ecc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d00d      	beq.n	8003ecc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb4:	f043 0210 	orr.w	r2, r3, #16
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec0:	f043 0201 	orr.w	r2, r3, #1
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e007      	b.n	8003edc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d1cf      	bne.n	8003e7a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	8000003f 	.word	0x8000003f
 8003ee8:	40022000 	.word	0x40022000
 8003eec:	40022100 	.word	0x40022100
 8003ef0:	40022300 	.word	0x40022300
 8003ef4:	58026300 	.word	0x58026300

08003ef8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7fe ffa8 	bl	8002e5a <LL_ADC_IsDisableOngoing>
 8003f0a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fe ff8f 	bl	8002e34 <LL_ADC_IsEnabled>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d047      	beq.n	8003fac <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d144      	bne.n	8003fac <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f003 030d 	and.w	r3, r3, #13
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d10c      	bne.n	8003f4a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fe ff69 	bl	8002e0c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2203      	movs	r2, #3
 8003f40:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f42:	f7fe fd49 	bl	80029d8 <HAL_GetTick>
 8003f46:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f48:	e029      	b.n	8003f9e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f4e:	f043 0210 	orr.w	r2, r3, #16
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f5a:	f043 0201 	orr.w	r2, r3, #1
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e023      	b.n	8003fae <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003f66:	f7fe fd37 	bl	80029d8 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d914      	bls.n	8003f9e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00d      	beq.n	8003f9e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f86:	f043 0210 	orr.w	r2, r3, #16
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f92:	f043 0201 	orr.w	r2, r3, #1
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e007      	b.n	8003fae <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1dc      	bne.n	8003f66 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
	...

08003fb8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a7a      	ldr	r2, [pc, #488]	@ (80041b0 <ADC_ConfigureBoostMode+0x1f8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d004      	beq.n	8003fd4 <ADC_ConfigureBoostMode+0x1c>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a79      	ldr	r2, [pc, #484]	@ (80041b4 <ADC_ConfigureBoostMode+0x1fc>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d109      	bne.n	8003fe8 <ADC_ConfigureBoostMode+0x30>
 8003fd4:	4b78      	ldr	r3, [pc, #480]	@ (80041b8 <ADC_ConfigureBoostMode+0x200>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	bf14      	ite	ne
 8003fe0:	2301      	movne	r3, #1
 8003fe2:	2300      	moveq	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	e008      	b.n	8003ffa <ADC_ConfigureBoostMode+0x42>
 8003fe8:	4b74      	ldr	r3, [pc, #464]	@ (80041bc <ADC_ConfigureBoostMode+0x204>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	bf14      	ite	ne
 8003ff4:	2301      	movne	r3, #1
 8003ff6:	2300      	moveq	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d01c      	beq.n	8004038 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003ffe:	f003 f84d 	bl	800709c <HAL_RCC_GetHCLKFreq>
 8004002:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800400c:	d010      	beq.n	8004030 <ADC_ConfigureBoostMode+0x78>
 800400e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004012:	d873      	bhi.n	80040fc <ADC_ConfigureBoostMode+0x144>
 8004014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004018:	d002      	beq.n	8004020 <ADC_ConfigureBoostMode+0x68>
 800401a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800401e:	d16d      	bne.n	80040fc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	0c1b      	lsrs	r3, r3, #16
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	fbb2 f3f3 	udiv	r3, r2, r3
 800402c:	60fb      	str	r3, [r7, #12]
        break;
 800402e:	e068      	b.n	8004102 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	089b      	lsrs	r3, r3, #2
 8004034:	60fb      	str	r3, [r7, #12]
        break;
 8004036:	e064      	b.n	8004102 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004038:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800403c:	f04f 0100 	mov.w	r1, #0
 8004040:	f004 fa7c 	bl	800853c <HAL_RCCEx_GetPeriphCLKFreq>
 8004044:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800404e:	d051      	beq.n	80040f4 <ADC_ConfigureBoostMode+0x13c>
 8004050:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004054:	d854      	bhi.n	8004100 <ADC_ConfigureBoostMode+0x148>
 8004056:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800405a:	d047      	beq.n	80040ec <ADC_ConfigureBoostMode+0x134>
 800405c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004060:	d84e      	bhi.n	8004100 <ADC_ConfigureBoostMode+0x148>
 8004062:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004066:	d03d      	beq.n	80040e4 <ADC_ConfigureBoostMode+0x12c>
 8004068:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800406c:	d848      	bhi.n	8004100 <ADC_ConfigureBoostMode+0x148>
 800406e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004072:	d033      	beq.n	80040dc <ADC_ConfigureBoostMode+0x124>
 8004074:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004078:	d842      	bhi.n	8004100 <ADC_ConfigureBoostMode+0x148>
 800407a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800407e:	d029      	beq.n	80040d4 <ADC_ConfigureBoostMode+0x11c>
 8004080:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004084:	d83c      	bhi.n	8004100 <ADC_ConfigureBoostMode+0x148>
 8004086:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800408a:	d01a      	beq.n	80040c2 <ADC_ConfigureBoostMode+0x10a>
 800408c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004090:	d836      	bhi.n	8004100 <ADC_ConfigureBoostMode+0x148>
 8004092:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004096:	d014      	beq.n	80040c2 <ADC_ConfigureBoostMode+0x10a>
 8004098:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800409c:	d830      	bhi.n	8004100 <ADC_ConfigureBoostMode+0x148>
 800409e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040a2:	d00e      	beq.n	80040c2 <ADC_ConfigureBoostMode+0x10a>
 80040a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040a8:	d82a      	bhi.n	8004100 <ADC_ConfigureBoostMode+0x148>
 80040aa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80040ae:	d008      	beq.n	80040c2 <ADC_ConfigureBoostMode+0x10a>
 80040b0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80040b4:	d824      	bhi.n	8004100 <ADC_ConfigureBoostMode+0x148>
 80040b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040ba:	d002      	beq.n	80040c2 <ADC_ConfigureBoostMode+0x10a>
 80040bc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80040c0:	d11e      	bne.n	8004100 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	0c9b      	lsrs	r3, r3, #18
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d0:	60fb      	str	r3, [r7, #12]
        break;
 80040d2:	e016      	b.n	8004102 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	091b      	lsrs	r3, r3, #4
 80040d8:	60fb      	str	r3, [r7, #12]
        break;
 80040da:	e012      	b.n	8004102 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	60fb      	str	r3, [r7, #12]
        break;
 80040e2:	e00e      	b.n	8004102 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	099b      	lsrs	r3, r3, #6
 80040e8:	60fb      	str	r3, [r7, #12]
        break;
 80040ea:	e00a      	b.n	8004102 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	09db      	lsrs	r3, r3, #7
 80040f0:	60fb      	str	r3, [r7, #12]
        break;
 80040f2:	e006      	b.n	8004102 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	0a1b      	lsrs	r3, r3, #8
 80040f8:	60fb      	str	r3, [r7, #12]
        break;
 80040fa:	e002      	b.n	8004102 <ADC_ConfigureBoostMode+0x14a>
        break;
 80040fc:	bf00      	nop
 80040fe:	e000      	b.n	8004102 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004100:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004102:	f7fe fc99 	bl	8002a38 <HAL_GetREVID>
 8004106:	4603      	mov	r3, r0
 8004108:	f241 0203 	movw	r2, #4099	@ 0x1003
 800410c:	4293      	cmp	r3, r2
 800410e:	d815      	bhi.n	800413c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4a2b      	ldr	r2, [pc, #172]	@ (80041c0 <ADC_ConfigureBoostMode+0x208>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d908      	bls.n	800412a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689a      	ldr	r2, [r3, #8]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004126:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004128:	e03e      	b.n	80041a8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004138:	609a      	str	r2, [r3, #8]
}
 800413a:	e035      	b.n	80041a8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	085b      	lsrs	r3, r3, #1
 8004140:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	4a1f      	ldr	r2, [pc, #124]	@ (80041c4 <ADC_ConfigureBoostMode+0x20c>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d808      	bhi.n	800415c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004158:	609a      	str	r2, [r3, #8]
}
 800415a:	e025      	b.n	80041a8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4a1a      	ldr	r2, [pc, #104]	@ (80041c8 <ADC_ConfigureBoostMode+0x210>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d80a      	bhi.n	800417a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004176:	609a      	str	r2, [r3, #8]
}
 8004178:	e016      	b.n	80041a8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	4a13      	ldr	r2, [pc, #76]	@ (80041cc <ADC_ConfigureBoostMode+0x214>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d80a      	bhi.n	8004198 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004194:	609a      	str	r2, [r3, #8]
}
 8004196:	e007      	b.n	80041a8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689a      	ldr	r2, [r3, #8]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80041a6:	609a      	str	r2, [r3, #8]
}
 80041a8:	bf00      	nop
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40022000 	.word	0x40022000
 80041b4:	40022100 	.word	0x40022100
 80041b8:	40022300 	.word	0x40022300
 80041bc:	58026300 	.word	0x58026300
 80041c0:	01312d00 	.word	0x01312d00
 80041c4:	005f5e10 	.word	0x005f5e10
 80041c8:	00bebc20 	.word	0x00bebc20
 80041cc:	017d7840 	.word	0x017d7840

080041d0 <LL_ADC_IsEnabled>:
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d101      	bne.n	80041e8 <LL_ADC_IsEnabled+0x18>
 80041e4:	2301      	movs	r3, #1
 80041e6:	e000      	b.n	80041ea <LL_ADC_IsEnabled+0x1a>
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
	...

080041f8 <LL_ADC_StartCalibration>:
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	4b09      	ldr	r3, [pc, #36]	@ (8004230 <LL_ADC_StartCalibration+0x38>)
 800420a:	4013      	ands	r3, r2
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004218:	430a      	orrs	r2, r1
 800421a:	4313      	orrs	r3, r2
 800421c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	609a      	str	r2, [r3, #8]
}
 8004224:	bf00      	nop
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	3ffeffc0 	.word	0x3ffeffc0

08004234 <LL_ADC_IsCalibrationOnGoing>:
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004244:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004248:	d101      	bne.n	800424e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <LL_ADC_REG_IsConversionOngoing>:
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b04      	cmp	r3, #4
 800426e:	d101      	bne.n	8004274 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004270:	2301      	movs	r3, #1
 8004272:	e000      	b.n	8004276 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
	...

08004284 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004290:	2300      	movs	r3, #0
 8004292:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800429a:	2b01      	cmp	r3, #1
 800429c:	d101      	bne.n	80042a2 <HAL_ADCEx_Calibration_Start+0x1e>
 800429e:	2302      	movs	r3, #2
 80042a0:	e04c      	b.n	800433c <HAL_ADCEx_Calibration_Start+0xb8>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f7ff fe24 	bl	8003ef8 <ADC_Disable>
 80042b0:	4603      	mov	r3, r0
 80042b2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80042b4:	7dfb      	ldrb	r3, [r7, #23]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d135      	bne.n	8004326 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80042be:	4b21      	ldr	r3, [pc, #132]	@ (8004344 <HAL_ADCEx_Calibration_Start+0xc0>)
 80042c0:	4013      	ands	r3, r2
 80042c2:	f043 0202 	orr.w	r2, r3, #2
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff ff90 	bl	80041f8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80042d8:	e014      	b.n	8004304 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	3301      	adds	r3, #1
 80042de:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	4a19      	ldr	r2, [pc, #100]	@ (8004348 <HAL_ADCEx_Calibration_Start+0xc4>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d30d      	bcc.n	8004304 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ec:	f023 0312 	bic.w	r3, r3, #18
 80042f0:	f043 0210 	orr.w	r2, r3, #16
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e01b      	b.n	800433c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff ff93 	bl	8004234 <LL_ADC_IsCalibrationOnGoing>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1e2      	bne.n	80042da <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004318:	f023 0303 	bic.w	r3, r3, #3
 800431c:	f043 0201 	orr.w	r2, r3, #1
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	655a      	str	r2, [r3, #84]	@ 0x54
 8004324:	e005      	b.n	8004332 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800432a:	f043 0210 	orr.w	r2, r3, #16
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800433a:	7dfb      	ldrb	r3, [r7, #23]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3718      	adds	r7, #24
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	ffffeefd 	.word	0xffffeefd
 8004348:	25c3f800 	.word	0x25c3f800

0800434c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800434c:	b590      	push	{r4, r7, lr}
 800434e:	b09f      	sub	sp, #124	@ 0x7c
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004362:	2b01      	cmp	r3, #1
 8004364:	d101      	bne.n	800436a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004366:	2302      	movs	r3, #2
 8004368:	e0be      	b.n	80044e8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004372:	2300      	movs	r3, #0
 8004374:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004376:	2300      	movs	r3, #0
 8004378:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a5c      	ldr	r2, [pc, #368]	@ (80044f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d102      	bne.n	800438a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004384:	4b5b      	ldr	r3, [pc, #364]	@ (80044f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004386:	60bb      	str	r3, [r7, #8]
 8004388:	e001      	b.n	800438e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800438a:	2300      	movs	r3, #0
 800438c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10b      	bne.n	80043ac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004398:	f043 0220 	orr.w	r2, r3, #32
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e09d      	b.n	80044e8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff ff54 	bl	800425c <LL_ADC_REG_IsConversionOngoing>
 80043b4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7ff ff4e 	bl	800425c <LL_ADC_REG_IsConversionOngoing>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d17f      	bne.n	80044c6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80043c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d17c      	bne.n	80044c6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a47      	ldr	r2, [pc, #284]	@ (80044f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d004      	beq.n	80043e0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a46      	ldr	r2, [pc, #280]	@ (80044f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d101      	bne.n	80043e4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80043e0:	4b45      	ldr	r3, [pc, #276]	@ (80044f8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80043e2:	e000      	b.n	80043e6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80043e4:	4b45      	ldr	r3, [pc, #276]	@ (80044fc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80043e6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d039      	beq.n	8004464 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80043f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	431a      	orrs	r2, r3
 80043fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004400:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a3a      	ldr	r2, [pc, #232]	@ (80044f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d004      	beq.n	8004416 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a38      	ldr	r2, [pc, #224]	@ (80044f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d10e      	bne.n	8004434 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004416:	4836      	ldr	r0, [pc, #216]	@ (80044f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004418:	f7ff feda 	bl	80041d0 <LL_ADC_IsEnabled>
 800441c:	4604      	mov	r4, r0
 800441e:	4835      	ldr	r0, [pc, #212]	@ (80044f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004420:	f7ff fed6 	bl	80041d0 <LL_ADC_IsEnabled>
 8004424:	4603      	mov	r3, r0
 8004426:	4323      	orrs	r3, r4
 8004428:	2b00      	cmp	r3, #0
 800442a:	bf0c      	ite	eq
 800442c:	2301      	moveq	r3, #1
 800442e:	2300      	movne	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	e008      	b.n	8004446 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004434:	4832      	ldr	r0, [pc, #200]	@ (8004500 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004436:	f7ff fecb 	bl	80041d0 <LL_ADC_IsEnabled>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	bf0c      	ite	eq
 8004440:	2301      	moveq	r3, #1
 8004442:	2300      	movne	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d047      	beq.n	80044da <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800444a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800444c:	689a      	ldr	r2, [r3, #8]
 800444e:	4b2d      	ldr	r3, [pc, #180]	@ (8004504 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004450:	4013      	ands	r3, r2
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	6811      	ldr	r1, [r2, #0]
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	6892      	ldr	r2, [r2, #8]
 800445a:	430a      	orrs	r2, r1
 800445c:	431a      	orrs	r2, r3
 800445e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004460:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004462:	e03a      	b.n	80044da <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004464:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800446c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800446e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a1e      	ldr	r2, [pc, #120]	@ (80044f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d004      	beq.n	8004484 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a1d      	ldr	r2, [pc, #116]	@ (80044f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d10e      	bne.n	80044a2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004484:	481a      	ldr	r0, [pc, #104]	@ (80044f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004486:	f7ff fea3 	bl	80041d0 <LL_ADC_IsEnabled>
 800448a:	4604      	mov	r4, r0
 800448c:	4819      	ldr	r0, [pc, #100]	@ (80044f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800448e:	f7ff fe9f 	bl	80041d0 <LL_ADC_IsEnabled>
 8004492:	4603      	mov	r3, r0
 8004494:	4323      	orrs	r3, r4
 8004496:	2b00      	cmp	r3, #0
 8004498:	bf0c      	ite	eq
 800449a:	2301      	moveq	r3, #1
 800449c:	2300      	movne	r3, #0
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	e008      	b.n	80044b4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80044a2:	4817      	ldr	r0, [pc, #92]	@ (8004500 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80044a4:	f7ff fe94 	bl	80041d0 <LL_ADC_IsEnabled>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	bf0c      	ite	eq
 80044ae:	2301      	moveq	r3, #1
 80044b0:	2300      	movne	r3, #0
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d010      	beq.n	80044da <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80044b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	4b11      	ldr	r3, [pc, #68]	@ (8004504 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80044be:	4013      	ands	r3, r2
 80044c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80044c2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044c4:	e009      	b.n	80044da <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ca:	f043 0220 	orr.w	r2, r3, #32
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80044d8:	e000      	b.n	80044dc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044da:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80044e4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	377c      	adds	r7, #124	@ 0x7c
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd90      	pop	{r4, r7, pc}
 80044f0:	40022000 	.word	0x40022000
 80044f4:	40022100 	.word	0x40022100
 80044f8:	40022300 	.word	0x40022300
 80044fc:	58026300 	.word	0x58026300
 8004500:	58026000 	.word	0x58026000
 8004504:	fffff0e0 	.word	0xfffff0e0

08004508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004518:	4b0b      	ldr	r3, [pc, #44]	@ (8004548 <__NVIC_SetPriorityGrouping+0x40>)
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004524:	4013      	ands	r3, r2
 8004526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004530:	4b06      	ldr	r3, [pc, #24]	@ (800454c <__NVIC_SetPriorityGrouping+0x44>)
 8004532:	4313      	orrs	r3, r2
 8004534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004536:	4a04      	ldr	r2, [pc, #16]	@ (8004548 <__NVIC_SetPriorityGrouping+0x40>)
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	60d3      	str	r3, [r2, #12]
}
 800453c:	bf00      	nop
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	e000ed00 	.word	0xe000ed00
 800454c:	05fa0000 	.word	0x05fa0000

08004550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004554:	4b04      	ldr	r3, [pc, #16]	@ (8004568 <__NVIC_GetPriorityGrouping+0x18>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	0a1b      	lsrs	r3, r3, #8
 800455a:	f003 0307 	and.w	r3, r3, #7
}
 800455e:	4618      	mov	r0, r3
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	e000ed00 	.word	0xe000ed00

0800456c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	4603      	mov	r3, r0
 8004574:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800457a:	2b00      	cmp	r3, #0
 800457c:	db0b      	blt.n	8004596 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800457e:	88fb      	ldrh	r3, [r7, #6]
 8004580:	f003 021f 	and.w	r2, r3, #31
 8004584:	4907      	ldr	r1, [pc, #28]	@ (80045a4 <__NVIC_EnableIRQ+0x38>)
 8004586:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800458a:	095b      	lsrs	r3, r3, #5
 800458c:	2001      	movs	r0, #1
 800458e:	fa00 f202 	lsl.w	r2, r0, r2
 8004592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004596:	bf00      	nop
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	e000e100 	.word	0xe000e100

080045a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	4603      	mov	r3, r0
 80045b0:	6039      	str	r1, [r7, #0]
 80045b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80045b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	db0a      	blt.n	80045d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	490c      	ldr	r1, [pc, #48]	@ (80045f4 <__NVIC_SetPriority+0x4c>)
 80045c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045c6:	0112      	lsls	r2, r2, #4
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	440b      	add	r3, r1
 80045cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045d0:	e00a      	b.n	80045e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	4908      	ldr	r1, [pc, #32]	@ (80045f8 <__NVIC_SetPriority+0x50>)
 80045d8:	88fb      	ldrh	r3, [r7, #6]
 80045da:	f003 030f 	and.w	r3, r3, #15
 80045de:	3b04      	subs	r3, #4
 80045e0:	0112      	lsls	r2, r2, #4
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	440b      	add	r3, r1
 80045e6:	761a      	strb	r2, [r3, #24]
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	e000e100 	.word	0xe000e100
 80045f8:	e000ed00 	.word	0xe000ed00

080045fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b089      	sub	sp, #36	@ 0x24
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	f1c3 0307 	rsb	r3, r3, #7
 8004616:	2b04      	cmp	r3, #4
 8004618:	bf28      	it	cs
 800461a:	2304      	movcs	r3, #4
 800461c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	3304      	adds	r3, #4
 8004622:	2b06      	cmp	r3, #6
 8004624:	d902      	bls.n	800462c <NVIC_EncodePriority+0x30>
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	3b03      	subs	r3, #3
 800462a:	e000      	b.n	800462e <NVIC_EncodePriority+0x32>
 800462c:	2300      	movs	r3, #0
 800462e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004630:	f04f 32ff 	mov.w	r2, #4294967295
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	fa02 f303 	lsl.w	r3, r2, r3
 800463a:	43da      	mvns	r2, r3
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	401a      	ands	r2, r3
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004644:	f04f 31ff 	mov.w	r1, #4294967295
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	fa01 f303 	lsl.w	r3, r1, r3
 800464e:	43d9      	mvns	r1, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004654:	4313      	orrs	r3, r2
         );
}
 8004656:	4618      	mov	r0, r3
 8004658:	3724      	adds	r7, #36	@ 0x24
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
	...

08004664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3b01      	subs	r3, #1
 8004670:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004674:	d301      	bcc.n	800467a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004676:	2301      	movs	r3, #1
 8004678:	e00f      	b.n	800469a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800467a:	4a0a      	ldr	r2, [pc, #40]	@ (80046a4 <SysTick_Config+0x40>)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	3b01      	subs	r3, #1
 8004680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004682:	210f      	movs	r1, #15
 8004684:	f04f 30ff 	mov.w	r0, #4294967295
 8004688:	f7ff ff8e 	bl	80045a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800468c:	4b05      	ldr	r3, [pc, #20]	@ (80046a4 <SysTick_Config+0x40>)
 800468e:	2200      	movs	r2, #0
 8004690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004692:	4b04      	ldr	r3, [pc, #16]	@ (80046a4 <SysTick_Config+0x40>)
 8004694:	2207      	movs	r2, #7
 8004696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	e000e010 	.word	0xe000e010

080046a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7ff ff29 	bl	8004508 <__NVIC_SetPriorityGrouping>
}
 80046b6:	bf00      	nop
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b086      	sub	sp, #24
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	4603      	mov	r3, r0
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	607a      	str	r2, [r7, #4]
 80046ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80046cc:	f7ff ff40 	bl	8004550 <__NVIC_GetPriorityGrouping>
 80046d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	68b9      	ldr	r1, [r7, #8]
 80046d6:	6978      	ldr	r0, [r7, #20]
 80046d8:	f7ff ff90 	bl	80045fc <NVIC_EncodePriority>
 80046dc:	4602      	mov	r2, r0
 80046de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80046e2:	4611      	mov	r1, r2
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7ff ff5f 	bl	80045a8 <__NVIC_SetPriority>
}
 80046ea:	bf00      	nop
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b082      	sub	sp, #8
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	4603      	mov	r3, r0
 80046fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff ff33 	bl	800456c <__NVIC_EnableIRQ>
}
 8004706:	bf00      	nop
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b082      	sub	sp, #8
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7ff ffa4 	bl	8004664 <SysTick_Config>
 800471c:	4603      	mov	r3, r0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
	...

08004728 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800472c:	f3bf 8f5f 	dmb	sy
}
 8004730:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004732:	4b07      	ldr	r3, [pc, #28]	@ (8004750 <HAL_MPU_Disable+0x28>)
 8004734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004736:	4a06      	ldr	r2, [pc, #24]	@ (8004750 <HAL_MPU_Disable+0x28>)
 8004738:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800473c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800473e:	4b05      	ldr	r3, [pc, #20]	@ (8004754 <HAL_MPU_Disable+0x2c>)
 8004740:	2200      	movs	r2, #0
 8004742:	605a      	str	r2, [r3, #4]
}
 8004744:	bf00      	nop
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	e000ed00 	.word	0xe000ed00
 8004754:	e000ed90 	.word	0xe000ed90

08004758 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004760:	4a0b      	ldr	r2, [pc, #44]	@ (8004790 <HAL_MPU_Enable+0x38>)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f043 0301 	orr.w	r3, r3, #1
 8004768:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800476a:	4b0a      	ldr	r3, [pc, #40]	@ (8004794 <HAL_MPU_Enable+0x3c>)
 800476c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476e:	4a09      	ldr	r2, [pc, #36]	@ (8004794 <HAL_MPU_Enable+0x3c>)
 8004770:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004774:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004776:	f3bf 8f4f 	dsb	sy
}
 800477a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800477c:	f3bf 8f6f 	isb	sy
}
 8004780:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	e000ed90 	.word	0xe000ed90
 8004794:	e000ed00 	.word	0xe000ed00

08004798 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	785a      	ldrb	r2, [r3, #1]
 80047a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004814 <HAL_MPU_ConfigRegion+0x7c>)
 80047a6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80047a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004814 <HAL_MPU_ConfigRegion+0x7c>)
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	4a19      	ldr	r2, [pc, #100]	@ (8004814 <HAL_MPU_ConfigRegion+0x7c>)
 80047ae:	f023 0301 	bic.w	r3, r3, #1
 80047b2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80047b4:	4a17      	ldr	r2, [pc, #92]	@ (8004814 <HAL_MPU_ConfigRegion+0x7c>)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	7b1b      	ldrb	r3, [r3, #12]
 80047c0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	7adb      	ldrb	r3, [r3, #11]
 80047c6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80047c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	7a9b      	ldrb	r3, [r3, #10]
 80047ce:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80047d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	7b5b      	ldrb	r3, [r3, #13]
 80047d6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80047d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	7b9b      	ldrb	r3, [r3, #14]
 80047de:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80047e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	7bdb      	ldrb	r3, [r3, #15]
 80047e6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80047e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	7a5b      	ldrb	r3, [r3, #9]
 80047ee:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80047f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	7a1b      	ldrb	r3, [r3, #8]
 80047f6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80047f8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	7812      	ldrb	r2, [r2, #0]
 80047fe:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004800:	4a04      	ldr	r2, [pc, #16]	@ (8004814 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004802:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004804:	6113      	str	r3, [r2, #16]
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	e000ed90 	.word	0xe000ed90

08004818 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004818:	b480      	push	{r7}
 800481a:	b089      	sub	sp, #36	@ 0x24
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004822:	2300      	movs	r3, #0
 8004824:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004826:	4b89      	ldr	r3, [pc, #548]	@ (8004a4c <HAL_GPIO_Init+0x234>)
 8004828:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800482a:	e194      	b.n	8004b56 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	2101      	movs	r1, #1
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	fa01 f303 	lsl.w	r3, r1, r3
 8004838:	4013      	ands	r3, r2
 800483a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 8186 	beq.w	8004b50 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f003 0303 	and.w	r3, r3, #3
 800484c:	2b01      	cmp	r3, #1
 800484e:	d005      	beq.n	800485c <HAL_GPIO_Init+0x44>
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f003 0303 	and.w	r3, r3, #3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d130      	bne.n	80048be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	2203      	movs	r2, #3
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	43db      	mvns	r3, r3
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	4013      	ands	r3, r2
 8004872:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	68da      	ldr	r2, [r3, #12]
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	4313      	orrs	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004892:	2201      	movs	r2, #1
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	fa02 f303 	lsl.w	r3, r2, r3
 800489a:	43db      	mvns	r3, r3
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	4013      	ands	r3, r2
 80048a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	091b      	lsrs	r3, r3, #4
 80048a8:	f003 0201 	and.w	r2, r3, #1
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	fa02 f303 	lsl.w	r3, r2, r3
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	2b03      	cmp	r3, #3
 80048c8:	d017      	beq.n	80048fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	2203      	movs	r2, #3
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	43db      	mvns	r3, r3
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	4013      	ands	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	fa02 f303 	lsl.w	r3, r2, r3
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f003 0303 	and.w	r3, r3, #3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d123      	bne.n	800494e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	08da      	lsrs	r2, r3, #3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	3208      	adds	r2, #8
 800490e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004912:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	f003 0307 	and.w	r3, r3, #7
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	220f      	movs	r2, #15
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	43db      	mvns	r3, r3
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	4013      	ands	r3, r2
 8004928:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	691a      	ldr	r2, [r3, #16]
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	4313      	orrs	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	08da      	lsrs	r2, r3, #3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3208      	adds	r2, #8
 8004948:	69b9      	ldr	r1, [r7, #24]
 800494a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	2203      	movs	r2, #3
 800495a:	fa02 f303 	lsl.w	r3, r2, r3
 800495e:	43db      	mvns	r3, r3
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	4013      	ands	r3, r2
 8004964:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f003 0203 	and.w	r2, r3, #3
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	fa02 f303 	lsl.w	r3, r2, r3
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	4313      	orrs	r3, r2
 800497a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 80e0 	beq.w	8004b50 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004990:	4b2f      	ldr	r3, [pc, #188]	@ (8004a50 <HAL_GPIO_Init+0x238>)
 8004992:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004996:	4a2e      	ldr	r2, [pc, #184]	@ (8004a50 <HAL_GPIO_Init+0x238>)
 8004998:	f043 0302 	orr.w	r3, r3, #2
 800499c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80049a0:	4b2b      	ldr	r3, [pc, #172]	@ (8004a50 <HAL_GPIO_Init+0x238>)
 80049a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049ae:	4a29      	ldr	r2, [pc, #164]	@ (8004a54 <HAL_GPIO_Init+0x23c>)
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	089b      	lsrs	r3, r3, #2
 80049b4:	3302      	adds	r3, #2
 80049b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	220f      	movs	r2, #15
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	43db      	mvns	r3, r3
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	4013      	ands	r3, r2
 80049d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a20      	ldr	r2, [pc, #128]	@ (8004a58 <HAL_GPIO_Init+0x240>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d052      	beq.n	8004a80 <HAL_GPIO_Init+0x268>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a1f      	ldr	r2, [pc, #124]	@ (8004a5c <HAL_GPIO_Init+0x244>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d031      	beq.n	8004a46 <HAL_GPIO_Init+0x22e>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a1e      	ldr	r2, [pc, #120]	@ (8004a60 <HAL_GPIO_Init+0x248>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d02b      	beq.n	8004a42 <HAL_GPIO_Init+0x22a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a1d      	ldr	r2, [pc, #116]	@ (8004a64 <HAL_GPIO_Init+0x24c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d025      	beq.n	8004a3e <HAL_GPIO_Init+0x226>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a1c      	ldr	r2, [pc, #112]	@ (8004a68 <HAL_GPIO_Init+0x250>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d01f      	beq.n	8004a3a <HAL_GPIO_Init+0x222>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a1b      	ldr	r2, [pc, #108]	@ (8004a6c <HAL_GPIO_Init+0x254>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d019      	beq.n	8004a36 <HAL_GPIO_Init+0x21e>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a1a      	ldr	r2, [pc, #104]	@ (8004a70 <HAL_GPIO_Init+0x258>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d013      	beq.n	8004a32 <HAL_GPIO_Init+0x21a>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a19      	ldr	r2, [pc, #100]	@ (8004a74 <HAL_GPIO_Init+0x25c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d00d      	beq.n	8004a2e <HAL_GPIO_Init+0x216>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a18      	ldr	r2, [pc, #96]	@ (8004a78 <HAL_GPIO_Init+0x260>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d007      	beq.n	8004a2a <HAL_GPIO_Init+0x212>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a17      	ldr	r2, [pc, #92]	@ (8004a7c <HAL_GPIO_Init+0x264>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d101      	bne.n	8004a26 <HAL_GPIO_Init+0x20e>
 8004a22:	2309      	movs	r3, #9
 8004a24:	e02d      	b.n	8004a82 <HAL_GPIO_Init+0x26a>
 8004a26:	230a      	movs	r3, #10
 8004a28:	e02b      	b.n	8004a82 <HAL_GPIO_Init+0x26a>
 8004a2a:	2308      	movs	r3, #8
 8004a2c:	e029      	b.n	8004a82 <HAL_GPIO_Init+0x26a>
 8004a2e:	2307      	movs	r3, #7
 8004a30:	e027      	b.n	8004a82 <HAL_GPIO_Init+0x26a>
 8004a32:	2306      	movs	r3, #6
 8004a34:	e025      	b.n	8004a82 <HAL_GPIO_Init+0x26a>
 8004a36:	2305      	movs	r3, #5
 8004a38:	e023      	b.n	8004a82 <HAL_GPIO_Init+0x26a>
 8004a3a:	2304      	movs	r3, #4
 8004a3c:	e021      	b.n	8004a82 <HAL_GPIO_Init+0x26a>
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e01f      	b.n	8004a82 <HAL_GPIO_Init+0x26a>
 8004a42:	2302      	movs	r3, #2
 8004a44:	e01d      	b.n	8004a82 <HAL_GPIO_Init+0x26a>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e01b      	b.n	8004a82 <HAL_GPIO_Init+0x26a>
 8004a4a:	bf00      	nop
 8004a4c:	58000080 	.word	0x58000080
 8004a50:	58024400 	.word	0x58024400
 8004a54:	58000400 	.word	0x58000400
 8004a58:	58020000 	.word	0x58020000
 8004a5c:	58020400 	.word	0x58020400
 8004a60:	58020800 	.word	0x58020800
 8004a64:	58020c00 	.word	0x58020c00
 8004a68:	58021000 	.word	0x58021000
 8004a6c:	58021400 	.word	0x58021400
 8004a70:	58021800 	.word	0x58021800
 8004a74:	58021c00 	.word	0x58021c00
 8004a78:	58022000 	.word	0x58022000
 8004a7c:	58022400 	.word	0x58022400
 8004a80:	2300      	movs	r3, #0
 8004a82:	69fa      	ldr	r2, [r7, #28]
 8004a84:	f002 0203 	and.w	r2, r2, #3
 8004a88:	0092      	lsls	r2, r2, #2
 8004a8a:	4093      	lsls	r3, r2
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a92:	4938      	ldr	r1, [pc, #224]	@ (8004b74 <HAL_GPIO_Init+0x35c>)
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	089b      	lsrs	r3, r3, #2
 8004a98:	3302      	adds	r3, #2
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004aa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	43db      	mvns	r3, r3
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004ac6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004ace:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	43db      	mvns	r3, r3
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	4013      	ands	r3, r2
 8004ade:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004af4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	43db      	mvns	r3, r3
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	4013      	ands	r3, r2
 8004b0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d003      	beq.n	8004b20 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	69ba      	ldr	r2, [r7, #24]
 8004b24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	43db      	mvns	r3, r3
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	4013      	ands	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	3301      	adds	r3, #1
 8004b54:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f47f ae63 	bne.w	800482c <HAL_GPIO_Init+0x14>
  }
}
 8004b66:	bf00      	nop
 8004b68:	bf00      	nop
 8004b6a:	3724      	adds	r7, #36	@ 0x24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	58000400 	.word	0x58000400

08004b78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	460b      	mov	r3, r1
 8004b82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691a      	ldr	r2, [r3, #16]
 8004b88:	887b      	ldrh	r3, [r7, #2]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b90:	2301      	movs	r3, #1
 8004b92:	73fb      	strb	r3, [r7, #15]
 8004b94:	e001      	b.n	8004b9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b96:	2300      	movs	r3, #0
 8004b98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	807b      	strh	r3, [r7, #2]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bb8:	787b      	ldrb	r3, [r7, #1]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bbe:	887a      	ldrh	r2, [r7, #2]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004bc4:	e003      	b.n	8004bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004bc6:	887b      	ldrh	r3, [r7, #2]
 8004bc8:	041a      	lsls	r2, r3, #16
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	619a      	str	r2, [r3, #24]
}
 8004bce:	bf00      	nop
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
	...

08004bdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e08b      	b.n	8004d06 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d106      	bne.n	8004c08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f00b ff98 	bl	8010b38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2224      	movs	r2, #36	@ 0x24
 8004c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 0201 	bic.w	r2, r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004c2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d107      	bne.n	8004c56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c52:	609a      	str	r2, [r3, #8]
 8004c54:	e006      	b.n	8004c64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689a      	ldr	r2, [r3, #8]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004c62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d108      	bne.n	8004c7e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c7a:	605a      	str	r2, [r3, #4]
 8004c7c:	e007      	b.n	8004c8e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6859      	ldr	r1, [r3, #4]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	4b1d      	ldr	r3, [pc, #116]	@ (8004d10 <HAL_I2C_Init+0x134>)
 8004c9a:	430b      	orrs	r3, r1
 8004c9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004cac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691a      	ldr	r2, [r3, #16]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	69d9      	ldr	r1, [r3, #28]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a1a      	ldr	r2, [r3, #32]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0201 	orr.w	r2, r2, #1
 8004ce6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	02008000 	.word	0x02008000

08004d14 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b088      	sub	sp, #32
 8004d18:	af02      	add	r7, sp, #8
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	607a      	str	r2, [r7, #4]
 8004d1e:	461a      	mov	r2, r3
 8004d20:	460b      	mov	r3, r1
 8004d22:	817b      	strh	r3, [r7, #10]
 8004d24:	4613      	mov	r3, r2
 8004d26:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b20      	cmp	r3, #32
 8004d32:	f040 80fd 	bne.w	8004f30 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d101      	bne.n	8004d44 <HAL_I2C_Master_Transmit+0x30>
 8004d40:	2302      	movs	r3, #2
 8004d42:	e0f6      	b.n	8004f32 <HAL_I2C_Master_Transmit+0x21e>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d4c:	f7fd fe44 	bl	80029d8 <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	2319      	movs	r3, #25
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 fa0a 	bl	8005178 <I2C_WaitOnFlagUntilTimeout>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e0e1      	b.n	8004f32 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2221      	movs	r2, #33	@ 0x21
 8004d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2210      	movs	r2, #16
 8004d7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	893a      	ldrh	r2, [r7, #8]
 8004d8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	2bff      	cmp	r3, #255	@ 0xff
 8004d9e:	d906      	bls.n	8004dae <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	22ff      	movs	r2, #255	@ 0xff
 8004da4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004da6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004daa:	617b      	str	r3, [r7, #20]
 8004dac:	e007      	b.n	8004dbe <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004db8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004dbc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d024      	beq.n	8004e10 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dca:	781a      	ldrb	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	3b01      	subs	r3, #1
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dee:	3b01      	subs	r3, #1
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	8979      	ldrh	r1, [r7, #10]
 8004e02:	4b4e      	ldr	r3, [pc, #312]	@ (8004f3c <HAL_I2C_Master_Transmit+0x228>)
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 fc05 	bl	8005618 <I2C_TransferConfig>
 8004e0e:	e066      	b.n	8004ede <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	8979      	ldrh	r1, [r7, #10]
 8004e18:	4b48      	ldr	r3, [pc, #288]	@ (8004f3c <HAL_I2C_Master_Transmit+0x228>)
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 fbfa 	bl	8005618 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004e24:	e05b      	b.n	8004ede <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	6a39      	ldr	r1, [r7, #32]
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 f9fd 	bl	800522a <I2C_WaitOnTXISFlagUntilTimeout>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e07b      	b.n	8004f32 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3e:	781a      	ldrb	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4a:	1c5a      	adds	r2, r3, #1
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	3b01      	subs	r3, #1
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e62:	3b01      	subs	r3, #1
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d034      	beq.n	8004ede <HAL_I2C_Master_Transmit+0x1ca>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d130      	bne.n	8004ede <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	6a3b      	ldr	r3, [r7, #32]
 8004e82:	2200      	movs	r2, #0
 8004e84:	2180      	movs	r1, #128	@ 0x80
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f000 f976 	bl	8005178 <I2C_WaitOnFlagUntilTimeout>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e04d      	b.n	8004f32 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	2bff      	cmp	r3, #255	@ 0xff
 8004e9e:	d90e      	bls.n	8004ebe <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	22ff      	movs	r2, #255	@ 0xff
 8004ea4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	8979      	ldrh	r1, [r7, #10]
 8004eae:	2300      	movs	r3, #0
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f000 fbae 	bl	8005618 <I2C_TransferConfig>
 8004ebc:	e00f      	b.n	8004ede <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	8979      	ldrh	r1, [r7, #10]
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f000 fb9d 	bl	8005618 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d19e      	bne.n	8004e26 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	6a39      	ldr	r1, [r7, #32]
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f000 f9e3 	bl	80052b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d001      	beq.n	8004efc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e01a      	b.n	8004f32 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2220      	movs	r2, #32
 8004f02:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6859      	ldr	r1, [r3, #4]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8004f40 <HAL_I2C_Master_Transmit+0x22c>)
 8004f10:	400b      	ands	r3, r1
 8004f12:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	e000      	b.n	8004f32 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004f30:	2302      	movs	r3, #2
  }
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3718      	adds	r7, #24
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	80002000 	.word	0x80002000
 8004f40:	fe00e800 	.word	0xfe00e800

08004f44 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b088      	sub	sp, #32
 8004f48:	af02      	add	r7, sp, #8
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	607a      	str	r2, [r7, #4]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	460b      	mov	r3, r1
 8004f52:	817b      	strh	r3, [r7, #10]
 8004f54:	4613      	mov	r3, r2
 8004f56:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	f040 80db 	bne.w	800511c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d101      	bne.n	8004f74 <HAL_I2C_Master_Receive+0x30>
 8004f70:	2302      	movs	r3, #2
 8004f72:	e0d4      	b.n	800511e <HAL_I2C_Master_Receive+0x1da>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f7c:	f7fd fd2c 	bl	80029d8 <HAL_GetTick>
 8004f80:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	2319      	movs	r3, #25
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f000 f8f2 	bl	8005178 <I2C_WaitOnFlagUntilTimeout>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e0bf      	b.n	800511e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2222      	movs	r2, #34	@ 0x22
 8004fa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2210      	movs	r2, #16
 8004faa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	893a      	ldrh	r2, [r7, #8]
 8004fbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	2bff      	cmp	r3, #255	@ 0xff
 8004fce:	d90e      	bls.n	8004fee <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	22ff      	movs	r2, #255	@ 0xff
 8004fd4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	8979      	ldrh	r1, [r7, #10]
 8004fde:	4b52      	ldr	r3, [pc, #328]	@ (8005128 <HAL_I2C_Master_Receive+0x1e4>)
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 fb16 	bl	8005618 <I2C_TransferConfig>
 8004fec:	e06d      	b.n	80050ca <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	8979      	ldrh	r1, [r7, #10]
 8005000:	4b49      	ldr	r3, [pc, #292]	@ (8005128 <HAL_I2C_Master_Receive+0x1e4>)
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f000 fb05 	bl	8005618 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800500e:	e05c      	b.n	80050ca <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	6a39      	ldr	r1, [r7, #32]
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 f993 	bl	8005340 <I2C_WaitOnRXNEFlagUntilTimeout>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e07c      	b.n	800511e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005036:	1c5a      	adds	r2, r3, #1
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005040:	3b01      	subs	r3, #1
 8005042:	b29a      	uxth	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800504c:	b29b      	uxth	r3, r3
 800504e:	3b01      	subs	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800505a:	b29b      	uxth	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d034      	beq.n	80050ca <HAL_I2C_Master_Receive+0x186>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005064:	2b00      	cmp	r3, #0
 8005066:	d130      	bne.n	80050ca <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	2200      	movs	r2, #0
 8005070:	2180      	movs	r1, #128	@ 0x80
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f000 f880 	bl	8005178 <I2C_WaitOnFlagUntilTimeout>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e04d      	b.n	800511e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005086:	b29b      	uxth	r3, r3
 8005088:	2bff      	cmp	r3, #255	@ 0xff
 800508a:	d90e      	bls.n	80050aa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	22ff      	movs	r2, #255	@ 0xff
 8005090:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005096:	b2da      	uxtb	r2, r3
 8005098:	8979      	ldrh	r1, [r7, #10]
 800509a:	2300      	movs	r3, #0
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f000 fab8 	bl	8005618 <I2C_TransferConfig>
 80050a8:	e00f      	b.n	80050ca <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	8979      	ldrh	r1, [r7, #10]
 80050bc:	2300      	movs	r3, #0
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 faa7 	bl	8005618 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d19d      	bne.n	8005010 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	6a39      	ldr	r1, [r7, #32]
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f000 f8ed 	bl	80052b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d001      	beq.n	80050e8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e01a      	b.n	800511e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2220      	movs	r2, #32
 80050ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6859      	ldr	r1, [r3, #4]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	4b0c      	ldr	r3, [pc, #48]	@ (800512c <HAL_I2C_Master_Receive+0x1e8>)
 80050fc:	400b      	ands	r3, r1
 80050fe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2220      	movs	r2, #32
 8005104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005118:	2300      	movs	r3, #0
 800511a:	e000      	b.n	800511e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800511c:	2302      	movs	r3, #2
  }
}
 800511e:	4618      	mov	r0, r3
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	80002400 	.word	0x80002400
 800512c:	fe00e800 	.word	0xfe00e800

08005130 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b02      	cmp	r3, #2
 8005144:	d103      	bne.n	800514e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2200      	movs	r2, #0
 800514c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b01      	cmp	r3, #1
 800515a:	d007      	beq.n	800516c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699a      	ldr	r2, [r3, #24]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 0201 	orr.w	r2, r2, #1
 800516a:	619a      	str	r2, [r3, #24]
  }
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	603b      	str	r3, [r7, #0]
 8005184:	4613      	mov	r3, r2
 8005186:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005188:	e03b      	b.n	8005202 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	6839      	ldr	r1, [r7, #0]
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 f962 	bl	8005458 <I2C_IsErrorOccurred>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e041      	b.n	8005222 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a4:	d02d      	beq.n	8005202 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051a6:	f7fd fc17 	bl	80029d8 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d302      	bcc.n	80051bc <I2C_WaitOnFlagUntilTimeout+0x44>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d122      	bne.n	8005202 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699a      	ldr	r2, [r3, #24]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	4013      	ands	r3, r2
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	bf0c      	ite	eq
 80051cc:	2301      	moveq	r3, #1
 80051ce:	2300      	movne	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	461a      	mov	r2, r3
 80051d4:	79fb      	ldrb	r3, [r7, #7]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d113      	bne.n	8005202 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051de:	f043 0220 	orr.w	r2, r3, #32
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2220      	movs	r2, #32
 80051ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e00f      	b.n	8005222 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	699a      	ldr	r2, [r3, #24]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	4013      	ands	r3, r2
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	429a      	cmp	r2, r3
 8005210:	bf0c      	ite	eq
 8005212:	2301      	moveq	r3, #1
 8005214:	2300      	movne	r3, #0
 8005216:	b2db      	uxtb	r3, r3
 8005218:	461a      	mov	r2, r3
 800521a:	79fb      	ldrb	r3, [r7, #7]
 800521c:	429a      	cmp	r2, r3
 800521e:	d0b4      	beq.n	800518a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b084      	sub	sp, #16
 800522e:	af00      	add	r7, sp, #0
 8005230:	60f8      	str	r0, [r7, #12]
 8005232:	60b9      	str	r1, [r7, #8]
 8005234:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005236:	e033      	b.n	80052a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	68b9      	ldr	r1, [r7, #8]
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 f90b 	bl	8005458 <I2C_IsErrorOccurred>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e031      	b.n	80052b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005252:	d025      	beq.n	80052a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005254:	f7fd fbc0 	bl	80029d8 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	429a      	cmp	r2, r3
 8005262:	d302      	bcc.n	800526a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d11a      	bne.n	80052a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b02      	cmp	r3, #2
 8005276:	d013      	beq.n	80052a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800527c:	f043 0220 	orr.w	r2, r3, #32
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2220      	movs	r2, #32
 8005288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e007      	b.n	80052b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d1c4      	bne.n	8005238 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052c4:	e02f      	b.n	8005326 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	68b9      	ldr	r1, [r7, #8]
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f000 f8c4 	bl	8005458 <I2C_IsErrorOccurred>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e02d      	b.n	8005336 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052da:	f7fd fb7d 	bl	80029d8 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d302      	bcc.n	80052f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d11a      	bne.n	8005326 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	f003 0320 	and.w	r3, r3, #32
 80052fa:	2b20      	cmp	r3, #32
 80052fc:	d013      	beq.n	8005326 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005302:	f043 0220 	orr.w	r2, r3, #32
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2220      	movs	r2, #32
 800530e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e007      	b.n	8005336 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	f003 0320 	and.w	r3, r3, #32
 8005330:	2b20      	cmp	r3, #32
 8005332:	d1c8      	bne.n	80052c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
	...

08005340 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800534c:	2300      	movs	r3, #0
 800534e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005350:	e071      	b.n	8005436 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	68b9      	ldr	r1, [r7, #8]
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 f87e 	bl	8005458 <I2C_IsErrorOccurred>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	f003 0320 	and.w	r3, r3, #32
 8005370:	2b20      	cmp	r3, #32
 8005372:	d13b      	bne.n	80053ec <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8005374:	7dfb      	ldrb	r3, [r7, #23]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d138      	bne.n	80053ec <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b04      	cmp	r3, #4
 8005386:	d105      	bne.n	8005394 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005390:	2300      	movs	r3, #0
 8005392:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	f003 0310 	and.w	r3, r3, #16
 800539e:	2b10      	cmp	r3, #16
 80053a0:	d121      	bne.n	80053e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2210      	movs	r2, #16
 80053a8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2204      	movs	r2, #4
 80053ae:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2220      	movs	r2, #32
 80053b6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6859      	ldr	r1, [r3, #4]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	4b24      	ldr	r3, [pc, #144]	@ (8005454 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80053c4:	400b      	ands	r3, r1
 80053c6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2220      	movs	r2, #32
 80053cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	75fb      	strb	r3, [r7, #23]
 80053e4:	e002      	b.n	80053ec <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80053ec:	f7fd faf4 	bl	80029d8 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d302      	bcc.n	8005402 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d119      	bne.n	8005436 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8005402:	7dfb      	ldrb	r3, [r7, #23]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d116      	bne.n	8005436 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	f003 0304 	and.w	r3, r3, #4
 8005412:	2b04      	cmp	r3, #4
 8005414:	d00f      	beq.n	8005436 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800541a:	f043 0220 	orr.w	r2, r3, #32
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2220      	movs	r2, #32
 8005426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b04      	cmp	r3, #4
 8005442:	d002      	beq.n	800544a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8005444:	7dfb      	ldrb	r3, [r7, #23]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d083      	beq.n	8005352 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800544a:	7dfb      	ldrb	r3, [r7, #23]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	fe00e800 	.word	0xfe00e800

08005458 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b08a      	sub	sp, #40	@ 0x28
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005464:	2300      	movs	r3, #0
 8005466:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005472:	2300      	movs	r3, #0
 8005474:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	f003 0310 	and.w	r3, r3, #16
 8005480:	2b00      	cmp	r3, #0
 8005482:	d068      	beq.n	8005556 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2210      	movs	r2, #16
 800548a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800548c:	e049      	b.n	8005522 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005494:	d045      	beq.n	8005522 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005496:	f7fd fa9f 	bl	80029d8 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d302      	bcc.n	80054ac <I2C_IsErrorOccurred+0x54>
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d13a      	bne.n	8005522 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054ce:	d121      	bne.n	8005514 <I2C_IsErrorOccurred+0xbc>
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054d6:	d01d      	beq.n	8005514 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80054d8:	7cfb      	ldrb	r3, [r7, #19]
 80054da:	2b20      	cmp	r3, #32
 80054dc:	d01a      	beq.n	8005514 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054ec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80054ee:	f7fd fa73 	bl	80029d8 <HAL_GetTick>
 80054f2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054f4:	e00e      	b.n	8005514 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80054f6:	f7fd fa6f 	bl	80029d8 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	2b19      	cmp	r3, #25
 8005502:	d907      	bls.n	8005514 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	f043 0320 	orr.w	r3, r3, #32
 800550a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005512:	e006      	b.n	8005522 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	f003 0320 	and.w	r3, r3, #32
 800551e:	2b20      	cmp	r3, #32
 8005520:	d1e9      	bne.n	80054f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	f003 0320 	and.w	r3, r3, #32
 800552c:	2b20      	cmp	r3, #32
 800552e:	d003      	beq.n	8005538 <I2C_IsErrorOccurred+0xe0>
 8005530:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005534:	2b00      	cmp	r3, #0
 8005536:	d0aa      	beq.n	800548e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005538:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800553c:	2b00      	cmp	r3, #0
 800553e:	d103      	bne.n	8005548 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2220      	movs	r2, #32
 8005546:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	f043 0304 	orr.w	r3, r3, #4
 800554e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00b      	beq.n	8005580 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	f043 0301 	orr.w	r3, r3, #1
 800556e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005578:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00b      	beq.n	80055a2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800558a:	6a3b      	ldr	r3, [r7, #32]
 800558c:	f043 0308 	orr.w	r3, r3, #8
 8005590:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800559a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00b      	beq.n	80055c4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	f043 0302 	orr.w	r3, r3, #2
 80055b2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80055c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d01c      	beq.n	8005606 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f7ff fdaf 	bl	8005130 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6859      	ldr	r1, [r3, #4]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005614 <I2C_IsErrorOccurred+0x1bc>)
 80055de:	400b      	ands	r3, r1
 80055e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	431a      	orrs	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2220      	movs	r2, #32
 80055f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005606:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800560a:	4618      	mov	r0, r3
 800560c:	3728      	adds	r7, #40	@ 0x28
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	fe00e800 	.word	0xfe00e800

08005618 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005618:	b480      	push	{r7}
 800561a:	b087      	sub	sp, #28
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	607b      	str	r3, [r7, #4]
 8005622:	460b      	mov	r3, r1
 8005624:	817b      	strh	r3, [r7, #10]
 8005626:	4613      	mov	r3, r2
 8005628:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800562a:	897b      	ldrh	r3, [r7, #10]
 800562c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005630:	7a7b      	ldrb	r3, [r7, #9]
 8005632:	041b      	lsls	r3, r3, #16
 8005634:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005638:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	4313      	orrs	r3, r2
 8005642:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005646:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	0d5b      	lsrs	r3, r3, #21
 8005652:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005656:	4b08      	ldr	r3, [pc, #32]	@ (8005678 <I2C_TransferConfig+0x60>)
 8005658:	430b      	orrs	r3, r1
 800565a:	43db      	mvns	r3, r3
 800565c:	ea02 0103 	and.w	r1, r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	430a      	orrs	r2, r1
 8005668:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800566a:	bf00      	nop
 800566c:	371c      	adds	r7, #28
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	03ff63ff 	.word	0x03ff63ff

0800567c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b20      	cmp	r3, #32
 8005690:	d138      	bne.n	8005704 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005698:	2b01      	cmp	r3, #1
 800569a:	d101      	bne.n	80056a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800569c:	2302      	movs	r3, #2
 800569e:	e032      	b.n	8005706 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2224      	movs	r2, #36	@ 0x24
 80056ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 0201 	bic.w	r2, r2, #1
 80056be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80056ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6819      	ldr	r1, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	430a      	orrs	r2, r1
 80056de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f042 0201 	orr.w	r2, r2, #1
 80056ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2220      	movs	r2, #32
 80056f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005700:	2300      	movs	r3, #0
 8005702:	e000      	b.n	8005706 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005704:	2302      	movs	r3, #2
  }
}
 8005706:	4618      	mov	r0, r3
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005712:	b480      	push	{r7}
 8005714:	b085      	sub	sp, #20
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
 800571a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b20      	cmp	r3, #32
 8005726:	d139      	bne.n	800579c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800572e:	2b01      	cmp	r3, #1
 8005730:	d101      	bne.n	8005736 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005732:	2302      	movs	r3, #2
 8005734:	e033      	b.n	800579e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2224      	movs	r2, #36	@ 0x24
 8005742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 0201 	bic.w	r2, r2, #1
 8005754:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005764:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	021b      	lsls	r3, r3, #8
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	4313      	orrs	r3, r2
 800576e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f042 0201 	orr.w	r2, r2, #1
 8005786:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2220      	movs	r2, #32
 800578c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005798:	2300      	movs	r3, #0
 800579a:	e000      	b.n	800579e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800579c:	2302      	movs	r3, #2
  }
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
	...

080057ac <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e097      	b.n	80058ee <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d106      	bne.n	80057de <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f00b fb59 	bl	8010e90 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2202      	movs	r2, #2
 80057e2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d004      	beq.n	8005800 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80057fe:	d103      	bne.n	8005808 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f023 031e 	bic.w	r3, r3, #30
 8005806:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	695b      	ldr	r3, [r3, #20]
 800580c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005810:	4293      	cmp	r3, r2
 8005812:	d003      	beq.n	800581c <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	4b38      	ldr	r3, [pc, #224]	@ (80058f8 <HAL_LPTIM_Init+0x14c>)
 8005818:	4013      	ands	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	4b37      	ldr	r3, [pc, #220]	@ (80058fc <HAL_LPTIM_Init+0x150>)
 8005820:	4013      	ands	r3, r2
 8005822:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800582c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8005832:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8005838:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 800583e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	4313      	orrs	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d107      	bne.n	800585e <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8005856:	4313      	orrs	r3, r2
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	4313      	orrs	r3, r2
 800585c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d004      	beq.n	8005870 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800586a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800586e:	d107      	bne.n	8005880 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8005878:	4313      	orrs	r3, r2
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	4313      	orrs	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005888:	4293      	cmp	r3, r2
 800588a:	d00a      	beq.n	80058a2 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005894:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800589a:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	4313      	orrs	r3, r2
 80058a0:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a14      	ldr	r2, [pc, #80]	@ (8005900 <HAL_LPTIM_Init+0x154>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d004      	beq.n	80058be <HAL_LPTIM_Init+0x112>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a12      	ldr	r2, [pc, #72]	@ (8005904 <HAL_LPTIM_Init+0x158>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d108      	bne.n	80058d0 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	625a      	str	r2, [r3, #36]	@ 0x24
 80058ce:	e009      	b.n	80058e4 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a0c      	ldr	r2, [pc, #48]	@ (8005908 <HAL_LPTIM_Init+0x15c>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d104      	bne.n	80058e4 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80058e2:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	ffff1f3f 	.word	0xffff1f3f
 80058fc:	ff19f1fe 	.word	0xff19f1fe
 8005900:	40002400 	.word	0x40002400
 8005904:	58002400 	.word	0x58002400
 8005908:	58002800 	.word	0x58002800

0800590c <HAL_LPTIM_Encoder_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Encoder_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  assert_param(hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC);
  assert_param(hlptim->Init.Clock.Prescaler == LPTIM_PRESCALER_DIV1);
  assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2202      	movs	r2, #2
 800591a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	60fb      	str	r3, [r7, #12]

  /* Clear CKPOL bits */
  tmpcfgr &= (uint32_t)(~LPTIM_CFGR_CKPOL);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f023 0306 	bic.w	r3, r3, #6
 800592c:	60fb      	str	r3, [r7, #12]

  /* Set Input polarity */
  tmpcfgr |=  hlptim->Init.UltraLowPowerClock.Polarity;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	4313      	orrs	r3, r2
 8005936:	60fb      	str	r3, [r7, #12]

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	60da      	str	r2, [r3, #12]

  /* Set ENC bit to enable the encoder interface */
  hlptim->Instance->CFGR |= LPTIM_CFGR_ENC;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68da      	ldr	r2, [r3, #12]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800594e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	691a      	ldr	r2, [r3, #16]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f042 0201 	orr.w	r2, r2, #1
 800595e:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2210      	movs	r2, #16
 8005966:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8005970:	2110      	movs	r1, #16
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f9bc 	bl	8005cf0 <LPTIM_WaitForFlag>
 8005978:	4603      	mov	r3, r0
 800597a:	2b03      	cmp	r3, #3
 800597c:	d101      	bne.n	8005982 <HAL_LPTIM_Encoder_Start+0x76>
  {
    return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e00c      	b.n	800599c <HAL_LPTIM_Encoder_Start+0x90>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	691a      	ldr	r2, [r3, #16]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f042 0204 	orr.w	r2, r2, #4
 8005990:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_LPTIM_Encoder_Stop>:
  * @brief  Stop the Encoder interface.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Encoder_Stop(LPTIM_HandleTypeDef *hlptim)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_ENCODER_INTERFACE_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 f9cb 	bl	8005d50 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f98a 	bl	8005cd4 <HAL_LPTIM_GetState>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b03      	cmp	r3, #3
 80059c4:	d101      	bne.n	80059ca <HAL_LPTIM_Encoder_Stop+0x26>
  {
    return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e00c      	b.n	80059e4 <HAL_LPTIM_Encoder_Stop+0x40>
  }

  /* Reset ENC bit to disable the encoder interface */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_ENC;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68da      	ldr	r2, [r3, #12]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80059d8:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2202      	movs	r2, #2
 80059fa:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d00c      	beq.n	8005a20 <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a0a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a0e:	d107      	bne.n	8005a20 <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68da      	ldr	r2, [r3, #12]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 8005a1e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	691a      	ldr	r2, [r3, #16]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f042 0201 	orr.w	r2, r2, #1
 8005a2e:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2210      	movs	r2, #16
 8005a36:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	683a      	ldr	r2, [r7, #0]
 8005a3e:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8005a40:	2110      	movs	r1, #16
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f954 	bl	8005cf0 <LPTIM_WaitForFlag>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b03      	cmp	r3, #3
 8005a4c:	d101      	bne.n	8005a52 <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e02f      	b.n	8005ab2 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f97c 	bl	8005d50 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 f93b 	bl	8005cd4 <HAL_LPTIM_GetState>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b03      	cmp	r3, #3
 8005a62:	d101      	bne.n	8005a68 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e024      	b.n	8005ab2 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	689a      	ldr	r2, [r3, #8]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f042 0210 	orr.w	r2, r2, #16
 8005a76:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689a      	ldr	r2, [r3, #8]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f042 0202 	orr.w	r2, r2, #2
 8005a86:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	691a      	ldr	r2, [r3, #16]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f042 0201 	orr.w	r2, r2, #1
 8005a96:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	691a      	ldr	r2, [r3, #16]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f042 0204 	orr.w	r2, r2, #4
 8005aa6:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3708      	adds	r7, #8
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <HAL_LPTIM_Counter_Stop_IT>:
  * @brief  Stop the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b082      	sub	sp, #8
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2202      	movs	r2, #2
 8005ac6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f940 	bl	8005d50 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 f8ff 	bl	8005cd4 <HAL_LPTIM_GetState>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b03      	cmp	r3, #3
 8005ada:	d101      	bne.n	8005ae0 <HAL_LPTIM_Counter_Stop_IT+0x26>
  {
    return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e014      	b.n	8005b0a <HAL_LPTIM_Counter_Stop_IT+0x50>
  }

  /* Disable Autoreload write complete interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689a      	ldr	r2, [r3, #8]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0210 	bic.w	r2, r2, #16
 8005aee:	609a      	str	r2, [r3, #8]

  /* Disable Autoreload match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689a      	ldr	r2, [r3, #8]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f022 0202 	bic.w	r2, r2, #2
 8005afe:	609a      	str	r2, [r3, #8]
  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b082      	sub	sp, #8
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d10d      	bne.n	8005b44 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d106      	bne.n	8005b44 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f882 	bl	8005c48 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d10d      	bne.n	8005b6e <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	f003 0302 	and.w	r3, r3, #2
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d106      	bne.n	8005b6e <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2202      	movs	r2, #2
 8005b66:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f877 	bl	8005c5c <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0304 	and.w	r3, r3, #4
 8005b78:	2b04      	cmp	r3, #4
 8005b7a:	d10d      	bne.n	8005b98 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f003 0304 	and.w	r3, r3, #4
 8005b86:	2b04      	cmp	r3, #4
 8005b88:	d106      	bne.n	8005b98 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2204      	movs	r2, #4
 8005b90:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 f86c 	bl	8005c70 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0308 	and.w	r3, r3, #8
 8005ba2:	2b08      	cmp	r3, #8
 8005ba4:	d10d      	bne.n	8005bc2 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f003 0308 	and.w	r3, r3, #8
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d106      	bne.n	8005bc2 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2208      	movs	r2, #8
 8005bba:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 f861 	bl	8005c84 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0310 	and.w	r3, r3, #16
 8005bcc:	2b10      	cmp	r3, #16
 8005bce:	d10d      	bne.n	8005bec <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f003 0310 	and.w	r3, r3, #16
 8005bda:	2b10      	cmp	r3, #16
 8005bdc:	d106      	bne.n	8005bec <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2210      	movs	r2, #16
 8005be4:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f856 	bl	8005c98 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0320 	and.w	r3, r3, #32
 8005bf6:	2b20      	cmp	r3, #32
 8005bf8:	d10d      	bne.n	8005c16 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f003 0320 	and.w	r3, r3, #32
 8005c04:	2b20      	cmp	r3, #32
 8005c06:	d106      	bne.n	8005c16 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f84b 	bl	8005cac <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c20:	2b40      	cmp	r3, #64	@ 0x40
 8005c22:	d10d      	bne.n	8005c40 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c2e:	2b40      	cmp	r3, #64	@ 0x40
 8005c30:	d106      	bne.n	8005c40 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2240      	movs	r2, #64	@ 0x40
 8005c38:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f840 	bl	8005cc0 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c40:	bf00      	nop
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005ce2:	b2db      	uxtb	r3, r3
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8005cfe:	4b12      	ldr	r3, [pc, #72]	@ (8005d48 <LPTIM_WaitForFlag+0x58>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a12      	ldr	r2, [pc, #72]	@ (8005d4c <LPTIM_WaitForFlag+0x5c>)
 8005d04:	fba2 2303 	umull	r2, r3, r2, r3
 8005d08:	0b9b      	lsrs	r3, r3, #14
 8005d0a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005d0e:	fb02 f303 	mul.w	r3, r2, r3
 8005d12:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	3b01      	subs	r3, #1
 8005d18:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d101      	bne.n	8005d24 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d002      	beq.n	8005d3a <LPTIM_WaitForFlag+0x4a>
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1ec      	bne.n	8005d14 <LPTIM_WaitForFlag+0x24>

  return result;
 8005d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	24000388 	.word	0x24000388
 8005d4c:	d1b71759 	.word	0xd1b71759

08005d50 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b08c      	sub	sp, #48	@ 0x30
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d5c:	f3ef 8310 	mrs	r3, PRIMASK
 8005d60:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d62:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8005d64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d66:	2301      	movs	r3, #1
 8005d68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	f383 8810 	msr	PRIMASK, r3
}
 8005d70:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a81      	ldr	r2, [pc, #516]	@ (8005f7c <LPTIM_Disable+0x22c>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d02d      	beq.n	8005dd8 <LPTIM_Disable+0x88>
 8005d7c:	4a7f      	ldr	r2, [pc, #508]	@ (8005f7c <LPTIM_Disable+0x22c>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d830      	bhi.n	8005de4 <LPTIM_Disable+0x94>
 8005d82:	4a7f      	ldr	r2, [pc, #508]	@ (8005f80 <LPTIM_Disable+0x230>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d021      	beq.n	8005dcc <LPTIM_Disable+0x7c>
 8005d88:	4a7d      	ldr	r2, [pc, #500]	@ (8005f80 <LPTIM_Disable+0x230>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d82a      	bhi.n	8005de4 <LPTIM_Disable+0x94>
 8005d8e:	4a7d      	ldr	r2, [pc, #500]	@ (8005f84 <LPTIM_Disable+0x234>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d015      	beq.n	8005dc0 <LPTIM_Disable+0x70>
 8005d94:	4a7b      	ldr	r2, [pc, #492]	@ (8005f84 <LPTIM_Disable+0x234>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d824      	bhi.n	8005de4 <LPTIM_Disable+0x94>
 8005d9a:	4a7b      	ldr	r2, [pc, #492]	@ (8005f88 <LPTIM_Disable+0x238>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d003      	beq.n	8005da8 <LPTIM_Disable+0x58>
 8005da0:	4a7a      	ldr	r2, [pc, #488]	@ (8005f8c <LPTIM_Disable+0x23c>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d006      	beq.n	8005db4 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8005da6:	e01d      	b.n	8005de4 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005da8:	4b79      	ldr	r3, [pc, #484]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dac:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8005db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8005db2:	e018      	b.n	8005de6 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005db4:	4b76      	ldr	r3, [pc, #472]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005db8:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8005dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8005dbe:	e012      	b.n	8005de6 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8005dc0:	4b73      	ldr	r3, [pc, #460]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dc4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8005dca:	e00c      	b.n	8005de6 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 8005dcc:	4b70      	ldr	r3, [pc, #448]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dd0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8005dd6:	e006      	b.n	8005de6 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 8005dd8:	4b6d      	ldr	r3, [pc, #436]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ddc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8005de2:	e000      	b.n	8005de6 <LPTIM_Disable+0x96>
      break;
 8005de4:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	695b      	ldr	r3, [r3, #20]
 8005dfc:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0c:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a5a      	ldr	r2, [pc, #360]	@ (8005f7c <LPTIM_Disable+0x22c>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d059      	beq.n	8005ecc <LPTIM_Disable+0x17c>
 8005e18:	4a58      	ldr	r2, [pc, #352]	@ (8005f7c <LPTIM_Disable+0x22c>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d867      	bhi.n	8005eee <LPTIM_Disable+0x19e>
 8005e1e:	4a58      	ldr	r2, [pc, #352]	@ (8005f80 <LPTIM_Disable+0x230>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d042      	beq.n	8005eaa <LPTIM_Disable+0x15a>
 8005e24:	4a56      	ldr	r2, [pc, #344]	@ (8005f80 <LPTIM_Disable+0x230>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d861      	bhi.n	8005eee <LPTIM_Disable+0x19e>
 8005e2a:	4a56      	ldr	r2, [pc, #344]	@ (8005f84 <LPTIM_Disable+0x234>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d02b      	beq.n	8005e88 <LPTIM_Disable+0x138>
 8005e30:	4a54      	ldr	r2, [pc, #336]	@ (8005f84 <LPTIM_Disable+0x234>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d85b      	bhi.n	8005eee <LPTIM_Disable+0x19e>
 8005e36:	4a54      	ldr	r2, [pc, #336]	@ (8005f88 <LPTIM_Disable+0x238>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d003      	beq.n	8005e44 <LPTIM_Disable+0xf4>
 8005e3c:	4a53      	ldr	r2, [pc, #332]	@ (8005f8c <LPTIM_Disable+0x23c>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d011      	beq.n	8005e66 <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8005e42:	e054      	b.n	8005eee <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8005e44:	4b52      	ldr	r3, [pc, #328]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e4a:	4a51      	ldr	r2, [pc, #324]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005e4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005e50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8005e54:	4b4e      	ldr	r3, [pc, #312]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e5a:	4a4d      	ldr	r2, [pc, #308]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005e5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      break;
 8005e64:	e044      	b.n	8005ef0 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8005e66:	4b4a      	ldr	r3, [pc, #296]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005e68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e6c:	4a48      	ldr	r2, [pc, #288]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005e6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005e72:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8005e76:	4b46      	ldr	r3, [pc, #280]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005e78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e7c:	4a44      	ldr	r2, [pc, #272]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005e7e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e82:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 8005e86:	e033      	b.n	8005ef0 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8005e88:	4b41      	ldr	r3, [pc, #260]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005e8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e8e:	4a40      	ldr	r2, [pc, #256]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005e90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005e94:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8005e98:	4b3d      	ldr	r3, [pc, #244]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005e9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e9e:	4a3c      	ldr	r2, [pc, #240]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005ea0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ea4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 8005ea8:	e022      	b.n	8005ef0 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 8005eaa:	4b39      	ldr	r3, [pc, #228]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005eac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005eb0:	4a37      	ldr	r2, [pc, #220]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005eb2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005eb6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 8005eba:	4b35      	ldr	r3, [pc, #212]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005ebc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ec0:	4a33      	ldr	r2, [pc, #204]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005ec2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ec6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 8005eca:	e011      	b.n	8005ef0 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 8005ecc:	4b30      	ldr	r3, [pc, #192]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005ece:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ed2:	4a2f      	ldr	r2, [pc, #188]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005ed4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005ed8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 8005edc:	4b2c      	ldr	r3, [pc, #176]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005ede:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ee2:	4a2b      	ldr	r2, [pc, #172]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005ee4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ee8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
      break;
 8005eec:	e000      	b.n	8005ef0 <LPTIM_Disable+0x1a0>
      break;
 8005eee:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d103      	bne.n	8005efe <LPTIM_Disable+0x1ae>
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 80d1 	beq.w	80060a0 <LPTIM_Disable+0x350>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a1e      	ldr	r2, [pc, #120]	@ (8005f7c <LPTIM_Disable+0x22c>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d031      	beq.n	8005f6c <LPTIM_Disable+0x21c>
 8005f08:	4a1c      	ldr	r2, [pc, #112]	@ (8005f7c <LPTIM_Disable+0x22c>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d842      	bhi.n	8005f94 <LPTIM_Disable+0x244>
 8005f0e:	4a1c      	ldr	r2, [pc, #112]	@ (8005f80 <LPTIM_Disable+0x230>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d024      	beq.n	8005f5e <LPTIM_Disable+0x20e>
 8005f14:	4a1a      	ldr	r2, [pc, #104]	@ (8005f80 <LPTIM_Disable+0x230>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d83c      	bhi.n	8005f94 <LPTIM_Disable+0x244>
 8005f1a:	4a1a      	ldr	r2, [pc, #104]	@ (8005f84 <LPTIM_Disable+0x234>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d017      	beq.n	8005f50 <LPTIM_Disable+0x200>
 8005f20:	4a18      	ldr	r2, [pc, #96]	@ (8005f84 <LPTIM_Disable+0x234>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d836      	bhi.n	8005f94 <LPTIM_Disable+0x244>
 8005f26:	4a18      	ldr	r2, [pc, #96]	@ (8005f88 <LPTIM_Disable+0x238>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d003      	beq.n	8005f34 <LPTIM_Disable+0x1e4>
 8005f2c:	4a17      	ldr	r2, [pc, #92]	@ (8005f8c <LPTIM_Disable+0x23c>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d007      	beq.n	8005f42 <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8005f32:	e02f      	b.n	8005f94 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 8005f34:	4b16      	ldr	r3, [pc, #88]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f38:	4a15      	ldr	r2, [pc, #84]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005f3a:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8005f3e:	6553      	str	r3, [r2, #84]	@ 0x54
        break;
 8005f40:	e029      	b.n	8005f96 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 8005f42:	4b13      	ldr	r3, [pc, #76]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f46:	4a12      	ldr	r2, [pc, #72]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005f48:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8005f4c:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 8005f4e:	e022      	b.n	8005f96 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 8005f50:	4b0f      	ldr	r3, [pc, #60]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f54:	4a0e      	ldr	r2, [pc, #56]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005f56:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005f5a:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 8005f5c:	e01b      	b.n	8005f96 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 8005f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f62:	4a0b      	ldr	r2, [pc, #44]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005f64:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005f68:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 8005f6a:	e014      	b.n	8005f96 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 8005f6c:	4b08      	ldr	r3, [pc, #32]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f70:	4a07      	ldr	r2, [pc, #28]	@ (8005f90 <LPTIM_Disable+0x240>)
 8005f72:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005f76:	6593      	str	r3, [r2, #88]	@ 0x58
        break;
 8005f78:	e00d      	b.n	8005f96 <LPTIM_Disable+0x246>
 8005f7a:	bf00      	nop
 8005f7c:	58003000 	.word	0x58003000
 8005f80:	58002c00 	.word	0x58002c00
 8005f84:	58002800 	.word	0x58002800
 8005f88:	40002400 	.word	0x40002400
 8005f8c:	58002400 	.word	0x58002400
 8005f90:	58024400 	.word	0x58024400
        break;
 8005f94:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d01a      	beq.n	8005fd2 <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	691a      	ldr	r2, [r3, #16]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f042 0201 	orr.w	r2, r2, #1
 8005faa:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	69fa      	ldr	r2, [r7, #28]
 8005fb2:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8005fb4:	2108      	movs	r1, #8
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7ff fe9a 	bl	8005cf0 <LPTIM_WaitForFlag>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b03      	cmp	r3, #3
 8005fc0:	d103      	bne.n	8005fca <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2203      	movs	r2, #3
 8005fc6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2208      	movs	r2, #8
 8005fd0:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d01a      	beq.n	800600e <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	691a      	ldr	r2, [r3, #16]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f042 0201 	orr.w	r2, r2, #1
 8005fe6:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	69ba      	ldr	r2, [r7, #24]
 8005fee:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8005ff0:	2110      	movs	r1, #16
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7ff fe7c 	bl	8005cf0 <LPTIM_WaitForFlag>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d103      	bne.n	8006006 <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2203      	movs	r2, #3
 8006002:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2210      	movs	r2, #16
 800600c:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a32      	ldr	r2, [pc, #200]	@ (80060dc <LPTIM_Disable+0x38c>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d039      	beq.n	800608c <LPTIM_Disable+0x33c>
 8006018:	4a30      	ldr	r2, [pc, #192]	@ (80060dc <LPTIM_Disable+0x38c>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d83f      	bhi.n	800609e <LPTIM_Disable+0x34e>
 800601e:	4a30      	ldr	r2, [pc, #192]	@ (80060e0 <LPTIM_Disable+0x390>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d02a      	beq.n	800607a <LPTIM_Disable+0x32a>
 8006024:	4a2e      	ldr	r2, [pc, #184]	@ (80060e0 <LPTIM_Disable+0x390>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d839      	bhi.n	800609e <LPTIM_Disable+0x34e>
 800602a:	4a2e      	ldr	r2, [pc, #184]	@ (80060e4 <LPTIM_Disable+0x394>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d01b      	beq.n	8006068 <LPTIM_Disable+0x318>
 8006030:	4a2c      	ldr	r2, [pc, #176]	@ (80060e4 <LPTIM_Disable+0x394>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d833      	bhi.n	800609e <LPTIM_Disable+0x34e>
 8006036:	4a2c      	ldr	r2, [pc, #176]	@ (80060e8 <LPTIM_Disable+0x398>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d003      	beq.n	8006044 <LPTIM_Disable+0x2f4>
 800603c:	4a2b      	ldr	r2, [pc, #172]	@ (80060ec <LPTIM_Disable+0x39c>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d009      	beq.n	8006056 <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8006042:	e02c      	b.n	800609e <LPTIM_Disable+0x34e>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8006044:	4b2a      	ldr	r3, [pc, #168]	@ (80060f0 <LPTIM_Disable+0x3a0>)
 8006046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006048:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 800604c:	4928      	ldr	r1, [pc, #160]	@ (80060f0 <LPTIM_Disable+0x3a0>)
 800604e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006050:	4313      	orrs	r3, r2
 8006052:	654b      	str	r3, [r1, #84]	@ 0x54
        break;
 8006054:	e024      	b.n	80060a0 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8006056:	4b26      	ldr	r3, [pc, #152]	@ (80060f0 <LPTIM_Disable+0x3a0>)
 8006058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800605a:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800605e:	4924      	ldr	r1, [pc, #144]	@ (80060f0 <LPTIM_Disable+0x3a0>)
 8006060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006062:	4313      	orrs	r3, r2
 8006064:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 8006066:	e01b      	b.n	80060a0 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8006068:	4b21      	ldr	r3, [pc, #132]	@ (80060f0 <LPTIM_Disable+0x3a0>)
 800606a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800606c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006070:	491f      	ldr	r1, [pc, #124]	@ (80060f0 <LPTIM_Disable+0x3a0>)
 8006072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006074:	4313      	orrs	r3, r2
 8006076:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 8006078:	e012      	b.n	80060a0 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 800607a:	4b1d      	ldr	r3, [pc, #116]	@ (80060f0 <LPTIM_Disable+0x3a0>)
 800607c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800607e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006082:	491b      	ldr	r1, [pc, #108]	@ (80060f0 <LPTIM_Disable+0x3a0>)
 8006084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006086:	4313      	orrs	r3, r2
 8006088:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 800608a:	e009      	b.n	80060a0 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 800608c:	4b18      	ldr	r3, [pc, #96]	@ (80060f0 <LPTIM_Disable+0x3a0>)
 800608e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006090:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006094:	4916      	ldr	r1, [pc, #88]	@ (80060f0 <LPTIM_Disable+0x3a0>)
 8006096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006098:	4313      	orrs	r3, r2
 800609a:	658b      	str	r3, [r1, #88]	@ 0x58
        break;
 800609c:	e000      	b.n	80060a0 <LPTIM_Disable+0x350>
        break;
 800609e:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	691a      	ldr	r2, [r3, #16]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f022 0201 	bic.w	r2, r2, #1
 80060ae:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060b6:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6a3a      	ldr	r2, [r7, #32]
 80060be:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	697a      	ldr	r2, [r7, #20]
 80060c6:	625a      	str	r2, [r3, #36]	@ 0x24
 80060c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	f383 8810 	msr	PRIMASK, r3
}
 80060d2:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80060d4:	bf00      	nop
 80060d6:	3730      	adds	r7, #48	@ 0x30
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	58003000 	.word	0x58003000
 80060e0:	58002c00 	.word	0x58002c00
 80060e4:	58002800 	.word	0x58002800
 80060e8:	40002400 	.word	0x40002400
 80060ec:	58002400 	.word	0x58002400
 80060f0:	58024400 	.word	0x58024400

080060f4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 80060f4:	b480      	push	{r7}
 80060f6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 80060f8:	4b05      	ldr	r3, [pc, #20]	@ (8006110 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a04      	ldr	r2, [pc, #16]	@ (8006110 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80060fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006102:	6013      	str	r3, [r2, #0]
}
 8006104:	bf00      	nop
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	58024800 	.word	0x58024800

08006114 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800611c:	4b19      	ldr	r3, [pc, #100]	@ (8006184 <HAL_PWREx_ConfigSupply+0x70>)
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f003 0304 	and.w	r3, r3, #4
 8006124:	2b04      	cmp	r3, #4
 8006126:	d00a      	beq.n	800613e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006128:	4b16      	ldr	r3, [pc, #88]	@ (8006184 <HAL_PWREx_ConfigSupply+0x70>)
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	f003 0307 	and.w	r3, r3, #7
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	429a      	cmp	r2, r3
 8006134:	d001      	beq.n	800613a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e01f      	b.n	800617a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800613a:	2300      	movs	r3, #0
 800613c:	e01d      	b.n	800617a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800613e:	4b11      	ldr	r3, [pc, #68]	@ (8006184 <HAL_PWREx_ConfigSupply+0x70>)
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	f023 0207 	bic.w	r2, r3, #7
 8006146:	490f      	ldr	r1, [pc, #60]	@ (8006184 <HAL_PWREx_ConfigSupply+0x70>)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4313      	orrs	r3, r2
 800614c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800614e:	f7fc fc43 	bl	80029d8 <HAL_GetTick>
 8006152:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006154:	e009      	b.n	800616a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006156:	f7fc fc3f 	bl	80029d8 <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006164:	d901      	bls.n	800616a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e007      	b.n	800617a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800616a:	4b06      	ldr	r3, [pc, #24]	@ (8006184 <HAL_PWREx_ConfigSupply+0x70>)
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006172:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006176:	d1ee      	bne.n	8006156 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	58024800 	.word	0x58024800

08006188 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b08c      	sub	sp, #48	@ 0x30
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d102      	bne.n	800619c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	f000 bc48 	b.w	8006a2c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0301 	and.w	r3, r3, #1
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 8088 	beq.w	80062ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061aa:	4b99      	ldr	r3, [pc, #612]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80061b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80061b4:	4b96      	ldr	r3, [pc, #600]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 80061b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80061ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061bc:	2b10      	cmp	r3, #16
 80061be:	d007      	beq.n	80061d0 <HAL_RCC_OscConfig+0x48>
 80061c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c2:	2b18      	cmp	r3, #24
 80061c4:	d111      	bne.n	80061ea <HAL_RCC_OscConfig+0x62>
 80061c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c8:	f003 0303 	and.w	r3, r3, #3
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d10c      	bne.n	80061ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061d0:	4b8f      	ldr	r3, [pc, #572]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d06d      	beq.n	80062b8 <HAL_RCC_OscConfig+0x130>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d169      	bne.n	80062b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	f000 bc21 	b.w	8006a2c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061f2:	d106      	bne.n	8006202 <HAL_RCC_OscConfig+0x7a>
 80061f4:	4b86      	ldr	r3, [pc, #536]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a85      	ldr	r2, [pc, #532]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 80061fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061fe:	6013      	str	r3, [r2, #0]
 8006200:	e02e      	b.n	8006260 <HAL_RCC_OscConfig+0xd8>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10c      	bne.n	8006224 <HAL_RCC_OscConfig+0x9c>
 800620a:	4b81      	ldr	r3, [pc, #516]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a80      	ldr	r2, [pc, #512]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 8006210:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006214:	6013      	str	r3, [r2, #0]
 8006216:	4b7e      	ldr	r3, [pc, #504]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a7d      	ldr	r2, [pc, #500]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 800621c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006220:	6013      	str	r3, [r2, #0]
 8006222:	e01d      	b.n	8006260 <HAL_RCC_OscConfig+0xd8>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800622c:	d10c      	bne.n	8006248 <HAL_RCC_OscConfig+0xc0>
 800622e:	4b78      	ldr	r3, [pc, #480]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a77      	ldr	r2, [pc, #476]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 8006234:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006238:	6013      	str	r3, [r2, #0]
 800623a:	4b75      	ldr	r3, [pc, #468]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a74      	ldr	r2, [pc, #464]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 8006240:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	e00b      	b.n	8006260 <HAL_RCC_OscConfig+0xd8>
 8006248:	4b71      	ldr	r3, [pc, #452]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a70      	ldr	r2, [pc, #448]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 800624e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006252:	6013      	str	r3, [r2, #0]
 8006254:	4b6e      	ldr	r3, [pc, #440]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a6d      	ldr	r2, [pc, #436]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 800625a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800625e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d013      	beq.n	8006290 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006268:	f7fc fbb6 	bl	80029d8 <HAL_GetTick>
 800626c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800626e:	e008      	b.n	8006282 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006270:	f7fc fbb2 	bl	80029d8 <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	2b64      	cmp	r3, #100	@ 0x64
 800627c:	d901      	bls.n	8006282 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e3d4      	b.n	8006a2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006282:	4b63      	ldr	r3, [pc, #396]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d0f0      	beq.n	8006270 <HAL_RCC_OscConfig+0xe8>
 800628e:	e014      	b.n	80062ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006290:	f7fc fba2 	bl	80029d8 <HAL_GetTick>
 8006294:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006296:	e008      	b.n	80062aa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006298:	f7fc fb9e 	bl	80029d8 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b64      	cmp	r3, #100	@ 0x64
 80062a4:	d901      	bls.n	80062aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e3c0      	b.n	8006a2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80062aa:	4b59      	ldr	r3, [pc, #356]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1f0      	bne.n	8006298 <HAL_RCC_OscConfig+0x110>
 80062b6:	e000      	b.n	80062ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f000 80ca 	beq.w	800645c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062c8:	4b51      	ldr	r3, [pc, #324]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062d0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80062d2:	4b4f      	ldr	r3, [pc, #316]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 80062d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80062d8:	6a3b      	ldr	r3, [r7, #32]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d007      	beq.n	80062ee <HAL_RCC_OscConfig+0x166>
 80062de:	6a3b      	ldr	r3, [r7, #32]
 80062e0:	2b18      	cmp	r3, #24
 80062e2:	d156      	bne.n	8006392 <HAL_RCC_OscConfig+0x20a>
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	f003 0303 	and.w	r3, r3, #3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d151      	bne.n	8006392 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062ee:	4b48      	ldr	r3, [pc, #288]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0304 	and.w	r3, r3, #4
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d005      	beq.n	8006306 <HAL_RCC_OscConfig+0x17e>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d101      	bne.n	8006306 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e392      	b.n	8006a2c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006306:	4b42      	ldr	r3, [pc, #264]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f023 0219 	bic.w	r2, r3, #25
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	493f      	ldr	r1, [pc, #252]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 8006314:	4313      	orrs	r3, r2
 8006316:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006318:	f7fc fb5e 	bl	80029d8 <HAL_GetTick>
 800631c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800631e:	e008      	b.n	8006332 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006320:	f7fc fb5a 	bl	80029d8 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	2b02      	cmp	r3, #2
 800632c:	d901      	bls.n	8006332 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e37c      	b.n	8006a2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006332:	4b37      	ldr	r3, [pc, #220]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0304 	and.w	r3, r3, #4
 800633a:	2b00      	cmp	r3, #0
 800633c:	d0f0      	beq.n	8006320 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800633e:	f7fc fb7b 	bl	8002a38 <HAL_GetREVID>
 8006342:	4603      	mov	r3, r0
 8006344:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006348:	4293      	cmp	r3, r2
 800634a:	d817      	bhi.n	800637c <HAL_RCC_OscConfig+0x1f4>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	2b40      	cmp	r3, #64	@ 0x40
 8006352:	d108      	bne.n	8006366 <HAL_RCC_OscConfig+0x1de>
 8006354:	4b2e      	ldr	r3, [pc, #184]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800635c:	4a2c      	ldr	r2, [pc, #176]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 800635e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006362:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006364:	e07a      	b.n	800645c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006366:	4b2a      	ldr	r3, [pc, #168]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	031b      	lsls	r3, r3, #12
 8006374:	4926      	ldr	r1, [pc, #152]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 8006376:	4313      	orrs	r3, r2
 8006378:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800637a:	e06f      	b.n	800645c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800637c:	4b24      	ldr	r3, [pc, #144]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	061b      	lsls	r3, r3, #24
 800638a:	4921      	ldr	r1, [pc, #132]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 800638c:	4313      	orrs	r3, r2
 800638e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006390:	e064      	b.n	800645c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d047      	beq.n	800642a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800639a:	4b1d      	ldr	r3, [pc, #116]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f023 0219 	bic.w	r2, r3, #25
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	491a      	ldr	r1, [pc, #104]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ac:	f7fc fb14 	bl	80029d8 <HAL_GetTick>
 80063b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063b4:	f7fc fb10 	bl	80029d8 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e332      	b.n	8006a2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063c6:	4b12      	ldr	r3, [pc, #72]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0304 	and.w	r3, r3, #4
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d0f0      	beq.n	80063b4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063d2:	f7fc fb31 	bl	8002a38 <HAL_GetREVID>
 80063d6:	4603      	mov	r3, r0
 80063d8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80063dc:	4293      	cmp	r3, r2
 80063de:	d819      	bhi.n	8006414 <HAL_RCC_OscConfig+0x28c>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	2b40      	cmp	r3, #64	@ 0x40
 80063e6:	d108      	bne.n	80063fa <HAL_RCC_OscConfig+0x272>
 80063e8:	4b09      	ldr	r3, [pc, #36]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80063f0:	4a07      	ldr	r2, [pc, #28]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 80063f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063f6:	6053      	str	r3, [r2, #4]
 80063f8:	e030      	b.n	800645c <HAL_RCC_OscConfig+0x2d4>
 80063fa:	4b05      	ldr	r3, [pc, #20]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	031b      	lsls	r3, r3, #12
 8006408:	4901      	ldr	r1, [pc, #4]	@ (8006410 <HAL_RCC_OscConfig+0x288>)
 800640a:	4313      	orrs	r3, r2
 800640c:	604b      	str	r3, [r1, #4]
 800640e:	e025      	b.n	800645c <HAL_RCC_OscConfig+0x2d4>
 8006410:	58024400 	.word	0x58024400
 8006414:	4b9a      	ldr	r3, [pc, #616]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	061b      	lsls	r3, r3, #24
 8006422:	4997      	ldr	r1, [pc, #604]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 8006424:	4313      	orrs	r3, r2
 8006426:	604b      	str	r3, [r1, #4]
 8006428:	e018      	b.n	800645c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800642a:	4b95      	ldr	r3, [pc, #596]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a94      	ldr	r2, [pc, #592]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 8006430:	f023 0301 	bic.w	r3, r3, #1
 8006434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006436:	f7fc facf 	bl	80029d8 <HAL_GetTick>
 800643a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800643c:	e008      	b.n	8006450 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800643e:	f7fc facb 	bl	80029d8 <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	2b02      	cmp	r3, #2
 800644a:	d901      	bls.n	8006450 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e2ed      	b.n	8006a2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006450:	4b8b      	ldr	r3, [pc, #556]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0304 	and.w	r3, r3, #4
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1f0      	bne.n	800643e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0310 	and.w	r3, r3, #16
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 80a9 	beq.w	80065bc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800646a:	4b85      	ldr	r3, [pc, #532]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006472:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006474:	4b82      	ldr	r3, [pc, #520]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 8006476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006478:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	2b08      	cmp	r3, #8
 800647e:	d007      	beq.n	8006490 <HAL_RCC_OscConfig+0x308>
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	2b18      	cmp	r3, #24
 8006484:	d13a      	bne.n	80064fc <HAL_RCC_OscConfig+0x374>
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f003 0303 	and.w	r3, r3, #3
 800648c:	2b01      	cmp	r3, #1
 800648e:	d135      	bne.n	80064fc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006490:	4b7b      	ldr	r3, [pc, #492]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006498:	2b00      	cmp	r3, #0
 800649a:	d005      	beq.n	80064a8 <HAL_RCC_OscConfig+0x320>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	69db      	ldr	r3, [r3, #28]
 80064a0:	2b80      	cmp	r3, #128	@ 0x80
 80064a2:	d001      	beq.n	80064a8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e2c1      	b.n	8006a2c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80064a8:	f7fc fac6 	bl	8002a38 <HAL_GetREVID>
 80064ac:	4603      	mov	r3, r0
 80064ae:	f241 0203 	movw	r2, #4099	@ 0x1003
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d817      	bhi.n	80064e6 <HAL_RCC_OscConfig+0x35e>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	2b20      	cmp	r3, #32
 80064bc:	d108      	bne.n	80064d0 <HAL_RCC_OscConfig+0x348>
 80064be:	4b70      	ldr	r3, [pc, #448]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80064c6:	4a6e      	ldr	r2, [pc, #440]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 80064c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80064cc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80064ce:	e075      	b.n	80065bc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80064d0:	4b6b      	ldr	r3, [pc, #428]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	069b      	lsls	r3, r3, #26
 80064de:	4968      	ldr	r1, [pc, #416]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80064e4:	e06a      	b.n	80065bc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80064e6:	4b66      	ldr	r3, [pc, #408]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	061b      	lsls	r3, r3, #24
 80064f4:	4962      	ldr	r1, [pc, #392]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80064fa:	e05f      	b.n	80065bc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	69db      	ldr	r3, [r3, #28]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d042      	beq.n	800658a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006504:	4b5e      	ldr	r3, [pc, #376]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a5d      	ldr	r2, [pc, #372]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 800650a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800650e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006510:	f7fc fa62 	bl	80029d8 <HAL_GetTick>
 8006514:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006516:	e008      	b.n	800652a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006518:	f7fc fa5e 	bl	80029d8 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	2b02      	cmp	r3, #2
 8006524:	d901      	bls.n	800652a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e280      	b.n	8006a2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800652a:	4b55      	ldr	r3, [pc, #340]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006532:	2b00      	cmp	r3, #0
 8006534:	d0f0      	beq.n	8006518 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006536:	f7fc fa7f 	bl	8002a38 <HAL_GetREVID>
 800653a:	4603      	mov	r3, r0
 800653c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006540:	4293      	cmp	r3, r2
 8006542:	d817      	bhi.n	8006574 <HAL_RCC_OscConfig+0x3ec>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a1b      	ldr	r3, [r3, #32]
 8006548:	2b20      	cmp	r3, #32
 800654a:	d108      	bne.n	800655e <HAL_RCC_OscConfig+0x3d6>
 800654c:	4b4c      	ldr	r3, [pc, #304]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006554:	4a4a      	ldr	r2, [pc, #296]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 8006556:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800655a:	6053      	str	r3, [r2, #4]
 800655c:	e02e      	b.n	80065bc <HAL_RCC_OscConfig+0x434>
 800655e:	4b48      	ldr	r3, [pc, #288]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	069b      	lsls	r3, r3, #26
 800656c:	4944      	ldr	r1, [pc, #272]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 800656e:	4313      	orrs	r3, r2
 8006570:	604b      	str	r3, [r1, #4]
 8006572:	e023      	b.n	80065bc <HAL_RCC_OscConfig+0x434>
 8006574:	4b42      	ldr	r3, [pc, #264]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a1b      	ldr	r3, [r3, #32]
 8006580:	061b      	lsls	r3, r3, #24
 8006582:	493f      	ldr	r1, [pc, #252]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 8006584:	4313      	orrs	r3, r2
 8006586:	60cb      	str	r3, [r1, #12]
 8006588:	e018      	b.n	80065bc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800658a:	4b3d      	ldr	r3, [pc, #244]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a3c      	ldr	r2, [pc, #240]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 8006590:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006596:	f7fc fa1f 	bl	80029d8 <HAL_GetTick>
 800659a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800659c:	e008      	b.n	80065b0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800659e:	f7fc fa1b 	bl	80029d8 <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d901      	bls.n	80065b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e23d      	b.n	8006a2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80065b0:	4b33      	ldr	r3, [pc, #204]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1f0      	bne.n	800659e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0308 	and.w	r3, r3, #8
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d036      	beq.n	8006636 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d019      	beq.n	8006604 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065d0:	4b2b      	ldr	r3, [pc, #172]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 80065d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065d4:	4a2a      	ldr	r2, [pc, #168]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 80065d6:	f043 0301 	orr.w	r3, r3, #1
 80065da:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065dc:	f7fc f9fc 	bl	80029d8 <HAL_GetTick>
 80065e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80065e2:	e008      	b.n	80065f6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065e4:	f7fc f9f8 	bl	80029d8 <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d901      	bls.n	80065f6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e21a      	b.n	8006a2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80065f6:	4b22      	ldr	r3, [pc, #136]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 80065f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065fa:	f003 0302 	and.w	r3, r3, #2
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d0f0      	beq.n	80065e4 <HAL_RCC_OscConfig+0x45c>
 8006602:	e018      	b.n	8006636 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006604:	4b1e      	ldr	r3, [pc, #120]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 8006606:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006608:	4a1d      	ldr	r2, [pc, #116]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 800660a:	f023 0301 	bic.w	r3, r3, #1
 800660e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006610:	f7fc f9e2 	bl	80029d8 <HAL_GetTick>
 8006614:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006616:	e008      	b.n	800662a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006618:	f7fc f9de 	bl	80029d8 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	2b02      	cmp	r3, #2
 8006624:	d901      	bls.n	800662a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e200      	b.n	8006a2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800662a:	4b15      	ldr	r3, [pc, #84]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 800662c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800662e:	f003 0302 	and.w	r3, r3, #2
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1f0      	bne.n	8006618 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0320 	and.w	r3, r3, #32
 800663e:	2b00      	cmp	r3, #0
 8006640:	d039      	beq.n	80066b6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d01c      	beq.n	8006684 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800664a:	4b0d      	ldr	r3, [pc, #52]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a0c      	ldr	r2, [pc, #48]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 8006650:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006654:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006656:	f7fc f9bf 	bl	80029d8 <HAL_GetTick>
 800665a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800665c:	e008      	b.n	8006670 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800665e:	f7fc f9bb 	bl	80029d8 <HAL_GetTick>
 8006662:	4602      	mov	r2, r0
 8006664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	2b02      	cmp	r3, #2
 800666a:	d901      	bls.n	8006670 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e1dd      	b.n	8006a2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006670:	4b03      	ldr	r3, [pc, #12]	@ (8006680 <HAL_RCC_OscConfig+0x4f8>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d0f0      	beq.n	800665e <HAL_RCC_OscConfig+0x4d6>
 800667c:	e01b      	b.n	80066b6 <HAL_RCC_OscConfig+0x52e>
 800667e:	bf00      	nop
 8006680:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006684:	4b9b      	ldr	r3, [pc, #620]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a9a      	ldr	r2, [pc, #616]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 800668a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800668e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006690:	f7fc f9a2 	bl	80029d8 <HAL_GetTick>
 8006694:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006696:	e008      	b.n	80066aa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006698:	f7fc f99e 	bl	80029d8 <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e1c0      	b.n	8006a2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80066aa:	4b92      	ldr	r3, [pc, #584]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1f0      	bne.n	8006698 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0304 	and.w	r3, r3, #4
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f000 8081 	beq.w	80067c6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80066c4:	4b8c      	ldr	r3, [pc, #560]	@ (80068f8 <HAL_RCC_OscConfig+0x770>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a8b      	ldr	r2, [pc, #556]	@ (80068f8 <HAL_RCC_OscConfig+0x770>)
 80066ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066d0:	f7fc f982 	bl	80029d8 <HAL_GetTick>
 80066d4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066d6:	e008      	b.n	80066ea <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066d8:	f7fc f97e 	bl	80029d8 <HAL_GetTick>
 80066dc:	4602      	mov	r2, r0
 80066de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	2b64      	cmp	r3, #100	@ 0x64
 80066e4:	d901      	bls.n	80066ea <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e1a0      	b.n	8006a2c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066ea:	4b83      	ldr	r3, [pc, #524]	@ (80068f8 <HAL_RCC_OscConfig+0x770>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d0f0      	beq.n	80066d8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d106      	bne.n	800670c <HAL_RCC_OscConfig+0x584>
 80066fe:	4b7d      	ldr	r3, [pc, #500]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 8006700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006702:	4a7c      	ldr	r2, [pc, #496]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 8006704:	f043 0301 	orr.w	r3, r3, #1
 8006708:	6713      	str	r3, [r2, #112]	@ 0x70
 800670a:	e02d      	b.n	8006768 <HAL_RCC_OscConfig+0x5e0>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10c      	bne.n	800672e <HAL_RCC_OscConfig+0x5a6>
 8006714:	4b77      	ldr	r3, [pc, #476]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 8006716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006718:	4a76      	ldr	r2, [pc, #472]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 800671a:	f023 0301 	bic.w	r3, r3, #1
 800671e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006720:	4b74      	ldr	r3, [pc, #464]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 8006722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006724:	4a73      	ldr	r2, [pc, #460]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 8006726:	f023 0304 	bic.w	r3, r3, #4
 800672a:	6713      	str	r3, [r2, #112]	@ 0x70
 800672c:	e01c      	b.n	8006768 <HAL_RCC_OscConfig+0x5e0>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	2b05      	cmp	r3, #5
 8006734:	d10c      	bne.n	8006750 <HAL_RCC_OscConfig+0x5c8>
 8006736:	4b6f      	ldr	r3, [pc, #444]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 8006738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800673a:	4a6e      	ldr	r2, [pc, #440]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 800673c:	f043 0304 	orr.w	r3, r3, #4
 8006740:	6713      	str	r3, [r2, #112]	@ 0x70
 8006742:	4b6c      	ldr	r3, [pc, #432]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 8006744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006746:	4a6b      	ldr	r2, [pc, #428]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 8006748:	f043 0301 	orr.w	r3, r3, #1
 800674c:	6713      	str	r3, [r2, #112]	@ 0x70
 800674e:	e00b      	b.n	8006768 <HAL_RCC_OscConfig+0x5e0>
 8006750:	4b68      	ldr	r3, [pc, #416]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 8006752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006754:	4a67      	ldr	r2, [pc, #412]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 8006756:	f023 0301 	bic.w	r3, r3, #1
 800675a:	6713      	str	r3, [r2, #112]	@ 0x70
 800675c:	4b65      	ldr	r3, [pc, #404]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 800675e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006760:	4a64      	ldr	r2, [pc, #400]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 8006762:	f023 0304 	bic.w	r3, r3, #4
 8006766:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d015      	beq.n	800679c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006770:	f7fc f932 	bl	80029d8 <HAL_GetTick>
 8006774:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006776:	e00a      	b.n	800678e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006778:	f7fc f92e 	bl	80029d8 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006786:	4293      	cmp	r3, r2
 8006788:	d901      	bls.n	800678e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e14e      	b.n	8006a2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800678e:	4b59      	ldr	r3, [pc, #356]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 8006790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	2b00      	cmp	r3, #0
 8006798:	d0ee      	beq.n	8006778 <HAL_RCC_OscConfig+0x5f0>
 800679a:	e014      	b.n	80067c6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800679c:	f7fc f91c 	bl	80029d8 <HAL_GetTick>
 80067a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80067a2:	e00a      	b.n	80067ba <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067a4:	f7fc f918 	bl	80029d8 <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d901      	bls.n	80067ba <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e138      	b.n	8006a2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80067ba:	4b4e      	ldr	r3, [pc, #312]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 80067bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067be:	f003 0302 	and.w	r3, r3, #2
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1ee      	bne.n	80067a4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f000 812d 	beq.w	8006a2a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80067d0:	4b48      	ldr	r3, [pc, #288]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067d8:	2b18      	cmp	r3, #24
 80067da:	f000 80bd 	beq.w	8006958 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	f040 809e 	bne.w	8006924 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067e8:	4b42      	ldr	r3, [pc, #264]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a41      	ldr	r2, [pc, #260]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 80067ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067f4:	f7fc f8f0 	bl	80029d8 <HAL_GetTick>
 80067f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067fa:	e008      	b.n	800680e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067fc:	f7fc f8ec 	bl	80029d8 <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	2b02      	cmp	r3, #2
 8006808:	d901      	bls.n	800680e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e10e      	b.n	8006a2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800680e:	4b39      	ldr	r3, [pc, #228]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1f0      	bne.n	80067fc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800681a:	4b36      	ldr	r3, [pc, #216]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 800681c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800681e:	4b37      	ldr	r3, [pc, #220]	@ (80068fc <HAL_RCC_OscConfig+0x774>)
 8006820:	4013      	ands	r3, r2
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800682a:	0112      	lsls	r2, r2, #4
 800682c:	430a      	orrs	r2, r1
 800682e:	4931      	ldr	r1, [pc, #196]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 8006830:	4313      	orrs	r3, r2
 8006832:	628b      	str	r3, [r1, #40]	@ 0x28
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006838:	3b01      	subs	r3, #1
 800683a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006842:	3b01      	subs	r3, #1
 8006844:	025b      	lsls	r3, r3, #9
 8006846:	b29b      	uxth	r3, r3
 8006848:	431a      	orrs	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800684e:	3b01      	subs	r3, #1
 8006850:	041b      	lsls	r3, r3, #16
 8006852:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006856:	431a      	orrs	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800685c:	3b01      	subs	r3, #1
 800685e:	061b      	lsls	r3, r3, #24
 8006860:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006864:	4923      	ldr	r1, [pc, #140]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 8006866:	4313      	orrs	r3, r2
 8006868:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800686a:	4b22      	ldr	r3, [pc, #136]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 800686c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800686e:	4a21      	ldr	r2, [pc, #132]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 8006870:	f023 0301 	bic.w	r3, r3, #1
 8006874:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006876:	4b1f      	ldr	r3, [pc, #124]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 8006878:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800687a:	4b21      	ldr	r3, [pc, #132]	@ (8006900 <HAL_RCC_OscConfig+0x778>)
 800687c:	4013      	ands	r3, r2
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006882:	00d2      	lsls	r2, r2, #3
 8006884:	491b      	ldr	r1, [pc, #108]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 8006886:	4313      	orrs	r3, r2
 8006888:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800688a:	4b1a      	ldr	r3, [pc, #104]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 800688c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800688e:	f023 020c 	bic.w	r2, r3, #12
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006896:	4917      	ldr	r1, [pc, #92]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 8006898:	4313      	orrs	r3, r2
 800689a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800689c:	4b15      	ldr	r3, [pc, #84]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 800689e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a0:	f023 0202 	bic.w	r2, r3, #2
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068a8:	4912      	ldr	r1, [pc, #72]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80068ae:	4b11      	ldr	r3, [pc, #68]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 80068b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b2:	4a10      	ldr	r2, [pc, #64]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 80068b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068ba:	4b0e      	ldr	r3, [pc, #56]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 80068bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068be:	4a0d      	ldr	r2, [pc, #52]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 80068c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80068c6:	4b0b      	ldr	r3, [pc, #44]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 80068c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ca:	4a0a      	ldr	r2, [pc, #40]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 80068cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80068d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80068d2:	4b08      	ldr	r3, [pc, #32]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 80068d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068d6:	4a07      	ldr	r2, [pc, #28]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 80068d8:	f043 0301 	orr.w	r3, r3, #1
 80068dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068de:	4b05      	ldr	r3, [pc, #20]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a04      	ldr	r2, [pc, #16]	@ (80068f4 <HAL_RCC_OscConfig+0x76c>)
 80068e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80068e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ea:	f7fc f875 	bl	80029d8 <HAL_GetTick>
 80068ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068f0:	e011      	b.n	8006916 <HAL_RCC_OscConfig+0x78e>
 80068f2:	bf00      	nop
 80068f4:	58024400 	.word	0x58024400
 80068f8:	58024800 	.word	0x58024800
 80068fc:	fffffc0c 	.word	0xfffffc0c
 8006900:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006904:	f7fc f868 	bl	80029d8 <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	2b02      	cmp	r3, #2
 8006910:	d901      	bls.n	8006916 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e08a      	b.n	8006a2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006916:	4b47      	ldr	r3, [pc, #284]	@ (8006a34 <HAL_RCC_OscConfig+0x8ac>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d0f0      	beq.n	8006904 <HAL_RCC_OscConfig+0x77c>
 8006922:	e082      	b.n	8006a2a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006924:	4b43      	ldr	r3, [pc, #268]	@ (8006a34 <HAL_RCC_OscConfig+0x8ac>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a42      	ldr	r2, [pc, #264]	@ (8006a34 <HAL_RCC_OscConfig+0x8ac>)
 800692a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800692e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006930:	f7fc f852 	bl	80029d8 <HAL_GetTick>
 8006934:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006936:	e008      	b.n	800694a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006938:	f7fc f84e 	bl	80029d8 <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	2b02      	cmp	r3, #2
 8006944:	d901      	bls.n	800694a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e070      	b.n	8006a2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800694a:	4b3a      	ldr	r3, [pc, #232]	@ (8006a34 <HAL_RCC_OscConfig+0x8ac>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1f0      	bne.n	8006938 <HAL_RCC_OscConfig+0x7b0>
 8006956:	e068      	b.n	8006a2a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006958:	4b36      	ldr	r3, [pc, #216]	@ (8006a34 <HAL_RCC_OscConfig+0x8ac>)
 800695a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800695c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800695e:	4b35      	ldr	r3, [pc, #212]	@ (8006a34 <HAL_RCC_OscConfig+0x8ac>)
 8006960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006962:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006968:	2b01      	cmp	r3, #1
 800696a:	d031      	beq.n	80069d0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	f003 0203 	and.w	r2, r3, #3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006976:	429a      	cmp	r2, r3
 8006978:	d12a      	bne.n	80069d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	091b      	lsrs	r3, r3, #4
 800697e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006986:	429a      	cmp	r2, r3
 8006988:	d122      	bne.n	80069d0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006994:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006996:	429a      	cmp	r2, r3
 8006998:	d11a      	bne.n	80069d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	0a5b      	lsrs	r3, r3, #9
 800699e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069a6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d111      	bne.n	80069d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	0c1b      	lsrs	r3, r3, #16
 80069b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d108      	bne.n	80069d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	0e1b      	lsrs	r3, r3, #24
 80069c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ca:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d001      	beq.n	80069d4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e02b      	b.n	8006a2c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80069d4:	4b17      	ldr	r3, [pc, #92]	@ (8006a34 <HAL_RCC_OscConfig+0x8ac>)
 80069d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069d8:	08db      	lsrs	r3, r3, #3
 80069da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069de:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d01f      	beq.n	8006a2a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80069ea:	4b12      	ldr	r3, [pc, #72]	@ (8006a34 <HAL_RCC_OscConfig+0x8ac>)
 80069ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ee:	4a11      	ldr	r2, [pc, #68]	@ (8006a34 <HAL_RCC_OscConfig+0x8ac>)
 80069f0:	f023 0301 	bic.w	r3, r3, #1
 80069f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80069f6:	f7fb ffef 	bl	80029d8 <HAL_GetTick>
 80069fa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80069fc:	bf00      	nop
 80069fe:	f7fb ffeb 	bl	80029d8 <HAL_GetTick>
 8006a02:	4602      	mov	r2, r0
 8006a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d0f9      	beq.n	80069fe <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8006a34 <HAL_RCC_OscConfig+0x8ac>)
 8006a0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8006a38 <HAL_RCC_OscConfig+0x8b0>)
 8006a10:	4013      	ands	r3, r2
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006a16:	00d2      	lsls	r2, r2, #3
 8006a18:	4906      	ldr	r1, [pc, #24]	@ (8006a34 <HAL_RCC_OscConfig+0x8ac>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006a1e:	4b05      	ldr	r3, [pc, #20]	@ (8006a34 <HAL_RCC_OscConfig+0x8ac>)
 8006a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a22:	4a04      	ldr	r2, [pc, #16]	@ (8006a34 <HAL_RCC_OscConfig+0x8ac>)
 8006a24:	f043 0301 	orr.w	r3, r3, #1
 8006a28:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3730      	adds	r7, #48	@ 0x30
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	58024400 	.word	0x58024400
 8006a38:	ffff0007 	.word	0xffff0007

08006a3c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d101      	bne.n	8006a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e19c      	b.n	8006d8a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a50:	4b8a      	ldr	r3, [pc, #552]	@ (8006c7c <HAL_RCC_ClockConfig+0x240>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 030f 	and.w	r3, r3, #15
 8006a58:	683a      	ldr	r2, [r7, #0]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d910      	bls.n	8006a80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a5e:	4b87      	ldr	r3, [pc, #540]	@ (8006c7c <HAL_RCC_ClockConfig+0x240>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f023 020f 	bic.w	r2, r3, #15
 8006a66:	4985      	ldr	r1, [pc, #532]	@ (8006c7c <HAL_RCC_ClockConfig+0x240>)
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a6e:	4b83      	ldr	r3, [pc, #524]	@ (8006c7c <HAL_RCC_ClockConfig+0x240>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 030f 	and.w	r3, r3, #15
 8006a76:	683a      	ldr	r2, [r7, #0]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d001      	beq.n	8006a80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e184      	b.n	8006d8a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0304 	and.w	r3, r3, #4
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d010      	beq.n	8006aae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	691a      	ldr	r2, [r3, #16]
 8006a90:	4b7b      	ldr	r3, [pc, #492]	@ (8006c80 <HAL_RCC_ClockConfig+0x244>)
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d908      	bls.n	8006aae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006a9c:	4b78      	ldr	r3, [pc, #480]	@ (8006c80 <HAL_RCC_ClockConfig+0x244>)
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	4975      	ldr	r1, [pc, #468]	@ (8006c80 <HAL_RCC_ClockConfig+0x244>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0308 	and.w	r3, r3, #8
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d010      	beq.n	8006adc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	695a      	ldr	r2, [r3, #20]
 8006abe:	4b70      	ldr	r3, [pc, #448]	@ (8006c80 <HAL_RCC_ClockConfig+0x244>)
 8006ac0:	69db      	ldr	r3, [r3, #28]
 8006ac2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d908      	bls.n	8006adc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006aca:	4b6d      	ldr	r3, [pc, #436]	@ (8006c80 <HAL_RCC_ClockConfig+0x244>)
 8006acc:	69db      	ldr	r3, [r3, #28]
 8006ace:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	496a      	ldr	r1, [pc, #424]	@ (8006c80 <HAL_RCC_ClockConfig+0x244>)
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0310 	and.w	r3, r3, #16
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d010      	beq.n	8006b0a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	699a      	ldr	r2, [r3, #24]
 8006aec:	4b64      	ldr	r3, [pc, #400]	@ (8006c80 <HAL_RCC_ClockConfig+0x244>)
 8006aee:	69db      	ldr	r3, [r3, #28]
 8006af0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d908      	bls.n	8006b0a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006af8:	4b61      	ldr	r3, [pc, #388]	@ (8006c80 <HAL_RCC_ClockConfig+0x244>)
 8006afa:	69db      	ldr	r3, [r3, #28]
 8006afc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	495e      	ldr	r1, [pc, #376]	@ (8006c80 <HAL_RCC_ClockConfig+0x244>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0320 	and.w	r3, r3, #32
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d010      	beq.n	8006b38 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	69da      	ldr	r2, [r3, #28]
 8006b1a:	4b59      	ldr	r3, [pc, #356]	@ (8006c80 <HAL_RCC_ClockConfig+0x244>)
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d908      	bls.n	8006b38 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006b26:	4b56      	ldr	r3, [pc, #344]	@ (8006c80 <HAL_RCC_ClockConfig+0x244>)
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	69db      	ldr	r3, [r3, #28]
 8006b32:	4953      	ldr	r1, [pc, #332]	@ (8006c80 <HAL_RCC_ClockConfig+0x244>)
 8006b34:	4313      	orrs	r3, r2
 8006b36:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0302 	and.w	r3, r3, #2
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d010      	beq.n	8006b66 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	68da      	ldr	r2, [r3, #12]
 8006b48:	4b4d      	ldr	r3, [pc, #308]	@ (8006c80 <HAL_RCC_ClockConfig+0x244>)
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	f003 030f 	and.w	r3, r3, #15
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d908      	bls.n	8006b66 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b54:	4b4a      	ldr	r3, [pc, #296]	@ (8006c80 <HAL_RCC_ClockConfig+0x244>)
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	f023 020f 	bic.w	r2, r3, #15
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	4947      	ldr	r1, [pc, #284]	@ (8006c80 <HAL_RCC_ClockConfig+0x244>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d055      	beq.n	8006c1e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006b72:	4b43      	ldr	r3, [pc, #268]	@ (8006c80 <HAL_RCC_ClockConfig+0x244>)
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	4940      	ldr	r1, [pc, #256]	@ (8006c80 <HAL_RCC_ClockConfig+0x244>)
 8006b80:	4313      	orrs	r3, r2
 8006b82:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d107      	bne.n	8006b9c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b8c:	4b3c      	ldr	r3, [pc, #240]	@ (8006c80 <HAL_RCC_ClockConfig+0x244>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d121      	bne.n	8006bdc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e0f6      	b.n	8006d8a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	2b03      	cmp	r3, #3
 8006ba2:	d107      	bne.n	8006bb4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ba4:	4b36      	ldr	r3, [pc, #216]	@ (8006c80 <HAL_RCC_ClockConfig+0x244>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d115      	bne.n	8006bdc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e0ea      	b.n	8006d8a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d107      	bne.n	8006bcc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006bbc:	4b30      	ldr	r3, [pc, #192]	@ (8006c80 <HAL_RCC_ClockConfig+0x244>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d109      	bne.n	8006bdc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e0de      	b.n	8006d8a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bcc:	4b2c      	ldr	r3, [pc, #176]	@ (8006c80 <HAL_RCC_ClockConfig+0x244>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0304 	and.w	r3, r3, #4
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d101      	bne.n	8006bdc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e0d6      	b.n	8006d8a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006bdc:	4b28      	ldr	r3, [pc, #160]	@ (8006c80 <HAL_RCC_ClockConfig+0x244>)
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	f023 0207 	bic.w	r2, r3, #7
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	4925      	ldr	r1, [pc, #148]	@ (8006c80 <HAL_RCC_ClockConfig+0x244>)
 8006bea:	4313      	orrs	r3, r2
 8006bec:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bee:	f7fb fef3 	bl	80029d8 <HAL_GetTick>
 8006bf2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bf4:	e00a      	b.n	8006c0c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bf6:	f7fb feef 	bl	80029d8 <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d901      	bls.n	8006c0c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e0be      	b.n	8006d8a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8006c80 <HAL_RCC_ClockConfig+0x244>)
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	00db      	lsls	r3, r3, #3
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d1eb      	bne.n	8006bf6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0302 	and.w	r3, r3, #2
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d010      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68da      	ldr	r2, [r3, #12]
 8006c2e:	4b14      	ldr	r3, [pc, #80]	@ (8006c80 <HAL_RCC_ClockConfig+0x244>)
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	f003 030f 	and.w	r3, r3, #15
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d208      	bcs.n	8006c4c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c3a:	4b11      	ldr	r3, [pc, #68]	@ (8006c80 <HAL_RCC_ClockConfig+0x244>)
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	f023 020f 	bic.w	r2, r3, #15
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	490e      	ldr	r1, [pc, #56]	@ (8006c80 <HAL_RCC_ClockConfig+0x244>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8006c7c <HAL_RCC_ClockConfig+0x240>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 030f 	and.w	r3, r3, #15
 8006c54:	683a      	ldr	r2, [r7, #0]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d214      	bcs.n	8006c84 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c5a:	4b08      	ldr	r3, [pc, #32]	@ (8006c7c <HAL_RCC_ClockConfig+0x240>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f023 020f 	bic.w	r2, r3, #15
 8006c62:	4906      	ldr	r1, [pc, #24]	@ (8006c7c <HAL_RCC_ClockConfig+0x240>)
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c6a:	4b04      	ldr	r3, [pc, #16]	@ (8006c7c <HAL_RCC_ClockConfig+0x240>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 030f 	and.w	r3, r3, #15
 8006c72:	683a      	ldr	r2, [r7, #0]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d005      	beq.n	8006c84 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e086      	b.n	8006d8a <HAL_RCC_ClockConfig+0x34e>
 8006c7c:	52002000 	.word	0x52002000
 8006c80:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0304 	and.w	r3, r3, #4
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d010      	beq.n	8006cb2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	691a      	ldr	r2, [r3, #16]
 8006c94:	4b3f      	ldr	r3, [pc, #252]	@ (8006d94 <HAL_RCC_ClockConfig+0x358>)
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d208      	bcs.n	8006cb2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ca0:	4b3c      	ldr	r3, [pc, #240]	@ (8006d94 <HAL_RCC_ClockConfig+0x358>)
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	4939      	ldr	r1, [pc, #228]	@ (8006d94 <HAL_RCC_ClockConfig+0x358>)
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0308 	and.w	r3, r3, #8
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d010      	beq.n	8006ce0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	695a      	ldr	r2, [r3, #20]
 8006cc2:	4b34      	ldr	r3, [pc, #208]	@ (8006d94 <HAL_RCC_ClockConfig+0x358>)
 8006cc4:	69db      	ldr	r3, [r3, #28]
 8006cc6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d208      	bcs.n	8006ce0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006cce:	4b31      	ldr	r3, [pc, #196]	@ (8006d94 <HAL_RCC_ClockConfig+0x358>)
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	492e      	ldr	r1, [pc, #184]	@ (8006d94 <HAL_RCC_ClockConfig+0x358>)
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0310 	and.w	r3, r3, #16
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d010      	beq.n	8006d0e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	699a      	ldr	r2, [r3, #24]
 8006cf0:	4b28      	ldr	r3, [pc, #160]	@ (8006d94 <HAL_RCC_ClockConfig+0x358>)
 8006cf2:	69db      	ldr	r3, [r3, #28]
 8006cf4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d208      	bcs.n	8006d0e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006cfc:	4b25      	ldr	r3, [pc, #148]	@ (8006d94 <HAL_RCC_ClockConfig+0x358>)
 8006cfe:	69db      	ldr	r3, [r3, #28]
 8006d00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	4922      	ldr	r1, [pc, #136]	@ (8006d94 <HAL_RCC_ClockConfig+0x358>)
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0320 	and.w	r3, r3, #32
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d010      	beq.n	8006d3c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	69da      	ldr	r2, [r3, #28]
 8006d1e:	4b1d      	ldr	r3, [pc, #116]	@ (8006d94 <HAL_RCC_ClockConfig+0x358>)
 8006d20:	6a1b      	ldr	r3, [r3, #32]
 8006d22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d208      	bcs.n	8006d3c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8006d94 <HAL_RCC_ClockConfig+0x358>)
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	69db      	ldr	r3, [r3, #28]
 8006d36:	4917      	ldr	r1, [pc, #92]	@ (8006d94 <HAL_RCC_ClockConfig+0x358>)
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006d3c:	f000 f834 	bl	8006da8 <HAL_RCC_GetSysClockFreq>
 8006d40:	4602      	mov	r2, r0
 8006d42:	4b14      	ldr	r3, [pc, #80]	@ (8006d94 <HAL_RCC_ClockConfig+0x358>)
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	0a1b      	lsrs	r3, r3, #8
 8006d48:	f003 030f 	and.w	r3, r3, #15
 8006d4c:	4912      	ldr	r1, [pc, #72]	@ (8006d98 <HAL_RCC_ClockConfig+0x35c>)
 8006d4e:	5ccb      	ldrb	r3, [r1, r3]
 8006d50:	f003 031f 	and.w	r3, r3, #31
 8006d54:	fa22 f303 	lsr.w	r3, r2, r3
 8006d58:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8006d94 <HAL_RCC_ClockConfig+0x358>)
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	f003 030f 	and.w	r3, r3, #15
 8006d62:	4a0d      	ldr	r2, [pc, #52]	@ (8006d98 <HAL_RCC_ClockConfig+0x35c>)
 8006d64:	5cd3      	ldrb	r3, [r2, r3]
 8006d66:	f003 031f 	and.w	r3, r3, #31
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d70:	4a0a      	ldr	r2, [pc, #40]	@ (8006d9c <HAL_RCC_ClockConfig+0x360>)
 8006d72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d74:	4a0a      	ldr	r2, [pc, #40]	@ (8006da0 <HAL_RCC_ClockConfig+0x364>)
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8006da4 <HAL_RCC_ClockConfig+0x368>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fb fde0 	bl	8002944 <HAL_InitTick>
 8006d84:	4603      	mov	r3, r0
 8006d86:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3718      	adds	r7, #24
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	58024400 	.word	0x58024400
 8006d98:	0801dea8 	.word	0x0801dea8
 8006d9c:	2400038c 	.word	0x2400038c
 8006da0:	24000388 	.word	0x24000388
 8006da4:	24000090 	.word	0x24000090

08006da8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b089      	sub	sp, #36	@ 0x24
 8006dac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006dae:	4bb3      	ldr	r3, [pc, #716]	@ (800707c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006db6:	2b18      	cmp	r3, #24
 8006db8:	f200 8155 	bhi.w	8007066 <HAL_RCC_GetSysClockFreq+0x2be>
 8006dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8006dc4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc2:	bf00      	nop
 8006dc4:	08006e29 	.word	0x08006e29
 8006dc8:	08007067 	.word	0x08007067
 8006dcc:	08007067 	.word	0x08007067
 8006dd0:	08007067 	.word	0x08007067
 8006dd4:	08007067 	.word	0x08007067
 8006dd8:	08007067 	.word	0x08007067
 8006ddc:	08007067 	.word	0x08007067
 8006de0:	08007067 	.word	0x08007067
 8006de4:	08006e4f 	.word	0x08006e4f
 8006de8:	08007067 	.word	0x08007067
 8006dec:	08007067 	.word	0x08007067
 8006df0:	08007067 	.word	0x08007067
 8006df4:	08007067 	.word	0x08007067
 8006df8:	08007067 	.word	0x08007067
 8006dfc:	08007067 	.word	0x08007067
 8006e00:	08007067 	.word	0x08007067
 8006e04:	08006e55 	.word	0x08006e55
 8006e08:	08007067 	.word	0x08007067
 8006e0c:	08007067 	.word	0x08007067
 8006e10:	08007067 	.word	0x08007067
 8006e14:	08007067 	.word	0x08007067
 8006e18:	08007067 	.word	0x08007067
 8006e1c:	08007067 	.word	0x08007067
 8006e20:	08007067 	.word	0x08007067
 8006e24:	08006e5b 	.word	0x08006e5b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e28:	4b94      	ldr	r3, [pc, #592]	@ (800707c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0320 	and.w	r3, r3, #32
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d009      	beq.n	8006e48 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e34:	4b91      	ldr	r3, [pc, #580]	@ (800707c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	08db      	lsrs	r3, r3, #3
 8006e3a:	f003 0303 	and.w	r3, r3, #3
 8006e3e:	4a90      	ldr	r2, [pc, #576]	@ (8007080 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e40:	fa22 f303 	lsr.w	r3, r2, r3
 8006e44:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006e46:	e111      	b.n	800706c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006e48:	4b8d      	ldr	r3, [pc, #564]	@ (8007080 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e4a:	61bb      	str	r3, [r7, #24]
      break;
 8006e4c:	e10e      	b.n	800706c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006e4e:	4b8d      	ldr	r3, [pc, #564]	@ (8007084 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006e50:	61bb      	str	r3, [r7, #24]
      break;
 8006e52:	e10b      	b.n	800706c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006e54:	4b8c      	ldr	r3, [pc, #560]	@ (8007088 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006e56:	61bb      	str	r3, [r7, #24]
      break;
 8006e58:	e108      	b.n	800706c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e5a:	4b88      	ldr	r3, [pc, #544]	@ (800707c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e5e:	f003 0303 	and.w	r3, r3, #3
 8006e62:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006e64:	4b85      	ldr	r3, [pc, #532]	@ (800707c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e68:	091b      	lsrs	r3, r3, #4
 8006e6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e6e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006e70:	4b82      	ldr	r3, [pc, #520]	@ (800707c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e74:	f003 0301 	and.w	r3, r3, #1
 8006e78:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006e7a:	4b80      	ldr	r3, [pc, #512]	@ (800707c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e7e:	08db      	lsrs	r3, r3, #3
 8006e80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	fb02 f303 	mul.w	r3, r2, r3
 8006e8a:	ee07 3a90 	vmov	s15, r3
 8006e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e92:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 80e1 	beq.w	8007060 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	f000 8083 	beq.w	8006fac <HAL_RCC_GetSysClockFreq+0x204>
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	f200 80a1 	bhi.w	8006ff0 <HAL_RCC_GetSysClockFreq+0x248>
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d003      	beq.n	8006ebc <HAL_RCC_GetSysClockFreq+0x114>
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d056      	beq.n	8006f68 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006eba:	e099      	b.n	8006ff0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ebc:	4b6f      	ldr	r3, [pc, #444]	@ (800707c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0320 	and.w	r3, r3, #32
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d02d      	beq.n	8006f24 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ec8:	4b6c      	ldr	r3, [pc, #432]	@ (800707c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	08db      	lsrs	r3, r3, #3
 8006ece:	f003 0303 	and.w	r3, r3, #3
 8006ed2:	4a6b      	ldr	r2, [pc, #428]	@ (8007080 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ed8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	ee07 3a90 	vmov	s15, r3
 8006ee0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	ee07 3a90 	vmov	s15, r3
 8006eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ef2:	4b62      	ldr	r3, [pc, #392]	@ (800707c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006efa:	ee07 3a90 	vmov	s15, r3
 8006efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f02:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f06:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800708c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f1e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006f22:	e087      	b.n	8007034 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	ee07 3a90 	vmov	s15, r3
 8006f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f2e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007090 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f36:	4b51      	ldr	r3, [pc, #324]	@ (800707c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f3e:	ee07 3a90 	vmov	s15, r3
 8006f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f46:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f4a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800708c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f66:	e065      	b.n	8007034 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	ee07 3a90 	vmov	s15, r3
 8006f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f72:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007094 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f7a:	4b40      	ldr	r3, [pc, #256]	@ (800707c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f82:	ee07 3a90 	vmov	s15, r3
 8006f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f8e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800708c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fa6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006faa:	e043      	b.n	8007034 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	ee07 3a90 	vmov	s15, r3
 8006fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fb6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007098 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fbe:	4b2f      	ldr	r3, [pc, #188]	@ (800707c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fc6:	ee07 3a90 	vmov	s15, r3
 8006fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fce:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fd2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800708c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006fee:	e021      	b.n	8007034 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	ee07 3a90 	vmov	s15, r3
 8006ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ffa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007094 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007002:	4b1e      	ldr	r3, [pc, #120]	@ (800707c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800700a:	ee07 3a90 	vmov	s15, r3
 800700e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007012:	ed97 6a02 	vldr	s12, [r7, #8]
 8007016:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800708c <HAL_RCC_GetSysClockFreq+0x2e4>
 800701a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800701e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007022:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800702a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800702e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007032:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007034:	4b11      	ldr	r3, [pc, #68]	@ (800707c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007038:	0a5b      	lsrs	r3, r3, #9
 800703a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800703e:	3301      	adds	r3, #1
 8007040:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	ee07 3a90 	vmov	s15, r3
 8007048:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800704c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007050:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007054:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007058:	ee17 3a90 	vmov	r3, s15
 800705c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800705e:	e005      	b.n	800706c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007060:	2300      	movs	r3, #0
 8007062:	61bb      	str	r3, [r7, #24]
      break;
 8007064:	e002      	b.n	800706c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007066:	4b07      	ldr	r3, [pc, #28]	@ (8007084 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007068:	61bb      	str	r3, [r7, #24]
      break;
 800706a:	bf00      	nop
  }

  return sysclockfreq;
 800706c:	69bb      	ldr	r3, [r7, #24]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3724      	adds	r7, #36	@ 0x24
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	58024400 	.word	0x58024400
 8007080:	03d09000 	.word	0x03d09000
 8007084:	003d0900 	.word	0x003d0900
 8007088:	017d7840 	.word	0x017d7840
 800708c:	46000000 	.word	0x46000000
 8007090:	4c742400 	.word	0x4c742400
 8007094:	4a742400 	.word	0x4a742400
 8007098:	4bbebc20 	.word	0x4bbebc20

0800709c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80070a2:	f7ff fe81 	bl	8006da8 <HAL_RCC_GetSysClockFreq>
 80070a6:	4602      	mov	r2, r0
 80070a8:	4b10      	ldr	r3, [pc, #64]	@ (80070ec <HAL_RCC_GetHCLKFreq+0x50>)
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	0a1b      	lsrs	r3, r3, #8
 80070ae:	f003 030f 	and.w	r3, r3, #15
 80070b2:	490f      	ldr	r1, [pc, #60]	@ (80070f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80070b4:	5ccb      	ldrb	r3, [r1, r3]
 80070b6:	f003 031f 	and.w	r3, r3, #31
 80070ba:	fa22 f303 	lsr.w	r3, r2, r3
 80070be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80070c0:	4b0a      	ldr	r3, [pc, #40]	@ (80070ec <HAL_RCC_GetHCLKFreq+0x50>)
 80070c2:	699b      	ldr	r3, [r3, #24]
 80070c4:	f003 030f 	and.w	r3, r3, #15
 80070c8:	4a09      	ldr	r2, [pc, #36]	@ (80070f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80070ca:	5cd3      	ldrb	r3, [r2, r3]
 80070cc:	f003 031f 	and.w	r3, r3, #31
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	fa22 f303 	lsr.w	r3, r2, r3
 80070d6:	4a07      	ldr	r2, [pc, #28]	@ (80070f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80070d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80070da:	4a07      	ldr	r2, [pc, #28]	@ (80070f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80070e0:	4b04      	ldr	r3, [pc, #16]	@ (80070f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80070e2:	681b      	ldr	r3, [r3, #0]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	58024400 	.word	0x58024400
 80070f0:	0801dea8 	.word	0x0801dea8
 80070f4:	2400038c 	.word	0x2400038c
 80070f8:	24000388 	.word	0x24000388

080070fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007100:	f7ff ffcc 	bl	800709c <HAL_RCC_GetHCLKFreq>
 8007104:	4602      	mov	r2, r0
 8007106:	4b06      	ldr	r3, [pc, #24]	@ (8007120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007108:	69db      	ldr	r3, [r3, #28]
 800710a:	091b      	lsrs	r3, r3, #4
 800710c:	f003 0307 	and.w	r3, r3, #7
 8007110:	4904      	ldr	r1, [pc, #16]	@ (8007124 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007112:	5ccb      	ldrb	r3, [r1, r3]
 8007114:	f003 031f 	and.w	r3, r3, #31
 8007118:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800711c:	4618      	mov	r0, r3
 800711e:	bd80      	pop	{r7, pc}
 8007120:	58024400 	.word	0x58024400
 8007124:	0801dea8 	.word	0x0801dea8

08007128 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800712c:	b0ca      	sub	sp, #296	@ 0x128
 800712e:	af00      	add	r7, sp, #0
 8007130:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007134:	2300      	movs	r3, #0
 8007136:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800713a:	2300      	movs	r3, #0
 800713c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007148:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800714c:	2500      	movs	r5, #0
 800714e:	ea54 0305 	orrs.w	r3, r4, r5
 8007152:	d049      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007158:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800715a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800715e:	d02f      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007160:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007164:	d828      	bhi.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007166:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800716a:	d01a      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800716c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007170:	d822      	bhi.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007172:	2b00      	cmp	r3, #0
 8007174:	d003      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007176:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800717a:	d007      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800717c:	e01c      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800717e:	4bb8      	ldr	r3, [pc, #736]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007182:	4ab7      	ldr	r2, [pc, #732]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007184:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007188:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800718a:	e01a      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800718c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007190:	3308      	adds	r3, #8
 8007192:	2102      	movs	r1, #2
 8007194:	4618      	mov	r0, r3
 8007196:	f002 fb61 	bl	800985c <RCCEx_PLL2_Config>
 800719a:	4603      	mov	r3, r0
 800719c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80071a0:	e00f      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80071a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071a6:	3328      	adds	r3, #40	@ 0x28
 80071a8:	2102      	movs	r1, #2
 80071aa:	4618      	mov	r0, r3
 80071ac:	f002 fc08 	bl	80099c0 <RCCEx_PLL3_Config>
 80071b0:	4603      	mov	r3, r0
 80071b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80071b6:	e004      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071be:	e000      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80071c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10a      	bne.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80071ca:	4ba5      	ldr	r3, [pc, #660]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071ce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80071d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80071d8:	4aa1      	ldr	r2, [pc, #644]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071da:	430b      	orrs	r3, r1
 80071dc:	6513      	str	r3, [r2, #80]	@ 0x50
 80071de:	e003      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80071e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80071f4:	f04f 0900 	mov.w	r9, #0
 80071f8:	ea58 0309 	orrs.w	r3, r8, r9
 80071fc:	d047      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80071fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007204:	2b04      	cmp	r3, #4
 8007206:	d82a      	bhi.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007208:	a201      	add	r2, pc, #4	@ (adr r2, 8007210 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800720a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800720e:	bf00      	nop
 8007210:	08007225 	.word	0x08007225
 8007214:	08007233 	.word	0x08007233
 8007218:	08007249 	.word	0x08007249
 800721c:	08007267 	.word	0x08007267
 8007220:	08007267 	.word	0x08007267
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007224:	4b8e      	ldr	r3, [pc, #568]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007228:	4a8d      	ldr	r2, [pc, #564]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800722a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800722e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007230:	e01a      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007236:	3308      	adds	r3, #8
 8007238:	2100      	movs	r1, #0
 800723a:	4618      	mov	r0, r3
 800723c:	f002 fb0e 	bl	800985c <RCCEx_PLL2_Config>
 8007240:	4603      	mov	r3, r0
 8007242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007246:	e00f      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800724c:	3328      	adds	r3, #40	@ 0x28
 800724e:	2100      	movs	r1, #0
 8007250:	4618      	mov	r0, r3
 8007252:	f002 fbb5 	bl	80099c0 <RCCEx_PLL3_Config>
 8007256:	4603      	mov	r3, r0
 8007258:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800725c:	e004      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007264:	e000      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007266:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007268:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10a      	bne.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007270:	4b7b      	ldr	r3, [pc, #492]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007274:	f023 0107 	bic.w	r1, r3, #7
 8007278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800727c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800727e:	4a78      	ldr	r2, [pc, #480]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007280:	430b      	orrs	r3, r1
 8007282:	6513      	str	r3, [r2, #80]	@ 0x50
 8007284:	e003      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007286:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800728a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800728e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007296:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800729a:	f04f 0b00 	mov.w	fp, #0
 800729e:	ea5a 030b 	orrs.w	r3, sl, fp
 80072a2:	d04c      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80072a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072ae:	d030      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80072b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072b4:	d829      	bhi.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80072b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80072b8:	d02d      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80072ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80072bc:	d825      	bhi.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80072be:	2b80      	cmp	r3, #128	@ 0x80
 80072c0:	d018      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80072c2:	2b80      	cmp	r3, #128	@ 0x80
 80072c4:	d821      	bhi.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d002      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80072ca:	2b40      	cmp	r3, #64	@ 0x40
 80072cc:	d007      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80072ce:	e01c      	b.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072d0:	4b63      	ldr	r3, [pc, #396]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d4:	4a62      	ldr	r2, [pc, #392]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80072dc:	e01c      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072e2:	3308      	adds	r3, #8
 80072e4:	2100      	movs	r1, #0
 80072e6:	4618      	mov	r0, r3
 80072e8:	f002 fab8 	bl	800985c <RCCEx_PLL2_Config>
 80072ec:	4603      	mov	r3, r0
 80072ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80072f2:	e011      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f8:	3328      	adds	r3, #40	@ 0x28
 80072fa:	2100      	movs	r1, #0
 80072fc:	4618      	mov	r0, r3
 80072fe:	f002 fb5f 	bl	80099c0 <RCCEx_PLL3_Config>
 8007302:	4603      	mov	r3, r0
 8007304:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007308:	e006      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007310:	e002      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007312:	bf00      	nop
 8007314:	e000      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007316:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007318:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10a      	bne.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007320:	4b4f      	ldr	r3, [pc, #316]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007324:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800732c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800732e:	4a4c      	ldr	r2, [pc, #304]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007330:	430b      	orrs	r3, r1
 8007332:	6513      	str	r3, [r2, #80]	@ 0x50
 8007334:	e003      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007336:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800733a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800733e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007346:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800734a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800734e:	2300      	movs	r3, #0
 8007350:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007354:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007358:	460b      	mov	r3, r1
 800735a:	4313      	orrs	r3, r2
 800735c:	d053      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800735e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007362:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007366:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800736a:	d035      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800736c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007370:	d82e      	bhi.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007372:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007376:	d031      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007378:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800737c:	d828      	bhi.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800737e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007382:	d01a      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007384:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007388:	d822      	bhi.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800738a:	2b00      	cmp	r3, #0
 800738c:	d003      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800738e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007392:	d007      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007394:	e01c      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007396:	4b32      	ldr	r3, [pc, #200]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800739a:	4a31      	ldr	r2, [pc, #196]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800739c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073a2:	e01c      	b.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073a8:	3308      	adds	r3, #8
 80073aa:	2100      	movs	r1, #0
 80073ac:	4618      	mov	r0, r3
 80073ae:	f002 fa55 	bl	800985c <RCCEx_PLL2_Config>
 80073b2:	4603      	mov	r3, r0
 80073b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80073b8:	e011      	b.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073be:	3328      	adds	r3, #40	@ 0x28
 80073c0:	2100      	movs	r1, #0
 80073c2:	4618      	mov	r0, r3
 80073c4:	f002 fafc 	bl	80099c0 <RCCEx_PLL3_Config>
 80073c8:	4603      	mov	r3, r0
 80073ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073ce:	e006      	b.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073d6:	e002      	b.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80073d8:	bf00      	nop
 80073da:	e000      	b.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80073dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d10b      	bne.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80073e6:	4b1e      	ldr	r3, [pc, #120]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073ea:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80073ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80073f6:	4a1a      	ldr	r2, [pc, #104]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073f8:	430b      	orrs	r3, r1
 80073fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80073fc:	e003      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007402:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800740a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007412:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007416:	2300      	movs	r3, #0
 8007418:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800741c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007420:	460b      	mov	r3, r1
 8007422:	4313      	orrs	r3, r2
 8007424:	d056      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800742a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800742e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007432:	d038      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007434:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007438:	d831      	bhi.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800743a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800743e:	d034      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007440:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007444:	d82b      	bhi.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007446:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800744a:	d01d      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800744c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007450:	d825      	bhi.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007452:	2b00      	cmp	r3, #0
 8007454:	d006      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007456:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800745a:	d00a      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800745c:	e01f      	b.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800745e:	bf00      	nop
 8007460:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007464:	4ba2      	ldr	r3, [pc, #648]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007468:	4aa1      	ldr	r2, [pc, #644]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800746a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800746e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007470:	e01c      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007476:	3308      	adds	r3, #8
 8007478:	2100      	movs	r1, #0
 800747a:	4618      	mov	r0, r3
 800747c:	f002 f9ee 	bl	800985c <RCCEx_PLL2_Config>
 8007480:	4603      	mov	r3, r0
 8007482:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007486:	e011      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800748c:	3328      	adds	r3, #40	@ 0x28
 800748e:	2100      	movs	r1, #0
 8007490:	4618      	mov	r0, r3
 8007492:	f002 fa95 	bl	80099c0 <RCCEx_PLL3_Config>
 8007496:	4603      	mov	r3, r0
 8007498:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800749c:	e006      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074a4:	e002      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80074a6:	bf00      	nop
 80074a8:	e000      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80074aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10b      	bne.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80074b4:	4b8e      	ldr	r3, [pc, #568]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074b8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80074bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80074c4:	4a8a      	ldr	r2, [pc, #552]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074c6:	430b      	orrs	r3, r1
 80074c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80074ca:	e003      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80074d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074dc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80074e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80074e4:	2300      	movs	r3, #0
 80074e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80074ea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80074ee:	460b      	mov	r3, r1
 80074f0:	4313      	orrs	r3, r2
 80074f2:	d03a      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80074f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074fa:	2b30      	cmp	r3, #48	@ 0x30
 80074fc:	d01f      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80074fe:	2b30      	cmp	r3, #48	@ 0x30
 8007500:	d819      	bhi.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007502:	2b20      	cmp	r3, #32
 8007504:	d00c      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007506:	2b20      	cmp	r3, #32
 8007508:	d815      	bhi.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800750a:	2b00      	cmp	r3, #0
 800750c:	d019      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800750e:	2b10      	cmp	r3, #16
 8007510:	d111      	bne.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007512:	4b77      	ldr	r3, [pc, #476]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007516:	4a76      	ldr	r2, [pc, #472]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007518:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800751c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800751e:	e011      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007524:	3308      	adds	r3, #8
 8007526:	2102      	movs	r1, #2
 8007528:	4618      	mov	r0, r3
 800752a:	f002 f997 	bl	800985c <RCCEx_PLL2_Config>
 800752e:	4603      	mov	r3, r0
 8007530:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007534:	e006      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800753c:	e002      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800753e:	bf00      	nop
 8007540:	e000      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007542:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007544:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007548:	2b00      	cmp	r3, #0
 800754a:	d10a      	bne.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800754c:	4b68      	ldr	r3, [pc, #416]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800754e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007550:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800755a:	4a65      	ldr	r2, [pc, #404]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800755c:	430b      	orrs	r3, r1
 800755e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007560:	e003      	b.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007562:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007566:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800756a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800756e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007572:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007576:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800757a:	2300      	movs	r3, #0
 800757c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007580:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007584:	460b      	mov	r3, r1
 8007586:	4313      	orrs	r3, r2
 8007588:	d051      	beq.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800758a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800758e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007590:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007594:	d035      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007596:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800759a:	d82e      	bhi.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800759c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80075a0:	d031      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80075a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80075a6:	d828      	bhi.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80075a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075ac:	d01a      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80075ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075b2:	d822      	bhi.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d003      	beq.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80075b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075bc:	d007      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80075be:	e01c      	b.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075c0:	4b4b      	ldr	r3, [pc, #300]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80075c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c4:	4a4a      	ldr	r2, [pc, #296]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80075c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80075cc:	e01c      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d2:	3308      	adds	r3, #8
 80075d4:	2100      	movs	r1, #0
 80075d6:	4618      	mov	r0, r3
 80075d8:	f002 f940 	bl	800985c <RCCEx_PLL2_Config>
 80075dc:	4603      	mov	r3, r0
 80075de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80075e2:	e011      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075e8:	3328      	adds	r3, #40	@ 0x28
 80075ea:	2100      	movs	r1, #0
 80075ec:	4618      	mov	r0, r3
 80075ee:	f002 f9e7 	bl	80099c0 <RCCEx_PLL3_Config>
 80075f2:	4603      	mov	r3, r0
 80075f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80075f8:	e006      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007600:	e002      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007602:	bf00      	nop
 8007604:	e000      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007606:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007608:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10a      	bne.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007610:	4b37      	ldr	r3, [pc, #220]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007612:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007614:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800761c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800761e:	4a34      	ldr	r2, [pc, #208]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007620:	430b      	orrs	r3, r1
 8007622:	6513      	str	r3, [r2, #80]	@ 0x50
 8007624:	e003      	b.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007626:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800762a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800762e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007636:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800763a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800763e:	2300      	movs	r3, #0
 8007640:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007644:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007648:	460b      	mov	r3, r1
 800764a:	4313      	orrs	r3, r2
 800764c:	d056      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800764e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007652:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007654:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007658:	d033      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800765a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800765e:	d82c      	bhi.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007660:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007664:	d02f      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007666:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800766a:	d826      	bhi.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 800766c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007670:	d02b      	beq.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007672:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007676:	d820      	bhi.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007678:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800767c:	d012      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800767e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007682:	d81a      	bhi.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007684:	2b00      	cmp	r3, #0
 8007686:	d022      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007688:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800768c:	d115      	bne.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800768e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007692:	3308      	adds	r3, #8
 8007694:	2101      	movs	r1, #1
 8007696:	4618      	mov	r0, r3
 8007698:	f002 f8e0 	bl	800985c <RCCEx_PLL2_Config>
 800769c:	4603      	mov	r3, r0
 800769e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80076a2:	e015      	b.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076a8:	3328      	adds	r3, #40	@ 0x28
 80076aa:	2101      	movs	r1, #1
 80076ac:	4618      	mov	r0, r3
 80076ae:	f002 f987 	bl	80099c0 <RCCEx_PLL3_Config>
 80076b2:	4603      	mov	r3, r0
 80076b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80076b8:	e00a      	b.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076c0:	e006      	b.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80076c2:	bf00      	nop
 80076c4:	e004      	b.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80076c6:	bf00      	nop
 80076c8:	e002      	b.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80076ca:	bf00      	nop
 80076cc:	e000      	b.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80076ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d10d      	bne.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80076d8:	4b05      	ldr	r3, [pc, #20]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076dc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80076e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076e6:	4a02      	ldr	r2, [pc, #8]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076e8:	430b      	orrs	r3, r1
 80076ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80076ec:	e006      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80076ee:	bf00      	nop
 80076f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80076fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007704:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007708:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800770c:	2300      	movs	r3, #0
 800770e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007712:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007716:	460b      	mov	r3, r1
 8007718:	4313      	orrs	r3, r2
 800771a:	d055      	beq.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800771c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007720:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007724:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007728:	d033      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800772a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800772e:	d82c      	bhi.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007730:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007734:	d02f      	beq.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800773a:	d826      	bhi.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800773c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007740:	d02b      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007742:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007746:	d820      	bhi.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007748:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800774c:	d012      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800774e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007752:	d81a      	bhi.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007754:	2b00      	cmp	r3, #0
 8007756:	d022      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007758:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800775c:	d115      	bne.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800775e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007762:	3308      	adds	r3, #8
 8007764:	2101      	movs	r1, #1
 8007766:	4618      	mov	r0, r3
 8007768:	f002 f878 	bl	800985c <RCCEx_PLL2_Config>
 800776c:	4603      	mov	r3, r0
 800776e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007772:	e015      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007778:	3328      	adds	r3, #40	@ 0x28
 800777a:	2101      	movs	r1, #1
 800777c:	4618      	mov	r0, r3
 800777e:	f002 f91f 	bl	80099c0 <RCCEx_PLL3_Config>
 8007782:	4603      	mov	r3, r0
 8007784:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007788:	e00a      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007790:	e006      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007792:	bf00      	nop
 8007794:	e004      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007796:	bf00      	nop
 8007798:	e002      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800779a:	bf00      	nop
 800779c:	e000      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800779e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10b      	bne.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80077a8:	4ba3      	ldr	r3, [pc, #652]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077ac:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80077b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80077b8:	4a9f      	ldr	r2, [pc, #636]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077ba:	430b      	orrs	r3, r1
 80077bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80077be:	e003      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80077c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80077d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80077d8:	2300      	movs	r3, #0
 80077da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80077de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80077e2:	460b      	mov	r3, r1
 80077e4:	4313      	orrs	r3, r2
 80077e6:	d037      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80077e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077f2:	d00e      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80077f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077f8:	d816      	bhi.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d018      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80077fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007802:	d111      	bne.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007804:	4b8c      	ldr	r3, [pc, #560]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007808:	4a8b      	ldr	r2, [pc, #556]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800780a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800780e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007810:	e00f      	b.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007816:	3308      	adds	r3, #8
 8007818:	2101      	movs	r1, #1
 800781a:	4618      	mov	r0, r3
 800781c:	f002 f81e 	bl	800985c <RCCEx_PLL2_Config>
 8007820:	4603      	mov	r3, r0
 8007822:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007826:	e004      	b.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800782e:	e000      	b.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007830:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007836:	2b00      	cmp	r3, #0
 8007838:	d10a      	bne.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800783a:	4b7f      	ldr	r3, [pc, #508]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800783c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800783e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007848:	4a7b      	ldr	r2, [pc, #492]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800784a:	430b      	orrs	r3, r1
 800784c:	6513      	str	r3, [r2, #80]	@ 0x50
 800784e:	e003      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007850:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007854:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800785c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007860:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007864:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007868:	2300      	movs	r3, #0
 800786a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800786e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007872:	460b      	mov	r3, r1
 8007874:	4313      	orrs	r3, r2
 8007876:	d039      	beq.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800787c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800787e:	2b03      	cmp	r3, #3
 8007880:	d81c      	bhi.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007882:	a201      	add	r2, pc, #4	@ (adr r2, 8007888 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007888:	080078c5 	.word	0x080078c5
 800788c:	08007899 	.word	0x08007899
 8007890:	080078a7 	.word	0x080078a7
 8007894:	080078c5 	.word	0x080078c5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007898:	4b67      	ldr	r3, [pc, #412]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800789a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800789c:	4a66      	ldr	r2, [pc, #408]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800789e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80078a4:	e00f      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80078a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078aa:	3308      	adds	r3, #8
 80078ac:	2102      	movs	r1, #2
 80078ae:	4618      	mov	r0, r3
 80078b0:	f001 ffd4 	bl	800985c <RCCEx_PLL2_Config>
 80078b4:	4603      	mov	r3, r0
 80078b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80078ba:	e004      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078c2:	e000      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80078c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d10a      	bne.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80078ce:	4b5a      	ldr	r3, [pc, #360]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078d2:	f023 0103 	bic.w	r1, r3, #3
 80078d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078dc:	4a56      	ldr	r2, [pc, #344]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078de:	430b      	orrs	r3, r1
 80078e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80078e2:	e003      	b.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80078ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80078f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80078fc:	2300      	movs	r3, #0
 80078fe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007902:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007906:	460b      	mov	r3, r1
 8007908:	4313      	orrs	r3, r2
 800790a:	f000 809f 	beq.w	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800790e:	4b4b      	ldr	r3, [pc, #300]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a4a      	ldr	r2, [pc, #296]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007918:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800791a:	f7fb f85d 	bl	80029d8 <HAL_GetTick>
 800791e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007922:	e00b      	b.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007924:	f7fb f858 	bl	80029d8 <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	2b64      	cmp	r3, #100	@ 0x64
 8007932:	d903      	bls.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007934:	2303      	movs	r3, #3
 8007936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800793a:	e005      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800793c:	4b3f      	ldr	r3, [pc, #252]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007944:	2b00      	cmp	r3, #0
 8007946:	d0ed      	beq.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007948:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800794c:	2b00      	cmp	r3, #0
 800794e:	d179      	bne.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007950:	4b39      	ldr	r3, [pc, #228]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007952:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007958:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800795c:	4053      	eors	r3, r2
 800795e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007962:	2b00      	cmp	r3, #0
 8007964:	d015      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007966:	4b34      	ldr	r3, [pc, #208]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800796a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800796e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007972:	4b31      	ldr	r3, [pc, #196]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007976:	4a30      	ldr	r2, [pc, #192]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800797c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800797e:	4b2e      	ldr	r3, [pc, #184]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007982:	4a2d      	ldr	r2, [pc, #180]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007984:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007988:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800798a:	4a2b      	ldr	r2, [pc, #172]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800798c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007990:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007996:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800799a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800799e:	d118      	bne.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079a0:	f7fb f81a 	bl	80029d8 <HAL_GetTick>
 80079a4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079a8:	e00d      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079aa:	f7fb f815 	bl	80029d8 <HAL_GetTick>
 80079ae:	4602      	mov	r2, r0
 80079b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80079b4:	1ad2      	subs	r2, r2, r3
 80079b6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d903      	bls.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80079be:	2303      	movs	r3, #3
 80079c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80079c4:	e005      	b.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079c6:	4b1c      	ldr	r3, [pc, #112]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079ca:	f003 0302 	and.w	r3, r3, #2
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d0eb      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80079d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d129      	bne.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80079e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079ea:	d10e      	bne.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80079ec:	4b12      	ldr	r3, [pc, #72]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80079f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80079fc:	091a      	lsrs	r2, r3, #4
 80079fe:	4b10      	ldr	r3, [pc, #64]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007a00:	4013      	ands	r3, r2
 8007a02:	4a0d      	ldr	r2, [pc, #52]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a04:	430b      	orrs	r3, r1
 8007a06:	6113      	str	r3, [r2, #16]
 8007a08:	e005      	b.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a10:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007a14:	6113      	str	r3, [r2, #16]
 8007a16:	4b08      	ldr	r3, [pc, #32]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a18:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a26:	4a04      	ldr	r2, [pc, #16]	@ (8007a38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a28:	430b      	orrs	r3, r1
 8007a2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a2c:	e00e      	b.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007a36:	e009      	b.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007a38:	58024400 	.word	0x58024400
 8007a3c:	58024800 	.word	0x58024800
 8007a40:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a54:	f002 0301 	and.w	r3, r2, #1
 8007a58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007a62:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007a66:	460b      	mov	r3, r1
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	f000 8089 	beq.w	8007b80 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a74:	2b28      	cmp	r3, #40	@ 0x28
 8007a76:	d86b      	bhi.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007a78:	a201      	add	r2, pc, #4	@ (adr r2, 8007a80 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a7e:	bf00      	nop
 8007a80:	08007b59 	.word	0x08007b59
 8007a84:	08007b51 	.word	0x08007b51
 8007a88:	08007b51 	.word	0x08007b51
 8007a8c:	08007b51 	.word	0x08007b51
 8007a90:	08007b51 	.word	0x08007b51
 8007a94:	08007b51 	.word	0x08007b51
 8007a98:	08007b51 	.word	0x08007b51
 8007a9c:	08007b51 	.word	0x08007b51
 8007aa0:	08007b25 	.word	0x08007b25
 8007aa4:	08007b51 	.word	0x08007b51
 8007aa8:	08007b51 	.word	0x08007b51
 8007aac:	08007b51 	.word	0x08007b51
 8007ab0:	08007b51 	.word	0x08007b51
 8007ab4:	08007b51 	.word	0x08007b51
 8007ab8:	08007b51 	.word	0x08007b51
 8007abc:	08007b51 	.word	0x08007b51
 8007ac0:	08007b3b 	.word	0x08007b3b
 8007ac4:	08007b51 	.word	0x08007b51
 8007ac8:	08007b51 	.word	0x08007b51
 8007acc:	08007b51 	.word	0x08007b51
 8007ad0:	08007b51 	.word	0x08007b51
 8007ad4:	08007b51 	.word	0x08007b51
 8007ad8:	08007b51 	.word	0x08007b51
 8007adc:	08007b51 	.word	0x08007b51
 8007ae0:	08007b59 	.word	0x08007b59
 8007ae4:	08007b51 	.word	0x08007b51
 8007ae8:	08007b51 	.word	0x08007b51
 8007aec:	08007b51 	.word	0x08007b51
 8007af0:	08007b51 	.word	0x08007b51
 8007af4:	08007b51 	.word	0x08007b51
 8007af8:	08007b51 	.word	0x08007b51
 8007afc:	08007b51 	.word	0x08007b51
 8007b00:	08007b59 	.word	0x08007b59
 8007b04:	08007b51 	.word	0x08007b51
 8007b08:	08007b51 	.word	0x08007b51
 8007b0c:	08007b51 	.word	0x08007b51
 8007b10:	08007b51 	.word	0x08007b51
 8007b14:	08007b51 	.word	0x08007b51
 8007b18:	08007b51 	.word	0x08007b51
 8007b1c:	08007b51 	.word	0x08007b51
 8007b20:	08007b59 	.word	0x08007b59
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b28:	3308      	adds	r3, #8
 8007b2a:	2101      	movs	r1, #1
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f001 fe95 	bl	800985c <RCCEx_PLL2_Config>
 8007b32:	4603      	mov	r3, r0
 8007b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007b38:	e00f      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b3e:	3328      	adds	r3, #40	@ 0x28
 8007b40:	2101      	movs	r1, #1
 8007b42:	4618      	mov	r0, r3
 8007b44:	f001 ff3c 	bl	80099c0 <RCCEx_PLL3_Config>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007b4e:	e004      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b56:	e000      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10a      	bne.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007b62:	4bbf      	ldr	r3, [pc, #764]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b66:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b70:	4abb      	ldr	r2, [pc, #748]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b72:	430b      	orrs	r3, r1
 8007b74:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b76:	e003      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b88:	f002 0302 	and.w	r3, r2, #2
 8007b8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b90:	2300      	movs	r3, #0
 8007b92:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007b96:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	d041      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ba6:	2b05      	cmp	r3, #5
 8007ba8:	d824      	bhi.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007baa:	a201      	add	r2, pc, #4	@ (adr r2, 8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb0:	08007bfd 	.word	0x08007bfd
 8007bb4:	08007bc9 	.word	0x08007bc9
 8007bb8:	08007bdf 	.word	0x08007bdf
 8007bbc:	08007bfd 	.word	0x08007bfd
 8007bc0:	08007bfd 	.word	0x08007bfd
 8007bc4:	08007bfd 	.word	0x08007bfd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bcc:	3308      	adds	r3, #8
 8007bce:	2101      	movs	r1, #1
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f001 fe43 	bl	800985c <RCCEx_PLL2_Config>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007bdc:	e00f      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be2:	3328      	adds	r3, #40	@ 0x28
 8007be4:	2101      	movs	r1, #1
 8007be6:	4618      	mov	r0, r3
 8007be8:	f001 feea 	bl	80099c0 <RCCEx_PLL3_Config>
 8007bec:	4603      	mov	r3, r0
 8007bee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007bf2:	e004      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bfa:	e000      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007bfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10a      	bne.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007c06:	4b96      	ldr	r3, [pc, #600]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c0a:	f023 0107 	bic.w	r1, r3, #7
 8007c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c14:	4a92      	ldr	r2, [pc, #584]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c16:	430b      	orrs	r3, r1
 8007c18:	6553      	str	r3, [r2, #84]	@ 0x54
 8007c1a:	e003      	b.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2c:	f002 0304 	and.w	r3, r2, #4
 8007c30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c34:	2300      	movs	r3, #0
 8007c36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c3a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007c3e:	460b      	mov	r3, r1
 8007c40:	4313      	orrs	r3, r2
 8007c42:	d044      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c4c:	2b05      	cmp	r3, #5
 8007c4e:	d825      	bhi.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007c50:	a201      	add	r2, pc, #4	@ (adr r2, 8007c58 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c56:	bf00      	nop
 8007c58:	08007ca5 	.word	0x08007ca5
 8007c5c:	08007c71 	.word	0x08007c71
 8007c60:	08007c87 	.word	0x08007c87
 8007c64:	08007ca5 	.word	0x08007ca5
 8007c68:	08007ca5 	.word	0x08007ca5
 8007c6c:	08007ca5 	.word	0x08007ca5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c74:	3308      	adds	r3, #8
 8007c76:	2101      	movs	r1, #1
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f001 fdef 	bl	800985c <RCCEx_PLL2_Config>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007c84:	e00f      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c8a:	3328      	adds	r3, #40	@ 0x28
 8007c8c:	2101      	movs	r1, #1
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f001 fe96 	bl	80099c0 <RCCEx_PLL3_Config>
 8007c94:	4603      	mov	r3, r0
 8007c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007c9a:	e004      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ca2:	e000      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007ca4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d10b      	bne.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007cae:	4b6c      	ldr	r3, [pc, #432]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cb2:	f023 0107 	bic.w	r1, r3, #7
 8007cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cbe:	4a68      	ldr	r2, [pc, #416]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007cc0:	430b      	orrs	r3, r1
 8007cc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8007cc4:	e003      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd6:	f002 0320 	and.w	r3, r2, #32
 8007cda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007cde:	2300      	movs	r3, #0
 8007ce0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ce4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007ce8:	460b      	mov	r3, r1
 8007cea:	4313      	orrs	r3, r2
 8007cec:	d055      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007cfa:	d033      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007cfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d00:	d82c      	bhi.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007d02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d06:	d02f      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007d08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d0c:	d826      	bhi.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007d0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d12:	d02b      	beq.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007d14:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d18:	d820      	bhi.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007d1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d1e:	d012      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007d20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d24:	d81a      	bhi.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d022      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007d2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d2e:	d115      	bne.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d34:	3308      	adds	r3, #8
 8007d36:	2100      	movs	r1, #0
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f001 fd8f 	bl	800985c <RCCEx_PLL2_Config>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007d44:	e015      	b.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d4a:	3328      	adds	r3, #40	@ 0x28
 8007d4c:	2102      	movs	r1, #2
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f001 fe36 	bl	80099c0 <RCCEx_PLL3_Config>
 8007d54:	4603      	mov	r3, r0
 8007d56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007d5a:	e00a      	b.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d62:	e006      	b.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007d64:	bf00      	nop
 8007d66:	e004      	b.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007d68:	bf00      	nop
 8007d6a:	e002      	b.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007d6c:	bf00      	nop
 8007d6e:	e000      	b.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007d70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d10b      	bne.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d7a:	4b39      	ldr	r3, [pc, #228]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d7e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d8a:	4a35      	ldr	r2, [pc, #212]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d8c:	430b      	orrs	r3, r1
 8007d8e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d90:	e003      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007da6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007daa:	2300      	movs	r3, #0
 8007dac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007db0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007db4:	460b      	mov	r3, r1
 8007db6:	4313      	orrs	r3, r2
 8007db8:	d058      	beq.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007dc2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007dc6:	d033      	beq.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007dc8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007dcc:	d82c      	bhi.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007dce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dd2:	d02f      	beq.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007dd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dd8:	d826      	bhi.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007dda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007dde:	d02b      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007de0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007de4:	d820      	bhi.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007de6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dea:	d012      	beq.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007dec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007df0:	d81a      	bhi.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d022      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007df6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007dfa:	d115      	bne.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e00:	3308      	adds	r3, #8
 8007e02:	2100      	movs	r1, #0
 8007e04:	4618      	mov	r0, r3
 8007e06:	f001 fd29 	bl	800985c <RCCEx_PLL2_Config>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007e10:	e015      	b.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e16:	3328      	adds	r3, #40	@ 0x28
 8007e18:	2102      	movs	r1, #2
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f001 fdd0 	bl	80099c0 <RCCEx_PLL3_Config>
 8007e20:	4603      	mov	r3, r0
 8007e22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007e26:	e00a      	b.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e2e:	e006      	b.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007e30:	bf00      	nop
 8007e32:	e004      	b.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007e34:	bf00      	nop
 8007e36:	e002      	b.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007e38:	bf00      	nop
 8007e3a:	e000      	b.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007e3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d10e      	bne.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e46:	4b06      	ldr	r3, [pc, #24]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e4a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e56:	4a02      	ldr	r2, [pc, #8]	@ (8007e60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e58:	430b      	orrs	r3, r1
 8007e5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e5c:	e006      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007e5e:	bf00      	nop
 8007e60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e74:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007e78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e82:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007e86:	460b      	mov	r3, r1
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	d055      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007e94:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007e98:	d033      	beq.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007e9a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007e9e:	d82c      	bhi.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007ea0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ea4:	d02f      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007ea6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007eaa:	d826      	bhi.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007eac:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007eb0:	d02b      	beq.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007eb2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007eb6:	d820      	bhi.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007eb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ebc:	d012      	beq.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007ebe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ec2:	d81a      	bhi.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d022      	beq.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007ec8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ecc:	d115      	bne.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ed2:	3308      	adds	r3, #8
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f001 fcc0 	bl	800985c <RCCEx_PLL2_Config>
 8007edc:	4603      	mov	r3, r0
 8007ede:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007ee2:	e015      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ee8:	3328      	adds	r3, #40	@ 0x28
 8007eea:	2102      	movs	r1, #2
 8007eec:	4618      	mov	r0, r3
 8007eee:	f001 fd67 	bl	80099c0 <RCCEx_PLL3_Config>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007ef8:	e00a      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f00:	e006      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007f02:	bf00      	nop
 8007f04:	e004      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007f06:	bf00      	nop
 8007f08:	e002      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007f0a:	bf00      	nop
 8007f0c:	e000      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007f0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d10b      	bne.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007f18:	4ba1      	ldr	r3, [pc, #644]	@ (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f1c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007f28:	4a9d      	ldr	r2, [pc, #628]	@ (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f2a:	430b      	orrs	r3, r1
 8007f2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f2e:	e003      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f40:	f002 0308 	and.w	r3, r2, #8
 8007f44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f48:	2300      	movs	r3, #0
 8007f4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007f4e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007f52:	460b      	mov	r3, r1
 8007f54:	4313      	orrs	r3, r2
 8007f56:	d01e      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f64:	d10c      	bne.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f6a:	3328      	adds	r3, #40	@ 0x28
 8007f6c:	2102      	movs	r1, #2
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f001 fd26 	bl	80099c0 <RCCEx_PLL3_Config>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d002      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007f80:	4b87      	ldr	r3, [pc, #540]	@ (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f84:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f90:	4a83      	ldr	r2, [pc, #524]	@ (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f92:	430b      	orrs	r3, r1
 8007f94:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9e:	f002 0310 	and.w	r3, r2, #16
 8007fa2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007fac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	d01e      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007fbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fc2:	d10c      	bne.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fc8:	3328      	adds	r3, #40	@ 0x28
 8007fca:	2102      	movs	r1, #2
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f001 fcf7 	bl	80099c0 <RCCEx_PLL3_Config>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d002      	beq.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007fde:	4b70      	ldr	r3, [pc, #448]	@ (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fe2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007fee:	4a6c      	ldr	r2, [pc, #432]	@ (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ff0:	430b      	orrs	r3, r1
 8007ff2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008000:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008004:	2300      	movs	r3, #0
 8008006:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800800a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800800e:	460b      	mov	r3, r1
 8008010:	4313      	orrs	r3, r2
 8008012:	d03e      	beq.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008018:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800801c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008020:	d022      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008022:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008026:	d81b      	bhi.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008028:	2b00      	cmp	r3, #0
 800802a:	d003      	beq.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800802c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008030:	d00b      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008032:	e015      	b.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008038:	3308      	adds	r3, #8
 800803a:	2100      	movs	r1, #0
 800803c:	4618      	mov	r0, r3
 800803e:	f001 fc0d 	bl	800985c <RCCEx_PLL2_Config>
 8008042:	4603      	mov	r3, r0
 8008044:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008048:	e00f      	b.n	800806a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800804a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800804e:	3328      	adds	r3, #40	@ 0x28
 8008050:	2102      	movs	r1, #2
 8008052:	4618      	mov	r0, r3
 8008054:	f001 fcb4 	bl	80099c0 <RCCEx_PLL3_Config>
 8008058:	4603      	mov	r3, r0
 800805a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800805e:	e004      	b.n	800806a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008066:	e000      	b.n	800806a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008068:	bf00      	nop
    }

    if (ret == HAL_OK)
 800806a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800806e:	2b00      	cmp	r3, #0
 8008070:	d10b      	bne.n	800808a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008072:	4b4b      	ldr	r3, [pc, #300]	@ (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008076:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800807a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800807e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008082:	4a47      	ldr	r2, [pc, #284]	@ (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008084:	430b      	orrs	r3, r1
 8008086:	6593      	str	r3, [r2, #88]	@ 0x58
 8008088:	e003      	b.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800808a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800808e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800809e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80080a0:	2300      	movs	r3, #0
 80080a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80080a4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80080a8:	460b      	mov	r3, r1
 80080aa:	4313      	orrs	r3, r2
 80080ac:	d03b      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80080ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80080ba:	d01f      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80080bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80080c0:	d818      	bhi.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80080c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080c6:	d003      	beq.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80080c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80080cc:	d007      	beq.n	80080de <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80080ce:	e011      	b.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080d0:	4b33      	ldr	r3, [pc, #204]	@ (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d4:	4a32      	ldr	r2, [pc, #200]	@ (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80080dc:	e00f      	b.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80080de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080e2:	3328      	adds	r3, #40	@ 0x28
 80080e4:	2101      	movs	r1, #1
 80080e6:	4618      	mov	r0, r3
 80080e8:	f001 fc6a 	bl	80099c0 <RCCEx_PLL3_Config>
 80080ec:	4603      	mov	r3, r0
 80080ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80080f2:	e004      	b.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080fa:	e000      	b.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80080fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10b      	bne.n	800811e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008106:	4b26      	ldr	r3, [pc, #152]	@ (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800810a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800810e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008116:	4a22      	ldr	r2, [pc, #136]	@ (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008118:	430b      	orrs	r3, r1
 800811a:	6553      	str	r3, [r2, #84]	@ 0x54
 800811c:	e003      	b.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800811e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008122:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800812a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008132:	673b      	str	r3, [r7, #112]	@ 0x70
 8008134:	2300      	movs	r3, #0
 8008136:	677b      	str	r3, [r7, #116]	@ 0x74
 8008138:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800813c:	460b      	mov	r3, r1
 800813e:	4313      	orrs	r3, r2
 8008140:	d034      	beq.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008146:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008148:	2b00      	cmp	r3, #0
 800814a:	d003      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800814c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008150:	d007      	beq.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008152:	e011      	b.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008154:	4b12      	ldr	r3, [pc, #72]	@ (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008158:	4a11      	ldr	r2, [pc, #68]	@ (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800815a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800815e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008160:	e00e      	b.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008166:	3308      	adds	r3, #8
 8008168:	2102      	movs	r1, #2
 800816a:	4618      	mov	r0, r3
 800816c:	f001 fb76 	bl	800985c <RCCEx_PLL2_Config>
 8008170:	4603      	mov	r3, r0
 8008172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008176:	e003      	b.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800817e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008180:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10d      	bne.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008188:	4b05      	ldr	r3, [pc, #20]	@ (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800818a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800818c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008194:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008196:	4a02      	ldr	r2, [pc, #8]	@ (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008198:	430b      	orrs	r3, r1
 800819a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800819c:	e006      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800819e:	bf00      	nop
 80081a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80081ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80081b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80081ba:	2300      	movs	r3, #0
 80081bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80081be:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80081c2:	460b      	mov	r3, r1
 80081c4:	4313      	orrs	r3, r2
 80081c6:	d00c      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80081c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081cc:	3328      	adds	r3, #40	@ 0x28
 80081ce:	2102      	movs	r1, #2
 80081d0:	4618      	mov	r0, r3
 80081d2:	f001 fbf5 	bl	80099c0 <RCCEx_PLL3_Config>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d002      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80081e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80081ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80081f0:	2300      	movs	r3, #0
 80081f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80081f4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80081f8:	460b      	mov	r3, r1
 80081fa:	4313      	orrs	r3, r2
 80081fc:	d038      	beq.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80081fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008202:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008206:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800820a:	d018      	beq.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800820c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008210:	d811      	bhi.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008212:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008216:	d014      	beq.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008218:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800821c:	d80b      	bhi.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800821e:	2b00      	cmp	r3, #0
 8008220:	d011      	beq.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008222:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008226:	d106      	bne.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008228:	4bc3      	ldr	r3, [pc, #780]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800822a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800822c:	4ac2      	ldr	r2, [pc, #776]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800822e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008232:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008234:	e008      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800823c:	e004      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800823e:	bf00      	nop
 8008240:	e002      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008242:	bf00      	nop
 8008244:	e000      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008246:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008248:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10b      	bne.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008250:	4bb9      	ldr	r3, [pc, #740]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008254:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800825c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008260:	4ab5      	ldr	r2, [pc, #724]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008262:	430b      	orrs	r3, r1
 8008264:	6553      	str	r3, [r2, #84]	@ 0x54
 8008266:	e003      	b.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008268:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800826c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008278:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800827c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800827e:	2300      	movs	r3, #0
 8008280:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008282:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008286:	460b      	mov	r3, r1
 8008288:	4313      	orrs	r3, r2
 800828a:	d009      	beq.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800828c:	4baa      	ldr	r3, [pc, #680]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800828e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008290:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800829a:	4aa7      	ldr	r2, [pc, #668]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800829c:	430b      	orrs	r3, r1
 800829e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80082a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80082ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80082ae:	2300      	movs	r3, #0
 80082b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80082b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80082b6:	460b      	mov	r3, r1
 80082b8:	4313      	orrs	r3, r2
 80082ba:	d00a      	beq.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80082bc:	4b9e      	ldr	r3, [pc, #632]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80082c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80082cc:	4a9a      	ldr	r2, [pc, #616]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082ce:	430b      	orrs	r3, r1
 80082d0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80082d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082da:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80082de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082e0:	2300      	movs	r3, #0
 80082e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082e4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80082e8:	460b      	mov	r3, r1
 80082ea:	4313      	orrs	r3, r2
 80082ec:	d009      	beq.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80082ee:	4b92      	ldr	r3, [pc, #584]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082f2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80082f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082fc:	4a8e      	ldr	r2, [pc, #568]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082fe:	430b      	orrs	r3, r1
 8008300:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800830e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008310:	2300      	movs	r3, #0
 8008312:	647b      	str	r3, [r7, #68]	@ 0x44
 8008314:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008318:	460b      	mov	r3, r1
 800831a:	4313      	orrs	r3, r2
 800831c:	d00e      	beq.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800831e:	4b86      	ldr	r3, [pc, #536]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	4a85      	ldr	r2, [pc, #532]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008324:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008328:	6113      	str	r3, [r2, #16]
 800832a:	4b83      	ldr	r3, [pc, #524]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800832c:	6919      	ldr	r1, [r3, #16]
 800832e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008332:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008336:	4a80      	ldr	r2, [pc, #512]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008338:	430b      	orrs	r3, r1
 800833a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800833c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008344:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008348:	63bb      	str	r3, [r7, #56]	@ 0x38
 800834a:	2300      	movs	r3, #0
 800834c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800834e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008352:	460b      	mov	r3, r1
 8008354:	4313      	orrs	r3, r2
 8008356:	d009      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008358:	4b77      	ldr	r3, [pc, #476]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800835a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800835c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008366:	4a74      	ldr	r2, [pc, #464]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008368:	430b      	orrs	r3, r1
 800836a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800836c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008374:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008378:	633b      	str	r3, [r7, #48]	@ 0x30
 800837a:	2300      	movs	r3, #0
 800837c:	637b      	str	r3, [r7, #52]	@ 0x34
 800837e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008382:	460b      	mov	r3, r1
 8008384:	4313      	orrs	r3, r2
 8008386:	d00a      	beq.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008388:	4b6b      	ldr	r3, [pc, #428]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800838a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800838c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008394:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008398:	4a67      	ldr	r2, [pc, #412]	@ (8008538 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800839a:	430b      	orrs	r3, r1
 800839c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800839e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a6:	2100      	movs	r1, #0
 80083a8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80083aa:	f003 0301 	and.w	r3, r3, #1
 80083ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083b0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80083b4:	460b      	mov	r3, r1
 80083b6:	4313      	orrs	r3, r2
 80083b8:	d011      	beq.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083be:	3308      	adds	r3, #8
 80083c0:	2100      	movs	r1, #0
 80083c2:	4618      	mov	r0, r3
 80083c4:	f001 fa4a 	bl	800985c <RCCEx_PLL2_Config>
 80083c8:	4603      	mov	r3, r0
 80083ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80083ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d003      	beq.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80083de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e6:	2100      	movs	r1, #0
 80083e8:	6239      	str	r1, [r7, #32]
 80083ea:	f003 0302 	and.w	r3, r3, #2
 80083ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80083f0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80083f4:	460b      	mov	r3, r1
 80083f6:	4313      	orrs	r3, r2
 80083f8:	d011      	beq.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083fe:	3308      	adds	r3, #8
 8008400:	2101      	movs	r1, #1
 8008402:	4618      	mov	r0, r3
 8008404:	f001 fa2a 	bl	800985c <RCCEx_PLL2_Config>
 8008408:	4603      	mov	r3, r0
 800840a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800840e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008412:	2b00      	cmp	r3, #0
 8008414:	d003      	beq.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800841a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800841e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008426:	2100      	movs	r1, #0
 8008428:	61b9      	str	r1, [r7, #24]
 800842a:	f003 0304 	and.w	r3, r3, #4
 800842e:	61fb      	str	r3, [r7, #28]
 8008430:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008434:	460b      	mov	r3, r1
 8008436:	4313      	orrs	r3, r2
 8008438:	d011      	beq.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800843a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800843e:	3308      	adds	r3, #8
 8008440:	2102      	movs	r1, #2
 8008442:	4618      	mov	r0, r3
 8008444:	f001 fa0a 	bl	800985c <RCCEx_PLL2_Config>
 8008448:	4603      	mov	r3, r0
 800844a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800844e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008452:	2b00      	cmp	r3, #0
 8008454:	d003      	beq.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800845a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800845e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008466:	2100      	movs	r1, #0
 8008468:	6139      	str	r1, [r7, #16]
 800846a:	f003 0308 	and.w	r3, r3, #8
 800846e:	617b      	str	r3, [r7, #20]
 8008470:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008474:	460b      	mov	r3, r1
 8008476:	4313      	orrs	r3, r2
 8008478:	d011      	beq.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800847a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800847e:	3328      	adds	r3, #40	@ 0x28
 8008480:	2100      	movs	r1, #0
 8008482:	4618      	mov	r0, r3
 8008484:	f001 fa9c 	bl	80099c0 <RCCEx_PLL3_Config>
 8008488:	4603      	mov	r3, r0
 800848a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800848e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008492:	2b00      	cmp	r3, #0
 8008494:	d003      	beq.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800849a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800849e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a6:	2100      	movs	r1, #0
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	f003 0310 	and.w	r3, r3, #16
 80084ae:	60fb      	str	r3, [r7, #12]
 80084b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80084b4:	460b      	mov	r3, r1
 80084b6:	4313      	orrs	r3, r2
 80084b8:	d011      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084be:	3328      	adds	r3, #40	@ 0x28
 80084c0:	2101      	movs	r1, #1
 80084c2:	4618      	mov	r0, r3
 80084c4:	f001 fa7c 	bl	80099c0 <RCCEx_PLL3_Config>
 80084c8:	4603      	mov	r3, r0
 80084ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80084ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d003      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80084de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e6:	2100      	movs	r1, #0
 80084e8:	6039      	str	r1, [r7, #0]
 80084ea:	f003 0320 	and.w	r3, r3, #32
 80084ee:	607b      	str	r3, [r7, #4]
 80084f0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80084f4:	460b      	mov	r3, r1
 80084f6:	4313      	orrs	r3, r2
 80084f8:	d011      	beq.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80084fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084fe:	3328      	adds	r3, #40	@ 0x28
 8008500:	2102      	movs	r1, #2
 8008502:	4618      	mov	r0, r3
 8008504:	f001 fa5c 	bl	80099c0 <RCCEx_PLL3_Config>
 8008508:	4603      	mov	r3, r0
 800850a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800850e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008512:	2b00      	cmp	r3, #0
 8008514:	d003      	beq.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008516:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800851a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800851e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008522:	2b00      	cmp	r3, #0
 8008524:	d101      	bne.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008526:	2300      	movs	r3, #0
 8008528:	e000      	b.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
}
 800852c:	4618      	mov	r0, r3
 800852e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008532:	46bd      	mov	sp, r7
 8008534:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008538:	58024400 	.word	0x58024400

0800853c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b090      	sub	sp, #64	@ 0x40
 8008540:	af00      	add	r7, sp, #0
 8008542:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008546:	e9d7 2300 	ldrd	r2, r3, [r7]
 800854a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800854e:	430b      	orrs	r3, r1
 8008550:	f040 8094 	bne.w	800867c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008554:	4b9e      	ldr	r3, [pc, #632]	@ (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008556:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008558:	f003 0307 	and.w	r3, r3, #7
 800855c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800855e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008560:	2b04      	cmp	r3, #4
 8008562:	f200 8087 	bhi.w	8008674 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008566:	a201      	add	r2, pc, #4	@ (adr r2, 800856c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856c:	08008581 	.word	0x08008581
 8008570:	080085a9 	.word	0x080085a9
 8008574:	080085d1 	.word	0x080085d1
 8008578:	0800866d 	.word	0x0800866d
 800857c:	080085f9 	.word	0x080085f9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008580:	4b93      	ldr	r3, [pc, #588]	@ (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008588:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800858c:	d108      	bne.n	80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800858e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008592:	4618      	mov	r0, r3
 8008594:	f001 f810 	bl	80095b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800859a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800859c:	f000 bd45 	b.w	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085a0:	2300      	movs	r3, #0
 80085a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085a4:	f000 bd41 	b.w	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085a8:	4b89      	ldr	r3, [pc, #548]	@ (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085b4:	d108      	bne.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085b6:	f107 0318 	add.w	r3, r7, #24
 80085ba:	4618      	mov	r0, r3
 80085bc:	f000 fd54 	bl	8009068 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085c4:	f000 bd31 	b.w	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085c8:	2300      	movs	r3, #0
 80085ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085cc:	f000 bd2d 	b.w	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085d0:	4b7f      	ldr	r3, [pc, #508]	@ (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085dc:	d108      	bne.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085de:	f107 030c 	add.w	r3, r7, #12
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 fe94 	bl	8009310 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085ec:	f000 bd1d 	b.w	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085f0:	2300      	movs	r3, #0
 80085f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085f4:	f000 bd19 	b.w	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80085f8:	4b75      	ldr	r3, [pc, #468]	@ (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008600:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008602:	4b73      	ldr	r3, [pc, #460]	@ (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 0304 	and.w	r3, r3, #4
 800860a:	2b04      	cmp	r3, #4
 800860c:	d10c      	bne.n	8008628 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800860e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008610:	2b00      	cmp	r3, #0
 8008612:	d109      	bne.n	8008628 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008614:	4b6e      	ldr	r3, [pc, #440]	@ (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	08db      	lsrs	r3, r3, #3
 800861a:	f003 0303 	and.w	r3, r3, #3
 800861e:	4a6d      	ldr	r2, [pc, #436]	@ (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008620:	fa22 f303 	lsr.w	r3, r2, r3
 8008624:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008626:	e01f      	b.n	8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008628:	4b69      	ldr	r3, [pc, #420]	@ (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008630:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008634:	d106      	bne.n	8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008638:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800863c:	d102      	bne.n	8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800863e:	4b66      	ldr	r3, [pc, #408]	@ (80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008640:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008642:	e011      	b.n	8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008644:	4b62      	ldr	r3, [pc, #392]	@ (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800864c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008650:	d106      	bne.n	8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008654:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008658:	d102      	bne.n	8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800865a:	4b60      	ldr	r3, [pc, #384]	@ (80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800865c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800865e:	e003      	b.n	8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008660:	2300      	movs	r3, #0
 8008662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008664:	f000 bce1 	b.w	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008668:	f000 bcdf 	b.w	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800866c:	4b5c      	ldr	r3, [pc, #368]	@ (80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800866e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008670:	f000 bcdb 	b.w	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008674:	2300      	movs	r3, #0
 8008676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008678:	f000 bcd7 	b.w	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800867c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008680:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008684:	430b      	orrs	r3, r1
 8008686:	f040 80ad 	bne.w	80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800868a:	4b51      	ldr	r3, [pc, #324]	@ (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800868c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800868e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008692:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008696:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800869a:	d056      	beq.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800869c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800869e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086a2:	f200 8090 	bhi.w	80087c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80086a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a8:	2bc0      	cmp	r3, #192	@ 0xc0
 80086aa:	f000 8088 	beq.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80086ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b0:	2bc0      	cmp	r3, #192	@ 0xc0
 80086b2:	f200 8088 	bhi.w	80087c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80086b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b8:	2b80      	cmp	r3, #128	@ 0x80
 80086ba:	d032      	beq.n	8008722 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80086bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086be:	2b80      	cmp	r3, #128	@ 0x80
 80086c0:	f200 8081 	bhi.w	80087c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80086c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d003      	beq.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80086ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086cc:	2b40      	cmp	r3, #64	@ 0x40
 80086ce:	d014      	beq.n	80086fa <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80086d0:	e079      	b.n	80087c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086d2:	4b3f      	ldr	r3, [pc, #252]	@ (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80086de:	d108      	bne.n	80086f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086e4:	4618      	mov	r0, r3
 80086e6:	f000 ff67 	bl	80095b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ee:	f000 bc9c 	b.w	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086f2:	2300      	movs	r3, #0
 80086f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086f6:	f000 bc98 	b.w	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086fa:	4b35      	ldr	r3, [pc, #212]	@ (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008702:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008706:	d108      	bne.n	800871a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008708:	f107 0318 	add.w	r3, r7, #24
 800870c:	4618      	mov	r0, r3
 800870e:	f000 fcab 	bl	8009068 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008716:	f000 bc88 	b.w	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800871a:	2300      	movs	r3, #0
 800871c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800871e:	f000 bc84 	b.w	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008722:	4b2b      	ldr	r3, [pc, #172]	@ (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800872a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800872e:	d108      	bne.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008730:	f107 030c 	add.w	r3, r7, #12
 8008734:	4618      	mov	r0, r3
 8008736:	f000 fdeb 	bl	8009310 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800873e:	f000 bc74 	b.w	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008742:	2300      	movs	r3, #0
 8008744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008746:	f000 bc70 	b.w	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800874a:	4b21      	ldr	r3, [pc, #132]	@ (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800874c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800874e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008752:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008754:	4b1e      	ldr	r3, [pc, #120]	@ (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 0304 	and.w	r3, r3, #4
 800875c:	2b04      	cmp	r3, #4
 800875e:	d10c      	bne.n	800877a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008762:	2b00      	cmp	r3, #0
 8008764:	d109      	bne.n	800877a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008766:	4b1a      	ldr	r3, [pc, #104]	@ (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	08db      	lsrs	r3, r3, #3
 800876c:	f003 0303 	and.w	r3, r3, #3
 8008770:	4a18      	ldr	r2, [pc, #96]	@ (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008772:	fa22 f303 	lsr.w	r3, r2, r3
 8008776:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008778:	e01f      	b.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800877a:	4b15      	ldr	r3, [pc, #84]	@ (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008782:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008786:	d106      	bne.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800878a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800878e:	d102      	bne.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008790:	4b11      	ldr	r3, [pc, #68]	@ (80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008792:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008794:	e011      	b.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008796:	4b0e      	ldr	r3, [pc, #56]	@ (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800879e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087a2:	d106      	bne.n	80087b2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80087a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087aa:	d102      	bne.n	80087b2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80087ac:	4b0b      	ldr	r3, [pc, #44]	@ (80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80087ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087b0:	e003      	b.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80087b2:	2300      	movs	r3, #0
 80087b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80087b6:	f000 bc38 	b.w	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80087ba:	f000 bc36 	b.w	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80087be:	4b08      	ldr	r3, [pc, #32]	@ (80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80087c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087c2:	f000 bc32 	b.w	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80087c6:	2300      	movs	r3, #0
 80087c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087ca:	f000 bc2e 	b.w	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80087ce:	bf00      	nop
 80087d0:	58024400 	.word	0x58024400
 80087d4:	03d09000 	.word	0x03d09000
 80087d8:	003d0900 	.word	0x003d0900
 80087dc:	017d7840 	.word	0x017d7840
 80087e0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80087e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087e8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80087ec:	430b      	orrs	r3, r1
 80087ee:	f040 809c 	bne.w	800892a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80087f2:	4b9e      	ldr	r3, [pc, #632]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80087f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087f6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80087fa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80087fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008802:	d054      	beq.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008806:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800880a:	f200 808b 	bhi.w	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800880e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008810:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008814:	f000 8083 	beq.w	800891e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800881a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800881e:	f200 8081 	bhi.w	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008824:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008828:	d02f      	beq.n	800888a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800882a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008830:	d878      	bhi.n	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008834:	2b00      	cmp	r3, #0
 8008836:	d004      	beq.n	8008842 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800883e:	d012      	beq.n	8008866 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008840:	e070      	b.n	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008842:	4b8a      	ldr	r3, [pc, #552]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800884a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800884e:	d107      	bne.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008850:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008854:	4618      	mov	r0, r3
 8008856:	f000 feaf 	bl	80095b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800885a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800885c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800885e:	e3e4      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008860:	2300      	movs	r3, #0
 8008862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008864:	e3e1      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008866:	4b81      	ldr	r3, [pc, #516]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800886e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008872:	d107      	bne.n	8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008874:	f107 0318 	add.w	r3, r7, #24
 8008878:	4618      	mov	r0, r3
 800887a:	f000 fbf5 	bl	8009068 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008882:	e3d2      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008884:	2300      	movs	r3, #0
 8008886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008888:	e3cf      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800888a:	4b78      	ldr	r3, [pc, #480]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008892:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008896:	d107      	bne.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008898:	f107 030c 	add.w	r3, r7, #12
 800889c:	4618      	mov	r0, r3
 800889e:	f000 fd37 	bl	8009310 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088a6:	e3c0      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088a8:	2300      	movs	r3, #0
 80088aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088ac:	e3bd      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80088ae:	4b6f      	ldr	r3, [pc, #444]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80088b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80088b6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80088b8:	4b6c      	ldr	r3, [pc, #432]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f003 0304 	and.w	r3, r3, #4
 80088c0:	2b04      	cmp	r3, #4
 80088c2:	d10c      	bne.n	80088de <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80088c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d109      	bne.n	80088de <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088ca:	4b68      	ldr	r3, [pc, #416]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	08db      	lsrs	r3, r3, #3
 80088d0:	f003 0303 	and.w	r3, r3, #3
 80088d4:	4a66      	ldr	r2, [pc, #408]	@ (8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80088d6:	fa22 f303 	lsr.w	r3, r2, r3
 80088da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088dc:	e01e      	b.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088de:	4b63      	ldr	r3, [pc, #396]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088ea:	d106      	bne.n	80088fa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80088ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088f2:	d102      	bne.n	80088fa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80088f4:	4b5f      	ldr	r3, [pc, #380]	@ (8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80088f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088f8:	e010      	b.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80088fa:	4b5c      	ldr	r3, [pc, #368]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008902:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008906:	d106      	bne.n	8008916 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800890a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800890e:	d102      	bne.n	8008916 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008910:	4b59      	ldr	r3, [pc, #356]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008912:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008914:	e002      	b.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008916:	2300      	movs	r3, #0
 8008918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800891a:	e386      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800891c:	e385      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800891e:	4b57      	ldr	r3, [pc, #348]	@ (8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008922:	e382      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008924:	2300      	movs	r3, #0
 8008926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008928:	e37f      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800892a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800892e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008932:	430b      	orrs	r3, r1
 8008934:	f040 80a7 	bne.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008938:	4b4c      	ldr	r3, [pc, #304]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800893a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800893c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008940:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008944:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008948:	d055      	beq.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800894a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800894c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008950:	f200 8096 	bhi.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008956:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800895a:	f000 8084 	beq.w	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800895e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008960:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008964:	f200 808c 	bhi.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800896a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800896e:	d030      	beq.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008972:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008976:	f200 8083 	bhi.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800897a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897c:	2b00      	cmp	r3, #0
 800897e:	d004      	beq.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008982:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008986:	d012      	beq.n	80089ae <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008988:	e07a      	b.n	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800898a:	4b38      	ldr	r3, [pc, #224]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008992:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008996:	d107      	bne.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008998:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800899c:	4618      	mov	r0, r3
 800899e:	f000 fe0b 	bl	80095b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089a6:	e340      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089a8:	2300      	movs	r3, #0
 80089aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089ac:	e33d      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089ae:	4b2f      	ldr	r3, [pc, #188]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089ba:	d107      	bne.n	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089bc:	f107 0318 	add.w	r3, r7, #24
 80089c0:	4618      	mov	r0, r3
 80089c2:	f000 fb51 	bl	8009068 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089ca:	e32e      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089cc:	2300      	movs	r3, #0
 80089ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089d0:	e32b      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80089d2:	4b26      	ldr	r3, [pc, #152]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80089da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089de:	d107      	bne.n	80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089e0:	f107 030c 	add.w	r3, r7, #12
 80089e4:	4618      	mov	r0, r3
 80089e6:	f000 fc93 	bl	8009310 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089ee:	e31c      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089f0:	2300      	movs	r3, #0
 80089f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089f4:	e319      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80089f6:	4b1d      	ldr	r3, [pc, #116]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80089fe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a00:	4b1a      	ldr	r3, [pc, #104]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 0304 	and.w	r3, r3, #4
 8008a08:	2b04      	cmp	r3, #4
 8008a0a:	d10c      	bne.n	8008a26 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d109      	bne.n	8008a26 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a12:	4b16      	ldr	r3, [pc, #88]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	08db      	lsrs	r3, r3, #3
 8008a18:	f003 0303 	and.w	r3, r3, #3
 8008a1c:	4a14      	ldr	r2, [pc, #80]	@ (8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8008a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a24:	e01e      	b.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a26:	4b11      	ldr	r3, [pc, #68]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a32:	d106      	bne.n	8008a42 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a3a:	d102      	bne.n	8008a42 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a40:	e010      	b.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a42:	4b0a      	ldr	r3, [pc, #40]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a4e:	d106      	bne.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a56:	d102      	bne.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008a58:	4b07      	ldr	r3, [pc, #28]	@ (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a5c:	e002      	b.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008a62:	e2e2      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008a64:	e2e1      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008a66:	4b05      	ldr	r3, [pc, #20]	@ (8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a6a:	e2de      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008a6c:	58024400 	.word	0x58024400
 8008a70:	03d09000 	.word	0x03d09000
 8008a74:	003d0900 	.word	0x003d0900
 8008a78:	017d7840 	.word	0x017d7840
 8008a7c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008a80:	2300      	movs	r3, #0
 8008a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a84:	e2d1      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008a86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a8a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008a8e:	430b      	orrs	r3, r1
 8008a90:	f040 809c 	bne.w	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008a94:	4b93      	ldr	r3, [pc, #588]	@ (8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a98:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008a9c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008aa4:	d054      	beq.n	8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008aac:	f200 808b 	bhi.w	8008bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008ab6:	f000 8083 	beq.w	8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008abc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008ac0:	f200 8081 	bhi.w	8008bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008aca:	d02f      	beq.n	8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ad2:	d878      	bhi.n	8008bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d004      	beq.n	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008adc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ae0:	d012      	beq.n	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008ae2:	e070      	b.n	8008bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ae4:	4b7f      	ldr	r3, [pc, #508]	@ (8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008aec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008af0:	d107      	bne.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008af2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008af6:	4618      	mov	r0, r3
 8008af8:	f000 fd5e 	bl	80095b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b00:	e293      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b02:	2300      	movs	r3, #0
 8008b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b06:	e290      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b08:	4b76      	ldr	r3, [pc, #472]	@ (8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b14:	d107      	bne.n	8008b26 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b16:	f107 0318 	add.w	r3, r7, #24
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f000 faa4 	bl	8009068 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b24:	e281      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b26:	2300      	movs	r3, #0
 8008b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b2a:	e27e      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b2c:	4b6d      	ldr	r3, [pc, #436]	@ (8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b38:	d107      	bne.n	8008b4a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b3a:	f107 030c 	add.w	r3, r7, #12
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f000 fbe6 	bl	8009310 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b48:	e26f      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b4e:	e26c      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008b50:	4b64      	ldr	r3, [pc, #400]	@ (8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008b58:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b5a:	4b62      	ldr	r3, [pc, #392]	@ (8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f003 0304 	and.w	r3, r3, #4
 8008b62:	2b04      	cmp	r3, #4
 8008b64:	d10c      	bne.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d109      	bne.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b6c:	4b5d      	ldr	r3, [pc, #372]	@ (8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	08db      	lsrs	r3, r3, #3
 8008b72:	f003 0303 	and.w	r3, r3, #3
 8008b76:	4a5c      	ldr	r2, [pc, #368]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008b78:	fa22 f303 	lsr.w	r3, r2, r3
 8008b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b7e:	e01e      	b.n	8008bbe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b80:	4b58      	ldr	r3, [pc, #352]	@ (8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b8c:	d106      	bne.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008b8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b94:	d102      	bne.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008b96:	4b55      	ldr	r3, [pc, #340]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b9a:	e010      	b.n	8008bbe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b9c:	4b51      	ldr	r3, [pc, #324]	@ (8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ba4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ba8:	d106      	bne.n	8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bb0:	d102      	bne.n	8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008bb2:	4b4f      	ldr	r3, [pc, #316]	@ (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bb6:	e002      	b.n	8008bbe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008bbc:	e235      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008bbe:	e234      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008bc0:	4b4c      	ldr	r3, [pc, #304]	@ (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bc4:	e231      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bca:	e22e      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008bcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bd0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008bd4:	430b      	orrs	r3, r1
 8008bd6:	f040 808f 	bne.w	8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008bda:	4b42      	ldr	r3, [pc, #264]	@ (8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008bdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bde:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008be2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008bea:	d06b      	beq.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008bf2:	d874      	bhi.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008bfa:	d056      	beq.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bfe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c02:	d86c      	bhi.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c06:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008c0a:	d03b      	beq.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c0e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008c12:	d864      	bhi.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c1a:	d021      	beq.n	8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c22:	d85c      	bhi.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d004      	beq.n	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c30:	d004      	beq.n	8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008c32:	e054      	b.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008c34:	f7fe fa62 	bl	80070fc <HAL_RCC_GetPCLK1Freq>
 8008c38:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c3a:	e1f6      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c3c:	4b29      	ldr	r3, [pc, #164]	@ (8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c48:	d107      	bne.n	8008c5a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c4a:	f107 0318 	add.w	r3, r7, #24
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f000 fa0a 	bl	8009068 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c58:	e1e7      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c5e:	e1e4      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c60:	4b20      	ldr	r3, [pc, #128]	@ (8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c6c:	d107      	bne.n	8008c7e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c6e:	f107 030c 	add.w	r3, r7, #12
 8008c72:	4618      	mov	r0, r3
 8008c74:	f000 fb4c 	bl	8009310 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c7c:	e1d5      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c82:	e1d2      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008c84:	4b17      	ldr	r3, [pc, #92]	@ (8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f003 0304 	and.w	r3, r3, #4
 8008c8c:	2b04      	cmp	r3, #4
 8008c8e:	d109      	bne.n	8008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c90:	4b14      	ldr	r3, [pc, #80]	@ (8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	08db      	lsrs	r3, r3, #3
 8008c96:	f003 0303 	and.w	r3, r3, #3
 8008c9a:	4a13      	ldr	r2, [pc, #76]	@ (8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8008ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ca2:	e1c2      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ca8:	e1bf      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008caa:	4b0e      	ldr	r3, [pc, #56]	@ (8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008cb6:	d102      	bne.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cbc:	e1b5      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cc2:	e1b2      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008cc4:	4b07      	ldr	r3, [pc, #28]	@ (8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ccc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cd0:	d102      	bne.n	8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008cd2:	4b07      	ldr	r3, [pc, #28]	@ (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cd6:	e1a8      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cdc:	e1a5      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ce2:	e1a2      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008ce4:	58024400 	.word	0x58024400
 8008ce8:	03d09000 	.word	0x03d09000
 8008cec:	003d0900 	.word	0x003d0900
 8008cf0:	017d7840 	.word	0x017d7840
 8008cf4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008cf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cfc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008d00:	430b      	orrs	r3, r1
 8008d02:	d173      	bne.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008d04:	4b9c      	ldr	r3, [pc, #624]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008d0c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d14:	d02f      	beq.n	8008d76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d1c:	d863      	bhi.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d004      	beq.n	8008d2e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d2a:	d012      	beq.n	8008d52 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008d2c:	e05b      	b.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d2e:	4b92      	ldr	r3, [pc, #584]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d3a:	d107      	bne.n	8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d3c:	f107 0318 	add.w	r3, r7, #24
 8008d40:	4618      	mov	r0, r3
 8008d42:	f000 f991 	bl	8009068 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d4a:	e16e      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d50:	e16b      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d52:	4b89      	ldr	r3, [pc, #548]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d5e:	d107      	bne.n	8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d60:	f107 030c 	add.w	r3, r7, #12
 8008d64:	4618      	mov	r0, r3
 8008d66:	f000 fad3 	bl	8009310 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d6e:	e15c      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d70:	2300      	movs	r3, #0
 8008d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d74:	e159      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d76:	4b80      	ldr	r3, [pc, #512]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008d7e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d80:	4b7d      	ldr	r3, [pc, #500]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f003 0304 	and.w	r3, r3, #4
 8008d88:	2b04      	cmp	r3, #4
 8008d8a:	d10c      	bne.n	8008da6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d109      	bne.n	8008da6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d92:	4b79      	ldr	r3, [pc, #484]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	08db      	lsrs	r3, r3, #3
 8008d98:	f003 0303 	and.w	r3, r3, #3
 8008d9c:	4a77      	ldr	r2, [pc, #476]	@ (8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8008da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008da4:	e01e      	b.n	8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008da6:	4b74      	ldr	r3, [pc, #464]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008db2:	d106      	bne.n	8008dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008db6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008dba:	d102      	bne.n	8008dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008dbc:	4b70      	ldr	r3, [pc, #448]	@ (8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008dc0:	e010      	b.n	8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008dc2:	4b6d      	ldr	r3, [pc, #436]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008dce:	d106      	bne.n	8008dde <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008dd6:	d102      	bne.n	8008dde <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008dd8:	4b6a      	ldr	r3, [pc, #424]	@ (8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ddc:	e002      	b.n	8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008dde:	2300      	movs	r3, #0
 8008de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008de2:	e122      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008de4:	e121      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008de6:	2300      	movs	r3, #0
 8008de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dea:	e11e      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008dec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008df0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008df4:	430b      	orrs	r3, r1
 8008df6:	d133      	bne.n	8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008df8:	4b5f      	ldr	r3, [pc, #380]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e00:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d004      	beq.n	8008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e0e:	d012      	beq.n	8008e36 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008e10:	e023      	b.n	8008e5a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e12:	4b59      	ldr	r3, [pc, #356]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e1e:	d107      	bne.n	8008e30 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e24:	4618      	mov	r0, r3
 8008e26:	f000 fbc7 	bl	80095b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e2e:	e0fc      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e30:	2300      	movs	r3, #0
 8008e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e34:	e0f9      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e36:	4b50      	ldr	r3, [pc, #320]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e42:	d107      	bne.n	8008e54 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e44:	f107 0318 	add.w	r3, r7, #24
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f000 f90d 	bl	8009068 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008e4e:	6a3b      	ldr	r3, [r7, #32]
 8008e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e52:	e0ea      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e54:	2300      	movs	r3, #0
 8008e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e58:	e0e7      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e5e:	e0e4      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008e60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e64:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008e68:	430b      	orrs	r3, r1
 8008e6a:	f040 808d 	bne.w	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008e6e:	4b42      	ldr	r3, [pc, #264]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e72:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008e76:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e7e:	d06b      	beq.n	8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e86:	d874      	bhi.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e8e:	d056      	beq.n	8008f3e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e96:	d86c      	bhi.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008e9e:	d03b      	beq.n	8008f18 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ea2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008ea6:	d864      	bhi.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008eae:	d021      	beq.n	8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008eb6:	d85c      	bhi.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d004      	beq.n	8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ec0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ec4:	d004      	beq.n	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008ec6:	e054      	b.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008ec8:	f000 f8b8 	bl	800903c <HAL_RCCEx_GetD3PCLK1Freq>
 8008ecc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008ece:	e0ac      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ed0:	4b29      	ldr	r3, [pc, #164]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ed8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008edc:	d107      	bne.n	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ede:	f107 0318 	add.w	r3, r7, #24
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f000 f8c0 	bl	8009068 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eec:	e09d      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ef2:	e09a      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ef4:	4b20      	ldr	r3, [pc, #128]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008efc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f00:	d107      	bne.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f02:	f107 030c 	add.w	r3, r7, #12
 8008f06:	4618      	mov	r0, r3
 8008f08:	f000 fa02 	bl	8009310 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f10:	e08b      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f12:	2300      	movs	r3, #0
 8008f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f16:	e088      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008f18:	4b17      	ldr	r3, [pc, #92]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f003 0304 	and.w	r3, r3, #4
 8008f20:	2b04      	cmp	r3, #4
 8008f22:	d109      	bne.n	8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f24:	4b14      	ldr	r3, [pc, #80]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	08db      	lsrs	r3, r3, #3
 8008f2a:	f003 0303 	and.w	r3, r3, #3
 8008f2e:	4a13      	ldr	r2, [pc, #76]	@ (8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008f30:	fa22 f303 	lsr.w	r3, r2, r3
 8008f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f36:	e078      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f3c:	e075      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f4a:	d102      	bne.n	8008f52 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f50:	e06b      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f52:	2300      	movs	r3, #0
 8008f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f56:	e068      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008f58:	4b07      	ldr	r3, [pc, #28]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f64:	d102      	bne.n	8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008f66:	4b07      	ldr	r3, [pc, #28]	@ (8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f6a:	e05e      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f70:	e05b      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008f72:	2300      	movs	r3, #0
 8008f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f76:	e058      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008f78:	58024400 	.word	0x58024400
 8008f7c:	03d09000 	.word	0x03d09000
 8008f80:	003d0900 	.word	0x003d0900
 8008f84:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008f88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f8c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008f90:	430b      	orrs	r3, r1
 8008f92:	d148      	bne.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008f94:	4b27      	ldr	r3, [pc, #156]	@ (8009034 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008f9c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fa4:	d02a      	beq.n	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fac:	d838      	bhi.n	8009020 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d004      	beq.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fba:	d00d      	beq.n	8008fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008fbc:	e030      	b.n	8009020 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8009034 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fca:	d102      	bne.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8009038 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fd0:	e02b      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fd6:	e028      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fd8:	4b16      	ldr	r3, [pc, #88]	@ (8009034 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fe0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008fe4:	d107      	bne.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fe6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008fea:	4618      	mov	r0, r3
 8008fec:	f000 fae4 	bl	80095b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ff4:	e019      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ffa:	e016      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8009034 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009004:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009008:	d107      	bne.n	800901a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800900a:	f107 0318 	add.w	r3, r7, #24
 800900e:	4618      	mov	r0, r3
 8009010:	f000 f82a 	bl	8009068 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009018:	e007      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800901a:	2300      	movs	r3, #0
 800901c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800901e:	e004      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009020:	2300      	movs	r3, #0
 8009022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009024:	e001      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009026:	2300      	movs	r3, #0
 8009028:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800902a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800902c:	4618      	mov	r0, r3
 800902e:	3740      	adds	r7, #64	@ 0x40
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	58024400 	.word	0x58024400
 8009038:	017d7840 	.word	0x017d7840

0800903c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009040:	f7fe f82c 	bl	800709c <HAL_RCC_GetHCLKFreq>
 8009044:	4602      	mov	r2, r0
 8009046:	4b06      	ldr	r3, [pc, #24]	@ (8009060 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009048:	6a1b      	ldr	r3, [r3, #32]
 800904a:	091b      	lsrs	r3, r3, #4
 800904c:	f003 0307 	and.w	r3, r3, #7
 8009050:	4904      	ldr	r1, [pc, #16]	@ (8009064 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009052:	5ccb      	ldrb	r3, [r1, r3]
 8009054:	f003 031f 	and.w	r3, r3, #31
 8009058:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800905c:	4618      	mov	r0, r3
 800905e:	bd80      	pop	{r7, pc}
 8009060:	58024400 	.word	0x58024400
 8009064:	0801dea8 	.word	0x0801dea8

08009068 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009068:	b480      	push	{r7}
 800906a:	b089      	sub	sp, #36	@ 0x24
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009070:	4ba1      	ldr	r3, [pc, #644]	@ (80092f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009074:	f003 0303 	and.w	r3, r3, #3
 8009078:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800907a:	4b9f      	ldr	r3, [pc, #636]	@ (80092f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800907c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800907e:	0b1b      	lsrs	r3, r3, #12
 8009080:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009084:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009086:	4b9c      	ldr	r3, [pc, #624]	@ (80092f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800908a:	091b      	lsrs	r3, r3, #4
 800908c:	f003 0301 	and.w	r3, r3, #1
 8009090:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009092:	4b99      	ldr	r3, [pc, #612]	@ (80092f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009096:	08db      	lsrs	r3, r3, #3
 8009098:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800909c:	693a      	ldr	r2, [r7, #16]
 800909e:	fb02 f303 	mul.w	r3, r2, r3
 80090a2:	ee07 3a90 	vmov	s15, r3
 80090a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f000 8111 	beq.w	80092d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80090b6:	69bb      	ldr	r3, [r7, #24]
 80090b8:	2b02      	cmp	r3, #2
 80090ba:	f000 8083 	beq.w	80091c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	2b02      	cmp	r3, #2
 80090c2:	f200 80a1 	bhi.w	8009208 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d003      	beq.n	80090d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d056      	beq.n	8009180 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80090d2:	e099      	b.n	8009208 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090d4:	4b88      	ldr	r3, [pc, #544]	@ (80092f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f003 0320 	and.w	r3, r3, #32
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d02d      	beq.n	800913c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090e0:	4b85      	ldr	r3, [pc, #532]	@ (80092f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	08db      	lsrs	r3, r3, #3
 80090e6:	f003 0303 	and.w	r3, r3, #3
 80090ea:	4a84      	ldr	r2, [pc, #528]	@ (80092fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80090ec:	fa22 f303 	lsr.w	r3, r2, r3
 80090f0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	ee07 3a90 	vmov	s15, r3
 80090f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	ee07 3a90 	vmov	s15, r3
 8009102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800910a:	4b7b      	ldr	r3, [pc, #492]	@ (80092f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800910c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800910e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009112:	ee07 3a90 	vmov	s15, r3
 8009116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800911a:	ed97 6a03 	vldr	s12, [r7, #12]
 800911e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009300 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800912a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800912e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009136:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800913a:	e087      	b.n	800924c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	ee07 3a90 	vmov	s15, r3
 8009142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009146:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009304 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800914a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800914e:	4b6a      	ldr	r3, [pc, #424]	@ (80092f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009156:	ee07 3a90 	vmov	s15, r3
 800915a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800915e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009162:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009300 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800916a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800916e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800917a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800917e:	e065      	b.n	800924c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	ee07 3a90 	vmov	s15, r3
 8009186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800918a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009308 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800918e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009192:	4b59      	ldr	r3, [pc, #356]	@ (80092f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800919a:	ee07 3a90 	vmov	s15, r3
 800919e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80091a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009300 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091c2:	e043      	b.n	800924c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	ee07 3a90 	vmov	s15, r3
 80091ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800930c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80091d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091d6:	4b48      	ldr	r3, [pc, #288]	@ (80092f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091de:	ee07 3a90 	vmov	s15, r3
 80091e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80091ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009300 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009202:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009206:	e021      	b.n	800924c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	ee07 3a90 	vmov	s15, r3
 800920e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009212:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009308 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800921a:	4b37      	ldr	r3, [pc, #220]	@ (80092f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800921c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800921e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009222:	ee07 3a90 	vmov	s15, r3
 8009226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800922a:	ed97 6a03 	vldr	s12, [r7, #12]
 800922e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009300 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800923a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800923e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009246:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800924a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800924c:	4b2a      	ldr	r3, [pc, #168]	@ (80092f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800924e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009250:	0a5b      	lsrs	r3, r3, #9
 8009252:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009256:	ee07 3a90 	vmov	s15, r3
 800925a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800925e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009262:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009266:	edd7 6a07 	vldr	s13, [r7, #28]
 800926a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800926e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009272:	ee17 2a90 	vmov	r2, s15
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800927a:	4b1f      	ldr	r3, [pc, #124]	@ (80092f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800927c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800927e:	0c1b      	lsrs	r3, r3, #16
 8009280:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009284:	ee07 3a90 	vmov	s15, r3
 8009288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800928c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009290:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009294:	edd7 6a07 	vldr	s13, [r7, #28]
 8009298:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800929c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092a0:	ee17 2a90 	vmov	r2, s15
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80092a8:	4b13      	ldr	r3, [pc, #76]	@ (80092f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ac:	0e1b      	lsrs	r3, r3, #24
 80092ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092b2:	ee07 3a90 	vmov	s15, r3
 80092b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80092be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80092c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092ce:	ee17 2a90 	vmov	r2, s15
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80092d6:	e008      	b.n	80092ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	609a      	str	r2, [r3, #8]
}
 80092ea:	bf00      	nop
 80092ec:	3724      	adds	r7, #36	@ 0x24
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr
 80092f6:	bf00      	nop
 80092f8:	58024400 	.word	0x58024400
 80092fc:	03d09000 	.word	0x03d09000
 8009300:	46000000 	.word	0x46000000
 8009304:	4c742400 	.word	0x4c742400
 8009308:	4a742400 	.word	0x4a742400
 800930c:	4bbebc20 	.word	0x4bbebc20

08009310 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009310:	b480      	push	{r7}
 8009312:	b089      	sub	sp, #36	@ 0x24
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009318:	4ba1      	ldr	r3, [pc, #644]	@ (80095a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800931a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800931c:	f003 0303 	and.w	r3, r3, #3
 8009320:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009322:	4b9f      	ldr	r3, [pc, #636]	@ (80095a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009326:	0d1b      	lsrs	r3, r3, #20
 8009328:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800932c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800932e:	4b9c      	ldr	r3, [pc, #624]	@ (80095a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009332:	0a1b      	lsrs	r3, r3, #8
 8009334:	f003 0301 	and.w	r3, r3, #1
 8009338:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800933a:	4b99      	ldr	r3, [pc, #612]	@ (80095a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800933c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800933e:	08db      	lsrs	r3, r3, #3
 8009340:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009344:	693a      	ldr	r2, [r7, #16]
 8009346:	fb02 f303 	mul.w	r3, r2, r3
 800934a:	ee07 3a90 	vmov	s15, r3
 800934e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009352:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	2b00      	cmp	r3, #0
 800935a:	f000 8111 	beq.w	8009580 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	2b02      	cmp	r3, #2
 8009362:	f000 8083 	beq.w	800946c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009366:	69bb      	ldr	r3, [r7, #24]
 8009368:	2b02      	cmp	r3, #2
 800936a:	f200 80a1 	bhi.w	80094b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d003      	beq.n	800937c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009374:	69bb      	ldr	r3, [r7, #24]
 8009376:	2b01      	cmp	r3, #1
 8009378:	d056      	beq.n	8009428 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800937a:	e099      	b.n	80094b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800937c:	4b88      	ldr	r3, [pc, #544]	@ (80095a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f003 0320 	and.w	r3, r3, #32
 8009384:	2b00      	cmp	r3, #0
 8009386:	d02d      	beq.n	80093e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009388:	4b85      	ldr	r3, [pc, #532]	@ (80095a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	08db      	lsrs	r3, r3, #3
 800938e:	f003 0303 	and.w	r3, r3, #3
 8009392:	4a84      	ldr	r2, [pc, #528]	@ (80095a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009394:	fa22 f303 	lsr.w	r3, r2, r3
 8009398:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	ee07 3a90 	vmov	s15, r3
 80093a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	ee07 3a90 	vmov	s15, r3
 80093aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093b2:	4b7b      	ldr	r3, [pc, #492]	@ (80095a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ba:	ee07 3a90 	vmov	s15, r3
 80093be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80093c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80095a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80093e2:	e087      	b.n	80094f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	ee07 3a90 	vmov	s15, r3
 80093ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80095ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80093f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093f6:	4b6a      	ldr	r3, [pc, #424]	@ (80095a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093fe:	ee07 3a90 	vmov	s15, r3
 8009402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009406:	ed97 6a03 	vldr	s12, [r7, #12]
 800940a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80095a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800940e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800941a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800941e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009422:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009426:	e065      	b.n	80094f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	ee07 3a90 	vmov	s15, r3
 800942e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009432:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80095b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800943a:	4b59      	ldr	r3, [pc, #356]	@ (80095a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800943c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800943e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009442:	ee07 3a90 	vmov	s15, r3
 8009446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800944a:	ed97 6a03 	vldr	s12, [r7, #12]
 800944e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80095a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800945a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800945e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009466:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800946a:	e043      	b.n	80094f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	ee07 3a90 	vmov	s15, r3
 8009472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009476:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80095b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800947a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800947e:	4b48      	ldr	r3, [pc, #288]	@ (80095a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009486:	ee07 3a90 	vmov	s15, r3
 800948a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800948e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009492:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80095a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800949a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800949e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094ae:	e021      	b.n	80094f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	ee07 3a90 	vmov	s15, r3
 80094b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80095b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80094be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094c2:	4b37      	ldr	r3, [pc, #220]	@ (80095a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ca:	ee07 3a90 	vmov	s15, r3
 80094ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80094d6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80095a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80094f4:	4b2a      	ldr	r3, [pc, #168]	@ (80095a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094f8:	0a5b      	lsrs	r3, r3, #9
 80094fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094fe:	ee07 3a90 	vmov	s15, r3
 8009502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009506:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800950a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800950e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009516:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800951a:	ee17 2a90 	vmov	r2, s15
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009522:	4b1f      	ldr	r3, [pc, #124]	@ (80095a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009526:	0c1b      	lsrs	r3, r3, #16
 8009528:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800952c:	ee07 3a90 	vmov	s15, r3
 8009530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009534:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009538:	ee37 7a87 	vadd.f32	s14, s15, s14
 800953c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009540:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009544:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009548:	ee17 2a90 	vmov	r2, s15
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009550:	4b13      	ldr	r3, [pc, #76]	@ (80095a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009554:	0e1b      	lsrs	r3, r3, #24
 8009556:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800955a:	ee07 3a90 	vmov	s15, r3
 800955e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009562:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009566:	ee37 7a87 	vadd.f32	s14, s15, s14
 800956a:	edd7 6a07 	vldr	s13, [r7, #28]
 800956e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009572:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009576:	ee17 2a90 	vmov	r2, s15
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800957e:	e008      	b.n	8009592 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	609a      	str	r2, [r3, #8]
}
 8009592:	bf00      	nop
 8009594:	3724      	adds	r7, #36	@ 0x24
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr
 800959e:	bf00      	nop
 80095a0:	58024400 	.word	0x58024400
 80095a4:	03d09000 	.word	0x03d09000
 80095a8:	46000000 	.word	0x46000000
 80095ac:	4c742400 	.word	0x4c742400
 80095b0:	4a742400 	.word	0x4a742400
 80095b4:	4bbebc20 	.word	0x4bbebc20

080095b8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b089      	sub	sp, #36	@ 0x24
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80095c0:	4ba0      	ldr	r3, [pc, #640]	@ (8009844 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095c4:	f003 0303 	and.w	r3, r3, #3
 80095c8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80095ca:	4b9e      	ldr	r3, [pc, #632]	@ (8009844 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ce:	091b      	lsrs	r3, r3, #4
 80095d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80095d4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80095d6:	4b9b      	ldr	r3, [pc, #620]	@ (8009844 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095da:	f003 0301 	and.w	r3, r3, #1
 80095de:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80095e0:	4b98      	ldr	r3, [pc, #608]	@ (8009844 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095e4:	08db      	lsrs	r3, r3, #3
 80095e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80095ea:	693a      	ldr	r2, [r7, #16]
 80095ec:	fb02 f303 	mul.w	r3, r2, r3
 80095f0:	ee07 3a90 	vmov	s15, r3
 80095f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095f8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	f000 8111 	beq.w	8009826 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009604:	69bb      	ldr	r3, [r7, #24]
 8009606:	2b02      	cmp	r3, #2
 8009608:	f000 8083 	beq.w	8009712 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	2b02      	cmp	r3, #2
 8009610:	f200 80a1 	bhi.w	8009756 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009614:	69bb      	ldr	r3, [r7, #24]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d003      	beq.n	8009622 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	2b01      	cmp	r3, #1
 800961e:	d056      	beq.n	80096ce <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009620:	e099      	b.n	8009756 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009622:	4b88      	ldr	r3, [pc, #544]	@ (8009844 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f003 0320 	and.w	r3, r3, #32
 800962a:	2b00      	cmp	r3, #0
 800962c:	d02d      	beq.n	800968a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800962e:	4b85      	ldr	r3, [pc, #532]	@ (8009844 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	08db      	lsrs	r3, r3, #3
 8009634:	f003 0303 	and.w	r3, r3, #3
 8009638:	4a83      	ldr	r2, [pc, #524]	@ (8009848 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800963a:	fa22 f303 	lsr.w	r3, r2, r3
 800963e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	ee07 3a90 	vmov	s15, r3
 8009646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	ee07 3a90 	vmov	s15, r3
 8009650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009654:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009658:	4b7a      	ldr	r3, [pc, #488]	@ (8009844 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800965a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800965c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009660:	ee07 3a90 	vmov	s15, r3
 8009664:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009668:	ed97 6a03 	vldr	s12, [r7, #12]
 800966c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800984c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009670:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009674:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009678:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800967c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009680:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009684:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009688:	e087      	b.n	800979a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	ee07 3a90 	vmov	s15, r3
 8009690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009694:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009850 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009698:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800969c:	4b69      	ldr	r3, [pc, #420]	@ (8009844 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800969e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096a4:	ee07 3a90 	vmov	s15, r3
 80096a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80096b0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800984c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80096b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096cc:	e065      	b.n	800979a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	ee07 3a90 	vmov	s15, r3
 80096d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096d8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009854 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80096dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096e0:	4b58      	ldr	r3, [pc, #352]	@ (8009844 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096e8:	ee07 3a90 	vmov	s15, r3
 80096ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80096f4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800984c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80096f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009700:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009704:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800970c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009710:	e043      	b.n	800979a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	ee07 3a90 	vmov	s15, r3
 8009718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800971c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009858 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009720:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009724:	4b47      	ldr	r3, [pc, #284]	@ (8009844 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800972c:	ee07 3a90 	vmov	s15, r3
 8009730:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009734:	ed97 6a03 	vldr	s12, [r7, #12]
 8009738:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800984c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800973c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009740:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009744:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009748:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800974c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009750:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009754:	e021      	b.n	800979a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	ee07 3a90 	vmov	s15, r3
 800975c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009760:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009850 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009764:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009768:	4b36      	ldr	r3, [pc, #216]	@ (8009844 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800976a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800976c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009770:	ee07 3a90 	vmov	s15, r3
 8009774:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009778:	ed97 6a03 	vldr	s12, [r7, #12]
 800977c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800984c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009780:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009784:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009788:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800978c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009794:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009798:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800979a:	4b2a      	ldr	r3, [pc, #168]	@ (8009844 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800979c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800979e:	0a5b      	lsrs	r3, r3, #9
 80097a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097a4:	ee07 3a90 	vmov	s15, r3
 80097a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80097b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097c0:	ee17 2a90 	vmov	r2, s15
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80097c8:	4b1e      	ldr	r3, [pc, #120]	@ (8009844 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097cc:	0c1b      	lsrs	r3, r3, #16
 80097ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097d2:	ee07 3a90 	vmov	s15, r3
 80097d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80097e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097ee:	ee17 2a90 	vmov	r2, s15
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80097f6:	4b13      	ldr	r3, [pc, #76]	@ (8009844 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097fa:	0e1b      	lsrs	r3, r3, #24
 80097fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009800:	ee07 3a90 	vmov	s15, r3
 8009804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009808:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800980c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009810:	edd7 6a07 	vldr	s13, [r7, #28]
 8009814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800981c:	ee17 2a90 	vmov	r2, s15
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009824:	e008      	b.n	8009838 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2200      	movs	r2, #0
 800982a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	609a      	str	r2, [r3, #8]
}
 8009838:	bf00      	nop
 800983a:	3724      	adds	r7, #36	@ 0x24
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr
 8009844:	58024400 	.word	0x58024400
 8009848:	03d09000 	.word	0x03d09000
 800984c:	46000000 	.word	0x46000000
 8009850:	4c742400 	.word	0x4c742400
 8009854:	4a742400 	.word	0x4a742400
 8009858:	4bbebc20 	.word	0x4bbebc20

0800985c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009866:	2300      	movs	r3, #0
 8009868:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800986a:	4b53      	ldr	r3, [pc, #332]	@ (80099b8 <RCCEx_PLL2_Config+0x15c>)
 800986c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800986e:	f003 0303 	and.w	r3, r3, #3
 8009872:	2b03      	cmp	r3, #3
 8009874:	d101      	bne.n	800987a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009876:	2301      	movs	r3, #1
 8009878:	e099      	b.n	80099ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800987a:	4b4f      	ldr	r3, [pc, #316]	@ (80099b8 <RCCEx_PLL2_Config+0x15c>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a4e      	ldr	r2, [pc, #312]	@ (80099b8 <RCCEx_PLL2_Config+0x15c>)
 8009880:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009884:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009886:	f7f9 f8a7 	bl	80029d8 <HAL_GetTick>
 800988a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800988c:	e008      	b.n	80098a0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800988e:	f7f9 f8a3 	bl	80029d8 <HAL_GetTick>
 8009892:	4602      	mov	r2, r0
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	1ad3      	subs	r3, r2, r3
 8009898:	2b02      	cmp	r3, #2
 800989a:	d901      	bls.n	80098a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800989c:	2303      	movs	r3, #3
 800989e:	e086      	b.n	80099ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80098a0:	4b45      	ldr	r3, [pc, #276]	@ (80099b8 <RCCEx_PLL2_Config+0x15c>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d1f0      	bne.n	800988e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80098ac:	4b42      	ldr	r3, [pc, #264]	@ (80099b8 <RCCEx_PLL2_Config+0x15c>)
 80098ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098b0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	031b      	lsls	r3, r3, #12
 80098ba:	493f      	ldr	r1, [pc, #252]	@ (80099b8 <RCCEx_PLL2_Config+0x15c>)
 80098bc:	4313      	orrs	r3, r2
 80098be:	628b      	str	r3, [r1, #40]	@ 0x28
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	3b01      	subs	r3, #1
 80098c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	689b      	ldr	r3, [r3, #8]
 80098ce:	3b01      	subs	r3, #1
 80098d0:	025b      	lsls	r3, r3, #9
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	431a      	orrs	r2, r3
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	68db      	ldr	r3, [r3, #12]
 80098da:	3b01      	subs	r3, #1
 80098dc:	041b      	lsls	r3, r3, #16
 80098de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80098e2:	431a      	orrs	r2, r3
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	691b      	ldr	r3, [r3, #16]
 80098e8:	3b01      	subs	r3, #1
 80098ea:	061b      	lsls	r3, r3, #24
 80098ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80098f0:	4931      	ldr	r1, [pc, #196]	@ (80099b8 <RCCEx_PLL2_Config+0x15c>)
 80098f2:	4313      	orrs	r3, r2
 80098f4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80098f6:	4b30      	ldr	r3, [pc, #192]	@ (80099b8 <RCCEx_PLL2_Config+0x15c>)
 80098f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	695b      	ldr	r3, [r3, #20]
 8009902:	492d      	ldr	r1, [pc, #180]	@ (80099b8 <RCCEx_PLL2_Config+0x15c>)
 8009904:	4313      	orrs	r3, r2
 8009906:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009908:	4b2b      	ldr	r3, [pc, #172]	@ (80099b8 <RCCEx_PLL2_Config+0x15c>)
 800990a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800990c:	f023 0220 	bic.w	r2, r3, #32
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	699b      	ldr	r3, [r3, #24]
 8009914:	4928      	ldr	r1, [pc, #160]	@ (80099b8 <RCCEx_PLL2_Config+0x15c>)
 8009916:	4313      	orrs	r3, r2
 8009918:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800991a:	4b27      	ldr	r3, [pc, #156]	@ (80099b8 <RCCEx_PLL2_Config+0x15c>)
 800991c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800991e:	4a26      	ldr	r2, [pc, #152]	@ (80099b8 <RCCEx_PLL2_Config+0x15c>)
 8009920:	f023 0310 	bic.w	r3, r3, #16
 8009924:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009926:	4b24      	ldr	r3, [pc, #144]	@ (80099b8 <RCCEx_PLL2_Config+0x15c>)
 8009928:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800992a:	4b24      	ldr	r3, [pc, #144]	@ (80099bc <RCCEx_PLL2_Config+0x160>)
 800992c:	4013      	ands	r3, r2
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	69d2      	ldr	r2, [r2, #28]
 8009932:	00d2      	lsls	r2, r2, #3
 8009934:	4920      	ldr	r1, [pc, #128]	@ (80099b8 <RCCEx_PLL2_Config+0x15c>)
 8009936:	4313      	orrs	r3, r2
 8009938:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800993a:	4b1f      	ldr	r3, [pc, #124]	@ (80099b8 <RCCEx_PLL2_Config+0x15c>)
 800993c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800993e:	4a1e      	ldr	r2, [pc, #120]	@ (80099b8 <RCCEx_PLL2_Config+0x15c>)
 8009940:	f043 0310 	orr.w	r3, r3, #16
 8009944:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d106      	bne.n	800995a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800994c:	4b1a      	ldr	r3, [pc, #104]	@ (80099b8 <RCCEx_PLL2_Config+0x15c>)
 800994e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009950:	4a19      	ldr	r2, [pc, #100]	@ (80099b8 <RCCEx_PLL2_Config+0x15c>)
 8009952:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009956:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009958:	e00f      	b.n	800997a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	2b01      	cmp	r3, #1
 800995e:	d106      	bne.n	800996e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009960:	4b15      	ldr	r3, [pc, #84]	@ (80099b8 <RCCEx_PLL2_Config+0x15c>)
 8009962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009964:	4a14      	ldr	r2, [pc, #80]	@ (80099b8 <RCCEx_PLL2_Config+0x15c>)
 8009966:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800996a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800996c:	e005      	b.n	800997a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800996e:	4b12      	ldr	r3, [pc, #72]	@ (80099b8 <RCCEx_PLL2_Config+0x15c>)
 8009970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009972:	4a11      	ldr	r2, [pc, #68]	@ (80099b8 <RCCEx_PLL2_Config+0x15c>)
 8009974:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009978:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800997a:	4b0f      	ldr	r3, [pc, #60]	@ (80099b8 <RCCEx_PLL2_Config+0x15c>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a0e      	ldr	r2, [pc, #56]	@ (80099b8 <RCCEx_PLL2_Config+0x15c>)
 8009980:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009984:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009986:	f7f9 f827 	bl	80029d8 <HAL_GetTick>
 800998a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800998c:	e008      	b.n	80099a0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800998e:	f7f9 f823 	bl	80029d8 <HAL_GetTick>
 8009992:	4602      	mov	r2, r0
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	1ad3      	subs	r3, r2, r3
 8009998:	2b02      	cmp	r3, #2
 800999a:	d901      	bls.n	80099a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800999c:	2303      	movs	r3, #3
 800999e:	e006      	b.n	80099ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80099a0:	4b05      	ldr	r3, [pc, #20]	@ (80099b8 <RCCEx_PLL2_Config+0x15c>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d0f0      	beq.n	800998e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	58024400 	.word	0x58024400
 80099bc:	ffff0007 	.word	0xffff0007

080099c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80099ca:	2300      	movs	r3, #0
 80099cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80099ce:	4b53      	ldr	r3, [pc, #332]	@ (8009b1c <RCCEx_PLL3_Config+0x15c>)
 80099d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099d2:	f003 0303 	and.w	r3, r3, #3
 80099d6:	2b03      	cmp	r3, #3
 80099d8:	d101      	bne.n	80099de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	e099      	b.n	8009b12 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80099de:	4b4f      	ldr	r3, [pc, #316]	@ (8009b1c <RCCEx_PLL3_Config+0x15c>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a4e      	ldr	r2, [pc, #312]	@ (8009b1c <RCCEx_PLL3_Config+0x15c>)
 80099e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80099e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099ea:	f7f8 fff5 	bl	80029d8 <HAL_GetTick>
 80099ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80099f0:	e008      	b.n	8009a04 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80099f2:	f7f8 fff1 	bl	80029d8 <HAL_GetTick>
 80099f6:	4602      	mov	r2, r0
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	1ad3      	subs	r3, r2, r3
 80099fc:	2b02      	cmp	r3, #2
 80099fe:	d901      	bls.n	8009a04 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009a00:	2303      	movs	r3, #3
 8009a02:	e086      	b.n	8009b12 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009a04:	4b45      	ldr	r3, [pc, #276]	@ (8009b1c <RCCEx_PLL3_Config+0x15c>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d1f0      	bne.n	80099f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009a10:	4b42      	ldr	r3, [pc, #264]	@ (8009b1c <RCCEx_PLL3_Config+0x15c>)
 8009a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a14:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	051b      	lsls	r3, r3, #20
 8009a1e:	493f      	ldr	r1, [pc, #252]	@ (8009b1c <RCCEx_PLL3_Config+0x15c>)
 8009a20:	4313      	orrs	r3, r2
 8009a22:	628b      	str	r3, [r1, #40]	@ 0x28
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	3b01      	subs	r3, #1
 8009a34:	025b      	lsls	r3, r3, #9
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	431a      	orrs	r2, r3
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	68db      	ldr	r3, [r3, #12]
 8009a3e:	3b01      	subs	r3, #1
 8009a40:	041b      	lsls	r3, r3, #16
 8009a42:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009a46:	431a      	orrs	r2, r3
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	691b      	ldr	r3, [r3, #16]
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	061b      	lsls	r3, r3, #24
 8009a50:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009a54:	4931      	ldr	r1, [pc, #196]	@ (8009b1c <RCCEx_PLL3_Config+0x15c>)
 8009a56:	4313      	orrs	r3, r2
 8009a58:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009a5a:	4b30      	ldr	r3, [pc, #192]	@ (8009b1c <RCCEx_PLL3_Config+0x15c>)
 8009a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a5e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	695b      	ldr	r3, [r3, #20]
 8009a66:	492d      	ldr	r1, [pc, #180]	@ (8009b1c <RCCEx_PLL3_Config+0x15c>)
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009a6c:	4b2b      	ldr	r3, [pc, #172]	@ (8009b1c <RCCEx_PLL3_Config+0x15c>)
 8009a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a70:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	699b      	ldr	r3, [r3, #24]
 8009a78:	4928      	ldr	r1, [pc, #160]	@ (8009b1c <RCCEx_PLL3_Config+0x15c>)
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009a7e:	4b27      	ldr	r3, [pc, #156]	@ (8009b1c <RCCEx_PLL3_Config+0x15c>)
 8009a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a82:	4a26      	ldr	r2, [pc, #152]	@ (8009b1c <RCCEx_PLL3_Config+0x15c>)
 8009a84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009a8a:	4b24      	ldr	r3, [pc, #144]	@ (8009b1c <RCCEx_PLL3_Config+0x15c>)
 8009a8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a8e:	4b24      	ldr	r3, [pc, #144]	@ (8009b20 <RCCEx_PLL3_Config+0x160>)
 8009a90:	4013      	ands	r3, r2
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	69d2      	ldr	r2, [r2, #28]
 8009a96:	00d2      	lsls	r2, r2, #3
 8009a98:	4920      	ldr	r1, [pc, #128]	@ (8009b1c <RCCEx_PLL3_Config+0x15c>)
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8009b1c <RCCEx_PLL3_Config+0x15c>)
 8009aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aa2:	4a1e      	ldr	r2, [pc, #120]	@ (8009b1c <RCCEx_PLL3_Config+0x15c>)
 8009aa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009aa8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d106      	bne.n	8009abe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8009b1c <RCCEx_PLL3_Config+0x15c>)
 8009ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab4:	4a19      	ldr	r2, [pc, #100]	@ (8009b1c <RCCEx_PLL3_Config+0x15c>)
 8009ab6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009aba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009abc:	e00f      	b.n	8009ade <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d106      	bne.n	8009ad2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009ac4:	4b15      	ldr	r3, [pc, #84]	@ (8009b1c <RCCEx_PLL3_Config+0x15c>)
 8009ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ac8:	4a14      	ldr	r2, [pc, #80]	@ (8009b1c <RCCEx_PLL3_Config+0x15c>)
 8009aca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009ace:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009ad0:	e005      	b.n	8009ade <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009ad2:	4b12      	ldr	r3, [pc, #72]	@ (8009b1c <RCCEx_PLL3_Config+0x15c>)
 8009ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ad6:	4a11      	ldr	r2, [pc, #68]	@ (8009b1c <RCCEx_PLL3_Config+0x15c>)
 8009ad8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009adc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009ade:	4b0f      	ldr	r3, [pc, #60]	@ (8009b1c <RCCEx_PLL3_Config+0x15c>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a0e      	ldr	r2, [pc, #56]	@ (8009b1c <RCCEx_PLL3_Config+0x15c>)
 8009ae4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009ae8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009aea:	f7f8 ff75 	bl	80029d8 <HAL_GetTick>
 8009aee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009af0:	e008      	b.n	8009b04 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009af2:	f7f8 ff71 	bl	80029d8 <HAL_GetTick>
 8009af6:	4602      	mov	r2, r0
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	1ad3      	subs	r3, r2, r3
 8009afc:	2b02      	cmp	r3, #2
 8009afe:	d901      	bls.n	8009b04 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009b00:	2303      	movs	r3, #3
 8009b02:	e006      	b.n	8009b12 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009b04:	4b05      	ldr	r3, [pc, #20]	@ (8009b1c <RCCEx_PLL3_Config+0x15c>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d0f0      	beq.n	8009af2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3710      	adds	r7, #16
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	58024400 	.word	0x58024400
 8009b20:	ffff0007 	.word	0xffff0007

08009b24 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d071      	beq.n	8009c1a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d106      	bne.n	8009b50 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2200      	movs	r2, #0
 8009b46:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f007 fe10 	bl	8011770 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2202      	movs	r2, #2
 8009b54:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	68db      	ldr	r3, [r3, #12]
 8009b5e:	f003 0310 	and.w	r3, r3, #16
 8009b62:	2b10      	cmp	r3, #16
 8009b64:	d050      	beq.n	8009c08 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	22ca      	movs	r2, #202	@ 0xca
 8009b6c:	625a      	str	r2, [r3, #36]	@ 0x24
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	2253      	movs	r2, #83	@ 0x53
 8009b74:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 f9a0 	bl	8009ebc <RTC_EnterInitMode>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8009b80:	7bfb      	ldrb	r3, [r7, #15]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d124      	bne.n	8009bd0 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	6899      	ldr	r1, [r3, #8]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	4b24      	ldr	r3, [pc, #144]	@ (8009c24 <HAL_RTC_Init+0x100>)
 8009b92:	400b      	ands	r3, r1
 8009b94:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	6899      	ldr	r1, [r3, #8]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	685a      	ldr	r2, [r3, #4]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	691b      	ldr	r3, [r3, #16]
 8009ba4:	431a      	orrs	r2, r3
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	699b      	ldr	r3, [r3, #24]
 8009baa:	431a      	orrs	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	430a      	orrs	r2, r1
 8009bb2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	0419      	lsls	r1, r3, #16
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	68da      	ldr	r2, [r3, #12]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	430a      	orrs	r2, r1
 8009bc4:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 f9ac 	bl	8009f24 <RTC_ExitInitMode>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8009bd0:	7bfb      	ldrb	r3, [r7, #15]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d113      	bne.n	8009bfe <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f022 0203 	bic.w	r2, r2, #3
 8009be4:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	69da      	ldr	r2, [r3, #28]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	695b      	ldr	r3, [r3, #20]
 8009bf4:	431a      	orrs	r2, r3
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	430a      	orrs	r2, r1
 8009bfc:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	22ff      	movs	r2, #255	@ 0xff
 8009c04:	625a      	str	r2, [r3, #36]	@ 0x24
 8009c06:	e001      	b.n	8009c0c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009c0c:	7bfb      	ldrb	r3, [r7, #15]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d103      	bne.n	8009c1a <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2201      	movs	r2, #1
 8009c16:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 8009c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3710      	adds	r7, #16
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	ff8fffbf 	.word	0xff8fffbf

08009c28 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009c28:	b590      	push	{r4, r7, lr}
 8009c2a:	b087      	sub	sp, #28
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d101      	bne.n	8009c42 <HAL_RTC_SetTime+0x1a>
 8009c3e:	2302      	movs	r3, #2
 8009c40:	e089      	b.n	8009d56 <HAL_RTC_SetTime+0x12e>
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2201      	movs	r2, #1
 8009c46:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2202      	movs	r2, #2
 8009c4e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	22ca      	movs	r2, #202	@ 0xca
 8009c58:	625a      	str	r2, [r3, #36]	@ 0x24
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	2253      	movs	r2, #83	@ 0x53
 8009c60:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	f000 f92a 	bl	8009ebc <RTC_EnterInitMode>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009c6c:	7cfb      	ldrb	r3, [r7, #19]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d161      	bne.n	8009d36 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d126      	bne.n	8009cc6 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d102      	bne.n	8009c8c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	4618      	mov	r0, r3
 8009c92:	f000 f985 	bl	8009fa0 <RTC_ByteToBcd2>
 8009c96:	4603      	mov	r3, r0
 8009c98:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	785b      	ldrb	r3, [r3, #1]
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f000 f97e 	bl	8009fa0 <RTC_ByteToBcd2>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009ca8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	789b      	ldrb	r3, [r3, #2]
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f000 f976 	bl	8009fa0 <RTC_ByteToBcd2>
 8009cb4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009cb6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	78db      	ldrb	r3, [r3, #3]
 8009cbe:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	617b      	str	r3, [r7, #20]
 8009cc4:	e018      	b.n	8009cf8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d102      	bne.n	8009cda <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	785b      	ldrb	r3, [r3, #1]
 8009ce4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009ce6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8009ce8:	68ba      	ldr	r2, [r7, #8]
 8009cea:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009cec:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	78db      	ldrb	r3, [r3, #3]
 8009cf2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	6979      	ldr	r1, [r7, #20]
 8009cfe:	4b18      	ldr	r3, [pc, #96]	@ (8009d60 <HAL_RTC_SetTime+0x138>)
 8009d00:	400b      	ands	r3, r1
 8009d02:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	689a      	ldr	r2, [r3, #8]
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009d12:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	6899      	ldr	r1, [r3, #8]
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	68da      	ldr	r2, [r3, #12]
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	691b      	ldr	r3, [r3, #16]
 8009d22:	431a      	orrs	r2, r3
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	430a      	orrs	r2, r1
 8009d2a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009d2c:	68f8      	ldr	r0, [r7, #12]
 8009d2e:	f000 f8f9 	bl	8009f24 <RTC_ExitInitMode>
 8009d32:	4603      	mov	r3, r0
 8009d34:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	22ff      	movs	r2, #255	@ 0xff
 8009d3c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8009d3e:	7cfb      	ldrb	r3, [r7, #19]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d103      	bne.n	8009d4c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2201      	movs	r2, #1
 8009d48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009d54:	7cfb      	ldrb	r3, [r7, #19]
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	371c      	adds	r7, #28
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd90      	pop	{r4, r7, pc}
 8009d5e:	bf00      	nop
 8009d60:	007f7f7f 	.word	0x007f7f7f

08009d64 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009d64:	b590      	push	{r4, r7, lr}
 8009d66:	b087      	sub	sp, #28
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d101      	bne.n	8009d7e <HAL_RTC_SetDate+0x1a>
 8009d7a:	2302      	movs	r3, #2
 8009d7c:	e073      	b.n	8009e66 <HAL_RTC_SetDate+0x102>
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2201      	movs	r2, #1
 8009d82:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2202      	movs	r2, #2
 8009d8a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d10e      	bne.n	8009db2 <HAL_RTC_SetDate+0x4e>
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	785b      	ldrb	r3, [r3, #1]
 8009d98:	f003 0310 	and.w	r3, r3, #16
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d008      	beq.n	8009db2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	785b      	ldrb	r3, [r3, #1]
 8009da4:	f023 0310 	bic.w	r3, r3, #16
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	330a      	adds	r3, #10
 8009dac:	b2da      	uxtb	r2, r3
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d11c      	bne.n	8009df2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	78db      	ldrb	r3, [r3, #3]
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f000 f8ef 	bl	8009fa0 <RTC_ByteToBcd2>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	785b      	ldrb	r3, [r3, #1]
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f000 f8e8 	bl	8009fa0 <RTC_ByteToBcd2>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009dd4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	789b      	ldrb	r3, [r3, #2]
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f000 f8e0 	bl	8009fa0 <RTC_ByteToBcd2>
 8009de0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009de2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009dec:	4313      	orrs	r3, r2
 8009dee:	617b      	str	r3, [r7, #20]
 8009df0:	e00e      	b.n	8009e10 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	78db      	ldrb	r3, [r3, #3]
 8009df6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	785b      	ldrb	r3, [r3, #1]
 8009dfc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009dfe:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8009e00:	68ba      	ldr	r2, [r7, #8]
 8009e02:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009e04:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	22ca      	movs	r2, #202	@ 0xca
 8009e16:	625a      	str	r2, [r3, #36]	@ 0x24
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	2253      	movs	r2, #83	@ 0x53
 8009e1e:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009e20:	68f8      	ldr	r0, [r7, #12]
 8009e22:	f000 f84b 	bl	8009ebc <RTC_EnterInitMode>
 8009e26:	4603      	mov	r3, r0
 8009e28:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009e2a:	7cfb      	ldrb	r3, [r7, #19]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d10a      	bne.n	8009e46 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	6979      	ldr	r1, [r7, #20]
 8009e36:	4b0e      	ldr	r3, [pc, #56]	@ (8009e70 <HAL_RTC_SetDate+0x10c>)
 8009e38:	400b      	ands	r3, r1
 8009e3a:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009e3c:	68f8      	ldr	r0, [r7, #12]
 8009e3e:	f000 f871 	bl	8009f24 <RTC_ExitInitMode>
 8009e42:	4603      	mov	r3, r0
 8009e44:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	22ff      	movs	r2, #255	@ 0xff
 8009e4c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8009e4e:	7cfb      	ldrb	r3, [r7, #19]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d103      	bne.n	8009e5c <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2201      	movs	r2, #1
 8009e58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009e64:	7cfb      	ldrb	r3, [r7, #19]


}
 8009e66:	4618      	mov	r0, r3
 8009e68:	371c      	adds	r7, #28
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd90      	pop	{r4, r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	00ffff3f 	.word	0x00ffff3f

08009e74 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a0d      	ldr	r2, [pc, #52]	@ (8009eb8 <HAL_RTC_WaitForSynchro+0x44>)
 8009e82:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8009e84:	f7f8 fda8 	bl	80029d8 <HAL_GetTick>
 8009e88:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009e8a:	e009      	b.n	8009ea0 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009e8c:	f7f8 fda4 	bl	80029d8 <HAL_GetTick>
 8009e90:	4602      	mov	r2, r0
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	1ad3      	subs	r3, r2, r3
 8009e96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009e9a:	d901      	bls.n	8009ea0 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8009e9c:	2303      	movs	r3, #3
 8009e9e:	e007      	b.n	8009eb0 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	f003 0320 	and.w	r3, r3, #32
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d0ee      	beq.n	8009e8c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8009eae:	2300      	movs	r3, #0
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3710      	adds	r7, #16
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	0003ff5f 	.word	0x0003ff5f

08009ebc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d120      	bne.n	8009f18 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f04f 32ff 	mov.w	r2, #4294967295
 8009ede:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009ee0:	f7f8 fd7a 	bl	80029d8 <HAL_GetTick>
 8009ee4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009ee6:	e00d      	b.n	8009f04 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009ee8:	f7f8 fd76 	bl	80029d8 <HAL_GetTick>
 8009eec:	4602      	mov	r2, r0
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	1ad3      	subs	r3, r2, r3
 8009ef2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009ef6:	d905      	bls.n	8009f04 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009ef8:	2303      	movs	r3, #3
 8009efa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2203      	movs	r2, #3
 8009f00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	68db      	ldr	r3, [r3, #12]
 8009f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d102      	bne.n	8009f18 <RTC_EnterInitMode+0x5c>
 8009f12:	7bfb      	ldrb	r3, [r7, #15]
 8009f14:	2b03      	cmp	r3, #3
 8009f16:	d1e7      	bne.n	8009ee8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8009f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3710      	adds	r7, #16
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
	...

08009f24 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8009f30:	4b1a      	ldr	r3, [pc, #104]	@ (8009f9c <RTC_ExitInitMode+0x78>)
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	4a19      	ldr	r2, [pc, #100]	@ (8009f9c <RTC_ExitInitMode+0x78>)
 8009f36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f3a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009f3c:	4b17      	ldr	r3, [pc, #92]	@ (8009f9c <RTC_ExitInitMode+0x78>)
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	f003 0320 	and.w	r3, r3, #32
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d10c      	bne.n	8009f62 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f7ff ff93 	bl	8009e74 <HAL_RTC_WaitForSynchro>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d01e      	beq.n	8009f92 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2203      	movs	r2, #3
 8009f58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8009f5c:	2303      	movs	r3, #3
 8009f5e:	73fb      	strb	r3, [r7, #15]
 8009f60:	e017      	b.n	8009f92 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009f62:	4b0e      	ldr	r3, [pc, #56]	@ (8009f9c <RTC_ExitInitMode+0x78>)
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	4a0d      	ldr	r2, [pc, #52]	@ (8009f9c <RTC_ExitInitMode+0x78>)
 8009f68:	f023 0320 	bic.w	r3, r3, #32
 8009f6c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f7ff ff80 	bl	8009e74 <HAL_RTC_WaitForSynchro>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d005      	beq.n	8009f86 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2203      	movs	r2, #3
 8009f7e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8009f82:	2303      	movs	r3, #3
 8009f84:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009f86:	4b05      	ldr	r3, [pc, #20]	@ (8009f9c <RTC_ExitInitMode+0x78>)
 8009f88:	689b      	ldr	r3, [r3, #8]
 8009f8a:	4a04      	ldr	r2, [pc, #16]	@ (8009f9c <RTC_ExitInitMode+0x78>)
 8009f8c:	f043 0320 	orr.w	r3, r3, #32
 8009f90:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3710      	adds	r7, #16
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}
 8009f9c:	58004000 	.word	0x58004000

08009fa0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b085      	sub	sp, #20
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009faa:	2300      	movs	r3, #0
 8009fac:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8009fae:	79fb      	ldrb	r3, [r7, #7]
 8009fb0:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8009fb2:	e005      	b.n	8009fc0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8009fba:	7afb      	ldrb	r3, [r7, #11]
 8009fbc:	3b0a      	subs	r3, #10
 8009fbe:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8009fc0:	7afb      	ldrb	r3, [r7, #11]
 8009fc2:	2b09      	cmp	r3, #9
 8009fc4:	d8f6      	bhi.n	8009fb4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	011b      	lsls	r3, r3, #4
 8009fcc:	b2da      	uxtb	r2, r3
 8009fce:	7afb      	ldrb	r3, [r7, #11]
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	b2db      	uxtb	r3, r3
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3714      	adds	r7, #20
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(const RTC_HandleTypeDef * hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b087      	sub	sp, #28
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	607a      	str	r2, [r7, #4]

  /* Point on address of first backup register */
#if defined(TAMP)
  tmp = (uint32_t) &(((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#else
  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	3350      	adds	r3, #80	@ 0x50
 8009ff2:	617b      	str	r3, [r7, #20]
#endif /* TAMP */

  tmp += (BackupRegister * 4U);
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	009b      	lsls	r3, r3, #2
 8009ff8:	697a      	ldr	r2, [r7, #20]
 8009ffa:	4413      	add	r3, r2
 8009ffc:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	601a      	str	r2, [r3, #0]
}
 800a004:	bf00      	nop
 800a006:	371c      	adds	r7, #28
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(const RTC_HandleTypeDef * hrtc, uint32_t BackupRegister)
{
 800a010:	b480      	push	{r7}
 800a012:	b085      	sub	sp, #20
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]

  /* Point on address of first backup register */
#if defined(TAMP)
  tmp = (uint32_t) &(((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#else
  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	3350      	adds	r3, #80	@ 0x50
 800a020:	60fb      	str	r3, [r7, #12]
#endif /* TAMP */

  tmp += (BackupRegister * 4U);
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	4413      	add	r3, r2
 800a02a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
}
 800a030:	4618      	mov	r0, r3
 800a032:	3714      	adds	r7, #20
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b08a      	sub	sp, #40	@ 0x28
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d101      	bne.n	800a04e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e075      	b.n	800a13a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a054:	b2db      	uxtb	r3, r3
 800a056:	2b00      	cmp	r3, #0
 800a058:	d105      	bne.n	800a066 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2200      	movs	r2, #0
 800a05e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f007 fcbf 	bl	80119e4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2204      	movs	r2, #4
 800a06a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 f868 	bl	800a144 <HAL_SD_InitCard>
 800a074:	4603      	mov	r3, r0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d001      	beq.n	800a07e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a07a:	2301      	movs	r3, #1
 800a07c:	e05d      	b.n	800a13a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800a07e:	f107 0308 	add.w	r3, r7, #8
 800a082:	4619      	mov	r1, r3
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 fdb5 	bl	800abf4 <HAL_SD_GetCardStatus>
 800a08a:	4603      	mov	r3, r0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d001      	beq.n	800a094 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800a090:	2301      	movs	r3, #1
 800a092:	e052      	b.n	800a13a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800a094:	7e3b      	ldrb	r3, [r7, #24]
 800a096:	b2db      	uxtb	r3, r3
 800a098:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a09a:	7e7b      	ldrb	r3, [r7, #25]
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d10a      	bne.n	800a0be <HAL_SD_Init+0x82>
 800a0a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d102      	bne.n	800a0b4 <HAL_SD_Init+0x78>
 800a0ae:	6a3b      	ldr	r3, [r7, #32]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d004      	beq.n	800a0be <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a0ba:	659a      	str	r2, [r3, #88]	@ 0x58
 800a0bc:	e00b      	b.n	800a0d6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d104      	bne.n	800a0d0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a0cc:	659a      	str	r2, [r3, #88]	@ 0x58
 800a0ce:	e002      	b.n	800a0d6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	68db      	ldr	r3, [r3, #12]
 800a0da:	4619      	mov	r1, r3
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 fe73 	bl	800adc8 <HAL_SD_ConfigWideBusOperation>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d001      	beq.n	800a0ec <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e026      	b.n	800a13a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800a0ec:	f7f8 fc74 	bl	80029d8 <HAL_GetTick>
 800a0f0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a0f2:	e011      	b.n	800a118 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800a0f4:	f7f8 fc70 	bl	80029d8 <HAL_GetTick>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	69fb      	ldr	r3, [r7, #28]
 800a0fc:	1ad3      	subs	r3, r2, r3
 800a0fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a102:	d109      	bne.n	800a118 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a10a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2201      	movs	r2, #1
 800a110:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800a114:	2303      	movs	r3, #3
 800a116:	e010      	b.n	800a13a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 ff67 	bl	800afec <HAL_SD_GetCardState>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b04      	cmp	r3, #4
 800a122:	d1e7      	bne.n	800a0f4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2200      	movs	r2, #0
 800a12e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3728      	adds	r7, #40	@ 0x28
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
	...

0800a144 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a144:	b590      	push	{r4, r7, lr}
 800a146:	b08d      	sub	sp, #52	@ 0x34
 800a148:	af02      	add	r7, sp, #8
 800a14a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a14c:	2300      	movs	r3, #0
 800a14e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a150:	2300      	movs	r3, #0
 800a152:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a154:	2300      	movs	r3, #0
 800a156:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a158:	2300      	movs	r3, #0
 800a15a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a15c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800a160:	f04f 0100 	mov.w	r1, #0
 800a164:	f7fe f9ea 	bl	800853c <HAL_RCCEx_GetPeriphCLKFreq>
 800a168:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800a16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d109      	bne.n	800a184 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2201      	movs	r2, #1
 800a174:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800a17e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a180:	2301      	movs	r3, #1
 800a182:	e070      	b.n	800a266 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800a184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a186:	0a1b      	lsrs	r3, r3, #8
 800a188:	4a39      	ldr	r2, [pc, #228]	@ (800a270 <HAL_SD_InitCard+0x12c>)
 800a18a:	fba2 2303 	umull	r2, r3, r2, r3
 800a18e:	091b      	lsrs	r3, r3, #4
 800a190:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681c      	ldr	r4, [r3, #0]
 800a196:	466a      	mov	r2, sp
 800a198:	f107 0318 	add.w	r3, r7, #24
 800a19c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a1a0:	e882 0003 	stmia.w	r2, {r0, r1}
 800a1a4:	f107 030c 	add.w	r3, r7, #12
 800a1a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	f003 fbf2 	bl	800d994 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f003 fc35 	bl	800da24 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800a1ba:	69fb      	ldr	r3, [r7, #28]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d005      	beq.n	800a1cc <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	005b      	lsls	r3, r3, #1
 800a1c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1ca:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800a1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d007      	beq.n	800a1e2 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800a1d2:	4a28      	ldr	r2, [pc, #160]	@ (800a274 <HAL_SD_InitCard+0x130>)
 800a1d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1da:	3301      	adds	r3, #1
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7f8 fc07 	bl	80029f0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 fff0 	bl	800b1c8 <SD_PowerON>
 800a1e8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a1ea:	6a3b      	ldr	r3, [r7, #32]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d00b      	beq.n	800a208 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a1fc:	6a3b      	ldr	r3, [r7, #32]
 800a1fe:	431a      	orrs	r2, r3
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a204:	2301      	movs	r3, #1
 800a206:	e02e      	b.n	800a266 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 ff0f 	bl	800b02c <SD_InitCard>
 800a20e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a210:	6a3b      	ldr	r3, [r7, #32]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d00b      	beq.n	800a22e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2201      	movs	r2, #1
 800a21a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a222:	6a3b      	ldr	r3, [r7, #32]
 800a224:	431a      	orrs	r2, r3
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a22a:	2301      	movs	r3, #1
 800a22c:	e01b      	b.n	800a266 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a236:	4618      	mov	r0, r3
 800a238:	f003 fc8a 	bl	800db50 <SDMMC_CmdBlockLength>
 800a23c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a23e:	6a3b      	ldr	r3, [r7, #32]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d00f      	beq.n	800a264 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a0b      	ldr	r2, [pc, #44]	@ (800a278 <HAL_SD_InitCard+0x134>)
 800a24a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a250:	6a3b      	ldr	r3, [r7, #32]
 800a252:	431a      	orrs	r2, r3
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2201      	movs	r2, #1
 800a25c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800a260:	2301      	movs	r3, #1
 800a262:	e000      	b.n	800a266 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800a264:	2300      	movs	r3, #0
}
 800a266:	4618      	mov	r0, r3
 800a268:	372c      	adds	r7, #44	@ 0x2c
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd90      	pop	{r4, r7, pc}
 800a26e:	bf00      	nop
 800a270:	014f8b59 	.word	0x014f8b59
 800a274:	00012110 	.word	0x00012110
 800a278:	1fe00fff 	.word	0x1fe00fff

0800a27c <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b092      	sub	sp, #72	@ 0x48
 800a280:	af00      	add	r7, sp, #0
 800a282:	60f8      	str	r0, [r7, #12]
 800a284:	60b9      	str	r1, [r7, #8]
 800a286:	607a      	str	r2, [r7, #4]
 800a288:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a28a:	f7f8 fba5 	bl	80029d8 <HAL_GetTick>
 800a28e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d107      	bne.n	800a2ae <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2a2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	e167      	b.n	800a57e <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	f040 815a 	bne.w	800a570 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a2c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	441a      	add	r2, r3
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d907      	bls.n	800a2e0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2d4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	e14e      	b.n	800a57e <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2203      	movs	r2, #3
 800a2e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d002      	beq.n	800a2fe <HAL_SD_ReadBlocks+0x82>
    {
      add *= BLOCKSIZE;
 800a2f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2fa:	025b      	lsls	r3, r3, #9
 800a2fc:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a2fe:	f04f 33ff 	mov.w	r3, #4294967295
 800a302:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	025b      	lsls	r3, r3, #9
 800a308:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a30a:	2390      	movs	r3, #144	@ 0x90
 800a30c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a30e:	2302      	movs	r3, #2
 800a310:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a312:	2300      	movs	r3, #0
 800a314:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a316:	2300      	movs	r3, #0
 800a318:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f107 0214 	add.w	r2, r7, #20
 800a322:	4611      	mov	r1, r2
 800a324:	4618      	mov	r0, r3
 800a326:	f003 fbe7 	bl	800daf8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	68da      	ldr	r2, [r3, #12]
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a338:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d90a      	bls.n	800a356 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2202      	movs	r2, #2
 800a344:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a34c:	4618      	mov	r0, r3
 800a34e:	f003 fc45 	bl	800dbdc <SDMMC_CmdReadMultiBlock>
 800a352:	6478      	str	r0, [r7, #68]	@ 0x44
 800a354:	e009      	b.n	800a36a <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2201      	movs	r2, #1
 800a35a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a362:	4618      	mov	r0, r3
 800a364:	f003 fc17 	bl	800db96 <SDMMC_CmdReadSingleBlock>
 800a368:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a36a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d012      	beq.n	800a396 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4a84      	ldr	r2, [pc, #528]	@ (800a588 <HAL_SD_ReadBlocks+0x30c>)
 800a376:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a37c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a37e:	431a      	orrs	r2, r3
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2201      	movs	r2, #1
 800a388:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2200      	movs	r2, #0
 800a390:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a392:	2301      	movs	r3, #1
 800a394:	e0f3      	b.n	800a57e <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a39a:	e058      	b.n	800a44e <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= SDMMC_FIFO_SIZE))
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d033      	beq.n	800a412 <HAL_SD_ReadBlocks+0x196>
 800a3aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3ac:	2b1f      	cmp	r3, #31
 800a3ae:	d930      	bls.n	800a412 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3b4:	e027      	b.n	800a406 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f003 fb14 	bl	800d9e8 <SDMMC_ReadFIFO>
 800a3c0:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800a3c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3c4:	b2da      	uxtb	r2, r3
 800a3c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3c8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a3ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800a3d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3d2:	0a1b      	lsrs	r3, r3, #8
 800a3d4:	b2da      	uxtb	r2, r3
 800a3d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3d8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a3da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3dc:	3301      	adds	r3, #1
 800a3de:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800a3e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3e2:	0c1b      	lsrs	r3, r3, #16
 800a3e4:	b2da      	uxtb	r2, r3
 800a3e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3e8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a3ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800a3f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3f2:	0e1b      	lsrs	r3, r3, #24
 800a3f4:	b2da      	uxtb	r2, r3
 800a3f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3f8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a3fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800a400:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a402:	3301      	adds	r3, #1
 800a404:	643b      	str	r3, [r7, #64]	@ 0x40
 800a406:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a408:	2b07      	cmp	r3, #7
 800a40a:	d9d4      	bls.n	800a3b6 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 800a40c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a40e:	3b20      	subs	r3, #32
 800a410:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800a412:	f7f8 fae1 	bl	80029d8 <HAL_GetTick>
 800a416:	4602      	mov	r2, r0
 800a418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a41a:	1ad3      	subs	r3, r2, r3
 800a41c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a41e:	429a      	cmp	r2, r3
 800a420:	d902      	bls.n	800a428 <HAL_SD_ReadBlocks+0x1ac>
 800a422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a424:	2b00      	cmp	r3, #0
 800a426:	d112      	bne.n	800a44e <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a56      	ldr	r2, [pc, #344]	@ (800a588 <HAL_SD_ReadBlocks+0x30c>)
 800a42e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a434:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2201      	movs	r2, #1
 800a440:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2200      	movs	r2, #0
 800a448:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800a44a:	2303      	movs	r3, #3
 800a44c:	e097      	b.n	800a57e <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a454:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d09f      	beq.n	800a39c <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	68da      	ldr	r2, [r3, #12]
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a46a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a476:	2b00      	cmp	r3, #0
 800a478:	d022      	beq.n	800a4c0 <HAL_SD_ReadBlocks+0x244>
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d91f      	bls.n	800a4c0 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a484:	2b03      	cmp	r3, #3
 800a486:	d01b      	beq.n	800a4c0 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4618      	mov	r0, r3
 800a48e:	f003 fc0f 	bl	800dcb0 <SDMMC_CmdStopTransfer>
 800a492:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800a494:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a496:	2b00      	cmp	r3, #0
 800a498:	d012      	beq.n	800a4c0 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4a3a      	ldr	r2, [pc, #232]	@ (800a588 <HAL_SD_ReadBlocks+0x30c>)
 800a4a0:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a4a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4a8:	431a      	orrs	r2, r3
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	e05e      	b.n	800a57e <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4c6:	f003 0308 	and.w	r3, r3, #8
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d012      	beq.n	800a4f4 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a2d      	ldr	r2, [pc, #180]	@ (800a588 <HAL_SD_ReadBlocks+0x30c>)
 800a4d4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4da:	f043 0208 	orr.w	r2, r3, #8
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	e044      	b.n	800a57e <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4fa:	f003 0302 	and.w	r3, r3, #2
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d012      	beq.n	800a528 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a20      	ldr	r2, [pc, #128]	@ (800a588 <HAL_SD_ReadBlocks+0x30c>)
 800a508:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a50e:	f043 0202 	orr.w	r2, r3, #2
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2201      	movs	r2, #1
 800a51a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2200      	movs	r2, #0
 800a522:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a524:	2301      	movs	r3, #1
 800a526:	e02a      	b.n	800a57e <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a52e:	f003 0320 	and.w	r3, r3, #32
 800a532:	2b00      	cmp	r3, #0
 800a534:	d012      	beq.n	800a55c <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a13      	ldr	r2, [pc, #76]	@ (800a588 <HAL_SD_ReadBlocks+0x30c>)
 800a53c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a542:	f043 0220 	orr.w	r2, r3, #32
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2201      	movs	r2, #1
 800a54e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2200      	movs	r2, #0
 800a556:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a558:	2301      	movs	r3, #1
 800a55a:	e010      	b.n	800a57e <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a0a      	ldr	r2, [pc, #40]	@ (800a58c <HAL_SD_ReadBlocks+0x310>)
 800a562:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2201      	movs	r2, #1
 800a568:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800a56c:	2300      	movs	r3, #0
 800a56e:	e006      	b.n	800a57e <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a574:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a57c:	2301      	movs	r3, #1
  }
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3748      	adds	r7, #72	@ 0x48
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	1fe00fff 	.word	0x1fe00fff
 800a58c:	18000f3a 	.word	0x18000f3a

0800a590 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b092      	sub	sp, #72	@ 0x48
 800a594:	af00      	add	r7, sp, #0
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	607a      	str	r2, [r7, #4]
 800a59c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a59e:	f7f8 fa1b 	bl	80029d8 <HAL_GetTick>
 800a5a2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d107      	bne.n	800a5c2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5b6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e16b      	b.n	800a89a <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	f040 815e 	bne.w	800a88c <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a5d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	441a      	add	r2, r3
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d907      	bls.n	800a5f4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5e8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e152      	b.n	800a89a <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2203      	movs	r2, #3
 800a5f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	2200      	movs	r2, #0
 800a602:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d002      	beq.n	800a612 <HAL_SD_WriteBlocks+0x82>
    {
      add *= BLOCKSIZE;
 800a60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a60e:	025b      	lsls	r3, r3, #9
 800a610:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a612:	f04f 33ff 	mov.w	r3, #4294967295
 800a616:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	025b      	lsls	r3, r3, #9
 800a61c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a61e:	2390      	movs	r3, #144	@ 0x90
 800a620:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a622:	2300      	movs	r3, #0
 800a624:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a626:	2300      	movs	r3, #0
 800a628:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a62a:	2300      	movs	r3, #0
 800a62c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f107 0218 	add.w	r2, r7, #24
 800a636:	4611      	mov	r1, r2
 800a638:	4618      	mov	r0, r3
 800a63a:	f003 fa5d 	bl	800daf8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	68da      	ldr	r2, [r3, #12]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a64c:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	2b01      	cmp	r3, #1
 800a652:	d90a      	bls.n	800a66a <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2220      	movs	r2, #32
 800a658:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a660:	4618      	mov	r0, r3
 800a662:	f003 fb01 	bl	800dc68 <SDMMC_CmdWriteMultiBlock>
 800a666:	6478      	str	r0, [r7, #68]	@ 0x44
 800a668:	e009      	b.n	800a67e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2210      	movs	r2, #16
 800a66e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a676:	4618      	mov	r0, r3
 800a678:	f003 fad3 	bl	800dc22 <SDMMC_CmdWriteSingleBlock>
 800a67c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a67e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a680:	2b00      	cmp	r3, #0
 800a682:	d012      	beq.n	800a6aa <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a86      	ldr	r2, [pc, #536]	@ (800a8a4 <HAL_SD_WriteBlocks+0x314>)
 800a68a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a692:	431a      	orrs	r2, r3
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2201      	movs	r2, #1
 800a69c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e0f7      	b.n	800a89a <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800a6aa:	69fb      	ldr	r3, [r7, #28]
 800a6ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800a6ae:	e05c      	b.n	800a76a <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= SDMMC_FIFO_SIZE))
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d037      	beq.n	800a72e <HAL_SD_WriteBlocks+0x19e>
 800a6be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6c0:	2b1f      	cmp	r3, #31
 800a6c2:	d934      	bls.n	800a72e <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	643b      	str	r3, [r7, #64]	@ 0x40
 800a6c8:	e02b      	b.n	800a722 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800a6ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a6d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800a6d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	021a      	lsls	r2, r3, #8
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a6e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6e4:	3301      	adds	r3, #1
 800a6e6:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800a6e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6ea:	781b      	ldrb	r3, [r3, #0]
 800a6ec:	041a      	lsls	r2, r3, #16
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a6f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800a6fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	061a      	lsls	r2, r3, #24
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	4313      	orrs	r3, r2
 800a704:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a708:	3301      	adds	r3, #1
 800a70a:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f107 0214 	add.w	r2, r7, #20
 800a714:	4611      	mov	r1, r2
 800a716:	4618      	mov	r0, r3
 800a718:	f003 f973 	bl	800da02 <SDMMC_WriteFIFO>
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800a71c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a71e:	3301      	adds	r3, #1
 800a720:	643b      	str	r3, [r7, #64]	@ 0x40
 800a722:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a724:	2b07      	cmp	r3, #7
 800a726:	d9d0      	bls.n	800a6ca <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 800a728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a72a:	3b20      	subs	r3, #32
 800a72c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800a72e:	f7f8 f953 	bl	80029d8 <HAL_GetTick>
 800a732:	4602      	mov	r2, r0
 800a734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a736:	1ad3      	subs	r3, r2, r3
 800a738:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d902      	bls.n	800a744 <HAL_SD_WriteBlocks+0x1b4>
 800a73e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a740:	2b00      	cmp	r3, #0
 800a742:	d112      	bne.n	800a76a <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a56      	ldr	r2, [pc, #344]	@ (800a8a4 <HAL_SD_WriteBlocks+0x314>)
 800a74a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a750:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a752:	431a      	orrs	r2, r3
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2200      	movs	r2, #0
 800a764:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800a766:	2303      	movs	r3, #3
 800a768:	e097      	b.n	800a89a <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a770:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800a774:	2b00      	cmp	r3, #0
 800a776:	d09b      	beq.n	800a6b0 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	68da      	ldr	r2, [r3, #12]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a786:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a78e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a792:	2b00      	cmp	r3, #0
 800a794:	d022      	beq.n	800a7dc <HAL_SD_WriteBlocks+0x24c>
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d91f      	bls.n	800a7dc <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7a0:	2b03      	cmp	r3, #3
 800a7a2:	d01b      	beq.n	800a7dc <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f003 fa81 	bl	800dcb0 <SDMMC_CmdStopTransfer>
 800a7ae:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800a7b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d012      	beq.n	800a7dc <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a3a      	ldr	r2, [pc, #232]	@ (800a8a4 <HAL_SD_WriteBlocks+0x314>)
 800a7bc:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a7c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7c4:	431a      	orrs	r2, r3
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	e05e      	b.n	800a89a <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7e2:	f003 0308 	and.w	r3, r3, #8
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d012      	beq.n	800a810 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4a2d      	ldr	r2, [pc, #180]	@ (800a8a4 <HAL_SD_WriteBlocks+0x314>)
 800a7f0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7f6:	f043 0208 	orr.w	r2, r3, #8
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2201      	movs	r2, #1
 800a802:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2200      	movs	r2, #0
 800a80a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a80c:	2301      	movs	r3, #1
 800a80e:	e044      	b.n	800a89a <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a816:	f003 0302 	and.w	r3, r3, #2
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d012      	beq.n	800a844 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4a20      	ldr	r2, [pc, #128]	@ (800a8a4 <HAL_SD_WriteBlocks+0x314>)
 800a824:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a82a:	f043 0202 	orr.w	r2, r3, #2
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2201      	movs	r2, #1
 800a836:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2200      	movs	r2, #0
 800a83e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a840:	2301      	movs	r3, #1
 800a842:	e02a      	b.n	800a89a <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a84a:	f003 0310 	and.w	r3, r3, #16
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d012      	beq.n	800a878 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4a13      	ldr	r2, [pc, #76]	@ (800a8a4 <HAL_SD_WriteBlocks+0x314>)
 800a858:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a85e:	f043 0210 	orr.w	r2, r3, #16
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2201      	movs	r2, #1
 800a86a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2200      	movs	r2, #0
 800a872:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a874:	2301      	movs	r3, #1
 800a876:	e010      	b.n	800a89a <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4a0a      	ldr	r2, [pc, #40]	@ (800a8a8 <HAL_SD_WriteBlocks+0x318>)
 800a87e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2201      	movs	r2, #1
 800a884:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800a888:	2300      	movs	r3, #0
 800a88a:	e006      	b.n	800a89a <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a890:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a898:	2301      	movs	r3, #1
  }
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3748      	adds	r7, #72	@ 0x48
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	1fe00fff 	.word	0x1fe00fff
 800a8a8:	18000f3a 	.word	0x18000f3a

0800a8ac <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a8ba:	0f9b      	lsrs	r3, r3, #30
 800a8bc:	b2da      	uxtb	r2, r3
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a8c6:	0e9b      	lsrs	r3, r3, #26
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	f003 030f 	and.w	r3, r3, #15
 800a8ce:	b2da      	uxtb	r2, r3
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a8d8:	0e1b      	lsrs	r3, r3, #24
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	f003 0303 	and.w	r3, r3, #3
 800a8e0:	b2da      	uxtb	r2, r3
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a8ea:	0c1b      	lsrs	r3, r3, #16
 800a8ec:	b2da      	uxtb	r2, r3
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a8f6:	0a1b      	lsrs	r3, r3, #8
 800a8f8:	b2da      	uxtb	r2, r3
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a902:	b2da      	uxtb	r2, r3
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a90c:	0d1b      	lsrs	r3, r3, #20
 800a90e:	b29a      	uxth	r2, r3
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a918:	0c1b      	lsrs	r3, r3, #16
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	f003 030f 	and.w	r3, r3, #15
 800a920:	b2da      	uxtb	r2, r3
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a92a:	0bdb      	lsrs	r3, r3, #15
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	f003 0301 	and.w	r3, r3, #1
 800a932:	b2da      	uxtb	r2, r3
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a93c:	0b9b      	lsrs	r3, r3, #14
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	f003 0301 	and.w	r3, r3, #1
 800a944:	b2da      	uxtb	r2, r3
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a94e:	0b5b      	lsrs	r3, r3, #13
 800a950:	b2db      	uxtb	r3, r3
 800a952:	f003 0301 	and.w	r3, r3, #1
 800a956:	b2da      	uxtb	r2, r3
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a960:	0b1b      	lsrs	r3, r3, #12
 800a962:	b2db      	uxtb	r3, r3
 800a964:	f003 0301 	and.w	r3, r3, #1
 800a968:	b2da      	uxtb	r2, r3
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	2200      	movs	r2, #0
 800a972:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d163      	bne.n	800aa44 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a980:	009a      	lsls	r2, r3, #2
 800a982:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a986:	4013      	ands	r3, r2
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800a98c:	0f92      	lsrs	r2, r2, #30
 800a98e:	431a      	orrs	r2, r3
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a998:	0edb      	lsrs	r3, r3, #27
 800a99a:	b2db      	uxtb	r3, r3
 800a99c:	f003 0307 	and.w	r3, r3, #7
 800a9a0:	b2da      	uxtb	r2, r3
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9aa:	0e1b      	lsrs	r3, r3, #24
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	f003 0307 	and.w	r3, r3, #7
 800a9b2:	b2da      	uxtb	r2, r3
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9bc:	0d5b      	lsrs	r3, r3, #21
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	f003 0307 	and.w	r3, r3, #7
 800a9c4:	b2da      	uxtb	r2, r3
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9ce:	0c9b      	lsrs	r3, r3, #18
 800a9d0:	b2db      	uxtb	r3, r3
 800a9d2:	f003 0307 	and.w	r3, r3, #7
 800a9d6:	b2da      	uxtb	r2, r3
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9e0:	0bdb      	lsrs	r3, r3, #15
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	f003 0307 	and.w	r3, r3, #7
 800a9e8:	b2da      	uxtb	r2, r3
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	691b      	ldr	r3, [r3, #16]
 800a9f2:	1c5a      	adds	r2, r3, #1
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	7e1b      	ldrb	r3, [r3, #24]
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	f003 0307 	and.w	r3, r3, #7
 800aa02:	3302      	adds	r3, #2
 800aa04:	2201      	movs	r2, #1
 800aa06:	fa02 f303 	lsl.w	r3, r2, r3
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800aa0e:	fb03 f202 	mul.w	r2, r3, r2
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	7a1b      	ldrb	r3, [r3, #8]
 800aa1a:	b2db      	uxtb	r3, r3
 800aa1c:	f003 030f 	and.w	r3, r3, #15
 800aa20:	2201      	movs	r2, #1
 800aa22:	409a      	lsls	r2, r3
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800aa30:	0a52      	lsrs	r2, r2, #9
 800aa32:	fb03 f202 	mul.w	r2, r3, r2
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aa40:	655a      	str	r2, [r3, #84]	@ 0x54
 800aa42:	e031      	b.n	800aaa8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d11d      	bne.n	800aa88 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa50:	041b      	lsls	r3, r3, #16
 800aa52:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa5a:	0c1b      	lsrs	r3, r3, #16
 800aa5c:	431a      	orrs	r2, r3
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	691b      	ldr	r3, [r3, #16]
 800aa66:	3301      	adds	r3, #1
 800aa68:	029a      	lsls	r2, r3, #10
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aa7c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	655a      	str	r2, [r3, #84]	@ 0x54
 800aa86:	e00f      	b.n	800aaa8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4a58      	ldr	r2, [pc, #352]	@ (800abf0 <HAL_SD_GetCardCSD+0x344>)
 800aa8e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa94:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	e09d      	b.n	800abe4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aaac:	0b9b      	lsrs	r3, r3, #14
 800aaae:	b2db      	uxtb	r3, r3
 800aab0:	f003 0301 	and.w	r3, r3, #1
 800aab4:	b2da      	uxtb	r2, r3
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aabe:	09db      	lsrs	r3, r3, #7
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aac6:	b2da      	uxtb	r2, r3
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aad0:	b2db      	uxtb	r3, r3
 800aad2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aad6:	b2da      	uxtb	r2, r3
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aae0:	0fdb      	lsrs	r3, r3, #31
 800aae2:	b2da      	uxtb	r2, r3
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aaec:	0f5b      	lsrs	r3, r3, #29
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	f003 0303 	and.w	r3, r3, #3
 800aaf4:	b2da      	uxtb	r2, r3
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aafe:	0e9b      	lsrs	r3, r3, #26
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	f003 0307 	and.w	r3, r3, #7
 800ab06:	b2da      	uxtb	r2, r3
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab10:	0d9b      	lsrs	r3, r3, #22
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	f003 030f 	and.w	r3, r3, #15
 800ab18:	b2da      	uxtb	r2, r3
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab22:	0d5b      	lsrs	r3, r3, #21
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	f003 0301 	and.w	r3, r3, #1
 800ab2a:	b2da      	uxtb	r2, r3
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	2200      	movs	r2, #0
 800ab36:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab3e:	0c1b      	lsrs	r3, r3, #16
 800ab40:	b2db      	uxtb	r3, r3
 800ab42:	f003 0301 	and.w	r3, r3, #1
 800ab46:	b2da      	uxtb	r2, r3
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab52:	0bdb      	lsrs	r3, r3, #15
 800ab54:	b2db      	uxtb	r3, r3
 800ab56:	f003 0301 	and.w	r3, r3, #1
 800ab5a:	b2da      	uxtb	r2, r3
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab66:	0b9b      	lsrs	r3, r3, #14
 800ab68:	b2db      	uxtb	r3, r3
 800ab6a:	f003 0301 	and.w	r3, r3, #1
 800ab6e:	b2da      	uxtb	r2, r3
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab7a:	0b5b      	lsrs	r3, r3, #13
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	f003 0301 	and.w	r3, r3, #1
 800ab82:	b2da      	uxtb	r2, r3
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab8e:	0b1b      	lsrs	r3, r3, #12
 800ab90:	b2db      	uxtb	r3, r3
 800ab92:	f003 0301 	and.w	r3, r3, #1
 800ab96:	b2da      	uxtb	r2, r3
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aba2:	0a9b      	lsrs	r3, r3, #10
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	f003 0303 	and.w	r3, r3, #3
 800abaa:	b2da      	uxtb	r2, r3
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800abb6:	0a1b      	lsrs	r3, r3, #8
 800abb8:	b2db      	uxtb	r3, r3
 800abba:	f003 0303 	and.w	r3, r3, #3
 800abbe:	b2da      	uxtb	r2, r3
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800abca:	085b      	lsrs	r3, r3, #1
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abd2:	b2da      	uxtb	r2, r3
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	2201      	movs	r2, #1
 800abde:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800abe2:	2300      	movs	r3, #0
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr
 800abf0:	1fe00fff 	.word	0x1fe00fff

0800abf4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b094      	sub	sp, #80	@ 0x50
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800abfe:	2300      	movs	r3, #0
 800ac00:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	2b03      	cmp	r3, #3
 800ac0e:	d101      	bne.n	800ac14 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800ac10:	2301      	movs	r3, #1
 800ac12:	e0a7      	b.n	800ad64 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800ac14:	f107 0308 	add.w	r3, r7, #8
 800ac18:	4619      	mov	r1, r3
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f000 fb62 	bl	800b2e4 <SD_SendSDStatus>
 800ac20:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ac22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d011      	beq.n	800ac4c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4a4f      	ldr	r2, [pc, #316]	@ (800ad6c <HAL_SD_GetCardStatus+0x178>)
 800ac2e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac36:	431a      	orrs	r2, r3
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2201      	movs	r2, #1
 800ac40:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800ac44:	2301      	movs	r3, #1
 800ac46:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800ac4a:	e070      	b.n	800ad2e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	099b      	lsrs	r3, r3, #6
 800ac50:	b2db      	uxtb	r3, r3
 800ac52:	f003 0303 	and.w	r3, r3, #3
 800ac56:	b2da      	uxtb	r2, r3
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	095b      	lsrs	r3, r3, #5
 800ac60:	b2db      	uxtb	r3, r3
 800ac62:	f003 0301 	and.w	r3, r3, #1
 800ac66:	b2da      	uxtb	r2, r3
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	0a1b      	lsrs	r3, r3, #8
 800ac70:	b29b      	uxth	r3, r3
 800ac72:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ac76:	b29a      	uxth	r2, r3
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	0e1b      	lsrs	r3, r3, #24
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	b29a      	uxth	r2, r3
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	061a      	lsls	r2, r3, #24
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	021b      	lsls	r3, r3, #8
 800ac8e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ac92:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	0a1b      	lsrs	r3, r3, #8
 800ac98:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ac9c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	0e1b      	lsrs	r3, r3, #24
 800aca2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	b2da      	uxtb	r2, r3
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	0a1b      	lsrs	r3, r3, #8
 800acb4:	b2da      	uxtb	r2, r3
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	0d1b      	lsrs	r3, r3, #20
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	f003 030f 	and.w	r3, r3, #15
 800acc4:	b2da      	uxtb	r2, r3
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	0c1b      	lsrs	r3, r3, #16
 800acce:	b29b      	uxth	r3, r3
 800acd0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800acd4:	b29a      	uxth	r2, r3
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	b29b      	uxth	r3, r3
 800acda:	b2db      	uxtb	r3, r3
 800acdc:	b29b      	uxth	r3, r3
 800acde:	4313      	orrs	r3, r2
 800ace0:	b29a      	uxth	r2, r3
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	0a9b      	lsrs	r3, r3, #10
 800acea:	b2db      	uxtb	r3, r3
 800acec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800acf0:	b2da      	uxtb	r2, r3
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	0a1b      	lsrs	r3, r3, #8
 800acfa:	b2db      	uxtb	r3, r3
 800acfc:	f003 0303 	and.w	r3, r3, #3
 800ad00:	b2da      	uxtb	r2, r3
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	091b      	lsrs	r3, r3, #4
 800ad0a:	b2db      	uxtb	r3, r3
 800ad0c:	f003 030f 	and.w	r3, r3, #15
 800ad10:	b2da      	uxtb	r2, r3
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	f003 030f 	and.w	r3, r3, #15
 800ad1e:	b2da      	uxtb	r2, r3
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800ad24:	69bb      	ldr	r3, [r7, #24]
 800ad26:	0e1b      	lsrs	r3, r3, #24
 800ad28:	b2da      	uxtb	r2, r3
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ad36:	4618      	mov	r0, r3
 800ad38:	f002 ff0a 	bl	800db50 <SDMMC_CmdBlockLength>
 800ad3c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ad3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d00d      	beq.n	800ad60 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a08      	ldr	r2, [pc, #32]	@ (800ad6c <HAL_SD_GetCardStatus+0x178>)
 800ad4a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad50:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2201      	movs	r2, #1
 800ad56:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 800ad60:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3750      	adds	r7, #80	@ 0x50
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}
 800ad6c:	1fe00fff 	.word	0x1fe00fff

0800ad70 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(const SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b083      	sub	sp, #12
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800adba:	2300      	movs	r3, #0
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	370c      	adds	r7, #12
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800adc8:	b590      	push	{r4, r7, lr}
 800adca:	b08d      	sub	sp, #52	@ 0x34
 800adcc:	af02      	add	r7, sp, #8
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 800add2:	2300      	movs	r3, #0
 800add4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2203      	movs	r2, #3
 800addc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ade4:	2b03      	cmp	r3, #3
 800ade6:	d02e      	beq.n	800ae46 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800adee:	d106      	bne.n	800adfe <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adf4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	635a      	str	r2, [r3, #52]	@ 0x34
 800adfc:	e029      	b.n	800ae52 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ae04:	d10a      	bne.n	800ae1c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 fb64 	bl	800b4d4 <SD_WideBus_Enable>
 800ae0c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae12:	6a3b      	ldr	r3, [r7, #32]
 800ae14:	431a      	orrs	r2, r3
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	635a      	str	r2, [r3, #52]	@ 0x34
 800ae1a:	e01a      	b.n	800ae52 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d10a      	bne.n	800ae38 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 fba1 	bl	800b56a <SD_WideBus_Disable>
 800ae28:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae2e:	6a3b      	ldr	r3, [r7, #32]
 800ae30:	431a      	orrs	r2, r3
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	635a      	str	r2, [r3, #52]	@ 0x34
 800ae36:	e00c      	b.n	800ae52 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae3c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	635a      	str	r2, [r3, #52]	@ 0x34
 800ae44:	e005      	b.n	800ae52 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae4a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d007      	beq.n	800ae6a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4a5f      	ldr	r2, [pc, #380]	@ (800afdc <HAL_SD_ConfigWideBusOperation+0x214>)
 800ae60:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800ae62:	2301      	movs	r3, #1
 800ae64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ae68:	e096      	b.n	800af98 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800ae6a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800ae6e:	f04f 0100 	mov.w	r1, #0
 800ae72:	f7fd fb63 	bl	800853c <HAL_RCCEx_GetPeriphCLKFreq>
 800ae76:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800ae78:	69fb      	ldr	r3, [r7, #28]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	f000 8083 	beq.w	800af86 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	689b      	ldr	r3, [r3, #8]
 800ae8a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	691b      	ldr	r3, [r3, #16]
 800ae94:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	695a      	ldr	r2, [r3, #20]
 800ae9a:	69fb      	ldr	r3, [r7, #28]
 800ae9c:	4950      	ldr	r1, [pc, #320]	@ (800afe0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ae9e:	fba1 1303 	umull	r1, r3, r1, r3
 800aea2:	0e1b      	lsrs	r3, r3, #24
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d303      	bcc.n	800aeb0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	695b      	ldr	r3, [r3, #20]
 800aeac:	61bb      	str	r3, [r7, #24]
 800aeae:	e05a      	b.n	800af66 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aeb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aeb8:	d103      	bne.n	800aec2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	695b      	ldr	r3, [r3, #20]
 800aebe:	61bb      	str	r3, [r7, #24]
 800aec0:	e051      	b.n	800af66 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aec6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aeca:	d126      	bne.n	800af1a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	695b      	ldr	r3, [r3, #20]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d10e      	bne.n	800aef2 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800aed4:	69fb      	ldr	r3, [r7, #28]
 800aed6:	4a43      	ldr	r2, [pc, #268]	@ (800afe4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d906      	bls.n	800aeea <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800aedc:	69fb      	ldr	r3, [r7, #28]
 800aede:	4a40      	ldr	r2, [pc, #256]	@ (800afe0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800aee0:	fba2 2303 	umull	r2, r3, r2, r3
 800aee4:	0e5b      	lsrs	r3, r3, #25
 800aee6:	61bb      	str	r3, [r7, #24]
 800aee8:	e03d      	b.n	800af66 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	695b      	ldr	r3, [r3, #20]
 800aeee:	61bb      	str	r3, [r7, #24]
 800aef0:	e039      	b.n	800af66 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	695b      	ldr	r3, [r3, #20]
 800aef6:	005b      	lsls	r3, r3, #1
 800aef8:	69fa      	ldr	r2, [r7, #28]
 800aefa:	fbb2 f3f3 	udiv	r3, r2, r3
 800aefe:	4a39      	ldr	r2, [pc, #228]	@ (800afe4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d906      	bls.n	800af12 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800af04:	69fb      	ldr	r3, [r7, #28]
 800af06:	4a36      	ldr	r2, [pc, #216]	@ (800afe0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800af08:	fba2 2303 	umull	r2, r3, r2, r3
 800af0c:	0e5b      	lsrs	r3, r3, #25
 800af0e:	61bb      	str	r3, [r7, #24]
 800af10:	e029      	b.n	800af66 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	695b      	ldr	r3, [r3, #20]
 800af16:	61bb      	str	r3, [r7, #24]
 800af18:	e025      	b.n	800af66 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	695b      	ldr	r3, [r3, #20]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d10e      	bne.n	800af40 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800af22:	69fb      	ldr	r3, [r7, #28]
 800af24:	4a30      	ldr	r2, [pc, #192]	@ (800afe8 <HAL_SD_ConfigWideBusOperation+0x220>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d906      	bls.n	800af38 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800af2a:	69fb      	ldr	r3, [r7, #28]
 800af2c:	4a2c      	ldr	r2, [pc, #176]	@ (800afe0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800af2e:	fba2 2303 	umull	r2, r3, r2, r3
 800af32:	0e1b      	lsrs	r3, r3, #24
 800af34:	61bb      	str	r3, [r7, #24]
 800af36:	e016      	b.n	800af66 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	695b      	ldr	r3, [r3, #20]
 800af3c:	61bb      	str	r3, [r7, #24]
 800af3e:	e012      	b.n	800af66 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	695b      	ldr	r3, [r3, #20]
 800af44:	005b      	lsls	r3, r3, #1
 800af46:	69fa      	ldr	r2, [r7, #28]
 800af48:	fbb2 f3f3 	udiv	r3, r2, r3
 800af4c:	4a26      	ldr	r2, [pc, #152]	@ (800afe8 <HAL_SD_ConfigWideBusOperation+0x220>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d906      	bls.n	800af60 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800af52:	69fb      	ldr	r3, [r7, #28]
 800af54:	4a22      	ldr	r2, [pc, #136]	@ (800afe0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800af56:	fba2 2303 	umull	r2, r3, r2, r3
 800af5a:	0e1b      	lsrs	r3, r3, #24
 800af5c:	61bb      	str	r3, [r7, #24]
 800af5e:	e002      	b.n	800af66 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	695b      	ldr	r3, [r3, #20]
 800af64:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681c      	ldr	r4, [r3, #0]
 800af6a:	466a      	mov	r2, sp
 800af6c:	f107 0314 	add.w	r3, r7, #20
 800af70:	e893 0003 	ldmia.w	r3, {r0, r1}
 800af74:	e882 0003 	stmia.w	r2, {r0, r1}
 800af78:	f107 0308 	add.w	r3, r7, #8
 800af7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800af7e:	4620      	mov	r0, r4
 800af80:	f002 fd08 	bl	800d994 <SDMMC_Init>
 800af84:	e008      	b.n	800af98 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af8a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800af92:	2301      	movs	r3, #1
 800af94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800afa0:	4618      	mov	r0, r3
 800afa2:	f002 fdd5 	bl	800db50 <SDMMC_CmdBlockLength>
 800afa6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800afa8:	6a3b      	ldr	r3, [r7, #32]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d00c      	beq.n	800afc8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4a0a      	ldr	r2, [pc, #40]	@ (800afdc <HAL_SD_ConfigWideBusOperation+0x214>)
 800afb4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800afba:	6a3b      	ldr	r3, [r7, #32]
 800afbc:	431a      	orrs	r2, r3
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800afc2:	2301      	movs	r3, #1
 800afc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2201      	movs	r2, #1
 800afcc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800afd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	372c      	adds	r7, #44	@ 0x2c
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd90      	pop	{r4, r7, pc}
 800afdc:	1fe00fff 	.word	0x1fe00fff
 800afe0:	55e63b89 	.word	0x55e63b89
 800afe4:	02faf080 	.word	0x02faf080
 800afe8:	017d7840 	.word	0x017d7840

0800afec <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b086      	sub	sp, #24
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800aff4:	2300      	movs	r3, #0
 800aff6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800aff8:	f107 030c 	add.w	r3, r7, #12
 800affc:	4619      	mov	r1, r3
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 fa40 	bl	800b484 <SD_SendStatus>
 800b004:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d005      	beq.n	800b018 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	431a      	orrs	r2, r3
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	0a5b      	lsrs	r3, r3, #9
 800b01c:	f003 030f 	and.w	r3, r3, #15
 800b020:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b022:	693b      	ldr	r3, [r7, #16]
}
 800b024:	4618      	mov	r0, r3
 800b026:	3718      	adds	r7, #24
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b090      	sub	sp, #64	@ 0x40
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800b034:	2300      	movs	r3, #0
 800b036:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800b038:	f7f7 fcce 	bl	80029d8 <HAL_GetTick>
 800b03c:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4618      	mov	r0, r3
 800b044:	f002 fcff 	bl	800da46 <SDMMC_GetPowerState>
 800b048:	4603      	mov	r3, r0
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d102      	bne.n	800b054 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b04e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800b052:	e0b5      	b.n	800b1c0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b058:	2b03      	cmp	r3, #3
 800b05a:	d02e      	beq.n	800b0ba <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4618      	mov	r0, r3
 800b062:	f002 ff4a 	bl	800defa <SDMMC_CmdSendCID>
 800b066:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800b068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d001      	beq.n	800b072 <SD_InitCard+0x46>
    {
      return errorstate;
 800b06e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b070:	e0a6      	b.n	800b1c0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	2100      	movs	r1, #0
 800b078:	4618      	mov	r0, r3
 800b07a:	f002 fd2a 	bl	800dad2 <SDMMC_GetResponse>
 800b07e:	4602      	mov	r2, r0
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2104      	movs	r1, #4
 800b08a:	4618      	mov	r0, r3
 800b08c:	f002 fd21 	bl	800dad2 <SDMMC_GetResponse>
 800b090:	4602      	mov	r2, r0
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	2108      	movs	r1, #8
 800b09c:	4618      	mov	r0, r3
 800b09e:	f002 fd18 	bl	800dad2 <SDMMC_GetResponse>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	210c      	movs	r1, #12
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f002 fd0f 	bl	800dad2 <SDMMC_GetResponse>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0be:	2b03      	cmp	r3, #3
 800b0c0:	d01d      	beq.n	800b0fe <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800b0c2:	e019      	b.n	800b0f8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f107 020a 	add.w	r2, r7, #10
 800b0cc:	4611      	mov	r1, r2
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f002 ff52 	bl	800df78 <SDMMC_CmdSetRelAdd>
 800b0d4:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800b0d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d001      	beq.n	800b0e0 <SD_InitCard+0xb4>
      {
        return errorstate;
 800b0dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0de:	e06f      	b.n	800b1c0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800b0e0:	f7f7 fc7a 	bl	80029d8 <HAL_GetTick>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0e8:	1ad3      	subs	r3, r2, r3
 800b0ea:	f241 3287 	movw	r2, #4999	@ 0x1387
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d902      	bls.n	800b0f8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800b0f2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b0f6:	e063      	b.n	800b1c0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800b0f8:	897b      	ldrh	r3, [r7, #10]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d0e2      	beq.n	800b0c4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b102:	2b03      	cmp	r3, #3
 800b104:	d036      	beq.n	800b174 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b106:	897b      	ldrh	r3, [r7, #10]
 800b108:	461a      	mov	r2, r3
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681a      	ldr	r2, [r3, #0]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b116:	041b      	lsls	r3, r3, #16
 800b118:	4619      	mov	r1, r3
 800b11a:	4610      	mov	r0, r2
 800b11c:	f002 ff0c 	bl	800df38 <SDMMC_CmdSendCSD>
 800b120:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800b122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b124:	2b00      	cmp	r3, #0
 800b126:	d001      	beq.n	800b12c <SD_InitCard+0x100>
    {
      return errorstate;
 800b128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b12a:	e049      	b.n	800b1c0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	2100      	movs	r1, #0
 800b132:	4618      	mov	r0, r3
 800b134:	f002 fccd 	bl	800dad2 <SDMMC_GetResponse>
 800b138:	4602      	mov	r2, r0
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	2104      	movs	r1, #4
 800b144:	4618      	mov	r0, r3
 800b146:	f002 fcc4 	bl	800dad2 <SDMMC_GetResponse>
 800b14a:	4602      	mov	r2, r0
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	2108      	movs	r1, #8
 800b156:	4618      	mov	r0, r3
 800b158:	f002 fcbb 	bl	800dad2 <SDMMC_GetResponse>
 800b15c:	4602      	mov	r2, r0
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	210c      	movs	r1, #12
 800b168:	4618      	mov	r0, r3
 800b16a:	f002 fcb2 	bl	800dad2 <SDMMC_GetResponse>
 800b16e:	4602      	mov	r2, r0
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	2104      	movs	r1, #4
 800b17a:	4618      	mov	r0, r3
 800b17c:	f002 fca9 	bl	800dad2 <SDMMC_GetResponse>
 800b180:	4603      	mov	r3, r0
 800b182:	0d1a      	lsrs	r2, r3, #20
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b188:	f107 030c 	add.w	r3, r7, #12
 800b18c:	4619      	mov	r1, r3
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f7ff fb8c 	bl	800a8ac <HAL_SD_GetCardCSD>
 800b194:	4603      	mov	r3, r0
 800b196:	2b00      	cmp	r3, #0
 800b198:	d002      	beq.n	800b1a0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b19a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b19e:	e00f      	b.n	800b1c0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1a8:	041b      	lsls	r3, r3, #16
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	4610      	mov	r0, r2
 800b1ae:	f002 fdbb 	bl	800dd28 <SDMMC_CmdSelDesel>
 800b1b2:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800b1b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d001      	beq.n	800b1be <SD_InitCard+0x192>
  {
    return errorstate;
 800b1ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1bc:	e000      	b.n	800b1c0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b1be:	2300      	movs	r3, #0
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3740      	adds	r7, #64	@ 0x40
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b086      	sub	sp, #24
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f002 fdc4 	bl	800dd6e <SDMMC_CmdGoIdleState>
 800b1e6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d001      	beq.n	800b1f2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	e072      	b.n	800b2d8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f002 fdd7 	bl	800ddaa <SDMMC_CmdOperCond>
 800b1fc:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b204:	d10d      	bne.n	800b222 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2200      	movs	r2, #0
 800b20a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4618      	mov	r0, r3
 800b212:	f002 fdac 	bl	800dd6e <SDMMC_CmdGoIdleState>
 800b216:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d004      	beq.n	800b228 <SD_PowerON+0x60>
    {
      return errorstate;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	e05a      	b.n	800b2d8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2201      	movs	r2, #1
 800b226:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d137      	bne.n	800b2a0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	2100      	movs	r1, #0
 800b236:	4618      	mov	r0, r3
 800b238:	f002 fdd7 	bl	800ddea <SDMMC_CmdAppCommand>
 800b23c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d02d      	beq.n	800b2a0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b244:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b248:	e046      	b.n	800b2d8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	2100      	movs	r1, #0
 800b250:	4618      	mov	r0, r3
 800b252:	f002 fdca 	bl	800ddea <SDMMC_CmdAppCommand>
 800b256:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d001      	beq.n	800b262 <SD_PowerON+0x9a>
    {
      return errorstate;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	e03a      	b.n	800b2d8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	491e      	ldr	r1, [pc, #120]	@ (800b2e0 <SD_PowerON+0x118>)
 800b268:	4618      	mov	r0, r3
 800b26a:	f002 fde1 	bl	800de30 <SDMMC_CmdAppOperCommand>
 800b26e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d002      	beq.n	800b27c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b276:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b27a:	e02d      	b.n	800b2d8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	2100      	movs	r1, #0
 800b282:	4618      	mov	r0, r3
 800b284:	f002 fc25 	bl	800dad2 <SDMMC_GetResponse>
 800b288:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	0fdb      	lsrs	r3, r3, #31
 800b28e:	2b01      	cmp	r3, #1
 800b290:	d101      	bne.n	800b296 <SD_PowerON+0xce>
 800b292:	2301      	movs	r3, #1
 800b294:	e000      	b.n	800b298 <SD_PowerON+0xd0>
 800b296:	2300      	movs	r3, #0
 800b298:	613b      	str	r3, [r7, #16]

    count++;
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	3301      	adds	r3, #1
 800b29e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d802      	bhi.n	800b2b0 <SD_PowerON+0xe8>
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d0cc      	beq.n	800b24a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d902      	bls.n	800b2c0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b2ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b2be:	e00b      	b.n	800b2d8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d002      	beq.n	800b2d6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800b2d6:	2300      	movs	r3, #0
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3718      	adds	r7, #24
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}
 800b2e0:	c1100000 	.word	0xc1100000

0800b2e4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b08c      	sub	sp, #48	@ 0x30
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b2ee:	f7f7 fb73 	bl	80029d8 <HAL_GetTick>
 800b2f2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	2100      	movs	r1, #0
 800b2fe:	4618      	mov	r0, r3
 800b300:	f002 fbe7 	bl	800dad2 <SDMMC_GetResponse>
 800b304:	4603      	mov	r3, r0
 800b306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b30a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b30e:	d102      	bne.n	800b316 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b310:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b314:	e0b0      	b.n	800b478 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	2140      	movs	r1, #64	@ 0x40
 800b31c:	4618      	mov	r0, r3
 800b31e:	f002 fc17 	bl	800db50 <SDMMC_CmdBlockLength>
 800b322:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b324:	6a3b      	ldr	r3, [r7, #32]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d005      	beq.n	800b336 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800b332:	6a3b      	ldr	r3, [r7, #32]
 800b334:	e0a0      	b.n	800b478 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b33e:	041b      	lsls	r3, r3, #16
 800b340:	4619      	mov	r1, r3
 800b342:	4610      	mov	r0, r2
 800b344:	f002 fd51 	bl	800ddea <SDMMC_CmdAppCommand>
 800b348:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b34a:	6a3b      	ldr	r3, [r7, #32]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d005      	beq.n	800b35c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800b358:	6a3b      	ldr	r3, [r7, #32]
 800b35a:	e08d      	b.n	800b478 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b35c:	f04f 33ff 	mov.w	r3, #4294967295
 800b360:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800b362:	2340      	movs	r3, #64	@ 0x40
 800b364:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800b366:	2360      	movs	r3, #96	@ 0x60
 800b368:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b36a:	2302      	movs	r3, #2
 800b36c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b36e:	2300      	movs	r3, #0
 800b370:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b372:	2301      	movs	r3, #1
 800b374:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f107 0208 	add.w	r2, r7, #8
 800b37e:	4611      	mov	r1, r2
 800b380:	4618      	mov	r0, r3
 800b382:	f002 fbb9 	bl	800daf8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4618      	mov	r0, r3
 800b38c:	f002 fe39 	bl	800e002 <SDMMC_CmdStatusRegister>
 800b390:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b392:	6a3b      	ldr	r3, [r7, #32]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d02b      	beq.n	800b3f0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800b3a0:	6a3b      	ldr	r3, [r7, #32]
 800b3a2:	e069      	b.n	800b478 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d013      	beq.n	800b3da <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b3b6:	e00d      	b.n	800b3d4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f002 fb13 	bl	800d9e8 <SDMMC_ReadFIFO>
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3c6:	601a      	str	r2, [r3, #0]
        pData++;
 800b3c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ca:	3304      	adds	r3, #4
 800b3cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800b3ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3d0:	3301      	adds	r3, #1
 800b3d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b3d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3d6:	2b07      	cmp	r3, #7
 800b3d8:	d9ee      	bls.n	800b3b8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800b3da:	f7f7 fafd 	bl	80029d8 <HAL_GetTick>
 800b3de:	4602      	mov	r2, r0
 800b3e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3e2:	1ad3      	subs	r3, r2, r3
 800b3e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3e8:	d102      	bne.n	800b3f0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b3ea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b3ee:	e043      	b.n	800b478 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3f6:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d0d2      	beq.n	800b3a4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b404:	f003 0308 	and.w	r3, r3, #8
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d001      	beq.n	800b410 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b40c:	2308      	movs	r3, #8
 800b40e:	e033      	b.n	800b478 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b416:	f003 0302 	and.w	r3, r3, #2
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d001      	beq.n	800b422 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b41e:	2302      	movs	r3, #2
 800b420:	e02a      	b.n	800b478 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b428:	f003 0320 	and.w	r3, r3, #32
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d017      	beq.n	800b460 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800b430:	2320      	movs	r3, #32
 800b432:	e021      	b.n	800b478 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4618      	mov	r0, r3
 800b43a:	f002 fad5 	bl	800d9e8 <SDMMC_ReadFIFO>
 800b43e:	4602      	mov	r2, r0
 800b440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b442:	601a      	str	r2, [r3, #0]
    pData++;
 800b444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b446:	3304      	adds	r3, #4
 800b448:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800b44a:	f7f7 fac5 	bl	80029d8 <HAL_GetTick>
 800b44e:	4602      	mov	r2, r0
 800b450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b452:	1ad3      	subs	r3, r2, r3
 800b454:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b458:	d102      	bne.n	800b460 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b45a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b45e:	e00b      	b.n	800b478 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b466:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d1e2      	bne.n	800b434 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	4a03      	ldr	r2, [pc, #12]	@ (800b480 <SD_SendSDStatus+0x19c>)
 800b474:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800b476:	2300      	movs	r3, #0
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3730      	adds	r7, #48	@ 0x30
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}
 800b480:	18000f3a 	.word	0x18000f3a

0800b484 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d102      	bne.n	800b49a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b494:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b498:	e018      	b.n	800b4cc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4a2:	041b      	lsls	r3, r3, #16
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	4610      	mov	r0, r2
 800b4a8:	f002 fd88 	bl	800dfbc <SDMMC_CmdSendStatus>
 800b4ac:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d001      	beq.n	800b4b8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	e009      	b.n	800b4cc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	2100      	movs	r1, #0
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f002 fb07 	bl	800dad2 <SDMMC_GetResponse>
 800b4c4:	4602      	mov	r2, r0
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b4ca:	2300      	movs	r3, #0
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3710      	adds	r7, #16
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}

0800b4d4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b086      	sub	sp, #24
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b4dc:	2300      	movs	r3, #0
 800b4de:	60fb      	str	r3, [r7, #12]
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	2100      	movs	r1, #0
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f002 faf1 	bl	800dad2 <SDMMC_GetResponse>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b4f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b4fa:	d102      	bne.n	800b502 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b4fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b500:	e02f      	b.n	800b562 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b502:	f107 030c 	add.w	r3, r7, #12
 800b506:	4619      	mov	r1, r3
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f000 f879 	bl	800b600 <SD_FindSCR>
 800b50e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d001      	beq.n	800b51a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	e023      	b.n	800b562 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b520:	2b00      	cmp	r3, #0
 800b522:	d01c      	beq.n	800b55e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681a      	ldr	r2, [r3, #0]
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b52c:	041b      	lsls	r3, r3, #16
 800b52e:	4619      	mov	r1, r3
 800b530:	4610      	mov	r0, r2
 800b532:	f002 fc5a 	bl	800ddea <SDMMC_CmdAppCommand>
 800b536:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d001      	beq.n	800b542 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	e00f      	b.n	800b562 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	2102      	movs	r1, #2
 800b548:	4618      	mov	r0, r3
 800b54a:	f002 fc91 	bl	800de70 <SDMMC_CmdBusWidth>
 800b54e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d001      	beq.n	800b55a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	e003      	b.n	800b562 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b55a:	2300      	movs	r3, #0
 800b55c:	e001      	b.n	800b562 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b55e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800b562:	4618      	mov	r0, r3
 800b564:	3718      	adds	r7, #24
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}

0800b56a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b56a:	b580      	push	{r7, lr}
 800b56c:	b086      	sub	sp, #24
 800b56e:	af00      	add	r7, sp, #0
 800b570:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b572:	2300      	movs	r3, #0
 800b574:	60fb      	str	r3, [r7, #12]
 800b576:	2300      	movs	r3, #0
 800b578:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	2100      	movs	r1, #0
 800b580:	4618      	mov	r0, r3
 800b582:	f002 faa6 	bl	800dad2 <SDMMC_GetResponse>
 800b586:	4603      	mov	r3, r0
 800b588:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b58c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b590:	d102      	bne.n	800b598 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b592:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b596:	e02f      	b.n	800b5f8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b598:	f107 030c 	add.w	r3, r7, #12
 800b59c:	4619      	mov	r1, r3
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 f82e 	bl	800b600 <SD_FindSCR>
 800b5a4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d001      	beq.n	800b5b0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	e023      	b.n	800b5f8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d01c      	beq.n	800b5f4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681a      	ldr	r2, [r3, #0]
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5c2:	041b      	lsls	r3, r3, #16
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	4610      	mov	r0, r2
 800b5c8:	f002 fc0f 	bl	800ddea <SDMMC_CmdAppCommand>
 800b5cc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d001      	beq.n	800b5d8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	e00f      	b.n	800b5f8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2100      	movs	r1, #0
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f002 fc46 	bl	800de70 <SDMMC_CmdBusWidth>
 800b5e4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d001      	beq.n	800b5f0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	e003      	b.n	800b5f8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	e001      	b.n	800b5f8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b5f4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3718      	adds	r7, #24
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}

0800b600 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b08e      	sub	sp, #56	@ 0x38
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b60a:	f7f7 f9e5 	bl	80029d8 <HAL_GetTick>
 800b60e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800b610:	2300      	movs	r3, #0
 800b612:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b614:	2300      	movs	r3, #0
 800b616:	60bb      	str	r3, [r7, #8]
 800b618:	2300      	movs	r3, #0
 800b61a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	2108      	movs	r1, #8
 800b626:	4618      	mov	r0, r3
 800b628:	f002 fa92 	bl	800db50 <SDMMC_CmdBlockLength>
 800b62c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b62e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b630:	2b00      	cmp	r3, #0
 800b632:	d001      	beq.n	800b638 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b636:	e0ad      	b.n	800b794 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681a      	ldr	r2, [r3, #0]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b640:	041b      	lsls	r3, r3, #16
 800b642:	4619      	mov	r1, r3
 800b644:	4610      	mov	r0, r2
 800b646:	f002 fbd0 	bl	800ddea <SDMMC_CmdAppCommand>
 800b64a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b64c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d001      	beq.n	800b656 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b654:	e09e      	b.n	800b794 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b656:	f04f 33ff 	mov.w	r3, #4294967295
 800b65a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b65c:	2308      	movs	r3, #8
 800b65e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b660:	2330      	movs	r3, #48	@ 0x30
 800b662:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b664:	2302      	movs	r3, #2
 800b666:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b668:	2300      	movs	r3, #0
 800b66a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b66c:	2301      	movs	r3, #1
 800b66e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f107 0210 	add.w	r2, r7, #16
 800b678:	4611      	mov	r1, r2
 800b67a:	4618      	mov	r0, r3
 800b67c:	f002 fa3c 	bl	800daf8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4618      	mov	r0, r3
 800b686:	f002 fc16 	bl	800deb6 <SDMMC_CmdSendSCR>
 800b68a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b68c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d027      	beq.n	800b6e2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800b692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b694:	e07e      	b.n	800b794 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b69c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d113      	bne.n	800b6cc <SD_FindSCR+0xcc>
 800b6a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d110      	bne.n	800b6cc <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f002 f99a 	bl	800d9e8 <SDMMC_ReadFIFO>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f002 f993 	bl	800d9e8 <SDMMC_ReadFIFO>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	60fb      	str	r3, [r7, #12]
      index++;
 800b6c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800b6cc:	f7f7 f984 	bl	80029d8 <HAL_GetTick>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d4:	1ad3      	subs	r3, r2, r3
 800b6d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6da:	d102      	bne.n	800b6e2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b6dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b6e0:	e058      	b.n	800b794 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b6e8:	f240 532a 	movw	r3, #1322	@ 0x52a
 800b6ec:	4013      	ands	r3, r2
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d0d1      	beq.n	800b696 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6f8:	f003 0308 	and.w	r3, r3, #8
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d005      	beq.n	800b70c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	2208      	movs	r2, #8
 800b706:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b708:	2308      	movs	r3, #8
 800b70a:	e043      	b.n	800b794 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b712:	f003 0302 	and.w	r3, r3, #2
 800b716:	2b00      	cmp	r3, #0
 800b718:	d005      	beq.n	800b726 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	2202      	movs	r2, #2
 800b720:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b722:	2302      	movs	r3, #2
 800b724:	e036      	b.n	800b794 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b72c:	f003 0320 	and.w	r3, r3, #32
 800b730:	2b00      	cmp	r3, #0
 800b732:	d005      	beq.n	800b740 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2220      	movs	r2, #32
 800b73a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b73c:	2320      	movs	r3, #32
 800b73e:	e029      	b.n	800b794 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4a15      	ldr	r2, [pc, #84]	@ (800b79c <SD_FindSCR+0x19c>)
 800b746:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	061a      	lsls	r2, r3, #24
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	021b      	lsls	r3, r3, #8
 800b750:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b754:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	0a1b      	lsrs	r3, r3, #8
 800b75a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800b75e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	0e1b      	lsrs	r3, r3, #24
 800b764:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800b766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b768:	601a      	str	r2, [r3, #0]
    scr++;
 800b76a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b76c:	3304      	adds	r3, #4
 800b76e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	061a      	lsls	r2, r3, #24
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	021b      	lsls	r3, r3, #8
 800b778:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b77c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	0a1b      	lsrs	r3, r3, #8
 800b782:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800b786:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	0e1b      	lsrs	r3, r3, #24
 800b78c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800b78e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b790:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b792:	2300      	movs	r3, #0
}
 800b794:	4618      	mov	r0, r3
 800b796:	3738      	adds	r7, #56	@ 0x38
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}
 800b79c:	18000f3a 	.word	0x18000f3a

0800b7a0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b084      	sub	sp, #16
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d101      	bne.n	800b7b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	e10f      	b.n	800b9d2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	4a87      	ldr	r2, [pc, #540]	@ (800b9dc <HAL_SPI_Init+0x23c>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d00f      	beq.n	800b7e2 <HAL_SPI_Init+0x42>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	4a86      	ldr	r2, [pc, #536]	@ (800b9e0 <HAL_SPI_Init+0x240>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d00a      	beq.n	800b7e2 <HAL_SPI_Init+0x42>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a84      	ldr	r2, [pc, #528]	@ (800b9e4 <HAL_SPI_Init+0x244>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d005      	beq.n	800b7e2 <HAL_SPI_Init+0x42>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	68db      	ldr	r3, [r3, #12]
 800b7da:	2b0f      	cmp	r3, #15
 800b7dc:	d901      	bls.n	800b7e2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b7de:	2301      	movs	r3, #1
 800b7e0:	e0f7      	b.n	800b9d2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 fe2e 	bl	800c444 <SPI_GetPacketSize>
 800b7e8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	4a7b      	ldr	r2, [pc, #492]	@ (800b9dc <HAL_SPI_Init+0x23c>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d00c      	beq.n	800b80e <HAL_SPI_Init+0x6e>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	4a79      	ldr	r2, [pc, #484]	@ (800b9e0 <HAL_SPI_Init+0x240>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d007      	beq.n	800b80e <HAL_SPI_Init+0x6e>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	4a78      	ldr	r2, [pc, #480]	@ (800b9e4 <HAL_SPI_Init+0x244>)
 800b804:	4293      	cmp	r3, r2
 800b806:	d002      	beq.n	800b80e <HAL_SPI_Init+0x6e>
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	2b08      	cmp	r3, #8
 800b80c:	d811      	bhi.n	800b832 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b812:	4a72      	ldr	r2, [pc, #456]	@ (800b9dc <HAL_SPI_Init+0x23c>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d009      	beq.n	800b82c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	4a70      	ldr	r2, [pc, #448]	@ (800b9e0 <HAL_SPI_Init+0x240>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d004      	beq.n	800b82c <HAL_SPI_Init+0x8c>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4a6f      	ldr	r2, [pc, #444]	@ (800b9e4 <HAL_SPI_Init+0x244>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d104      	bne.n	800b836 <HAL_SPI_Init+0x96>
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	2b10      	cmp	r3, #16
 800b830:	d901      	bls.n	800b836 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b832:	2301      	movs	r3, #1
 800b834:	e0cd      	b.n	800b9d2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b83c:	b2db      	uxtb	r3, r3
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d106      	bne.n	800b850 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2200      	movs	r2, #0
 800b846:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f006 fa3a 	bl	8011cc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2202      	movs	r2, #2
 800b854:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f022 0201 	bic.w	r2, r2, #1
 800b866:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	689b      	ldr	r3, [r3, #8]
 800b86e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b872:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	699b      	ldr	r3, [r3, #24]
 800b878:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b87c:	d119      	bne.n	800b8b2 <HAL_SPI_Init+0x112>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	685b      	ldr	r3, [r3, #4]
 800b882:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b886:	d103      	bne.n	800b890 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d008      	beq.n	800b8a2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b894:	2b00      	cmp	r3, #0
 800b896:	d10c      	bne.n	800b8b2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b89c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b8a0:	d107      	bne.n	800b8b2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	681a      	ldr	r2, [r3, #0]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b8b0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d00f      	beq.n	800b8de <HAL_SPI_Init+0x13e>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	2b06      	cmp	r3, #6
 800b8c4:	d90b      	bls.n	800b8de <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	430a      	orrs	r2, r1
 800b8da:	601a      	str	r2, [r3, #0]
 800b8dc:	e007      	b.n	800b8ee <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	681a      	ldr	r2, [r3, #0]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b8ec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	69da      	ldr	r2, [r3, #28]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8f6:	431a      	orrs	r2, r3
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	431a      	orrs	r2, r3
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b900:	ea42 0103 	orr.w	r1, r2, r3
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	68da      	ldr	r2, [r3, #12]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	430a      	orrs	r2, r1
 800b90e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b918:	431a      	orrs	r2, r3
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b91e:	431a      	orrs	r2, r3
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	699b      	ldr	r3, [r3, #24]
 800b924:	431a      	orrs	r2, r3
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	691b      	ldr	r3, [r3, #16]
 800b92a:	431a      	orrs	r2, r3
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	695b      	ldr	r3, [r3, #20]
 800b930:	431a      	orrs	r2, r3
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6a1b      	ldr	r3, [r3, #32]
 800b936:	431a      	orrs	r2, r3
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	685b      	ldr	r3, [r3, #4]
 800b93c:	431a      	orrs	r2, r3
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b942:	431a      	orrs	r2, r3
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	689b      	ldr	r3, [r3, #8]
 800b948:	431a      	orrs	r2, r3
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b94e:	ea42 0103 	orr.w	r1, r2, r3
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	430a      	orrs	r2, r1
 800b95c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	685b      	ldr	r3, [r3, #4]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d113      	bne.n	800b98e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	689b      	ldr	r3, [r3, #8]
 800b96c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b978:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	689b      	ldr	r3, [r3, #8]
 800b980:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b98c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f022 0201 	bic.w	r2, r2, #1
 800b99c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d00a      	beq.n	800b9c0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	68db      	ldr	r3, [r3, #12]
 800b9b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	430a      	orrs	r2, r1
 800b9be:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b9d0:	2300      	movs	r3, #0
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3710      	adds	r7, #16
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	40013000 	.word	0x40013000
 800b9e0:	40003800 	.word	0x40003800
 800b9e4:	40003c00 	.word	0x40003c00

0800b9e8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b088      	sub	sp, #32
 800b9ec:	af02      	add	r7, sp, #8
 800b9ee:	60f8      	str	r0, [r7, #12]
 800b9f0:	60b9      	str	r1, [r7, #8]
 800b9f2:	603b      	str	r3, [r7, #0]
 800b9f4:	4613      	mov	r3, r2
 800b9f6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	3320      	adds	r3, #32
 800b9fe:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ba00:	f7f6 ffea 	bl	80029d8 <HAL_GetTick>
 800ba04:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d001      	beq.n	800ba16 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800ba12:	2302      	movs	r3, #2
 800ba14:	e1d1      	b.n	800bdba <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d002      	beq.n	800ba22 <HAL_SPI_Transmit+0x3a>
 800ba1c:	88fb      	ldrh	r3, [r7, #6]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d101      	bne.n	800ba26 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800ba22:	2301      	movs	r3, #1
 800ba24:	e1c9      	b.n	800bdba <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d101      	bne.n	800ba34 <HAL_SPI_Transmit+0x4c>
 800ba30:	2302      	movs	r3, #2
 800ba32:	e1c2      	b.n	800bdba <HAL_SPI_Transmit+0x3d2>
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2201      	movs	r2, #1
 800ba38:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2203      	movs	r2, #3
 800ba40:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2200      	movs	r2, #0
 800ba48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	68ba      	ldr	r2, [r7, #8]
 800ba50:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	88fa      	ldrh	r2, [r7, #6]
 800ba56:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	88fa      	ldrh	r2, [r7, #6]
 800ba5e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2200      	movs	r2, #0
 800ba66:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	2200      	movs	r2, #0
 800ba74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2200      	movs	r2, #0
 800ba82:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800ba8c:	d108      	bne.n	800baa0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	681a      	ldr	r2, [r3, #0]
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ba9c:	601a      	str	r2, [r3, #0]
 800ba9e:	e009      	b.n	800bab4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	68db      	ldr	r3, [r3, #12]
 800baa6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800bab2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	685a      	ldr	r2, [r3, #4]
 800baba:	4b96      	ldr	r3, [pc, #600]	@ (800bd14 <HAL_SPI_Transmit+0x32c>)
 800babc:	4013      	ands	r3, r2
 800babe:	88f9      	ldrh	r1, [r7, #6]
 800bac0:	68fa      	ldr	r2, [r7, #12]
 800bac2:	6812      	ldr	r2, [r2, #0]
 800bac4:	430b      	orrs	r3, r1
 800bac6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	681a      	ldr	r2, [r3, #0]
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f042 0201 	orr.w	r2, r2, #1
 800bad6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bae0:	d107      	bne.n	800baf2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	681a      	ldr	r2, [r3, #0]
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800baf0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	68db      	ldr	r3, [r3, #12]
 800baf6:	2b0f      	cmp	r3, #15
 800baf8:	d947      	bls.n	800bb8a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bafa:	e03f      	b.n	800bb7c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	695b      	ldr	r3, [r3, #20]
 800bb02:	f003 0302 	and.w	r3, r3, #2
 800bb06:	2b02      	cmp	r3, #2
 800bb08:	d114      	bne.n	800bb34 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	6812      	ldr	r2, [r2, #0]
 800bb14:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb1a:	1d1a      	adds	r2, r3, #4
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bb26:	b29b      	uxth	r3, r3
 800bb28:	3b01      	subs	r3, #1
 800bb2a:	b29a      	uxth	r2, r3
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bb32:	e023      	b.n	800bb7c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb34:	f7f6 ff50 	bl	80029d8 <HAL_GetTick>
 800bb38:	4602      	mov	r2, r0
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	1ad3      	subs	r3, r2, r3
 800bb3e:	683a      	ldr	r2, [r7, #0]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d803      	bhi.n	800bb4c <HAL_SPI_Transmit+0x164>
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb4a:	d102      	bne.n	800bb52 <HAL_SPI_Transmit+0x16a>
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d114      	bne.n	800bb7c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bb52:	68f8      	ldr	r0, [r7, #12]
 800bb54:	f000 fba8 	bl	800c2a8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb5e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2200      	movs	r2, #0
 800bb74:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bb78:	2303      	movs	r3, #3
 800bb7a:	e11e      	b.n	800bdba <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d1b9      	bne.n	800bafc <HAL_SPI_Transmit+0x114>
 800bb88:	e0f1      	b.n	800bd6e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	68db      	ldr	r3, [r3, #12]
 800bb8e:	2b07      	cmp	r3, #7
 800bb90:	f240 80e6 	bls.w	800bd60 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bb94:	e05d      	b.n	800bc52 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	695b      	ldr	r3, [r3, #20]
 800bb9c:	f003 0302 	and.w	r3, r3, #2
 800bba0:	2b02      	cmp	r3, #2
 800bba2:	d132      	bne.n	800bc0a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bbaa:	b29b      	uxth	r3, r3
 800bbac:	2b01      	cmp	r3, #1
 800bbae:	d918      	bls.n	800bbe2 <HAL_SPI_Transmit+0x1fa>
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d014      	beq.n	800bbe2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	6812      	ldr	r2, [r2, #0]
 800bbc2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bbc8:	1d1a      	adds	r2, r3, #4
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	3b02      	subs	r3, #2
 800bbd8:	b29a      	uxth	r2, r3
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bbe0:	e037      	b.n	800bc52 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bbe6:	881a      	ldrh	r2, [r3, #0]
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bbf0:	1c9a      	adds	r2, r3, #2
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	3b01      	subs	r3, #1
 800bc00:	b29a      	uxth	r2, r3
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bc08:	e023      	b.n	800bc52 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bc0a:	f7f6 fee5 	bl	80029d8 <HAL_GetTick>
 800bc0e:	4602      	mov	r2, r0
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	1ad3      	subs	r3, r2, r3
 800bc14:	683a      	ldr	r2, [r7, #0]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d803      	bhi.n	800bc22 <HAL_SPI_Transmit+0x23a>
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc20:	d102      	bne.n	800bc28 <HAL_SPI_Transmit+0x240>
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d114      	bne.n	800bc52 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bc28:	68f8      	ldr	r0, [r7, #12]
 800bc2a:	f000 fb3d 	bl	800c2a8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc34:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2201      	movs	r2, #1
 800bc42:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bc4e:	2303      	movs	r3, #3
 800bc50:	e0b3      	b.n	800bdba <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bc58:	b29b      	uxth	r3, r3
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d19b      	bne.n	800bb96 <HAL_SPI_Transmit+0x1ae>
 800bc5e:	e086      	b.n	800bd6e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	695b      	ldr	r3, [r3, #20]
 800bc66:	f003 0302 	and.w	r3, r3, #2
 800bc6a:	2b02      	cmp	r3, #2
 800bc6c:	d154      	bne.n	800bd18 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bc74:	b29b      	uxth	r3, r3
 800bc76:	2b03      	cmp	r3, #3
 800bc78:	d918      	bls.n	800bcac <HAL_SPI_Transmit+0x2c4>
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc7e:	2b40      	cmp	r3, #64	@ 0x40
 800bc80:	d914      	bls.n	800bcac <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	6812      	ldr	r2, [r2, #0]
 800bc8c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bc92:	1d1a      	adds	r2, r3, #4
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bc9e:	b29b      	uxth	r3, r3
 800bca0:	3b04      	subs	r3, #4
 800bca2:	b29a      	uxth	r2, r3
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bcaa:	e059      	b.n	800bd60 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d917      	bls.n	800bce8 <HAL_SPI_Transmit+0x300>
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d013      	beq.n	800bce8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bcc4:	881a      	ldrh	r2, [r3, #0]
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bcce:	1c9a      	adds	r2, r3, #2
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bcda:	b29b      	uxth	r3, r3
 800bcdc:	3b02      	subs	r3, #2
 800bcde:	b29a      	uxth	r2, r3
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bce6:	e03b      	b.n	800bd60 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	3320      	adds	r3, #32
 800bcf2:	7812      	ldrb	r2, [r2, #0]
 800bcf4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bcfa:	1c5a      	adds	r2, r3, #1
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bd06:	b29b      	uxth	r3, r3
 800bd08:	3b01      	subs	r3, #1
 800bd0a:	b29a      	uxth	r2, r3
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bd12:	e025      	b.n	800bd60 <HAL_SPI_Transmit+0x378>
 800bd14:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd18:	f7f6 fe5e 	bl	80029d8 <HAL_GetTick>
 800bd1c:	4602      	mov	r2, r0
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	1ad3      	subs	r3, r2, r3
 800bd22:	683a      	ldr	r2, [r7, #0]
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d803      	bhi.n	800bd30 <HAL_SPI_Transmit+0x348>
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd2e:	d102      	bne.n	800bd36 <HAL_SPI_Transmit+0x34e>
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d114      	bne.n	800bd60 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bd36:	68f8      	ldr	r0, [r7, #12]
 800bd38:	f000 fab6 	bl	800c2a8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd42:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2201      	movs	r2, #1
 800bd50:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2200      	movs	r2, #0
 800bd58:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bd5c:	2303      	movs	r3, #3
 800bd5e:	e02c      	b.n	800bdba <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bd66:	b29b      	uxth	r3, r3
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	f47f af79 	bne.w	800bc60 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	9300      	str	r3, [sp, #0]
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	2200      	movs	r2, #0
 800bd76:	2108      	movs	r1, #8
 800bd78:	68f8      	ldr	r0, [r7, #12]
 800bd7a:	f000 fb35 	bl	800c3e8 <SPI_WaitOnFlagUntilTimeout>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d007      	beq.n	800bd94 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd8a:	f043 0220 	orr.w	r2, r3, #32
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bd94:	68f8      	ldr	r0, [r7, #12]
 800bd96:	f000 fa87 	bl	800c2a8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	2201      	movs	r2, #1
 800bd9e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	2200      	movs	r2, #0
 800bda6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d001      	beq.n	800bdb8 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	e000      	b.n	800bdba <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800bdb8:	2300      	movs	r3, #0
  }
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3718      	adds	r7, #24
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop

0800bdc4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b088      	sub	sp, #32
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	60f8      	str	r0, [r7, #12]
 800bdcc:	60b9      	str	r1, [r7, #8]
 800bdce:	603b      	str	r3, [r7, #0]
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdd8:	095b      	lsrs	r3, r3, #5
 800bdda:	b29b      	uxth	r3, r3
 800bddc:	3301      	adds	r3, #1
 800bdde:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	3330      	adds	r3, #48	@ 0x30
 800bde6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bde8:	f7f6 fdf6 	bl	80029d8 <HAL_GetTick>
 800bdec:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bdf4:	b2db      	uxtb	r3, r3
 800bdf6:	2b01      	cmp	r3, #1
 800bdf8:	d001      	beq.n	800bdfe <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800bdfa:	2302      	movs	r3, #2
 800bdfc:	e250      	b.n	800c2a0 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d002      	beq.n	800be0a <HAL_SPI_Receive+0x46>
 800be04:	88fb      	ldrh	r3, [r7, #6]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d101      	bne.n	800be0e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800be0a:	2301      	movs	r3, #1
 800be0c:	e248      	b.n	800c2a0 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800be14:	2b01      	cmp	r3, #1
 800be16:	d101      	bne.n	800be1c <HAL_SPI_Receive+0x58>
 800be18:	2302      	movs	r3, #2
 800be1a:	e241      	b.n	800c2a0 <HAL_SPI_Receive+0x4dc>
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2201      	movs	r2, #1
 800be20:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2204      	movs	r2, #4
 800be28:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	2200      	movs	r2, #0
 800be30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	68ba      	ldr	r2, [r7, #8]
 800be38:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	88fa      	ldrh	r2, [r7, #6]
 800be3e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	88fa      	ldrh	r2, [r7, #6]
 800be46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	2200      	movs	r2, #0
 800be4e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2200      	movs	r2, #0
 800be54:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2200      	movs	r2, #0
 800be5c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2200      	movs	r2, #0
 800be64:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2200      	movs	r2, #0
 800be6a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	689b      	ldr	r3, [r3, #8]
 800be70:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800be74:	d108      	bne.n	800be88 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	681a      	ldr	r2, [r3, #0]
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800be84:	601a      	str	r2, [r3, #0]
 800be86:	e009      	b.n	800be9c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	68db      	ldr	r3, [r3, #12]
 800be8e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800be9a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	685a      	ldr	r2, [r3, #4]
 800bea2:	4b95      	ldr	r3, [pc, #596]	@ (800c0f8 <HAL_SPI_Receive+0x334>)
 800bea4:	4013      	ands	r3, r2
 800bea6:	88f9      	ldrh	r1, [r7, #6]
 800bea8:	68fa      	ldr	r2, [r7, #12]
 800beaa:	6812      	ldr	r2, [r2, #0]
 800beac:	430b      	orrs	r3, r1
 800beae:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	681a      	ldr	r2, [r3, #0]
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f042 0201 	orr.w	r2, r2, #1
 800bebe:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	685b      	ldr	r3, [r3, #4]
 800bec4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bec8:	d107      	bne.n	800beda <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bed8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	68db      	ldr	r3, [r3, #12]
 800bede:	2b0f      	cmp	r3, #15
 800bee0:	d96c      	bls.n	800bfbc <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bee2:	e064      	b.n	800bfae <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	695b      	ldr	r3, [r3, #20]
 800beea:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	695b      	ldr	r3, [r3, #20]
 800bef2:	f003 0301 	and.w	r3, r3, #1
 800bef6:	2b01      	cmp	r3, #1
 800bef8:	d114      	bne.n	800bf24 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	681a      	ldr	r2, [r3, #0]
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf02:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bf04:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf0a:	1d1a      	adds	r2, r3, #4
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bf16:	b29b      	uxth	r3, r3
 800bf18:	3b01      	subs	r3, #1
 800bf1a:	b29a      	uxth	r2, r3
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bf22:	e044      	b.n	800bfae <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bf2a:	b29b      	uxth	r3, r3
 800bf2c:	8bfa      	ldrh	r2, [r7, #30]
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d919      	bls.n	800bf66 <HAL_SPI_Receive+0x1a2>
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d014      	beq.n	800bf66 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681a      	ldr	r2, [r3, #0]
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf44:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bf46:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf4c:	1d1a      	adds	r2, r3, #4
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	3b01      	subs	r3, #1
 800bf5c:	b29a      	uxth	r2, r3
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bf64:	e023      	b.n	800bfae <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf66:	f7f6 fd37 	bl	80029d8 <HAL_GetTick>
 800bf6a:	4602      	mov	r2, r0
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	1ad3      	subs	r3, r2, r3
 800bf70:	683a      	ldr	r2, [r7, #0]
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d803      	bhi.n	800bf7e <HAL_SPI_Receive+0x1ba>
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf7c:	d102      	bne.n	800bf84 <HAL_SPI_Receive+0x1c0>
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d114      	bne.n	800bfae <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bf84:	68f8      	ldr	r0, [r7, #12]
 800bf86:	f000 f98f 	bl	800c2a8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf90:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bfaa:	2303      	movs	r3, #3
 800bfac:	e178      	b.n	800c2a0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bfb4:	b29b      	uxth	r3, r3
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d194      	bne.n	800bee4 <HAL_SPI_Receive+0x120>
 800bfba:	e15e      	b.n	800c27a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	68db      	ldr	r3, [r3, #12]
 800bfc0:	2b07      	cmp	r3, #7
 800bfc2:	f240 8153 	bls.w	800c26c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bfc6:	e08f      	b.n	800c0e8 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	695b      	ldr	r3, [r3, #20]
 800bfce:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	695b      	ldr	r3, [r3, #20]
 800bfd6:	f003 0301 	and.w	r3, r3, #1
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d114      	bne.n	800c008 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bfe2:	69ba      	ldr	r2, [r7, #24]
 800bfe4:	8812      	ldrh	r2, [r2, #0]
 800bfe6:	b292      	uxth	r2, r2
 800bfe8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bfee:	1c9a      	adds	r2, r3, #2
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bffa:	b29b      	uxth	r3, r3
 800bffc:	3b01      	subs	r3, #1
 800bffe:	b29a      	uxth	r2, r3
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c006:	e06f      	b.n	800c0e8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c00e:	b29b      	uxth	r3, r3
 800c010:	8bfa      	ldrh	r2, [r7, #30]
 800c012:	429a      	cmp	r2, r3
 800c014:	d924      	bls.n	800c060 <HAL_SPI_Receive+0x29c>
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d01f      	beq.n	800c060 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c024:	69ba      	ldr	r2, [r7, #24]
 800c026:	8812      	ldrh	r2, [r2, #0]
 800c028:	b292      	uxth	r2, r2
 800c02a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c030:	1c9a      	adds	r2, r3, #2
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c03a:	69ba      	ldr	r2, [r7, #24]
 800c03c:	8812      	ldrh	r2, [r2, #0]
 800c03e:	b292      	uxth	r2, r2
 800c040:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c046:	1c9a      	adds	r2, r3, #2
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c052:	b29b      	uxth	r3, r3
 800c054:	3b02      	subs	r3, #2
 800c056:	b29a      	uxth	r2, r3
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c05e:	e043      	b.n	800c0e8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c066:	b29b      	uxth	r3, r3
 800c068:	2b01      	cmp	r3, #1
 800c06a:	d119      	bne.n	800c0a0 <HAL_SPI_Receive+0x2dc>
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c072:	2b00      	cmp	r3, #0
 800c074:	d014      	beq.n	800c0a0 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c07a:	69ba      	ldr	r2, [r7, #24]
 800c07c:	8812      	ldrh	r2, [r2, #0]
 800c07e:	b292      	uxth	r2, r2
 800c080:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c086:	1c9a      	adds	r2, r3, #2
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c092:	b29b      	uxth	r3, r3
 800c094:	3b01      	subs	r3, #1
 800c096:	b29a      	uxth	r2, r3
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c09e:	e023      	b.n	800c0e8 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c0a0:	f7f6 fc9a 	bl	80029d8 <HAL_GetTick>
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	1ad3      	subs	r3, r2, r3
 800c0aa:	683a      	ldr	r2, [r7, #0]
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d803      	bhi.n	800c0b8 <HAL_SPI_Receive+0x2f4>
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0b6:	d102      	bne.n	800c0be <HAL_SPI_Receive+0x2fa>
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d114      	bne.n	800c0e8 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c0be:	68f8      	ldr	r0, [r7, #12]
 800c0c0:	f000 f8f2 	bl	800c2a8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c0ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c0e4:	2303      	movs	r3, #3
 800c0e6:	e0db      	b.n	800c2a0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c0ee:	b29b      	uxth	r3, r3
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	f47f af69 	bne.w	800bfc8 <HAL_SPI_Receive+0x204>
 800c0f6:	e0c0      	b.n	800c27a <HAL_SPI_Receive+0x4b6>
 800c0f8:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	695b      	ldr	r3, [r3, #20]
 800c102:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	695b      	ldr	r3, [r3, #20]
 800c10a:	f003 0301 	and.w	r3, r3, #1
 800c10e:	2b01      	cmp	r3, #1
 800c110:	d117      	bne.n	800c142 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c11e:	7812      	ldrb	r2, [r2, #0]
 800c120:	b2d2      	uxtb	r2, r2
 800c122:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c128:	1c5a      	adds	r2, r3, #1
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c134:	b29b      	uxth	r3, r3
 800c136:	3b01      	subs	r3, #1
 800c138:	b29a      	uxth	r2, r3
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c140:	e094      	b.n	800c26c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c148:	b29b      	uxth	r3, r3
 800c14a:	8bfa      	ldrh	r2, [r7, #30]
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d946      	bls.n	800c1de <HAL_SPI_Receive+0x41a>
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c156:	2b00      	cmp	r3, #0
 800c158:	d041      	beq.n	800c1de <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c166:	7812      	ldrb	r2, [r2, #0]
 800c168:	b2d2      	uxtb	r2, r2
 800c16a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c170:	1c5a      	adds	r2, r3, #1
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c182:	7812      	ldrb	r2, [r2, #0]
 800c184:	b2d2      	uxtb	r2, r2
 800c186:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c18c:	1c5a      	adds	r2, r3, #1
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c19e:	7812      	ldrb	r2, [r2, #0]
 800c1a0:	b2d2      	uxtb	r2, r2
 800c1a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c1a8:	1c5a      	adds	r2, r3, #1
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c1ba:	7812      	ldrb	r2, [r2, #0]
 800c1bc:	b2d2      	uxtb	r2, r2
 800c1be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c1c4:	1c5a      	adds	r2, r3, #1
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c1d0:	b29b      	uxth	r3, r3
 800c1d2:	3b04      	subs	r3, #4
 800c1d4:	b29a      	uxth	r2, r3
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c1dc:	e046      	b.n	800c26c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c1e4:	b29b      	uxth	r3, r3
 800c1e6:	2b03      	cmp	r3, #3
 800c1e8:	d81c      	bhi.n	800c224 <HAL_SPI_Receive+0x460>
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d017      	beq.n	800c224 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c200:	7812      	ldrb	r2, [r2, #0]
 800c202:	b2d2      	uxtb	r2, r2
 800c204:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c20a:	1c5a      	adds	r2, r3, #1
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c216:	b29b      	uxth	r3, r3
 800c218:	3b01      	subs	r3, #1
 800c21a:	b29a      	uxth	r2, r3
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c222:	e023      	b.n	800c26c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c224:	f7f6 fbd8 	bl	80029d8 <HAL_GetTick>
 800c228:	4602      	mov	r2, r0
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	1ad3      	subs	r3, r2, r3
 800c22e:	683a      	ldr	r2, [r7, #0]
 800c230:	429a      	cmp	r2, r3
 800c232:	d803      	bhi.n	800c23c <HAL_SPI_Receive+0x478>
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c23a:	d102      	bne.n	800c242 <HAL_SPI_Receive+0x47e>
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d114      	bne.n	800c26c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c242:	68f8      	ldr	r0, [r7, #12]
 800c244:	f000 f830 	bl	800c2a8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c24e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	2201      	movs	r2, #1
 800c25c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	2200      	movs	r2, #0
 800c264:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c268:	2303      	movs	r3, #3
 800c26a:	e019      	b.n	800c2a0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c272:	b29b      	uxth	r3, r3
 800c274:	2b00      	cmp	r3, #0
 800c276:	f47f af41 	bne.w	800c0fc <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c27a:	68f8      	ldr	r0, [r7, #12]
 800c27c:	f000 f814 	bl	800c2a8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	2201      	movs	r2, #1
 800c284:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	2200      	movs	r2, #0
 800c28c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c296:	2b00      	cmp	r3, #0
 800c298:	d001      	beq.n	800c29e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800c29a:	2301      	movs	r3, #1
 800c29c:	e000      	b.n	800c2a0 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800c29e:	2300      	movs	r3, #0
  }
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3720      	adds	r7, #32
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b085      	sub	sp, #20
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	695b      	ldr	r3, [r3, #20]
 800c2b6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	699a      	ldr	r2, [r3, #24]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f042 0208 	orr.w	r2, r2, #8
 800c2c6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	699a      	ldr	r2, [r3, #24]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f042 0210 	orr.w	r2, r2, #16
 800c2d6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	681a      	ldr	r2, [r3, #0]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f022 0201 	bic.w	r2, r2, #1
 800c2e6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	6919      	ldr	r1, [r3, #16]
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681a      	ldr	r2, [r3, #0]
 800c2f2:	4b3c      	ldr	r3, [pc, #240]	@ (800c3e4 <SPI_CloseTransfer+0x13c>)
 800c2f4:	400b      	ands	r3, r1
 800c2f6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	689a      	ldr	r2, [r3, #8]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c306:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c30e:	b2db      	uxtb	r3, r3
 800c310:	2b04      	cmp	r3, #4
 800c312:	d014      	beq.n	800c33e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	f003 0320 	and.w	r3, r3, #32
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d00f      	beq.n	800c33e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c324:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	699a      	ldr	r2, [r3, #24]
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f042 0220 	orr.w	r2, r2, #32
 800c33c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c344:	b2db      	uxtb	r3, r3
 800c346:	2b03      	cmp	r3, #3
 800c348:	d014      	beq.n	800c374 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c350:	2b00      	cmp	r3, #0
 800c352:	d00f      	beq.n	800c374 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c35a:	f043 0204 	orr.w	r2, r3, #4
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	699a      	ldr	r2, [r3, #24]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c372:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d00f      	beq.n	800c39e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c384:	f043 0201 	orr.w	r2, r3, #1
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	699a      	ldr	r2, [r3, #24]
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c39c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d00f      	beq.n	800c3c8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c3ae:	f043 0208 	orr.w	r2, r3, #8
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	699a      	ldr	r2, [r3, #24]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c3c6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800c3d8:	bf00      	nop
 800c3da:	3714      	adds	r7, #20
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr
 800c3e4:	fffffc90 	.word	0xfffffc90

0800c3e8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b084      	sub	sp, #16
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	60b9      	str	r1, [r7, #8]
 800c3f2:	603b      	str	r3, [r7, #0]
 800c3f4:	4613      	mov	r3, r2
 800c3f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c3f8:	e010      	b.n	800c41c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c3fa:	f7f6 faed 	bl	80029d8 <HAL_GetTick>
 800c3fe:	4602      	mov	r2, r0
 800c400:	69bb      	ldr	r3, [r7, #24]
 800c402:	1ad3      	subs	r3, r2, r3
 800c404:	683a      	ldr	r2, [r7, #0]
 800c406:	429a      	cmp	r2, r3
 800c408:	d803      	bhi.n	800c412 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c410:	d102      	bne.n	800c418 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d101      	bne.n	800c41c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c418:	2303      	movs	r3, #3
 800c41a:	e00f      	b.n	800c43c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	695a      	ldr	r2, [r3, #20]
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	4013      	ands	r3, r2
 800c426:	68ba      	ldr	r2, [r7, #8]
 800c428:	429a      	cmp	r2, r3
 800c42a:	bf0c      	ite	eq
 800c42c:	2301      	moveq	r3, #1
 800c42e:	2300      	movne	r3, #0
 800c430:	b2db      	uxtb	r3, r3
 800c432:	461a      	mov	r2, r3
 800c434:	79fb      	ldrb	r3, [r7, #7]
 800c436:	429a      	cmp	r2, r3
 800c438:	d0df      	beq.n	800c3fa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c43a:	2300      	movs	r3, #0
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3710      	adds	r7, #16
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}

0800c444 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c444:	b480      	push	{r7}
 800c446:	b085      	sub	sp, #20
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c450:	095b      	lsrs	r3, r3, #5
 800c452:	3301      	adds	r3, #1
 800c454:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	68db      	ldr	r3, [r3, #12]
 800c45a:	3301      	adds	r3, #1
 800c45c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	3307      	adds	r3, #7
 800c462:	08db      	lsrs	r3, r3, #3
 800c464:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	68fa      	ldr	r2, [r7, #12]
 800c46a:	fb02 f303 	mul.w	r3, r2, r3
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3714      	adds	r7, #20
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr

0800c47a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c47a:	b580      	push	{r7, lr}
 800c47c:	b082      	sub	sp, #8
 800c47e:	af00      	add	r7, sp, #0
 800c480:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d101      	bne.n	800c48c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c488:	2301      	movs	r3, #1
 800c48a:	e049      	b.n	800c520 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c492:	b2db      	uxtb	r3, r3
 800c494:	2b00      	cmp	r3, #0
 800c496:	d106      	bne.n	800c4a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2200      	movs	r2, #0
 800c49c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f006 f8b5 	bl	8012610 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2202      	movs	r2, #2
 800c4aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681a      	ldr	r2, [r3, #0]
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	3304      	adds	r3, #4
 800c4b6:	4619      	mov	r1, r3
 800c4b8:	4610      	mov	r0, r2
 800c4ba:	f000 fc3d 	bl	800cd38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2201      	movs	r2, #1
 800c4c2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2201      	movs	r2, #1
 800c4d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2201      	movs	r2, #1
 800c4da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2201      	movs	r2, #1
 800c4e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2201      	movs	r2, #1
 800c4f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2201      	movs	r2, #1
 800c4fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2201      	movs	r2, #1
 800c502:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2201      	movs	r2, #1
 800c50a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2201      	movs	r2, #1
 800c512:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2201      	movs	r2, #1
 800c51a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c51e:	2300      	movs	r3, #0
}
 800c520:	4618      	mov	r0, r3
 800c522:	3708      	adds	r7, #8
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b082      	sub	sp, #8
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d101      	bne.n	800c53a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c536:	2301      	movs	r3, #1
 800c538:	e049      	b.n	800c5ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c540:	b2db      	uxtb	r3, r3
 800c542:	2b00      	cmp	r3, #0
 800c544:	d106      	bne.n	800c554 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2200      	movs	r2, #0
 800c54a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f006 f880 	bl	8012654 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2202      	movs	r2, #2
 800c558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681a      	ldr	r2, [r3, #0]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	3304      	adds	r3, #4
 800c564:	4619      	mov	r1, r3
 800c566:	4610      	mov	r0, r2
 800c568:	f000 fbe6 	bl	800cd38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2201      	movs	r2, #1
 800c570:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2201      	movs	r2, #1
 800c578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2201      	movs	r2, #1
 800c580:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2201      	movs	r2, #1
 800c588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2201      	movs	r2, #1
 800c590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2201      	movs	r2, #1
 800c598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2201      	movs	r2, #1
 800c5a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2201      	movs	r2, #1
 800c5c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c5cc:	2300      	movs	r3, #0
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3708      	adds	r7, #8
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
	...

0800c5d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b084      	sub	sp, #16
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d109      	bne.n	800c5fc <HAL_TIM_PWM_Start+0x24>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c5ee:	b2db      	uxtb	r3, r3
 800c5f0:	2b01      	cmp	r3, #1
 800c5f2:	bf14      	ite	ne
 800c5f4:	2301      	movne	r3, #1
 800c5f6:	2300      	moveq	r3, #0
 800c5f8:	b2db      	uxtb	r3, r3
 800c5fa:	e03c      	b.n	800c676 <HAL_TIM_PWM_Start+0x9e>
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	2b04      	cmp	r3, #4
 800c600:	d109      	bne.n	800c616 <HAL_TIM_PWM_Start+0x3e>
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c608:	b2db      	uxtb	r3, r3
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	bf14      	ite	ne
 800c60e:	2301      	movne	r3, #1
 800c610:	2300      	moveq	r3, #0
 800c612:	b2db      	uxtb	r3, r3
 800c614:	e02f      	b.n	800c676 <HAL_TIM_PWM_Start+0x9e>
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	2b08      	cmp	r3, #8
 800c61a:	d109      	bne.n	800c630 <HAL_TIM_PWM_Start+0x58>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c622:	b2db      	uxtb	r3, r3
 800c624:	2b01      	cmp	r3, #1
 800c626:	bf14      	ite	ne
 800c628:	2301      	movne	r3, #1
 800c62a:	2300      	moveq	r3, #0
 800c62c:	b2db      	uxtb	r3, r3
 800c62e:	e022      	b.n	800c676 <HAL_TIM_PWM_Start+0x9e>
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	2b0c      	cmp	r3, #12
 800c634:	d109      	bne.n	800c64a <HAL_TIM_PWM_Start+0x72>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c63c:	b2db      	uxtb	r3, r3
 800c63e:	2b01      	cmp	r3, #1
 800c640:	bf14      	ite	ne
 800c642:	2301      	movne	r3, #1
 800c644:	2300      	moveq	r3, #0
 800c646:	b2db      	uxtb	r3, r3
 800c648:	e015      	b.n	800c676 <HAL_TIM_PWM_Start+0x9e>
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	2b10      	cmp	r3, #16
 800c64e:	d109      	bne.n	800c664 <HAL_TIM_PWM_Start+0x8c>
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c656:	b2db      	uxtb	r3, r3
 800c658:	2b01      	cmp	r3, #1
 800c65a:	bf14      	ite	ne
 800c65c:	2301      	movne	r3, #1
 800c65e:	2300      	moveq	r3, #0
 800c660:	b2db      	uxtb	r3, r3
 800c662:	e008      	b.n	800c676 <HAL_TIM_PWM_Start+0x9e>
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c66a:	b2db      	uxtb	r3, r3
 800c66c:	2b01      	cmp	r3, #1
 800c66e:	bf14      	ite	ne
 800c670:	2301      	movne	r3, #1
 800c672:	2300      	moveq	r3, #0
 800c674:	b2db      	uxtb	r3, r3
 800c676:	2b00      	cmp	r3, #0
 800c678:	d001      	beq.n	800c67e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c67a:	2301      	movs	r3, #1
 800c67c:	e0a1      	b.n	800c7c2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d104      	bne.n	800c68e <HAL_TIM_PWM_Start+0xb6>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2202      	movs	r2, #2
 800c688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c68c:	e023      	b.n	800c6d6 <HAL_TIM_PWM_Start+0xfe>
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	2b04      	cmp	r3, #4
 800c692:	d104      	bne.n	800c69e <HAL_TIM_PWM_Start+0xc6>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2202      	movs	r2, #2
 800c698:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c69c:	e01b      	b.n	800c6d6 <HAL_TIM_PWM_Start+0xfe>
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	2b08      	cmp	r3, #8
 800c6a2:	d104      	bne.n	800c6ae <HAL_TIM_PWM_Start+0xd6>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2202      	movs	r2, #2
 800c6a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c6ac:	e013      	b.n	800c6d6 <HAL_TIM_PWM_Start+0xfe>
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	2b0c      	cmp	r3, #12
 800c6b2:	d104      	bne.n	800c6be <HAL_TIM_PWM_Start+0xe6>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2202      	movs	r2, #2
 800c6b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c6bc:	e00b      	b.n	800c6d6 <HAL_TIM_PWM_Start+0xfe>
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	2b10      	cmp	r3, #16
 800c6c2:	d104      	bne.n	800c6ce <HAL_TIM_PWM_Start+0xf6>
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2202      	movs	r2, #2
 800c6c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c6cc:	e003      	b.n	800c6d6 <HAL_TIM_PWM_Start+0xfe>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2202      	movs	r2, #2
 800c6d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	2201      	movs	r2, #1
 800c6dc:	6839      	ldr	r1, [r7, #0]
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f000 ff3e 	bl	800d560 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	4a38      	ldr	r2, [pc, #224]	@ (800c7cc <HAL_TIM_PWM_Start+0x1f4>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d013      	beq.n	800c716 <HAL_TIM_PWM_Start+0x13e>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	4a37      	ldr	r2, [pc, #220]	@ (800c7d0 <HAL_TIM_PWM_Start+0x1f8>)
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d00e      	beq.n	800c716 <HAL_TIM_PWM_Start+0x13e>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	4a35      	ldr	r2, [pc, #212]	@ (800c7d4 <HAL_TIM_PWM_Start+0x1fc>)
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d009      	beq.n	800c716 <HAL_TIM_PWM_Start+0x13e>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	4a34      	ldr	r2, [pc, #208]	@ (800c7d8 <HAL_TIM_PWM_Start+0x200>)
 800c708:	4293      	cmp	r3, r2
 800c70a:	d004      	beq.n	800c716 <HAL_TIM_PWM_Start+0x13e>
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	4a32      	ldr	r2, [pc, #200]	@ (800c7dc <HAL_TIM_PWM_Start+0x204>)
 800c712:	4293      	cmp	r3, r2
 800c714:	d101      	bne.n	800c71a <HAL_TIM_PWM_Start+0x142>
 800c716:	2301      	movs	r3, #1
 800c718:	e000      	b.n	800c71c <HAL_TIM_PWM_Start+0x144>
 800c71a:	2300      	movs	r3, #0
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d007      	beq.n	800c730 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c72e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4a25      	ldr	r2, [pc, #148]	@ (800c7cc <HAL_TIM_PWM_Start+0x1f4>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d022      	beq.n	800c780 <HAL_TIM_PWM_Start+0x1a8>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c742:	d01d      	beq.n	800c780 <HAL_TIM_PWM_Start+0x1a8>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4a25      	ldr	r2, [pc, #148]	@ (800c7e0 <HAL_TIM_PWM_Start+0x208>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d018      	beq.n	800c780 <HAL_TIM_PWM_Start+0x1a8>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	4a24      	ldr	r2, [pc, #144]	@ (800c7e4 <HAL_TIM_PWM_Start+0x20c>)
 800c754:	4293      	cmp	r3, r2
 800c756:	d013      	beq.n	800c780 <HAL_TIM_PWM_Start+0x1a8>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4a22      	ldr	r2, [pc, #136]	@ (800c7e8 <HAL_TIM_PWM_Start+0x210>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d00e      	beq.n	800c780 <HAL_TIM_PWM_Start+0x1a8>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	4a1a      	ldr	r2, [pc, #104]	@ (800c7d0 <HAL_TIM_PWM_Start+0x1f8>)
 800c768:	4293      	cmp	r3, r2
 800c76a:	d009      	beq.n	800c780 <HAL_TIM_PWM_Start+0x1a8>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	4a1e      	ldr	r2, [pc, #120]	@ (800c7ec <HAL_TIM_PWM_Start+0x214>)
 800c772:	4293      	cmp	r3, r2
 800c774:	d004      	beq.n	800c780 <HAL_TIM_PWM_Start+0x1a8>
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4a16      	ldr	r2, [pc, #88]	@ (800c7d4 <HAL_TIM_PWM_Start+0x1fc>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d115      	bne.n	800c7ac <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	689a      	ldr	r2, [r3, #8]
 800c786:	4b1a      	ldr	r3, [pc, #104]	@ (800c7f0 <HAL_TIM_PWM_Start+0x218>)
 800c788:	4013      	ands	r3, r2
 800c78a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	2b06      	cmp	r3, #6
 800c790:	d015      	beq.n	800c7be <HAL_TIM_PWM_Start+0x1e6>
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c798:	d011      	beq.n	800c7be <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	681a      	ldr	r2, [r3, #0]
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	f042 0201 	orr.w	r2, r2, #1
 800c7a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7aa:	e008      	b.n	800c7be <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f042 0201 	orr.w	r2, r2, #1
 800c7ba:	601a      	str	r2, [r3, #0]
 800c7bc:	e000      	b.n	800c7c0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c7c0:	2300      	movs	r3, #0
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3710      	adds	r7, #16
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}
 800c7ca:	bf00      	nop
 800c7cc:	40010000 	.word	0x40010000
 800c7d0:	40010400 	.word	0x40010400
 800c7d4:	40014000 	.word	0x40014000
 800c7d8:	40014400 	.word	0x40014400
 800c7dc:	40014800 	.word	0x40014800
 800c7e0:	40000400 	.word	0x40000400
 800c7e4:	40000800 	.word	0x40000800
 800c7e8:	40000c00 	.word	0x40000c00
 800c7ec:	40001800 	.word	0x40001800
 800c7f0:	00010007 	.word	0x00010007

0800c7f4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	2200      	movs	r2, #0
 800c804:	6839      	ldr	r1, [r7, #0]
 800c806:	4618      	mov	r0, r3
 800c808:	f000 feaa 	bl	800d560 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	4a3e      	ldr	r2, [pc, #248]	@ (800c90c <HAL_TIM_PWM_Stop+0x118>)
 800c812:	4293      	cmp	r3, r2
 800c814:	d013      	beq.n	800c83e <HAL_TIM_PWM_Stop+0x4a>
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	4a3d      	ldr	r2, [pc, #244]	@ (800c910 <HAL_TIM_PWM_Stop+0x11c>)
 800c81c:	4293      	cmp	r3, r2
 800c81e:	d00e      	beq.n	800c83e <HAL_TIM_PWM_Stop+0x4a>
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	4a3b      	ldr	r2, [pc, #236]	@ (800c914 <HAL_TIM_PWM_Stop+0x120>)
 800c826:	4293      	cmp	r3, r2
 800c828:	d009      	beq.n	800c83e <HAL_TIM_PWM_Stop+0x4a>
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	4a3a      	ldr	r2, [pc, #232]	@ (800c918 <HAL_TIM_PWM_Stop+0x124>)
 800c830:	4293      	cmp	r3, r2
 800c832:	d004      	beq.n	800c83e <HAL_TIM_PWM_Stop+0x4a>
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	4a38      	ldr	r2, [pc, #224]	@ (800c91c <HAL_TIM_PWM_Stop+0x128>)
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d101      	bne.n	800c842 <HAL_TIM_PWM_Stop+0x4e>
 800c83e:	2301      	movs	r3, #1
 800c840:	e000      	b.n	800c844 <HAL_TIM_PWM_Stop+0x50>
 800c842:	2300      	movs	r3, #0
 800c844:	2b00      	cmp	r3, #0
 800c846:	d017      	beq.n	800c878 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	6a1a      	ldr	r2, [r3, #32]
 800c84e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800c852:	4013      	ands	r3, r2
 800c854:	2b00      	cmp	r3, #0
 800c856:	d10f      	bne.n	800c878 <HAL_TIM_PWM_Stop+0x84>
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	6a1a      	ldr	r2, [r3, #32]
 800c85e:	f240 4344 	movw	r3, #1092	@ 0x444
 800c862:	4013      	ands	r3, r2
 800c864:	2b00      	cmp	r3, #0
 800c866:	d107      	bne.n	800c878 <HAL_TIM_PWM_Stop+0x84>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c876:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	6a1a      	ldr	r2, [r3, #32]
 800c87e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800c882:	4013      	ands	r3, r2
 800c884:	2b00      	cmp	r3, #0
 800c886:	d10f      	bne.n	800c8a8 <HAL_TIM_PWM_Stop+0xb4>
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	6a1a      	ldr	r2, [r3, #32]
 800c88e:	f240 4344 	movw	r3, #1092	@ 0x444
 800c892:	4013      	ands	r3, r2
 800c894:	2b00      	cmp	r3, #0
 800c896:	d107      	bne.n	800c8a8 <HAL_TIM_PWM_Stop+0xb4>
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	681a      	ldr	r2, [r3, #0]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f022 0201 	bic.w	r2, r2, #1
 800c8a6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d104      	bne.n	800c8b8 <HAL_TIM_PWM_Stop+0xc4>
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c8b6:	e023      	b.n	800c900 <HAL_TIM_PWM_Stop+0x10c>
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	2b04      	cmp	r3, #4
 800c8bc:	d104      	bne.n	800c8c8 <HAL_TIM_PWM_Stop+0xd4>
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2201      	movs	r2, #1
 800c8c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c8c6:	e01b      	b.n	800c900 <HAL_TIM_PWM_Stop+0x10c>
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	2b08      	cmp	r3, #8
 800c8cc:	d104      	bne.n	800c8d8 <HAL_TIM_PWM_Stop+0xe4>
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2201      	movs	r2, #1
 800c8d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c8d6:	e013      	b.n	800c900 <HAL_TIM_PWM_Stop+0x10c>
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	2b0c      	cmp	r3, #12
 800c8dc:	d104      	bne.n	800c8e8 <HAL_TIM_PWM_Stop+0xf4>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c8e6:	e00b      	b.n	800c900 <HAL_TIM_PWM_Stop+0x10c>
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	2b10      	cmp	r3, #16
 800c8ec:	d104      	bne.n	800c8f8 <HAL_TIM_PWM_Stop+0x104>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2201      	movs	r2, #1
 800c8f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c8f6:	e003      	b.n	800c900 <HAL_TIM_PWM_Stop+0x10c>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800c900:	2300      	movs	r3, #0
}
 800c902:	4618      	mov	r0, r3
 800c904:	3708      	adds	r7, #8
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}
 800c90a:	bf00      	nop
 800c90c:	40010000 	.word	0x40010000
 800c910:	40010400 	.word	0x40010400
 800c914:	40014000 	.word	0x40014000
 800c918:	40014400 	.word	0x40014400
 800c91c:	40014800 	.word	0x40014800

0800c920 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b086      	sub	sp, #24
 800c924:	af00      	add	r7, sp, #0
 800c926:	60f8      	str	r0, [r7, #12]
 800c928:	60b9      	str	r1, [r7, #8]
 800c92a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c92c:	2300      	movs	r3, #0
 800c92e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c936:	2b01      	cmp	r3, #1
 800c938:	d101      	bne.n	800c93e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c93a:	2302      	movs	r3, #2
 800c93c:	e0ff      	b.n	800cb3e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	2201      	movs	r2, #1
 800c942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2b14      	cmp	r3, #20
 800c94a:	f200 80f0 	bhi.w	800cb2e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c94e:	a201      	add	r2, pc, #4	@ (adr r2, 800c954 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c954:	0800c9a9 	.word	0x0800c9a9
 800c958:	0800cb2f 	.word	0x0800cb2f
 800c95c:	0800cb2f 	.word	0x0800cb2f
 800c960:	0800cb2f 	.word	0x0800cb2f
 800c964:	0800c9e9 	.word	0x0800c9e9
 800c968:	0800cb2f 	.word	0x0800cb2f
 800c96c:	0800cb2f 	.word	0x0800cb2f
 800c970:	0800cb2f 	.word	0x0800cb2f
 800c974:	0800ca2b 	.word	0x0800ca2b
 800c978:	0800cb2f 	.word	0x0800cb2f
 800c97c:	0800cb2f 	.word	0x0800cb2f
 800c980:	0800cb2f 	.word	0x0800cb2f
 800c984:	0800ca6b 	.word	0x0800ca6b
 800c988:	0800cb2f 	.word	0x0800cb2f
 800c98c:	0800cb2f 	.word	0x0800cb2f
 800c990:	0800cb2f 	.word	0x0800cb2f
 800c994:	0800caad 	.word	0x0800caad
 800c998:	0800cb2f 	.word	0x0800cb2f
 800c99c:	0800cb2f 	.word	0x0800cb2f
 800c9a0:	0800cb2f 	.word	0x0800cb2f
 800c9a4:	0800caed 	.word	0x0800caed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	68b9      	ldr	r1, [r7, #8]
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f000 fa62 	bl	800ce78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	699a      	ldr	r2, [r3, #24]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f042 0208 	orr.w	r2, r2, #8
 800c9c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	699a      	ldr	r2, [r3, #24]
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	f022 0204 	bic.w	r2, r2, #4
 800c9d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	6999      	ldr	r1, [r3, #24]
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	691a      	ldr	r2, [r3, #16]
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	430a      	orrs	r2, r1
 800c9e4:	619a      	str	r2, [r3, #24]
      break;
 800c9e6:	e0a5      	b.n	800cb34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	68b9      	ldr	r1, [r7, #8]
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f000 fad2 	bl	800cf98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	699a      	ldr	r2, [r3, #24]
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ca02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	699a      	ldr	r2, [r3, #24]
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ca12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	6999      	ldr	r1, [r3, #24]
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	691b      	ldr	r3, [r3, #16]
 800ca1e:	021a      	lsls	r2, r3, #8
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	430a      	orrs	r2, r1
 800ca26:	619a      	str	r2, [r3, #24]
      break;
 800ca28:	e084      	b.n	800cb34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	68b9      	ldr	r1, [r7, #8]
 800ca30:	4618      	mov	r0, r3
 800ca32:	f000 fb3b 	bl	800d0ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	69da      	ldr	r2, [r3, #28]
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f042 0208 	orr.w	r2, r2, #8
 800ca44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	69da      	ldr	r2, [r3, #28]
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f022 0204 	bic.w	r2, r2, #4
 800ca54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	69d9      	ldr	r1, [r3, #28]
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	691a      	ldr	r2, [r3, #16]
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	430a      	orrs	r2, r1
 800ca66:	61da      	str	r2, [r3, #28]
      break;
 800ca68:	e064      	b.n	800cb34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	68b9      	ldr	r1, [r7, #8]
 800ca70:	4618      	mov	r0, r3
 800ca72:	f000 fba3 	bl	800d1bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	69da      	ldr	r2, [r3, #28]
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ca84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	69da      	ldr	r2, [r3, #28]
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ca94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	69d9      	ldr	r1, [r3, #28]
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	691b      	ldr	r3, [r3, #16]
 800caa0:	021a      	lsls	r2, r3, #8
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	430a      	orrs	r2, r1
 800caa8:	61da      	str	r2, [r3, #28]
      break;
 800caaa:	e043      	b.n	800cb34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	68b9      	ldr	r1, [r7, #8]
 800cab2:	4618      	mov	r0, r3
 800cab4:	f000 fbec 	bl	800d290 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f042 0208 	orr.w	r2, r2, #8
 800cac6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f022 0204 	bic.w	r2, r2, #4
 800cad6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	691a      	ldr	r2, [r3, #16]
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	430a      	orrs	r2, r1
 800cae8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800caea:	e023      	b.n	800cb34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	68b9      	ldr	r1, [r7, #8]
 800caf2:	4618      	mov	r0, r3
 800caf4:	f000 fc30 	bl	800d358 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cb06:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cb16:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	691b      	ldr	r3, [r3, #16]
 800cb22:	021a      	lsls	r2, r3, #8
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	430a      	orrs	r2, r1
 800cb2a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800cb2c:	e002      	b.n	800cb34 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cb2e:	2301      	movs	r3, #1
 800cb30:	75fb      	strb	r3, [r7, #23]
      break;
 800cb32:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	2200      	movs	r2, #0
 800cb38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cb3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3718      	adds	r7, #24
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
 800cb46:	bf00      	nop

0800cb48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b084      	sub	sp, #16
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
 800cb50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cb52:	2300      	movs	r3, #0
 800cb54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cb5c:	2b01      	cmp	r3, #1
 800cb5e:	d101      	bne.n	800cb64 <HAL_TIM_ConfigClockSource+0x1c>
 800cb60:	2302      	movs	r3, #2
 800cb62:	e0dc      	b.n	800cd1e <HAL_TIM_ConfigClockSource+0x1d6>
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2201      	movs	r2, #1
 800cb68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2202      	movs	r2, #2
 800cb70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	689b      	ldr	r3, [r3, #8]
 800cb7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cb7c:	68ba      	ldr	r2, [r7, #8]
 800cb7e:	4b6a      	ldr	r3, [pc, #424]	@ (800cd28 <HAL_TIM_ConfigClockSource+0x1e0>)
 800cb80:	4013      	ands	r3, r2
 800cb82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cb8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	68ba      	ldr	r2, [r7, #8]
 800cb92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	4a64      	ldr	r2, [pc, #400]	@ (800cd2c <HAL_TIM_ConfigClockSource+0x1e4>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	f000 80a9 	beq.w	800ccf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cba0:	4a62      	ldr	r2, [pc, #392]	@ (800cd2c <HAL_TIM_ConfigClockSource+0x1e4>)
 800cba2:	4293      	cmp	r3, r2
 800cba4:	f200 80ae 	bhi.w	800cd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cba8:	4a61      	ldr	r2, [pc, #388]	@ (800cd30 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	f000 80a1 	beq.w	800ccf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cbb0:	4a5f      	ldr	r2, [pc, #380]	@ (800cd30 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	f200 80a6 	bhi.w	800cd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbb8:	4a5e      	ldr	r2, [pc, #376]	@ (800cd34 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	f000 8099 	beq.w	800ccf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cbc0:	4a5c      	ldr	r2, [pc, #368]	@ (800cd34 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	f200 809e 	bhi.w	800cd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbc8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cbcc:	f000 8091 	beq.w	800ccf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cbd0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cbd4:	f200 8096 	bhi.w	800cd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbd8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cbdc:	f000 8089 	beq.w	800ccf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cbe0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cbe4:	f200 808e 	bhi.w	800cd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbe8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cbec:	d03e      	beq.n	800cc6c <HAL_TIM_ConfigClockSource+0x124>
 800cbee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cbf2:	f200 8087 	bhi.w	800cd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cbfa:	f000 8086 	beq.w	800cd0a <HAL_TIM_ConfigClockSource+0x1c2>
 800cbfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc02:	d87f      	bhi.n	800cd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc04:	2b70      	cmp	r3, #112	@ 0x70
 800cc06:	d01a      	beq.n	800cc3e <HAL_TIM_ConfigClockSource+0xf6>
 800cc08:	2b70      	cmp	r3, #112	@ 0x70
 800cc0a:	d87b      	bhi.n	800cd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc0c:	2b60      	cmp	r3, #96	@ 0x60
 800cc0e:	d050      	beq.n	800ccb2 <HAL_TIM_ConfigClockSource+0x16a>
 800cc10:	2b60      	cmp	r3, #96	@ 0x60
 800cc12:	d877      	bhi.n	800cd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc14:	2b50      	cmp	r3, #80	@ 0x50
 800cc16:	d03c      	beq.n	800cc92 <HAL_TIM_ConfigClockSource+0x14a>
 800cc18:	2b50      	cmp	r3, #80	@ 0x50
 800cc1a:	d873      	bhi.n	800cd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc1c:	2b40      	cmp	r3, #64	@ 0x40
 800cc1e:	d058      	beq.n	800ccd2 <HAL_TIM_ConfigClockSource+0x18a>
 800cc20:	2b40      	cmp	r3, #64	@ 0x40
 800cc22:	d86f      	bhi.n	800cd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc24:	2b30      	cmp	r3, #48	@ 0x30
 800cc26:	d064      	beq.n	800ccf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cc28:	2b30      	cmp	r3, #48	@ 0x30
 800cc2a:	d86b      	bhi.n	800cd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc2c:	2b20      	cmp	r3, #32
 800cc2e:	d060      	beq.n	800ccf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cc30:	2b20      	cmp	r3, #32
 800cc32:	d867      	bhi.n	800cd04 <HAL_TIM_ConfigClockSource+0x1bc>
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d05c      	beq.n	800ccf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cc38:	2b10      	cmp	r3, #16
 800cc3a:	d05a      	beq.n	800ccf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cc3c:	e062      	b.n	800cd04 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cc4e:	f000 fc67 	bl	800d520 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	689b      	ldr	r3, [r3, #8]
 800cc58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800cc60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	68ba      	ldr	r2, [r7, #8]
 800cc68:	609a      	str	r2, [r3, #8]
      break;
 800cc6a:	e04f      	b.n	800cd0c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cc7c:	f000 fc50 	bl	800d520 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	689a      	ldr	r2, [r3, #8]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cc8e:	609a      	str	r2, [r3, #8]
      break;
 800cc90:	e03c      	b.n	800cd0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc9e:	461a      	mov	r2, r3
 800cca0:	f000 fbc0 	bl	800d424 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	2150      	movs	r1, #80	@ 0x50
 800ccaa:	4618      	mov	r0, r3
 800ccac:	f000 fc1a 	bl	800d4e4 <TIM_ITRx_SetConfig>
      break;
 800ccb0:	e02c      	b.n	800cd0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	f000 fbdf 	bl	800d482 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	2160      	movs	r1, #96	@ 0x60
 800ccca:	4618      	mov	r0, r3
 800cccc:	f000 fc0a 	bl	800d4e4 <TIM_ITRx_SetConfig>
      break;
 800ccd0:	e01c      	b.n	800cd0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ccde:	461a      	mov	r2, r3
 800cce0:	f000 fba0 	bl	800d424 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	2140      	movs	r1, #64	@ 0x40
 800ccea:	4618      	mov	r0, r3
 800ccec:	f000 fbfa 	bl	800d4e4 <TIM_ITRx_SetConfig>
      break;
 800ccf0:	e00c      	b.n	800cd0c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681a      	ldr	r2, [r3, #0]
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	4619      	mov	r1, r3
 800ccfc:	4610      	mov	r0, r2
 800ccfe:	f000 fbf1 	bl	800d4e4 <TIM_ITRx_SetConfig>
      break;
 800cd02:	e003      	b.n	800cd0c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800cd04:	2301      	movs	r3, #1
 800cd06:	73fb      	strb	r3, [r7, #15]
      break;
 800cd08:	e000      	b.n	800cd0c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800cd0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2201      	movs	r2, #1
 800cd10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2200      	movs	r2, #0
 800cd18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cd1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3710      	adds	r7, #16
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
 800cd26:	bf00      	nop
 800cd28:	ffceff88 	.word	0xffceff88
 800cd2c:	00100040 	.word	0x00100040
 800cd30:	00100030 	.word	0x00100030
 800cd34:	00100020 	.word	0x00100020

0800cd38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b085      	sub	sp, #20
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	4a43      	ldr	r2, [pc, #268]	@ (800ce58 <TIM_Base_SetConfig+0x120>)
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	d013      	beq.n	800cd78 <TIM_Base_SetConfig+0x40>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd56:	d00f      	beq.n	800cd78 <TIM_Base_SetConfig+0x40>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	4a40      	ldr	r2, [pc, #256]	@ (800ce5c <TIM_Base_SetConfig+0x124>)
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d00b      	beq.n	800cd78 <TIM_Base_SetConfig+0x40>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	4a3f      	ldr	r2, [pc, #252]	@ (800ce60 <TIM_Base_SetConfig+0x128>)
 800cd64:	4293      	cmp	r3, r2
 800cd66:	d007      	beq.n	800cd78 <TIM_Base_SetConfig+0x40>
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	4a3e      	ldr	r2, [pc, #248]	@ (800ce64 <TIM_Base_SetConfig+0x12c>)
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d003      	beq.n	800cd78 <TIM_Base_SetConfig+0x40>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	4a3d      	ldr	r2, [pc, #244]	@ (800ce68 <TIM_Base_SetConfig+0x130>)
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d108      	bne.n	800cd8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	68fa      	ldr	r2, [r7, #12]
 800cd86:	4313      	orrs	r3, r2
 800cd88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	4a32      	ldr	r2, [pc, #200]	@ (800ce58 <TIM_Base_SetConfig+0x120>)
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d01f      	beq.n	800cdd2 <TIM_Base_SetConfig+0x9a>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd98:	d01b      	beq.n	800cdd2 <TIM_Base_SetConfig+0x9a>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	4a2f      	ldr	r2, [pc, #188]	@ (800ce5c <TIM_Base_SetConfig+0x124>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d017      	beq.n	800cdd2 <TIM_Base_SetConfig+0x9a>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	4a2e      	ldr	r2, [pc, #184]	@ (800ce60 <TIM_Base_SetConfig+0x128>)
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d013      	beq.n	800cdd2 <TIM_Base_SetConfig+0x9a>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	4a2d      	ldr	r2, [pc, #180]	@ (800ce64 <TIM_Base_SetConfig+0x12c>)
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	d00f      	beq.n	800cdd2 <TIM_Base_SetConfig+0x9a>
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	4a2c      	ldr	r2, [pc, #176]	@ (800ce68 <TIM_Base_SetConfig+0x130>)
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d00b      	beq.n	800cdd2 <TIM_Base_SetConfig+0x9a>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	4a2b      	ldr	r2, [pc, #172]	@ (800ce6c <TIM_Base_SetConfig+0x134>)
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	d007      	beq.n	800cdd2 <TIM_Base_SetConfig+0x9a>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	4a2a      	ldr	r2, [pc, #168]	@ (800ce70 <TIM_Base_SetConfig+0x138>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d003      	beq.n	800cdd2 <TIM_Base_SetConfig+0x9a>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	4a29      	ldr	r2, [pc, #164]	@ (800ce74 <TIM_Base_SetConfig+0x13c>)
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d108      	bne.n	800cde4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cdd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	68db      	ldr	r3, [r3, #12]
 800cdde:	68fa      	ldr	r2, [r7, #12]
 800cde0:	4313      	orrs	r3, r2
 800cde2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	695b      	ldr	r3, [r3, #20]
 800cdee:	4313      	orrs	r3, r2
 800cdf0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	689a      	ldr	r2, [r3, #8]
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	681a      	ldr	r2, [r3, #0]
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	4a14      	ldr	r2, [pc, #80]	@ (800ce58 <TIM_Base_SetConfig+0x120>)
 800ce06:	4293      	cmp	r3, r2
 800ce08:	d00f      	beq.n	800ce2a <TIM_Base_SetConfig+0xf2>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	4a16      	ldr	r2, [pc, #88]	@ (800ce68 <TIM_Base_SetConfig+0x130>)
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	d00b      	beq.n	800ce2a <TIM_Base_SetConfig+0xf2>
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	4a15      	ldr	r2, [pc, #84]	@ (800ce6c <TIM_Base_SetConfig+0x134>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d007      	beq.n	800ce2a <TIM_Base_SetConfig+0xf2>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	4a14      	ldr	r2, [pc, #80]	@ (800ce70 <TIM_Base_SetConfig+0x138>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d003      	beq.n	800ce2a <TIM_Base_SetConfig+0xf2>
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	4a13      	ldr	r2, [pc, #76]	@ (800ce74 <TIM_Base_SetConfig+0x13c>)
 800ce26:	4293      	cmp	r3, r2
 800ce28:	d103      	bne.n	800ce32 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	691a      	ldr	r2, [r3, #16]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f043 0204 	orr.w	r2, r3, #4
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2201      	movs	r2, #1
 800ce42:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	68fa      	ldr	r2, [r7, #12]
 800ce48:	601a      	str	r2, [r3, #0]
}
 800ce4a:	bf00      	nop
 800ce4c:	3714      	adds	r7, #20
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce54:	4770      	bx	lr
 800ce56:	bf00      	nop
 800ce58:	40010000 	.word	0x40010000
 800ce5c:	40000400 	.word	0x40000400
 800ce60:	40000800 	.word	0x40000800
 800ce64:	40000c00 	.word	0x40000c00
 800ce68:	40010400 	.word	0x40010400
 800ce6c:	40014000 	.word	0x40014000
 800ce70:	40014400 	.word	0x40014400
 800ce74:	40014800 	.word	0x40014800

0800ce78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b087      	sub	sp, #28
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6a1b      	ldr	r3, [r3, #32]
 800ce86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	6a1b      	ldr	r3, [r3, #32]
 800ce8c:	f023 0201 	bic.w	r2, r3, #1
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	685b      	ldr	r3, [r3, #4]
 800ce98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	699b      	ldr	r3, [r3, #24]
 800ce9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cea0:	68fa      	ldr	r2, [r7, #12]
 800cea2:	4b37      	ldr	r3, [pc, #220]	@ (800cf80 <TIM_OC1_SetConfig+0x108>)
 800cea4:	4013      	ands	r3, r2
 800cea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	f023 0303 	bic.w	r3, r3, #3
 800ceae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	68fa      	ldr	r2, [r7, #12]
 800ceb6:	4313      	orrs	r3, r2
 800ceb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	f023 0302 	bic.w	r3, r3, #2
 800cec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	689b      	ldr	r3, [r3, #8]
 800cec6:	697a      	ldr	r2, [r7, #20]
 800cec8:	4313      	orrs	r3, r2
 800ceca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	4a2d      	ldr	r2, [pc, #180]	@ (800cf84 <TIM_OC1_SetConfig+0x10c>)
 800ced0:	4293      	cmp	r3, r2
 800ced2:	d00f      	beq.n	800cef4 <TIM_OC1_SetConfig+0x7c>
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	4a2c      	ldr	r2, [pc, #176]	@ (800cf88 <TIM_OC1_SetConfig+0x110>)
 800ced8:	4293      	cmp	r3, r2
 800ceda:	d00b      	beq.n	800cef4 <TIM_OC1_SetConfig+0x7c>
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	4a2b      	ldr	r2, [pc, #172]	@ (800cf8c <TIM_OC1_SetConfig+0x114>)
 800cee0:	4293      	cmp	r3, r2
 800cee2:	d007      	beq.n	800cef4 <TIM_OC1_SetConfig+0x7c>
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	4a2a      	ldr	r2, [pc, #168]	@ (800cf90 <TIM_OC1_SetConfig+0x118>)
 800cee8:	4293      	cmp	r3, r2
 800ceea:	d003      	beq.n	800cef4 <TIM_OC1_SetConfig+0x7c>
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	4a29      	ldr	r2, [pc, #164]	@ (800cf94 <TIM_OC1_SetConfig+0x11c>)
 800cef0:	4293      	cmp	r3, r2
 800cef2:	d10c      	bne.n	800cf0e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	f023 0308 	bic.w	r3, r3, #8
 800cefa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	68db      	ldr	r3, [r3, #12]
 800cf00:	697a      	ldr	r2, [r7, #20]
 800cf02:	4313      	orrs	r3, r2
 800cf04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	f023 0304 	bic.w	r3, r3, #4
 800cf0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	4a1c      	ldr	r2, [pc, #112]	@ (800cf84 <TIM_OC1_SetConfig+0x10c>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d00f      	beq.n	800cf36 <TIM_OC1_SetConfig+0xbe>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	4a1b      	ldr	r2, [pc, #108]	@ (800cf88 <TIM_OC1_SetConfig+0x110>)
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	d00b      	beq.n	800cf36 <TIM_OC1_SetConfig+0xbe>
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	4a1a      	ldr	r2, [pc, #104]	@ (800cf8c <TIM_OC1_SetConfig+0x114>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d007      	beq.n	800cf36 <TIM_OC1_SetConfig+0xbe>
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	4a19      	ldr	r2, [pc, #100]	@ (800cf90 <TIM_OC1_SetConfig+0x118>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d003      	beq.n	800cf36 <TIM_OC1_SetConfig+0xbe>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	4a18      	ldr	r2, [pc, #96]	@ (800cf94 <TIM_OC1_SetConfig+0x11c>)
 800cf32:	4293      	cmp	r3, r2
 800cf34:	d111      	bne.n	800cf5a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cf3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cf44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	695b      	ldr	r3, [r3, #20]
 800cf4a:	693a      	ldr	r2, [r7, #16]
 800cf4c:	4313      	orrs	r3, r2
 800cf4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	699b      	ldr	r3, [r3, #24]
 800cf54:	693a      	ldr	r2, [r7, #16]
 800cf56:	4313      	orrs	r3, r2
 800cf58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	693a      	ldr	r2, [r7, #16]
 800cf5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	68fa      	ldr	r2, [r7, #12]
 800cf64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	685a      	ldr	r2, [r3, #4]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	697a      	ldr	r2, [r7, #20]
 800cf72:	621a      	str	r2, [r3, #32]
}
 800cf74:	bf00      	nop
 800cf76:	371c      	adds	r7, #28
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7e:	4770      	bx	lr
 800cf80:	fffeff8f 	.word	0xfffeff8f
 800cf84:	40010000 	.word	0x40010000
 800cf88:	40010400 	.word	0x40010400
 800cf8c:	40014000 	.word	0x40014000
 800cf90:	40014400 	.word	0x40014400
 800cf94:	40014800 	.word	0x40014800

0800cf98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cf98:	b480      	push	{r7}
 800cf9a:	b087      	sub	sp, #28
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
 800cfa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6a1b      	ldr	r3, [r3, #32]
 800cfa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6a1b      	ldr	r3, [r3, #32]
 800cfac:	f023 0210 	bic.w	r2, r3, #16
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	685b      	ldr	r3, [r3, #4]
 800cfb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	699b      	ldr	r3, [r3, #24]
 800cfbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cfc0:	68fa      	ldr	r2, [r7, #12]
 800cfc2:	4b34      	ldr	r3, [pc, #208]	@ (800d094 <TIM_OC2_SetConfig+0xfc>)
 800cfc4:	4013      	ands	r3, r2
 800cfc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cfce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	021b      	lsls	r3, r3, #8
 800cfd6:	68fa      	ldr	r2, [r7, #12]
 800cfd8:	4313      	orrs	r3, r2
 800cfda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	f023 0320 	bic.w	r3, r3, #32
 800cfe2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	689b      	ldr	r3, [r3, #8]
 800cfe8:	011b      	lsls	r3, r3, #4
 800cfea:	697a      	ldr	r2, [r7, #20]
 800cfec:	4313      	orrs	r3, r2
 800cfee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	4a29      	ldr	r2, [pc, #164]	@ (800d098 <TIM_OC2_SetConfig+0x100>)
 800cff4:	4293      	cmp	r3, r2
 800cff6:	d003      	beq.n	800d000 <TIM_OC2_SetConfig+0x68>
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	4a28      	ldr	r2, [pc, #160]	@ (800d09c <TIM_OC2_SetConfig+0x104>)
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d10d      	bne.n	800d01c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	68db      	ldr	r3, [r3, #12]
 800d00c:	011b      	lsls	r3, r3, #4
 800d00e:	697a      	ldr	r2, [r7, #20]
 800d010:	4313      	orrs	r3, r2
 800d012:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d014:	697b      	ldr	r3, [r7, #20]
 800d016:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d01a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	4a1e      	ldr	r2, [pc, #120]	@ (800d098 <TIM_OC2_SetConfig+0x100>)
 800d020:	4293      	cmp	r3, r2
 800d022:	d00f      	beq.n	800d044 <TIM_OC2_SetConfig+0xac>
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	4a1d      	ldr	r2, [pc, #116]	@ (800d09c <TIM_OC2_SetConfig+0x104>)
 800d028:	4293      	cmp	r3, r2
 800d02a:	d00b      	beq.n	800d044 <TIM_OC2_SetConfig+0xac>
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	4a1c      	ldr	r2, [pc, #112]	@ (800d0a0 <TIM_OC2_SetConfig+0x108>)
 800d030:	4293      	cmp	r3, r2
 800d032:	d007      	beq.n	800d044 <TIM_OC2_SetConfig+0xac>
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	4a1b      	ldr	r2, [pc, #108]	@ (800d0a4 <TIM_OC2_SetConfig+0x10c>)
 800d038:	4293      	cmp	r3, r2
 800d03a:	d003      	beq.n	800d044 <TIM_OC2_SetConfig+0xac>
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	4a1a      	ldr	r2, [pc, #104]	@ (800d0a8 <TIM_OC2_SetConfig+0x110>)
 800d040:	4293      	cmp	r3, r2
 800d042:	d113      	bne.n	800d06c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d04a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d04c:	693b      	ldr	r3, [r7, #16]
 800d04e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d052:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	695b      	ldr	r3, [r3, #20]
 800d058:	009b      	lsls	r3, r3, #2
 800d05a:	693a      	ldr	r2, [r7, #16]
 800d05c:	4313      	orrs	r3, r2
 800d05e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	699b      	ldr	r3, [r3, #24]
 800d064:	009b      	lsls	r3, r3, #2
 800d066:	693a      	ldr	r2, [r7, #16]
 800d068:	4313      	orrs	r3, r2
 800d06a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	693a      	ldr	r2, [r7, #16]
 800d070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	68fa      	ldr	r2, [r7, #12]
 800d076:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	685a      	ldr	r2, [r3, #4]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	697a      	ldr	r2, [r7, #20]
 800d084:	621a      	str	r2, [r3, #32]
}
 800d086:	bf00      	nop
 800d088:	371c      	adds	r7, #28
 800d08a:	46bd      	mov	sp, r7
 800d08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d090:	4770      	bx	lr
 800d092:	bf00      	nop
 800d094:	feff8fff 	.word	0xfeff8fff
 800d098:	40010000 	.word	0x40010000
 800d09c:	40010400 	.word	0x40010400
 800d0a0:	40014000 	.word	0x40014000
 800d0a4:	40014400 	.word	0x40014400
 800d0a8:	40014800 	.word	0x40014800

0800d0ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b087      	sub	sp, #28
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6a1b      	ldr	r3, [r3, #32]
 800d0ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	6a1b      	ldr	r3, [r3, #32]
 800d0c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	685b      	ldr	r3, [r3, #4]
 800d0cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	69db      	ldr	r3, [r3, #28]
 800d0d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d0d4:	68fa      	ldr	r2, [r7, #12]
 800d0d6:	4b33      	ldr	r3, [pc, #204]	@ (800d1a4 <TIM_OC3_SetConfig+0xf8>)
 800d0d8:	4013      	ands	r3, r2
 800d0da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	f023 0303 	bic.w	r3, r3, #3
 800d0e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	68fa      	ldr	r2, [r7, #12]
 800d0ea:	4313      	orrs	r3, r2
 800d0ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d0f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	689b      	ldr	r3, [r3, #8]
 800d0fa:	021b      	lsls	r3, r3, #8
 800d0fc:	697a      	ldr	r2, [r7, #20]
 800d0fe:	4313      	orrs	r3, r2
 800d100:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	4a28      	ldr	r2, [pc, #160]	@ (800d1a8 <TIM_OC3_SetConfig+0xfc>)
 800d106:	4293      	cmp	r3, r2
 800d108:	d003      	beq.n	800d112 <TIM_OC3_SetConfig+0x66>
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	4a27      	ldr	r2, [pc, #156]	@ (800d1ac <TIM_OC3_SetConfig+0x100>)
 800d10e:	4293      	cmp	r3, r2
 800d110:	d10d      	bne.n	800d12e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d118:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	68db      	ldr	r3, [r3, #12]
 800d11e:	021b      	lsls	r3, r3, #8
 800d120:	697a      	ldr	r2, [r7, #20]
 800d122:	4313      	orrs	r3, r2
 800d124:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d12c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	4a1d      	ldr	r2, [pc, #116]	@ (800d1a8 <TIM_OC3_SetConfig+0xfc>)
 800d132:	4293      	cmp	r3, r2
 800d134:	d00f      	beq.n	800d156 <TIM_OC3_SetConfig+0xaa>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	4a1c      	ldr	r2, [pc, #112]	@ (800d1ac <TIM_OC3_SetConfig+0x100>)
 800d13a:	4293      	cmp	r3, r2
 800d13c:	d00b      	beq.n	800d156 <TIM_OC3_SetConfig+0xaa>
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	4a1b      	ldr	r2, [pc, #108]	@ (800d1b0 <TIM_OC3_SetConfig+0x104>)
 800d142:	4293      	cmp	r3, r2
 800d144:	d007      	beq.n	800d156 <TIM_OC3_SetConfig+0xaa>
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	4a1a      	ldr	r2, [pc, #104]	@ (800d1b4 <TIM_OC3_SetConfig+0x108>)
 800d14a:	4293      	cmp	r3, r2
 800d14c:	d003      	beq.n	800d156 <TIM_OC3_SetConfig+0xaa>
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	4a19      	ldr	r2, [pc, #100]	@ (800d1b8 <TIM_OC3_SetConfig+0x10c>)
 800d152:	4293      	cmp	r3, r2
 800d154:	d113      	bne.n	800d17e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d15c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	695b      	ldr	r3, [r3, #20]
 800d16a:	011b      	lsls	r3, r3, #4
 800d16c:	693a      	ldr	r2, [r7, #16]
 800d16e:	4313      	orrs	r3, r2
 800d170:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	699b      	ldr	r3, [r3, #24]
 800d176:	011b      	lsls	r3, r3, #4
 800d178:	693a      	ldr	r2, [r7, #16]
 800d17a:	4313      	orrs	r3, r2
 800d17c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	693a      	ldr	r2, [r7, #16]
 800d182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	68fa      	ldr	r2, [r7, #12]
 800d188:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	685a      	ldr	r2, [r3, #4]
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	697a      	ldr	r2, [r7, #20]
 800d196:	621a      	str	r2, [r3, #32]
}
 800d198:	bf00      	nop
 800d19a:	371c      	adds	r7, #28
 800d19c:	46bd      	mov	sp, r7
 800d19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a2:	4770      	bx	lr
 800d1a4:	fffeff8f 	.word	0xfffeff8f
 800d1a8:	40010000 	.word	0x40010000
 800d1ac:	40010400 	.word	0x40010400
 800d1b0:	40014000 	.word	0x40014000
 800d1b4:	40014400 	.word	0x40014400
 800d1b8:	40014800 	.word	0x40014800

0800d1bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b087      	sub	sp, #28
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6a1b      	ldr	r3, [r3, #32]
 800d1ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6a1b      	ldr	r3, [r3, #32]
 800d1d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	685b      	ldr	r3, [r3, #4]
 800d1dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	69db      	ldr	r3, [r3, #28]
 800d1e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d1e4:	68fa      	ldr	r2, [r7, #12]
 800d1e6:	4b24      	ldr	r3, [pc, #144]	@ (800d278 <TIM_OC4_SetConfig+0xbc>)
 800d1e8:	4013      	ands	r3, r2
 800d1ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d1f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	021b      	lsls	r3, r3, #8
 800d1fa:	68fa      	ldr	r2, [r7, #12]
 800d1fc:	4313      	orrs	r3, r2
 800d1fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d206:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	689b      	ldr	r3, [r3, #8]
 800d20c:	031b      	lsls	r3, r3, #12
 800d20e:	693a      	ldr	r2, [r7, #16]
 800d210:	4313      	orrs	r3, r2
 800d212:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	4a19      	ldr	r2, [pc, #100]	@ (800d27c <TIM_OC4_SetConfig+0xc0>)
 800d218:	4293      	cmp	r3, r2
 800d21a:	d00f      	beq.n	800d23c <TIM_OC4_SetConfig+0x80>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	4a18      	ldr	r2, [pc, #96]	@ (800d280 <TIM_OC4_SetConfig+0xc4>)
 800d220:	4293      	cmp	r3, r2
 800d222:	d00b      	beq.n	800d23c <TIM_OC4_SetConfig+0x80>
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	4a17      	ldr	r2, [pc, #92]	@ (800d284 <TIM_OC4_SetConfig+0xc8>)
 800d228:	4293      	cmp	r3, r2
 800d22a:	d007      	beq.n	800d23c <TIM_OC4_SetConfig+0x80>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	4a16      	ldr	r2, [pc, #88]	@ (800d288 <TIM_OC4_SetConfig+0xcc>)
 800d230:	4293      	cmp	r3, r2
 800d232:	d003      	beq.n	800d23c <TIM_OC4_SetConfig+0x80>
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	4a15      	ldr	r2, [pc, #84]	@ (800d28c <TIM_OC4_SetConfig+0xd0>)
 800d238:	4293      	cmp	r3, r2
 800d23a:	d109      	bne.n	800d250 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d242:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	695b      	ldr	r3, [r3, #20]
 800d248:	019b      	lsls	r3, r3, #6
 800d24a:	697a      	ldr	r2, [r7, #20]
 800d24c:	4313      	orrs	r3, r2
 800d24e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	697a      	ldr	r2, [r7, #20]
 800d254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	68fa      	ldr	r2, [r7, #12]
 800d25a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	685a      	ldr	r2, [r3, #4]
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	693a      	ldr	r2, [r7, #16]
 800d268:	621a      	str	r2, [r3, #32]
}
 800d26a:	bf00      	nop
 800d26c:	371c      	adds	r7, #28
 800d26e:	46bd      	mov	sp, r7
 800d270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d274:	4770      	bx	lr
 800d276:	bf00      	nop
 800d278:	feff8fff 	.word	0xfeff8fff
 800d27c:	40010000 	.word	0x40010000
 800d280:	40010400 	.word	0x40010400
 800d284:	40014000 	.word	0x40014000
 800d288:	40014400 	.word	0x40014400
 800d28c:	40014800 	.word	0x40014800

0800d290 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d290:	b480      	push	{r7}
 800d292:	b087      	sub	sp, #28
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6a1b      	ldr	r3, [r3, #32]
 800d29e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6a1b      	ldr	r3, [r3, #32]
 800d2a4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	685b      	ldr	r3, [r3, #4]
 800d2b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d2b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d2b8:	68fa      	ldr	r2, [r7, #12]
 800d2ba:	4b21      	ldr	r3, [pc, #132]	@ (800d340 <TIM_OC5_SetConfig+0xb0>)
 800d2bc:	4013      	ands	r3, r2
 800d2be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	68fa      	ldr	r2, [r7, #12]
 800d2c6:	4313      	orrs	r3, r2
 800d2c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d2ca:	693b      	ldr	r3, [r7, #16]
 800d2cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d2d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	689b      	ldr	r3, [r3, #8]
 800d2d6:	041b      	lsls	r3, r3, #16
 800d2d8:	693a      	ldr	r2, [r7, #16]
 800d2da:	4313      	orrs	r3, r2
 800d2dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	4a18      	ldr	r2, [pc, #96]	@ (800d344 <TIM_OC5_SetConfig+0xb4>)
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	d00f      	beq.n	800d306 <TIM_OC5_SetConfig+0x76>
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	4a17      	ldr	r2, [pc, #92]	@ (800d348 <TIM_OC5_SetConfig+0xb8>)
 800d2ea:	4293      	cmp	r3, r2
 800d2ec:	d00b      	beq.n	800d306 <TIM_OC5_SetConfig+0x76>
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	4a16      	ldr	r2, [pc, #88]	@ (800d34c <TIM_OC5_SetConfig+0xbc>)
 800d2f2:	4293      	cmp	r3, r2
 800d2f4:	d007      	beq.n	800d306 <TIM_OC5_SetConfig+0x76>
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	4a15      	ldr	r2, [pc, #84]	@ (800d350 <TIM_OC5_SetConfig+0xc0>)
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	d003      	beq.n	800d306 <TIM_OC5_SetConfig+0x76>
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	4a14      	ldr	r2, [pc, #80]	@ (800d354 <TIM_OC5_SetConfig+0xc4>)
 800d302:	4293      	cmp	r3, r2
 800d304:	d109      	bne.n	800d31a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d30c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	695b      	ldr	r3, [r3, #20]
 800d312:	021b      	lsls	r3, r3, #8
 800d314:	697a      	ldr	r2, [r7, #20]
 800d316:	4313      	orrs	r3, r2
 800d318:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	697a      	ldr	r2, [r7, #20]
 800d31e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	68fa      	ldr	r2, [r7, #12]
 800d324:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	685a      	ldr	r2, [r3, #4]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	693a      	ldr	r2, [r7, #16]
 800d332:	621a      	str	r2, [r3, #32]
}
 800d334:	bf00      	nop
 800d336:	371c      	adds	r7, #28
 800d338:	46bd      	mov	sp, r7
 800d33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33e:	4770      	bx	lr
 800d340:	fffeff8f 	.word	0xfffeff8f
 800d344:	40010000 	.word	0x40010000
 800d348:	40010400 	.word	0x40010400
 800d34c:	40014000 	.word	0x40014000
 800d350:	40014400 	.word	0x40014400
 800d354:	40014800 	.word	0x40014800

0800d358 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d358:	b480      	push	{r7}
 800d35a:	b087      	sub	sp, #28
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6a1b      	ldr	r3, [r3, #32]
 800d366:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	6a1b      	ldr	r3, [r3, #32]
 800d36c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	685b      	ldr	r3, [r3, #4]
 800d378:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d37e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d380:	68fa      	ldr	r2, [r7, #12]
 800d382:	4b22      	ldr	r3, [pc, #136]	@ (800d40c <TIM_OC6_SetConfig+0xb4>)
 800d384:	4013      	ands	r3, r2
 800d386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	021b      	lsls	r3, r3, #8
 800d38e:	68fa      	ldr	r2, [r7, #12]
 800d390:	4313      	orrs	r3, r2
 800d392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d39a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	689b      	ldr	r3, [r3, #8]
 800d3a0:	051b      	lsls	r3, r3, #20
 800d3a2:	693a      	ldr	r2, [r7, #16]
 800d3a4:	4313      	orrs	r3, r2
 800d3a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	4a19      	ldr	r2, [pc, #100]	@ (800d410 <TIM_OC6_SetConfig+0xb8>)
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	d00f      	beq.n	800d3d0 <TIM_OC6_SetConfig+0x78>
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	4a18      	ldr	r2, [pc, #96]	@ (800d414 <TIM_OC6_SetConfig+0xbc>)
 800d3b4:	4293      	cmp	r3, r2
 800d3b6:	d00b      	beq.n	800d3d0 <TIM_OC6_SetConfig+0x78>
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	4a17      	ldr	r2, [pc, #92]	@ (800d418 <TIM_OC6_SetConfig+0xc0>)
 800d3bc:	4293      	cmp	r3, r2
 800d3be:	d007      	beq.n	800d3d0 <TIM_OC6_SetConfig+0x78>
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	4a16      	ldr	r2, [pc, #88]	@ (800d41c <TIM_OC6_SetConfig+0xc4>)
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	d003      	beq.n	800d3d0 <TIM_OC6_SetConfig+0x78>
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	4a15      	ldr	r2, [pc, #84]	@ (800d420 <TIM_OC6_SetConfig+0xc8>)
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	d109      	bne.n	800d3e4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d3d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	695b      	ldr	r3, [r3, #20]
 800d3dc:	029b      	lsls	r3, r3, #10
 800d3de:	697a      	ldr	r2, [r7, #20]
 800d3e0:	4313      	orrs	r3, r2
 800d3e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	697a      	ldr	r2, [r7, #20]
 800d3e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	68fa      	ldr	r2, [r7, #12]
 800d3ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	685a      	ldr	r2, [r3, #4]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	693a      	ldr	r2, [r7, #16]
 800d3fc:	621a      	str	r2, [r3, #32]
}
 800d3fe:	bf00      	nop
 800d400:	371c      	adds	r7, #28
 800d402:	46bd      	mov	sp, r7
 800d404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d408:	4770      	bx	lr
 800d40a:	bf00      	nop
 800d40c:	feff8fff 	.word	0xfeff8fff
 800d410:	40010000 	.word	0x40010000
 800d414:	40010400 	.word	0x40010400
 800d418:	40014000 	.word	0x40014000
 800d41c:	40014400 	.word	0x40014400
 800d420:	40014800 	.word	0x40014800

0800d424 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d424:	b480      	push	{r7}
 800d426:	b087      	sub	sp, #28
 800d428:	af00      	add	r7, sp, #0
 800d42a:	60f8      	str	r0, [r7, #12]
 800d42c:	60b9      	str	r1, [r7, #8]
 800d42e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	6a1b      	ldr	r3, [r3, #32]
 800d434:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	6a1b      	ldr	r3, [r3, #32]
 800d43a:	f023 0201 	bic.w	r2, r3, #1
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	699b      	ldr	r3, [r3, #24]
 800d446:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d44e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	011b      	lsls	r3, r3, #4
 800d454:	693a      	ldr	r2, [r7, #16]
 800d456:	4313      	orrs	r3, r2
 800d458:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d45a:	697b      	ldr	r3, [r7, #20]
 800d45c:	f023 030a 	bic.w	r3, r3, #10
 800d460:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d462:	697a      	ldr	r2, [r7, #20]
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	4313      	orrs	r3, r2
 800d468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	693a      	ldr	r2, [r7, #16]
 800d46e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	697a      	ldr	r2, [r7, #20]
 800d474:	621a      	str	r2, [r3, #32]
}
 800d476:	bf00      	nop
 800d478:	371c      	adds	r7, #28
 800d47a:	46bd      	mov	sp, r7
 800d47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d480:	4770      	bx	lr

0800d482 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d482:	b480      	push	{r7}
 800d484:	b087      	sub	sp, #28
 800d486:	af00      	add	r7, sp, #0
 800d488:	60f8      	str	r0, [r7, #12]
 800d48a:	60b9      	str	r1, [r7, #8]
 800d48c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	6a1b      	ldr	r3, [r3, #32]
 800d492:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	6a1b      	ldr	r3, [r3, #32]
 800d498:	f023 0210 	bic.w	r2, r3, #16
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	699b      	ldr	r3, [r3, #24]
 800d4a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d4ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	031b      	lsls	r3, r3, #12
 800d4b2:	693a      	ldr	r2, [r7, #16]
 800d4b4:	4313      	orrs	r3, r2
 800d4b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d4b8:	697b      	ldr	r3, [r7, #20]
 800d4ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d4be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	011b      	lsls	r3, r3, #4
 800d4c4:	697a      	ldr	r2, [r7, #20]
 800d4c6:	4313      	orrs	r3, r2
 800d4c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	693a      	ldr	r2, [r7, #16]
 800d4ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	697a      	ldr	r2, [r7, #20]
 800d4d4:	621a      	str	r2, [r3, #32]
}
 800d4d6:	bf00      	nop
 800d4d8:	371c      	adds	r7, #28
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e0:	4770      	bx	lr
	...

0800d4e4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b085      	sub	sp, #20
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	689b      	ldr	r3, [r3, #8]
 800d4f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d4f4:	68fa      	ldr	r2, [r7, #12]
 800d4f6:	4b09      	ldr	r3, [pc, #36]	@ (800d51c <TIM_ITRx_SetConfig+0x38>)
 800d4f8:	4013      	ands	r3, r2
 800d4fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d4fc:	683a      	ldr	r2, [r7, #0]
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	4313      	orrs	r3, r2
 800d502:	f043 0307 	orr.w	r3, r3, #7
 800d506:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	68fa      	ldr	r2, [r7, #12]
 800d50c:	609a      	str	r2, [r3, #8]
}
 800d50e:	bf00      	nop
 800d510:	3714      	adds	r7, #20
 800d512:	46bd      	mov	sp, r7
 800d514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d518:	4770      	bx	lr
 800d51a:	bf00      	nop
 800d51c:	ffcfff8f 	.word	0xffcfff8f

0800d520 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d520:	b480      	push	{r7}
 800d522:	b087      	sub	sp, #28
 800d524:	af00      	add	r7, sp, #0
 800d526:	60f8      	str	r0, [r7, #12]
 800d528:	60b9      	str	r1, [r7, #8]
 800d52a:	607a      	str	r2, [r7, #4]
 800d52c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	689b      	ldr	r3, [r3, #8]
 800d532:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d53a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	021a      	lsls	r2, r3, #8
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	431a      	orrs	r2, r3
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	4313      	orrs	r3, r2
 800d548:	697a      	ldr	r2, [r7, #20]
 800d54a:	4313      	orrs	r3, r2
 800d54c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	697a      	ldr	r2, [r7, #20]
 800d552:	609a      	str	r2, [r3, #8]
}
 800d554:	bf00      	nop
 800d556:	371c      	adds	r7, #28
 800d558:	46bd      	mov	sp, r7
 800d55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55e:	4770      	bx	lr

0800d560 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d560:	b480      	push	{r7}
 800d562:	b087      	sub	sp, #28
 800d564:	af00      	add	r7, sp, #0
 800d566:	60f8      	str	r0, [r7, #12]
 800d568:	60b9      	str	r1, [r7, #8]
 800d56a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	f003 031f 	and.w	r3, r3, #31
 800d572:	2201      	movs	r2, #1
 800d574:	fa02 f303 	lsl.w	r3, r2, r3
 800d578:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	6a1a      	ldr	r2, [r3, #32]
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	43db      	mvns	r3, r3
 800d582:	401a      	ands	r2, r3
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	6a1a      	ldr	r2, [r3, #32]
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	f003 031f 	and.w	r3, r3, #31
 800d592:	6879      	ldr	r1, [r7, #4]
 800d594:	fa01 f303 	lsl.w	r3, r1, r3
 800d598:	431a      	orrs	r2, r3
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	621a      	str	r2, [r3, #32]
}
 800d59e:	bf00      	nop
 800d5a0:	371c      	adds	r7, #28
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a8:	4770      	bx	lr
	...

0800d5ac <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b084      	sub	sp, #16
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
 800d5b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d109      	bne.n	800d5d0 <HAL_TIMEx_PWMN_Start+0x24>
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d5c2:	b2db      	uxtb	r3, r3
 800d5c4:	2b01      	cmp	r3, #1
 800d5c6:	bf14      	ite	ne
 800d5c8:	2301      	movne	r3, #1
 800d5ca:	2300      	moveq	r3, #0
 800d5cc:	b2db      	uxtb	r3, r3
 800d5ce:	e022      	b.n	800d616 <HAL_TIMEx_PWMN_Start+0x6a>
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	2b04      	cmp	r3, #4
 800d5d4:	d109      	bne.n	800d5ea <HAL_TIMEx_PWMN_Start+0x3e>
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d5dc:	b2db      	uxtb	r3, r3
 800d5de:	2b01      	cmp	r3, #1
 800d5e0:	bf14      	ite	ne
 800d5e2:	2301      	movne	r3, #1
 800d5e4:	2300      	moveq	r3, #0
 800d5e6:	b2db      	uxtb	r3, r3
 800d5e8:	e015      	b.n	800d616 <HAL_TIMEx_PWMN_Start+0x6a>
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	2b08      	cmp	r3, #8
 800d5ee:	d109      	bne.n	800d604 <HAL_TIMEx_PWMN_Start+0x58>
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800d5f6:	b2db      	uxtb	r3, r3
 800d5f8:	2b01      	cmp	r3, #1
 800d5fa:	bf14      	ite	ne
 800d5fc:	2301      	movne	r3, #1
 800d5fe:	2300      	moveq	r3, #0
 800d600:	b2db      	uxtb	r3, r3
 800d602:	e008      	b.n	800d616 <HAL_TIMEx_PWMN_Start+0x6a>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800d60a:	b2db      	uxtb	r3, r3
 800d60c:	2b01      	cmp	r3, #1
 800d60e:	bf14      	ite	ne
 800d610:	2301      	movne	r3, #1
 800d612:	2300      	moveq	r3, #0
 800d614:	b2db      	uxtb	r3, r3
 800d616:	2b00      	cmp	r3, #0
 800d618:	d001      	beq.n	800d61e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800d61a:	2301      	movs	r3, #1
 800d61c:	e073      	b.n	800d706 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d104      	bne.n	800d62e <HAL_TIMEx_PWMN_Start+0x82>
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2202      	movs	r2, #2
 800d628:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d62c:	e013      	b.n	800d656 <HAL_TIMEx_PWMN_Start+0xaa>
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	2b04      	cmp	r3, #4
 800d632:	d104      	bne.n	800d63e <HAL_TIMEx_PWMN_Start+0x92>
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2202      	movs	r2, #2
 800d638:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d63c:	e00b      	b.n	800d656 <HAL_TIMEx_PWMN_Start+0xaa>
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	2b08      	cmp	r3, #8
 800d642:	d104      	bne.n	800d64e <HAL_TIMEx_PWMN_Start+0xa2>
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2202      	movs	r2, #2
 800d648:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d64c:	e003      	b.n	800d656 <HAL_TIMEx_PWMN_Start+0xaa>
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2202      	movs	r2, #2
 800d652:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	2204      	movs	r2, #4
 800d65c:	6839      	ldr	r1, [r7, #0]
 800d65e:	4618      	mov	r0, r3
 800d660:	f000 f972 	bl	800d948 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d672:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	4a25      	ldr	r2, [pc, #148]	@ (800d710 <HAL_TIMEx_PWMN_Start+0x164>)
 800d67a:	4293      	cmp	r3, r2
 800d67c:	d022      	beq.n	800d6c4 <HAL_TIMEx_PWMN_Start+0x118>
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d686:	d01d      	beq.n	800d6c4 <HAL_TIMEx_PWMN_Start+0x118>
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	4a21      	ldr	r2, [pc, #132]	@ (800d714 <HAL_TIMEx_PWMN_Start+0x168>)
 800d68e:	4293      	cmp	r3, r2
 800d690:	d018      	beq.n	800d6c4 <HAL_TIMEx_PWMN_Start+0x118>
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	4a20      	ldr	r2, [pc, #128]	@ (800d718 <HAL_TIMEx_PWMN_Start+0x16c>)
 800d698:	4293      	cmp	r3, r2
 800d69a:	d013      	beq.n	800d6c4 <HAL_TIMEx_PWMN_Start+0x118>
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	4a1e      	ldr	r2, [pc, #120]	@ (800d71c <HAL_TIMEx_PWMN_Start+0x170>)
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	d00e      	beq.n	800d6c4 <HAL_TIMEx_PWMN_Start+0x118>
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	4a1d      	ldr	r2, [pc, #116]	@ (800d720 <HAL_TIMEx_PWMN_Start+0x174>)
 800d6ac:	4293      	cmp	r3, r2
 800d6ae:	d009      	beq.n	800d6c4 <HAL_TIMEx_PWMN_Start+0x118>
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	4a1b      	ldr	r2, [pc, #108]	@ (800d724 <HAL_TIMEx_PWMN_Start+0x178>)
 800d6b6:	4293      	cmp	r3, r2
 800d6b8:	d004      	beq.n	800d6c4 <HAL_TIMEx_PWMN_Start+0x118>
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	4a1a      	ldr	r2, [pc, #104]	@ (800d728 <HAL_TIMEx_PWMN_Start+0x17c>)
 800d6c0:	4293      	cmp	r3, r2
 800d6c2:	d115      	bne.n	800d6f0 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	689a      	ldr	r2, [r3, #8]
 800d6ca:	4b18      	ldr	r3, [pc, #96]	@ (800d72c <HAL_TIMEx_PWMN_Start+0x180>)
 800d6cc:	4013      	ands	r3, r2
 800d6ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	2b06      	cmp	r3, #6
 800d6d4:	d015      	beq.n	800d702 <HAL_TIMEx_PWMN_Start+0x156>
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d6dc:	d011      	beq.n	800d702 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	681a      	ldr	r2, [r3, #0]
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	f042 0201 	orr.w	r2, r2, #1
 800d6ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d6ee:	e008      	b.n	800d702 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	681a      	ldr	r2, [r3, #0]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	f042 0201 	orr.w	r2, r2, #1
 800d6fe:	601a      	str	r2, [r3, #0]
 800d700:	e000      	b.n	800d704 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d702:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d704:	2300      	movs	r3, #0
}
 800d706:	4618      	mov	r0, r3
 800d708:	3710      	adds	r7, #16
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}
 800d70e:	bf00      	nop
 800d710:	40010000 	.word	0x40010000
 800d714:	40000400 	.word	0x40000400
 800d718:	40000800 	.word	0x40000800
 800d71c:	40000c00 	.word	0x40000c00
 800d720:	40010400 	.word	0x40010400
 800d724:	40001800 	.word	0x40001800
 800d728:	40014000 	.word	0x40014000
 800d72c:	00010007 	.word	0x00010007

0800d730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d730:	b480      	push	{r7}
 800d732:	b085      	sub	sp, #20
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
 800d738:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d740:	2b01      	cmp	r3, #1
 800d742:	d101      	bne.n	800d748 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d744:	2302      	movs	r3, #2
 800d746:	e06d      	b.n	800d824 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2201      	movs	r2, #1
 800d74c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2202      	movs	r2, #2
 800d754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	685b      	ldr	r3, [r3, #4]
 800d75e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	689b      	ldr	r3, [r3, #8]
 800d766:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	4a30      	ldr	r2, [pc, #192]	@ (800d830 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d76e:	4293      	cmp	r3, r2
 800d770:	d004      	beq.n	800d77c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	4a2f      	ldr	r2, [pc, #188]	@ (800d834 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d778:	4293      	cmp	r3, r2
 800d77a:	d108      	bne.n	800d78e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d782:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	68fa      	ldr	r2, [r7, #12]
 800d78a:	4313      	orrs	r3, r2
 800d78c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d794:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	68fa      	ldr	r2, [r7, #12]
 800d79c:	4313      	orrs	r3, r2
 800d79e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	68fa      	ldr	r2, [r7, #12]
 800d7a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	4a20      	ldr	r2, [pc, #128]	@ (800d830 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d7ae:	4293      	cmp	r3, r2
 800d7b0:	d022      	beq.n	800d7f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d7ba:	d01d      	beq.n	800d7f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	4a1d      	ldr	r2, [pc, #116]	@ (800d838 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d7c2:	4293      	cmp	r3, r2
 800d7c4:	d018      	beq.n	800d7f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	4a1c      	ldr	r2, [pc, #112]	@ (800d83c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	d013      	beq.n	800d7f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	4a1a      	ldr	r2, [pc, #104]	@ (800d840 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d7d6:	4293      	cmp	r3, r2
 800d7d8:	d00e      	beq.n	800d7f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	4a15      	ldr	r2, [pc, #84]	@ (800d834 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	d009      	beq.n	800d7f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	4a16      	ldr	r2, [pc, #88]	@ (800d844 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	d004      	beq.n	800d7f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	4a15      	ldr	r2, [pc, #84]	@ (800d848 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d7f4:	4293      	cmp	r3, r2
 800d7f6:	d10c      	bne.n	800d812 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d7fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	689b      	ldr	r3, [r3, #8]
 800d804:	68ba      	ldr	r2, [r7, #8]
 800d806:	4313      	orrs	r3, r2
 800d808:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	68ba      	ldr	r2, [r7, #8]
 800d810:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2201      	movs	r2, #1
 800d816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2200      	movs	r2, #0
 800d81e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d822:	2300      	movs	r3, #0
}
 800d824:	4618      	mov	r0, r3
 800d826:	3714      	adds	r7, #20
 800d828:	46bd      	mov	sp, r7
 800d82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82e:	4770      	bx	lr
 800d830:	40010000 	.word	0x40010000
 800d834:	40010400 	.word	0x40010400
 800d838:	40000400 	.word	0x40000400
 800d83c:	40000800 	.word	0x40000800
 800d840:	40000c00 	.word	0x40000c00
 800d844:	40001800 	.word	0x40001800
 800d848:	40014000 	.word	0x40014000

0800d84c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d84c:	b480      	push	{r7}
 800d84e:	b085      	sub	sp, #20
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
 800d854:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d856:	2300      	movs	r3, #0
 800d858:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d860:	2b01      	cmp	r3, #1
 800d862:	d101      	bne.n	800d868 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d864:	2302      	movs	r3, #2
 800d866:	e065      	b.n	800d934 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2201      	movs	r2, #1
 800d86c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	68db      	ldr	r3, [r3, #12]
 800d87a:	4313      	orrs	r3, r2
 800d87c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	689b      	ldr	r3, [r3, #8]
 800d888:	4313      	orrs	r3, r2
 800d88a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	685b      	ldr	r3, [r3, #4]
 800d896:	4313      	orrs	r3, r2
 800d898:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	4313      	orrs	r3, r2
 800d8a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	691b      	ldr	r3, [r3, #16]
 800d8b2:	4313      	orrs	r3, r2
 800d8b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	695b      	ldr	r3, [r3, #20]
 800d8c0:	4313      	orrs	r3, r2
 800d8c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8ce:	4313      	orrs	r3, r2
 800d8d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	699b      	ldr	r3, [r3, #24]
 800d8dc:	041b      	lsls	r3, r3, #16
 800d8de:	4313      	orrs	r3, r2
 800d8e0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	4a16      	ldr	r2, [pc, #88]	@ (800d940 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d8e8:	4293      	cmp	r3, r2
 800d8ea:	d004      	beq.n	800d8f6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	4a14      	ldr	r2, [pc, #80]	@ (800d944 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	d115      	bne.n	800d922 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d900:	051b      	lsls	r3, r3, #20
 800d902:	4313      	orrs	r3, r2
 800d904:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	69db      	ldr	r3, [r3, #28]
 800d910:	4313      	orrs	r3, r2
 800d912:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	6a1b      	ldr	r3, [r3, #32]
 800d91e:	4313      	orrs	r3, r2
 800d920:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	68fa      	ldr	r2, [r7, #12]
 800d928:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2200      	movs	r2, #0
 800d92e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d932:	2300      	movs	r3, #0
}
 800d934:	4618      	mov	r0, r3
 800d936:	3714      	adds	r7, #20
 800d938:	46bd      	mov	sp, r7
 800d93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93e:	4770      	bx	lr
 800d940:	40010000 	.word	0x40010000
 800d944:	40010400 	.word	0x40010400

0800d948 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800d948:	b480      	push	{r7}
 800d94a:	b087      	sub	sp, #28
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	60f8      	str	r0, [r7, #12]
 800d950:	60b9      	str	r1, [r7, #8]
 800d952:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	f003 030f 	and.w	r3, r3, #15
 800d95a:	2204      	movs	r2, #4
 800d95c:	fa02 f303 	lsl.w	r3, r2, r3
 800d960:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	6a1a      	ldr	r2, [r3, #32]
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	43db      	mvns	r3, r3
 800d96a:	401a      	ands	r2, r3
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	6a1a      	ldr	r2, [r3, #32]
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	f003 030f 	and.w	r3, r3, #15
 800d97a:	6879      	ldr	r1, [r7, #4]
 800d97c:	fa01 f303 	lsl.w	r3, r1, r3
 800d980:	431a      	orrs	r2, r3
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	621a      	str	r2, [r3, #32]
}
 800d986:	bf00      	nop
 800d988:	371c      	adds	r7, #28
 800d98a:	46bd      	mov	sp, r7
 800d98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d990:	4770      	bx	lr
	...

0800d994 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d994:	b084      	sub	sp, #16
 800d996:	b480      	push	{r7}
 800d998:	b085      	sub	sp, #20
 800d99a:	af00      	add	r7, sp, #0
 800d99c:	6078      	str	r0, [r7, #4]
 800d99e:	f107 001c 	add.w	r0, r7, #28
 800d9a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800d9aa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800d9ac:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800d9ae:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800d9b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800d9b2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800d9b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800d9b6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d9b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800d9ba:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800d9bc:	68fa      	ldr	r2, [r7, #12]
 800d9be:	4313      	orrs	r3, r2
 800d9c0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	685a      	ldr	r2, [r3, #4]
 800d9c6:	4b07      	ldr	r3, [pc, #28]	@ (800d9e4 <SDMMC_Init+0x50>)
 800d9c8:	4013      	ands	r3, r2
 800d9ca:	68fa      	ldr	r2, [r7, #12]
 800d9cc:	431a      	orrs	r2, r3
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d9d2:	2300      	movs	r3, #0
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3714      	adds	r7, #20
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9de:	b004      	add	sp, #16
 800d9e0:	4770      	bx	lr
 800d9e2:	bf00      	nop
 800d9e4:	ffc02c00 	.word	0xffc02c00

0800d9e8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 800d9e8:	b480      	push	{r7}
 800d9ea:	b083      	sub	sp, #12
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	370c      	adds	r7, #12
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da00:	4770      	bx	lr

0800da02 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800da02:	b480      	push	{r7}
 800da04:	b083      	sub	sp, #12
 800da06:	af00      	add	r7, sp, #0
 800da08:	6078      	str	r0, [r7, #4]
 800da0a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	681a      	ldr	r2, [r3, #0]
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800da16:	2300      	movs	r3, #0
}
 800da18:	4618      	mov	r0, r3
 800da1a:	370c      	adds	r7, #12
 800da1c:	46bd      	mov	sp, r7
 800da1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da22:	4770      	bx	lr

0800da24 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800da24:	b480      	push	{r7}
 800da26:	b083      	sub	sp, #12
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	f043 0203 	orr.w	r2, r3, #3
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800da38:	2300      	movs	r3, #0
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	370c      	adds	r7, #12
 800da3e:	46bd      	mov	sp, r7
 800da40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da44:	4770      	bx	lr

0800da46 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 800da46:	b480      	push	{r7}
 800da48:	b083      	sub	sp, #12
 800da4a:	af00      	add	r7, sp, #0
 800da4c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	f003 0303 	and.w	r3, r3, #3
}
 800da56:	4618      	mov	r0, r3
 800da58:	370c      	adds	r7, #12
 800da5a:	46bd      	mov	sp, r7
 800da5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da60:	4770      	bx	lr
	...

0800da64 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 800da64:	b480      	push	{r7}
 800da66:	b085      	sub	sp, #20
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800da6e:	2300      	movs	r3, #0
 800da70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	681a      	ldr	r2, [r3, #0]
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800da82:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800da88:	431a      	orrs	r2, r3
                       Command->CPSM);
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800da8e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800da90:	68fa      	ldr	r2, [r7, #12]
 800da92:	4313      	orrs	r3, r2
 800da94:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	68da      	ldr	r2, [r3, #12]
 800da9a:	4b06      	ldr	r3, [pc, #24]	@ (800dab4 <SDMMC_SendCommand+0x50>)
 800da9c:	4013      	ands	r3, r2
 800da9e:	68fa      	ldr	r2, [r7, #12]
 800daa0:	431a      	orrs	r2, r3
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800daa6:	2300      	movs	r3, #0
}
 800daa8:	4618      	mov	r0, r3
 800daaa:	3714      	adds	r7, #20
 800daac:	46bd      	mov	sp, r7
 800daae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab2:	4770      	bx	lr
 800dab4:	fffee0c0 	.word	0xfffee0c0

0800dab8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 800dab8:	b480      	push	{r7}
 800daba:	b083      	sub	sp, #12
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	691b      	ldr	r3, [r3, #16]
 800dac4:	b2db      	uxtb	r3, r3
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	370c      	adds	r7, #12
 800daca:	46bd      	mov	sp, r7
 800dacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad0:	4770      	bx	lr

0800dad2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800dad2:	b480      	push	{r7}
 800dad4:	b085      	sub	sp, #20
 800dad6:	af00      	add	r7, sp, #0
 800dad8:	6078      	str	r0, [r7, #4]
 800dada:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	3314      	adds	r3, #20
 800dae0:	461a      	mov	r2, r3
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	4413      	add	r3, r2
 800dae6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	681b      	ldr	r3, [r3, #0]
}
 800daec:	4618      	mov	r0, r3
 800daee:	3714      	adds	r7, #20
 800daf0:	46bd      	mov	sp, r7
 800daf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf6:	4770      	bx	lr

0800daf8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 800daf8:	b480      	push	{r7}
 800dafa:	b085      	sub	sp, #20
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
 800db00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800db02:	2300      	movs	r3, #0
 800db04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	681a      	ldr	r2, [r3, #0]
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	685a      	ldr	r2, [r3, #4]
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800db1e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800db24:	431a      	orrs	r2, r3
                       Data->DPSM);
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800db2a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800db2c:	68fa      	ldr	r2, [r7, #12]
 800db2e:	4313      	orrs	r3, r2
 800db30:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db36:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	431a      	orrs	r2, r3
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800db42:	2300      	movs	r3, #0

}
 800db44:	4618      	mov	r0, r3
 800db46:	3714      	adds	r7, #20
 800db48:	46bd      	mov	sp, r7
 800db4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4e:	4770      	bx	lr

0800db50 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b088      	sub	sp, #32
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800db5e:	2310      	movs	r3, #16
 800db60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800db66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db68:	2300      	movs	r3, #0
 800db6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800db70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db72:	f107 0308 	add.w	r3, r7, #8
 800db76:	4619      	mov	r1, r3
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f7ff ff73 	bl	800da64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800db7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db82:	2110      	movs	r1, #16
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f000 fa5f 	bl	800e048 <SDMMC_GetCmdResp1>
 800db8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db8c:	69fb      	ldr	r3, [r7, #28]
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3720      	adds	r7, #32
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}

0800db96 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800db96:	b580      	push	{r7, lr}
 800db98:	b088      	sub	sp, #32
 800db9a:	af00      	add	r7, sp, #0
 800db9c:	6078      	str	r0, [r7, #4]
 800db9e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800dba4:	2311      	movs	r3, #17
 800dba6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dba8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dbac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dbb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dbb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dbb8:	f107 0308 	add.w	r3, r7, #8
 800dbbc:	4619      	mov	r1, r3
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f7ff ff50 	bl	800da64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800dbc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dbc8:	2111      	movs	r1, #17
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f000 fa3c 	bl	800e048 <SDMMC_GetCmdResp1>
 800dbd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbd2:	69fb      	ldr	r3, [r7, #28]
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3720      	adds	r7, #32
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}

0800dbdc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b088      	sub	sp, #32
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
 800dbe4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800dbea:	2312      	movs	r3, #18
 800dbec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dbee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dbf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dbf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dbfc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dbfe:	f107 0308 	add.w	r3, r7, #8
 800dc02:	4619      	mov	r1, r3
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f7ff ff2d 	bl	800da64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800dc0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc0e:	2112      	movs	r1, #18
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f000 fa19 	bl	800e048 <SDMMC_GetCmdResp1>
 800dc16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc18:	69fb      	ldr	r3, [r7, #28]
}
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	3720      	adds	r7, #32
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bd80      	pop	{r7, pc}

0800dc22 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800dc22:	b580      	push	{r7, lr}
 800dc24:	b088      	sub	sp, #32
 800dc26:	af00      	add	r7, sp, #0
 800dc28:	6078      	str	r0, [r7, #4]
 800dc2a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dc2c:	683b      	ldr	r3, [r7, #0]
 800dc2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800dc30:	2318      	movs	r3, #24
 800dc32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dc38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dc42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc44:	f107 0308 	add.w	r3, r7, #8
 800dc48:	4619      	mov	r1, r3
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f7ff ff0a 	bl	800da64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800dc50:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc54:	2118      	movs	r1, #24
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f000 f9f6 	bl	800e048 <SDMMC_GetCmdResp1>
 800dc5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc5e:	69fb      	ldr	r3, [r7, #28]
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3720      	adds	r7, #32
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b088      	sub	sp, #32
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800dc76:	2319      	movs	r3, #25
 800dc78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dc7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc80:	2300      	movs	r3, #0
 800dc82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dc88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc8a:	f107 0308 	add.w	r3, r7, #8
 800dc8e:	4619      	mov	r1, r3
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f7ff fee7 	bl	800da64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800dc96:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc9a:	2119      	movs	r1, #25
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f000 f9d3 	bl	800e048 <SDMMC_GetCmdResp1>
 800dca2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dca4:	69fb      	ldr	r3, [r7, #28]
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	3720      	adds	r7, #32
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}
	...

0800dcb0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b088      	sub	sp, #32
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800dcbc:	230c      	movs	r3, #12
 800dcbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dcc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dcc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dcca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dcce:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	68db      	ldr	r3, [r3, #12]
 800dcd4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	68db      	ldr	r3, [r3, #12]
 800dce0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dce8:	f107 0308 	add.w	r3, r7, #8
 800dcec:	4619      	mov	r1, r3
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f7ff feb8 	bl	800da64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800dcf4:	4a0b      	ldr	r2, [pc, #44]	@ (800dd24 <SDMMC_CmdStopTransfer+0x74>)
 800dcf6:	210c      	movs	r1, #12
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f000 f9a5 	bl	800e048 <SDMMC_GetCmdResp1>
 800dcfe:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	68db      	ldr	r3, [r3, #12]
 800dd04:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800dd0c:	69fb      	ldr	r3, [r7, #28]
 800dd0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dd12:	d101      	bne.n	800dd18 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800dd14:	2300      	movs	r3, #0
 800dd16:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800dd18:	69fb      	ldr	r3, [r7, #28]
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3720      	adds	r7, #32
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}
 800dd22:	bf00      	nop
 800dd24:	05f5e100 	.word	0x05f5e100

0800dd28 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b088      	sub	sp, #32
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800dd36:	2307      	movs	r3, #7
 800dd38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dd3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd40:	2300      	movs	r3, #0
 800dd42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dd48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd4a:	f107 0308 	add.w	r3, r7, #8
 800dd4e:	4619      	mov	r1, r3
 800dd50:	6878      	ldr	r0, [r7, #4]
 800dd52:	f7ff fe87 	bl	800da64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800dd56:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dd5a:	2107      	movs	r1, #7
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f000 f973 	bl	800e048 <SDMMC_GetCmdResp1>
 800dd62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd64:	69fb      	ldr	r3, [r7, #28]
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3720      	adds	r7, #32
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}

0800dd6e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800dd6e:	b580      	push	{r7, lr}
 800dd70:	b088      	sub	sp, #32
 800dd72:	af00      	add	r7, sp, #0
 800dd74:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800dd76:	2300      	movs	r3, #0
 800dd78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd82:	2300      	movs	r3, #0
 800dd84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dd8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd8c:	f107 0308 	add.w	r3, r7, #8
 800dd90:	4619      	mov	r1, r3
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f7ff fe66 	bl	800da64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	f000 fb97 	bl	800e4cc <SDMMC_GetCmdError>
 800dd9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dda0:	69fb      	ldr	r3, [r7, #28]
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	3720      	adds	r7, #32
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}

0800ddaa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ddaa:	b580      	push	{r7, lr}
 800ddac:	b088      	sub	sp, #32
 800ddae:	af00      	add	r7, sp, #0
 800ddb0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ddb2:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800ddb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ddb8:	2308      	movs	r3, #8
 800ddba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ddbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ddc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ddc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ddca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ddcc:	f107 0308 	add.w	r3, r7, #8
 800ddd0:	4619      	mov	r1, r3
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	f7ff fe46 	bl	800da64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f000 fb29 	bl	800e430 <SDMMC_GetCmdResp7>
 800ddde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dde0:	69fb      	ldr	r3, [r7, #28]
}
 800dde2:	4618      	mov	r0, r3
 800dde4:	3720      	adds	r7, #32
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}

0800ddea <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ddea:	b580      	push	{r7, lr}
 800ddec:	b088      	sub	sp, #32
 800ddee:	af00      	add	r7, sp, #0
 800ddf0:	6078      	str	r0, [r7, #4]
 800ddf2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ddf8:	2337      	movs	r3, #55	@ 0x37
 800ddfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ddfc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800de00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de02:	2300      	movs	r3, #0
 800de04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800de0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de0c:	f107 0308 	add.w	r3, r7, #8
 800de10:	4619      	mov	r1, r3
 800de12:	6878      	ldr	r0, [r7, #4]
 800de14:	f7ff fe26 	bl	800da64 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800de18:	f241 3288 	movw	r2, #5000	@ 0x1388
 800de1c:	2137      	movs	r1, #55	@ 0x37
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f000 f912 	bl	800e048 <SDMMC_GetCmdResp1>
 800de24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de26:	69fb      	ldr	r3, [r7, #28]
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3720      	adds	r7, #32
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}

0800de30 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b088      	sub	sp, #32
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
 800de38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800de3e:	2329      	movs	r3, #41	@ 0x29
 800de40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800de46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de48:	2300      	movs	r3, #0
 800de4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800de50:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de52:	f107 0308 	add.w	r3, r7, #8
 800de56:	4619      	mov	r1, r3
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f7ff fe03 	bl	800da64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f000 fa2e 	bl	800e2c0 <SDMMC_GetCmdResp3>
 800de64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de66:	69fb      	ldr	r3, [r7, #28]
}
 800de68:	4618      	mov	r0, r3
 800de6a:	3720      	adds	r7, #32
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}

0800de70 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b088      	sub	sp, #32
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
 800de78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800de7e:	2306      	movs	r3, #6
 800de80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800de86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de88:	2300      	movs	r3, #0
 800de8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800de90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de92:	f107 0308 	add.w	r3, r7, #8
 800de96:	4619      	mov	r1, r3
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f7ff fde3 	bl	800da64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800de9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dea2:	2106      	movs	r1, #6
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f000 f8cf 	bl	800e048 <SDMMC_GetCmdResp1>
 800deaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800deac:	69fb      	ldr	r3, [r7, #28]
}
 800deae:	4618      	mov	r0, r3
 800deb0:	3720      	adds	r7, #32
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd80      	pop	{r7, pc}

0800deb6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800deb6:	b580      	push	{r7, lr}
 800deb8:	b088      	sub	sp, #32
 800deba:	af00      	add	r7, sp, #0
 800debc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800debe:	2300      	movs	r3, #0
 800dec0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800dec2:	2333      	movs	r3, #51	@ 0x33
 800dec4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dec6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800deca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800decc:	2300      	movs	r3, #0
 800dece:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ded0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ded4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ded6:	f107 0308 	add.w	r3, r7, #8
 800deda:	4619      	mov	r1, r3
 800dedc:	6878      	ldr	r0, [r7, #4]
 800dede:	f7ff fdc1 	bl	800da64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800dee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dee6:	2133      	movs	r1, #51	@ 0x33
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f000 f8ad 	bl	800e048 <SDMMC_GetCmdResp1>
 800deee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800def0:	69fb      	ldr	r3, [r7, #28]
}
 800def2:	4618      	mov	r0, r3
 800def4:	3720      	adds	r7, #32
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}

0800defa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800defa:	b580      	push	{r7, lr}
 800defc:	b088      	sub	sp, #32
 800defe:	af00      	add	r7, sp, #0
 800df00:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800df02:	2300      	movs	r3, #0
 800df04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800df06:	2302      	movs	r3, #2
 800df08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800df0a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800df0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df10:	2300      	movs	r3, #0
 800df12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800df14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800df18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800df1a:	f107 0308 	add.w	r3, r7, #8
 800df1e:	4619      	mov	r1, r3
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f7ff fd9f 	bl	800da64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f000 f980 	bl	800e22c <SDMMC_GetCmdResp2>
 800df2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df2e:	69fb      	ldr	r3, [r7, #28]
}
 800df30:	4618      	mov	r0, r3
 800df32:	3720      	adds	r7, #32
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}

0800df38 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b088      	sub	sp, #32
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
 800df40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800df46:	2309      	movs	r3, #9
 800df48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800df4a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800df4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df50:	2300      	movs	r3, #0
 800df52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800df54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800df58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800df5a:	f107 0308 	add.w	r3, r7, #8
 800df5e:	4619      	mov	r1, r3
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f7ff fd7f 	bl	800da64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800df66:	6878      	ldr	r0, [r7, #4]
 800df68:	f000 f960 	bl	800e22c <SDMMC_GetCmdResp2>
 800df6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df6e:	69fb      	ldr	r3, [r7, #28]
}
 800df70:	4618      	mov	r0, r3
 800df72:	3720      	adds	r7, #32
 800df74:	46bd      	mov	sp, r7
 800df76:	bd80      	pop	{r7, pc}

0800df78 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b088      	sub	sp, #32
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
 800df80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800df82:	2300      	movs	r3, #0
 800df84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800df86:	2303      	movs	r3, #3
 800df88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800df8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800df8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df90:	2300      	movs	r3, #0
 800df92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800df94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800df98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800df9a:	f107 0308 	add.w	r3, r7, #8
 800df9e:	4619      	mov	r1, r3
 800dfa0:	6878      	ldr	r0, [r7, #4]
 800dfa2:	f7ff fd5f 	bl	800da64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800dfa6:	683a      	ldr	r2, [r7, #0]
 800dfa8:	2103      	movs	r1, #3
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	f000 f9c8 	bl	800e340 <SDMMC_GetCmdResp6>
 800dfb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dfb2:	69fb      	ldr	r3, [r7, #28]
}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	3720      	adds	r7, #32
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}

0800dfbc <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b088      	sub	sp, #32
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
 800dfc4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800dfca:	230d      	movs	r3, #13
 800dfcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dfce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dfd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dfd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dfdc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dfde:	f107 0308 	add.w	r3, r7, #8
 800dfe2:	4619      	mov	r1, r3
 800dfe4:	6878      	ldr	r0, [r7, #4]
 800dfe6:	f7ff fd3d 	bl	800da64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800dfea:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dfee:	210d      	movs	r1, #13
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f000 f829 	bl	800e048 <SDMMC_GetCmdResp1>
 800dff6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dff8:	69fb      	ldr	r3, [r7, #28]
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	3720      	adds	r7, #32
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}

0800e002 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800e002:	b580      	push	{r7, lr}
 800e004:	b088      	sub	sp, #32
 800e006:	af00      	add	r7, sp, #0
 800e008:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e00a:	2300      	movs	r3, #0
 800e00c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800e00e:	230d      	movs	r3, #13
 800e010:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e012:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e016:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e018:	2300      	movs	r3, #0
 800e01a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e01c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e020:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e022:	f107 0308 	add.w	r3, r7, #8
 800e026:	4619      	mov	r1, r3
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	f7ff fd1b 	bl	800da64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800e02e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e032:	210d      	movs	r1, #13
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f000 f807 	bl	800e048 <SDMMC_GetCmdResp1>
 800e03a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e03c:	69fb      	ldr	r3, [r7, #28]
}
 800e03e:	4618      	mov	r0, r3
 800e040:	3720      	adds	r7, #32
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}
	...

0800e048 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b088      	sub	sp, #32
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	60f8      	str	r0, [r7, #12]
 800e050:	460b      	mov	r3, r1
 800e052:	607a      	str	r2, [r7, #4]
 800e054:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e056:	4b70      	ldr	r3, [pc, #448]	@ (800e218 <SDMMC_GetCmdResp1+0x1d0>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	4a70      	ldr	r2, [pc, #448]	@ (800e21c <SDMMC_GetCmdResp1+0x1d4>)
 800e05c:	fba2 2303 	umull	r2, r3, r2, r3
 800e060:	0a5a      	lsrs	r2, r3, #9
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	fb02 f303 	mul.w	r3, r2, r3
 800e068:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e06a:	69fb      	ldr	r3, [r7, #28]
 800e06c:	1e5a      	subs	r2, r3, #1
 800e06e:	61fa      	str	r2, [r7, #28]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d102      	bne.n	800e07a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e074:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e078:	e0c9      	b.n	800e20e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e07e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800e080:	69ba      	ldr	r2, [r7, #24]
 800e082:	4b67      	ldr	r3, [pc, #412]	@ (800e220 <SDMMC_GetCmdResp1+0x1d8>)
 800e084:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e086:	2b00      	cmp	r3, #0
 800e088:	d0ef      	beq.n	800e06a <SDMMC_GetCmdResp1+0x22>
 800e08a:	69bb      	ldr	r3, [r7, #24]
 800e08c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e090:	2b00      	cmp	r3, #0
 800e092:	d1ea      	bne.n	800e06a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e098:	f003 0304 	and.w	r3, r3, #4
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d004      	beq.n	800e0aa <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	2204      	movs	r2, #4
 800e0a4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e0a6:	2304      	movs	r3, #4
 800e0a8:	e0b1      	b.n	800e20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e0ae:	f003 0301 	and.w	r3, r3, #1
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d004      	beq.n	800e0c0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	2201      	movs	r2, #1
 800e0ba:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e0bc:	2301      	movs	r3, #1
 800e0be:	e0a6      	b.n	800e20e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	4a58      	ldr	r2, [pc, #352]	@ (800e224 <SDMMC_GetCmdResp1+0x1dc>)
 800e0c4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e0c6:	68f8      	ldr	r0, [r7, #12]
 800e0c8:	f7ff fcf6 	bl	800dab8 <SDMMC_GetCommandResponse>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	461a      	mov	r2, r3
 800e0d0:	7afb      	ldrb	r3, [r7, #11]
 800e0d2:	4293      	cmp	r3, r2
 800e0d4:	d001      	beq.n	800e0da <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	e099      	b.n	800e20e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e0da:	2100      	movs	r1, #0
 800e0dc:	68f8      	ldr	r0, [r7, #12]
 800e0de:	f7ff fcf8 	bl	800dad2 <SDMMC_GetResponse>
 800e0e2:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e0e4:	697a      	ldr	r2, [r7, #20]
 800e0e6:	4b50      	ldr	r3, [pc, #320]	@ (800e228 <SDMMC_GetCmdResp1+0x1e0>)
 800e0e8:	4013      	ands	r3, r2
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d101      	bne.n	800e0f2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	e08d      	b.n	800e20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	da02      	bge.n	800e0fe <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e0f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e0fc:	e087      	b.n	800e20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e0fe:	697b      	ldr	r3, [r7, #20]
 800e100:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e104:	2b00      	cmp	r3, #0
 800e106:	d001      	beq.n	800e10c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e108:	2340      	movs	r3, #64	@ 0x40
 800e10a:	e080      	b.n	800e20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e10c:	697b      	ldr	r3, [r7, #20]
 800e10e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e112:	2b00      	cmp	r3, #0
 800e114:	d001      	beq.n	800e11a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e116:	2380      	movs	r3, #128	@ 0x80
 800e118:	e079      	b.n	800e20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e120:	2b00      	cmp	r3, #0
 800e122:	d002      	beq.n	800e12a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e124:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e128:	e071      	b.n	800e20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e130:	2b00      	cmp	r3, #0
 800e132:	d002      	beq.n	800e13a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e134:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e138:	e069      	b.n	800e20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e140:	2b00      	cmp	r3, #0
 800e142:	d002      	beq.n	800e14a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e144:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e148:	e061      	b.n	800e20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e14a:	697b      	ldr	r3, [r7, #20]
 800e14c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e150:	2b00      	cmp	r3, #0
 800e152:	d002      	beq.n	800e15a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e154:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e158:	e059      	b.n	800e20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e160:	2b00      	cmp	r3, #0
 800e162:	d002      	beq.n	800e16a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e164:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e168:	e051      	b.n	800e20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e170:	2b00      	cmp	r3, #0
 800e172:	d002      	beq.n	800e17a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e174:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e178:	e049      	b.n	800e20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e180:	2b00      	cmp	r3, #0
 800e182:	d002      	beq.n	800e18a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e184:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e188:	e041      	b.n	800e20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e190:	2b00      	cmp	r3, #0
 800e192:	d002      	beq.n	800e19a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e194:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e198:	e039      	b.n	800e20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d002      	beq.n	800e1aa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e1a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800e1a8:	e031      	b.n	800e20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d002      	beq.n	800e1ba <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e1b4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800e1b8:	e029      	b.n	800e20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d002      	beq.n	800e1ca <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e1c4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e1c8:	e021      	b.n	800e20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d002      	beq.n	800e1da <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e1d4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800e1d8:	e019      	b.n	800e20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d002      	beq.n	800e1ea <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e1e4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800e1e8:	e011      	b.n	800e20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e1ea:	697b      	ldr	r3, [r7, #20]
 800e1ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d002      	beq.n	800e1fa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e1f4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800e1f8:	e009      	b.n	800e20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	f003 0308 	and.w	r3, r3, #8
 800e200:	2b00      	cmp	r3, #0
 800e202:	d002      	beq.n	800e20a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e204:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800e208:	e001      	b.n	800e20e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e20a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800e20e:	4618      	mov	r0, r3
 800e210:	3720      	adds	r7, #32
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}
 800e216:	bf00      	nop
 800e218:	24000388 	.word	0x24000388
 800e21c:	10624dd3 	.word	0x10624dd3
 800e220:	00200045 	.word	0x00200045
 800e224:	002000c5 	.word	0x002000c5
 800e228:	fdffe008 	.word	0xfdffe008

0800e22c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e22c:	b480      	push	{r7}
 800e22e:	b085      	sub	sp, #20
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e234:	4b1f      	ldr	r3, [pc, #124]	@ (800e2b4 <SDMMC_GetCmdResp2+0x88>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	4a1f      	ldr	r2, [pc, #124]	@ (800e2b8 <SDMMC_GetCmdResp2+0x8c>)
 800e23a:	fba2 2303 	umull	r2, r3, r2, r3
 800e23e:	0a5b      	lsrs	r3, r3, #9
 800e240:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e244:	fb02 f303 	mul.w	r3, r2, r3
 800e248:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	1e5a      	subs	r2, r3, #1
 800e24e:	60fa      	str	r2, [r7, #12]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d102      	bne.n	800e25a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e254:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e258:	e026      	b.n	800e2a8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e25e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e266:	2b00      	cmp	r3, #0
 800e268:	d0ef      	beq.n	800e24a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e270:	2b00      	cmp	r3, #0
 800e272:	d1ea      	bne.n	800e24a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e278:	f003 0304 	and.w	r3, r3, #4
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d004      	beq.n	800e28a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	2204      	movs	r2, #4
 800e284:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e286:	2304      	movs	r3, #4
 800e288:	e00e      	b.n	800e2a8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e28e:	f003 0301 	and.w	r3, r3, #1
 800e292:	2b00      	cmp	r3, #0
 800e294:	d004      	beq.n	800e2a0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2201      	movs	r2, #1
 800e29a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e29c:	2301      	movs	r3, #1
 800e29e:	e003      	b.n	800e2a8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	4a06      	ldr	r2, [pc, #24]	@ (800e2bc <SDMMC_GetCmdResp2+0x90>)
 800e2a4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800e2a6:	2300      	movs	r3, #0
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3714      	adds	r7, #20
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b2:	4770      	bx	lr
 800e2b4:	24000388 	.word	0x24000388
 800e2b8:	10624dd3 	.word	0x10624dd3
 800e2bc:	002000c5 	.word	0x002000c5

0800e2c0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e2c0:	b480      	push	{r7}
 800e2c2:	b085      	sub	sp, #20
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e2c8:	4b1a      	ldr	r3, [pc, #104]	@ (800e334 <SDMMC_GetCmdResp3+0x74>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	4a1a      	ldr	r2, [pc, #104]	@ (800e338 <SDMMC_GetCmdResp3+0x78>)
 800e2ce:	fba2 2303 	umull	r2, r3, r2, r3
 800e2d2:	0a5b      	lsrs	r3, r3, #9
 800e2d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e2d8:	fb02 f303 	mul.w	r3, r2, r3
 800e2dc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	1e5a      	subs	r2, r3, #1
 800e2e2:	60fa      	str	r2, [r7, #12]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d102      	bne.n	800e2ee <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e2e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e2ec:	e01b      	b.n	800e326 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2f2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e2f4:	68bb      	ldr	r3, [r7, #8]
 800e2f6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d0ef      	beq.n	800e2de <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e304:	2b00      	cmp	r3, #0
 800e306:	d1ea      	bne.n	800e2de <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e30c:	f003 0304 	and.w	r3, r3, #4
 800e310:	2b00      	cmp	r3, #0
 800e312:	d004      	beq.n	800e31e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2204      	movs	r2, #4
 800e318:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e31a:	2304      	movs	r3, #4
 800e31c:	e003      	b.n	800e326 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	4a06      	ldr	r2, [pc, #24]	@ (800e33c <SDMMC_GetCmdResp3+0x7c>)
 800e322:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800e324:	2300      	movs	r3, #0
}
 800e326:	4618      	mov	r0, r3
 800e328:	3714      	adds	r7, #20
 800e32a:	46bd      	mov	sp, r7
 800e32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e330:	4770      	bx	lr
 800e332:	bf00      	nop
 800e334:	24000388 	.word	0x24000388
 800e338:	10624dd3 	.word	0x10624dd3
 800e33c:	002000c5 	.word	0x002000c5

0800e340 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b088      	sub	sp, #32
 800e344:	af00      	add	r7, sp, #0
 800e346:	60f8      	str	r0, [r7, #12]
 800e348:	460b      	mov	r3, r1
 800e34a:	607a      	str	r2, [r7, #4]
 800e34c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e34e:	4b35      	ldr	r3, [pc, #212]	@ (800e424 <SDMMC_GetCmdResp6+0xe4>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	4a35      	ldr	r2, [pc, #212]	@ (800e428 <SDMMC_GetCmdResp6+0xe8>)
 800e354:	fba2 2303 	umull	r2, r3, r2, r3
 800e358:	0a5b      	lsrs	r3, r3, #9
 800e35a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e35e:	fb02 f303 	mul.w	r3, r2, r3
 800e362:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e364:	69fb      	ldr	r3, [r7, #28]
 800e366:	1e5a      	subs	r2, r3, #1
 800e368:	61fa      	str	r2, [r7, #28]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d102      	bne.n	800e374 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e36e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e372:	e052      	b.n	800e41a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e378:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e37a:	69bb      	ldr	r3, [r7, #24]
 800e37c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e380:	2b00      	cmp	r3, #0
 800e382:	d0ef      	beq.n	800e364 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e384:	69bb      	ldr	r3, [r7, #24]
 800e386:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d1ea      	bne.n	800e364 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e392:	f003 0304 	and.w	r3, r3, #4
 800e396:	2b00      	cmp	r3, #0
 800e398:	d004      	beq.n	800e3a4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	2204      	movs	r2, #4
 800e39e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e3a0:	2304      	movs	r3, #4
 800e3a2:	e03a      	b.n	800e41a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3a8:	f003 0301 	and.w	r3, r3, #1
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d004      	beq.n	800e3ba <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	2201      	movs	r2, #1
 800e3b4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	e02f      	b.n	800e41a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e3ba:	68f8      	ldr	r0, [r7, #12]
 800e3bc:	f7ff fb7c 	bl	800dab8 <SDMMC_GetCommandResponse>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	461a      	mov	r2, r3
 800e3c4:	7afb      	ldrb	r3, [r7, #11]
 800e3c6:	4293      	cmp	r3, r2
 800e3c8:	d001      	beq.n	800e3ce <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	e025      	b.n	800e41a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	4a16      	ldr	r2, [pc, #88]	@ (800e42c <SDMMC_GetCmdResp6+0xec>)
 800e3d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e3d4:	2100      	movs	r1, #0
 800e3d6:	68f8      	ldr	r0, [r7, #12]
 800e3d8:	f7ff fb7b 	bl	800dad2 <SDMMC_GetResponse>
 800e3dc:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800e3de:	697b      	ldr	r3, [r7, #20]
 800e3e0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d106      	bne.n	800e3f6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800e3e8:	697b      	ldr	r3, [r7, #20]
 800e3ea:	0c1b      	lsrs	r3, r3, #16
 800e3ec:	b29a      	uxth	r2, r3
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	e011      	b.n	800e41a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e3f6:	697b      	ldr	r3, [r7, #20]
 800e3f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d002      	beq.n	800e406 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e400:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e404:	e009      	b.n	800e41a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e406:	697b      	ldr	r3, [r7, #20]
 800e408:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d002      	beq.n	800e416 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e410:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e414:	e001      	b.n	800e41a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e416:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800e41a:	4618      	mov	r0, r3
 800e41c:	3720      	adds	r7, #32
 800e41e:	46bd      	mov	sp, r7
 800e420:	bd80      	pop	{r7, pc}
 800e422:	bf00      	nop
 800e424:	24000388 	.word	0x24000388
 800e428:	10624dd3 	.word	0x10624dd3
 800e42c:	002000c5 	.word	0x002000c5

0800e430 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e430:	b480      	push	{r7}
 800e432:	b085      	sub	sp, #20
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e438:	4b22      	ldr	r3, [pc, #136]	@ (800e4c4 <SDMMC_GetCmdResp7+0x94>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	4a22      	ldr	r2, [pc, #136]	@ (800e4c8 <SDMMC_GetCmdResp7+0x98>)
 800e43e:	fba2 2303 	umull	r2, r3, r2, r3
 800e442:	0a5b      	lsrs	r3, r3, #9
 800e444:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e448:	fb02 f303 	mul.w	r3, r2, r3
 800e44c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	1e5a      	subs	r2, r3, #1
 800e452:	60fa      	str	r2, [r7, #12]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d102      	bne.n	800e45e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e458:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e45c:	e02c      	b.n	800e4b8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e462:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e464:	68bb      	ldr	r3, [r7, #8]
 800e466:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d0ef      	beq.n	800e44e <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e474:	2b00      	cmp	r3, #0
 800e476:	d1ea      	bne.n	800e44e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e47c:	f003 0304 	and.w	r3, r3, #4
 800e480:	2b00      	cmp	r3, #0
 800e482:	d004      	beq.n	800e48e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2204      	movs	r2, #4
 800e488:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e48a:	2304      	movs	r3, #4
 800e48c:	e014      	b.n	800e4b8 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e492:	f003 0301 	and.w	r3, r3, #1
 800e496:	2b00      	cmp	r3, #0
 800e498:	d004      	beq.n	800e4a4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2201      	movs	r2, #1
 800e49e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e4a0:	2301      	movs	r3, #1
 800e4a2:	e009      	b.n	800e4b8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e4a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d002      	beq.n	800e4b6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2240      	movs	r2, #64	@ 0x40
 800e4b4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800e4b6:	2300      	movs	r3, #0

}
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	3714      	adds	r7, #20
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c2:	4770      	bx	lr
 800e4c4:	24000388 	.word	0x24000388
 800e4c8:	10624dd3 	.word	0x10624dd3

0800e4cc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800e4cc:	b480      	push	{r7}
 800e4ce:	b085      	sub	sp, #20
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e4d4:	4b11      	ldr	r3, [pc, #68]	@ (800e51c <SDMMC_GetCmdError+0x50>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	4a11      	ldr	r2, [pc, #68]	@ (800e520 <SDMMC_GetCmdError+0x54>)
 800e4da:	fba2 2303 	umull	r2, r3, r2, r3
 800e4de:	0a5b      	lsrs	r3, r3, #9
 800e4e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e4e4:	fb02 f303 	mul.w	r3, r2, r3
 800e4e8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	1e5a      	subs	r2, r3, #1
 800e4ee:	60fa      	str	r2, [r7, #12]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d102      	bne.n	800e4fa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e4f4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e4f8:	e009      	b.n	800e50e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e4fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e502:	2b00      	cmp	r3, #0
 800e504:	d0f1      	beq.n	800e4ea <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	4a06      	ldr	r2, [pc, #24]	@ (800e524 <SDMMC_GetCmdError+0x58>)
 800e50a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800e50c:	2300      	movs	r3, #0
}
 800e50e:	4618      	mov	r0, r3
 800e510:	3714      	adds	r7, #20
 800e512:	46bd      	mov	sp, r7
 800e514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e518:	4770      	bx	lr
 800e51a:	bf00      	nop
 800e51c:	24000388 	.word	0x24000388
 800e520:	10624dd3 	.word	0x10624dd3
 800e524:	002000c5 	.word	0x002000c5

0800e528 <Drive_First>:
	c_v = (fabsf(t_v - c_v) < accel * dt) ?
			t_v : ((t_v - c_v > 0) ? c_v + accel * dt : c_v - accel * dt);

}

void Drive_First() {
 800e528:	b480      	push	{r7}
 800e52a:	af00      	add	r7, sp, #0

}
 800e52c:	bf00      	nop
 800e52e:	46bd      	mov	sp, r7
 800e530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e534:	4770      	bx	lr

0800e536 <Drive_Second>:

void Drive_Second() {
 800e536:	b480      	push	{r7}
 800e538:	af00      	add	r7, sp, #0

}
 800e53a:	bf00      	nop
 800e53c:	46bd      	mov	sp, r7
 800e53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e542:	4770      	bx	lr

0800e544 <Drive_Third>:

void Drive_Third() {
 800e544:	b480      	push	{r7}
 800e546:	af00      	add	r7, sp, #0

}
 800e548:	bf00      	nop
 800e54a:	46bd      	mov	sp, r7
 800e54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e550:	4770      	bx	lr

0800e552 <Drive_Forth>:

void Drive_Forth() {
 800e552:	b480      	push	{r7}
 800e554:	af00      	add	r7, sp, #0

}
 800e556:	bf00      	nop
 800e558:	46bd      	mov	sp, r7
 800e55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55e:	4770      	bx	lr

0800e560 <Setting>:
			(uint32_t) (31 * percent / 100), 10, percentColor);
	ST7735_LCD_Driver.FillRect(&st7735_pObj, 43 + (31 * percent / 100), 147,
			31 - (31 * percent / 100), 10, BLACK);
}

void Setting() {
 800e560:	b480      	push	{r7}
 800e562:	af00      	add	r7, sp, #0

}
 800e564:	bf00      	nop
 800e566:	46bd      	mov	sp, r7
 800e568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56c:	4770      	bx	lr
	...

0800e570 <Init>:
		{ "1.Cali    ", Sensor_Calibration}, { "2.D 1st   ",
		Drive_First }, { "3.D 2nd   ", Drive_Second }, { "4.D 3rd   ",
		Drive_Third }, { "5.D 4th   ", Drive_Forth }, { "6.Setting ", Setting },
		{ "7.S Test  ", Sensor_Test_Menu }, { "8.M Test  ", Motor_Test_Menu } };

void Init() {
 800e570:	b580      	push	{r7, lr}
 800e572:	b082      	sub	sp, #8
 800e574:	af00      	add	r7, sp, #0
	//	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
	//	__HAL_TIM_SET_AUTORELOAD(&htim16, 500);
	//	__HAL_TIM_SetCompare(&htim16,TIM_CHANNEL_1, 250);
	Encoder_Start();
 800e576:	f000 fec1 	bl	800f2fc <Encoder_Start>
	static uint8_t maxMenu = sizeof(menu) / sizeof(menu_t);
	static uint8_t beforeMenu = 0;
	static uint8_t cnt_l = 0;
//	static uint8_t cnt_r = 0;
	while(HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET);
 800e57a:	bf00      	nop
 800e57c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800e580:	4834      	ldr	r0, [pc, #208]	@ (800e654 <Init+0xe4>)
 800e582:	f7f6 faf9 	bl	8004b78 <HAL_GPIO_ReadPin>
 800e586:	4603      	mov	r3, r0
 800e588:	2b01      	cmp	r3, #1
 800e58a:	d0f7      	beq.n	800e57c <Init+0xc>
	while (1) {
		cnt_l = ((hlptim1.Instance->CNT + 128) / 256 + beforeMenu) % maxMenu;
 800e58c:	4b32      	ldr	r3, [pc, #200]	@ (800e658 <Init+0xe8>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	69db      	ldr	r3, [r3, #28]
 800e592:	3380      	adds	r3, #128	@ 0x80
 800e594:	0a1b      	lsrs	r3, r3, #8
 800e596:	4a31      	ldr	r2, [pc, #196]	@ (800e65c <Init+0xec>)
 800e598:	7812      	ldrb	r2, [r2, #0]
 800e59a:	4413      	add	r3, r2
 800e59c:	4a30      	ldr	r2, [pc, #192]	@ (800e660 <Init+0xf0>)
 800e59e:	7812      	ldrb	r2, [r2, #0]
 800e5a0:	fbb3 f1f2 	udiv	r1, r3, r2
 800e5a4:	fb01 f202 	mul.w	r2, r1, r2
 800e5a8:	1a9b      	subs	r3, r3, r2
 800e5aa:	b2da      	uxtb	r2, r3
 800e5ac:	4b2d      	ldr	r3, [pc, #180]	@ (800e664 <Init+0xf4>)
 800e5ae:	701a      	strb	r2, [r3, #0]
//		cnt_r = ((hlptim2.Instance->CNT + 1024) / 2048) % 2;
		Custom_LCD_Printf(0, 0, "Main Menu", hlptim1.Instance->CNT);
 800e5b0:	4b29      	ldr	r3, [pc, #164]	@ (800e658 <Init+0xe8>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	69db      	ldr	r3, [r3, #28]
 800e5b6:	4a2c      	ldr	r2, [pc, #176]	@ (800e668 <Init+0xf8>)
 800e5b8:	2100      	movs	r1, #0
 800e5ba:	2000      	movs	r0, #0
 800e5bc:	f7f2 fdae 	bl	800111c <Custom_LCD_Printf>
		for (uint8_t i = 0; i < maxMenu; i++) {
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	71fb      	strb	r3, [r7, #7]
 800e5c4:	e014      	b.n	800e5f0 <Init+0x80>
			Set_Color(cnt_l, i);
 800e5c6:	4b27      	ldr	r3, [pc, #156]	@ (800e664 <Init+0xf4>)
 800e5c8:	781b      	ldrb	r3, [r3, #0]
 800e5ca:	461a      	mov	r2, r3
 800e5cc:	79fb      	ldrb	r3, [r7, #7]
 800e5ce:	4619      	mov	r1, r3
 800e5d0:	4610      	mov	r0, r2
 800e5d2:	f7f2 fe11 	bl	80011f8 <Set_Color>
			Custom_LCD_Printf(0, i + 1, "%s", (menu + i)->name);
 800e5d6:	79fb      	ldrb	r3, [r7, #7]
 800e5d8:	1c59      	adds	r1, r3, #1
 800e5da:	79fb      	ldrb	r3, [r7, #7]
 800e5dc:	011b      	lsls	r3, r3, #4
 800e5de:	4a23      	ldr	r2, [pc, #140]	@ (800e66c <Init+0xfc>)
 800e5e0:	4413      	add	r3, r2
 800e5e2:	4a23      	ldr	r2, [pc, #140]	@ (800e670 <Init+0x100>)
 800e5e4:	2000      	movs	r0, #0
 800e5e6:	f7f2 fd99 	bl	800111c <Custom_LCD_Printf>
		for (uint8_t i = 0; i < maxMenu; i++) {
 800e5ea:	79fb      	ldrb	r3, [r7, #7]
 800e5ec:	3301      	adds	r3, #1
 800e5ee:	71fb      	strb	r3, [r7, #7]
 800e5f0:	4b1b      	ldr	r3, [pc, #108]	@ (800e660 <Init+0xf0>)
 800e5f2:	781b      	ldrb	r3, [r3, #0]
 800e5f4:	79fa      	ldrb	r2, [r7, #7]
 800e5f6:	429a      	cmp	r2, r3
 800e5f8:	d3e5      	bcc.n	800e5c6 <Init+0x56>
		}

		POINT_COLOR = WHITE;
 800e5fa:	4b1e      	ldr	r3, [pc, #120]	@ (800e674 <Init+0x104>)
 800e5fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e600:	801a      	strh	r2, [r3, #0]
		BACK_COLOR = BLACK;
 800e602:	4b1d      	ldr	r3, [pc, #116]	@ (800e678 <Init+0x108>)
 800e604:	2200      	movs	r2, #0
 800e606:	801a      	strh	r2, [r3, #0]
//		Show_Remain_Battery();

		if (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET) {
 800e608:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800e60c:	4811      	ldr	r0, [pc, #68]	@ (800e654 <Init+0xe4>)
 800e60e:	f7f6 fab3 	bl	8004b78 <HAL_GPIO_ReadPin>
 800e612:	4603      	mov	r3, r0
 800e614:	2b01      	cmp	r3, #1
 800e616:	d1b9      	bne.n	800e58c <Init+0x1c>
			while(HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET);
 800e618:	bf00      	nop
 800e61a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800e61e:	480d      	ldr	r0, [pc, #52]	@ (800e654 <Init+0xe4>)
 800e620:	f7f6 faaa 	bl	8004b78 <HAL_GPIO_ReadPin>
 800e624:	4603      	mov	r3, r0
 800e626:	2b01      	cmp	r3, #1
 800e628:	d0f7      	beq.n	800e61a <Init+0xaa>
			Custom_LCD_Clear();
 800e62a:	f7f2 fdc9 	bl	80011c0 <Custom_LCD_Clear>
			Encoder_Stop();
 800e62e:	f000 fea7 	bl	800f380 <Encoder_Stop>

			(menu + cnt_l)->func();
 800e632:	4b0c      	ldr	r3, [pc, #48]	@ (800e664 <Init+0xf4>)
 800e634:	781b      	ldrb	r3, [r3, #0]
 800e636:	011b      	lsls	r3, r3, #4
 800e638:	4a0c      	ldr	r2, [pc, #48]	@ (800e66c <Init+0xfc>)
 800e63a:	4413      	add	r3, r2
 800e63c:	68db      	ldr	r3, [r3, #12]
 800e63e:	4798      	blx	r3

			Encoder_Start();
 800e640:	f000 fe5c 	bl	800f2fc <Encoder_Start>
			Custom_LCD_Clear();
 800e644:	f7f2 fdbc 	bl	80011c0 <Custom_LCD_Clear>
			beforeMenu = cnt_l;
 800e648:	4b06      	ldr	r3, [pc, #24]	@ (800e664 <Init+0xf4>)
 800e64a:	781a      	ldrb	r2, [r3, #0]
 800e64c:	4b03      	ldr	r3, [pc, #12]	@ (800e65c <Init+0xec>)
 800e64e:	701a      	strb	r2, [r3, #0]
		cnt_l = ((hlptim1.Instance->CNT + 128) / 256 + beforeMenu) % maxMenu;
 800e650:	e79c      	b.n	800e58c <Init+0x1c>
 800e652:	bf00      	nop
 800e654:	58020800 	.word	0x58020800
 800e658:	24000ccc 	.word	0x24000ccc
 800e65c:	24000ac8 	.word	0x24000ac8
 800e660:	24000118 	.word	0x24000118
 800e664:	24000ac9 	.word	0x24000ac9
 800e668:	08016d98 	.word	0x08016d98
 800e66c:	24000098 	.word	0x24000098
 800e670:	08016da4 	.word	0x08016da4
 800e674:	24000020 	.word	0x24000020
 800e678:	240005b0 	.word	0x240005b0

0800e67c <MCF8316C_WriteSetting>:
 *      Author: kth59
 */

#include "mcf8316c.h"

HAL_StatusTypeDef MCF8316C_WriteSetting(I2C_HandleTypeDef *hi2c) {
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b088      	sub	sp, #32
 800e680:	af02      	add	r7, sp, #8
 800e682:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	uint8_t tx_buffer[7];
	uint16_t slave_address_8bit = MCF8316C_I2C_ADDRESS_7BIT << 1;
 800e684:	2302      	movs	r3, #2
 800e686:	82fb      	strh	r3, [r7, #22]

	tx_buffer[0] = CONTROL_WRITE | CONTROL_CRC | CONTROL_DATA_LEN
 800e688:	2310      	movs	r3, #16
 800e68a:	733b      	strb	r3, [r7, #12]
			| CONTROL_MEM_SEC;
	tx_buffer[1] = ((MCF8316C_WRITE_READ_ADDR >> 8) & 0xF) | CONTROL_MEM_PAGE;
 800e68c:	2300      	movs	r3, #0
 800e68e:	737b      	strb	r3, [r7, #13]
	tx_buffer[2] = MCF8316C_WRITE_READ_ADDR & 0xFF;
 800e690:	23ea      	movs	r3, #234	@ 0xea
 800e692:	73bb      	strb	r3, [r7, #14]
	tx_buffer[3] = MCF8316C_REG_WRITE_BIT & 0xFF;
 800e694:	2300      	movs	r3, #0
 800e696:	73fb      	strb	r3, [r7, #15]
	tx_buffer[4] = (MCF8316C_REG_WRITE_BIT >> 8) & 0xFF;
 800e698:	2300      	movs	r3, #0
 800e69a:	743b      	strb	r3, [r7, #16]
	tx_buffer[5] = (MCF8316C_REG_WRITE_BIT >> 16) & 0xFF;
 800e69c:	2350      	movs	r3, #80	@ 0x50
 800e69e:	747b      	strb	r3, [r7, #17]
	tx_buffer[6] = (MCF8316C_REG_WRITE_BIT >> 24) & 0xFF;
 800e6a0:	238a      	movs	r3, #138	@ 0x8a
 800e6a2:	74bb      	strb	r3, [r7, #18]

	status = HAL_I2C_Master_Transmit(hi2c, slave_address_8bit, tx_buffer,
 800e6a4:	f107 020c 	add.w	r2, r7, #12
 800e6a8:	8af9      	ldrh	r1, [r7, #22]
 800e6aa:	f04f 33ff 	mov.w	r3, #4294967295
 800e6ae:	9300      	str	r3, [sp, #0]
 800e6b0:	2307      	movs	r3, #7
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	f7f6 fb2e 	bl	8004d14 <HAL_I2C_Master_Transmit>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	757b      	strb	r3, [r7, #21]
			sizeof(tx_buffer),
			HAL_MAX_DELAY);
	if (status != HAL_OK) {
 800e6bc:	7d7b      	ldrb	r3, [r7, #21]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d001      	beq.n	800e6c6 <MCF8316C_WriteSetting+0x4a>
		return status;
 800e6c2:	7d7b      	ldrb	r3, [r7, #21]
 800e6c4:	e000      	b.n	800e6c8 <MCF8316C_WriteSetting+0x4c>
	}
	return HAL_OK;
 800e6c6:	2300      	movs	r3, #0
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3718      	adds	r7, #24
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}

0800e6d0 <MCF8316C_ReadSetting>:

HAL_StatusTypeDef MCF8316C_ReadSetting(I2C_HandleTypeDef *hi2c) {
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b088      	sub	sp, #32
 800e6d4:	af02      	add	r7, sp, #8
 800e6d6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	uint8_t tx_buffer[7];
	uint16_t slave_address_8bit = MCF8316C_I2C_ADDRESS_7BIT << 1;
 800e6d8:	2302      	movs	r3, #2
 800e6da:	82fb      	strh	r3, [r7, #22]

	tx_buffer[0] = CONTROL_READ | CONTROL_CRC | CONTROL_DATA_LEN
 800e6dc:	2390      	movs	r3, #144	@ 0x90
 800e6de:	733b      	strb	r3, [r7, #12]
			| CONTROL_MEM_SEC;
	tx_buffer[1] = ((MCF8316C_WRITE_READ_ADDR >> 8) & 0xF) | CONTROL_MEM_PAGE;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	737b      	strb	r3, [r7, #13]
	tx_buffer[2] = MCF8316C_WRITE_READ_ADDR & 0xFF;
 800e6e4:	23ea      	movs	r3, #234	@ 0xea
 800e6e6:	73bb      	strb	r3, [r7, #14]
	tx_buffer[3] = MCF8316C_REG_READ_BIT & 0xFF;
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	73fb      	strb	r3, [r7, #15]
	tx_buffer[4] = (MCF8316C_REG_READ_BIT >> 8) & 0xFF;
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	743b      	strb	r3, [r7, #16]
	tx_buffer[5] = (MCF8316C_REG_READ_BIT >> 16) & 0xFF;
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	747b      	strb	r3, [r7, #17]
	tx_buffer[6] = (MCF8316C_REG_READ_BIT >> 24) & 0xFF;
 800e6f4:	2340      	movs	r3, #64	@ 0x40
 800e6f6:	74bb      	strb	r3, [r7, #18]

	status = HAL_I2C_Master_Transmit(hi2c, slave_address_8bit, tx_buffer,
 800e6f8:	f107 020c 	add.w	r2, r7, #12
 800e6fc:	8af9      	ldrh	r1, [r7, #22]
 800e6fe:	f04f 33ff 	mov.w	r3, #4294967295
 800e702:	9300      	str	r3, [sp, #0]
 800e704:	2307      	movs	r3, #7
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f7f6 fb04 	bl	8004d14 <HAL_I2C_Master_Transmit>
 800e70c:	4603      	mov	r3, r0
 800e70e:	757b      	strb	r3, [r7, #21]
			sizeof(tx_buffer),
			HAL_MAX_DELAY);
	if (status != HAL_OK) {
 800e710:	7d7b      	ldrb	r3, [r7, #21]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d001      	beq.n	800e71a <MCF8316C_ReadSetting+0x4a>
		return status;
 800e716:	7d7b      	ldrb	r3, [r7, #21]
 800e718:	e000      	b.n	800e71c <MCF8316C_ReadSetting+0x4c>
	}
	return HAL_OK;
 800e71a:	2300      	movs	r3, #0
}
 800e71c:	4618      	mov	r0, r3
 800e71e:	3718      	adds	r7, #24
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}

0800e724 <MCF8316C_WriteRegister>:

HAL_StatusTypeDef MCF8316C_WriteRegister(I2C_HandleTypeDef *hi2c,
		uint16_t reg_addr, uint8_t *pData) {
 800e724:	b580      	push	{r7, lr}
 800e726:	b08a      	sub	sp, #40	@ 0x28
 800e728:	af02      	add	r7, sp, #8
 800e72a:	60f8      	str	r0, [r7, #12]
 800e72c:	460b      	mov	r3, r1
 800e72e:	607a      	str	r2, [r7, #4]
 800e730:	817b      	strh	r3, [r7, #10]

	HAL_StatusTypeDef status;
	uint8_t tx_buffer[7];
	uint16_t slave_address_8bit = MCF8316C_I2C_ADDRESS_7BIT << 1;
 800e732:	2302      	movs	r3, #2
 800e734:	83fb      	strh	r3, [r7, #30]

	tx_buffer[0] = CONTROL_WRITE | CONTROL_CRC | CONTROL_DATA_LEN
 800e736:	2310      	movs	r3, #16
 800e738:	753b      	strb	r3, [r7, #20]
			| CONTROL_MEM_SEC;
	tx_buffer[1] = ((reg_addr >> 8) & 0xF) | CONTROL_MEM_PAGE;
 800e73a:	897b      	ldrh	r3, [r7, #10]
 800e73c:	0a1b      	lsrs	r3, r3, #8
 800e73e:	b29b      	uxth	r3, r3
 800e740:	b2db      	uxtb	r3, r3
 800e742:	f003 030f 	and.w	r3, r3, #15
 800e746:	b2db      	uxtb	r3, r3
 800e748:	757b      	strb	r3, [r7, #21]
	tx_buffer[2] = reg_addr & 0xFF;
 800e74a:	897b      	ldrh	r3, [r7, #10]
 800e74c:	b2db      	uxtb	r3, r3
 800e74e:	75bb      	strb	r3, [r7, #22]
	tx_buffer[3] = *(pData + 0);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	781b      	ldrb	r3, [r3, #0]
 800e754:	75fb      	strb	r3, [r7, #23]
	tx_buffer[4] = *(pData + 1);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	785b      	ldrb	r3, [r3, #1]
 800e75a:	763b      	strb	r3, [r7, #24]
	tx_buffer[5] = *(pData + 2);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	789b      	ldrb	r3, [r3, #2]
 800e760:	767b      	strb	r3, [r7, #25]
	tx_buffer[6] = *(pData + 3);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	78db      	ldrb	r3, [r3, #3]
 800e766:	76bb      	strb	r3, [r7, #26]
	status = HAL_I2C_Master_Transmit(hi2c, slave_address_8bit, tx_buffer,
 800e768:	f107 0214 	add.w	r2, r7, #20
 800e76c:	8bf9      	ldrh	r1, [r7, #30]
 800e76e:	f04f 33ff 	mov.w	r3, #4294967295
 800e772:	9300      	str	r3, [sp, #0]
 800e774:	2307      	movs	r3, #7
 800e776:	68f8      	ldr	r0, [r7, #12]
 800e778:	f7f6 facc 	bl	8004d14 <HAL_I2C_Master_Transmit>
 800e77c:	4603      	mov	r3, r0
 800e77e:	777b      	strb	r3, [r7, #29]
			sizeof(tx_buffer),
			HAL_MAX_DELAY);
	if (status != HAL_OK) {
 800e780:	7f7b      	ldrb	r3, [r7, #29]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d001      	beq.n	800e78a <MCF8316C_WriteRegister+0x66>
		return status;
 800e786:	7f7b      	ldrb	r3, [r7, #29]
 800e788:	e000      	b.n	800e78c <MCF8316C_WriteRegister+0x68>
	}
	return HAL_OK;
 800e78a:	2300      	movs	r3, #0
}
 800e78c:	4618      	mov	r0, r3
 800e78e:	3720      	adds	r7, #32
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}

0800e794 <MCF8316C_ReadRegister>:

HAL_StatusTypeDef MCF8316C_ReadRegister(I2C_HandleTypeDef *hi2c,
		uint16_t reg_addr, uint8_t *pData, uint16_t Size) {
 800e794:	b580      	push	{r7, lr}
 800e796:	b088      	sub	sp, #32
 800e798:	af02      	add	r7, sp, #8
 800e79a:	60f8      	str	r0, [r7, #12]
 800e79c:	607a      	str	r2, [r7, #4]
 800e79e:	461a      	mov	r2, r3
 800e7a0:	460b      	mov	r3, r1
 800e7a2:	817b      	strh	r3, [r7, #10]
 800e7a4:	4613      	mov	r3, r2
 800e7a6:	813b      	strh	r3, [r7, #8]

	HAL_StatusTypeDef status;
	uint8_t tx_buffer[3];
	uint16_t slave_address_8bit = MCF8316C_I2C_ADDRESS_7BIT << 1;
 800e7a8:	2302      	movs	r3, #2
 800e7aa:	82fb      	strh	r3, [r7, #22]

	tx_buffer[0] = CONTROL_READ | CONTROL_CRC | CONTROL_DATA_LEN
 800e7ac:	2390      	movs	r3, #144	@ 0x90
 800e7ae:	743b      	strb	r3, [r7, #16]
			| CONTROL_MEM_SEC;
	tx_buffer[1] = ((reg_addr >> 8) & 0xF) | CONTROL_MEM_PAGE;
 800e7b0:	897b      	ldrh	r3, [r7, #10]
 800e7b2:	0a1b      	lsrs	r3, r3, #8
 800e7b4:	b29b      	uxth	r3, r3
 800e7b6:	b2db      	uxtb	r3, r3
 800e7b8:	f003 030f 	and.w	r3, r3, #15
 800e7bc:	b2db      	uxtb	r3, r3
 800e7be:	747b      	strb	r3, [r7, #17]
	tx_buffer[2] = reg_addr & 0xFF;
 800e7c0:	897b      	ldrh	r3, [r7, #10]
 800e7c2:	b2db      	uxtb	r3, r3
 800e7c4:	74bb      	strb	r3, [r7, #18]

	status = HAL_I2C_Master_Transmit(hi2c, slave_address_8bit, tx_buffer,
 800e7c6:	f107 0210 	add.w	r2, r7, #16
 800e7ca:	8af9      	ldrh	r1, [r7, #22]
 800e7cc:	f04f 33ff 	mov.w	r3, #4294967295
 800e7d0:	9300      	str	r3, [sp, #0]
 800e7d2:	2303      	movs	r3, #3
 800e7d4:	68f8      	ldr	r0, [r7, #12]
 800e7d6:	f7f6 fa9d 	bl	8004d14 <HAL_I2C_Master_Transmit>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	757b      	strb	r3, [r7, #21]
			sizeof(tx_buffer),
			HAL_MAX_DELAY);
	if (status != HAL_OK) {
 800e7de:	7d7b      	ldrb	r3, [r7, #21]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d001      	beq.n	800e7e8 <MCF8316C_ReadRegister+0x54>
		return status;
 800e7e4:	7d7b      	ldrb	r3, [r7, #21]
 800e7e6:	e010      	b.n	800e80a <MCF8316C_ReadRegister+0x76>
	}

	status = HAL_I2C_Master_Receive(hi2c, slave_address_8bit, pData, Size,
 800e7e8:	893b      	ldrh	r3, [r7, #8]
 800e7ea:	8af9      	ldrh	r1, [r7, #22]
 800e7ec:	f04f 32ff 	mov.w	r2, #4294967295
 800e7f0:	9200      	str	r2, [sp, #0]
 800e7f2:	687a      	ldr	r2, [r7, #4]
 800e7f4:	68f8      	ldr	r0, [r7, #12]
 800e7f6:	f7f6 fba5 	bl	8004f44 <HAL_I2C_Master_Receive>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	757b      	strb	r3, [r7, #21]
	HAL_MAX_DELAY);
	if (status != HAL_OK) {
 800e7fe:	7d7b      	ldrb	r3, [r7, #21]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d001      	beq.n	800e808 <MCF8316C_ReadRegister+0x74>
		return status;
 800e804:	7d7b      	ldrb	r3, [r7, #21]
 800e806:	e000      	b.n	800e80a <MCF8316C_ReadRegister+0x76>
	}

	return HAL_OK;
 800e808:	2300      	movs	r3, #0
}
 800e80a:	4618      	mov	r0, r3
 800e80c:	3718      	adds	r7, #24
 800e80e:	46bd      	mov	sp, r7
 800e810:	bd80      	pop	{r7, pc}
	...

0800e814 <MCF8316C_Get_Voltage>:

void MCF8316C_Get_Voltage() {
 800e814:	b580      	push	{r7, lr}
 800e816:	b08c      	sub	sp, #48	@ 0x30
 800e818:	af02      	add	r7, sp, #8
	uint8_t rx_bufferL[4];
	uint8_t rx_bufferR[4];
	while (!HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin)) {
 800e81a:	e068      	b.n	800e8ee <MCF8316C_Get_Voltage+0xda>
		MCF8316C_ReadRegister(MCF8316C_I2C_LEFT_CHANNEL,
 800e81c:	1d3a      	adds	r2, r7, #4
 800e81e:	2304      	movs	r3, #4
 800e820:	f240 4176 	movw	r1, #1142	@ 0x476
 800e824:	483d      	ldr	r0, [pc, #244]	@ (800e91c <MCF8316C_Get_Voltage+0x108>)
 800e826:	f7ff ffb5 	bl	800e794 <MCF8316C_ReadRegister>
		MCF8316C_VM_ADDR, rx_bufferL, sizeof(rx_bufferL));
		MCF8316C_ReadRegister(MCF8316C_I2C_RIGHT_CHANNEL,
 800e82a:	463a      	mov	r2, r7
 800e82c:	2304      	movs	r3, #4
 800e82e:	f240 4176 	movw	r1, #1142	@ 0x476
 800e832:	483b      	ldr	r0, [pc, #236]	@ (800e920 <MCF8316C_Get_Voltage+0x10c>)
 800e834:	f7ff ffae 	bl	800e794 <MCF8316C_ReadRegister>
		MCF8316C_VM_ADDR, rx_bufferR, sizeof(rx_bufferR));
		uint32_t voltL = 0;
 800e838:	2300      	movs	r3, #0
 800e83a:	627b      	str	r3, [r7, #36]	@ 0x24
		uint32_t voltR = 0;
 800e83c:	2300      	movs	r3, #0
 800e83e:	623b      	str	r3, [r7, #32]
		for (uint8_t i = 0; i < sizeof(rx_bufferL); i++) {
 800e840:	2300      	movs	r3, #0
 800e842:	77fb      	strb	r3, [r7, #31]
 800e844:	e01c      	b.n	800e880 <MCF8316C_Get_Voltage+0x6c>
			voltL |= (*(rx_bufferL + i) << (8 * i));
 800e846:	7ffb      	ldrb	r3, [r7, #31]
 800e848:	1d3a      	adds	r2, r7, #4
 800e84a:	4413      	add	r3, r2
 800e84c:	781b      	ldrb	r3, [r3, #0]
 800e84e:	461a      	mov	r2, r3
 800e850:	7ffb      	ldrb	r3, [r7, #31]
 800e852:	00db      	lsls	r3, r3, #3
 800e854:	fa02 f303 	lsl.w	r3, r2, r3
 800e858:	461a      	mov	r2, r3
 800e85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e85c:	4313      	orrs	r3, r2
 800e85e:	627b      	str	r3, [r7, #36]	@ 0x24
			voltR |= (*(rx_bufferR + i) << (8 * i));
 800e860:	7ffb      	ldrb	r3, [r7, #31]
 800e862:	463a      	mov	r2, r7
 800e864:	4413      	add	r3, r2
 800e866:	781b      	ldrb	r3, [r3, #0]
 800e868:	461a      	mov	r2, r3
 800e86a:	7ffb      	ldrb	r3, [r7, #31]
 800e86c:	00db      	lsls	r3, r3, #3
 800e86e:	fa02 f303 	lsl.w	r3, r2, r3
 800e872:	461a      	mov	r2, r3
 800e874:	6a3b      	ldr	r3, [r7, #32]
 800e876:	4313      	orrs	r3, r2
 800e878:	623b      	str	r3, [r7, #32]
		for (uint8_t i = 0; i < sizeof(rx_bufferL); i++) {
 800e87a:	7ffb      	ldrb	r3, [r7, #31]
 800e87c:	3301      	adds	r3, #1
 800e87e:	77fb      	strb	r3, [r7, #31]
 800e880:	7ffb      	ldrb	r3, [r7, #31]
 800e882:	2b03      	cmp	r3, #3
 800e884:	d9df      	bls.n	800e846 <MCF8316C_Get_Voltage+0x32>
		}
		double vmL = (double) (voltL * VM_COEFF1 / VM_COEFF2);
 800e886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e888:	ee07 3a90 	vmov	s15, r3
 800e88c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e890:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800e924 <MCF8316C_Get_Voltage+0x110>
 800e894:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e898:	eddf 6a23 	vldr	s13, [pc, #140]	@ 800e928 <MCF8316C_Get_Voltage+0x114>
 800e89c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e8a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e8a4:	ed87 7b04 	vstr	d7, [r7, #16]
		double vmR = (double) (voltR * VM_COEFF1 / VM_COEFF2);
 800e8a8:	6a3b      	ldr	r3, [r7, #32]
 800e8aa:	ee07 3a90 	vmov	s15, r3
 800e8ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8b2:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 800e924 <MCF8316C_Get_Voltage+0x110>
 800e8b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e8ba:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 800e928 <MCF8316C_Get_Voltage+0x114>
 800e8be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e8c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e8c6:	ed87 7b02 	vstr	d7, [r7, #8]
		Custom_LCD_Printf(0, 0, "VL:%2.4f", vmL);
 800e8ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e8ce:	e9cd 2300 	strd	r2, r3, [sp]
 800e8d2:	4a16      	ldr	r2, [pc, #88]	@ (800e92c <MCF8316C_Get_Voltage+0x118>)
 800e8d4:	2100      	movs	r1, #0
 800e8d6:	2000      	movs	r0, #0
 800e8d8:	f7f2 fc20 	bl	800111c <Custom_LCD_Printf>
		Custom_LCD_Printf(0, 1, "VR:%2.4f", vmR);
 800e8dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e8e0:	e9cd 2300 	strd	r2, r3, [sp]
 800e8e4:	4a12      	ldr	r2, [pc, #72]	@ (800e930 <MCF8316C_Get_Voltage+0x11c>)
 800e8e6:	2101      	movs	r1, #1
 800e8e8:	2000      	movs	r0, #0
 800e8ea:	f7f2 fc17 	bl	800111c <Custom_LCD_Printf>
	while (!HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin)) {
 800e8ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800e8f2:	4810      	ldr	r0, [pc, #64]	@ (800e934 <MCF8316C_Get_Voltage+0x120>)
 800e8f4:	f7f6 f940 	bl	8004b78 <HAL_GPIO_ReadPin>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d08e      	beq.n	800e81c <MCF8316C_Get_Voltage+0x8>
	}
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin))
 800e8fe:	bf00      	nop
 800e900:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800e904:	480b      	ldr	r0, [pc, #44]	@ (800e934 <MCF8316C_Get_Voltage+0x120>)
 800e906:	f7f6 f937 	bl	8004b78 <HAL_GPIO_ReadPin>
 800e90a:	4603      	mov	r3, r0
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d1f7      	bne.n	800e900 <MCF8316C_Get_Voltage+0xec>
		;
}
 800e910:	bf00      	nop
 800e912:	bf00      	nop
 800e914:	3728      	adds	r7, #40	@ 0x28
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}
 800e91a:	bf00      	nop
 800e91c:	24000c24 	.word	0x24000c24
 800e920:	24000c78 	.word	0x24000c78
 800e924:	42700000 	.word	0x42700000
 800e928:	4d000000 	.word	0x4d000000
 800e92c:	08016da8 	.word	0x08016da8
 800e930:	08016db4 	.word	0x08016db4
 800e934:	58020800 	.word	0x58020800

0800e938 <MCF8316C_WriteData>:

HAL_StatusTypeDef MCF8316C_WriteData(I2C_HandleTypeDef *hi2c, uint16_t reg_addr,
		uint32_t pData) {
 800e938:	b580      	push	{r7, lr}
 800e93a:	b086      	sub	sp, #24
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	60f8      	str	r0, [r7, #12]
 800e940:	460b      	mov	r3, r1
 800e942:	607a      	str	r2, [r7, #4]
 800e944:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef status;
	uint8_t tx_buffer[4];

	for (uint8_t i = 0; i < 4; i++) {
 800e946:	2300      	movs	r3, #0
 800e948:	75fb      	strb	r3, [r7, #23]
 800e94a:	e00c      	b.n	800e966 <MCF8316C_WriteData+0x2e>
		tx_buffer[i] = pData & 0xFF;
 800e94c:	7dfb      	ldrb	r3, [r7, #23]
 800e94e:	687a      	ldr	r2, [r7, #4]
 800e950:	b2d2      	uxtb	r2, r2
 800e952:	3318      	adds	r3, #24
 800e954:	443b      	add	r3, r7
 800e956:	f803 2c08 	strb.w	r2, [r3, #-8]
		pData = pData >> 8;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	0a1b      	lsrs	r3, r3, #8
 800e95e:	607b      	str	r3, [r7, #4]
	for (uint8_t i = 0; i < 4; i++) {
 800e960:	7dfb      	ldrb	r3, [r7, #23]
 800e962:	3301      	adds	r3, #1
 800e964:	75fb      	strb	r3, [r7, #23]
 800e966:	7dfb      	ldrb	r3, [r7, #23]
 800e968:	2b03      	cmp	r3, #3
 800e96a:	d9ef      	bls.n	800e94c <MCF8316C_WriteData+0x14>
	}
	status = MCF8316C_WriteRegister(hi2c, reg_addr, tx_buffer);
 800e96c:	f107 0210 	add.w	r2, r7, #16
 800e970:	897b      	ldrh	r3, [r7, #10]
 800e972:	4619      	mov	r1, r3
 800e974:	68f8      	ldr	r0, [r7, #12]
 800e976:	f7ff fed5 	bl	800e724 <MCF8316C_WriteRegister>
 800e97a:	4603      	mov	r3, r0
 800e97c:	75bb      	strb	r3, [r7, #22]
	if (status)
 800e97e:	7dbb      	ldrb	r3, [r7, #22]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d001      	beq.n	800e988 <MCF8316C_WriteData+0x50>
		return status;
 800e984:	7dbb      	ldrb	r3, [r7, #22]
 800e986:	e000      	b.n	800e98a <MCF8316C_WriteData+0x52>
	return HAL_OK;
 800e988:	2300      	movs	r3, #0
}
 800e98a:	4618      	mov	r0, r3
 800e98c:	3718      	adds	r7, #24
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}
	...

0800e994 <MCF8316C_Set_I2C_Addr>:
		;
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin))
		;
}

void MCF8316C_Set_I2C_Addr() {
 800e994:	b580      	push	{r7, lr}
 800e996:	b086      	sub	sp, #24
 800e998:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;
	uint32_t fail_addr = 0;
 800e99a:	2300      	movs	r3, #0
 800e99c:	617b      	str	r3, [r7, #20]
	uint32_t fail_addrL = 0;
 800e99e:	2300      	movs	r3, #0
 800e9a0:	60bb      	str	r3, [r7, #8]
	uint32_t fail_addrR = 0;
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	607b      	str	r3, [r7, #4]

	I2C_HandleTypeDef *hi2c = MCF8316C_I2C_LEFT_CHANNEL;
 800e9a6:	4b07      	ldr	r3, [pc, #28]	@ (800e9c4 <MCF8316C_Set_I2C_Addr+0x30>)
 800e9a8:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < 2; i++) {
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	73fb      	strb	r3, [r7, #15]
 800e9ae:	e1e3      	b.n	800ed78 <MCF8316C_Set_I2C_Addr+0x3e4>
		if (i % 2) {
 800e9b0:	7bfb      	ldrb	r3, [r7, #15]
 800e9b2:	f003 0301 	and.w	r3, r3, #1
 800e9b6:	b2db      	uxtb	r3, r3
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d007      	beq.n	800e9cc <MCF8316C_Set_I2C_Addr+0x38>
			hi2c = MCF8316C_I2C_RIGHT_CHANNEL;
 800e9bc:	4b02      	ldr	r3, [pc, #8]	@ (800e9c8 <MCF8316C_Set_I2C_Addr+0x34>)
 800e9be:	613b      	str	r3, [r7, #16]
 800e9c0:	e006      	b.n	800e9d0 <MCF8316C_Set_I2C_Addr+0x3c>
 800e9c2:	bf00      	nop
 800e9c4:	24000c24 	.word	0x24000c24
 800e9c8:	24000c78 	.word	0x24000c78
		} else
			hi2c = MCF8316C_I2C_LEFT_CHANNEL;
 800e9cc:	4bab      	ldr	r3, [pc, #684]	@ (800ec7c <MCF8316C_Set_I2C_Addr+0x2e8>)
 800e9ce:	613b      	str	r3, [r7, #16]
		status = MCF8316C_WriteData(hi2c, ISD_CONFIG_ADDR, ISD_CONFIG_DATA);
 800e9d0:	4aab      	ldr	r2, [pc, #684]	@ (800ec80 <MCF8316C_Set_I2C_Addr+0x2ec>)
 800e9d2:	2180      	movs	r1, #128	@ 0x80
 800e9d4:	6938      	ldr	r0, [r7, #16]
 800e9d6:	f7ff ffaf 	bl	800e938 <MCF8316C_WriteData>
 800e9da:	4603      	mov	r3, r0
 800e9dc:	70fb      	strb	r3, [r7, #3]
		if (status)
 800e9de:	78fb      	ldrb	r3, [r7, #3]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d003      	beq.n	800e9ec <MCF8316C_Set_I2C_Addr+0x58>
			fail_addr |= 0x1 << 0;
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	f043 0301 	orr.w	r3, r3, #1
 800e9ea:	617b      	str	r3, [r7, #20]
		status = MCF8316C_WriteData(hi2c, REV_DRIVE_CONFIG_ADDR,
 800e9ec:	4aa5      	ldr	r2, [pc, #660]	@ (800ec84 <MCF8316C_Set_I2C_Addr+0x2f0>)
 800e9ee:	2182      	movs	r1, #130	@ 0x82
 800e9f0:	6938      	ldr	r0, [r7, #16]
 800e9f2:	f7ff ffa1 	bl	800e938 <MCF8316C_WriteData>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	70fb      	strb	r3, [r7, #3]
		REV_DRIVE_CONFIG_DATA);
		if (status)
 800e9fa:	78fb      	ldrb	r3, [r7, #3]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d003      	beq.n	800ea08 <MCF8316C_Set_I2C_Addr+0x74>
			fail_addr |= 0x1 << 1;
 800ea00:	697b      	ldr	r3, [r7, #20]
 800ea02:	f043 0302 	orr.w	r3, r3, #2
 800ea06:	617b      	str	r3, [r7, #20]
		status = MCF8316C_WriteData(hi2c, MOTOR_STARTUP1_ADDR,
 800ea08:	4a9f      	ldr	r2, [pc, #636]	@ (800ec88 <MCF8316C_Set_I2C_Addr+0x2f4>)
 800ea0a:	2184      	movs	r1, #132	@ 0x84
 800ea0c:	6938      	ldr	r0, [r7, #16]
 800ea0e:	f7ff ff93 	bl	800e938 <MCF8316C_WriteData>
 800ea12:	4603      	mov	r3, r0
 800ea14:	70fb      	strb	r3, [r7, #3]
		MOTOR_STARTUP1_DATA);
		if (status)
 800ea16:	78fb      	ldrb	r3, [r7, #3]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d003      	beq.n	800ea24 <MCF8316C_Set_I2C_Addr+0x90>
			fail_addr |= 0x1 << 2;
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	f043 0304 	orr.w	r3, r3, #4
 800ea22:	617b      	str	r3, [r7, #20]
		status = MCF8316C_WriteData(hi2c, MOTOR_STARTUP2_ADDR,
 800ea24:	4a99      	ldr	r2, [pc, #612]	@ (800ec8c <MCF8316C_Set_I2C_Addr+0x2f8>)
 800ea26:	2186      	movs	r1, #134	@ 0x86
 800ea28:	6938      	ldr	r0, [r7, #16]
 800ea2a:	f7ff ff85 	bl	800e938 <MCF8316C_WriteData>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	70fb      	strb	r3, [r7, #3]
		MOTOR_STARTUP2_DATA);
		if (status)
 800ea32:	78fb      	ldrb	r3, [r7, #3]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d003      	beq.n	800ea40 <MCF8316C_Set_I2C_Addr+0xac>
			fail_addr |= 0x1 << 3;
 800ea38:	697b      	ldr	r3, [r7, #20]
 800ea3a:	f043 0308 	orr.w	r3, r3, #8
 800ea3e:	617b      	str	r3, [r7, #20]
		status = MCF8316C_WriteData(hi2c, CLOSED_LOOP1_ADDR,
 800ea40:	4a93      	ldr	r2, [pc, #588]	@ (800ec90 <MCF8316C_Set_I2C_Addr+0x2fc>)
 800ea42:	2188      	movs	r1, #136	@ 0x88
 800ea44:	6938      	ldr	r0, [r7, #16]
 800ea46:	f7ff ff77 	bl	800e938 <MCF8316C_WriteData>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	70fb      	strb	r3, [r7, #3]
		CLOSED_LOOP1_DATA);
		if (status)
 800ea4e:	78fb      	ldrb	r3, [r7, #3]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d003      	beq.n	800ea5c <MCF8316C_Set_I2C_Addr+0xc8>
			fail_addr |= 0x1 << 4;
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	f043 0310 	orr.w	r3, r3, #16
 800ea5a:	617b      	str	r3, [r7, #20]
		status = MCF8316C_WriteData(hi2c, CLOSED_LOOP2_ADDR,
 800ea5c:	4a8d      	ldr	r2, [pc, #564]	@ (800ec94 <MCF8316C_Set_I2C_Addr+0x300>)
 800ea5e:	218a      	movs	r1, #138	@ 0x8a
 800ea60:	6938      	ldr	r0, [r7, #16]
 800ea62:	f7ff ff69 	bl	800e938 <MCF8316C_WriteData>
 800ea66:	4603      	mov	r3, r0
 800ea68:	70fb      	strb	r3, [r7, #3]
		CLOSED_LOOP2_DATA);
		if (status)
 800ea6a:	78fb      	ldrb	r3, [r7, #3]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d003      	beq.n	800ea78 <MCF8316C_Set_I2C_Addr+0xe4>
			fail_addr |= 0x1 << 5;
 800ea70:	697b      	ldr	r3, [r7, #20]
 800ea72:	f043 0320 	orr.w	r3, r3, #32
 800ea76:	617b      	str	r3, [r7, #20]
		status = MCF8316C_WriteData(hi2c, CLOSED_LOOP3_ADDR,
 800ea78:	4a87      	ldr	r2, [pc, #540]	@ (800ec98 <MCF8316C_Set_I2C_Addr+0x304>)
 800ea7a:	218c      	movs	r1, #140	@ 0x8c
 800ea7c:	6938      	ldr	r0, [r7, #16]
 800ea7e:	f7ff ff5b 	bl	800e938 <MCF8316C_WriteData>
 800ea82:	4603      	mov	r3, r0
 800ea84:	70fb      	strb	r3, [r7, #3]
		CLOSED_LOOP3_DATA);
		if (status)
 800ea86:	78fb      	ldrb	r3, [r7, #3]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d003      	beq.n	800ea94 <MCF8316C_Set_I2C_Addr+0x100>
			fail_addr |= 0x1 << 6;
 800ea8c:	697b      	ldr	r3, [r7, #20]
 800ea8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea92:	617b      	str	r3, [r7, #20]
		status = MCF8316C_WriteData(hi2c, CLOSED_LOOP4_ADDR,
 800ea94:	4a81      	ldr	r2, [pc, #516]	@ (800ec9c <MCF8316C_Set_I2C_Addr+0x308>)
 800ea96:	218e      	movs	r1, #142	@ 0x8e
 800ea98:	6938      	ldr	r0, [r7, #16]
 800ea9a:	f7ff ff4d 	bl	800e938 <MCF8316C_WriteData>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	70fb      	strb	r3, [r7, #3]
		CLOSED_LOOP4_DATA);
		if (status)
 800eaa2:	78fb      	ldrb	r3, [r7, #3]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d003      	beq.n	800eab0 <MCF8316C_Set_I2C_Addr+0x11c>
			fail_addr |= 0x1 << 7;
 800eaa8:	697b      	ldr	r3, [r7, #20]
 800eaaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eaae:	617b      	str	r3, [r7, #20]
		status = MCF8316C_WriteData(hi2c, REF_PROFILES1_ADDR,
 800eab0:	4a7b      	ldr	r2, [pc, #492]	@ (800eca0 <MCF8316C_Set_I2C_Addr+0x30c>)
 800eab2:	2194      	movs	r1, #148	@ 0x94
 800eab4:	6938      	ldr	r0, [r7, #16]
 800eab6:	f7ff ff3f 	bl	800e938 <MCF8316C_WriteData>
 800eaba:	4603      	mov	r3, r0
 800eabc:	70fb      	strb	r3, [r7, #3]
		REF_PROFILE1_DATA);
		if (status)
 800eabe:	78fb      	ldrb	r3, [r7, #3]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d003      	beq.n	800eacc <MCF8316C_Set_I2C_Addr+0x138>
			fail_addr |= 0x1 << 8;
 800eac4:	697b      	ldr	r3, [r7, #20]
 800eac6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800eaca:	617b      	str	r3, [r7, #20]
		status = MCF8316C_WriteData(hi2c, REF_PROFILES2_ADDR,
 800eacc:	4a75      	ldr	r2, [pc, #468]	@ (800eca4 <MCF8316C_Set_I2C_Addr+0x310>)
 800eace:	2196      	movs	r1, #150	@ 0x96
 800ead0:	6938      	ldr	r0, [r7, #16]
 800ead2:	f7ff ff31 	bl	800e938 <MCF8316C_WriteData>
 800ead6:	4603      	mov	r3, r0
 800ead8:	70fb      	strb	r3, [r7, #3]
		REF_PROFILE2_DATA);
		if (status)
 800eada:	78fb      	ldrb	r3, [r7, #3]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d003      	beq.n	800eae8 <MCF8316C_Set_I2C_Addr+0x154>
			fail_addr |= 0x1 << 9;
 800eae0:	697b      	ldr	r3, [r7, #20]
 800eae2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800eae6:	617b      	str	r3, [r7, #20]
		status = MCF8316C_WriteData(hi2c, REF_PROFILES3_ADDR,
 800eae8:	4a6f      	ldr	r2, [pc, #444]	@ (800eca8 <MCF8316C_Set_I2C_Addr+0x314>)
 800eaea:	2198      	movs	r1, #152	@ 0x98
 800eaec:	6938      	ldr	r0, [r7, #16]
 800eaee:	f7ff ff23 	bl	800e938 <MCF8316C_WriteData>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	70fb      	strb	r3, [r7, #3]
		REF_PROFILE3_DATA);
		if (status)
 800eaf6:	78fb      	ldrb	r3, [r7, #3]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d003      	beq.n	800eb04 <MCF8316C_Set_I2C_Addr+0x170>
			fail_addr |= 0x1 << 10;
 800eafc:	697b      	ldr	r3, [r7, #20]
 800eafe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800eb02:	617b      	str	r3, [r7, #20]
		status = MCF8316C_WriteData(hi2c, REF_PROFILES4_ADDR,
 800eb04:	4a69      	ldr	r2, [pc, #420]	@ (800ecac <MCF8316C_Set_I2C_Addr+0x318>)
 800eb06:	219a      	movs	r1, #154	@ 0x9a
 800eb08:	6938      	ldr	r0, [r7, #16]
 800eb0a:	f7ff ff15 	bl	800e938 <MCF8316C_WriteData>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	70fb      	strb	r3, [r7, #3]
		REF_PROFILE4_DATA);
		if (status)
 800eb12:	78fb      	ldrb	r3, [r7, #3]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d003      	beq.n	800eb20 <MCF8316C_Set_I2C_Addr+0x18c>
			fail_addr |= 0x1 << 11;
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800eb1e:	617b      	str	r3, [r7, #20]
		status = MCF8316C_WriteData(hi2c, REF_PROFILES5_ADDR,
 800eb20:	4a63      	ldr	r2, [pc, #396]	@ (800ecb0 <MCF8316C_Set_I2C_Addr+0x31c>)
 800eb22:	219c      	movs	r1, #156	@ 0x9c
 800eb24:	6938      	ldr	r0, [r7, #16]
 800eb26:	f7ff ff07 	bl	800e938 <MCF8316C_WriteData>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	70fb      	strb	r3, [r7, #3]
		REF_PROFILE5_DATA);
		if (status)
 800eb2e:	78fb      	ldrb	r3, [r7, #3]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d003      	beq.n	800eb3c <MCF8316C_Set_I2C_Addr+0x1a8>
			fail_addr |= 0x1 << 12;
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800eb3a:	617b      	str	r3, [r7, #20]
		status = MCF8316C_WriteData(hi2c, REF_PROFILES6_ADDR,
 800eb3c:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 800eb40:	219e      	movs	r1, #158	@ 0x9e
 800eb42:	6938      	ldr	r0, [r7, #16]
 800eb44:	f7ff fef8 	bl	800e938 <MCF8316C_WriteData>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	70fb      	strb	r3, [r7, #3]
		REF_PROFILE6_DATA);
		if (status)
 800eb4c:	78fb      	ldrb	r3, [r7, #3]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d003      	beq.n	800eb5a <MCF8316C_Set_I2C_Addr+0x1c6>
			fail_addr |= 0x1 << 13;
 800eb52:	697b      	ldr	r3, [r7, #20]
 800eb54:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800eb58:	617b      	str	r3, [r7, #20]
		status = MCF8316C_WriteData(hi2c, FAULT_CONFIG1_ADDR,
 800eb5a:	4a56      	ldr	r2, [pc, #344]	@ (800ecb4 <MCF8316C_Set_I2C_Addr+0x320>)
 800eb5c:	2190      	movs	r1, #144	@ 0x90
 800eb5e:	6938      	ldr	r0, [r7, #16]
 800eb60:	f7ff feea 	bl	800e938 <MCF8316C_WriteData>
 800eb64:	4603      	mov	r3, r0
 800eb66:	70fb      	strb	r3, [r7, #3]
		FAULT_CONFIG1_DATA);
		if (status)
 800eb68:	78fb      	ldrb	r3, [r7, #3]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d003      	beq.n	800eb76 <MCF8316C_Set_I2C_Addr+0x1e2>
			fail_addr |= 0x1 << 14;
 800eb6e:	697b      	ldr	r3, [r7, #20]
 800eb70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800eb74:	617b      	str	r3, [r7, #20]
		status = MCF8316C_WriteData(hi2c, FAULT_CONFIG2_ADDR,
 800eb76:	4a50      	ldr	r2, [pc, #320]	@ (800ecb8 <MCF8316C_Set_I2C_Addr+0x324>)
 800eb78:	2192      	movs	r1, #146	@ 0x92
 800eb7a:	6938      	ldr	r0, [r7, #16]
 800eb7c:	f7ff fedc 	bl	800e938 <MCF8316C_WriteData>
 800eb80:	4603      	mov	r3, r0
 800eb82:	70fb      	strb	r3, [r7, #3]
		FAULT_CONFIG2_DATA);
		if (status)
 800eb84:	78fb      	ldrb	r3, [r7, #3]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d003      	beq.n	800eb92 <MCF8316C_Set_I2C_Addr+0x1fe>
			fail_addr |= 0x1 << 15;
 800eb8a:	697b      	ldr	r3, [r7, #20]
 800eb8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800eb90:	617b      	str	r3, [r7, #20]
		status = MCF8316C_WriteData(hi2c, PIN_CONFIG_ADDR, PIN_CONFIG_DATA);
 800eb92:	f240 3209 	movw	r2, #777	@ 0x309
 800eb96:	21a4      	movs	r1, #164	@ 0xa4
 800eb98:	6938      	ldr	r0, [r7, #16]
 800eb9a:	f7ff fecd 	bl	800e938 <MCF8316C_WriteData>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	70fb      	strb	r3, [r7, #3]
		if (status)
 800eba2:	78fb      	ldrb	r3, [r7, #3]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d003      	beq.n	800ebb0 <MCF8316C_Set_I2C_Addr+0x21c>
			fail_addr |= 0x1 << 16;
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ebae:	617b      	str	r3, [r7, #20]
		status = MCF8316C_WriteData(hi2c, DEVICE_CONFIG1_ADDR,
 800ebb0:	4a42      	ldr	r2, [pc, #264]	@ (800ecbc <MCF8316C_Set_I2C_Addr+0x328>)
 800ebb2:	21a6      	movs	r1, #166	@ 0xa6
 800ebb4:	6938      	ldr	r0, [r7, #16]
 800ebb6:	f7ff febf 	bl	800e938 <MCF8316C_WriteData>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	70fb      	strb	r3, [r7, #3]
		DEVICE_CONFIG1_DATA);
		if (status)
 800ebbe:	78fb      	ldrb	r3, [r7, #3]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d003      	beq.n	800ebcc <MCF8316C_Set_I2C_Addr+0x238>
			fail_addr |= 0x1 << 17;
 800ebc4:	697b      	ldr	r3, [r7, #20]
 800ebc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ebca:	617b      	str	r3, [r7, #20]
		status = MCF8316C_WriteData(hi2c, DEVICE_CONFIG2_ADDR,
 800ebcc:	4a3c      	ldr	r2, [pc, #240]	@ (800ecc0 <MCF8316C_Set_I2C_Addr+0x32c>)
 800ebce:	21a8      	movs	r1, #168	@ 0xa8
 800ebd0:	6938      	ldr	r0, [r7, #16]
 800ebd2:	f7ff feb1 	bl	800e938 <MCF8316C_WriteData>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	70fb      	strb	r3, [r7, #3]
		DEVICE_CONFIG2_DATA);
		if (status)
 800ebda:	78fb      	ldrb	r3, [r7, #3]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d003      	beq.n	800ebe8 <MCF8316C_Set_I2C_Addr+0x254>
			fail_addr |= 0x1 << 18;
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ebe6:	617b      	str	r3, [r7, #20]
		status = MCF8316C_WriteData(hi2c, PERI_CONFIG1_ADDR,
 800ebe8:	4a36      	ldr	r2, [pc, #216]	@ (800ecc4 <MCF8316C_Set_I2C_Addr+0x330>)
 800ebea:	21aa      	movs	r1, #170	@ 0xaa
 800ebec:	6938      	ldr	r0, [r7, #16]
 800ebee:	f7ff fea3 	bl	800e938 <MCF8316C_WriteData>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	70fb      	strb	r3, [r7, #3]
		PERI_CONFIG1_DATA);
		if (status)
 800ebf6:	78fb      	ldrb	r3, [r7, #3]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d003      	beq.n	800ec04 <MCF8316C_Set_I2C_Addr+0x270>
			fail_addr |= 0x1 << 19;
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ec02:	617b      	str	r3, [r7, #20]
		status = MCF8316C_WriteData(hi2c, GD_CONFIG1_ADDR, GD_CONFIG1_DATA);
 800ec04:	4a30      	ldr	r2, [pc, #192]	@ (800ecc8 <MCF8316C_Set_I2C_Addr+0x334>)
 800ec06:	21ac      	movs	r1, #172	@ 0xac
 800ec08:	6938      	ldr	r0, [r7, #16]
 800ec0a:	f7ff fe95 	bl	800e938 <MCF8316C_WriteData>
 800ec0e:	4603      	mov	r3, r0
 800ec10:	70fb      	strb	r3, [r7, #3]
		if (status)
 800ec12:	78fb      	ldrb	r3, [r7, #3]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d003      	beq.n	800ec20 <MCF8316C_Set_I2C_Addr+0x28c>
			fail_addr |= 0x1 << 20;
 800ec18:	697b      	ldr	r3, [r7, #20]
 800ec1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ec1e:	617b      	str	r3, [r7, #20]
		status = MCF8316C_WriteData(hi2c, GD_CONFIG2_ADDR, GD_CONFIG2_DATA);
 800ec20:	f04f 72c2 	mov.w	r2, #25427968	@ 0x1840000
 800ec24:	21ae      	movs	r1, #174	@ 0xae
 800ec26:	6938      	ldr	r0, [r7, #16]
 800ec28:	f7ff fe86 	bl	800e938 <MCF8316C_WriteData>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	70fb      	strb	r3, [r7, #3]
		if (status)
 800ec30:	78fb      	ldrb	r3, [r7, #3]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d003      	beq.n	800ec3e <MCF8316C_Set_I2C_Addr+0x2aa>
			fail_addr |= 0x1 << 21;
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ec3c:	617b      	str	r3, [r7, #20]
		status = MCF8316C_WriteData(hi2c, INT_ALGO_1_ADDR, INT_ALGO_1_DATA);
 800ec3e:	4a23      	ldr	r2, [pc, #140]	@ (800eccc <MCF8316C_Set_I2C_Addr+0x338>)
 800ec40:	21a0      	movs	r1, #160	@ 0xa0
 800ec42:	6938      	ldr	r0, [r7, #16]
 800ec44:	f7ff fe78 	bl	800e938 <MCF8316C_WriteData>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	70fb      	strb	r3, [r7, #3]
		if (status)
 800ec4c:	78fb      	ldrb	r3, [r7, #3]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d003      	beq.n	800ec5a <MCF8316C_Set_I2C_Addr+0x2c6>
			fail_addr |= 0x1 << 22;
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ec58:	617b      	str	r3, [r7, #20]
		status = MCF8316C_WriteData(hi2c, INT_ALGO_2_ADDR, INT_ALGO_2_DATA);
 800ec5a:	f240 12a1 	movw	r2, #417	@ 0x1a1
 800ec5e:	21a2      	movs	r1, #162	@ 0xa2
 800ec60:	6938      	ldr	r0, [r7, #16]
 800ec62:	f7ff fe69 	bl	800e938 <MCF8316C_WriteData>
 800ec66:	4603      	mov	r3, r0
 800ec68:	70fb      	strb	r3, [r7, #3]
		if (status)
 800ec6a:	78fb      	ldrb	r3, [r7, #3]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d02f      	beq.n	800ecd0 <MCF8316C_Set_I2C_Addr+0x33c>
			fail_addr |= 0x1 << 23;
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ec76:	617b      	str	r3, [r7, #20]
 800ec78:	e02a      	b.n	800ecd0 <MCF8316C_Set_I2C_Addr+0x33c>
 800ec7a:	bf00      	nop
 800ec7c:	24000c24 	.word	0x24000c24
 800ec80:	64738ca0 	.word	0x64738ca0
 800ec84:	28200000 	.word	0x28200000
 800ec88:	0b6807d0 	.word	0x0b6807d0
 800ec8c:	23066004 	.word	0x23066004
 800ec90:	51318fb8 	.word	0x51318fb8
 800ec94:	08ee0000 	.word	0x08ee0000
 800ec98:	00400a90 	.word	0x00400a90
 800ec9c:	01c012fc 	.word	0x01c012fc
 800eca0:	00280044 	.word	0x00280044
 800eca4:	0406080a 	.word	0x0406080a
 800eca8:	07078600 	.word	0x07078600
 800ecac:	00809020 	.word	0x00809020
 800ecb0:	18202800 	.word	0x18202800
 800ecb4:	2ada30a6 	.word	0x2ada30a6
 800ecb8:	71522088 	.word	0x71522088
 800ecbc:	08100006 	.word	0x08100006
 800ecc0:	61a8a100 	.word	0x61a8a100
 800ecc4:	41465c00 	.word	0x41465c00
 800ecc8:	1c228000 	.word	0x1c228000
 800eccc:	0508683d 	.word	0x0508683d
		status = MCF8316C_WriteData(hi2c, ALGO_DEBUG2_ADDR,
 800ecd0:	223f      	movs	r2, #63	@ 0x3f
 800ecd2:	21ee      	movs	r1, #238	@ 0xee
 800ecd4:	6938      	ldr	r0, [r7, #16]
 800ecd6:	f7ff fe2f 	bl	800e938 <MCF8316C_WriteData>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	70fb      	strb	r3, [r7, #3]
		ALGO_DEBUG2_DATA);
		if (status)
 800ecde:	78fb      	ldrb	r3, [r7, #3]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d003      	beq.n	800ecec <MCF8316C_Set_I2C_Addr+0x358>
			fail_addr |= 0x1 << 24;
 800ece4:	697b      	ldr	r3, [r7, #20]
 800ece6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ecea:	617b      	str	r3, [r7, #20]

		status = MCF8316C_WriteSetting(MCF8316C_I2C_RIGHT_CHANNEL);
 800ecec:	4830      	ldr	r0, [pc, #192]	@ (800edb0 <MCF8316C_Set_I2C_Addr+0x41c>)
 800ecee:	f7ff fcc5 	bl	800e67c <MCF8316C_WriteSetting>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	70fb      	strb	r3, [r7, #3]
		HAL_Delay(300);
 800ecf6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ecfa:	f7f3 fe79 	bl	80029f0 <HAL_Delay>
		if (status)
 800ecfe:	78fb      	ldrb	r3, [r7, #3]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d004      	beq.n	800ed0e <MCF8316C_Set_I2C_Addr+0x37a>
			HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, GPIO_PIN_SET);
 800ed04:	2201      	movs	r2, #1
 800ed06:	2108      	movs	r1, #8
 800ed08:	482a      	ldr	r0, [pc, #168]	@ (800edb4 <MCF8316C_Set_I2C_Addr+0x420>)
 800ed0a:	f7f5 ff4d 	bl	8004ba8 <HAL_GPIO_WritePin>
		if (i) {
 800ed0e:	7bfb      	ldrb	r3, [r7, #15]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d016      	beq.n	800ed42 <MCF8316C_Set_I2C_Addr+0x3ae>
			fail_addrR = fail_addr;
 800ed14:	697b      	ldr	r3, [r7, #20]
 800ed16:	607b      	str	r3, [r7, #4]
			if (status) {
 800ed18:	78fb      	ldrb	r3, [r7, #3]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d00b      	beq.n	800ed36 <MCF8316C_Set_I2C_Addr+0x3a2>
				Custom_LCD_Printf(0, 2, "R FAIL");
 800ed1e:	4a26      	ldr	r2, [pc, #152]	@ (800edb8 <MCF8316C_Set_I2C_Addr+0x424>)
 800ed20:	2102      	movs	r1, #2
 800ed22:	2000      	movs	r0, #0
 800ed24:	f7f2 f9fa 	bl	800111c <Custom_LCD_Printf>
				Custom_LCD_Printf(0, 3, "%03x", fail_addrR);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	4a24      	ldr	r2, [pc, #144]	@ (800edbc <MCF8316C_Set_I2C_Addr+0x428>)
 800ed2c:	2103      	movs	r1, #3
 800ed2e:	2000      	movs	r0, #0
 800ed30:	f7f2 f9f4 	bl	800111c <Custom_LCD_Printf>
 800ed34:	e01b      	b.n	800ed6e <MCF8316C_Set_I2C_Addr+0x3da>
			} else
				Custom_LCD_Printf(0, 2, "R SUCCESS");
 800ed36:	4a22      	ldr	r2, [pc, #136]	@ (800edc0 <MCF8316C_Set_I2C_Addr+0x42c>)
 800ed38:	2102      	movs	r1, #2
 800ed3a:	2000      	movs	r0, #0
 800ed3c:	f7f2 f9ee 	bl	800111c <Custom_LCD_Printf>
 800ed40:	e015      	b.n	800ed6e <MCF8316C_Set_I2C_Addr+0x3da>
		} else {
			fail_addrL = fail_addr;
 800ed42:	697b      	ldr	r3, [r7, #20]
 800ed44:	60bb      	str	r3, [r7, #8]
			if (status) {
 800ed46:	78fb      	ldrb	r3, [r7, #3]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d00b      	beq.n	800ed64 <MCF8316C_Set_I2C_Addr+0x3d0>
				Custom_LCD_Printf(0, 0, "L FAIL");
 800ed4c:	4a1d      	ldr	r2, [pc, #116]	@ (800edc4 <MCF8316C_Set_I2C_Addr+0x430>)
 800ed4e:	2100      	movs	r1, #0
 800ed50:	2000      	movs	r0, #0
 800ed52:	f7f2 f9e3 	bl	800111c <Custom_LCD_Printf>
				Custom_LCD_Printf(0, 1, "%03x", fail_addrL);
 800ed56:	68bb      	ldr	r3, [r7, #8]
 800ed58:	4a18      	ldr	r2, [pc, #96]	@ (800edbc <MCF8316C_Set_I2C_Addr+0x428>)
 800ed5a:	2101      	movs	r1, #1
 800ed5c:	2000      	movs	r0, #0
 800ed5e:	f7f2 f9dd 	bl	800111c <Custom_LCD_Printf>
 800ed62:	e004      	b.n	800ed6e <MCF8316C_Set_I2C_Addr+0x3da>
			} else
				Custom_LCD_Printf(0, 0, "L SUCCESS");
 800ed64:	4a18      	ldr	r2, [pc, #96]	@ (800edc8 <MCF8316C_Set_I2C_Addr+0x434>)
 800ed66:	2100      	movs	r1, #0
 800ed68:	2000      	movs	r0, #0
 800ed6a:	f7f2 f9d7 	bl	800111c <Custom_LCD_Printf>
		}
		fail_addr = 0;
 800ed6e:	2300      	movs	r3, #0
 800ed70:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < 2; i++) {
 800ed72:	7bfb      	ldrb	r3, [r7, #15]
 800ed74:	3301      	adds	r3, #1
 800ed76:	73fb      	strb	r3, [r7, #15]
 800ed78:	7bfb      	ldrb	r3, [r7, #15]
 800ed7a:	2b01      	cmp	r3, #1
 800ed7c:	f67f ae18 	bls.w	800e9b0 <MCF8316C_Set_I2C_Addr+0x1c>
	}

	while (!HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin))
 800ed80:	bf00      	nop
 800ed82:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ed86:	4811      	ldr	r0, [pc, #68]	@ (800edcc <MCF8316C_Set_I2C_Addr+0x438>)
 800ed88:	f7f5 fef6 	bl	8004b78 <HAL_GPIO_ReadPin>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d0f7      	beq.n	800ed82 <MCF8316C_Set_I2C_Addr+0x3ee>
		;
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin))
 800ed92:	bf00      	nop
 800ed94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ed98:	480c      	ldr	r0, [pc, #48]	@ (800edcc <MCF8316C_Set_I2C_Addr+0x438>)
 800ed9a:	f7f5 feed 	bl	8004b78 <HAL_GPIO_ReadPin>
 800ed9e:	4603      	mov	r3, r0
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d1f7      	bne.n	800ed94 <MCF8316C_Set_I2C_Addr+0x400>
		;
}
 800eda4:	bf00      	nop
 800eda6:	bf00      	nop
 800eda8:	3718      	adds	r7, #24
 800edaa:	46bd      	mov	sp, r7
 800edac:	bd80      	pop	{r7, pc}
 800edae:	bf00      	nop
 800edb0:	24000c78 	.word	0x24000c78
 800edb4:	58021000 	.word	0x58021000
 800edb8:	08016e2c 	.word	0x08016e2c
 800edbc:	08016e34 	.word	0x08016e34
 800edc0:	08016e3c 	.word	0x08016e3c
 800edc4:	08016e48 	.word	0x08016e48
 800edc8:	08016e50 	.word	0x08016e50
 800edcc:	58020800 	.word	0x58020800

0800edd0 <MCF8316C_Test_Fault>:
		;
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin))
		;
}

void MCF8316C_Test_Fault() {
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b086      	sub	sp, #24
 800edd4:	af04      	add	r7, sp, #16
	uint8_t rx_buffer[4];
	uint8_t left_fault = false;
 800edd6:	2300      	movs	r3, #0
 800edd8:	71fb      	strb	r3, [r7, #7]
	uint8_t right_fault = false;
 800edda:	2300      	movs	r3, #0
 800eddc:	71bb      	strb	r3, [r7, #6]
	while (!HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin)) {
 800edde:	e079      	b.n	800eed4 <MCF8316C_Test_Fault+0x104>
		left_fault = !(HAL_GPIO_ReadPin( Motor_L_nFAULT_GPIO_Port,
 800ede0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ede4:	485f      	ldr	r0, [pc, #380]	@ (800ef64 <MCF8316C_Test_Fault+0x194>)
 800ede6:	f7f5 fec7 	bl	8004b78 <HAL_GPIO_ReadPin>
 800edea:	4603      	mov	r3, r0
 800edec:	2b00      	cmp	r3, #0
 800edee:	bf0c      	ite	eq
 800edf0:	2301      	moveq	r3, #1
 800edf2:	2300      	movne	r3, #0
 800edf4:	b2db      	uxtb	r3, r3
 800edf6:	71fb      	strb	r3, [r7, #7]
		Motor_L_nFAULT_Pin));
		right_fault = !(HAL_GPIO_ReadPin( Motor_R_nFAULT_GPIO_Port,
 800edf8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800edfc:	485a      	ldr	r0, [pc, #360]	@ (800ef68 <MCF8316C_Test_Fault+0x198>)
 800edfe:	f7f5 febb 	bl	8004b78 <HAL_GPIO_ReadPin>
 800ee02:	4603      	mov	r3, r0
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	bf0c      	ite	eq
 800ee08:	2301      	moveq	r3, #1
 800ee0a:	2300      	movne	r3, #0
 800ee0c:	b2db      	uxtb	r3, r3
 800ee0e:	71bb      	strb	r3, [r7, #6]
		Motor_R_nFAULT_Pin));
		MCF8316C_ReadSetting(MCF8316C_I2C_LEFT_CHANNEL);
 800ee10:	4856      	ldr	r0, [pc, #344]	@ (800ef6c <MCF8316C_Test_Fault+0x19c>)
 800ee12:	f7ff fc5d 	bl	800e6d0 <MCF8316C_ReadSetting>
		MCF8316C_ReadSetting(MCF8316C_I2C_RIGHT_CHANNEL);
 800ee16:	4856      	ldr	r0, [pc, #344]	@ (800ef70 <MCF8316C_Test_Fault+0x1a0>)
 800ee18:	f7ff fc5a 	bl	800e6d0 <MCF8316C_ReadSetting>
		HAL_Delay(100);
 800ee1c:	2064      	movs	r0, #100	@ 0x64
 800ee1e:	f7f3 fde7 	bl	80029f0 <HAL_Delay>
		MCF8316C_ReadRegister(MCF8316C_I2C_LEFT_CHANNEL, DRIVER_FAULT_ADDR,
 800ee22:	463a      	mov	r2, r7
 800ee24:	2304      	movs	r3, #4
 800ee26:	21e0      	movs	r1, #224	@ 0xe0
 800ee28:	4850      	ldr	r0, [pc, #320]	@ (800ef6c <MCF8316C_Test_Fault+0x19c>)
 800ee2a:	f7ff fcb3 	bl	800e794 <MCF8316C_ReadRegister>
				rx_buffer, sizeof(rx_buffer));
		Custom_LCD_Printf(0, 0, "L:%02x%02x%02x%02x", rx_buffer[3],
 800ee2e:	78fb      	ldrb	r3, [r7, #3]
 800ee30:	4618      	mov	r0, r3
				rx_buffer[2], rx_buffer[1], rx_buffer[0]);
 800ee32:	78bb      	ldrb	r3, [r7, #2]
 800ee34:	787a      	ldrb	r2, [r7, #1]
 800ee36:	7839      	ldrb	r1, [r7, #0]
		Custom_LCD_Printf(0, 0, "L:%02x%02x%02x%02x", rx_buffer[3],
 800ee38:	9102      	str	r1, [sp, #8]
 800ee3a:	9201      	str	r2, [sp, #4]
 800ee3c:	9300      	str	r3, [sp, #0]
 800ee3e:	4603      	mov	r3, r0
 800ee40:	4a4c      	ldr	r2, [pc, #304]	@ (800ef74 <MCF8316C_Test_Fault+0x1a4>)
 800ee42:	2100      	movs	r1, #0
 800ee44:	2000      	movs	r0, #0
 800ee46:	f7f2 f969 	bl	800111c <Custom_LCD_Printf>

		MCF8316C_ReadRegister(MCF8316C_I2C_LEFT_CHANNEL, CONTROLLER_FAULT_ADDR,
 800ee4a:	463a      	mov	r2, r7
 800ee4c:	2304      	movs	r3, #4
 800ee4e:	21e2      	movs	r1, #226	@ 0xe2
 800ee50:	4846      	ldr	r0, [pc, #280]	@ (800ef6c <MCF8316C_Test_Fault+0x19c>)
 800ee52:	f7ff fc9f 	bl	800e794 <MCF8316C_ReadRegister>
				rx_buffer, sizeof(rx_buffer));
		Custom_LCD_Printf(0, 1, "L:%02x%02x%02x%02x", rx_buffer[3],
 800ee56:	78fb      	ldrb	r3, [r7, #3]
 800ee58:	4618      	mov	r0, r3
				rx_buffer[2], rx_buffer[1], rx_buffer[0]);
 800ee5a:	78bb      	ldrb	r3, [r7, #2]
 800ee5c:	787a      	ldrb	r2, [r7, #1]
 800ee5e:	7839      	ldrb	r1, [r7, #0]
		Custom_LCD_Printf(0, 1, "L:%02x%02x%02x%02x", rx_buffer[3],
 800ee60:	9102      	str	r1, [sp, #8]
 800ee62:	9201      	str	r2, [sp, #4]
 800ee64:	9300      	str	r3, [sp, #0]
 800ee66:	4603      	mov	r3, r0
 800ee68:	4a42      	ldr	r2, [pc, #264]	@ (800ef74 <MCF8316C_Test_Fault+0x1a4>)
 800ee6a:	2101      	movs	r1, #1
 800ee6c:	2000      	movs	r0, #0
 800ee6e:	f7f2 f955 	bl	800111c <Custom_LCD_Printf>

		MCF8316C_ReadRegister(MCF8316C_I2C_RIGHT_CHANNEL, DRIVER_FAULT_ADDR,
 800ee72:	463a      	mov	r2, r7
 800ee74:	2304      	movs	r3, #4
 800ee76:	21e0      	movs	r1, #224	@ 0xe0
 800ee78:	483d      	ldr	r0, [pc, #244]	@ (800ef70 <MCF8316C_Test_Fault+0x1a0>)
 800ee7a:	f7ff fc8b 	bl	800e794 <MCF8316C_ReadRegister>
				rx_buffer, sizeof(rx_buffer));
		Custom_LCD_Printf(0, 2, "R:%02x%02x%02x%02x", rx_buffer[3],
 800ee7e:	78fb      	ldrb	r3, [r7, #3]
 800ee80:	4618      	mov	r0, r3
				rx_buffer[2], rx_buffer[1], rx_buffer[0]);
 800ee82:	78bb      	ldrb	r3, [r7, #2]
 800ee84:	787a      	ldrb	r2, [r7, #1]
 800ee86:	7839      	ldrb	r1, [r7, #0]
		Custom_LCD_Printf(0, 2, "R:%02x%02x%02x%02x", rx_buffer[3],
 800ee88:	9102      	str	r1, [sp, #8]
 800ee8a:	9201      	str	r2, [sp, #4]
 800ee8c:	9300      	str	r3, [sp, #0]
 800ee8e:	4603      	mov	r3, r0
 800ee90:	4a39      	ldr	r2, [pc, #228]	@ (800ef78 <MCF8316C_Test_Fault+0x1a8>)
 800ee92:	2102      	movs	r1, #2
 800ee94:	2000      	movs	r0, #0
 800ee96:	f7f2 f941 	bl	800111c <Custom_LCD_Printf>

		MCF8316C_ReadRegister(MCF8316C_I2C_RIGHT_CHANNEL, CONTROLLER_FAULT_ADDR,
 800ee9a:	463a      	mov	r2, r7
 800ee9c:	2304      	movs	r3, #4
 800ee9e:	21e2      	movs	r1, #226	@ 0xe2
 800eea0:	4833      	ldr	r0, [pc, #204]	@ (800ef70 <MCF8316C_Test_Fault+0x1a0>)
 800eea2:	f7ff fc77 	bl	800e794 <MCF8316C_ReadRegister>
				rx_buffer, sizeof(rx_buffer));
		Custom_LCD_Printf(0, 3, "R:%02x%02x%02x%02x", rx_buffer[3],
 800eea6:	78fb      	ldrb	r3, [r7, #3]
 800eea8:	4618      	mov	r0, r3
				rx_buffer[2], rx_buffer[1], rx_buffer[0]);
 800eeaa:	78bb      	ldrb	r3, [r7, #2]
 800eeac:	787a      	ldrb	r2, [r7, #1]
 800eeae:	7839      	ldrb	r1, [r7, #0]
		Custom_LCD_Printf(0, 3, "R:%02x%02x%02x%02x", rx_buffer[3],
 800eeb0:	9102      	str	r1, [sp, #8]
 800eeb2:	9201      	str	r2, [sp, #4]
 800eeb4:	9300      	str	r3, [sp, #0]
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	4a2f      	ldr	r2, [pc, #188]	@ (800ef78 <MCF8316C_Test_Fault+0x1a8>)
 800eeba:	2103      	movs	r1, #3
 800eebc:	2000      	movs	r0, #0
 800eebe:	f7f2 f92d 	bl	800111c <Custom_LCD_Printf>

		Custom_LCD_Printf(0, 4, "L: %d R: %d", left_fault, right_fault);
 800eec2:	79fa      	ldrb	r2, [r7, #7]
 800eec4:	79bb      	ldrb	r3, [r7, #6]
 800eec6:	9300      	str	r3, [sp, #0]
 800eec8:	4613      	mov	r3, r2
 800eeca:	4a2c      	ldr	r2, [pc, #176]	@ (800ef7c <MCF8316C_Test_Fault+0x1ac>)
 800eecc:	2104      	movs	r1, #4
 800eece:	2000      	movs	r0, #0
 800eed0:	f7f2 f924 	bl	800111c <Custom_LCD_Printf>
	while (!HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin)) {
 800eed4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800eed8:	4829      	ldr	r0, [pc, #164]	@ (800ef80 <MCF8316C_Test_Fault+0x1b0>)
 800eeda:	f7f5 fe4d 	bl	8004b78 <HAL_GPIO_ReadPin>
 800eede:	4603      	mov	r3, r0
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	f43f af7d 	beq.w	800ede0 <MCF8316C_Test_Fault+0x10>
	}
	if (left_fault || right_fault) {
 800eee6:	79fb      	ldrb	r3, [r7, #7]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d102      	bne.n	800eef2 <MCF8316C_Test_Fault+0x122>
 800eeec:	79bb      	ldrb	r3, [r7, #6]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d029      	beq.n	800ef46 <MCF8316C_Test_Fault+0x176>
		MCF8316C_WriteData(MCF8316C_I2C_LEFT_CHANNEL, CONTROLLER_FAULT_ADDR,
 800eef2:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 800eef6:	21e2      	movs	r1, #226	@ 0xe2
 800eef8:	481c      	ldr	r0, [pc, #112]	@ (800ef6c <MCF8316C_Test_Fault+0x19c>)
 800eefa:	f7ff fd1d 	bl	800e938 <MCF8316C_WriteData>
		MCF8316C_FAULT_CLEAR);
		MCF8316C_WriteData(MCF8316C_I2C_RIGHT_CHANNEL, CONTROLLER_FAULT_ADDR,
 800eefe:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 800ef02:	21e2      	movs	r1, #226	@ 0xe2
 800ef04:	481a      	ldr	r0, [pc, #104]	@ (800ef70 <MCF8316C_Test_Fault+0x1a0>)
 800ef06:	f7ff fd17 	bl	800e938 <MCF8316C_WriteData>
		MCF8316C_FAULT_CLEAR);
		MCF8316C_WriteSetting(MCF8316C_I2C_LEFT_CHANNEL);
 800ef0a:	4818      	ldr	r0, [pc, #96]	@ (800ef6c <MCF8316C_Test_Fault+0x19c>)
 800ef0c:	f7ff fbb6 	bl	800e67c <MCF8316C_WriteSetting>
		MCF8316C_WriteSetting(MCF8316C_I2C_RIGHT_CHANNEL);
 800ef10:	4817      	ldr	r0, [pc, #92]	@ (800ef70 <MCF8316C_Test_Fault+0x1a0>)
 800ef12:	f7ff fbb3 	bl	800e67c <MCF8316C_WriteSetting>
		HAL_Delay(300);
 800ef16:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ef1a:	f7f3 fd69 	bl	80029f0 <HAL_Delay>
		MCF8316C_WriteData(MCF8316C_I2C_LEFT_CHANNEL, ALGO_CTRL1_ADDR,
 800ef1e:	2200      	movs	r2, #0
 800ef20:	21ea      	movs	r1, #234	@ 0xea
 800ef22:	4812      	ldr	r0, [pc, #72]	@ (800ef6c <MCF8316C_Test_Fault+0x19c>)
 800ef24:	f7ff fd08 	bl	800e938 <MCF8316C_WriteData>
				0x00000000);
		MCF8316C_WriteData(MCF8316C_I2C_RIGHT_CHANNEL, ALGO_CTRL1_ADDR,
 800ef28:	2200      	movs	r2, #0
 800ef2a:	21ea      	movs	r1, #234	@ 0xea
 800ef2c:	4810      	ldr	r0, [pc, #64]	@ (800ef70 <MCF8316C_Test_Fault+0x1a0>)
 800ef2e:	f7ff fd03 	bl	800e938 <MCF8316C_WriteData>
				0x00000000);
		MCF8316C_WriteSetting(MCF8316C_I2C_LEFT_CHANNEL);
 800ef32:	480e      	ldr	r0, [pc, #56]	@ (800ef6c <MCF8316C_Test_Fault+0x19c>)
 800ef34:	f7ff fba2 	bl	800e67c <MCF8316C_WriteSetting>
		MCF8316C_WriteSetting(MCF8316C_I2C_RIGHT_CHANNEL);
 800ef38:	480d      	ldr	r0, [pc, #52]	@ (800ef70 <MCF8316C_Test_Fault+0x1a0>)
 800ef3a:	f7ff fb9f 	bl	800e67c <MCF8316C_WriteSetting>
		HAL_Delay(300);
 800ef3e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ef42:	f7f3 fd55 	bl	80029f0 <HAL_Delay>
	}
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin))
 800ef46:	bf00      	nop
 800ef48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ef4c:	480c      	ldr	r0, [pc, #48]	@ (800ef80 <MCF8316C_Test_Fault+0x1b0>)
 800ef4e:	f7f5 fe13 	bl	8004b78 <HAL_GPIO_ReadPin>
 800ef52:	4603      	mov	r3, r0
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d1f7      	bne.n	800ef48 <MCF8316C_Test_Fault+0x178>
		;
}
 800ef58:	bf00      	nop
 800ef5a:	bf00      	nop
 800ef5c:	3708      	adds	r7, #8
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}
 800ef62:	bf00      	nop
 800ef64:	58020c00 	.word	0x58020c00
 800ef68:	58020000 	.word	0x58020000
 800ef6c:	24000c24 	.word	0x24000c24
 800ef70:	24000c78 	.word	0x24000c78
 800ef74:	08016e70 	.word	0x08016e70
 800ef78:	08016e84 	.word	0x08016e84
 800ef7c:	08016e98 	.word	0x08016e98
 800ef80:	58020800 	.word	0x58020800

0800ef84 <MCF8316C_Init>:

void MCF8316C_Init() {	//MPET 루틴
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b088      	sub	sp, #32
 800ef88:	af04      	add	r7, sp, #16
	//Brake, DRVOFF Pin Low 설정: 모터가 돌아야 특정 가능
	HAL_GPIO_WritePin(Motor_L_Brake_GPIO_Port, Motor_L_Brake_Pin,
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ef90:	4866      	ldr	r0, [pc, #408]	@ (800f12c <MCF8316C_Init+0x1a8>)
 800ef92:	f7f5 fe09 	bl	8004ba8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(Motor_L_Driveoff_GPIO_Port, Motor_L_Driveoff_Pin,
 800ef96:	2200      	movs	r2, #0
 800ef98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ef9c:	4863      	ldr	r0, [pc, #396]	@ (800f12c <MCF8316C_Init+0x1a8>)
 800ef9e:	f7f5 fe03 	bl	8004ba8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	//PWM DUTY 설정
	HAL_TIM_PWM_Start(MOTOR_L_TIM, MOTOR_L_CHANNEL);
 800efa2:	2100      	movs	r1, #0
 800efa4:	4862      	ldr	r0, [pc, #392]	@ (800f130 <MCF8316C_Init+0x1ac>)
 800efa6:	f7fd fb17 	bl	800c5d8 <HAL_TIM_PWM_Start>
	uint16_t duty = __HAL_TIM_GET_AUTORELOAD(MOTOR_L_TIM) / 20;
 800efaa:	4b61      	ldr	r3, [pc, #388]	@ (800f130 <MCF8316C_Init+0x1ac>)
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efb0:	4a60      	ldr	r2, [pc, #384]	@ (800f134 <MCF8316C_Init+0x1b0>)
 800efb2:	fba2 2303 	umull	r2, r3, r2, r3
 800efb6:	091b      	lsrs	r3, r3, #4
 800efb8:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COMPARE(MOTOR_L_TIM, MOTOR_L_CHANNEL, duty);
 800efba:	4b5d      	ldr	r3, [pc, #372]	@ (800f130 <MCF8316C_Init+0x1ac>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	89fa      	ldrh	r2, [r7, #14]
 800efc0:	635a      	str	r2, [r3, #52]	@ 0x34

	uint8_t tx_buffer[3];
	tx_buffer[0] = CONTROL_READ | CONTROL_CRC | CONTROL_DATA_16BIT
 800efc2:	2380      	movs	r3, #128	@ 0x80
 800efc4:	723b      	strb	r3, [r7, #8]
			| CONTROL_MEM_SEC;
	tx_buffer[1] = ((MCF8316C_WRITE_READ_ADDR >> 8) & 0xF) | CONTROL_MEM_PAGE;
 800efc6:	2300      	movs	r3, #0
 800efc8:	727b      	strb	r3, [r7, #9]
	tx_buffer[2] = MCF8316C_WRITE_READ_ADDR & 0xFF;
 800efca:	23ea      	movs	r3, #234	@ 0xea
 800efcc:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(MCF8316C_I2C_LEFT_CHANNEL,
 800efce:	f107 0208 	add.w	r2, r7, #8
 800efd2:	f04f 33ff 	mov.w	r3, #4294967295
 800efd6:	9300      	str	r3, [sp, #0]
 800efd8:	2303      	movs	r3, #3
 800efda:	2102      	movs	r1, #2
 800efdc:	4856      	ldr	r0, [pc, #344]	@ (800f138 <MCF8316C_Init+0x1b4>)
 800efde:	f7f5 fe99 	bl	8004d14 <HAL_I2C_Master_Transmit>
	MCF8316C_I2C_ADDRESS_7BIT << 1, tx_buffer, sizeof(tx_buffer),
	HAL_MAX_DELAY);
	HAL_Delay(100);
 800efe2:	2064      	movs	r0, #100	@ 0x64
 800efe4:	f7f3 fd04 	bl	80029f0 <HAL_Delay>
	uint8_t rx_buffer1[2];
	uint8_t rx_buffer2[4];
	uint16_t status;
	tx_buffer[1] = ((ALGORITHM_STATUS_ADDR >> 8) & 0xF) | CONTROL_MEM_PAGE;
 800efe8:	2301      	movs	r3, #1
 800efea:	727b      	strb	r3, [r7, #9]
	tx_buffer[2] = ALGORITHM_STATUS_ADDR & 0xFF;
 800efec:	2390      	movs	r3, #144	@ 0x90
 800efee:	72bb      	strb	r3, [r7, #10]
	while (!HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin)) {
 800eff0:	e064      	b.n	800f0bc <MCF8316C_Init+0x138>
		HAL_I2C_Master_Transmit(MCF8316C_I2C_LEFT_CHANNEL,
 800eff2:	f107 0208 	add.w	r2, r7, #8
 800eff6:	f04f 33ff 	mov.w	r3, #4294967295
 800effa:	9300      	str	r3, [sp, #0]
 800effc:	2303      	movs	r3, #3
 800effe:	2102      	movs	r1, #2
 800f000:	484d      	ldr	r0, [pc, #308]	@ (800f138 <MCF8316C_Init+0x1b4>)
 800f002:	f7f5 fe87 	bl	8004d14 <HAL_I2C_Master_Transmit>
		MCF8316C_I2C_ADDRESS_7BIT << 1, tx_buffer, sizeof(tx_buffer),
		HAL_MAX_DELAY);
		HAL_I2C_Master_Receive(MCF8316C_I2C_LEFT_CHANNEL,
 800f006:	1d3a      	adds	r2, r7, #4
 800f008:	f04f 33ff 	mov.w	r3, #4294967295
 800f00c:	9300      	str	r3, [sp, #0]
 800f00e:	2302      	movs	r3, #2
 800f010:	2102      	movs	r1, #2
 800f012:	4849      	ldr	r0, [pc, #292]	@ (800f138 <MCF8316C_Init+0x1b4>)
 800f014:	f7f5 ff96 	bl	8004f44 <HAL_I2C_Master_Receive>
		MCF8316C_I2C_ADDRESS_7BIT << 1, rx_buffer1, sizeof(rx_buffer1),
		HAL_MAX_DELAY);
		status = *(rx_buffer1 + 1) << 8 | *(rx_buffer1);
 800f018:	797b      	ldrb	r3, [r7, #5]
 800f01a:	b21b      	sxth	r3, r3
 800f01c:	021b      	lsls	r3, r3, #8
 800f01e:	b21a      	sxth	r2, r3
 800f020:	793b      	ldrb	r3, [r7, #4]
 800f022:	b21b      	sxth	r3, r3
 800f024:	4313      	orrs	r3, r2
 800f026:	b21b      	sxth	r3, r3
 800f028:	81bb      	strh	r3, [r7, #12]
		Custom_LCD_Printf(0, 0, "%02x", status);
 800f02a:	89bb      	ldrh	r3, [r7, #12]
 800f02c:	4a43      	ldr	r2, [pc, #268]	@ (800f13c <MCF8316C_Init+0x1b8>)
 800f02e:	2100      	movs	r1, #0
 800f030:	2000      	movs	r0, #0
 800f032:	f7f2 f873 	bl	800111c <Custom_LCD_Printf>
		MCF8316C_ReadRegister(MCF8316C_I2C_LEFT_CHANNEL, MTR_PARAMS, rx_buffer2,
 800f036:	463a      	mov	r2, r7
 800f038:	2304      	movs	r3, #4
 800f03a:	21e6      	movs	r1, #230	@ 0xe6
 800f03c:	483e      	ldr	r0, [pc, #248]	@ (800f138 <MCF8316C_Init+0x1b4>)
 800f03e:	f7ff fba9 	bl	800e794 <MCF8316C_ReadRegister>
				sizeof(rx_buffer2));
		Custom_LCD_Printf(0, 1, "R%02xL%02xBE%02x", rx_buffer2[3],
 800f042:	78fb      	ldrb	r3, [r7, #3]
 800f044:	4619      	mov	r1, r3
				rx_buffer2[1], rx_buffer2[2]);
 800f046:	787b      	ldrb	r3, [r7, #1]
 800f048:	78ba      	ldrb	r2, [r7, #2]
		Custom_LCD_Printf(0, 1, "R%02xL%02xBE%02x", rx_buffer2[3],
 800f04a:	9201      	str	r2, [sp, #4]
 800f04c:	9300      	str	r3, [sp, #0]
 800f04e:	460b      	mov	r3, r1
 800f050:	4a3b      	ldr	r2, [pc, #236]	@ (800f140 <MCF8316C_Init+0x1bc>)
 800f052:	2101      	movs	r1, #1
 800f054:	2000      	movs	r0, #0
 800f056:	f7f2 f861 	bl	800111c <Custom_LCD_Printf>
		MCF8316C_ReadSetting(MCF8316C_I2C_LEFT_CHANNEL);
 800f05a:	4837      	ldr	r0, [pc, #220]	@ (800f138 <MCF8316C_Init+0x1b4>)
 800f05c:	f7ff fb38 	bl	800e6d0 <MCF8316C_ReadSetting>
		HAL_Delay(100);
 800f060:	2064      	movs	r0, #100	@ 0x64
 800f062:	f7f3 fcc5 	bl	80029f0 <HAL_Delay>
		MCF8316C_ReadRegister(MCF8316C_I2C_LEFT_CHANNEL,
 800f066:	463a      	mov	r2, r7
 800f068:	2304      	movs	r3, #4
 800f06a:	21f0      	movs	r1, #240	@ 0xf0
 800f06c:	4832      	ldr	r0, [pc, #200]	@ (800f138 <MCF8316C_Init+0x1b4>)
 800f06e:	f7ff fb91 	bl	800e794 <MCF8316C_ReadRegister>
		MCF8316C_CURR_PI_ADDR, rx_buffer2, sizeof(rx_buffer2));
		Custom_LCD_Printf(0, 2, "%02x%02x%02x%02x", rx_buffer2[3],
 800f072:	78fb      	ldrb	r3, [r7, #3]
 800f074:	4618      	mov	r0, r3
				rx_buffer2[2], rx_buffer2[1], rx_buffer2[0]);
 800f076:	78bb      	ldrb	r3, [r7, #2]
 800f078:	787a      	ldrb	r2, [r7, #1]
 800f07a:	7839      	ldrb	r1, [r7, #0]
		Custom_LCD_Printf(0, 2, "%02x%02x%02x%02x", rx_buffer2[3],
 800f07c:	9102      	str	r1, [sp, #8]
 800f07e:	9201      	str	r2, [sp, #4]
 800f080:	9300      	str	r3, [sp, #0]
 800f082:	4603      	mov	r3, r0
 800f084:	4a2f      	ldr	r2, [pc, #188]	@ (800f144 <MCF8316C_Init+0x1c0>)
 800f086:	2102      	movs	r1, #2
 800f088:	2000      	movs	r0, #0
 800f08a:	f7f2 f847 	bl	800111c <Custom_LCD_Printf>
		MCF8316C_ReadRegister(MCF8316C_I2C_LEFT_CHANNEL,
 800f08e:	463a      	mov	r2, r7
 800f090:	2304      	movs	r3, #4
 800f092:	21f2      	movs	r1, #242	@ 0xf2
 800f094:	4828      	ldr	r0, [pc, #160]	@ (800f138 <MCF8316C_Init+0x1b4>)
 800f096:	f7ff fb7d 	bl	800e794 <MCF8316C_ReadRegister>
		MCF8316C_SPEED_PI_ADDR, rx_buffer2, sizeof(rx_buffer2));
		Custom_LCD_Printf(0, 3, "%02x%02x%02x%02x", rx_buffer2[3],
 800f09a:	78fb      	ldrb	r3, [r7, #3]
 800f09c:	4618      	mov	r0, r3
				rx_buffer2[2], rx_buffer2[1], rx_buffer2[0]);
 800f09e:	78bb      	ldrb	r3, [r7, #2]
 800f0a0:	787a      	ldrb	r2, [r7, #1]
 800f0a2:	7839      	ldrb	r1, [r7, #0]
		Custom_LCD_Printf(0, 3, "%02x%02x%02x%02x", rx_buffer2[3],
 800f0a4:	9102      	str	r1, [sp, #8]
 800f0a6:	9201      	str	r2, [sp, #4]
 800f0a8:	9300      	str	r3, [sp, #0]
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	4a25      	ldr	r2, [pc, #148]	@ (800f144 <MCF8316C_Init+0x1c0>)
 800f0ae:	2103      	movs	r1, #3
 800f0b0:	2000      	movs	r0, #0
 800f0b2:	f7f2 f833 	bl	800111c <Custom_LCD_Printf>
		if (status > 0x16)
 800f0b6:	89bb      	ldrh	r3, [r7, #12]
 800f0b8:	2b16      	cmp	r3, #22
 800f0ba:	d808      	bhi.n	800f0ce <MCF8316C_Init+0x14a>
	while (!HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin)) {
 800f0bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f0c0:	4821      	ldr	r0, [pc, #132]	@ (800f148 <MCF8316C_Init+0x1c4>)
 800f0c2:	f7f5 fd59 	bl	8004b78 <HAL_GPIO_ReadPin>
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d092      	beq.n	800eff2 <MCF8316C_Init+0x6e>
 800f0cc:	e000      	b.n	800f0d0 <MCF8316C_Init+0x14c>
			break;
 800f0ce:	bf00      	nop
	}
	Motor_Stop();
 800f0d0:	f000 f926 	bl	800f320 <Motor_Stop>
	if(0x18){
		MCF8316C_ReadRegister(MCF8316C_I2C_LEFT_CHANNEL, CONTROLLER_FAULT_ADDR,
 800f0d4:	463a      	mov	r2, r7
 800f0d6:	2304      	movs	r3, #4
 800f0d8:	21e2      	movs	r1, #226	@ 0xe2
 800f0da:	4817      	ldr	r0, [pc, #92]	@ (800f138 <MCF8316C_Init+0x1b4>)
 800f0dc:	f7ff fb5a 	bl	800e794 <MCF8316C_ReadRegister>
				rx_buffer2, sizeof(rx_buffer2));
		Custom_LCD_Printf(0, 1, "%02x%02x%02x%02x", rx_buffer2[3],
 800f0e0:	78fb      	ldrb	r3, [r7, #3]
 800f0e2:	4618      	mov	r0, r3
				rx_buffer2[2], rx_buffer2[1], rx_buffer2[0]);
 800f0e4:	78bb      	ldrb	r3, [r7, #2]
 800f0e6:	787a      	ldrb	r2, [r7, #1]
 800f0e8:	7839      	ldrb	r1, [r7, #0]
		Custom_LCD_Printf(0, 1, "%02x%02x%02x%02x", rx_buffer2[3],
 800f0ea:	9102      	str	r1, [sp, #8]
 800f0ec:	9201      	str	r2, [sp, #4]
 800f0ee:	9300      	str	r3, [sp, #0]
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	4a14      	ldr	r2, [pc, #80]	@ (800f144 <MCF8316C_Init+0x1c0>)
 800f0f4:	2101      	movs	r1, #1
 800f0f6:	2000      	movs	r0, #0
 800f0f8:	f7f2 f810 	bl	800111c <Custom_LCD_Printf>
	}
	while (!HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin))
 800f0fc:	bf00      	nop
 800f0fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f102:	4811      	ldr	r0, [pc, #68]	@ (800f148 <MCF8316C_Init+0x1c4>)
 800f104:	f7f5 fd38 	bl	8004b78 <HAL_GPIO_ReadPin>
 800f108:	4603      	mov	r3, r0
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d0f7      	beq.n	800f0fe <MCF8316C_Init+0x17a>
		;
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin))
 800f10e:	bf00      	nop
 800f110:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f114:	480c      	ldr	r0, [pc, #48]	@ (800f148 <MCF8316C_Init+0x1c4>)
 800f116:	f7f5 fd2f 	bl	8004b78 <HAL_GPIO_ReadPin>
 800f11a:	4603      	mov	r3, r0
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d1f7      	bne.n	800f110 <MCF8316C_Init+0x18c>
		;
}
 800f120:	bf00      	nop
 800f122:	bf00      	nop
 800f124:	3710      	adds	r7, #16
 800f126:	46bd      	mov	sp, r7
 800f128:	bd80      	pop	{r7, pc}
 800f12a:	bf00      	nop
 800f12c:	58020c00 	.word	0x58020c00
 800f130:	2400106c 	.word	0x2400106c
 800f134:	cccccccd 	.word	0xcccccccd
 800f138:	24000c24 	.word	0x24000c24
 800f13c:	08016ea4 	.word	0x08016ea4
 800f140:	08016eac 	.word	0x08016eac
 800f144:	08016de8 	.word	0x08016de8
 800f148:	58020800 	.word	0x58020800

0800f14c <Motor_Init>:
#include "lptim.h"
#include "math.h"
#include "lcd.h"
#include "mcf8316c.h"

void Motor_Init() {
 800f14c:	b580      	push	{r7, lr}
 800f14e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(MOTOR_L_TIM, MOTOR_L_CHANNEL, 0);
 800f150:	4b10      	ldr	r3, [pc, #64]	@ (800f194 <Motor_Init+0x48>)
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	2200      	movs	r2, #0
 800f156:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(MOTOR_R_TIM, MOTOR_R_CHANNEL, 0);
 800f158:	4b0e      	ldr	r3, [pc, #56]	@ (800f194 <Motor_Init+0x48>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	2200      	movs	r2, #0
 800f15e:	639a      	str	r2, [r3, #56]	@ 0x38

	HAL_GPIO_WritePin(Motor_L_Driveoff_GPIO_Port, Motor_L_Driveoff_Pin,
 800f160:	2201      	movs	r2, #1
 800f162:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f166:	480c      	ldr	r0, [pc, #48]	@ (800f198 <Motor_Init+0x4c>)
 800f168:	f7f5 fd1e 	bl	8004ba8 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(Motor_R_Driveoff_GPIO_Port, Motor_R_Driveoff_Pin,
 800f16c:	2201      	movs	r2, #1
 800f16e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f172:	480a      	ldr	r0, [pc, #40]	@ (800f19c <Motor_Init+0x50>)
 800f174:	f7f5 fd18 	bl	8004ba8 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(Motor_L_Brake_GPIO_Port, Motor_L_Brake_Pin, GPIO_PIN_SET);
 800f178:	2201      	movs	r2, #1
 800f17a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800f17e:	4806      	ldr	r0, [pc, #24]	@ (800f198 <Motor_Init+0x4c>)
 800f180:	f7f5 fd12 	bl	8004ba8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor_R_Brake_GPIO_Port, Motor_R_Brake_Pin, GPIO_PIN_SET);
 800f184:	2201      	movs	r2, #1
 800f186:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800f18a:	4804      	ldr	r0, [pc, #16]	@ (800f19c <Motor_Init+0x50>)
 800f18c:	f7f5 fd0c 	bl	8004ba8 <HAL_GPIO_WritePin>
}
 800f190:	bf00      	nop
 800f192:	bd80      	pop	{r7, pc}
 800f194:	2400106c 	.word	0x2400106c
 800f198:	58020c00 	.word	0x58020c00
 800f19c:	58020000 	.word	0x58020000

0800f1a0 <Motor_Test_Menu>:
menu_t motorMenu[] = { { "1.M I2CSET", MCF8316C_Set_I2C_Addr }, { "2.M FAULT ",
		MCF8316C_Test_Fault }, { "3.M VOLT  ", MCF8316C_Get_Voltage }, {
		"4.M ENC   ", Motor_Test_Encoder }, { "5.M MPET ", MCF8316C_Init }, {
		"6.M PI CTL", }, { "7.M SPEED ", Motor_Test_Speed }, { "8.OUT     ", } };

void Motor_Test_Menu() {
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b082      	sub	sp, #8
 800f1a4:	af00      	add	r7, sp, #0
	Encoder_Start();
 800f1a6:	f000 f8a9 	bl	800f2fc <Encoder_Start>
	static uint8_t maxMenu = sizeof(motorMenu) / sizeof(menu_t);
	static uint8_t beforeMenu = 0;
	while (1) {
		uint32_t cnt = ((hlptim1.Instance->CNT + 128) / 256 + beforeMenu)
 800f1aa:	4b33      	ldr	r3, [pc, #204]	@ (800f278 <Motor_Test_Menu+0xd8>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	69db      	ldr	r3, [r3, #28]
 800f1b0:	3380      	adds	r3, #128	@ 0x80
 800f1b2:	0a1b      	lsrs	r3, r3, #8
 800f1b4:	4a31      	ldr	r2, [pc, #196]	@ (800f27c <Motor_Test_Menu+0xdc>)
 800f1b6:	7812      	ldrb	r2, [r2, #0]
 800f1b8:	4413      	add	r3, r2
				% maxMenu;
 800f1ba:	4a31      	ldr	r2, [pc, #196]	@ (800f280 <Motor_Test_Menu+0xe0>)
 800f1bc:	7812      	ldrb	r2, [r2, #0]
		uint32_t cnt = ((hlptim1.Instance->CNT + 128) / 256 + beforeMenu)
 800f1be:	fbb3 f1f2 	udiv	r1, r3, r2
 800f1c2:	fb01 f202 	mul.w	r2, r1, r2
 800f1c6:	1a9b      	subs	r3, r3, r2
 800f1c8:	603b      	str	r3, [r7, #0]
		Custom_LCD_Printf(0, 0, "Main Menu", hlptim1.Instance->CNT);
 800f1ca:	4b2b      	ldr	r3, [pc, #172]	@ (800f278 <Motor_Test_Menu+0xd8>)
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	69db      	ldr	r3, [r3, #28]
 800f1d0:	4a2c      	ldr	r2, [pc, #176]	@ (800f284 <Motor_Test_Menu+0xe4>)
 800f1d2:	2100      	movs	r1, #0
 800f1d4:	2000      	movs	r0, #0
 800f1d6:	f7f1 ffa1 	bl	800111c <Custom_LCD_Printf>
		for (uint8_t i = 0; i < maxMenu; i++) {
 800f1da:	2300      	movs	r3, #0
 800f1dc:	71fb      	strb	r3, [r7, #7]
 800f1de:	e011      	b.n	800f204 <Motor_Test_Menu+0x64>
			Set_Color(cnt, i);
 800f1e0:	79fb      	ldrb	r3, [r7, #7]
 800f1e2:	4619      	mov	r1, r3
 800f1e4:	6838      	ldr	r0, [r7, #0]
 800f1e6:	f7f2 f807 	bl	80011f8 <Set_Color>
			Custom_LCD_Printf(0, i + 1, "%s", (motorMenu + i)->name);
 800f1ea:	79fb      	ldrb	r3, [r7, #7]
 800f1ec:	1c59      	adds	r1, r3, #1
 800f1ee:	79fb      	ldrb	r3, [r7, #7]
 800f1f0:	011b      	lsls	r3, r3, #4
 800f1f2:	4a25      	ldr	r2, [pc, #148]	@ (800f288 <Motor_Test_Menu+0xe8>)
 800f1f4:	4413      	add	r3, r2
 800f1f6:	4a25      	ldr	r2, [pc, #148]	@ (800f28c <Motor_Test_Menu+0xec>)
 800f1f8:	2000      	movs	r0, #0
 800f1fa:	f7f1 ff8f 	bl	800111c <Custom_LCD_Printf>
		for (uint8_t i = 0; i < maxMenu; i++) {
 800f1fe:	79fb      	ldrb	r3, [r7, #7]
 800f200:	3301      	adds	r3, #1
 800f202:	71fb      	strb	r3, [r7, #7]
 800f204:	4b1e      	ldr	r3, [pc, #120]	@ (800f280 <Motor_Test_Menu+0xe0>)
 800f206:	781b      	ldrb	r3, [r3, #0]
 800f208:	79fa      	ldrb	r2, [r7, #7]
 800f20a:	429a      	cmp	r2, r3
 800f20c:	d3e8      	bcc.n	800f1e0 <Motor_Test_Menu+0x40>
		}
		POINT_COLOR = WHITE;
 800f20e:	4b20      	ldr	r3, [pc, #128]	@ (800f290 <Motor_Test_Menu+0xf0>)
 800f210:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f214:	801a      	strh	r2, [r3, #0]
		BACK_COLOR = BLACK;
 800f216:	4b1f      	ldr	r3, [pc, #124]	@ (800f294 <Motor_Test_Menu+0xf4>)
 800f218:	2200      	movs	r2, #0
 800f21a:	801a      	strh	r2, [r3, #0]
		//		Show_Remain_Battery();
		if (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET) {
 800f21c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f220:	481d      	ldr	r0, [pc, #116]	@ (800f298 <Motor_Test_Menu+0xf8>)
 800f222:	f7f5 fca9 	bl	8004b78 <HAL_GPIO_ReadPin>
 800f226:	4603      	mov	r3, r0
 800f228:	2b01      	cmp	r3, #1
 800f22a:	d1be      	bne.n	800f1aa <Motor_Test_Menu+0xa>
			while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 800f22c:	bf00      	nop
 800f22e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f232:	4819      	ldr	r0, [pc, #100]	@ (800f298 <Motor_Test_Menu+0xf8>)
 800f234:	f7f5 fca0 	bl	8004b78 <HAL_GPIO_ReadPin>
 800f238:	4603      	mov	r3, r0
 800f23a:	2b01      	cmp	r3, #1
 800f23c:	d0f7      	beq.n	800f22e <Motor_Test_Menu+0x8e>
				;
			Custom_LCD_Clear();
 800f23e:	f7f1 ffbf 	bl	80011c0 <Custom_LCD_Clear>
			Encoder_Stop();
 800f242:	f000 f89d 	bl	800f380 <Encoder_Stop>
			if (cnt == maxMenu - 1)
 800f246:	4b0e      	ldr	r3, [pc, #56]	@ (800f280 <Motor_Test_Menu+0xe0>)
 800f248:	781b      	ldrb	r3, [r3, #0]
 800f24a:	1e5a      	subs	r2, r3, #1
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	429a      	cmp	r2, r3
 800f250:	d00e      	beq.n	800f270 <Motor_Test_Menu+0xd0>
				return;
			(motorMenu + cnt)->func();
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	011b      	lsls	r3, r3, #4
 800f256:	4a0c      	ldr	r2, [pc, #48]	@ (800f288 <Motor_Test_Menu+0xe8>)
 800f258:	4413      	add	r3, r2
 800f25a:	68db      	ldr	r3, [r3, #12]
 800f25c:	4798      	blx	r3
			Encoder_Start();
 800f25e:	f000 f84d 	bl	800f2fc <Encoder_Start>
			Custom_LCD_Clear();
 800f262:	f7f1 ffad 	bl	80011c0 <Custom_LCD_Clear>
			beforeMenu = cnt;
 800f266:	683b      	ldr	r3, [r7, #0]
 800f268:	b2da      	uxtb	r2, r3
 800f26a:	4b04      	ldr	r3, [pc, #16]	@ (800f27c <Motor_Test_Menu+0xdc>)
 800f26c:	701a      	strb	r2, [r3, #0]
	while (1) {
 800f26e:	e79c      	b.n	800f1aa <Motor_Test_Menu+0xa>
				return;
 800f270:	bf00      	nop
		}
	}
}
 800f272:	3708      	adds	r7, #8
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}
 800f278:	24000ccc 	.word	0x24000ccc
 800f27c:	24000aca 	.word	0x24000aca
 800f280:	2400019c 	.word	0x2400019c
 800f284:	08016ec0 	.word	0x08016ec0
 800f288:	2400011c 	.word	0x2400011c
 800f28c:	08016ecc 	.word	0x08016ecc
 800f290:	24000020 	.word	0x24000020
 800f294:	240005b0 	.word	0x240005b0
 800f298:	58020800 	.word	0x58020800

0800f29c <Motor_Start>:
	uint16_t encPst;
} motor_t;

motor_t motor[2];

void Motor_Start() {
 800f29c:	b580      	push	{r7, lr}
 800f29e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(MOTOR_L_TIM, MOTOR_L_CHANNEL);
 800f2a0:	2100      	movs	r1, #0
 800f2a2:	4812      	ldr	r0, [pc, #72]	@ (800f2ec <Motor_Start+0x50>)
 800f2a4:	f7fd f998 	bl	800c5d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_R_TIM, MOTOR_R_CHANNEL);
 800f2a8:	2104      	movs	r1, #4
 800f2aa:	4810      	ldr	r0, [pc, #64]	@ (800f2ec <Motor_Start+0x50>)
 800f2ac:	f7fd f994 	bl	800c5d8 <HAL_TIM_PWM_Start>

	HAL_LPTIM_Counter_Start_IT(MOTOR_PID_TIM, MOTOR_PID_PERIOD);
 800f2b0:	2100      	movs	r1, #0
 800f2b2:	480f      	ldr	r0, [pc, #60]	@ (800f2f0 <Motor_Start+0x54>)
 800f2b4:	f7f6 fb9a 	bl	80059ec <HAL_LPTIM_Counter_Start_IT>

	HAL_GPIO_WritePin(Motor_L_Driveoff_GPIO_Port, Motor_L_Driveoff_Pin,
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f2be:	480d      	ldr	r0, [pc, #52]	@ (800f2f4 <Motor_Start+0x58>)
 800f2c0:	f7f5 fc72 	bl	8004ba8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(Motor_R_Driveoff_GPIO_Port, Motor_R_Driveoff_Pin,
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f2ca:	480b      	ldr	r0, [pc, #44]	@ (800f2f8 <Motor_Start+0x5c>)
 800f2cc:	f7f5 fc6c 	bl	8004ba8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(Motor_L_Brake_GPIO_Port, Motor_L_Brake_Pin,
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800f2d6:	4807      	ldr	r0, [pc, #28]	@ (800f2f4 <Motor_Start+0x58>)
 800f2d8:	f7f5 fc66 	bl	8004ba8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(Motor_R_Brake_GPIO_Port, Motor_R_Brake_Pin,
 800f2dc:	2200      	movs	r2, #0
 800f2de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800f2e2:	4805      	ldr	r0, [pc, #20]	@ (800f2f8 <Motor_Start+0x5c>)
 800f2e4:	f7f5 fc60 	bl	8004ba8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 800f2e8:	bf00      	nop
 800f2ea:	bd80      	pop	{r7, pc}
 800f2ec:	2400106c 	.word	0x2400106c
 800f2f0:	24000d74 	.word	0x24000d74
 800f2f4:	58020c00 	.word	0x58020c00
 800f2f8:	58020000 	.word	0x58020000

0800f2fc <Encoder_Start>:

void Encoder_Start() {
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	af00      	add	r7, sp, #0
	HAL_LPTIM_Encoder_Start(ENCODER_L_TIM, ENCODER_PERIOD);
 800f300:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800f304:	4804      	ldr	r0, [pc, #16]	@ (800f318 <Encoder_Start+0x1c>)
 800f306:	f7f6 fb01 	bl	800590c <HAL_LPTIM_Encoder_Start>
	HAL_LPTIM_Encoder_Start(ENCODER_R_TIM, ENCODER_PERIOD);
 800f30a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800f30e:	4803      	ldr	r0, [pc, #12]	@ (800f31c <Encoder_Start+0x20>)
 800f310:	f7f6 fafc 	bl	800590c <HAL_LPTIM_Encoder_Start>
}
 800f314:	bf00      	nop
 800f316:	bd80      	pop	{r7, pc}
 800f318:	24000ccc 	.word	0x24000ccc
 800f31c:	24000d04 	.word	0x24000d04

0800f320 <Motor_Stop>:

void Motor_Stop() {
 800f320:	b580      	push	{r7, lr}
 800f322:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(MOTOR_L_TIM, MOTOR_L_CHANNEL);
 800f324:	2100      	movs	r1, #0
 800f326:	4812      	ldr	r0, [pc, #72]	@ (800f370 <Motor_Stop+0x50>)
 800f328:	f7fd fa64 	bl	800c7f4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(MOTOR_R_TIM, MOTOR_R_CHANNEL);
 800f32c:	2104      	movs	r1, #4
 800f32e:	4810      	ldr	r0, [pc, #64]	@ (800f370 <Motor_Stop+0x50>)
 800f330:	f7fd fa60 	bl	800c7f4 <HAL_TIM_PWM_Stop>

	HAL_LPTIM_Counter_Stop_IT(MOTOR_PID_TIM);
 800f334:	480f      	ldr	r0, [pc, #60]	@ (800f374 <Motor_Stop+0x54>)
 800f336:	f7f6 fbc0 	bl	8005aba <HAL_LPTIM_Counter_Stop_IT>

	HAL_GPIO_WritePin(Motor_L_Driveoff_GPIO_Port, Motor_L_Driveoff_Pin,
 800f33a:	2201      	movs	r2, #1
 800f33c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f340:	480d      	ldr	r0, [pc, #52]	@ (800f378 <Motor_Stop+0x58>)
 800f342:	f7f5 fc31 	bl	8004ba8 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(Motor_R_Driveoff_GPIO_Port, Motor_R_Driveoff_Pin,
 800f346:	2201      	movs	r2, #1
 800f348:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f34c:	480b      	ldr	r0, [pc, #44]	@ (800f37c <Motor_Stop+0x5c>)
 800f34e:	f7f5 fc2b 	bl	8004ba8 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(Motor_L_Brake_GPIO_Port, Motor_L_Brake_Pin, GPIO_PIN_SET);
 800f352:	2201      	movs	r2, #1
 800f354:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800f358:	4807      	ldr	r0, [pc, #28]	@ (800f378 <Motor_Stop+0x58>)
 800f35a:	f7f5 fc25 	bl	8004ba8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor_R_Brake_GPIO_Port, Motor_R_Brake_Pin, GPIO_PIN_SET);
 800f35e:	2201      	movs	r2, #1
 800f360:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800f364:	4805      	ldr	r0, [pc, #20]	@ (800f37c <Motor_Stop+0x5c>)
 800f366:	f7f5 fc1f 	bl	8004ba8 <HAL_GPIO_WritePin>
}
 800f36a:	bf00      	nop
 800f36c:	bd80      	pop	{r7, pc}
 800f36e:	bf00      	nop
 800f370:	2400106c 	.word	0x2400106c
 800f374:	24000d74 	.word	0x24000d74
 800f378:	58020c00 	.word	0x58020c00
 800f37c:	58020000 	.word	0x58020000

0800f380 <Encoder_Stop>:

void Encoder_Stop() {
 800f380:	b580      	push	{r7, lr}
 800f382:	af00      	add	r7, sp, #0
	HAL_LPTIM_Encoder_Stop(ENCODER_L_TIM);
 800f384:	4803      	ldr	r0, [pc, #12]	@ (800f394 <Encoder_Stop+0x14>)
 800f386:	f7f6 fb0d 	bl	80059a4 <HAL_LPTIM_Encoder_Stop>
	HAL_LPTIM_Encoder_Stop(ENCODER_R_TIM);
 800f38a:	4803      	ldr	r0, [pc, #12]	@ (800f398 <Encoder_Stop+0x18>)
 800f38c:	f7f6 fb0a 	bl	80059a4 <HAL_LPTIM_Encoder_Stop>
}
 800f390:	bf00      	nop
 800f392:	bd80      	pop	{r7, pc}
 800f394:	24000ccc 	.word	0x24000ccc
 800f398:	24000d04 	.word	0x24000d04

0800f39c <Motor_LPTIM4_IRQ>:

void Motor_LPTIM4_IRQ() {
 800f39c:	b480      	push	{r7}
 800f39e:	af00      	add	r7, sp, #0

}
 800f3a0:	bf00      	nop
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a8:	4770      	bx	lr
	...

0800f3ac <Motor_Test_Encoder>:

void Motor_Test_Encoder() {
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	af00      	add	r7, sp, #0
	Encoder_Start();
 800f3b0:	f7ff ffa4 	bl	800f2fc <Encoder_Start>
	Custom_LCD_Printf(0, 0, "EncoderL");
 800f3b4:	4a17      	ldr	r2, [pc, #92]	@ (800f414 <Motor_Test_Encoder+0x68>)
 800f3b6:	2100      	movs	r1, #0
 800f3b8:	2000      	movs	r0, #0
 800f3ba:	f7f1 feaf 	bl	800111c <Custom_LCD_Printf>
	Custom_LCD_Printf(0, 2, "EncoderR");
 800f3be:	4a16      	ldr	r2, [pc, #88]	@ (800f418 <Motor_Test_Encoder+0x6c>)
 800f3c0:	2102      	movs	r1, #2
 800f3c2:	2000      	movs	r0, #0
 800f3c4:	f7f1 feaa 	bl	800111c <Custom_LCD_Printf>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 800f3c8:	e00f      	b.n	800f3ea <Motor_Test_Encoder+0x3e>
		Custom_LCD_Printf(0, 1, "%5d", *ENCODER_L_TIM.Instance->CNT);
 800f3ca:	4b14      	ldr	r3, [pc, #80]	@ (800f41c <Motor_Test_Encoder+0x70>)
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	69db      	ldr	r3, [r3, #28]
 800f3d0:	4a13      	ldr	r2, [pc, #76]	@ (800f420 <Motor_Test_Encoder+0x74>)
 800f3d2:	2101      	movs	r1, #1
 800f3d4:	2000      	movs	r0, #0
 800f3d6:	f7f1 fea1 	bl	800111c <Custom_LCD_Printf>
		Custom_LCD_Printf(0, 3, "%5d", *ENCODER_R_TIM.Instance->CNT);
 800f3da:	4b12      	ldr	r3, [pc, #72]	@ (800f424 <Motor_Test_Encoder+0x78>)
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	69db      	ldr	r3, [r3, #28]
 800f3e0:	4a0f      	ldr	r2, [pc, #60]	@ (800f420 <Motor_Test_Encoder+0x74>)
 800f3e2:	2103      	movs	r1, #3
 800f3e4:	2000      	movs	r0, #0
 800f3e6:	f7f1 fe99 	bl	800111c <Custom_LCD_Printf>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 800f3ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f3ee:	480e      	ldr	r0, [pc, #56]	@ (800f428 <Motor_Test_Encoder+0x7c>)
 800f3f0:	f7f5 fbc2 	bl	8004b78 <HAL_GPIO_ReadPin>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	2b01      	cmp	r3, #1
 800f3f8:	d1e7      	bne.n	800f3ca <Motor_Test_Encoder+0x1e>
	}
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 800f3fa:	bf00      	nop
 800f3fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f400:	4809      	ldr	r0, [pc, #36]	@ (800f428 <Motor_Test_Encoder+0x7c>)
 800f402:	f7f5 fbb9 	bl	8004b78 <HAL_GPIO_ReadPin>
 800f406:	4603      	mov	r3, r0
 800f408:	2b01      	cmp	r3, #1
 800f40a:	d0f7      	beq.n	800f3fc <Motor_Test_Encoder+0x50>
		;
	Encoder_Stop();
 800f40c:	f7ff ffb8 	bl	800f380 <Encoder_Stop>
}
 800f410:	bf00      	nop
 800f412:	bd80      	pop	{r7, pc}
 800f414:	08016ed0 	.word	0x08016ed0
 800f418:	08016edc 	.word	0x08016edc
 800f41c:	24000ccc 	.word	0x24000ccc
 800f420:	08016ee8 	.word	0x08016ee8
 800f424:	24000d04 	.word	0x24000d04
 800f428:	58020800 	.word	0x58020800

0800f42c <Motor_Test_Speed>:
		;

	Encoder_Stop();
}

void Motor_Test_Speed() {
 800f42c:	b580      	push	{r7, lr}
 800f42e:	af00      	add	r7, sp, #0
	Encoder_Start();
 800f430:	f7ff ff64 	bl	800f2fc <Encoder_Start>
	Motor_Start();
 800f434:	f7ff ff32 	bl	800f29c <Motor_Start>
	__HAL_TIM_SET_COMPARE(MOTOR_L_TIM, MOTOR_L_CHANNEL,
 800f438:	4b37      	ldr	r3, [pc, #220]	@ (800f518 <Motor_Test_Speed+0xec>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f43e:	4b36      	ldr	r3, [pc, #216]	@ (800f518 <Motor_Test_Speed+0xec>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	4936      	ldr	r1, [pc, #216]	@ (800f51c <Motor_Test_Speed+0xf0>)
 800f444:	fba1 1202 	umull	r1, r2, r1, r2
 800f448:	0952      	lsrs	r2, r2, #5
 800f44a:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_GET_AUTORELOAD(MOTOR_L_TIM) / 100);
	__HAL_TIM_SET_COMPARE(MOTOR_R_TIM, MOTOR_R_CHANNEL,
 800f44c:	4b32      	ldr	r3, [pc, #200]	@ (800f518 <Motor_Test_Speed+0xec>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f452:	4b31      	ldr	r3, [pc, #196]	@ (800f518 <Motor_Test_Speed+0xec>)
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	4931      	ldr	r1, [pc, #196]	@ (800f51c <Motor_Test_Speed+0xf0>)
 800f458:	fba1 1202 	umull	r1, r2, r1, r2
 800f45c:	0952      	lsrs	r2, r2, #5
 800f45e:	639a      	str	r2, [r3, #56]	@ 0x38
			__HAL_TIM_GET_AUTORELOAD(MOTOR_R_TIM) / 100);
	while (!HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin)) {
 800f460:	e037      	b.n	800f4d2 <Motor_Test_Speed+0xa6>
		Custom_LCD_Printf(0, 0, "%5d", __HAL_TIM_GET_COUNTER(ENCODER_L_TIM));
 800f462:	4b2f      	ldr	r3, [pc, #188]	@ (800f520 <Motor_Test_Speed+0xf4>)
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	69db      	ldr	r3, [r3, #28]
 800f468:	4a2e      	ldr	r2, [pc, #184]	@ (800f524 <Motor_Test_Speed+0xf8>)
 800f46a:	2100      	movs	r1, #0
 800f46c:	2000      	movs	r0, #0
 800f46e:	f7f1 fe55 	bl	800111c <Custom_LCD_Printf>
		Custom_LCD_Printf(0, 1, "%5d", __HAL_TIM_GET_COUNTER(ENCODER_R_TIM));
 800f472:	4b2d      	ldr	r3, [pc, #180]	@ (800f528 <Motor_Test_Speed+0xfc>)
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	69db      	ldr	r3, [r3, #28]
 800f478:	4a2a      	ldr	r2, [pc, #168]	@ (800f524 <Motor_Test_Speed+0xf8>)
 800f47a:	2101      	movs	r1, #1
 800f47c:	2000      	movs	r0, #0
 800f47e:	f7f1 fe4d 	bl	800111c <Custom_LCD_Printf>
		if (!HAL_GPIO_ReadPin(Motor_L_nFAULT_GPIO_Port, Motor_L_nFAULT_Pin))
 800f482:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800f486:	4829      	ldr	r0, [pc, #164]	@ (800f52c <Motor_Test_Speed+0x100>)
 800f488:	f7f5 fb76 	bl	8004b78 <HAL_GPIO_ReadPin>
 800f48c:	4603      	mov	r3, r0
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d106      	bne.n	800f4a0 <Motor_Test_Speed+0x74>
			HAL_GPIO_WritePin(MARK_L_GPIO_Port, MARK_L_Pin, GPIO_PIN_SET);
 800f492:	2201      	movs	r2, #1
 800f494:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f498:	4825      	ldr	r0, [pc, #148]	@ (800f530 <Motor_Test_Speed+0x104>)
 800f49a:	f7f5 fb85 	bl	8004ba8 <HAL_GPIO_WritePin>
 800f49e:	e005      	b.n	800f4ac <Motor_Test_Speed+0x80>
		else
			HAL_GPIO_WritePin(MARK_L_GPIO_Port, MARK_L_Pin, GPIO_PIN_RESET);
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f4a6:	4822      	ldr	r0, [pc, #136]	@ (800f530 <Motor_Test_Speed+0x104>)
 800f4a8:	f7f5 fb7e 	bl	8004ba8 <HAL_GPIO_WritePin>
		if (!HAL_GPIO_ReadPin(Motor_R_nFAULT_GPIO_Port, Motor_R_nFAULT_Pin))
 800f4ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800f4b0:	4820      	ldr	r0, [pc, #128]	@ (800f534 <Motor_Test_Speed+0x108>)
 800f4b2:	f7f5 fb61 	bl	8004b78 <HAL_GPIO_ReadPin>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d105      	bne.n	800f4c8 <Motor_Test_Speed+0x9c>
			HAL_GPIO_WritePin(MARK_R_GPIO_Port, MARK_R_Pin, GPIO_PIN_SET);
 800f4bc:	2201      	movs	r2, #1
 800f4be:	2104      	movs	r1, #4
 800f4c0:	481b      	ldr	r0, [pc, #108]	@ (800f530 <Motor_Test_Speed+0x104>)
 800f4c2:	f7f5 fb71 	bl	8004ba8 <HAL_GPIO_WritePin>
 800f4c6:	e004      	b.n	800f4d2 <Motor_Test_Speed+0xa6>
		else
			HAL_GPIO_WritePin(MARK_R_GPIO_Port, MARK_R_Pin, GPIO_PIN_RESET);
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	2104      	movs	r1, #4
 800f4cc:	4818      	ldr	r0, [pc, #96]	@ (800f530 <Motor_Test_Speed+0x104>)
 800f4ce:	f7f5 fb6b 	bl	8004ba8 <HAL_GPIO_WritePin>
	while (!HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin)) {
 800f4d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f4d6:	4818      	ldr	r0, [pc, #96]	@ (800f538 <Motor_Test_Speed+0x10c>)
 800f4d8:	f7f5 fb4e 	bl	8004b78 <HAL_GPIO_ReadPin>
 800f4dc:	4603      	mov	r3, r0
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d0bf      	beq.n	800f462 <Motor_Test_Speed+0x36>
	}
	Motor_Stop();
 800f4e2:	f7ff ff1d 	bl	800f320 <Motor_Stop>
	Encoder_Stop();
 800f4e6:	f7ff ff4b 	bl	800f380 <Encoder_Stop>
	HAL_GPIO_WritePin(MARK_L_GPIO_Port, MARK_L_Pin, GPIO_PIN_RESET);
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f4f0:	480f      	ldr	r0, [pc, #60]	@ (800f530 <Motor_Test_Speed+0x104>)
 800f4f2:	f7f5 fb59 	bl	8004ba8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MARK_R_GPIO_Port, MARK_R_Pin, GPIO_PIN_RESET);
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	2104      	movs	r1, #4
 800f4fa:	480d      	ldr	r0, [pc, #52]	@ (800f530 <Motor_Test_Speed+0x104>)
 800f4fc:	f7f5 fb54 	bl	8004ba8 <HAL_GPIO_WritePin>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin))
 800f500:	bf00      	nop
 800f502:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f506:	480c      	ldr	r0, [pc, #48]	@ (800f538 <Motor_Test_Speed+0x10c>)
 800f508:	f7f5 fb36 	bl	8004b78 <HAL_GPIO_ReadPin>
 800f50c:	4603      	mov	r3, r0
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d1f7      	bne.n	800f502 <Motor_Test_Speed+0xd6>
		;
}
 800f512:	bf00      	nop
 800f514:	bf00      	nop
 800f516:	bd80      	pop	{r7, pc}
 800f518:	2400106c 	.word	0x2400106c
 800f51c:	51eb851f 	.word	0x51eb851f
 800f520:	24000ccc 	.word	0x24000ccc
 800f524:	08016ee8 	.word	0x08016ee8
 800f528:	24000d04 	.word	0x24000d04
 800f52c:	58020c00 	.word	0x58020c00
 800f530:	58021000 	.word	0x58021000
 800f534:	58020000 	.word	0x58020000
 800f538:	58020800 	.word	0x58020800

0800f53c <Sensor_Test_Menu>:
//	if(hadc->Instance == ADC1){
//		adc_dma_complete_flag = 1;
//	}
//}

void Sensor_Test_Menu() {
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b082      	sub	sp, #8
 800f540:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, GPIO_PIN_SET);
 800f542:	2201      	movs	r2, #1
 800f544:	2108      	movs	r1, #8
 800f546:	4836      	ldr	r0, [pc, #216]	@ (800f620 <Sensor_Test_Menu+0xe4>)
 800f548:	f7f5 fb2e 	bl	8004ba8 <HAL_GPIO_WritePin>
//		ADC_Battery_Start();
	Encoder_Start();
 800f54c:	f7ff fed6 	bl	800f2fc <Encoder_Start>
	static uint8_t maxMenu = sizeof(sensorMenu) / sizeof(menu_t);
	static uint8_t beforeMenu = 0;
	while (1) {
		uint32_t cnt = ((hlptim1.Instance->CNT + 128) / 256 + beforeMenu)
 800f550:	4b34      	ldr	r3, [pc, #208]	@ (800f624 <Sensor_Test_Menu+0xe8>)
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	69db      	ldr	r3, [r3, #28]
 800f556:	3380      	adds	r3, #128	@ 0x80
 800f558:	0a1b      	lsrs	r3, r3, #8
 800f55a:	4a33      	ldr	r2, [pc, #204]	@ (800f628 <Sensor_Test_Menu+0xec>)
 800f55c:	7812      	ldrb	r2, [r2, #0]
 800f55e:	4413      	add	r3, r2
				% maxMenu;
 800f560:	4a32      	ldr	r2, [pc, #200]	@ (800f62c <Sensor_Test_Menu+0xf0>)
 800f562:	7812      	ldrb	r2, [r2, #0]
		uint32_t cnt = ((hlptim1.Instance->CNT + 128) / 256 + beforeMenu)
 800f564:	fbb3 f1f2 	udiv	r1, r3, r2
 800f568:	fb01 f202 	mul.w	r2, r1, r2
 800f56c:	1a9b      	subs	r3, r3, r2
 800f56e:	603b      	str	r3, [r7, #0]
		Custom_LCD_Printf(0, 0, "Main Menu", hlptim1.Instance->CNT);
 800f570:	4b2c      	ldr	r3, [pc, #176]	@ (800f624 <Sensor_Test_Menu+0xe8>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	69db      	ldr	r3, [r3, #28]
 800f576:	4a2e      	ldr	r2, [pc, #184]	@ (800f630 <Sensor_Test_Menu+0xf4>)
 800f578:	2100      	movs	r1, #0
 800f57a:	2000      	movs	r0, #0
 800f57c:	f7f1 fdce 	bl	800111c <Custom_LCD_Printf>
		for (uint8_t i = 0; i < maxMenu; i++) {
 800f580:	2300      	movs	r3, #0
 800f582:	71fb      	strb	r3, [r7, #7]
 800f584:	e011      	b.n	800f5aa <Sensor_Test_Menu+0x6e>
			Set_Color(cnt, i);
 800f586:	79fb      	ldrb	r3, [r7, #7]
 800f588:	4619      	mov	r1, r3
 800f58a:	6838      	ldr	r0, [r7, #0]
 800f58c:	f7f1 fe34 	bl	80011f8 <Set_Color>
			Custom_LCD_Printf(0, i + 1, "%s", (sensorMenu + i)->name);
 800f590:	79fb      	ldrb	r3, [r7, #7]
 800f592:	1c59      	adds	r1, r3, #1
 800f594:	79fb      	ldrb	r3, [r7, #7]
 800f596:	011b      	lsls	r3, r3, #4
 800f598:	4a26      	ldr	r2, [pc, #152]	@ (800f634 <Sensor_Test_Menu+0xf8>)
 800f59a:	4413      	add	r3, r2
 800f59c:	4a26      	ldr	r2, [pc, #152]	@ (800f638 <Sensor_Test_Menu+0xfc>)
 800f59e:	2000      	movs	r0, #0
 800f5a0:	f7f1 fdbc 	bl	800111c <Custom_LCD_Printf>
		for (uint8_t i = 0; i < maxMenu; i++) {
 800f5a4:	79fb      	ldrb	r3, [r7, #7]
 800f5a6:	3301      	adds	r3, #1
 800f5a8:	71fb      	strb	r3, [r7, #7]
 800f5aa:	4b20      	ldr	r3, [pc, #128]	@ (800f62c <Sensor_Test_Menu+0xf0>)
 800f5ac:	781b      	ldrb	r3, [r3, #0]
 800f5ae:	79fa      	ldrb	r2, [r7, #7]
 800f5b0:	429a      	cmp	r2, r3
 800f5b2:	d3e8      	bcc.n	800f586 <Sensor_Test_Menu+0x4a>
		}
		POINT_COLOR = WHITE;
 800f5b4:	4b21      	ldr	r3, [pc, #132]	@ (800f63c <Sensor_Test_Menu+0x100>)
 800f5b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f5ba:	801a      	strh	r2, [r3, #0]
		BACK_COLOR = BLACK;
 800f5bc:	4b20      	ldr	r3, [pc, #128]	@ (800f640 <Sensor_Test_Menu+0x104>)
 800f5be:	2200      	movs	r2, #0
 800f5c0:	801a      	strh	r2, [r3, #0]
		//		Show_Remain_Battery();
		if (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET) {
 800f5c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f5c6:	481f      	ldr	r0, [pc, #124]	@ (800f644 <Sensor_Test_Menu+0x108>)
 800f5c8:	f7f5 fad6 	bl	8004b78 <HAL_GPIO_ReadPin>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	2b01      	cmp	r3, #1
 800f5d0:	d1be      	bne.n	800f550 <Sensor_Test_Menu+0x14>
			while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 800f5d2:	bf00      	nop
 800f5d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f5d8:	481a      	ldr	r0, [pc, #104]	@ (800f644 <Sensor_Test_Menu+0x108>)
 800f5da:	f7f5 facd 	bl	8004b78 <HAL_GPIO_ReadPin>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	2b01      	cmp	r3, #1
 800f5e2:	d0f7      	beq.n	800f5d4 <Sensor_Test_Menu+0x98>
				;
			Custom_LCD_Clear();
 800f5e4:	f7f1 fdec 	bl	80011c0 <Custom_LCD_Clear>
			Encoder_Stop();
 800f5e8:	f7ff feca 	bl	800f380 <Encoder_Stop>
			if (cnt == maxMenu - 1)
 800f5ec:	4b0f      	ldr	r3, [pc, #60]	@ (800f62c <Sensor_Test_Menu+0xf0>)
 800f5ee:	781b      	ldrb	r3, [r3, #0]
 800f5f0:	1e5a      	subs	r2, r3, #1
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	429a      	cmp	r2, r3
 800f5f6:	d00e      	beq.n	800f616 <Sensor_Test_Menu+0xda>
				return;
			(sensorMenu + cnt)->func();
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	011b      	lsls	r3, r3, #4
 800f5fc:	4a0d      	ldr	r2, [pc, #52]	@ (800f634 <Sensor_Test_Menu+0xf8>)
 800f5fe:	4413      	add	r3, r2
 800f600:	68db      	ldr	r3, [r3, #12]
 800f602:	4798      	blx	r3
			Encoder_Start();
 800f604:	f7ff fe7a 	bl	800f2fc <Encoder_Start>
			Custom_LCD_Clear();
 800f608:	f7f1 fdda 	bl	80011c0 <Custom_LCD_Clear>
			beforeMenu = cnt;
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	b2da      	uxtb	r2, r3
 800f610:	4b05      	ldr	r3, [pc, #20]	@ (800f628 <Sensor_Test_Menu+0xec>)
 800f612:	701a      	strb	r2, [r3, #0]
	while (1) {
 800f614:	e79c      	b.n	800f550 <Sensor_Test_Menu+0x14>
				return;
 800f616:	bf00      	nop
		}
	}
}
 800f618:	3708      	adds	r7, #8
 800f61a:	46bd      	mov	sp, r7
 800f61c:	bd80      	pop	{r7, pc}
 800f61e:	bf00      	nop
 800f620:	58021000 	.word	0x58021000
 800f624:	24000ccc 	.word	0x24000ccc
 800f628:	24000acd 	.word	0x24000acd
 800f62c:	24000384 	.word	0x24000384
 800f630:	08016ef4 	.word	0x08016ef4
 800f634:	240002cc 	.word	0x240002cc
 800f638:	08016f00 	.word	0x08016f00
 800f63c:	24000020 	.word	0x24000020
 800f640:	240005b0 	.word	0x240005b0
 800f644:	58020800 	.word	0x58020800

0800f648 <Sensor_Start>:

void Sensor_Start() {
 800f648:	b580      	push	{r7, lr}
 800f64a:	af00      	add	r7, sp, #0
	is_sensor_start = true;
 800f64c:	4b09      	ldr	r3, [pc, #36]	@ (800f674 <Sensor_Start+0x2c>)
 800f64e:	2201      	movs	r2, #1
 800f650:	701a      	strb	r2, [r3, #0]
	is_marker_start = true;
 800f652:	4b09      	ldr	r3, [pc, #36]	@ (800f678 <Sensor_Start+0x30>)
 800f654:	2201      	movs	r2, #1
 800f656:	701a      	strb	r2, [r3, #0]
	HAL_LPTIM_Counter_Start_IT(ADC_SENSOR_TIM, 0);
 800f658:	2100      	movs	r1, #0
 800f65a:	4808      	ldr	r0, [pc, #32]	@ (800f67c <Sensor_Start+0x34>)
 800f65c:	f7f6 f9c6 	bl	80059ec <HAL_LPTIM_Counter_Start_IT>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 800f660:	2100      	movs	r1, #0
 800f662:	4807      	ldr	r0, [pc, #28]	@ (800f680 <Sensor_Start+0x38>)
 800f664:	f7fc ffb8 	bl	800c5d8 <HAL_TIM_PWM_Start>
	htim15.Instance->CCR1 = 0;
 800f668:	4b05      	ldr	r3, [pc, #20]	@ (800f680 <Sensor_Start+0x38>)
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	2200      	movs	r2, #0
 800f66e:	635a      	str	r2, [r3, #52]	@ 0x34
//	if (HAL_ADC_Start_DMA(ADC_SENSOR_CHANNEL, (uint32_t*) adc_dma_buffer,
//			NUM_ADC_CHANNELS) != HAL_OK) {
//		Error_Handler();
//	}

}
 800f670:	bf00      	nop
 800f672:	bd80      	pop	{r7, pc}
 800f674:	24000acb 	.word	0x24000acb
 800f678:	24000acc 	.word	0x24000acc
 800f67c:	24000d3c 	.word	0x24000d3c
 800f680:	240010b8 	.word	0x240010b8

0800f684 <Sensor_Stop>:

void Sensor_Stop() {
 800f684:	b580      	push	{r7, lr}
 800f686:	af00      	add	r7, sp, #0
	htim15.Instance->CCR1 = 0;
 800f688:	4b0e      	ldr	r3, [pc, #56]	@ (800f6c4 <Sensor_Stop+0x40>)
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	2200      	movs	r2, #0
 800f68e:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_GPIO_WritePin(MARK_L_GPIO_Port, MARK_L_Pin, 0);
 800f690:	2200      	movs	r2, #0
 800f692:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f696:	480c      	ldr	r0, [pc, #48]	@ (800f6c8 <Sensor_Stop+0x44>)
 800f698:	f7f5 fa86 	bl	8004ba8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MARK_R_GPIO_Port, MARK_R_Pin, 0);
 800f69c:	2200      	movs	r2, #0
 800f69e:	2104      	movs	r1, #4
 800f6a0:	4809      	ldr	r0, [pc, #36]	@ (800f6c8 <Sensor_Stop+0x44>)
 800f6a2:	f7f5 fa81 	bl	8004ba8 <HAL_GPIO_WritePin>
	HAL_ADC_Stop(ADC_SENSOR_CHANNEL);
 800f6a6:	4809      	ldr	r0, [pc, #36]	@ (800f6cc <Sensor_Stop+0x48>)
 800f6a8:	f7f3 feba 	bl	8003420 <HAL_ADC_Stop>
	HAL_ADC_Stop(ADC_MARKER_CHANNEL);
 800f6ac:	4808      	ldr	r0, [pc, #32]	@ (800f6d0 <Sensor_Stop+0x4c>)
 800f6ae:	f7f3 feb7 	bl	8003420 <HAL_ADC_Stop>
	HAL_LPTIM_Counter_Stop_IT(ADC_SENSOR_TIM);
 800f6b2:	4808      	ldr	r0, [pc, #32]	@ (800f6d4 <Sensor_Stop+0x50>)
 800f6b4:	f7f6 fa01 	bl	8005aba <HAL_LPTIM_Counter_Stop_IT>
	HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 800f6b8:	2100      	movs	r1, #0
 800f6ba:	4802      	ldr	r0, [pc, #8]	@ (800f6c4 <Sensor_Stop+0x40>)
 800f6bc:	f7fd f89a 	bl	800c7f4 <HAL_TIM_PWM_Stop>
}
 800f6c0:	bf00      	nop
 800f6c2:	bd80      	pop	{r7, pc}
 800f6c4:	240010b8 	.word	0x240010b8
 800f6c8:	58021000 	.word	0x58021000
 800f6cc:	24000aec 	.word	0x24000aec
 800f6d0:	24000bb4 	.word	0x24000bb4
 800f6d4:	24000d3c 	.word	0x24000d3c

0800f6d8 <Sensor_ADC_Read>:

__STATIC_INLINE uint16_t Sensor_ADC_Read(ADC_HandleTypeDef *hadc) {
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	b082      	sub	sp, #8
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800f6e0:	b672      	cpsid	i
}
 800f6e2:	bf00      	nop
	static uint16_t raw;
	__disable_irq();
	HAL_ADC_Start(hadc);
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	f7f3 fdd1 	bl	800328c <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY) == HAL_OK) {
 800f6ea:	f04f 31ff 	mov.w	r1, #4294967295
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	f7f3 feca 	bl	8003488 <HAL_ADC_PollForConversion>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d106      	bne.n	800f708 <Sensor_ADC_Read+0x30>
		raw = HAL_ADC_GetValue(hadc);
 800f6fa:	6878      	ldr	r0, [r7, #4]
 800f6fc:	f7f3 ffb8 	bl	8003670 <HAL_ADC_GetValue>
 800f700:	4603      	mov	r3, r0
 800f702:	b29a      	uxth	r2, r3
 800f704:	4b04      	ldr	r3, [pc, #16]	@ (800f718 <Sensor_ADC_Read+0x40>)
 800f706:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800f708:	b662      	cpsie	i
}
 800f70a:	bf00      	nop
	}
	__enable_irq();
	return raw;
 800f70c:	4b02      	ldr	r3, [pc, #8]	@ (800f718 <Sensor_ADC_Read+0x40>)
 800f70e:	881b      	ldrh	r3, [r3, #0]
}
 800f710:	4618      	mov	r0, r3
 800f712:	3708      	adds	r7, #8
 800f714:	46bd      	mov	sp, r7
 800f716:	bd80      	pop	{r7, pc}
 800f718:	24000ada 	.word	0x24000ada

0800f71c <Sensor_LPTIM3_IRQ>:

void Sensor_LPTIM3_IRQ() {
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b082      	sub	sp, #8
 800f720:	af00      	add	r7, sp, #0
	static uint8_t i = 0;
	static uint8_t raw;
	static float pos_sum1 = 0.f;
	static float pos_sum2 = 0.f;

	if (is_sensor_start) {
 800f722:	4b76      	ldr	r3, [pc, #472]	@ (800f8fc <Sensor_LPTIM3_IRQ+0x1e0>)
 800f724:	781b      	ldrb	r3, [r3, #0]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d005      	beq.n	800f736 <Sensor_LPTIM3_IRQ+0x1a>
		i = 0;
 800f72a:	4b75      	ldr	r3, [pc, #468]	@ (800f900 <Sensor_LPTIM3_IRQ+0x1e4>)
 800f72c:	2200      	movs	r2, #0
 800f72e:	701a      	strb	r2, [r3, #0]
		is_sensor_start = false;
 800f730:	4b72      	ldr	r3, [pc, #456]	@ (800f8fc <Sensor_LPTIM3_IRQ+0x1e0>)
 800f732:	2200      	movs	r2, #0
 800f734:	701a      	strb	r2, [r3, #0]
	}

	float pos_weight = *(positionWeight + i);
 800f736:	4b72      	ldr	r3, [pc, #456]	@ (800f900 <Sensor_LPTIM3_IRQ+0x1e4>)
 800f738:	781b      	ldrb	r3, [r3, #0]
 800f73a:	009b      	lsls	r3, r3, #2
 800f73c:	4a71      	ldr	r2, [pc, #452]	@ (800f904 <Sensor_LPTIM3_IRQ+0x1e8>)
 800f73e:	4413      	add	r3, r2
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	603b      	str	r3, [r7, #0]
	uint8_t normalize = *(sensor.normalized + i);
 800f744:	4b6e      	ldr	r3, [pc, #440]	@ (800f900 <Sensor_LPTIM3_IRQ+0x1e4>)
 800f746:	781b      	ldrb	r3, [r3, #0]
 800f748:	009b      	lsls	r3, r3, #2
 800f74a:	4a6f      	ldr	r2, [pc, #444]	@ (800f908 <Sensor_LPTIM3_IRQ+0x1ec>)
 800f74c:	4413      	add	r3, r2
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	71fb      	strb	r3, [r7, #7]

	pos_sum1 -= pos_weight * normalize;
 800f752:	4b6e      	ldr	r3, [pc, #440]	@ (800f90c <Sensor_LPTIM3_IRQ+0x1f0>)
 800f754:	ed93 7a00 	vldr	s14, [r3]
 800f758:	79fb      	ldrb	r3, [r7, #7]
 800f75a:	ee07 3a90 	vmov	s15, r3
 800f75e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f762:	edd7 7a00 	vldr	s15, [r7]
 800f766:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f76a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f76e:	4b67      	ldr	r3, [pc, #412]	@ (800f90c <Sensor_LPTIM3_IRQ+0x1f0>)
 800f770:	edc3 7a00 	vstr	s15, [r3]
	pos_sum2 -= normalize;
 800f774:	4b66      	ldr	r3, [pc, #408]	@ (800f910 <Sensor_LPTIM3_IRQ+0x1f4>)
 800f776:	ed93 7a00 	vldr	s14, [r3]
 800f77a:	79fb      	ldrb	r3, [r7, #7]
 800f77c:	ee07 3a90 	vmov	s15, r3
 800f780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f784:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f788:	4b61      	ldr	r3, [pc, #388]	@ (800f910 <Sensor_LPTIM3_IRQ+0x1f4>)
 800f78a:	edc3 7a00 	vstr	s15, [r3]

	raw = Sensor_ADC_Read(ADC_SENSOR_CHANNEL) >> 4;
 800f78e:	4861      	ldr	r0, [pc, #388]	@ (800f914 <Sensor_LPTIM3_IRQ+0x1f8>)
 800f790:	f7ff ffa2 	bl	800f6d8 <Sensor_ADC_Read>
 800f794:	4603      	mov	r3, r0
 800f796:	091b      	lsrs	r3, r3, #4
 800f798:	b29b      	uxth	r3, r3
 800f79a:	b2da      	uxtb	r2, r3
 800f79c:	4b5e      	ldr	r3, [pc, #376]	@ (800f918 <Sensor_LPTIM3_IRQ+0x1fc>)
 800f79e:	701a      	strb	r2, [r3, #0]

	if (raw > *(sensor.whiteMax + i))
 800f7a0:	4b5d      	ldr	r3, [pc, #372]	@ (800f918 <Sensor_LPTIM3_IRQ+0x1fc>)
 800f7a2:	781b      	ldrb	r3, [r3, #0]
 800f7a4:	4619      	mov	r1, r3
 800f7a6:	4b56      	ldr	r3, [pc, #344]	@ (800f900 <Sensor_LPTIM3_IRQ+0x1e4>)
 800f7a8:	781b      	ldrb	r3, [r3, #0]
 800f7aa:	009b      	lsls	r3, r3, #2
 800f7ac:	4a5b      	ldr	r2, [pc, #364]	@ (800f91c <Sensor_LPTIM3_IRQ+0x200>)
 800f7ae:	4413      	add	r3, r2
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	4299      	cmp	r1, r3
 800f7b4:	dd02      	ble.n	800f7bc <Sensor_LPTIM3_IRQ+0xa0>
		normalize = 0xff;
 800f7b6:	23ff      	movs	r3, #255	@ 0xff
 800f7b8:	71fb      	strb	r3, [r7, #7]
 800f7ba:	e023      	b.n	800f804 <Sensor_LPTIM3_IRQ+0xe8>
	else if (raw < *(sensor.blackMax + i))
 800f7bc:	4b56      	ldr	r3, [pc, #344]	@ (800f918 <Sensor_LPTIM3_IRQ+0x1fc>)
 800f7be:	781b      	ldrb	r3, [r3, #0]
 800f7c0:	4619      	mov	r1, r3
 800f7c2:	4b4f      	ldr	r3, [pc, #316]	@ (800f900 <Sensor_LPTIM3_IRQ+0x1e4>)
 800f7c4:	781b      	ldrb	r3, [r3, #0]
 800f7c6:	009b      	lsls	r3, r3, #2
 800f7c8:	4a55      	ldr	r2, [pc, #340]	@ (800f920 <Sensor_LPTIM3_IRQ+0x204>)
 800f7ca:	4413      	add	r3, r2
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	4299      	cmp	r1, r3
 800f7d0:	da02      	bge.n	800f7d8 <Sensor_LPTIM3_IRQ+0xbc>
		normalize = 0;
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	71fb      	strb	r3, [r7, #7]
 800f7d6:	e015      	b.n	800f804 <Sensor_LPTIM3_IRQ+0xe8>
	else
		normalize = 0xff * (raw - *(sensor.blackMax + i))
 800f7d8:	4b4f      	ldr	r3, [pc, #316]	@ (800f918 <Sensor_LPTIM3_IRQ+0x1fc>)
 800f7da:	781b      	ldrb	r3, [r3, #0]
 800f7dc:	4619      	mov	r1, r3
 800f7de:	4b48      	ldr	r3, [pc, #288]	@ (800f900 <Sensor_LPTIM3_IRQ+0x1e4>)
 800f7e0:	781b      	ldrb	r3, [r3, #0]
 800f7e2:	009b      	lsls	r3, r3, #2
 800f7e4:	4a4e      	ldr	r2, [pc, #312]	@ (800f920 <Sensor_LPTIM3_IRQ+0x204>)
 800f7e6:	4413      	add	r3, r2
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	1aca      	subs	r2, r1, r3
 800f7ec:	4613      	mov	r3, r2
 800f7ee:	021b      	lsls	r3, r3, #8
 800f7f0:	1a9a      	subs	r2, r3, r2
				/ *(sensor.normalizeCoef + i);
 800f7f2:	4b43      	ldr	r3, [pc, #268]	@ (800f900 <Sensor_LPTIM3_IRQ+0x1e4>)
 800f7f4:	781b      	ldrb	r3, [r3, #0]
 800f7f6:	009b      	lsls	r3, r3, #2
 800f7f8:	494a      	ldr	r1, [pc, #296]	@ (800f924 <Sensor_LPTIM3_IRQ+0x208>)
 800f7fa:	440b      	add	r3, r1
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	fb92 f3f3 	sdiv	r3, r2, r3
		normalize = 0xff * (raw - *(sensor.blackMax + i))
 800f802:	71fb      	strb	r3, [r7, #7]

	sensor.state = (sensor.state & ~(0x01 << i))
 800f804:	4b48      	ldr	r3, [pc, #288]	@ (800f928 <Sensor_LPTIM3_IRQ+0x20c>)
 800f806:	f9b3 2118 	ldrsh.w	r2, [r3, #280]	@ 0x118
 800f80a:	4b3d      	ldr	r3, [pc, #244]	@ (800f900 <Sensor_LPTIM3_IRQ+0x1e4>)
 800f80c:	781b      	ldrb	r3, [r3, #0]
 800f80e:	4619      	mov	r1, r3
 800f810:	2301      	movs	r3, #1
 800f812:	408b      	lsls	r3, r1
 800f814:	b21b      	sxth	r3, r3
 800f816:	43db      	mvns	r3, r3
 800f818:	b21b      	sxth	r3, r3
 800f81a:	4013      	ands	r3, r2
 800f81c:	b21a      	sxth	r2, r3
			| ((normalize > sensor.threshold) << i);
 800f81e:	4b42      	ldr	r3, [pc, #264]	@ (800f928 <Sensor_LPTIM3_IRQ+0x20c>)
 800f820:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
 800f824:	79f9      	ldrb	r1, [r7, #7]
 800f826:	4299      	cmp	r1, r3
 800f828:	bf8c      	ite	hi
 800f82a:	2301      	movhi	r3, #1
 800f82c:	2300      	movls	r3, #0
 800f82e:	b2db      	uxtb	r3, r3
 800f830:	4619      	mov	r1, r3
 800f832:	4b33      	ldr	r3, [pc, #204]	@ (800f900 <Sensor_LPTIM3_IRQ+0x1e4>)
 800f834:	781b      	ldrb	r3, [r3, #0]
 800f836:	fa01 f303 	lsl.w	r3, r1, r3
 800f83a:	b21b      	sxth	r3, r3
 800f83c:	4313      	orrs	r3, r2
 800f83e:	b21a      	sxth	r2, r3
	sensor.state = (sensor.state & ~(0x01 << i))
 800f840:	4b39      	ldr	r3, [pc, #228]	@ (800f928 <Sensor_LPTIM3_IRQ+0x20c>)
 800f842:	f8a3 2118 	strh.w	r2, [r3, #280]	@ 0x118

	pos_sum1 += pos_weight * normalize;
 800f846:	79fb      	ldrb	r3, [r7, #7]
 800f848:	ee07 3a90 	vmov	s15, r3
 800f84c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f850:	edd7 7a00 	vldr	s15, [r7]
 800f854:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f858:	4b2c      	ldr	r3, [pc, #176]	@ (800f90c <Sensor_LPTIM3_IRQ+0x1f0>)
 800f85a:	edd3 7a00 	vldr	s15, [r3]
 800f85e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f862:	4b2a      	ldr	r3, [pc, #168]	@ (800f90c <Sensor_LPTIM3_IRQ+0x1f0>)
 800f864:	edc3 7a00 	vstr	s15, [r3]
	pos_sum2 += normalize;
 800f868:	79fb      	ldrb	r3, [r7, #7]
 800f86a:	ee07 3a90 	vmov	s15, r3
 800f86e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f872:	4b27      	ldr	r3, [pc, #156]	@ (800f910 <Sensor_LPTIM3_IRQ+0x1f4>)
 800f874:	edd3 7a00 	vldr	s15, [r3]
 800f878:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f87c:	4b24      	ldr	r3, [pc, #144]	@ (800f910 <Sensor_LPTIM3_IRQ+0x1f4>)
 800f87e:	edc3 7a00 	vstr	s15, [r3]

	sensor.position = (pos_sum2) ? pos_sum1 / pos_sum2 : 0;
 800f882:	4b23      	ldr	r3, [pc, #140]	@ (800f910 <Sensor_LPTIM3_IRQ+0x1f4>)
 800f884:	edd3 7a00 	vldr	s15, [r3]
 800f888:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f88c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f890:	d008      	beq.n	800f8a4 <Sensor_LPTIM3_IRQ+0x188>
 800f892:	4b1e      	ldr	r3, [pc, #120]	@ (800f90c <Sensor_LPTIM3_IRQ+0x1f0>)
 800f894:	edd3 6a00 	vldr	s13, [r3]
 800f898:	4b1d      	ldr	r3, [pc, #116]	@ (800f910 <Sensor_LPTIM3_IRQ+0x1f4>)
 800f89a:	ed93 7a00 	vldr	s14, [r3]
 800f89e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f8a2:	e001      	b.n	800f8a8 <Sensor_LPTIM3_IRQ+0x18c>
 800f8a4:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800f92c <Sensor_LPTIM3_IRQ+0x210>
 800f8a8:	4b1f      	ldr	r3, [pc, #124]	@ (800f928 <Sensor_LPTIM3_IRQ+0x20c>)
 800f8aa:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
	*(sensor.normalized + i) = normalize;
 800f8ae:	4b14      	ldr	r3, [pc, #80]	@ (800f900 <Sensor_LPTIM3_IRQ+0x1e4>)
 800f8b0:	781b      	ldrb	r3, [r3, #0]
 800f8b2:	009b      	lsls	r3, r3, #2
 800f8b4:	4a14      	ldr	r2, [pc, #80]	@ (800f908 <Sensor_LPTIM3_IRQ+0x1ec>)
 800f8b6:	4413      	add	r3, r2
 800f8b8:	79fa      	ldrb	r2, [r7, #7]
 800f8ba:	601a      	str	r2, [r3, #0]
////			 printf("ADC[%d]: %lu\r\n", i, adc_dma_buffer[i]); // 디버깅용 출력
//			*(sensor.raw + i) = *(adc_dma_buffer + i) >> 4;
//		}
//	}

	*(sensor.raw + i) = raw;
 800f8bc:	4b16      	ldr	r3, [pc, #88]	@ (800f918 <Sensor_LPTIM3_IRQ+0x1fc>)
 800f8be:	7819      	ldrb	r1, [r3, #0]
 800f8c0:	4b0f      	ldr	r3, [pc, #60]	@ (800f900 <Sensor_LPTIM3_IRQ+0x1e4>)
 800f8c2:	781b      	ldrb	r3, [r3, #0]
 800f8c4:	009b      	lsls	r3, r3, #2
 800f8c6:	4a18      	ldr	r2, [pc, #96]	@ (800f928 <Sensor_LPTIM3_IRQ+0x20c>)
 800f8c8:	4413      	add	r3, r2
 800f8ca:	460a      	mov	r2, r1
 800f8cc:	601a      	str	r2, [r3, #0]

	i = (i + 1) % 14;
 800f8ce:	4b0c      	ldr	r3, [pc, #48]	@ (800f900 <Sensor_LPTIM3_IRQ+0x1e4>)
 800f8d0:	781b      	ldrb	r3, [r3, #0]
 800f8d2:	1c5a      	adds	r2, r3, #1
 800f8d4:	4b16      	ldr	r3, [pc, #88]	@ (800f930 <Sensor_LPTIM3_IRQ+0x214>)
 800f8d6:	fb83 1302 	smull	r1, r3, r3, r2
 800f8da:	4413      	add	r3, r2
 800f8dc:	10d9      	asrs	r1, r3, #3
 800f8de:	17d3      	asrs	r3, r2, #31
 800f8e0:	1ac9      	subs	r1, r1, r3
 800f8e2:	460b      	mov	r3, r1
 800f8e4:	00db      	lsls	r3, r3, #3
 800f8e6:	1a5b      	subs	r3, r3, r1
 800f8e8:	005b      	lsls	r3, r3, #1
 800f8ea:	1ad1      	subs	r1, r2, r3
 800f8ec:	b2ca      	uxtb	r2, r1
 800f8ee:	4b04      	ldr	r3, [pc, #16]	@ (800f900 <Sensor_LPTIM3_IRQ+0x1e4>)
 800f8f0:	701a      	strb	r2, [r3, #0]
}
 800f8f2:	bf00      	nop
 800f8f4:	3708      	adds	r7, #8
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	bd80      	pop	{r7, pc}
 800f8fa:	bf00      	nop
 800f8fc:	24000acb 	.word	0x24000acb
 800f900:	24000ace 	.word	0x24000ace
 800f904:	2400034c 	.word	0x2400034c
 800f908:	24000280 	.word	0x24000280
 800f90c:	24000ad0 	.word	0x24000ad0
 800f910:	24000ad4 	.word	0x24000ad4
 800f914:	24000aec 	.word	0x24000aec
 800f918:	24000ad8 	.word	0x24000ad8
 800f91c:	240001d8 	.word	0x240001d8
 800f920:	24000210 	.word	0x24000210
 800f924:	24000248 	.word	0x24000248
 800f928:	240001a0 	.word	0x240001a0
 800f92c:	00000000 	.word	0x00000000
 800f930:	92492493 	.word	0x92492493

0800f934 <Marker_LPTIM3_IRQ>:

void Marker_LPTIM3_IRQ() {
 800f934:	b580      	push	{r7, lr}
 800f936:	af00      	add	r7, sp, #0
	static uint8_t i = 0;
	static uint8_t raw;
	static uint8_t normalize;
	if (is_marker_start) {
 800f938:	4b5b      	ldr	r3, [pc, #364]	@ (800faa8 <Marker_LPTIM3_IRQ+0x174>)
 800f93a:	781b      	ldrb	r3, [r3, #0]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d005      	beq.n	800f94c <Marker_LPTIM3_IRQ+0x18>
		i = 0;
 800f940:	4b5a      	ldr	r3, [pc, #360]	@ (800faac <Marker_LPTIM3_IRQ+0x178>)
 800f942:	2200      	movs	r2, #0
 800f944:	701a      	strb	r2, [r3, #0]
		is_marker_start = false;
 800f946:	4b58      	ldr	r3, [pc, #352]	@ (800faa8 <Marker_LPTIM3_IRQ+0x174>)
 800f948:	2200      	movs	r2, #0
 800f94a:	701a      	strb	r2, [r3, #0]
	}

	raw = Sensor_ADC_Read(ADC_MARKER_CHANNEL);
 800f94c:	4858      	ldr	r0, [pc, #352]	@ (800fab0 <Marker_LPTIM3_IRQ+0x17c>)
 800f94e:	f7ff fec3 	bl	800f6d8 <Sensor_ADC_Read>
 800f952:	4603      	mov	r3, r0
 800f954:	b2da      	uxtb	r2, r3
 800f956:	4b57      	ldr	r3, [pc, #348]	@ (800fab4 <Marker_LPTIM3_IRQ+0x180>)
 800f958:	701a      	strb	r2, [r3, #0]

	if (raw > *(sensor.whiteMax + i + 14))
 800f95a:	4b56      	ldr	r3, [pc, #344]	@ (800fab4 <Marker_LPTIM3_IRQ+0x180>)
 800f95c:	781b      	ldrb	r3, [r3, #0]
 800f95e:	4619      	mov	r1, r3
 800f960:	4b52      	ldr	r3, [pc, #328]	@ (800faac <Marker_LPTIM3_IRQ+0x178>)
 800f962:	781b      	ldrb	r3, [r3, #0]
 800f964:	330e      	adds	r3, #14
 800f966:	009b      	lsls	r3, r3, #2
 800f968:	4a53      	ldr	r2, [pc, #332]	@ (800fab8 <Marker_LPTIM3_IRQ+0x184>)
 800f96a:	4413      	add	r3, r2
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	4299      	cmp	r1, r3
 800f970:	dd03      	ble.n	800f97a <Marker_LPTIM3_IRQ+0x46>
		normalize = 0xff;
 800f972:	4b52      	ldr	r3, [pc, #328]	@ (800fabc <Marker_LPTIM3_IRQ+0x188>)
 800f974:	22ff      	movs	r2, #255	@ 0xff
 800f976:	701a      	strb	r2, [r3, #0]
 800f978:	e029      	b.n	800f9ce <Marker_LPTIM3_IRQ+0x9a>
	else if (raw < *(sensor.blackMax + i + 14))
 800f97a:	4b4e      	ldr	r3, [pc, #312]	@ (800fab4 <Marker_LPTIM3_IRQ+0x180>)
 800f97c:	781b      	ldrb	r3, [r3, #0]
 800f97e:	4619      	mov	r1, r3
 800f980:	4b4a      	ldr	r3, [pc, #296]	@ (800faac <Marker_LPTIM3_IRQ+0x178>)
 800f982:	781b      	ldrb	r3, [r3, #0]
 800f984:	330e      	adds	r3, #14
 800f986:	009b      	lsls	r3, r3, #2
 800f988:	4a4d      	ldr	r2, [pc, #308]	@ (800fac0 <Marker_LPTIM3_IRQ+0x18c>)
 800f98a:	4413      	add	r3, r2
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	4299      	cmp	r1, r3
 800f990:	da03      	bge.n	800f99a <Marker_LPTIM3_IRQ+0x66>
		normalize = 0;
 800f992:	4b4a      	ldr	r3, [pc, #296]	@ (800fabc <Marker_LPTIM3_IRQ+0x188>)
 800f994:	2200      	movs	r2, #0
 800f996:	701a      	strb	r2, [r3, #0]
 800f998:	e019      	b.n	800f9ce <Marker_LPTIM3_IRQ+0x9a>
	else
		normalize = 0xff * (raw - *(sensor.blackMax + i + 14))
 800f99a:	4b46      	ldr	r3, [pc, #280]	@ (800fab4 <Marker_LPTIM3_IRQ+0x180>)
 800f99c:	781b      	ldrb	r3, [r3, #0]
 800f99e:	4619      	mov	r1, r3
 800f9a0:	4b42      	ldr	r3, [pc, #264]	@ (800faac <Marker_LPTIM3_IRQ+0x178>)
 800f9a2:	781b      	ldrb	r3, [r3, #0]
 800f9a4:	330e      	adds	r3, #14
 800f9a6:	009b      	lsls	r3, r3, #2
 800f9a8:	4a45      	ldr	r2, [pc, #276]	@ (800fac0 <Marker_LPTIM3_IRQ+0x18c>)
 800f9aa:	4413      	add	r3, r2
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	1aca      	subs	r2, r1, r3
 800f9b0:	4613      	mov	r3, r2
 800f9b2:	021b      	lsls	r3, r3, #8
 800f9b4:	1a9a      	subs	r2, r3, r2
				/ *(sensor.normalizeCoef + i + 14);
 800f9b6:	4b3d      	ldr	r3, [pc, #244]	@ (800faac <Marker_LPTIM3_IRQ+0x178>)
 800f9b8:	781b      	ldrb	r3, [r3, #0]
 800f9ba:	330e      	adds	r3, #14
 800f9bc:	009b      	lsls	r3, r3, #2
 800f9be:	4941      	ldr	r1, [pc, #260]	@ (800fac4 <Marker_LPTIM3_IRQ+0x190>)
 800f9c0:	440b      	add	r3, r1
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	fb92 f3f3 	sdiv	r3, r2, r3
		normalize = 0xff * (raw - *(sensor.blackMax + i + 14))
 800f9c8:	b2da      	uxtb	r2, r3
 800f9ca:	4b3c      	ldr	r3, [pc, #240]	@ (800fabc <Marker_LPTIM3_IRQ+0x188>)
 800f9cc:	701a      	strb	r2, [r3, #0]
	sensor.state = (sensor.state & ~(0x01 << (i + 14)))
 800f9ce:	4b3e      	ldr	r3, [pc, #248]	@ (800fac8 <Marker_LPTIM3_IRQ+0x194>)
 800f9d0:	f9b3 2118 	ldrsh.w	r2, [r3, #280]	@ 0x118
 800f9d4:	4b35      	ldr	r3, [pc, #212]	@ (800faac <Marker_LPTIM3_IRQ+0x178>)
 800f9d6:	781b      	ldrb	r3, [r3, #0]
 800f9d8:	330e      	adds	r3, #14
 800f9da:	2101      	movs	r1, #1
 800f9dc:	fa01 f303 	lsl.w	r3, r1, r3
 800f9e0:	b21b      	sxth	r3, r3
 800f9e2:	43db      	mvns	r3, r3
 800f9e4:	b21b      	sxth	r3, r3
 800f9e6:	4013      	ands	r3, r2
 800f9e8:	b21a      	sxth	r2, r3
			| ((normalize > sensor.threshold) << (i + 14));
 800f9ea:	4b37      	ldr	r3, [pc, #220]	@ (800fac8 <Marker_LPTIM3_IRQ+0x194>)
 800f9ec:	f893 1124 	ldrb.w	r1, [r3, #292]	@ 0x124
 800f9f0:	4b32      	ldr	r3, [pc, #200]	@ (800fabc <Marker_LPTIM3_IRQ+0x188>)
 800f9f2:	781b      	ldrb	r3, [r3, #0]
 800f9f4:	4299      	cmp	r1, r3
 800f9f6:	bf34      	ite	cc
 800f9f8:	2301      	movcc	r3, #1
 800f9fa:	2300      	movcs	r3, #0
 800f9fc:	b2db      	uxtb	r3, r3
 800f9fe:	4619      	mov	r1, r3
 800fa00:	4b2a      	ldr	r3, [pc, #168]	@ (800faac <Marker_LPTIM3_IRQ+0x178>)
 800fa02:	781b      	ldrb	r3, [r3, #0]
 800fa04:	330e      	adds	r3, #14
 800fa06:	fa01 f303 	lsl.w	r3, r1, r3
 800fa0a:	b21b      	sxth	r3, r3
 800fa0c:	4313      	orrs	r3, r2
 800fa0e:	b21a      	sxth	r2, r3
	sensor.state = (sensor.state & ~(0x01 << (i + 14)))
 800fa10:	4b2d      	ldr	r3, [pc, #180]	@ (800fac8 <Marker_LPTIM3_IRQ+0x194>)
 800fa12:	f8a3 2118 	strh.w	r2, [r3, #280]	@ 0x118


	HAL_GPIO_WritePin(MARK_L_GPIO_Port, MARK_L_Pin,
			(sensor.state >> 14) & 0x01);
 800fa16:	4b2c      	ldr	r3, [pc, #176]	@ (800fac8 <Marker_LPTIM3_IRQ+0x194>)
 800fa18:	f9b3 3118 	ldrsh.w	r3, [r3, #280]	@ 0x118
 800fa1c:	139b      	asrs	r3, r3, #14
 800fa1e:	b21b      	sxth	r3, r3
 800fa20:	b2db      	uxtb	r3, r3
 800fa22:	f003 0301 	and.w	r3, r3, #1
 800fa26:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(MARK_L_GPIO_Port, MARK_L_Pin,
 800fa28:	461a      	mov	r2, r3
 800fa2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800fa2e:	4827      	ldr	r0, [pc, #156]	@ (800facc <Marker_LPTIM3_IRQ+0x198>)
 800fa30:	f7f5 f8ba 	bl	8004ba8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MARK_R_GPIO_Port, MARK_R_Pin,
			(sensor.state >> 15) & 0x01);
 800fa34:	4b24      	ldr	r3, [pc, #144]	@ (800fac8 <Marker_LPTIM3_IRQ+0x194>)
 800fa36:	f9b3 3118 	ldrsh.w	r3, [r3, #280]	@ 0x118
 800fa3a:	13db      	asrs	r3, r3, #15
 800fa3c:	b21b      	sxth	r3, r3
 800fa3e:	b2db      	uxtb	r3, r3
 800fa40:	f003 0301 	and.w	r3, r3, #1
 800fa44:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(MARK_R_GPIO_Port, MARK_R_Pin,
 800fa46:	461a      	mov	r2, r3
 800fa48:	2104      	movs	r1, #4
 800fa4a:	4820      	ldr	r0, [pc, #128]	@ (800facc <Marker_LPTIM3_IRQ+0x198>)
 800fa4c:	f7f5 f8ac 	bl	8004ba8 <HAL_GPIO_WritePin>
	htim15.Instance->CCR1 = (sensor.state & (0x03 << 14)) ? 5 : 0;
 800fa50:	4b1d      	ldr	r3, [pc, #116]	@ (800fac8 <Marker_LPTIM3_IRQ+0x194>)
 800fa52:	f9b3 3118 	ldrsh.w	r3, [r3, #280]	@ 0x118
 800fa56:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d001      	beq.n	800fa62 <Marker_LPTIM3_IRQ+0x12e>
 800fa5e:	2205      	movs	r2, #5
 800fa60:	e000      	b.n	800fa64 <Marker_LPTIM3_IRQ+0x130>
 800fa62:	2200      	movs	r2, #0
 800fa64:	4b1a      	ldr	r3, [pc, #104]	@ (800fad0 <Marker_LPTIM3_IRQ+0x19c>)
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	635a      	str	r2, [r3, #52]	@ 0x34

	*(sensor.normalized + i + 14) = normalize;
 800fa6a:	4b14      	ldr	r3, [pc, #80]	@ (800fabc <Marker_LPTIM3_IRQ+0x188>)
 800fa6c:	7819      	ldrb	r1, [r3, #0]
 800fa6e:	4b0f      	ldr	r3, [pc, #60]	@ (800faac <Marker_LPTIM3_IRQ+0x178>)
 800fa70:	781b      	ldrb	r3, [r3, #0]
 800fa72:	330e      	adds	r3, #14
 800fa74:	009b      	lsls	r3, r3, #2
 800fa76:	4a17      	ldr	r2, [pc, #92]	@ (800fad4 <Marker_LPTIM3_IRQ+0x1a0>)
 800fa78:	4413      	add	r3, r2
 800fa7a:	460a      	mov	r2, r1
 800fa7c:	601a      	str	r2, [r3, #0]
	*(sensor.raw + i + 14) = raw;
 800fa7e:	4b0d      	ldr	r3, [pc, #52]	@ (800fab4 <Marker_LPTIM3_IRQ+0x180>)
 800fa80:	7819      	ldrb	r1, [r3, #0]
 800fa82:	4b0a      	ldr	r3, [pc, #40]	@ (800faac <Marker_LPTIM3_IRQ+0x178>)
 800fa84:	781b      	ldrb	r3, [r3, #0]
 800fa86:	330e      	adds	r3, #14
 800fa88:	009b      	lsls	r3, r3, #2
 800fa8a:	4a0f      	ldr	r2, [pc, #60]	@ (800fac8 <Marker_LPTIM3_IRQ+0x194>)
 800fa8c:	4413      	add	r3, r2
 800fa8e:	460a      	mov	r2, r1
 800fa90:	601a      	str	r2, [r3, #0]

	i = (i + 1) & 0x01;
 800fa92:	4b06      	ldr	r3, [pc, #24]	@ (800faac <Marker_LPTIM3_IRQ+0x178>)
 800fa94:	781b      	ldrb	r3, [r3, #0]
 800fa96:	3301      	adds	r3, #1
 800fa98:	b2db      	uxtb	r3, r3
 800fa9a:	f003 0301 	and.w	r3, r3, #1
 800fa9e:	b2da      	uxtb	r2, r3
 800faa0:	4b02      	ldr	r3, [pc, #8]	@ (800faac <Marker_LPTIM3_IRQ+0x178>)
 800faa2:	701a      	strb	r2, [r3, #0]
}
 800faa4:	bf00      	nop
 800faa6:	bd80      	pop	{r7, pc}
 800faa8:	24000acc 	.word	0x24000acc
 800faac:	24000adc 	.word	0x24000adc
 800fab0:	24000bb4 	.word	0x24000bb4
 800fab4:	24000add 	.word	0x24000add
 800fab8:	240001d8 	.word	0x240001d8
 800fabc:	24000ade 	.word	0x24000ade
 800fac0:	24000210 	.word	0x24000210
 800fac4:	24000248 	.word	0x24000248
 800fac8:	240001a0 	.word	0x240001a0
 800facc:	58021000 	.word	0x58021000
 800fad0:	240010b8 	.word	0x240010b8
 800fad4:	24000280 	.word	0x24000280

0800fad8 <Sensor_Printf>:

void Sensor_Printf(char *name, int32_t *sensorValue) {
 800fad8:	b580      	push	{r7, lr}
 800fada:	b084      	sub	sp, #16
 800fadc:	af02      	add	r7, sp, #8
 800fade:	6078      	str	r0, [r7, #4]
 800fae0:	6039      	str	r1, [r7, #0]
	Custom_LCD_Printf(0, 0, name);
 800fae2:	687a      	ldr	r2, [r7, #4]
 800fae4:	2100      	movs	r1, #0
 800fae6:	2000      	movs	r0, #0
 800fae8:	f7f1 fb18 	bl	800111c <Custom_LCD_Printf>
	Custom_LCD_Printf(0, 1, "0/1:%02x %02x", *(sensorValue),
 800faec:	683b      	ldr	r3, [r7, #0]
 800faee:	681a      	ldr	r2, [r3, #0]
			*(sensorValue + 1));
 800faf0:	683b      	ldr	r3, [r7, #0]
 800faf2:	3304      	adds	r3, #4
	Custom_LCD_Printf(0, 1, "0/1:%02x %02x", *(sensorValue),
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	9300      	str	r3, [sp, #0]
 800faf8:	4613      	mov	r3, r2
 800fafa:	4a34      	ldr	r2, [pc, #208]	@ (800fbcc <Sensor_Printf+0xf4>)
 800fafc:	2101      	movs	r1, #1
 800fafe:	2000      	movs	r0, #0
 800fb00:	f7f1 fb0c 	bl	800111c <Custom_LCD_Printf>
	Custom_LCD_Printf(0, 2, "2/3:%02x %02x", *(sensorValue + 2),
 800fb04:	683b      	ldr	r3, [r7, #0]
 800fb06:	3308      	adds	r3, #8
 800fb08:	681a      	ldr	r2, [r3, #0]
			*(sensorValue + 3));
 800fb0a:	683b      	ldr	r3, [r7, #0]
 800fb0c:	330c      	adds	r3, #12
	Custom_LCD_Printf(0, 2, "2/3:%02x %02x", *(sensorValue + 2),
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	9300      	str	r3, [sp, #0]
 800fb12:	4613      	mov	r3, r2
 800fb14:	4a2e      	ldr	r2, [pc, #184]	@ (800fbd0 <Sensor_Printf+0xf8>)
 800fb16:	2102      	movs	r1, #2
 800fb18:	2000      	movs	r0, #0
 800fb1a:	f7f1 faff 	bl	800111c <Custom_LCD_Printf>
	Custom_LCD_Printf(0, 3, "4/5:%02x %02x", *(sensorValue + 4),
 800fb1e:	683b      	ldr	r3, [r7, #0]
 800fb20:	3310      	adds	r3, #16
 800fb22:	681a      	ldr	r2, [r3, #0]
			*(sensorValue + 5));
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	3314      	adds	r3, #20
	Custom_LCD_Printf(0, 3, "4/5:%02x %02x", *(sensorValue + 4),
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	9300      	str	r3, [sp, #0]
 800fb2c:	4613      	mov	r3, r2
 800fb2e:	4a29      	ldr	r2, [pc, #164]	@ (800fbd4 <Sensor_Printf+0xfc>)
 800fb30:	2103      	movs	r1, #3
 800fb32:	2000      	movs	r0, #0
 800fb34:	f7f1 faf2 	bl	800111c <Custom_LCD_Printf>
	Custom_LCD_Printf(0, 4, "6/7:%02x %02x", *(sensorValue + 6),
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	3318      	adds	r3, #24
 800fb3c:	681a      	ldr	r2, [r3, #0]
			*(sensorValue + 7));
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	331c      	adds	r3, #28
	Custom_LCD_Printf(0, 4, "6/7:%02x %02x", *(sensorValue + 6),
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	9300      	str	r3, [sp, #0]
 800fb46:	4613      	mov	r3, r2
 800fb48:	4a23      	ldr	r2, [pc, #140]	@ (800fbd8 <Sensor_Printf+0x100>)
 800fb4a:	2104      	movs	r1, #4
 800fb4c:	2000      	movs	r0, #0
 800fb4e:	f7f1 fae5 	bl	800111c <Custom_LCD_Printf>
	Custom_LCD_Printf(0, 5, "8/9:%02x %02x", *(sensorValue + 8),
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	3320      	adds	r3, #32
 800fb56:	681a      	ldr	r2, [r3, #0]
			*(sensorValue + 9));
 800fb58:	683b      	ldr	r3, [r7, #0]
 800fb5a:	3324      	adds	r3, #36	@ 0x24
	Custom_LCD_Printf(0, 5, "8/9:%02x %02x", *(sensorValue + 8),
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	9300      	str	r3, [sp, #0]
 800fb60:	4613      	mov	r3, r2
 800fb62:	4a1e      	ldr	r2, [pc, #120]	@ (800fbdc <Sensor_Printf+0x104>)
 800fb64:	2105      	movs	r1, #5
 800fb66:	2000      	movs	r0, #0
 800fb68:	f7f1 fad8 	bl	800111c <Custom_LCD_Printf>
	Custom_LCD_Printf(0, 6, "a/b:%02x %02x", *(sensorValue + 10),
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	3328      	adds	r3, #40	@ 0x28
 800fb70:	681a      	ldr	r2, [r3, #0]
			*(sensorValue + 11));
 800fb72:	683b      	ldr	r3, [r7, #0]
 800fb74:	332c      	adds	r3, #44	@ 0x2c
	Custom_LCD_Printf(0, 6, "a/b:%02x %02x", *(sensorValue + 10),
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	9300      	str	r3, [sp, #0]
 800fb7a:	4613      	mov	r3, r2
 800fb7c:	4a18      	ldr	r2, [pc, #96]	@ (800fbe0 <Sensor_Printf+0x108>)
 800fb7e:	2106      	movs	r1, #6
 800fb80:	2000      	movs	r0, #0
 800fb82:	f7f1 facb 	bl	800111c <Custom_LCD_Printf>
	Custom_LCD_Printf(0, 7, "c/d:%02x %02x", *(sensorValue + 12),
 800fb86:	683b      	ldr	r3, [r7, #0]
 800fb88:	3330      	adds	r3, #48	@ 0x30
 800fb8a:	681a      	ldr	r2, [r3, #0]
			*(sensorValue + 13));
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	3334      	adds	r3, #52	@ 0x34
	Custom_LCD_Printf(0, 7, "c/d:%02x %02x", *(sensorValue + 12),
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	9300      	str	r3, [sp, #0]
 800fb94:	4613      	mov	r3, r2
 800fb96:	4a13      	ldr	r2, [pc, #76]	@ (800fbe4 <Sensor_Printf+0x10c>)
 800fb98:	2107      	movs	r1, #7
 800fb9a:	2000      	movs	r0, #0
 800fb9c:	f7f1 fabe 	bl	800111c <Custom_LCD_Printf>
	Custom_LCD_Printf(0, 8, "left right");
 800fba0:	4a11      	ldr	r2, [pc, #68]	@ (800fbe8 <Sensor_Printf+0x110>)
 800fba2:	2108      	movs	r1, #8
 800fba4:	2000      	movs	r0, #0
 800fba6:	f7f1 fab9 	bl	800111c <Custom_LCD_Printf>
	Custom_LCD_Printf(0, 9, "%02x      %02x", *(sensorValue + 14),
 800fbaa:	683b      	ldr	r3, [r7, #0]
 800fbac:	3338      	adds	r3, #56	@ 0x38
 800fbae:	681a      	ldr	r2, [r3, #0]
			*(sensorValue + 15));
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	333c      	adds	r3, #60	@ 0x3c
	Custom_LCD_Printf(0, 9, "%02x      %02x", *(sensorValue + 14),
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	9300      	str	r3, [sp, #0]
 800fbb8:	4613      	mov	r3, r2
 800fbba:	4a0c      	ldr	r2, [pc, #48]	@ (800fbec <Sensor_Printf+0x114>)
 800fbbc:	2109      	movs	r1, #9
 800fbbe:	2000      	movs	r0, #0
 800fbc0:	f7f1 faac 	bl	800111c <Custom_LCD_Printf>
}
 800fbc4:	bf00      	nop
 800fbc6:	3708      	adds	r7, #8
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	bd80      	pop	{r7, pc}
 800fbcc:	08016f04 	.word	0x08016f04
 800fbd0:	08016f14 	.word	0x08016f14
 800fbd4:	08016f24 	.word	0x08016f24
 800fbd8:	08016f34 	.word	0x08016f34
 800fbdc:	08016f44 	.word	0x08016f44
 800fbe0:	08016f54 	.word	0x08016f54
 800fbe4:	08016f64 	.word	0x08016f64
 800fbe8:	08016f74 	.word	0x08016f74
 800fbec:	08016f80 	.word	0x08016f80

0800fbf0 <Sensor_Test_Raw>:

void Sensor_Test_Raw() {
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	af00      	add	r7, sp, #0
	Sensor_Start();
 800fbf4:	f7ff fd28 	bl	800f648 <Sensor_Start>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 800fbf8:	e003      	b.n	800fc02 <Sensor_Test_Raw+0x12>
		Sensor_Printf("S Raw ", sensor.raw);
 800fbfa:	490c      	ldr	r1, [pc, #48]	@ (800fc2c <Sensor_Test_Raw+0x3c>)
 800fbfc:	480c      	ldr	r0, [pc, #48]	@ (800fc30 <Sensor_Test_Raw+0x40>)
 800fbfe:	f7ff ff6b 	bl	800fad8 <Sensor_Printf>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 800fc02:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800fc06:	480b      	ldr	r0, [pc, #44]	@ (800fc34 <Sensor_Test_Raw+0x44>)
 800fc08:	f7f4 ffb6 	bl	8004b78 <HAL_GPIO_ReadPin>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	2b01      	cmp	r3, #1
 800fc10:	d1f3      	bne.n	800fbfa <Sensor_Test_Raw+0xa>
	}
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 800fc12:	bf00      	nop
 800fc14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800fc18:	4806      	ldr	r0, [pc, #24]	@ (800fc34 <Sensor_Test_Raw+0x44>)
 800fc1a:	f7f4 ffad 	bl	8004b78 <HAL_GPIO_ReadPin>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	2b01      	cmp	r3, #1
 800fc22:	d0f7      	beq.n	800fc14 <Sensor_Test_Raw+0x24>
		;
	Sensor_Stop();
 800fc24:	f7ff fd2e 	bl	800f684 <Sensor_Stop>
}
 800fc28:	bf00      	nop
 800fc2a:	bd80      	pop	{r7, pc}
 800fc2c:	240001a0 	.word	0x240001a0
 800fc30:	08016f90 	.word	0x08016f90
 800fc34:	58020800 	.word	0x58020800

0800fc38 <Sensor_Calibration>:

void Sensor_Calibration() {
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b082      	sub	sp, #8
 800fc3c:	af00      	add	r7, sp, #0
	Sensor_Start();
 800fc3e:	f7ff fd03 	bl	800f648 <Sensor_Start>
	uint8_t i = 0;
 800fc42:	2300      	movs	r3, #0
 800fc44:	71fb      	strb	r3, [r7, #7]
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 800fc46:	e01b      	b.n	800fc80 <Sensor_Calibration+0x48>
		Sensor_Printf("Cali WhiteMax", sensor.whiteMax);
 800fc48:	493f      	ldr	r1, [pc, #252]	@ (800fd48 <Sensor_Calibration+0x110>)
 800fc4a:	4840      	ldr	r0, [pc, #256]	@ (800fd4c <Sensor_Calibration+0x114>)
 800fc4c:	f7ff ff44 	bl	800fad8 <Sensor_Printf>
		*(sensor.whiteMax + i) = (*(sensor.raw + i) > *(sensor.whiteMax + i)) ?
 800fc50:	79fb      	ldrb	r3, [r7, #7]
 800fc52:	009b      	lsls	r3, r3, #2
 800fc54:	4a3c      	ldr	r2, [pc, #240]	@ (800fd48 <Sensor_Calibration+0x110>)
 800fc56:	4413      	add	r3, r2
 800fc58:	6819      	ldr	r1, [r3, #0]
 800fc5a:	79fb      	ldrb	r3, [r7, #7]
 800fc5c:	009b      	lsls	r3, r3, #2
 800fc5e:	4a3c      	ldr	r2, [pc, #240]	@ (800fd50 <Sensor_Calibration+0x118>)
 800fc60:	4413      	add	r3, r2
 800fc62:	681a      	ldr	r2, [r3, #0]
 800fc64:	79fb      	ldrb	r3, [r7, #7]
 800fc66:	009b      	lsls	r3, r3, #2
 800fc68:	4837      	ldr	r0, [pc, #220]	@ (800fd48 <Sensor_Calibration+0x110>)
 800fc6a:	4403      	add	r3, r0
				*(sensor.raw + i) : *(sensor.whiteMax + i);
 800fc6c:	428a      	cmp	r2, r1
 800fc6e:	bfb8      	it	lt
 800fc70:	460a      	movlt	r2, r1
		*(sensor.whiteMax + i) = (*(sensor.raw + i) > *(sensor.whiteMax + i)) ?
 800fc72:	601a      	str	r2, [r3, #0]
		i = (i + 1) & 0x0F;
 800fc74:	79fb      	ldrb	r3, [r7, #7]
 800fc76:	3301      	adds	r3, #1
 800fc78:	b2db      	uxtb	r3, r3
 800fc7a:	f003 030f 	and.w	r3, r3, #15
 800fc7e:	71fb      	strb	r3, [r7, #7]
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 800fc80:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800fc84:	4833      	ldr	r0, [pc, #204]	@ (800fd54 <Sensor_Calibration+0x11c>)
 800fc86:	f7f4 ff77 	bl	8004b78 <HAL_GPIO_ReadPin>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	2b01      	cmp	r3, #1
 800fc8e:	d1db      	bne.n	800fc48 <Sensor_Calibration+0x10>
	}
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 800fc90:	e001      	b.n	800fc96 <Sensor_Calibration+0x5e>
		Custom_LCD_Clear();
 800fc92:	f7f1 fa95 	bl	80011c0 <Custom_LCD_Clear>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 800fc96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800fc9a:	482e      	ldr	r0, [pc, #184]	@ (800fd54 <Sensor_Calibration+0x11c>)
 800fc9c:	f7f4 ff6c 	bl	8004b78 <HAL_GPIO_ReadPin>
 800fca0:	4603      	mov	r3, r0
 800fca2:	2b01      	cmp	r3, #1
 800fca4:	d0f5      	beq.n	800fc92 <Sensor_Calibration+0x5a>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 800fca6:	e01b      	b.n	800fce0 <Sensor_Calibration+0xa8>
		Sensor_Printf("Cali BlackMax", sensor.blackMax);
 800fca8:	492b      	ldr	r1, [pc, #172]	@ (800fd58 <Sensor_Calibration+0x120>)
 800fcaa:	482c      	ldr	r0, [pc, #176]	@ (800fd5c <Sensor_Calibration+0x124>)
 800fcac:	f7ff ff14 	bl	800fad8 <Sensor_Printf>
		*(sensor.blackMax + i) =
				(*(sensor.raw + i) > *(sensor.blackMax + i)) ?
 800fcb0:	79fb      	ldrb	r3, [r7, #7]
 800fcb2:	009b      	lsls	r3, r3, #2
 800fcb4:	4a28      	ldr	r2, [pc, #160]	@ (800fd58 <Sensor_Calibration+0x120>)
 800fcb6:	4413      	add	r3, r2
 800fcb8:	6819      	ldr	r1, [r3, #0]
 800fcba:	79fb      	ldrb	r3, [r7, #7]
 800fcbc:	009b      	lsls	r3, r3, #2
 800fcbe:	4a24      	ldr	r2, [pc, #144]	@ (800fd50 <Sensor_Calibration+0x118>)
 800fcc0:	4413      	add	r3, r2
 800fcc2:	681a      	ldr	r2, [r3, #0]
		*(sensor.blackMax + i) =
 800fcc4:	79fb      	ldrb	r3, [r7, #7]
 800fcc6:	009b      	lsls	r3, r3, #2
 800fcc8:	4823      	ldr	r0, [pc, #140]	@ (800fd58 <Sensor_Calibration+0x120>)
 800fcca:	4403      	add	r3, r0
						*(sensor.raw + i) : *(sensor.blackMax + i);
 800fccc:	428a      	cmp	r2, r1
 800fcce:	bfb8      	it	lt
 800fcd0:	460a      	movlt	r2, r1
		*(sensor.blackMax + i) =
 800fcd2:	601a      	str	r2, [r3, #0]
		i = (i + 1) & 0x0F;
 800fcd4:	79fb      	ldrb	r3, [r7, #7]
 800fcd6:	3301      	adds	r3, #1
 800fcd8:	b2db      	uxtb	r3, r3
 800fcda:	f003 030f 	and.w	r3, r3, #15
 800fcde:	71fb      	strb	r3, [r7, #7]
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 800fce0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800fce4:	481b      	ldr	r0, [pc, #108]	@ (800fd54 <Sensor_Calibration+0x11c>)
 800fce6:	f7f4 ff47 	bl	8004b78 <HAL_GPIO_ReadPin>
 800fcea:	4603      	mov	r3, r0
 800fcec:	2b01      	cmp	r3, #1
 800fcee:	d1db      	bne.n	800fca8 <Sensor_Calibration+0x70>
	}
	Sensor_Stop();
 800fcf0:	f7ff fcc8 	bl	800f684 <Sensor_Stop>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 800fcf4:	e001      	b.n	800fcfa <Sensor_Calibration+0xc2>
		Custom_LCD_Clear();
 800fcf6:	f7f1 fa63 	bl	80011c0 <Custom_LCD_Clear>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 800fcfa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800fcfe:	4815      	ldr	r0, [pc, #84]	@ (800fd54 <Sensor_Calibration+0x11c>)
 800fd00:	f7f4 ff3a 	bl	8004b78 <HAL_GPIO_ReadPin>
 800fd04:	4603      	mov	r3, r0
 800fd06:	2b01      	cmp	r3, #1
 800fd08:	d0f5      	beq.n	800fcf6 <Sensor_Calibration+0xbe>

	for (i = 0; i < 16; i++) {
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	71fb      	strb	r3, [r7, #7]
 800fd0e:	e012      	b.n	800fd36 <Sensor_Calibration+0xfe>
		*(sensor.normalizeCoef + i) = *(sensor.whiteMax + i)
 800fd10:	79fb      	ldrb	r3, [r7, #7]
 800fd12:	009b      	lsls	r3, r3, #2
 800fd14:	4a0c      	ldr	r2, [pc, #48]	@ (800fd48 <Sensor_Calibration+0x110>)
 800fd16:	4413      	add	r3, r2
 800fd18:	6819      	ldr	r1, [r3, #0]
				- *(sensor.blackMax + i);
 800fd1a:	79fb      	ldrb	r3, [r7, #7]
 800fd1c:	009b      	lsls	r3, r3, #2
 800fd1e:	4a0e      	ldr	r2, [pc, #56]	@ (800fd58 <Sensor_Calibration+0x120>)
 800fd20:	4413      	add	r3, r2
 800fd22:	681a      	ldr	r2, [r3, #0]
		*(sensor.normalizeCoef + i) = *(sensor.whiteMax + i)
 800fd24:	79fb      	ldrb	r3, [r7, #7]
 800fd26:	009b      	lsls	r3, r3, #2
 800fd28:	480d      	ldr	r0, [pc, #52]	@ (800fd60 <Sensor_Calibration+0x128>)
 800fd2a:	4403      	add	r3, r0
				- *(sensor.blackMax + i);
 800fd2c:	1a8a      	subs	r2, r1, r2
		*(sensor.normalizeCoef + i) = *(sensor.whiteMax + i)
 800fd2e:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 16; i++) {
 800fd30:	79fb      	ldrb	r3, [r7, #7]
 800fd32:	3301      	adds	r3, #1
 800fd34:	71fb      	strb	r3, [r7, #7]
 800fd36:	79fb      	ldrb	r3, [r7, #7]
 800fd38:	2b0f      	cmp	r3, #15
 800fd3a:	d9e9      	bls.n	800fd10 <Sensor_Calibration+0xd8>
	}
}
 800fd3c:	bf00      	nop
 800fd3e:	bf00      	nop
 800fd40:	3708      	adds	r7, #8
 800fd42:	46bd      	mov	sp, r7
 800fd44:	bd80      	pop	{r7, pc}
 800fd46:	bf00      	nop
 800fd48:	240001d8 	.word	0x240001d8
 800fd4c:	08016f98 	.word	0x08016f98
 800fd50:	240001a0 	.word	0x240001a0
 800fd54:	58020800 	.word	0x58020800
 800fd58:	24000210 	.word	0x24000210
 800fd5c:	08016fa8 	.word	0x08016fa8
 800fd60:	24000248 	.word	0x24000248

0800fd64 <Sensor_Test_Normalized>:

void Sensor_Test_Normalized() {
 800fd64:	b580      	push	{r7, lr}
 800fd66:	af00      	add	r7, sp, #0
	Sensor_Start();
 800fd68:	f7ff fc6e 	bl	800f648 <Sensor_Start>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 800fd6c:	e003      	b.n	800fd76 <Sensor_Test_Normalized+0x12>
		Sensor_Printf("S Normalize", sensor.normalized);
 800fd6e:	490d      	ldr	r1, [pc, #52]	@ (800fda4 <Sensor_Test_Normalized+0x40>)
 800fd70:	480d      	ldr	r0, [pc, #52]	@ (800fda8 <Sensor_Test_Normalized+0x44>)
 800fd72:	f7ff feb1 	bl	800fad8 <Sensor_Printf>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 800fd76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800fd7a:	480c      	ldr	r0, [pc, #48]	@ (800fdac <Sensor_Test_Normalized+0x48>)
 800fd7c:	f7f4 fefc 	bl	8004b78 <HAL_GPIO_ReadPin>
 800fd80:	4603      	mov	r3, r0
 800fd82:	2b01      	cmp	r3, #1
 800fd84:	d1f3      	bne.n	800fd6e <Sensor_Test_Normalized+0xa>
	}
	Sensor_Stop();
 800fd86:	f7ff fc7d 	bl	800f684 <Sensor_Stop>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 800fd8a:	bf00      	nop
 800fd8c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800fd90:	4806      	ldr	r0, [pc, #24]	@ (800fdac <Sensor_Test_Normalized+0x48>)
 800fd92:	f7f4 fef1 	bl	8004b78 <HAL_GPIO_ReadPin>
 800fd96:	4603      	mov	r3, r0
 800fd98:	2b01      	cmp	r3, #1
 800fd9a:	d0f7      	beq.n	800fd8c <Sensor_Test_Normalized+0x28>
		;
}
 800fd9c:	bf00      	nop
 800fd9e:	bf00      	nop
 800fda0:	bd80      	pop	{r7, pc}
 800fda2:	bf00      	nop
 800fda4:	24000280 	.word	0x24000280
 800fda8:	08016fb8 	.word	0x08016fb8
 800fdac:	58020800 	.word	0x58020800

0800fdb0 <Sensor_Test_State>:

void Sensor_Test_State() {
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b084      	sub	sp, #16
 800fdb4:	af00      	add	r7, sp, #0
	Sensor_Start();
 800fdb6:	f7ff fc47 	bl	800f648 <Sensor_Start>
	uint8_t i = 0;
 800fdba:	2300      	movs	r3, #0
 800fdbc:	73fb      	strb	r3, [r7, #15]
	char sensorStateL[7];
	char sensorStateR[7];

	Custom_LCD_Printf(0, 0, "S State");
 800fdbe:	4a31      	ldr	r2, [pc, #196]	@ (800fe84 <Sensor_Test_State+0xd4>)
 800fdc0:	2100      	movs	r1, #0
 800fdc2:	2000      	movs	r0, #0
 800fdc4:	f7f1 f9aa 	bl	800111c <Custom_LCD_Printf>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 800fdc8:	e043      	b.n	800fe52 <Sensor_Test_State+0xa2>
		*(sensorStateL + i) = (sensor.state & (0x01 << i)) ? '1' : '0';
 800fdca:	4b2f      	ldr	r3, [pc, #188]	@ (800fe88 <Sensor_Test_State+0xd8>)
 800fdcc:	f9b3 3118 	ldrsh.w	r3, [r3, #280]	@ 0x118
 800fdd0:	461a      	mov	r2, r3
 800fdd2:	7bfb      	ldrb	r3, [r7, #15]
 800fdd4:	fa42 f303 	asr.w	r3, r2, r3
 800fdd8:	f003 0301 	and.w	r3, r3, #1
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d001      	beq.n	800fde4 <Sensor_Test_State+0x34>
 800fde0:	2131      	movs	r1, #49	@ 0x31
 800fde2:	e000      	b.n	800fde6 <Sensor_Test_State+0x36>
 800fde4:	2130      	movs	r1, #48	@ 0x30
 800fde6:	7bfb      	ldrb	r3, [r7, #15]
 800fde8:	f107 0208 	add.w	r2, r7, #8
 800fdec:	4413      	add	r3, r2
 800fdee:	460a      	mov	r2, r1
 800fdf0:	701a      	strb	r2, [r3, #0]
		*(sensorStateR + i) = (sensor.state & (0x01 << (i + 7))) ? '1' : '0';
 800fdf2:	4b25      	ldr	r3, [pc, #148]	@ (800fe88 <Sensor_Test_State+0xd8>)
 800fdf4:	f9b3 3118 	ldrsh.w	r3, [r3, #280]	@ 0x118
 800fdf8:	461a      	mov	r2, r3
 800fdfa:	7bfb      	ldrb	r3, [r7, #15]
 800fdfc:	3307      	adds	r3, #7
 800fdfe:	fa42 f303 	asr.w	r3, r2, r3
 800fe02:	f003 0301 	and.w	r3, r3, #1
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d001      	beq.n	800fe0e <Sensor_Test_State+0x5e>
 800fe0a:	2131      	movs	r1, #49	@ 0x31
 800fe0c:	e000      	b.n	800fe10 <Sensor_Test_State+0x60>
 800fe0e:	2130      	movs	r1, #48	@ 0x30
 800fe10:	7bfb      	ldrb	r3, [r7, #15]
 800fe12:	463a      	mov	r2, r7
 800fe14:	4413      	add	r3, r2
 800fe16:	460a      	mov	r2, r1
 800fe18:	701a      	strb	r2, [r3, #0]
		Custom_LCD_Printf(0, 1, "L:%.7s   ", sensorStateL);
 800fe1a:	f107 0308 	add.w	r3, r7, #8
 800fe1e:	4a1b      	ldr	r2, [pc, #108]	@ (800fe8c <Sensor_Test_State+0xdc>)
 800fe20:	2101      	movs	r1, #1
 800fe22:	2000      	movs	r0, #0
 800fe24:	f7f1 f97a 	bl	800111c <Custom_LCD_Printf>
		Custom_LCD_Printf(0, 2, "R:%.7s   ", sensorStateR);
 800fe28:	463b      	mov	r3, r7
 800fe2a:	4a19      	ldr	r2, [pc, #100]	@ (800fe90 <Sensor_Test_State+0xe0>)
 800fe2c:	2102      	movs	r1, #2
 800fe2e:	2000      	movs	r0, #0
 800fe30:	f7f1 f974 	bl	800111c <Custom_LCD_Printf>
		i = (i + 1) % 7;
 800fe34:	7bfb      	ldrb	r3, [r7, #15]
 800fe36:	1c5a      	adds	r2, r3, #1
 800fe38:	4b16      	ldr	r3, [pc, #88]	@ (800fe94 <Sensor_Test_State+0xe4>)
 800fe3a:	fb83 1302 	smull	r1, r3, r3, r2
 800fe3e:	4413      	add	r3, r2
 800fe40:	1099      	asrs	r1, r3, #2
 800fe42:	17d3      	asrs	r3, r2, #31
 800fe44:	1ac9      	subs	r1, r1, r3
 800fe46:	460b      	mov	r3, r1
 800fe48:	00db      	lsls	r3, r3, #3
 800fe4a:	1a5b      	subs	r3, r3, r1
 800fe4c:	1ad1      	subs	r1, r2, r3
 800fe4e:	460b      	mov	r3, r1
 800fe50:	73fb      	strb	r3, [r7, #15]
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 800fe52:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800fe56:	4810      	ldr	r0, [pc, #64]	@ (800fe98 <Sensor_Test_State+0xe8>)
 800fe58:	f7f4 fe8e 	bl	8004b78 <HAL_GPIO_ReadPin>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	2b01      	cmp	r3, #1
 800fe60:	d1b3      	bne.n	800fdca <Sensor_Test_State+0x1a>
	}
	Sensor_Stop();
 800fe62:	f7ff fc0f 	bl	800f684 <Sensor_Stop>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 800fe66:	bf00      	nop
 800fe68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800fe6c:	480a      	ldr	r0, [pc, #40]	@ (800fe98 <Sensor_Test_State+0xe8>)
 800fe6e:	f7f4 fe83 	bl	8004b78 <HAL_GPIO_ReadPin>
 800fe72:	4603      	mov	r3, r0
 800fe74:	2b01      	cmp	r3, #1
 800fe76:	d0f7      	beq.n	800fe68 <Sensor_Test_State+0xb8>
		;
}
 800fe78:	bf00      	nop
 800fe7a:	bf00      	nop
 800fe7c:	3710      	adds	r7, #16
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	bd80      	pop	{r7, pc}
 800fe82:	bf00      	nop
 800fe84:	08016fc4 	.word	0x08016fc4
 800fe88:	240001a0 	.word	0x240001a0
 800fe8c:	08016fcc 	.word	0x08016fcc
 800fe90:	08016fd8 	.word	0x08016fd8
 800fe94:	92492493 	.word	0x92492493
 800fe98:	58020800 	.word	0x58020800

0800fe9c <Sensor_Test_Position>:

void Sensor_Test_Position() {
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b082      	sub	sp, #8
 800fea0:	af02      	add	r7, sp, #8
	Sensor_Start();
 800fea2:	f7ff fbd1 	bl	800f648 <Sensor_Start>
	Custom_LCD_Printf(0, 0, "S Position");
 800fea6:	4a14      	ldr	r2, [pc, #80]	@ (800fef8 <Sensor_Test_Position+0x5c>)
 800fea8:	2100      	movs	r1, #0
 800feaa:	2000      	movs	r0, #0
 800feac:	f7f1 f936 	bl	800111c <Custom_LCD_Printf>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 800feb0:	e00b      	b.n	800feca <Sensor_Test_Position+0x2e>
		Custom_LCD_Printf(0, 1, "%.6f ", sensor.position);
 800feb2:	4b12      	ldr	r3, [pc, #72]	@ (800fefc <Sensor_Test_Position+0x60>)
 800feb4:	edd3 7a47 	vldr	s15, [r3, #284]	@ 0x11c
 800feb8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800febc:	ed8d 7b00 	vstr	d7, [sp]
 800fec0:	4a0f      	ldr	r2, [pc, #60]	@ (800ff00 <Sensor_Test_Position+0x64>)
 800fec2:	2101      	movs	r1, #1
 800fec4:	2000      	movs	r0, #0
 800fec6:	f7f1 f929 	bl	800111c <Custom_LCD_Printf>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 800feca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800fece:	480d      	ldr	r0, [pc, #52]	@ (800ff04 <Sensor_Test_Position+0x68>)
 800fed0:	f7f4 fe52 	bl	8004b78 <HAL_GPIO_ReadPin>
 800fed4:	4603      	mov	r3, r0
 800fed6:	2b01      	cmp	r3, #1
 800fed8:	d1eb      	bne.n	800feb2 <Sensor_Test_Position+0x16>
	}
	Sensor_Stop();
 800feda:	f7ff fbd3 	bl	800f684 <Sensor_Stop>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 800fede:	bf00      	nop
 800fee0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800fee4:	4807      	ldr	r0, [pc, #28]	@ (800ff04 <Sensor_Test_Position+0x68>)
 800fee6:	f7f4 fe47 	bl	8004b78 <HAL_GPIO_ReadPin>
 800feea:	4603      	mov	r3, r0
 800feec:	2b01      	cmp	r3, #1
 800feee:	d0f7      	beq.n	800fee0 <Sensor_Test_Position+0x44>
		;
}
 800fef0:	bf00      	nop
 800fef2:	bf00      	nop
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}
 800fef8:	08016fe4 	.word	0x08016fe4
 800fefc:	240001a0 	.word	0x240001a0
 800ff00:	08016ff0 	.word	0x08016ff0
 800ff04:	58020800 	.word	0x58020800

0800ff08 <Battery_Start>:

//__STATIC_INLINE uint16_t Battery_ADC_Read() {
//
//}

void Battery_Start(){
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	af00      	add	r7, sp, #0
	HAL_LPTIM_Counter_Start_IT(ADC_BATTERY_TIM, 0);
 800ff0c:	2100      	movs	r1, #0
 800ff0e:	4802      	ldr	r0, [pc, #8]	@ (800ff18 <Battery_Start+0x10>)
 800ff10:	f7f5 fd6c 	bl	80059ec <HAL_LPTIM_Counter_Start_IT>
}
 800ff14:	bf00      	nop
 800ff16:	bd80      	pop	{r7, pc}
 800ff18:	24000dac 	.word	0x24000dac

0800ff1c <Battery_Stop>:

void Battery_Stop(){
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	af00      	add	r7, sp, #0
	HAL_LPTIM_Counter_Stop_IT(ADC_BATTERY_TIM);
 800ff20:	4802      	ldr	r0, [pc, #8]	@ (800ff2c <Battery_Stop+0x10>)
 800ff22:	f7f5 fdca 	bl	8005aba <HAL_LPTIM_Counter_Stop_IT>
}
 800ff26:	bf00      	nop
 800ff28:	bd80      	pop	{r7, pc}
 800ff2a:	bf00      	nop
 800ff2c:	24000dac 	.word	0x24000dac

0800ff30 <ADC_Battery_LPTIM5_IRQ>:

void ADC_Battery_LPTIM5_IRQ() {
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b082      	sub	sp, #8
 800ff34:	af00      	add	r7, sp, #0
	uint16_t adc_voltage = Sensor_ADC_Read(ADC_BATTERY_CHANNEL);
 800ff36:	4812      	ldr	r0, [pc, #72]	@ (800ff80 <ADC_Battery_LPTIM5_IRQ+0x50>)
 800ff38:	f7ff fbce 	bl	800f6d8 <Sensor_ADC_Read>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(ADC_BATTERY_CHANNEL);
 800ff40:	480f      	ldr	r0, [pc, #60]	@ (800ff80 <ADC_Battery_LPTIM5_IRQ+0x50>)
 800ff42:	f7f3 fa6d 	bl	8003420 <HAL_ADC_Stop>
	sensor.voltage = (float) (adc_voltage) / 65536.f * 3.3f * 11.f * 4.f;
 800ff46:	88fb      	ldrh	r3, [r7, #6]
 800ff48:	ee07 3a90 	vmov	s15, r3
 800ff4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ff50:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 800ff84 <ADC_Battery_LPTIM5_IRQ+0x54>
 800ff54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ff58:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800ff88 <ADC_Battery_LPTIM5_IRQ+0x58>
 800ff5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ff60:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 800ff64:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ff68:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800ff6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ff70:	4b06      	ldr	r3, [pc, #24]	@ (800ff8c <ADC_Battery_LPTIM5_IRQ+0x5c>)
 800ff72:	edc3 7a4a 	vstr	s15, [r3, #296]	@ 0x128
}
 800ff76:	bf00      	nop
 800ff78:	3708      	adds	r7, #8
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}
 800ff7e:	bf00      	nop
 800ff80:	24000b50 	.word	0x24000b50
 800ff84:	47800000 	.word	0x47800000
 800ff88:	40533333 	.word	0x40533333
 800ff8c:	240001a0 	.word	0x240001a0

0800ff90 <Sensor_Test_Voltage>:

void Sensor_Test_Voltage() {
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b082      	sub	sp, #8
 800ff94:	af02      	add	r7, sp, #8
	Battery_Start();
 800ff96:	f7ff ffb7 	bl	800ff08 <Battery_Start>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 800ff9a:	e00b      	b.n	800ffb4 <Sensor_Test_Voltage+0x24>
		Custom_LCD_Printf(0, 0, "%.6f", sensor.voltage);
 800ff9c:	4b11      	ldr	r3, [pc, #68]	@ (800ffe4 <Sensor_Test_Voltage+0x54>)
 800ff9e:	edd3 7a4a 	vldr	s15, [r3, #296]	@ 0x128
 800ffa2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ffa6:	ed8d 7b00 	vstr	d7, [sp]
 800ffaa:	4a0f      	ldr	r2, [pc, #60]	@ (800ffe8 <Sensor_Test_Voltage+0x58>)
 800ffac:	2100      	movs	r1, #0
 800ffae:	2000      	movs	r0, #0
 800ffb0:	f7f1 f8b4 	bl	800111c <Custom_LCD_Printf>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET) {
 800ffb4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ffb8:	480c      	ldr	r0, [pc, #48]	@ (800ffec <Sensor_Test_Voltage+0x5c>)
 800ffba:	f7f4 fddd 	bl	8004b78 <HAL_GPIO_ReadPin>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	2b01      	cmp	r3, #1
 800ffc2:	d1eb      	bne.n	800ff9c <Sensor_Test_Voltage+0xc>
	}
	Battery_Stop();
 800ffc4:	f7ff ffaa 	bl	800ff1c <Battery_Stop>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 800ffc8:	bf00      	nop
 800ffca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ffce:	4807      	ldr	r0, [pc, #28]	@ (800ffec <Sensor_Test_Voltage+0x5c>)
 800ffd0:	f7f4 fdd2 	bl	8004b78 <HAL_GPIO_ReadPin>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	2b01      	cmp	r3, #1
 800ffd8:	d0f7      	beq.n	800ffca <Sensor_Test_Voltage+0x3a>
		;
}
 800ffda:	bf00      	nop
 800ffdc:	bf00      	nop
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	bd80      	pop	{r7, pc}
 800ffe2:	bf00      	nop
 800ffe4:	240001a0 	.word	0x240001a0
 800ffe8:	08017004 	.word	0x08017004
 800ffec:	58020800 	.word	0x58020800

0800fff0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fff0:	b480      	push	{r7}
 800fff2:	b087      	sub	sp, #28
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	60f8      	str	r0, [r7, #12]
 800fff8:	60b9      	str	r1, [r7, #8]
 800fffa:	4613      	mov	r3, r2
 800fffc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fffe:	2301      	movs	r3, #1
 8010000:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010002:	2300      	movs	r3, #0
 8010004:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010006:	4b1f      	ldr	r3, [pc, #124]	@ (8010084 <FATFS_LinkDriverEx+0x94>)
 8010008:	7a5b      	ldrb	r3, [r3, #9]
 801000a:	b2db      	uxtb	r3, r3
 801000c:	2b00      	cmp	r3, #0
 801000e:	d131      	bne.n	8010074 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010010:	4b1c      	ldr	r3, [pc, #112]	@ (8010084 <FATFS_LinkDriverEx+0x94>)
 8010012:	7a5b      	ldrb	r3, [r3, #9]
 8010014:	b2db      	uxtb	r3, r3
 8010016:	461a      	mov	r2, r3
 8010018:	4b1a      	ldr	r3, [pc, #104]	@ (8010084 <FATFS_LinkDriverEx+0x94>)
 801001a:	2100      	movs	r1, #0
 801001c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801001e:	4b19      	ldr	r3, [pc, #100]	@ (8010084 <FATFS_LinkDriverEx+0x94>)
 8010020:	7a5b      	ldrb	r3, [r3, #9]
 8010022:	b2db      	uxtb	r3, r3
 8010024:	4a17      	ldr	r2, [pc, #92]	@ (8010084 <FATFS_LinkDriverEx+0x94>)
 8010026:	009b      	lsls	r3, r3, #2
 8010028:	4413      	add	r3, r2
 801002a:	68fa      	ldr	r2, [r7, #12]
 801002c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801002e:	4b15      	ldr	r3, [pc, #84]	@ (8010084 <FATFS_LinkDriverEx+0x94>)
 8010030:	7a5b      	ldrb	r3, [r3, #9]
 8010032:	b2db      	uxtb	r3, r3
 8010034:	461a      	mov	r2, r3
 8010036:	4b13      	ldr	r3, [pc, #76]	@ (8010084 <FATFS_LinkDriverEx+0x94>)
 8010038:	4413      	add	r3, r2
 801003a:	79fa      	ldrb	r2, [r7, #7]
 801003c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801003e:	4b11      	ldr	r3, [pc, #68]	@ (8010084 <FATFS_LinkDriverEx+0x94>)
 8010040:	7a5b      	ldrb	r3, [r3, #9]
 8010042:	b2db      	uxtb	r3, r3
 8010044:	1c5a      	adds	r2, r3, #1
 8010046:	b2d1      	uxtb	r1, r2
 8010048:	4a0e      	ldr	r2, [pc, #56]	@ (8010084 <FATFS_LinkDriverEx+0x94>)
 801004a:	7251      	strb	r1, [r2, #9]
 801004c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801004e:	7dbb      	ldrb	r3, [r7, #22]
 8010050:	3330      	adds	r3, #48	@ 0x30
 8010052:	b2da      	uxtb	r2, r3
 8010054:	68bb      	ldr	r3, [r7, #8]
 8010056:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010058:	68bb      	ldr	r3, [r7, #8]
 801005a:	3301      	adds	r3, #1
 801005c:	223a      	movs	r2, #58	@ 0x3a
 801005e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010060:	68bb      	ldr	r3, [r7, #8]
 8010062:	3302      	adds	r3, #2
 8010064:	222f      	movs	r2, #47	@ 0x2f
 8010066:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010068:	68bb      	ldr	r3, [r7, #8]
 801006a:	3303      	adds	r3, #3
 801006c:	2200      	movs	r2, #0
 801006e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010070:	2300      	movs	r3, #0
 8010072:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010074:	7dfb      	ldrb	r3, [r7, #23]
}
 8010076:	4618      	mov	r0, r3
 8010078:	371c      	adds	r7, #28
 801007a:	46bd      	mov	sp, r7
 801007c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010080:	4770      	bx	lr
 8010082:	bf00      	nop
 8010084:	24000ae0 	.word	0x24000ae0

08010088 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b082      	sub	sp, #8
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
 8010090:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010092:	2200      	movs	r2, #0
 8010094:	6839      	ldr	r1, [r7, #0]
 8010096:	6878      	ldr	r0, [r7, #4]
 8010098:	f7ff ffaa 	bl	800fff0 <FATFS_LinkDriverEx>
 801009c:	4603      	mov	r3, r0
}
 801009e:	4618      	mov	r0, r3
 80100a0:	3708      	adds	r7, #8
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd80      	pop	{r7, pc}
	...

080100a8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b08a      	sub	sp, #40	@ 0x28
 80100ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80100ae:	f107 031c 	add.w	r3, r7, #28
 80100b2:	2200      	movs	r2, #0
 80100b4:	601a      	str	r2, [r3, #0]
 80100b6:	605a      	str	r2, [r3, #4]
 80100b8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80100ba:	463b      	mov	r3, r7
 80100bc:	2200      	movs	r2, #0
 80100be:	601a      	str	r2, [r3, #0]
 80100c0:	605a      	str	r2, [r3, #4]
 80100c2:	609a      	str	r2, [r3, #8]
 80100c4:	60da      	str	r2, [r3, #12]
 80100c6:	611a      	str	r2, [r3, #16]
 80100c8:	615a      	str	r2, [r3, #20]
 80100ca:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80100cc:	4b97      	ldr	r3, [pc, #604]	@ (801032c <MX_ADC1_Init+0x284>)
 80100ce:	4a98      	ldr	r2, [pc, #608]	@ (8010330 <MX_ADC1_Init+0x288>)
 80100d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80100d2:	4b96      	ldr	r3, [pc, #600]	@ (801032c <MX_ADC1_Init+0x284>)
 80100d4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80100d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B_OPT;
 80100da:	4b94      	ldr	r3, [pc, #592]	@ (801032c <MX_ADC1_Init+0x284>)
 80100dc:	2218      	movs	r2, #24
 80100de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80100e0:	4b92      	ldr	r3, [pc, #584]	@ (801032c <MX_ADC1_Init+0x284>)
 80100e2:	2201      	movs	r2, #1
 80100e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80100e6:	4b91      	ldr	r3, [pc, #580]	@ (801032c <MX_ADC1_Init+0x284>)
 80100e8:	2204      	movs	r2, #4
 80100ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80100ec:	4b8f      	ldr	r3, [pc, #572]	@ (801032c <MX_ADC1_Init+0x284>)
 80100ee:	2200      	movs	r2, #0
 80100f0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80100f2:	4b8e      	ldr	r3, [pc, #568]	@ (801032c <MX_ADC1_Init+0x284>)
 80100f4:	2200      	movs	r2, #0
 80100f6:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 14;
 80100f8:	4b8c      	ldr	r3, [pc, #560]	@ (801032c <MX_ADC1_Init+0x284>)
 80100fa:	220e      	movs	r2, #14
 80100fc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80100fe:	4b8b      	ldr	r3, [pc, #556]	@ (801032c <MX_ADC1_Init+0x284>)
 8010100:	2201      	movs	r2, #1
 8010102:	771a      	strb	r2, [r3, #28]
  hadc1.Init.NbrOfDiscConversion = 1;
 8010104:	4b89      	ldr	r3, [pc, #548]	@ (801032c <MX_ADC1_Init+0x284>)
 8010106:	2201      	movs	r2, #1
 8010108:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 801010a:	4b88      	ldr	r3, [pc, #544]	@ (801032c <MX_ADC1_Init+0x284>)
 801010c:	2200      	movs	r2, #0
 801010e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8010110:	4b86      	ldr	r3, [pc, #536]	@ (801032c <MX_ADC1_Init+0x284>)
 8010112:	2200      	movs	r2, #0
 8010114:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8010116:	4b85      	ldr	r3, [pc, #532]	@ (801032c <MX_ADC1_Init+0x284>)
 8010118:	2200      	movs	r2, #0
 801011a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 801011c:	4b83      	ldr	r3, [pc, #524]	@ (801032c <MX_ADC1_Init+0x284>)
 801011e:	2200      	movs	r2, #0
 8010120:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8010122:	4b82      	ldr	r3, [pc, #520]	@ (801032c <MX_ADC1_Init+0x284>)
 8010124:	2200      	movs	r2, #0
 8010126:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8010128:	4b80      	ldr	r3, [pc, #512]	@ (801032c <MX_ADC1_Init+0x284>)
 801012a:	2200      	movs	r2, #0
 801012c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8010130:	4b7e      	ldr	r3, [pc, #504]	@ (801032c <MX_ADC1_Init+0x284>)
 8010132:	2201      	movs	r2, #1
 8010134:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8010136:	487d      	ldr	r0, [pc, #500]	@ (801032c <MX_ADC1_Init+0x284>)
 8010138:	f7f2 ff06 	bl	8002f48 <HAL_ADC_Init>
 801013c:	4603      	mov	r3, r0
 801013e:	2b00      	cmp	r3, #0
 8010140:	d001      	beq.n	8010146 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8010142:	f001 fa5b 	bl	80115fc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8010146:	2300      	movs	r3, #0
 8010148:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 801014a:	f107 031c 	add.w	r3, r7, #28
 801014e:	4619      	mov	r1, r3
 8010150:	4876      	ldr	r0, [pc, #472]	@ (801032c <MX_ADC1_Init+0x284>)
 8010152:	f7f4 f8fb 	bl	800434c <HAL_ADCEx_MultiModeConfigChannel>
 8010156:	4603      	mov	r3, r0
 8010158:	2b00      	cmp	r3, #0
 801015a:	d001      	beq.n	8010160 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 801015c:	f001 fa4e 	bl	80115fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8010160:	4b74      	ldr	r3, [pc, #464]	@ (8010334 <MX_ADC1_Init+0x28c>)
 8010162:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8010164:	2306      	movs	r3, #6
 8010166:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8010168:	2303      	movs	r3, #3
 801016a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 801016c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8010170:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8010172:	2304      	movs	r3, #4
 8010174:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8010176:	2300      	movs	r3, #0
 8010178:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801017a:	463b      	mov	r3, r7
 801017c:	4619      	mov	r1, r3
 801017e:	486b      	ldr	r0, [pc, #428]	@ (801032c <MX_ADC1_Init+0x284>)
 8010180:	f7f3 fa84 	bl	800368c <HAL_ADC_ConfigChannel>
 8010184:	4603      	mov	r3, r0
 8010186:	2b00      	cmp	r3, #0
 8010188:	d001      	beq.n	801018e <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 801018a:	f001 fa37 	bl	80115fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 801018e:	4b6a      	ldr	r3, [pc, #424]	@ (8010338 <MX_ADC1_Init+0x290>)
 8010190:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8010192:	230c      	movs	r3, #12
 8010194:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010196:	463b      	mov	r3, r7
 8010198:	4619      	mov	r1, r3
 801019a:	4864      	ldr	r0, [pc, #400]	@ (801032c <MX_ADC1_Init+0x284>)
 801019c:	f7f3 fa76 	bl	800368c <HAL_ADC_ConfigChannel>
 80101a0:	4603      	mov	r3, r0
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d001      	beq.n	80101aa <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 80101a6:	f001 fa29 	bl	80115fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80101aa:	4b64      	ldr	r3, [pc, #400]	@ (801033c <MX_ADC1_Init+0x294>)
 80101ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80101ae:	2312      	movs	r3, #18
 80101b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80101b2:	463b      	mov	r3, r7
 80101b4:	4619      	mov	r1, r3
 80101b6:	485d      	ldr	r0, [pc, #372]	@ (801032c <MX_ADC1_Init+0x284>)
 80101b8:	f7f3 fa68 	bl	800368c <HAL_ADC_ConfigChannel>
 80101bc:	4603      	mov	r3, r0
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d001      	beq.n	80101c6 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 80101c2:	f001 fa1b 	bl	80115fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80101c6:	4b5e      	ldr	r3, [pc, #376]	@ (8010340 <MX_ADC1_Init+0x298>)
 80101c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80101ca:	2318      	movs	r3, #24
 80101cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80101ce:	463b      	mov	r3, r7
 80101d0:	4619      	mov	r1, r3
 80101d2:	4856      	ldr	r0, [pc, #344]	@ (801032c <MX_ADC1_Init+0x284>)
 80101d4:	f7f3 fa5a 	bl	800368c <HAL_ADC_ConfigChannel>
 80101d8:	4603      	mov	r3, r0
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d001      	beq.n	80101e2 <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 80101de:	f001 fa0d 	bl	80115fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80101e2:	4b58      	ldr	r3, [pc, #352]	@ (8010344 <MX_ADC1_Init+0x29c>)
 80101e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80101e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80101ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80101ec:	463b      	mov	r3, r7
 80101ee:	4619      	mov	r1, r3
 80101f0:	484e      	ldr	r0, [pc, #312]	@ (801032c <MX_ADC1_Init+0x284>)
 80101f2:	f7f3 fa4b 	bl	800368c <HAL_ADC_ConfigChannel>
 80101f6:	4603      	mov	r3, r0
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d001      	beq.n	8010200 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 80101fc:	f001 f9fe 	bl	80115fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8010200:	4b51      	ldr	r3, [pc, #324]	@ (8010348 <MX_ADC1_Init+0x2a0>)
 8010202:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8010204:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8010208:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801020a:	463b      	mov	r3, r7
 801020c:	4619      	mov	r1, r3
 801020e:	4847      	ldr	r0, [pc, #284]	@ (801032c <MX_ADC1_Init+0x284>)
 8010210:	f7f3 fa3c 	bl	800368c <HAL_ADC_ConfigChannel>
 8010214:	4603      	mov	r3, r0
 8010216:	2b00      	cmp	r3, #0
 8010218:	d001      	beq.n	801021e <MX_ADC1_Init+0x176>
  {
    Error_Handler();
 801021a:	f001 f9ef 	bl	80115fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 801021e:	4b4b      	ldr	r3, [pc, #300]	@ (801034c <MX_ADC1_Init+0x2a4>)
 8010220:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8010222:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8010226:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010228:	463b      	mov	r3, r7
 801022a:	4619      	mov	r1, r3
 801022c:	483f      	ldr	r0, [pc, #252]	@ (801032c <MX_ADC1_Init+0x284>)
 801022e:	f7f3 fa2d 	bl	800368c <HAL_ADC_ConfigChannel>
 8010232:	4603      	mov	r3, r0
 8010234:	2b00      	cmp	r3, #0
 8010236:	d001      	beq.n	801023c <MX_ADC1_Init+0x194>
  {
    Error_Handler();
 8010238:	f001 f9e0 	bl	80115fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 801023c:	4b44      	ldr	r3, [pc, #272]	@ (8010350 <MX_ADC1_Init+0x2a8>)
 801023e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8010240:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8010244:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010246:	463b      	mov	r3, r7
 8010248:	4619      	mov	r1, r3
 801024a:	4838      	ldr	r0, [pc, #224]	@ (801032c <MX_ADC1_Init+0x284>)
 801024c:	f7f3 fa1e 	bl	800368c <HAL_ADC_ConfigChannel>
 8010250:	4603      	mov	r3, r0
 8010252:	2b00      	cmp	r3, #0
 8010254:	d001      	beq.n	801025a <MX_ADC1_Init+0x1b2>
  {
    Error_Handler();
 8010256:	f001 f9d1 	bl	80115fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 801025a:	4b3e      	ldr	r3, [pc, #248]	@ (8010354 <MX_ADC1_Init+0x2ac>)
 801025c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 801025e:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8010262:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010264:	463b      	mov	r3, r7
 8010266:	4619      	mov	r1, r3
 8010268:	4830      	ldr	r0, [pc, #192]	@ (801032c <MX_ADC1_Init+0x284>)
 801026a:	f7f3 fa0f 	bl	800368c <HAL_ADC_ConfigChannel>
 801026e:	4603      	mov	r3, r0
 8010270:	2b00      	cmp	r3, #0
 8010272:	d001      	beq.n	8010278 <MX_ADC1_Init+0x1d0>
  {
    Error_Handler();
 8010274:	f001 f9c2 	bl	80115fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8010278:	4b37      	ldr	r3, [pc, #220]	@ (8010358 <MX_ADC1_Init+0x2b0>)
 801027a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 801027c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010280:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010282:	463b      	mov	r3, r7
 8010284:	4619      	mov	r1, r3
 8010286:	4829      	ldr	r0, [pc, #164]	@ (801032c <MX_ADC1_Init+0x284>)
 8010288:	f7f3 fa00 	bl	800368c <HAL_ADC_ConfigChannel>
 801028c:	4603      	mov	r3, r0
 801028e:	2b00      	cmp	r3, #0
 8010290:	d001      	beq.n	8010296 <MX_ADC1_Init+0x1ee>
  {
    Error_Handler();
 8010292:	f001 f9b3 	bl	80115fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8010296:	4b31      	ldr	r3, [pc, #196]	@ (801035c <MX_ADC1_Init+0x2b4>)
 8010298:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 801029a:	f240 2306 	movw	r3, #518	@ 0x206
 801029e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80102a0:	463b      	mov	r3, r7
 80102a2:	4619      	mov	r1, r3
 80102a4:	4821      	ldr	r0, [pc, #132]	@ (801032c <MX_ADC1_Init+0x284>)
 80102a6:	f7f3 f9f1 	bl	800368c <HAL_ADC_ConfigChannel>
 80102aa:	4603      	mov	r3, r0
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d001      	beq.n	80102b4 <MX_ADC1_Init+0x20c>
  {
    Error_Handler();
 80102b0:	f001 f9a4 	bl	80115fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80102b4:	4b2a      	ldr	r3, [pc, #168]	@ (8010360 <MX_ADC1_Init+0x2b8>)
 80102b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80102b8:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 80102bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80102be:	463b      	mov	r3, r7
 80102c0:	4619      	mov	r1, r3
 80102c2:	481a      	ldr	r0, [pc, #104]	@ (801032c <MX_ADC1_Init+0x284>)
 80102c4:	f7f3 f9e2 	bl	800368c <HAL_ADC_ConfigChannel>
 80102c8:	4603      	mov	r3, r0
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d001      	beq.n	80102d2 <MX_ADC1_Init+0x22a>
  {
    Error_Handler();
 80102ce:	f001 f995 	bl	80115fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80102d2:	4b24      	ldr	r3, [pc, #144]	@ (8010364 <MX_ADC1_Init+0x2bc>)
 80102d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 80102d6:	f240 2312 	movw	r3, #530	@ 0x212
 80102da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80102dc:	463b      	mov	r3, r7
 80102de:	4619      	mov	r1, r3
 80102e0:	4812      	ldr	r0, [pc, #72]	@ (801032c <MX_ADC1_Init+0x284>)
 80102e2:	f7f3 f9d3 	bl	800368c <HAL_ADC_ConfigChannel>
 80102e6:	4603      	mov	r3, r0
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d001      	beq.n	80102f0 <MX_ADC1_Init+0x248>
  {
    Error_Handler();
 80102ec:	f001 f986 	bl	80115fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80102f0:	4b1d      	ldr	r3, [pc, #116]	@ (8010368 <MX_ADC1_Init+0x2c0>)
 80102f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 80102f4:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80102f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80102fa:	463b      	mov	r3, r7
 80102fc:	4619      	mov	r1, r3
 80102fe:	480b      	ldr	r0, [pc, #44]	@ (801032c <MX_ADC1_Init+0x284>)
 8010300:	f7f3 f9c4 	bl	800368c <HAL_ADC_ConfigChannel>
 8010304:	4603      	mov	r3, r0
 8010306:	2b00      	cmp	r3, #0
 8010308:	d001      	beq.n	801030e <MX_ADC1_Init+0x266>
  {
    Error_Handler();
 801030a:	f001 f977 	bl	80115fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED)
 801030e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8010312:	2100      	movs	r1, #0
 8010314:	4805      	ldr	r0, [pc, #20]	@ (801032c <MX_ADC1_Init+0x284>)
 8010316:	f7f3 ffb5 	bl	8004284 <HAL_ADCEx_Calibration_Start>
 801031a:	4603      	mov	r3, r0
 801031c:	2b00      	cmp	r3, #0
 801031e:	d001      	beq.n	8010324 <MX_ADC1_Init+0x27c>
			!= HAL_OK) {
		Error_Handler();
 8010320:	f001 f96c 	bl	80115fc <Error_Handler>
	}
  /* USER CODE END ADC1_Init 2 */

}
 8010324:	bf00      	nop
 8010326:	3728      	adds	r7, #40	@ 0x28
 8010328:	46bd      	mov	sp, r7
 801032a:	bd80      	pop	{r7, pc}
 801032c:	24000aec 	.word	0x24000aec
 8010330:	40022000 	.word	0x40022000
 8010334:	14f00020 	.word	0x14f00020
 8010338:	25b00200 	.word	0x25b00200
 801033c:	21800100 	.word	0x21800100
 8010340:	10c00010 	.word	0x10c00010
 8010344:	1d500080 	.word	0x1d500080
 8010348:	0c900008 	.word	0x0c900008
 801034c:	4fb80000 	.word	0x4fb80000
 8010350:	4b840000 	.word	0x4b840000
 8010354:	3ef08000 	.word	0x3ef08000
 8010358:	3ac04000 	.word	0x3ac04000
 801035c:	47520000 	.word	0x47520000
 8010360:	43210000 	.word	0x43210000
 8010364:	2e300800 	.word	0x2e300800
 8010368:	2a000400 	.word	0x2a000400

0801036c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b088      	sub	sp, #32
 8010370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8010372:	1d3b      	adds	r3, r7, #4
 8010374:	2200      	movs	r2, #0
 8010376:	601a      	str	r2, [r3, #0]
 8010378:	605a      	str	r2, [r3, #4]
 801037a:	609a      	str	r2, [r3, #8]
 801037c:	60da      	str	r2, [r3, #12]
 801037e:	611a      	str	r2, [r3, #16]
 8010380:	615a      	str	r2, [r3, #20]
 8010382:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8010384:	4b2b      	ldr	r3, [pc, #172]	@ (8010434 <MX_ADC2_Init+0xc8>)
 8010386:	4a2c      	ldr	r2, [pc, #176]	@ (8010438 <MX_ADC2_Init+0xcc>)
 8010388:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 801038a:	4b2a      	ldr	r3, [pc, #168]	@ (8010434 <MX_ADC2_Init+0xc8>)
 801038c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8010390:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8010392:	4b28      	ldr	r3, [pc, #160]	@ (8010434 <MX_ADC2_Init+0xc8>)
 8010394:	2200      	movs	r2, #0
 8010396:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8010398:	4b26      	ldr	r3, [pc, #152]	@ (8010434 <MX_ADC2_Init+0xc8>)
 801039a:	2200      	movs	r2, #0
 801039c:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801039e:	4b25      	ldr	r3, [pc, #148]	@ (8010434 <MX_ADC2_Init+0xc8>)
 80103a0:	2204      	movs	r2, #4
 80103a2:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80103a4:	4b23      	ldr	r3, [pc, #140]	@ (8010434 <MX_ADC2_Init+0xc8>)
 80103a6:	2200      	movs	r2, #0
 80103a8:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80103aa:	4b22      	ldr	r3, [pc, #136]	@ (8010434 <MX_ADC2_Init+0xc8>)
 80103ac:	2200      	movs	r2, #0
 80103ae:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80103b0:	4b20      	ldr	r3, [pc, #128]	@ (8010434 <MX_ADC2_Init+0xc8>)
 80103b2:	2201      	movs	r2, #1
 80103b4:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80103b6:	4b1f      	ldr	r3, [pc, #124]	@ (8010434 <MX_ADC2_Init+0xc8>)
 80103b8:	2200      	movs	r2, #0
 80103ba:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80103bc:	4b1d      	ldr	r3, [pc, #116]	@ (8010434 <MX_ADC2_Init+0xc8>)
 80103be:	2200      	movs	r2, #0
 80103c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80103c2:	4b1c      	ldr	r3, [pc, #112]	@ (8010434 <MX_ADC2_Init+0xc8>)
 80103c4:	2200      	movs	r2, #0
 80103c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80103c8:	4b1a      	ldr	r3, [pc, #104]	@ (8010434 <MX_ADC2_Init+0xc8>)
 80103ca:	2200      	movs	r2, #0
 80103cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80103ce:	4b19      	ldr	r3, [pc, #100]	@ (8010434 <MX_ADC2_Init+0xc8>)
 80103d0:	2200      	movs	r2, #0
 80103d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80103d4:	4b17      	ldr	r3, [pc, #92]	@ (8010434 <MX_ADC2_Init+0xc8>)
 80103d6:	2200      	movs	r2, #0
 80103d8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80103da:	4b16      	ldr	r3, [pc, #88]	@ (8010434 <MX_ADC2_Init+0xc8>)
 80103dc:	2200      	movs	r2, #0
 80103de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Oversampling.Ratio = 1;
 80103e2:	4b14      	ldr	r3, [pc, #80]	@ (8010434 <MX_ADC2_Init+0xc8>)
 80103e4:	2201      	movs	r2, #1
 80103e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80103e8:	4812      	ldr	r0, [pc, #72]	@ (8010434 <MX_ADC2_Init+0xc8>)
 80103ea:	f7f2 fdad 	bl	8002f48 <HAL_ADC_Init>
 80103ee:	4603      	mov	r3, r0
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d001      	beq.n	80103f8 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 80103f4:	f001 f902 	bl	80115fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 80103f8:	4b10      	ldr	r3, [pc, #64]	@ (801043c <MX_ADC2_Init+0xd0>)
 80103fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80103fc:	2306      	movs	r3, #6
 80103fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8010400:	2307      	movs	r3, #7
 8010402:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8010404:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8010408:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 801040a:	2304      	movs	r3, #4
 801040c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 801040e:	2300      	movs	r3, #0
 8010410:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8010412:	2300      	movs	r3, #0
 8010414:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8010416:	1d3b      	adds	r3, r7, #4
 8010418:	4619      	mov	r1, r3
 801041a:	4806      	ldr	r0, [pc, #24]	@ (8010434 <MX_ADC2_Init+0xc8>)
 801041c:	f7f3 f936 	bl	800368c <HAL_ADC_ConfigChannel>
 8010420:	4603      	mov	r3, r0
 8010422:	2b00      	cmp	r3, #0
 8010424:	d001      	beq.n	801042a <MX_ADC2_Init+0xbe>
  {
    Error_Handler();
 8010426:	f001 f8e9 	bl	80115fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 801042a:	bf00      	nop
 801042c:	3720      	adds	r7, #32
 801042e:	46bd      	mov	sp, r7
 8010430:	bd80      	pop	{r7, pc}
 8010432:	bf00      	nop
 8010434:	24000b50 	.word	0x24000b50
 8010438:	40022100 	.word	0x40022100
 801043c:	c7520000 	.word	0xc7520000

08010440 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b088      	sub	sp, #32
 8010444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8010446:	1d3b      	adds	r3, r7, #4
 8010448:	2200      	movs	r2, #0
 801044a:	601a      	str	r2, [r3, #0]
 801044c:	605a      	str	r2, [r3, #4]
 801044e:	609a      	str	r2, [r3, #8]
 8010450:	60da      	str	r2, [r3, #12]
 8010452:	611a      	str	r2, [r3, #16]
 8010454:	615a      	str	r2, [r3, #20]
 8010456:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8010458:	4b33      	ldr	r3, [pc, #204]	@ (8010528 <MX_ADC3_Init+0xe8>)
 801045a:	4a34      	ldr	r2, [pc, #208]	@ (801052c <MX_ADC3_Init+0xec>)
 801045c:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 801045e:	4b32      	ldr	r3, [pc, #200]	@ (8010528 <MX_ADC3_Init+0xe8>)
 8010460:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8010464:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_8B;
 8010466:	4b30      	ldr	r3, [pc, #192]	@ (8010528 <MX_ADC3_Init+0xe8>)
 8010468:	2210      	movs	r2, #16
 801046a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 801046c:	4b2e      	ldr	r3, [pc, #184]	@ (8010528 <MX_ADC3_Init+0xe8>)
 801046e:	2201      	movs	r2, #1
 8010470:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8010472:	4b2d      	ldr	r3, [pc, #180]	@ (8010528 <MX_ADC3_Init+0xe8>)
 8010474:	2204      	movs	r2, #4
 8010476:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8010478:	4b2b      	ldr	r3, [pc, #172]	@ (8010528 <MX_ADC3_Init+0xe8>)
 801047a:	2200      	movs	r2, #0
 801047c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 801047e:	4b2a      	ldr	r3, [pc, #168]	@ (8010528 <MX_ADC3_Init+0xe8>)
 8010480:	2200      	movs	r2, #0
 8010482:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 2;
 8010484:	4b28      	ldr	r3, [pc, #160]	@ (8010528 <MX_ADC3_Init+0xe8>)
 8010486:	2202      	movs	r2, #2
 8010488:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = ENABLE;
 801048a:	4b27      	ldr	r3, [pc, #156]	@ (8010528 <MX_ADC3_Init+0xe8>)
 801048c:	2201      	movs	r2, #1
 801048e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.NbrOfDiscConversion = 1;
 8010490:	4b25      	ldr	r3, [pc, #148]	@ (8010528 <MX_ADC3_Init+0xe8>)
 8010492:	2201      	movs	r2, #1
 8010494:	621a      	str	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8010496:	4b24      	ldr	r3, [pc, #144]	@ (8010528 <MX_ADC3_Init+0xe8>)
 8010498:	2200      	movs	r2, #0
 801049a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 801049c:	4b22      	ldr	r3, [pc, #136]	@ (8010528 <MX_ADC3_Init+0xe8>)
 801049e:	2200      	movs	r2, #0
 80104a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80104a2:	4b21      	ldr	r3, [pc, #132]	@ (8010528 <MX_ADC3_Init+0xe8>)
 80104a4:	2200      	movs	r2, #0
 80104a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80104a8:	4b1f      	ldr	r3, [pc, #124]	@ (8010528 <MX_ADC3_Init+0xe8>)
 80104aa:	2200      	movs	r2, #0
 80104ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80104ae:	4b1e      	ldr	r3, [pc, #120]	@ (8010528 <MX_ADC3_Init+0xe8>)
 80104b0:	2200      	movs	r2, #0
 80104b2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80104b4:	4b1c      	ldr	r3, [pc, #112]	@ (8010528 <MX_ADC3_Init+0xe8>)
 80104b6:	2200      	movs	r2, #0
 80104b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 80104bc:	4b1a      	ldr	r3, [pc, #104]	@ (8010528 <MX_ADC3_Init+0xe8>)
 80104be:	2201      	movs	r2, #1
 80104c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80104c2:	4819      	ldr	r0, [pc, #100]	@ (8010528 <MX_ADC3_Init+0xe8>)
 80104c4:	f7f2 fd40 	bl	8002f48 <HAL_ADC_Init>
 80104c8:	4603      	mov	r3, r0
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d001      	beq.n	80104d2 <MX_ADC3_Init+0x92>
  {
    Error_Handler();
 80104ce:	f001 f895 	bl	80115fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80104d2:	2301      	movs	r3, #1
 80104d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80104d6:	2306      	movs	r3, #6
 80104d8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 80104da:	2302      	movs	r3, #2
 80104dc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80104de:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80104e2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80104e4:	2304      	movs	r3, #4
 80104e6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80104e8:	2300      	movs	r3, #0
 80104ea:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80104ec:	2300      	movs	r3, #0
 80104ee:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80104f0:	1d3b      	adds	r3, r7, #4
 80104f2:	4619      	mov	r1, r3
 80104f4:	480c      	ldr	r0, [pc, #48]	@ (8010528 <MX_ADC3_Init+0xe8>)
 80104f6:	f7f3 f8c9 	bl	800368c <HAL_ADC_ConfigChannel>
 80104fa:	4603      	mov	r3, r0
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d001      	beq.n	8010504 <MX_ADC3_Init+0xc4>
  {
    Error_Handler();
 8010500:	f001 f87c 	bl	80115fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8010504:	4b0a      	ldr	r3, [pc, #40]	@ (8010530 <MX_ADC3_Init+0xf0>)
 8010506:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8010508:	230c      	movs	r3, #12
 801050a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 801050c:	1d3b      	adds	r3, r7, #4
 801050e:	4619      	mov	r1, r3
 8010510:	4805      	ldr	r0, [pc, #20]	@ (8010528 <MX_ADC3_Init+0xe8>)
 8010512:	f7f3 f8bb 	bl	800368c <HAL_ADC_ConfigChannel>
 8010516:	4603      	mov	r3, r0
 8010518:	2b00      	cmp	r3, #0
 801051a:	d001      	beq.n	8010520 <MX_ADC3_Init+0xe0>
  {
    Error_Handler();
 801051c:	f001 f86e 	bl	80115fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8010520:	bf00      	nop
 8010522:	3720      	adds	r7, #32
 8010524:	46bd      	mov	sp, r7
 8010526:	bd80      	pop	{r7, pc}
 8010528:	24000bb4 	.word	0x24000bb4
 801052c:	58026000 	.word	0x58026000
 8010530:	04300002 	.word	0x04300002

08010534 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b08e      	sub	sp, #56	@ 0x38
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801053c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010540:	2200      	movs	r2, #0
 8010542:	601a      	str	r2, [r3, #0]
 8010544:	605a      	str	r2, [r3, #4]
 8010546:	609a      	str	r2, [r3, #8]
 8010548:	60da      	str	r2, [r3, #12]
 801054a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	4a5e      	ldr	r2, [pc, #376]	@ (80106cc <HAL_ADC_MspInit+0x198>)
 8010552:	4293      	cmp	r3, r2
 8010554:	d169      	bne.n	801062a <HAL_ADC_MspInit+0xf6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8010556:	4b5e      	ldr	r3, [pc, #376]	@ (80106d0 <HAL_ADC_MspInit+0x19c>)
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	3301      	adds	r3, #1
 801055c:	4a5c      	ldr	r2, [pc, #368]	@ (80106d0 <HAL_ADC_MspInit+0x19c>)
 801055e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8010560:	4b5b      	ldr	r3, [pc, #364]	@ (80106d0 <HAL_ADC_MspInit+0x19c>)
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	2b01      	cmp	r3, #1
 8010566:	d10e      	bne.n	8010586 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8010568:	4b5a      	ldr	r3, [pc, #360]	@ (80106d4 <HAL_ADC_MspInit+0x1a0>)
 801056a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801056e:	4a59      	ldr	r2, [pc, #356]	@ (80106d4 <HAL_ADC_MspInit+0x1a0>)
 8010570:	f043 0320 	orr.w	r3, r3, #32
 8010574:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8010578:	4b56      	ldr	r3, [pc, #344]	@ (80106d4 <HAL_ADC_MspInit+0x1a0>)
 801057a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801057e:	f003 0320 	and.w	r3, r3, #32
 8010582:	623b      	str	r3, [r7, #32]
 8010584:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010586:	4b53      	ldr	r3, [pc, #332]	@ (80106d4 <HAL_ADC_MspInit+0x1a0>)
 8010588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801058c:	4a51      	ldr	r2, [pc, #324]	@ (80106d4 <HAL_ADC_MspInit+0x1a0>)
 801058e:	f043 0304 	orr.w	r3, r3, #4
 8010592:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010596:	4b4f      	ldr	r3, [pc, #316]	@ (80106d4 <HAL_ADC_MspInit+0x1a0>)
 8010598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801059c:	f003 0304 	and.w	r3, r3, #4
 80105a0:	61fb      	str	r3, [r7, #28]
 80105a2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80105a4:	4b4b      	ldr	r3, [pc, #300]	@ (80106d4 <HAL_ADC_MspInit+0x1a0>)
 80105a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80105aa:	4a4a      	ldr	r2, [pc, #296]	@ (80106d4 <HAL_ADC_MspInit+0x1a0>)
 80105ac:	f043 0301 	orr.w	r3, r3, #1
 80105b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80105b4:	4b47      	ldr	r3, [pc, #284]	@ (80106d4 <HAL_ADC_MspInit+0x1a0>)
 80105b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80105ba:	f003 0301 	and.w	r3, r3, #1
 80105be:	61bb      	str	r3, [r7, #24]
 80105c0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80105c2:	4b44      	ldr	r3, [pc, #272]	@ (80106d4 <HAL_ADC_MspInit+0x1a0>)
 80105c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80105c8:	4a42      	ldr	r2, [pc, #264]	@ (80106d4 <HAL_ADC_MspInit+0x1a0>)
 80105ca:	f043 0302 	orr.w	r3, r3, #2
 80105ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80105d2:	4b40      	ldr	r3, [pc, #256]	@ (80106d4 <HAL_ADC_MspInit+0x1a0>)
 80105d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80105d8:	f003 0302 	and.w	r3, r3, #2
 80105dc:	617b      	str	r3, [r7, #20]
 80105de:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80105e0:	2333      	movs	r3, #51	@ 0x33
 80105e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80105e4:	2303      	movs	r3, #3
 80105e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80105e8:	2300      	movs	r3, #0
 80105ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80105ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80105f0:	4619      	mov	r1, r3
 80105f2:	4839      	ldr	r0, [pc, #228]	@ (80106d8 <HAL_ADC_MspInit+0x1a4>)
 80105f4:	f7f4 f910 	bl	8004818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80105f8:	23ff      	movs	r3, #255	@ 0xff
 80105fa:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80105fc:	2303      	movs	r3, #3
 80105fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010600:	2300      	movs	r3, #0
 8010602:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010604:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010608:	4619      	mov	r1, r3
 801060a:	4834      	ldr	r0, [pc, #208]	@ (80106dc <HAL_ADC_MspInit+0x1a8>)
 801060c:	f7f4 f904 	bl	8004818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8010610:	2303      	movs	r3, #3
 8010612:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8010614:	2303      	movs	r3, #3
 8010616:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010618:	2300      	movs	r3, #0
 801061a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801061c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010620:	4619      	mov	r1, r3
 8010622:	482f      	ldr	r0, [pc, #188]	@ (80106e0 <HAL_ADC_MspInit+0x1ac>)
 8010624:	f7f4 f8f8 	bl	8004818 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8010628:	e04c      	b.n	80106c4 <HAL_ADC_MspInit+0x190>
  else if(adcHandle->Instance==ADC2)
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	4a2d      	ldr	r2, [pc, #180]	@ (80106e4 <HAL_ADC_MspInit+0x1b0>)
 8010630:	4293      	cmp	r3, r2
 8010632:	d118      	bne.n	8010666 <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8010634:	4b26      	ldr	r3, [pc, #152]	@ (80106d0 <HAL_ADC_MspInit+0x19c>)
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	3301      	adds	r3, #1
 801063a:	4a25      	ldr	r2, [pc, #148]	@ (80106d0 <HAL_ADC_MspInit+0x19c>)
 801063c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 801063e:	4b24      	ldr	r3, [pc, #144]	@ (80106d0 <HAL_ADC_MspInit+0x19c>)
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	2b01      	cmp	r3, #1
 8010644:	d13e      	bne.n	80106c4 <HAL_ADC_MspInit+0x190>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8010646:	4b23      	ldr	r3, [pc, #140]	@ (80106d4 <HAL_ADC_MspInit+0x1a0>)
 8010648:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801064c:	4a21      	ldr	r2, [pc, #132]	@ (80106d4 <HAL_ADC_MspInit+0x1a0>)
 801064e:	f043 0320 	orr.w	r3, r3, #32
 8010652:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8010656:	4b1f      	ldr	r3, [pc, #124]	@ (80106d4 <HAL_ADC_MspInit+0x1a0>)
 8010658:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801065c:	f003 0320 	and.w	r3, r3, #32
 8010660:	613b      	str	r3, [r7, #16]
 8010662:	693b      	ldr	r3, [r7, #16]
}
 8010664:	e02e      	b.n	80106c4 <HAL_ADC_MspInit+0x190>
  else if(adcHandle->Instance==ADC3)
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	4a1f      	ldr	r2, [pc, #124]	@ (80106e8 <HAL_ADC_MspInit+0x1b4>)
 801066c:	4293      	cmp	r3, r2
 801066e:	d129      	bne.n	80106c4 <HAL_ADC_MspInit+0x190>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8010670:	4b18      	ldr	r3, [pc, #96]	@ (80106d4 <HAL_ADC_MspInit+0x1a0>)
 8010672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010676:	4a17      	ldr	r2, [pc, #92]	@ (80106d4 <HAL_ADC_MspInit+0x1a0>)
 8010678:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801067c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010680:	4b14      	ldr	r3, [pc, #80]	@ (80106d4 <HAL_ADC_MspInit+0x1a0>)
 8010682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010686:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801068a:	60fb      	str	r3, [r7, #12]
 801068c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801068e:	4b11      	ldr	r3, [pc, #68]	@ (80106d4 <HAL_ADC_MspInit+0x1a0>)
 8010690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010694:	4a0f      	ldr	r2, [pc, #60]	@ (80106d4 <HAL_ADC_MspInit+0x1a0>)
 8010696:	f043 0304 	orr.w	r3, r3, #4
 801069a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801069e:	4b0d      	ldr	r3, [pc, #52]	@ (80106d4 <HAL_ADC_MspInit+0x1a0>)
 80106a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80106a4:	f003 0304 	and.w	r3, r3, #4
 80106a8:	60bb      	str	r3, [r7, #8]
 80106aa:	68bb      	ldr	r3, [r7, #8]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80106ac:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 80106b0:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80106b4:	f7f2 f9cc 	bl	8002a50 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80106b8:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 80106bc:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 80106c0:	f7f2 f9c6 	bl	8002a50 <HAL_SYSCFG_AnalogSwitchConfig>
}
 80106c4:	bf00      	nop
 80106c6:	3738      	adds	r7, #56	@ 0x38
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}
 80106cc:	40022000 	.word	0x40022000
 80106d0:	24000c18 	.word	0x24000c18
 80106d4:	58024400 	.word	0x58024400
 80106d8:	58020800 	.word	0x58020800
 80106dc:	58020000 	.word	0x58020000
 80106e0:	58020400 	.word	0x58020400
 80106e4:	40022100 	.word	0x40022100
 80106e8:	58026000 	.word	0x58026000

080106ec <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b082      	sub	sp, #8
 80106f0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80106f2:	2300      	movs	r3, #0
 80106f4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80106f6:	f000 f879 	bl	80107ec <BSP_SD_IsDetected>
 80106fa:	4603      	mov	r3, r0
 80106fc:	2b01      	cmp	r3, #1
 80106fe:	d001      	beq.n	8010704 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8010700:	2302      	movs	r3, #2
 8010702:	e012      	b.n	801072a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8010704:	480b      	ldr	r0, [pc, #44]	@ (8010734 <BSP_SD_Init+0x48>)
 8010706:	f7f9 fc99 	bl	800a03c <HAL_SD_Init>
 801070a:	4603      	mov	r3, r0
 801070c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801070e:	79fb      	ldrb	r3, [r7, #7]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d109      	bne.n	8010728 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8010714:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8010718:	4806      	ldr	r0, [pc, #24]	@ (8010734 <BSP_SD_Init+0x48>)
 801071a:	f7fa fb55 	bl	800adc8 <HAL_SD_ConfigWideBusOperation>
 801071e:	4603      	mov	r3, r0
 8010720:	2b00      	cmp	r3, #0
 8010722:	d001      	beq.n	8010728 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010724:	2301      	movs	r3, #1
 8010726:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010728:	79fb      	ldrb	r3, [r7, #7]
}
 801072a:	4618      	mov	r0, r3
 801072c:	3708      	adds	r7, #8
 801072e:	46bd      	mov	sp, r7
 8010730:	bd80      	pop	{r7, pc}
 8010732:	bf00      	nop
 8010734:	24000e08 	.word	0x24000e08

08010738 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8010738:	b580      	push	{r7, lr}
 801073a:	b088      	sub	sp, #32
 801073c:	af02      	add	r7, sp, #8
 801073e:	60f8      	str	r0, [r7, #12]
 8010740:	60b9      	str	r1, [r7, #8]
 8010742:	607a      	str	r2, [r7, #4]
 8010744:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8010746:	2300      	movs	r3, #0
 8010748:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 801074a:	683b      	ldr	r3, [r7, #0]
 801074c:	9300      	str	r3, [sp, #0]
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	68ba      	ldr	r2, [r7, #8]
 8010752:	68f9      	ldr	r1, [r7, #12]
 8010754:	4806      	ldr	r0, [pc, #24]	@ (8010770 <BSP_SD_ReadBlocks+0x38>)
 8010756:	f7f9 fd91 	bl	800a27c <HAL_SD_ReadBlocks>
 801075a:	4603      	mov	r3, r0
 801075c:	2b00      	cmp	r3, #0
 801075e:	d001      	beq.n	8010764 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8010760:	2301      	movs	r3, #1
 8010762:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010764:	7dfb      	ldrb	r3, [r7, #23]
}
 8010766:	4618      	mov	r0, r3
 8010768:	3718      	adds	r7, #24
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}
 801076e:	bf00      	nop
 8010770:	24000e08 	.word	0x24000e08

08010774 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b088      	sub	sp, #32
 8010778:	af02      	add	r7, sp, #8
 801077a:	60f8      	str	r0, [r7, #12]
 801077c:	60b9      	str	r1, [r7, #8]
 801077e:	607a      	str	r2, [r7, #4]
 8010780:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8010782:	2300      	movs	r3, #0
 8010784:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8010786:	683b      	ldr	r3, [r7, #0]
 8010788:	9300      	str	r3, [sp, #0]
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	68ba      	ldr	r2, [r7, #8]
 801078e:	68f9      	ldr	r1, [r7, #12]
 8010790:	4806      	ldr	r0, [pc, #24]	@ (80107ac <BSP_SD_WriteBlocks+0x38>)
 8010792:	f7f9 fefd 	bl	800a590 <HAL_SD_WriteBlocks>
 8010796:	4603      	mov	r3, r0
 8010798:	2b00      	cmp	r3, #0
 801079a:	d001      	beq.n	80107a0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 801079c:	2301      	movs	r3, #1
 801079e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80107a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80107a2:	4618      	mov	r0, r3
 80107a4:	3718      	adds	r7, #24
 80107a6:	46bd      	mov	sp, r7
 80107a8:	bd80      	pop	{r7, pc}
 80107aa:	bf00      	nop
 80107ac:	24000e08 	.word	0x24000e08

080107b0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80107b4:	4805      	ldr	r0, [pc, #20]	@ (80107cc <BSP_SD_GetCardState+0x1c>)
 80107b6:	f7fa fc19 	bl	800afec <HAL_SD_GetCardState>
 80107ba:	4603      	mov	r3, r0
 80107bc:	2b04      	cmp	r3, #4
 80107be:	bf14      	ite	ne
 80107c0:	2301      	movne	r3, #1
 80107c2:	2300      	moveq	r3, #0
 80107c4:	b2db      	uxtb	r3, r3
}
 80107c6:	4618      	mov	r0, r3
 80107c8:	bd80      	pop	{r7, pc}
 80107ca:	bf00      	nop
 80107cc:	24000e08 	.word	0x24000e08

080107d0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b082      	sub	sp, #8
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80107d8:	6879      	ldr	r1, [r7, #4]
 80107da:	4803      	ldr	r0, [pc, #12]	@ (80107e8 <BSP_SD_GetCardInfo+0x18>)
 80107dc:	f7fa fac8 	bl	800ad70 <HAL_SD_GetCardInfo>
}
 80107e0:	bf00      	nop
 80107e2:	3708      	adds	r7, #8
 80107e4:	46bd      	mov	sp, r7
 80107e6:	bd80      	pop	{r7, pc}
 80107e8:	24000e08 	.word	0x24000e08

080107ec <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80107ec:	b480      	push	{r7}
 80107ee:	b083      	sub	sp, #12
 80107f0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80107f2:	2301      	movs	r3, #1
 80107f4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 80107f6:	79fb      	ldrb	r3, [r7, #7]
 80107f8:	b2db      	uxtb	r3, r3
}
 80107fa:	4618      	mov	r0, r3
 80107fc:	370c      	adds	r7, #12
 80107fe:	46bd      	mov	sp, r7
 8010800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010804:	4770      	bx	lr
	...

08010808 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010808:	b580      	push	{r7, lr}
 801080a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801080c:	4904      	ldr	r1, [pc, #16]	@ (8010820 <MX_FATFS_Init+0x18>)
 801080e:	4805      	ldr	r0, [pc, #20]	@ (8010824 <MX_FATFS_Init+0x1c>)
 8010810:	f7ff fc3a 	bl	8010088 <FATFS_LinkDriver>
 8010814:	4603      	mov	r3, r0
 8010816:	461a      	mov	r2, r3
 8010818:	4b03      	ldr	r3, [pc, #12]	@ (8010828 <MX_FATFS_Init+0x20>)
 801081a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801081c:	bf00      	nop
 801081e:	bd80      	pop	{r7, pc}
 8010820:	24000c20 	.word	0x24000c20
 8010824:	0801de94 	.word	0x0801de94
 8010828:	24000c1c 	.word	0x24000c1c

0801082c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b08c      	sub	sp, #48	@ 0x30
 8010830:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010832:	f107 031c 	add.w	r3, r7, #28
 8010836:	2200      	movs	r2, #0
 8010838:	601a      	str	r2, [r3, #0]
 801083a:	605a      	str	r2, [r3, #4]
 801083c:	609a      	str	r2, [r3, #8]
 801083e:	60da      	str	r2, [r3, #12]
 8010840:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8010842:	4b77      	ldr	r3, [pc, #476]	@ (8010a20 <MX_GPIO_Init+0x1f4>)
 8010844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010848:	4a75      	ldr	r2, [pc, #468]	@ (8010a20 <MX_GPIO_Init+0x1f4>)
 801084a:	f043 0310 	orr.w	r3, r3, #16
 801084e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010852:	4b73      	ldr	r3, [pc, #460]	@ (8010a20 <MX_GPIO_Init+0x1f4>)
 8010854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010858:	f003 0310 	and.w	r3, r3, #16
 801085c:	61bb      	str	r3, [r7, #24]
 801085e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8010860:	4b6f      	ldr	r3, [pc, #444]	@ (8010a20 <MX_GPIO_Init+0x1f4>)
 8010862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010866:	4a6e      	ldr	r2, [pc, #440]	@ (8010a20 <MX_GPIO_Init+0x1f4>)
 8010868:	f043 0304 	orr.w	r3, r3, #4
 801086c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010870:	4b6b      	ldr	r3, [pc, #428]	@ (8010a20 <MX_GPIO_Init+0x1f4>)
 8010872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010876:	f003 0304 	and.w	r3, r3, #4
 801087a:	617b      	str	r3, [r7, #20]
 801087c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801087e:	4b68      	ldr	r3, [pc, #416]	@ (8010a20 <MX_GPIO_Init+0x1f4>)
 8010880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010884:	4a66      	ldr	r2, [pc, #408]	@ (8010a20 <MX_GPIO_Init+0x1f4>)
 8010886:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801088a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801088e:	4b64      	ldr	r3, [pc, #400]	@ (8010a20 <MX_GPIO_Init+0x1f4>)
 8010890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010894:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010898:	613b      	str	r3, [r7, #16]
 801089a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801089c:	4b60      	ldr	r3, [pc, #384]	@ (8010a20 <MX_GPIO_Init+0x1f4>)
 801089e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80108a2:	4a5f      	ldr	r2, [pc, #380]	@ (8010a20 <MX_GPIO_Init+0x1f4>)
 80108a4:	f043 0301 	orr.w	r3, r3, #1
 80108a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80108ac:	4b5c      	ldr	r3, [pc, #368]	@ (8010a20 <MX_GPIO_Init+0x1f4>)
 80108ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80108b2:	f003 0301 	and.w	r3, r3, #1
 80108b6:	60fb      	str	r3, [r7, #12]
 80108b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80108ba:	4b59      	ldr	r3, [pc, #356]	@ (8010a20 <MX_GPIO_Init+0x1f4>)
 80108bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80108c0:	4a57      	ldr	r2, [pc, #348]	@ (8010a20 <MX_GPIO_Init+0x1f4>)
 80108c2:	f043 0302 	orr.w	r3, r3, #2
 80108c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80108ca:	4b55      	ldr	r3, [pc, #340]	@ (8010a20 <MX_GPIO_Init+0x1f4>)
 80108cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80108d0:	f003 0302 	and.w	r3, r3, #2
 80108d4:	60bb      	str	r3, [r7, #8]
 80108d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80108d8:	4b51      	ldr	r3, [pc, #324]	@ (8010a20 <MX_GPIO_Init+0x1f4>)
 80108da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80108de:	4a50      	ldr	r2, [pc, #320]	@ (8010a20 <MX_GPIO_Init+0x1f4>)
 80108e0:	f043 0308 	orr.w	r3, r3, #8
 80108e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80108e8:	4b4d      	ldr	r3, [pc, #308]	@ (8010a20 <MX_GPIO_Init+0x1f4>)
 80108ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80108ee:	f003 0308 	and.w	r3, r3, #8
 80108f2:	607b      	str	r3, [r7, #4]
 80108f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MARK_R_Pin|E3_Pin|MARK_L_Pin, GPIO_PIN_RESET);
 80108f6:	2200      	movs	r2, #0
 80108f8:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80108fc:	4849      	ldr	r0, [pc, #292]	@ (8010a24 <MX_GPIO_Init+0x1f8>)
 80108fe:	f7f4 f953 	bl	8004ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_SET);
 8010902:	2201      	movs	r2, #1
 8010904:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 8010908:	4846      	ldr	r0, [pc, #280]	@ (8010a24 <MX_GPIO_Init+0x1f8>)
 801090a:	f7f4 f94d 	bl	8004ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 801090e:	2200      	movs	r2, #0
 8010910:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8010914:	4844      	ldr	r0, [pc, #272]	@ (8010a28 <MX_GPIO_Init+0x1fc>)
 8010916:	f7f4 f947 	bl	8004ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Motor_L_Driveoff_Pin|Motor_L_Dir_Pin|Motor_L_Brake_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 801091a:	2200      	movs	r2, #0
 801091c:	f24e 0140 	movw	r1, #57408	@ 0xe040
 8010920:	4842      	ldr	r0, [pc, #264]	@ (8010a2c <MX_GPIO_Init+0x200>)
 8010922:	f7f4 f941 	bl	8004ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor_R_Driveoff_Pin|Motor_R_Dir_Pin|Motor_R_Brake_Pin, GPIO_PIN_RESET);
 8010926:	2200      	movs	r2, #0
 8010928:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 801092c:	4840      	ldr	r0, [pc, #256]	@ (8010a30 <MX_GPIO_Init+0x204>)
 801092e:	f7f4 f93b 	bl	8004ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MARK_R_Pin E3_Pin MARK_L_Pin */
  GPIO_InitStruct.Pin = MARK_R_Pin|E3_Pin|MARK_L_Pin;
 8010932:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8010936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010938:	2301      	movs	r3, #1
 801093a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801093c:	2300      	movs	r3, #0
 801093e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010940:	2300      	movs	r3, #0
 8010942:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8010944:	f107 031c 	add.w	r3, r7, #28
 8010948:	4619      	mov	r1, r3
 801094a:	4836      	ldr	r0, [pc, #216]	@ (8010a24 <MX_GPIO_Init+0x1f8>)
 801094c:	f7f3 ff64 	bl	8004818 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8010950:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010956:	2300      	movs	r3, #0
 8010958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801095a:	2302      	movs	r3, #2
 801095c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 801095e:	f107 031c 	add.w	r3, r7, #28
 8010962:	4619      	mov	r1, r3
 8010964:	4833      	ldr	r0, [pc, #204]	@ (8010a34 <MX_GPIO_Init+0x208>)
 8010966:	f7f3 ff57 	bl	8004818 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_WR_RS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 801096a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 801096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010970:	2301      	movs	r3, #1
 8010972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010974:	2300      	movs	r3, #0
 8010976:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010978:	2303      	movs	r3, #3
 801097a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801097c:	f107 031c 	add.w	r3, r7, #28
 8010980:	4619      	mov	r1, r3
 8010982:	4828      	ldr	r0, [pc, #160]	@ (8010a24 <MX_GPIO_Init+0x1f8>)
 8010984:	f7f3 ff48 	bl	8004818 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8010988:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801098e:	2301      	movs	r3, #1
 8010990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010992:	2300      	movs	r3, #0
 8010994:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010996:	2300      	movs	r3, #0
 8010998:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 801099a:	f107 031c 	add.w	r3, r7, #28
 801099e:	4619      	mov	r1, r3
 80109a0:	4821      	ldr	r0, [pc, #132]	@ (8010a28 <MX_GPIO_Init+0x1fc>)
 80109a2:	f7f3 ff39 	bl	8004818 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor_L_nFAULT_Pin PD1 PD3 PD4
                           PD5 */
  GPIO_InitStruct.Pin = Motor_L_nFAULT_Pin|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80109a6:	f240 433a 	movw	r3, #1082	@ 0x43a
 80109aa:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80109ac:	2300      	movs	r3, #0
 80109ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80109b0:	2300      	movs	r3, #0
 80109b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80109b4:	f107 031c 	add.w	r3, r7, #28
 80109b8:	4619      	mov	r1, r3
 80109ba:	481c      	ldr	r0, [pc, #112]	@ (8010a2c <MX_GPIO_Init+0x200>)
 80109bc:	f7f3 ff2c 	bl	8004818 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor_L_Driveoff_Pin Motor_L_Dir_Pin Motor_L_Brake_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = Motor_L_Driveoff_Pin|Motor_L_Dir_Pin|Motor_L_Brake_Pin|SPI1_CS_Pin;
 80109c0:	f24e 0340 	movw	r3, #57408	@ 0xe040
 80109c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80109c6:	2301      	movs	r3, #1
 80109c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80109ca:	2300      	movs	r3, #0
 80109cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80109ce:	2300      	movs	r3, #0
 80109d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80109d2:	f107 031c 	add.w	r3, r7, #28
 80109d6:	4619      	mov	r1, r3
 80109d8:	4814      	ldr	r0, [pc, #80]	@ (8010a2c <MX_GPIO_Init+0x200>)
 80109da:	f7f3 ff1d 	bl	8004818 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor_R_Driveoff_Pin Motor_R_Dir_Pin Motor_R_Brake_Pin */
  GPIO_InitStruct.Pin = Motor_R_Driveoff_Pin|Motor_R_Dir_Pin|Motor_R_Brake_Pin;
 80109de:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80109e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80109e4:	2301      	movs	r3, #1
 80109e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80109e8:	2300      	movs	r3, #0
 80109ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80109ec:	2300      	movs	r3, #0
 80109ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80109f0:	f107 031c 	add.w	r3, r7, #28
 80109f4:	4619      	mov	r1, r3
 80109f6:	480e      	ldr	r0, [pc, #56]	@ (8010a30 <MX_GPIO_Init+0x204>)
 80109f8:	f7f3 ff0e 	bl	8004818 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_R_nFAULT_Pin */
  GPIO_InitStruct.Pin = Motor_R_nFAULT_Pin;
 80109fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010a02:	2300      	movs	r3, #0
 8010a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010a06:	2300      	movs	r3, #0
 8010a08:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Motor_R_nFAULT_GPIO_Port, &GPIO_InitStruct);
 8010a0a:	f107 031c 	add.w	r3, r7, #28
 8010a0e:	4619      	mov	r1, r3
 8010a10:	4807      	ldr	r0, [pc, #28]	@ (8010a30 <MX_GPIO_Init+0x204>)
 8010a12:	f7f3 ff01 	bl	8004818 <HAL_GPIO_Init>

}
 8010a16:	bf00      	nop
 8010a18:	3730      	adds	r7, #48	@ 0x30
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	bd80      	pop	{r7, pc}
 8010a1e:	bf00      	nop
 8010a20:	58024400 	.word	0x58024400
 8010a24:	58021000 	.word	0x58021000
 8010a28:	58020400 	.word	0x58020400
 8010a2c:	58020c00 	.word	0x58020c00
 8010a30:	58020000 	.word	0x58020000
 8010a34:	58020800 	.word	0x58020800

08010a38 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8010a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8010aac <MX_I2C1_Init+0x74>)
 8010a3e:	4a1c      	ldr	r2, [pc, #112]	@ (8010ab0 <MX_I2C1_Init+0x78>)
 8010a40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0F1FF;
 8010a42:	4b1a      	ldr	r3, [pc, #104]	@ (8010aac <MX_I2C1_Init+0x74>)
 8010a44:	4a1b      	ldr	r2, [pc, #108]	@ (8010ab4 <MX_I2C1_Init+0x7c>)
 8010a46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8010a48:	4b18      	ldr	r3, [pc, #96]	@ (8010aac <MX_I2C1_Init+0x74>)
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8010a4e:	4b17      	ldr	r3, [pc, #92]	@ (8010aac <MX_I2C1_Init+0x74>)
 8010a50:	2201      	movs	r2, #1
 8010a52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8010a54:	4b15      	ldr	r3, [pc, #84]	@ (8010aac <MX_I2C1_Init+0x74>)
 8010a56:	2200      	movs	r2, #0
 8010a58:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8010a5a:	4b14      	ldr	r3, [pc, #80]	@ (8010aac <MX_I2C1_Init+0x74>)
 8010a5c:	2200      	movs	r2, #0
 8010a5e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8010a60:	4b12      	ldr	r3, [pc, #72]	@ (8010aac <MX_I2C1_Init+0x74>)
 8010a62:	2200      	movs	r2, #0
 8010a64:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8010a66:	4b11      	ldr	r3, [pc, #68]	@ (8010aac <MX_I2C1_Init+0x74>)
 8010a68:	2200      	movs	r2, #0
 8010a6a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8010a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8010aac <MX_I2C1_Init+0x74>)
 8010a6e:	2200      	movs	r2, #0
 8010a70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8010a72:	480e      	ldr	r0, [pc, #56]	@ (8010aac <MX_I2C1_Init+0x74>)
 8010a74:	f7f4 f8b2 	bl	8004bdc <HAL_I2C_Init>
 8010a78:	4603      	mov	r3, r0
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d001      	beq.n	8010a82 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8010a7e:	f000 fdbd 	bl	80115fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8010a82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8010a86:	4809      	ldr	r0, [pc, #36]	@ (8010aac <MX_I2C1_Init+0x74>)
 8010a88:	f7f4 fdf8 	bl	800567c <HAL_I2CEx_ConfigAnalogFilter>
 8010a8c:	4603      	mov	r3, r0
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d001      	beq.n	8010a96 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8010a92:	f000 fdb3 	bl	80115fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8010a96:	2100      	movs	r1, #0
 8010a98:	4804      	ldr	r0, [pc, #16]	@ (8010aac <MX_I2C1_Init+0x74>)
 8010a9a:	f7f4 fe3a 	bl	8005712 <HAL_I2CEx_ConfigDigitalFilter>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d001      	beq.n	8010aa8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8010aa4:	f000 fdaa 	bl	80115fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8010aa8:	bf00      	nop
 8010aaa:	bd80      	pop	{r7, pc}
 8010aac:	24000c24 	.word	0x24000c24
 8010ab0:	40005400 	.word	0x40005400
 8010ab4:	10c0f1ff 	.word	0x10c0f1ff

08010ab8 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8010abc:	4b1b      	ldr	r3, [pc, #108]	@ (8010b2c <MX_I2C4_Init+0x74>)
 8010abe:	4a1c      	ldr	r2, [pc, #112]	@ (8010b30 <MX_I2C4_Init+0x78>)
 8010ac0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 8010ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8010b2c <MX_I2C4_Init+0x74>)
 8010ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8010b34 <MX_I2C4_Init+0x7c>)
 8010ac6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8010ac8:	4b18      	ldr	r3, [pc, #96]	@ (8010b2c <MX_I2C4_Init+0x74>)
 8010aca:	2200      	movs	r2, #0
 8010acc:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8010ace:	4b17      	ldr	r3, [pc, #92]	@ (8010b2c <MX_I2C4_Init+0x74>)
 8010ad0:	2201      	movs	r2, #1
 8010ad2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8010ad4:	4b15      	ldr	r3, [pc, #84]	@ (8010b2c <MX_I2C4_Init+0x74>)
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8010ada:	4b14      	ldr	r3, [pc, #80]	@ (8010b2c <MX_I2C4_Init+0x74>)
 8010adc:	2200      	movs	r2, #0
 8010ade:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8010ae0:	4b12      	ldr	r3, [pc, #72]	@ (8010b2c <MX_I2C4_Init+0x74>)
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8010ae6:	4b11      	ldr	r3, [pc, #68]	@ (8010b2c <MX_I2C4_Init+0x74>)
 8010ae8:	2200      	movs	r2, #0
 8010aea:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8010aec:	4b0f      	ldr	r3, [pc, #60]	@ (8010b2c <MX_I2C4_Init+0x74>)
 8010aee:	2200      	movs	r2, #0
 8010af0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8010af2:	480e      	ldr	r0, [pc, #56]	@ (8010b2c <MX_I2C4_Init+0x74>)
 8010af4:	f7f4 f872 	bl	8004bdc <HAL_I2C_Init>
 8010af8:	4603      	mov	r3, r0
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d001      	beq.n	8010b02 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8010afe:	f000 fd7d 	bl	80115fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8010b02:	2100      	movs	r1, #0
 8010b04:	4809      	ldr	r0, [pc, #36]	@ (8010b2c <MX_I2C4_Init+0x74>)
 8010b06:	f7f4 fdb9 	bl	800567c <HAL_I2CEx_ConfigAnalogFilter>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d001      	beq.n	8010b14 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8010b10:	f000 fd74 	bl	80115fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8010b14:	2100      	movs	r1, #0
 8010b16:	4805      	ldr	r0, [pc, #20]	@ (8010b2c <MX_I2C4_Init+0x74>)
 8010b18:	f7f4 fdfb 	bl	8005712 <HAL_I2CEx_ConfigDigitalFilter>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d001      	beq.n	8010b26 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8010b22:	f000 fd6b 	bl	80115fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8010b26:	bf00      	nop
 8010b28:	bd80      	pop	{r7, pc}
 8010b2a:	bf00      	nop
 8010b2c:	24000c78 	.word	0x24000c78
 8010b30:	58001c00 	.word	0x58001c00
 8010b34:	307075b1 	.word	0x307075b1

08010b38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b0bc      	sub	sp, #240	@ 0xf0
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010b40:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8010b44:	2200      	movs	r2, #0
 8010b46:	601a      	str	r2, [r3, #0]
 8010b48:	605a      	str	r2, [r3, #4]
 8010b4a:	609a      	str	r2, [r3, #8]
 8010b4c:	60da      	str	r2, [r3, #12]
 8010b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010b50:	f107 0318 	add.w	r3, r7, #24
 8010b54:	22c0      	movs	r2, #192	@ 0xc0
 8010b56:	2100      	movs	r1, #0
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f002 fded 	bl	8013738 <memset>
  if(i2cHandle->Instance==I2C1)
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	4a56      	ldr	r2, [pc, #344]	@ (8010cbc <HAL_I2C_MspInit+0x184>)
 8010b64:	4293      	cmp	r3, r2
 8010b66:	d158      	bne.n	8010c1a <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8010b68:	f04f 0208 	mov.w	r2, #8
 8010b6c:	f04f 0300 	mov.w	r3, #0
 8010b70:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 8010b74:	2304      	movs	r3, #4
 8010b76:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 32;
 8010b78:	2320      	movs	r3, #32
 8010b7a:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8010b7c:	2302      	movs	r3, #2
 8010b7e:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8010b80:	2302      	movs	r3, #2
 8010b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8010b84:	2302      	movs	r3, #2
 8010b86:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8010b88:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010b8c:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8010b8e:	2300      	movs	r3, #0
 8010b90:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8010b92:	2300      	movs	r3, #0
 8010b94:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 8010b96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010b9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010b9e:	f107 0318 	add.w	r3, r7, #24
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	f7f6 fac0 	bl	8007128 <HAL_RCCEx_PeriphCLKConfig>
 8010ba8:	4603      	mov	r3, r0
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d001      	beq.n	8010bb2 <HAL_I2C_MspInit+0x7a>
    {
      Error_Handler();
 8010bae:	f000 fd25 	bl	80115fc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010bb2:	4b43      	ldr	r3, [pc, #268]	@ (8010cc0 <HAL_I2C_MspInit+0x188>)
 8010bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010bb8:	4a41      	ldr	r2, [pc, #260]	@ (8010cc0 <HAL_I2C_MspInit+0x188>)
 8010bba:	f043 0302 	orr.w	r3, r3, #2
 8010bbe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010bc2:	4b3f      	ldr	r3, [pc, #252]	@ (8010cc0 <HAL_I2C_MspInit+0x188>)
 8010bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010bc8:	f003 0302 	and.w	r3, r3, #2
 8010bcc:	617b      	str	r3, [r7, #20]
 8010bce:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = L_SCL_Pin|L_SDA_Pin;
 8010bd0:	23c0      	movs	r3, #192	@ 0xc0
 8010bd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8010bd6:	2312      	movs	r3, #18
 8010bd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010bdc:	2300      	movs	r3, #0
 8010bde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010be2:	2300      	movs	r3, #0
 8010be4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8010be8:	2304      	movs	r3, #4
 8010bea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010bee:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8010bf2:	4619      	mov	r1, r3
 8010bf4:	4833      	ldr	r0, [pc, #204]	@ (8010cc4 <HAL_I2C_MspInit+0x18c>)
 8010bf6:	f7f3 fe0f 	bl	8004818 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8010bfa:	4b31      	ldr	r3, [pc, #196]	@ (8010cc0 <HAL_I2C_MspInit+0x188>)
 8010bfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010c00:	4a2f      	ldr	r2, [pc, #188]	@ (8010cc0 <HAL_I2C_MspInit+0x188>)
 8010c02:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010c06:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8010c0a:	4b2d      	ldr	r3, [pc, #180]	@ (8010cc0 <HAL_I2C_MspInit+0x188>)
 8010c0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010c10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010c14:	613b      	str	r3, [r7, #16]
 8010c16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8010c18:	e04b      	b.n	8010cb2 <HAL_I2C_MspInit+0x17a>
  else if(i2cHandle->Instance==I2C4)
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	4a2a      	ldr	r2, [pc, #168]	@ (8010cc8 <HAL_I2C_MspInit+0x190>)
 8010c20:	4293      	cmp	r3, r2
 8010c22:	d146      	bne.n	8010cb2 <HAL_I2C_MspInit+0x17a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8010c24:	f04f 0210 	mov.w	r2, #16
 8010c28:	f04f 0300 	mov.w	r3, #0
 8010c2c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8010c30:	2300      	movs	r3, #0
 8010c32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010c36:	f107 0318 	add.w	r3, r7, #24
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	f7f6 fa74 	bl	8007128 <HAL_RCCEx_PeriphCLKConfig>
 8010c40:	4603      	mov	r3, r0
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d001      	beq.n	8010c4a <HAL_I2C_MspInit+0x112>
      Error_Handler();
 8010c46:	f000 fcd9 	bl	80115fc <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8010cc0 <HAL_I2C_MspInit+0x188>)
 8010c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010c50:	4a1b      	ldr	r2, [pc, #108]	@ (8010cc0 <HAL_I2C_MspInit+0x188>)
 8010c52:	f043 0302 	orr.w	r3, r3, #2
 8010c56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010c5a:	4b19      	ldr	r3, [pc, #100]	@ (8010cc0 <HAL_I2C_MspInit+0x188>)
 8010c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010c60:	f003 0302 	and.w	r3, r3, #2
 8010c64:	60fb      	str	r3, [r7, #12]
 8010c66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = R_SCL_Pin|R_SDA_Pin;
 8010c68:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8010c6c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8010c70:	2312      	movs	r3, #18
 8010c72:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c76:	2300      	movs	r3, #0
 8010c78:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 8010c82:	2306      	movs	r3, #6
 8010c84:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010c88:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8010c8c:	4619      	mov	r1, r3
 8010c8e:	480d      	ldr	r0, [pc, #52]	@ (8010cc4 <HAL_I2C_MspInit+0x18c>)
 8010c90:	f7f3 fdc2 	bl	8004818 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8010c94:	4b0a      	ldr	r3, [pc, #40]	@ (8010cc0 <HAL_I2C_MspInit+0x188>)
 8010c96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010c9a:	4a09      	ldr	r2, [pc, #36]	@ (8010cc0 <HAL_I2C_MspInit+0x188>)
 8010c9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010ca0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8010ca4:	4b06      	ldr	r3, [pc, #24]	@ (8010cc0 <HAL_I2C_MspInit+0x188>)
 8010ca6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010cae:	60bb      	str	r3, [r7, #8]
 8010cb0:	68bb      	ldr	r3, [r7, #8]
}
 8010cb2:	bf00      	nop
 8010cb4:	37f0      	adds	r7, #240	@ 0xf0
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}
 8010cba:	bf00      	nop
 8010cbc:	40005400 	.word	0x40005400
 8010cc0:	58024400 	.word	0x58024400
 8010cc4:	58020400 	.word	0x58020400
 8010cc8:	58001c00 	.word	0x58001c00

08010ccc <MX_LPTIM1_Init>:
LPTIM_HandleTypeDef hlptim4;
LPTIM_HandleTypeDef hlptim5;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8010cd0:	4b16      	ldr	r3, [pc, #88]	@ (8010d2c <MX_LPTIM1_Init+0x60>)
 8010cd2:	4a17      	ldr	r2, [pc, #92]	@ (8010d30 <MX_LPTIM1_Init+0x64>)
 8010cd4:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8010cd6:	4b15      	ldr	r3, [pc, #84]	@ (8010d2c <MX_LPTIM1_Init+0x60>)
 8010cd8:	2200      	movs	r2, #0
 8010cda:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8010cdc:	4b13      	ldr	r3, [pc, #76]	@ (8010d2c <MX_LPTIM1_Init+0x60>)
 8010cde:	2200      	movs	r2, #0
 8010ce0:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8010ce2:	4b12      	ldr	r3, [pc, #72]	@ (8010d2c <MX_LPTIM1_Init+0x60>)
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_2TRANSITIONS;
 8010ce8:	4b10      	ldr	r3, [pc, #64]	@ (8010d2c <MX_LPTIM1_Init+0x60>)
 8010cea:	2208      	movs	r2, #8
 8010cec:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8010cee:	4b0f      	ldr	r3, [pc, #60]	@ (8010d2c <MX_LPTIM1_Init+0x60>)
 8010cf0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010cf4:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8010cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8010d2c <MX_LPTIM1_Init+0x60>)
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8010cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8010d2c <MX_LPTIM1_Init+0x60>)
 8010cfe:	2200      	movs	r2, #0
 8010d00:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8010d02:	4b0a      	ldr	r3, [pc, #40]	@ (8010d2c <MX_LPTIM1_Init+0x60>)
 8010d04:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8010d08:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8010d0a:	4b08      	ldr	r3, [pc, #32]	@ (8010d2c <MX_LPTIM1_Init+0x60>)
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8010d10:	4b06      	ldr	r3, [pc, #24]	@ (8010d2c <MX_LPTIM1_Init+0x60>)
 8010d12:	2200      	movs	r2, #0
 8010d14:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8010d16:	4805      	ldr	r0, [pc, #20]	@ (8010d2c <MX_LPTIM1_Init+0x60>)
 8010d18:	f7f4 fd48 	bl	80057ac <HAL_LPTIM_Init>
 8010d1c:	4603      	mov	r3, r0
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d001      	beq.n	8010d26 <MX_LPTIM1_Init+0x5a>
  {
    Error_Handler();
 8010d22:	f000 fc6b 	bl	80115fc <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8010d26:	bf00      	nop
 8010d28:	bd80      	pop	{r7, pc}
 8010d2a:	bf00      	nop
 8010d2c:	24000ccc 	.word	0x24000ccc
 8010d30:	40002400 	.word	0x40002400

08010d34 <MX_LPTIM2_Init>:
/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 8010d38:	4b16      	ldr	r3, [pc, #88]	@ (8010d94 <MX_LPTIM2_Init+0x60>)
 8010d3a:	4a17      	ldr	r2, [pc, #92]	@ (8010d98 <MX_LPTIM2_Init+0x64>)
 8010d3c:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8010d3e:	4b15      	ldr	r3, [pc, #84]	@ (8010d94 <MX_LPTIM2_Init+0x60>)
 8010d40:	2200      	movs	r2, #0
 8010d42:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8010d44:	4b13      	ldr	r3, [pc, #76]	@ (8010d94 <MX_LPTIM2_Init+0x60>)
 8010d46:	2200      	movs	r2, #0
 8010d48:	609a      	str	r2, [r3, #8]
  hlptim2.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8010d4a:	4b12      	ldr	r3, [pc, #72]	@ (8010d94 <MX_LPTIM2_Init+0x60>)
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	60da      	str	r2, [r3, #12]
  hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_2TRANSITIONS;
 8010d50:	4b10      	ldr	r3, [pc, #64]	@ (8010d94 <MX_LPTIM2_Init+0x60>)
 8010d52:	2208      	movs	r2, #8
 8010d54:	611a      	str	r2, [r3, #16]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8010d56:	4b0f      	ldr	r3, [pc, #60]	@ (8010d94 <MX_LPTIM2_Init+0x60>)
 8010d58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010d5c:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8010d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8010d94 <MX_LPTIM2_Init+0x60>)
 8010d60:	2200      	movs	r2, #0
 8010d62:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8010d64:	4b0b      	ldr	r3, [pc, #44]	@ (8010d94 <MX_LPTIM2_Init+0x60>)
 8010d66:	2200      	movs	r2, #0
 8010d68:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8010d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8010d94 <MX_LPTIM2_Init+0x60>)
 8010d6c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8010d70:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8010d72:	4b08      	ldr	r3, [pc, #32]	@ (8010d94 <MX_LPTIM2_Init+0x60>)
 8010d74:	2200      	movs	r2, #0
 8010d76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8010d78:	4b06      	ldr	r3, [pc, #24]	@ (8010d94 <MX_LPTIM2_Init+0x60>)
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8010d7e:	4805      	ldr	r0, [pc, #20]	@ (8010d94 <MX_LPTIM2_Init+0x60>)
 8010d80:	f7f4 fd14 	bl	80057ac <HAL_LPTIM_Init>
 8010d84:	4603      	mov	r3, r0
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d001      	beq.n	8010d8e <MX_LPTIM2_Init+0x5a>
  {
    Error_Handler();
 8010d8a:	f000 fc37 	bl	80115fc <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8010d8e:	bf00      	nop
 8010d90:	bd80      	pop	{r7, pc}
 8010d92:	bf00      	nop
 8010d94:	24000d04 	.word	0x24000d04
 8010d98:	58002400 	.word	0x58002400

08010d9c <MX_LPTIM3_Init>:
/* LPTIM3 init function */
void MX_LPTIM3_Init(void)
{
 8010d9c:	b580      	push	{r7, lr}
 8010d9e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM3_Init 0 */

  /* USER CODE BEGIN LPTIM3_Init 1 */

  /* USER CODE END LPTIM3_Init 1 */
  hlptim3.Instance = LPTIM3;
 8010da0:	4b11      	ldr	r3, [pc, #68]	@ (8010de8 <MX_LPTIM3_Init+0x4c>)
 8010da2:	4a12      	ldr	r2, [pc, #72]	@ (8010dec <MX_LPTIM3_Init+0x50>)
 8010da4:	601a      	str	r2, [r3, #0]
  hlptim3.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8010da6:	4b10      	ldr	r3, [pc, #64]	@ (8010de8 <MX_LPTIM3_Init+0x4c>)
 8010da8:	2200      	movs	r2, #0
 8010daa:	605a      	str	r2, [r3, #4]
  hlptim3.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8010dac:	4b0e      	ldr	r3, [pc, #56]	@ (8010de8 <MX_LPTIM3_Init+0x4c>)
 8010dae:	2200      	movs	r2, #0
 8010db0:	609a      	str	r2, [r3, #8]
  hlptim3.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8010db2:	4b0d      	ldr	r3, [pc, #52]	@ (8010de8 <MX_LPTIM3_Init+0x4c>)
 8010db4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010db8:	615a      	str	r2, [r3, #20]
  hlptim3.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8010dba:	4b0b      	ldr	r3, [pc, #44]	@ (8010de8 <MX_LPTIM3_Init+0x4c>)
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	621a      	str	r2, [r3, #32]
  hlptim3.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8010dc0:	4b09      	ldr	r3, [pc, #36]	@ (8010de8 <MX_LPTIM3_Init+0x4c>)
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim3.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8010dc6:	4b08      	ldr	r3, [pc, #32]	@ (8010de8 <MX_LPTIM3_Init+0x4c>)
 8010dc8:	2200      	movs	r2, #0
 8010dca:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim3.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8010dcc:	4b06      	ldr	r3, [pc, #24]	@ (8010de8 <MX_LPTIM3_Init+0x4c>)
 8010dce:	2200      	movs	r2, #0
 8010dd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_LPTIM_Init(&hlptim3) != HAL_OK)
 8010dd2:	4805      	ldr	r0, [pc, #20]	@ (8010de8 <MX_LPTIM3_Init+0x4c>)
 8010dd4:	f7f4 fcea 	bl	80057ac <HAL_LPTIM_Init>
 8010dd8:	4603      	mov	r3, r0
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d001      	beq.n	8010de2 <MX_LPTIM3_Init+0x46>
  {
    Error_Handler();
 8010dde:	f000 fc0d 	bl	80115fc <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM3_Init 2 */

  /* USER CODE END LPTIM3_Init 2 */

}
 8010de2:	bf00      	nop
 8010de4:	bd80      	pop	{r7, pc}
 8010de6:	bf00      	nop
 8010de8:	24000d3c 	.word	0x24000d3c
 8010dec:	58002800 	.word	0x58002800

08010df0 <MX_LPTIM4_Init>:
/* LPTIM4 init function */
void MX_LPTIM4_Init(void)
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM4_Init 0 */

  /* USER CODE BEGIN LPTIM4_Init 1 */

  /* USER CODE END LPTIM4_Init 1 */
  hlptim4.Instance = LPTIM4;
 8010df4:	4b10      	ldr	r3, [pc, #64]	@ (8010e38 <MX_LPTIM4_Init+0x48>)
 8010df6:	4a11      	ldr	r2, [pc, #68]	@ (8010e3c <MX_LPTIM4_Init+0x4c>)
 8010df8:	601a      	str	r2, [r3, #0]
  hlptim4.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8010dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8010e38 <MX_LPTIM4_Init+0x48>)
 8010dfc:	2200      	movs	r2, #0
 8010dfe:	605a      	str	r2, [r3, #4]
  hlptim4.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV16;
 8010e00:	4b0d      	ldr	r3, [pc, #52]	@ (8010e38 <MX_LPTIM4_Init+0x48>)
 8010e02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010e06:	609a      	str	r2, [r3, #8]
  hlptim4.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8010e08:	4b0b      	ldr	r3, [pc, #44]	@ (8010e38 <MX_LPTIM4_Init+0x48>)
 8010e0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010e0e:	615a      	str	r2, [r3, #20]
  hlptim4.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8010e10:	4b09      	ldr	r3, [pc, #36]	@ (8010e38 <MX_LPTIM4_Init+0x48>)
 8010e12:	2200      	movs	r2, #0
 8010e14:	621a      	str	r2, [r3, #32]
  hlptim4.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8010e16:	4b08      	ldr	r3, [pc, #32]	@ (8010e38 <MX_LPTIM4_Init+0x48>)
 8010e18:	2200      	movs	r2, #0
 8010e1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim4.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8010e1c:	4b06      	ldr	r3, [pc, #24]	@ (8010e38 <MX_LPTIM4_Init+0x48>)
 8010e1e:	2200      	movs	r2, #0
 8010e20:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_LPTIM_Init(&hlptim4) != HAL_OK)
 8010e22:	4805      	ldr	r0, [pc, #20]	@ (8010e38 <MX_LPTIM4_Init+0x48>)
 8010e24:	f7f4 fcc2 	bl	80057ac <HAL_LPTIM_Init>
 8010e28:	4603      	mov	r3, r0
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d001      	beq.n	8010e32 <MX_LPTIM4_Init+0x42>
  {
    Error_Handler();
 8010e2e:	f000 fbe5 	bl	80115fc <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM4_Init 2 */

  /* USER CODE END LPTIM4_Init 2 */

}
 8010e32:	bf00      	nop
 8010e34:	bd80      	pop	{r7, pc}
 8010e36:	bf00      	nop
 8010e38:	24000d74 	.word	0x24000d74
 8010e3c:	58002c00 	.word	0x58002c00

08010e40 <MX_LPTIM5_Init>:
/* LPTIM5 init function */
void MX_LPTIM5_Init(void)
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM5_Init 0 */

  /* USER CODE BEGIN LPTIM5_Init 1 */

  /* USER CODE END LPTIM5_Init 1 */
  hlptim5.Instance = LPTIM5;
 8010e44:	4b10      	ldr	r3, [pc, #64]	@ (8010e88 <MX_LPTIM5_Init+0x48>)
 8010e46:	4a11      	ldr	r2, [pc, #68]	@ (8010e8c <MX_LPTIM5_Init+0x4c>)
 8010e48:	601a      	str	r2, [r3, #0]
  hlptim5.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8010e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8010e88 <MX_LPTIM5_Init+0x48>)
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	605a      	str	r2, [r3, #4]
  hlptim5.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV16;
 8010e50:	4b0d      	ldr	r3, [pc, #52]	@ (8010e88 <MX_LPTIM5_Init+0x48>)
 8010e52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010e56:	609a      	str	r2, [r3, #8]
  hlptim5.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8010e58:	4b0b      	ldr	r3, [pc, #44]	@ (8010e88 <MX_LPTIM5_Init+0x48>)
 8010e5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010e5e:	615a      	str	r2, [r3, #20]
  hlptim5.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8010e60:	4b09      	ldr	r3, [pc, #36]	@ (8010e88 <MX_LPTIM5_Init+0x48>)
 8010e62:	2200      	movs	r2, #0
 8010e64:	621a      	str	r2, [r3, #32]
  hlptim5.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8010e66:	4b08      	ldr	r3, [pc, #32]	@ (8010e88 <MX_LPTIM5_Init+0x48>)
 8010e68:	2200      	movs	r2, #0
 8010e6a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim5.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8010e6c:	4b06      	ldr	r3, [pc, #24]	@ (8010e88 <MX_LPTIM5_Init+0x48>)
 8010e6e:	2200      	movs	r2, #0
 8010e70:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_LPTIM_Init(&hlptim5) != HAL_OK)
 8010e72:	4805      	ldr	r0, [pc, #20]	@ (8010e88 <MX_LPTIM5_Init+0x48>)
 8010e74:	f7f4 fc9a 	bl	80057ac <HAL_LPTIM_Init>
 8010e78:	4603      	mov	r3, r0
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d001      	beq.n	8010e82 <MX_LPTIM5_Init+0x42>
  {
    Error_Handler();
 8010e7e:	f000 fbbd 	bl	80115fc <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM5_Init 2 */

  /* USER CODE END LPTIM5_Init 2 */

}
 8010e82:	bf00      	nop
 8010e84:	bd80      	pop	{r7, pc}
 8010e86:	bf00      	nop
 8010e88:	24000dac 	.word	0x24000dac
 8010e8c:	58003000 	.word	0x58003000

08010e90 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b0c2      	sub	sp, #264	@ 0x108
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010e9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010e9e:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010ea0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	601a      	str	r2, [r3, #0]
 8010ea8:	605a      	str	r2, [r3, #4]
 8010eaa:	609a      	str	r2, [r3, #8]
 8010eac:	60da      	str	r2, [r3, #12]
 8010eae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010eb0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010eb4:	22c0      	movs	r2, #192	@ 0xc0
 8010eb6:	2100      	movs	r1, #0
 8010eb8:	4618      	mov	r0, r3
 8010eba:	f002 fc3d 	bl	8013738 <memset>
  if(lptimHandle->Instance==LPTIM1)
 8010ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010ec2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	4ac4      	ldr	r2, [pc, #784]	@ (80111dc <HAL_LPTIM_MspInit+0x34c>)
 8010ecc:	4293      	cmp	r3, r2
 8010ece:	d16b      	bne.n	8010fa8 <HAL_LPTIM_MspInit+0x118>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8010ed0:	f04f 0220 	mov.w	r2, #32
 8010ed4:	f04f 0300 	mov.w	r3, #0
 8010ed8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_D2PCLK1;
 8010edc:	2300      	movs	r3, #0
 8010ede:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010ee2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f7f6 f91e 	bl	8007128 <HAL_RCCEx_PeriphCLKConfig>
 8010eec:	4603      	mov	r3, r0
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d001      	beq.n	8010ef6 <HAL_LPTIM_MspInit+0x66>
    {
      Error_Handler();
 8010ef2:	f000 fb83 	bl	80115fc <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8010ef6:	4bba      	ldr	r3, [pc, #744]	@ (80111e0 <HAL_LPTIM_MspInit+0x350>)
 8010ef8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010efc:	4ab8      	ldr	r2, [pc, #736]	@ (80111e0 <HAL_LPTIM_MspInit+0x350>)
 8010efe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8010f02:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8010f06:	4bb6      	ldr	r3, [pc, #728]	@ (80111e0 <HAL_LPTIM_MspInit+0x350>)
 8010f08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8010f0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8010f14:	4bb2      	ldr	r3, [pc, #712]	@ (80111e0 <HAL_LPTIM_MspInit+0x350>)
 8010f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010f1a:	4ab1      	ldr	r2, [pc, #708]	@ (80111e0 <HAL_LPTIM_MspInit+0x350>)
 8010f1c:	f043 0308 	orr.w	r3, r3, #8
 8010f20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010f24:	4bae      	ldr	r3, [pc, #696]	@ (80111e0 <HAL_LPTIM_MspInit+0x350>)
 8010f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010f2a:	f003 0308 	and.w	r3, r3, #8
 8010f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8010f32:	4bab      	ldr	r3, [pc, #684]	@ (80111e0 <HAL_LPTIM_MspInit+0x350>)
 8010f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010f38:	4aa9      	ldr	r2, [pc, #676]	@ (80111e0 <HAL_LPTIM_MspInit+0x350>)
 8010f3a:	f043 0310 	orr.w	r3, r3, #16
 8010f3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010f42:	4ba7      	ldr	r3, [pc, #668]	@ (80111e0 <HAL_LPTIM_MspInit+0x350>)
 8010f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010f48:	f003 0310 	and.w	r3, r3, #16
 8010f4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8010f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**LPTIM1 GPIO Configuration
    PD12     ------> LPTIM1_IN1
    PE1     ------> LPTIM1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8010f50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010f54:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f58:	2302      	movs	r3, #2
 8010f5a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f5e:	2300      	movs	r3, #0
 8010f60:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010f64:	2300      	movs	r3, #0
 8010f66:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8010f6a:	2301      	movs	r3, #1
 8010f6c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010f70:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8010f74:	4619      	mov	r1, r3
 8010f76:	489b      	ldr	r0, [pc, #620]	@ (80111e4 <HAL_LPTIM_MspInit+0x354>)
 8010f78:	f7f3 fc4e 	bl	8004818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8010f7c:	2302      	movs	r3, #2
 8010f7e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f82:	2302      	movs	r3, #2
 8010f84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f88:	2300      	movs	r3, #0
 8010f8a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010f8e:	2300      	movs	r3, #0
 8010f90:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8010f94:	2301      	movs	r3, #1
 8010f96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8010f9a:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8010f9e:	4619      	mov	r1, r3
 8010fa0:	4891      	ldr	r0, [pc, #580]	@ (80111e8 <HAL_LPTIM_MspInit+0x358>)
 8010fa2:	f7f3 fc39 	bl	8004818 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(LPTIM5_IRQn);
  /* USER CODE BEGIN LPTIM5_MspInit 1 */

  /* USER CODE END LPTIM5_MspInit 1 */
  }
}
 8010fa6:	e113      	b.n	80111d0 <HAL_LPTIM_MspInit+0x340>
  else if(lptimHandle->Instance==LPTIM2)
 8010fa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010fac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	4a8d      	ldr	r2, [pc, #564]	@ (80111ec <HAL_LPTIM_MspInit+0x35c>)
 8010fb6:	4293      	cmp	r3, r2
 8010fb8:	d16c      	bne.n	8011094 <HAL_LPTIM_MspInit+0x204>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 8010fba:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8010fbe:	f04f 0300 	mov.w	r3, #0
 8010fc2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_D3PCLK1;
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010fcc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	f7f6 f8a9 	bl	8007128 <HAL_RCCEx_PeriphCLKConfig>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d001      	beq.n	8010fe0 <HAL_LPTIM_MspInit+0x150>
      Error_Handler();
 8010fdc:	f000 fb0e 	bl	80115fc <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8010fe0:	4b7f      	ldr	r3, [pc, #508]	@ (80111e0 <HAL_LPTIM_MspInit+0x350>)
 8010fe2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010fe6:	4a7e      	ldr	r2, [pc, #504]	@ (80111e0 <HAL_LPTIM_MspInit+0x350>)
 8010fe8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8010fec:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8010ff0:	4b7b      	ldr	r3, [pc, #492]	@ (80111e0 <HAL_LPTIM_MspInit+0x350>)
 8010ff2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010ff6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010ffa:	623b      	str	r3, [r7, #32]
 8010ffc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010ffe:	4b78      	ldr	r3, [pc, #480]	@ (80111e0 <HAL_LPTIM_MspInit+0x350>)
 8011000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011004:	4a76      	ldr	r2, [pc, #472]	@ (80111e0 <HAL_LPTIM_MspInit+0x350>)
 8011006:	f043 0302 	orr.w	r3, r3, #2
 801100a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801100e:	4b74      	ldr	r3, [pc, #464]	@ (80111e0 <HAL_LPTIM_MspInit+0x350>)
 8011010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011014:	f003 0302 	and.w	r3, r3, #2
 8011018:	61fb      	str	r3, [r7, #28]
 801101a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801101c:	4b70      	ldr	r3, [pc, #448]	@ (80111e0 <HAL_LPTIM_MspInit+0x350>)
 801101e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011022:	4a6f      	ldr	r2, [pc, #444]	@ (80111e0 <HAL_LPTIM_MspInit+0x350>)
 8011024:	f043 0308 	orr.w	r3, r3, #8
 8011028:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801102c:	4b6c      	ldr	r3, [pc, #432]	@ (80111e0 <HAL_LPTIM_MspInit+0x350>)
 801102e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011032:	f003 0308 	and.w	r3, r3, #8
 8011036:	61bb      	str	r3, [r7, #24]
 8011038:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 801103a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801103e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011042:	2302      	movs	r3, #2
 8011044:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011048:	2300      	movs	r3, #0
 801104a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801104e:	2300      	movs	r3, #0
 8011050:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 8011054:	2303      	movs	r3, #3
 8011056:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801105a:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 801105e:	4619      	mov	r1, r3
 8011060:	4863      	ldr	r0, [pc, #396]	@ (80111f0 <HAL_LPTIM_MspInit+0x360>)
 8011062:	f7f3 fbd9 	bl	8004818 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8011066:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801106a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801106e:	2302      	movs	r3, #2
 8011070:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011074:	2300      	movs	r3, #0
 8011076:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801107a:	2300      	movs	r3, #0
 801107c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 8011080:	2303      	movs	r3, #3
 8011082:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011086:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 801108a:	4619      	mov	r1, r3
 801108c:	4855      	ldr	r0, [pc, #340]	@ (80111e4 <HAL_LPTIM_MspInit+0x354>)
 801108e:	f7f3 fbc3 	bl	8004818 <HAL_GPIO_Init>
}
 8011092:	e09d      	b.n	80111d0 <HAL_LPTIM_MspInit+0x340>
  else if(lptimHandle->Instance==LPTIM3)
 8011094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011098:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	4a54      	ldr	r2, [pc, #336]	@ (80111f4 <HAL_LPTIM_MspInit+0x364>)
 80110a2:	4293      	cmp	r3, r2
 80110a4:	d12b      	bne.n	80110fe <HAL_LPTIM_MspInit+0x26e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM3;
 80110a6:	f04f 0280 	mov.w	r2, #128	@ 0x80
 80110aa:	f04f 0300 	mov.w	r3, #0
 80110ae:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Lptim345ClockSelection = RCC_LPTIM345CLKSOURCE_LSI;
 80110b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80110b6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80110ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80110be:	4618      	mov	r0, r3
 80110c0:	f7f6 f832 	bl	8007128 <HAL_RCCEx_PeriphCLKConfig>
 80110c4:	4603      	mov	r3, r0
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d001      	beq.n	80110ce <HAL_LPTIM_MspInit+0x23e>
      Error_Handler();
 80110ca:	f000 fa97 	bl	80115fc <Error_Handler>
    __HAL_RCC_LPTIM3_CLK_ENABLE();
 80110ce:	4b44      	ldr	r3, [pc, #272]	@ (80111e0 <HAL_LPTIM_MspInit+0x350>)
 80110d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80110d4:	4a42      	ldr	r2, [pc, #264]	@ (80111e0 <HAL_LPTIM_MspInit+0x350>)
 80110d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80110da:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80110de:	4b40      	ldr	r3, [pc, #256]	@ (80111e0 <HAL_LPTIM_MspInit+0x350>)
 80110e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80110e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80110e8:	617b      	str	r3, [r7, #20]
 80110ea:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(LPTIM3_IRQn, 0, 0);
 80110ec:	2200      	movs	r2, #0
 80110ee:	2100      	movs	r1, #0
 80110f0:	208b      	movs	r0, #139	@ 0x8b
 80110f2:	f7f3 fae4 	bl	80046be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM3_IRQn);
 80110f6:	208b      	movs	r0, #139	@ 0x8b
 80110f8:	f7f3 fafb 	bl	80046f2 <HAL_NVIC_EnableIRQ>
}
 80110fc:	e068      	b.n	80111d0 <HAL_LPTIM_MspInit+0x340>
  else if(lptimHandle->Instance==LPTIM4)
 80110fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011102:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	4a3b      	ldr	r2, [pc, #236]	@ (80111f8 <HAL_LPTIM_MspInit+0x368>)
 801110c:	4293      	cmp	r3, r2
 801110e:	d12b      	bne.n	8011168 <HAL_LPTIM_MspInit+0x2d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM4;
 8011110:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8011114:	f04f 0300 	mov.w	r3, #0
 8011118:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Lptim345ClockSelection = RCC_LPTIM345CLKSOURCE_LSI;
 801111c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011120:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011124:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011128:	4618      	mov	r0, r3
 801112a:	f7f5 fffd 	bl	8007128 <HAL_RCCEx_PeriphCLKConfig>
 801112e:	4603      	mov	r3, r0
 8011130:	2b00      	cmp	r3, #0
 8011132:	d001      	beq.n	8011138 <HAL_LPTIM_MspInit+0x2a8>
      Error_Handler();
 8011134:	f000 fa62 	bl	80115fc <Error_Handler>
    __HAL_RCC_LPTIM4_CLK_ENABLE();
 8011138:	4b29      	ldr	r3, [pc, #164]	@ (80111e0 <HAL_LPTIM_MspInit+0x350>)
 801113a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801113e:	4a28      	ldr	r2, [pc, #160]	@ (80111e0 <HAL_LPTIM_MspInit+0x350>)
 8011140:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8011144:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8011148:	4b25      	ldr	r3, [pc, #148]	@ (80111e0 <HAL_LPTIM_MspInit+0x350>)
 801114a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801114e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011152:	613b      	str	r3, [r7, #16]
 8011154:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(LPTIM4_IRQn, 0, 0);
 8011156:	2200      	movs	r2, #0
 8011158:	2100      	movs	r1, #0
 801115a:	208c      	movs	r0, #140	@ 0x8c
 801115c:	f7f3 faaf 	bl	80046be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM4_IRQn);
 8011160:	208c      	movs	r0, #140	@ 0x8c
 8011162:	f7f3 fac6 	bl	80046f2 <HAL_NVIC_EnableIRQ>
}
 8011166:	e033      	b.n	80111d0 <HAL_LPTIM_MspInit+0x340>
  else if(lptimHandle->Instance==LPTIM5)
 8011168:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801116c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	4a21      	ldr	r2, [pc, #132]	@ (80111fc <HAL_LPTIM_MspInit+0x36c>)
 8011176:	4293      	cmp	r3, r2
 8011178:	d12a      	bne.n	80111d0 <HAL_LPTIM_MspInit+0x340>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM5;
 801117a:	f04f 0280 	mov.w	r2, #128	@ 0x80
 801117e:	f04f 0300 	mov.w	r3, #0
 8011182:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Lptim345ClockSelection = RCC_LPTIM345CLKSOURCE_LSI;
 8011186:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801118a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801118e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011192:	4618      	mov	r0, r3
 8011194:	f7f5 ffc8 	bl	8007128 <HAL_RCCEx_PeriphCLKConfig>
 8011198:	4603      	mov	r3, r0
 801119a:	2b00      	cmp	r3, #0
 801119c:	d001      	beq.n	80111a2 <HAL_LPTIM_MspInit+0x312>
      Error_Handler();
 801119e:	f000 fa2d 	bl	80115fc <Error_Handler>
    __HAL_RCC_LPTIM5_CLK_ENABLE();
 80111a2:	4b0f      	ldr	r3, [pc, #60]	@ (80111e0 <HAL_LPTIM_MspInit+0x350>)
 80111a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80111a8:	4a0d      	ldr	r2, [pc, #52]	@ (80111e0 <HAL_LPTIM_MspInit+0x350>)
 80111aa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80111ae:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80111b2:	4b0b      	ldr	r3, [pc, #44]	@ (80111e0 <HAL_LPTIM_MspInit+0x350>)
 80111b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80111b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80111bc:	60fb      	str	r3, [r7, #12]
 80111be:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(LPTIM5_IRQn, 0, 0);
 80111c0:	2200      	movs	r2, #0
 80111c2:	2100      	movs	r1, #0
 80111c4:	208d      	movs	r0, #141	@ 0x8d
 80111c6:	f7f3 fa7a 	bl	80046be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM5_IRQn);
 80111ca:	208d      	movs	r0, #141	@ 0x8d
 80111cc:	f7f3 fa91 	bl	80046f2 <HAL_NVIC_EnableIRQ>
}
 80111d0:	bf00      	nop
 80111d2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80111d6:	46bd      	mov	sp, r7
 80111d8:	bd80      	pop	{r7, pc}
 80111da:	bf00      	nop
 80111dc:	40002400 	.word	0x40002400
 80111e0:	58024400 	.word	0x58024400
 80111e4:	58020c00 	.word	0x58020c00
 80111e8:	58021000 	.word	0x58021000
 80111ec:	58002400 	.word	0x58002400
 80111f0:	58020400 	.word	0x58020400
 80111f4:	58002800 	.word	0x58002800
 80111f8:	58002c00 	.word	0x58002c00
 80111fc:	58003000 	.word	0x58003000

08011200 <MPU_Config>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void MPU_Config(void) {
 8011200:	b580      	push	{r7, lr}
 8011202:	b084      	sub	sp, #16
 8011204:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 8011206:	463b      	mov	r3, r7
 8011208:	2200      	movs	r2, #0
 801120a:	601a      	str	r2, [r3, #0]
 801120c:	605a      	str	r2, [r3, #4]
 801120e:	609a      	str	r2, [r3, #8]
 8011210:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8011212:	f7f3 fa89 	bl	8004728 <HAL_MPU_Disable>

	/* Configure the MPU attributes for the QSPI 256MB without instruction access */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8011216:	2301      	movs	r3, #1
 8011218:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 801121a:	2300      	movs	r3, #0
 801121c:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = QSPI_BASE;
 801121e:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 8011222:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8011224:	231b      	movs	r3, #27
 8011226:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8011228:	2300      	movs	r3, #0
 801122a:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 801122c:	2300      	movs	r3, #0
 801122e:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8011230:	2300      	movs	r3, #0
 8011232:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8011234:	2300      	movs	r3, #0
 8011236:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8011238:	2301      	movs	r3, #1
 801123a:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 801123c:	2301      	movs	r3, #1
 801123e:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8011240:	2300      	movs	r3, #0
 8011242:	727b      	strb	r3, [r7, #9]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8011244:	463b      	mov	r3, r7
 8011246:	4618      	mov	r0, r3
 8011248:	f7f3 faa6 	bl	8004798 <HAL_MPU_ConfigRegion>

	/* Configure the MPU attributes for the QSPI 8MB (QSPI Flash Size) to Cacheable WT */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 801124c:	2301      	movs	r3, #1
 801124e:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8011250:	2301      	movs	r3, #1
 8011252:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = QSPI_BASE;
 8011254:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 8011258:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 801125a:	2316      	movs	r3, #22
 801125c:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO;
 801125e:	2305      	movs	r3, #5
 8011260:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8011262:	2301      	movs	r3, #1
 8011264:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8011266:	2301      	movs	r3, #1
 8011268:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 801126a:	2300      	movs	r3, #0
 801126c:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 801126e:	2300      	movs	r3, #0
 8011270:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8011272:	2301      	movs	r3, #1
 8011274:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8011276:	2300      	movs	r3, #0
 8011278:	727b      	strb	r3, [r7, #9]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 801127a:	463b      	mov	r3, r7
 801127c:	4618      	mov	r0, r3
 801127e:	f7f3 fa8b 	bl	8004798 <HAL_MPU_ConfigRegion>

	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8011282:	2004      	movs	r0, #4
 8011284:	f7f3 fa68 	bl	8004758 <HAL_MPU_Enable>
}
 8011288:	bf00      	nop
 801128a:	3710      	adds	r7, #16
 801128c:	46bd      	mov	sp, r7
 801128e:	bd80      	pop	{r7, pc}

08011290 <CPU_CACHE_Enable>:

static void CPU_CACHE_Enable(void) {
 8011290:	b480      	push	{r7}
 8011292:	b085      	sub	sp, #20
 8011294:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8011296:	4b34      	ldr	r3, [pc, #208]	@ (8011368 <CPU_CACHE_Enable+0xd8>)
 8011298:	695b      	ldr	r3, [r3, #20]
 801129a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d11b      	bne.n	80112da <CPU_CACHE_Enable+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 80112a2:	f3bf 8f4f 	dsb	sy
}
 80112a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80112a8:	f3bf 8f6f 	isb	sy
}
 80112ac:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80112ae:	4b2e      	ldr	r3, [pc, #184]	@ (8011368 <CPU_CACHE_Enable+0xd8>)
 80112b0:	2200      	movs	r2, #0
 80112b2:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80112b6:	f3bf 8f4f 	dsb	sy
}
 80112ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80112bc:	f3bf 8f6f 	isb	sy
}
 80112c0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80112c2:	4b29      	ldr	r3, [pc, #164]	@ (8011368 <CPU_CACHE_Enable+0xd8>)
 80112c4:	695b      	ldr	r3, [r3, #20]
 80112c6:	4a28      	ldr	r2, [pc, #160]	@ (8011368 <CPU_CACHE_Enable+0xd8>)
 80112c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80112cc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80112ce:	f3bf 8f4f 	dsb	sy
}
 80112d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80112d4:	f3bf 8f6f 	isb	sy
}
 80112d8:	e000      	b.n	80112dc <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80112da:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80112dc:	4b22      	ldr	r3, [pc, #136]	@ (8011368 <CPU_CACHE_Enable+0xd8>)
 80112de:	695b      	ldr	r3, [r3, #20]
 80112e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d138      	bne.n	801135a <CPU_CACHE_Enable+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80112e8:	4b1f      	ldr	r3, [pc, #124]	@ (8011368 <CPU_CACHE_Enable+0xd8>)
 80112ea:	2200      	movs	r2, #0
 80112ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80112f0:	f3bf 8f4f 	dsb	sy
}
 80112f4:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80112f6:	4b1c      	ldr	r3, [pc, #112]	@ (8011368 <CPU_CACHE_Enable+0xd8>)
 80112f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80112fc:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	0b5b      	lsrs	r3, r3, #13
 8011302:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8011306:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	08db      	lsrs	r3, r3, #3
 801130c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011310:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8011312:	68bb      	ldr	r3, [r7, #8]
 8011314:	015a      	lsls	r2, r3, #5
 8011316:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 801131a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 801131c:	687a      	ldr	r2, [r7, #4]
 801131e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8011320:	4911      	ldr	r1, [pc, #68]	@ (8011368 <CPU_CACHE_Enable+0xd8>)
 8011322:	4313      	orrs	r3, r2
 8011324:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	1e5a      	subs	r2, r3, #1
 801132c:	607a      	str	r2, [r7, #4]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d1ef      	bne.n	8011312 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 8011332:	68bb      	ldr	r3, [r7, #8]
 8011334:	1e5a      	subs	r2, r3, #1
 8011336:	60ba      	str	r2, [r7, #8]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d1e5      	bne.n	8011308 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 801133c:	f3bf 8f4f 	dsb	sy
}
 8011340:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8011342:	4b09      	ldr	r3, [pc, #36]	@ (8011368 <CPU_CACHE_Enable+0xd8>)
 8011344:	695b      	ldr	r3, [r3, #20]
 8011346:	4a08      	ldr	r2, [pc, #32]	@ (8011368 <CPU_CACHE_Enable+0xd8>)
 8011348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801134c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 801134e:	f3bf 8f4f 	dsb	sy
}
 8011352:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011354:	f3bf 8f6f 	isb	sy
}
 8011358:	e000      	b.n	801135c <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 801135a:	bf00      	nop
	/* Enable I-Cache */
	SCB_EnableICache();

	/* Enable D-Cache */
	SCB_EnableDCache();
}
 801135c:	bf00      	nop
 801135e:	3714      	adds	r7, #20
 8011360:	46bd      	mov	sp, r7
 8011362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011366:	4770      	bx	lr
 8011368:	e000ed00 	.word	0xe000ed00

0801136c <LED_Blink>:

static void LED_Blink(uint32_t Hdelay, uint32_t Ldelay) {
 801136c:	b580      	push	{r7, lr}
 801136e:	b082      	sub	sp, #8
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
 8011374:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, GPIO_PIN_SET);
 8011376:	2201      	movs	r2, #1
 8011378:	2108      	movs	r1, #8
 801137a:	480b      	ldr	r0, [pc, #44]	@ (80113a8 <LED_Blink+0x3c>)
 801137c:	f7f3 fc14 	bl	8004ba8 <HAL_GPIO_WritePin>
	HAL_Delay(Hdelay - 1);
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	3b01      	subs	r3, #1
 8011384:	4618      	mov	r0, r3
 8011386:	f7f1 fb33 	bl	80029f0 <HAL_Delay>
	HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, GPIO_PIN_RESET);
 801138a:	2200      	movs	r2, #0
 801138c:	2108      	movs	r1, #8
 801138e:	4806      	ldr	r0, [pc, #24]	@ (80113a8 <LED_Blink+0x3c>)
 8011390:	f7f3 fc0a 	bl	8004ba8 <HAL_GPIO_WritePin>
	HAL_Delay(Ldelay - 1);
 8011394:	683b      	ldr	r3, [r7, #0]
 8011396:	3b01      	subs	r3, #1
 8011398:	4618      	mov	r0, r3
 801139a:	f7f1 fb29 	bl	80029f0 <HAL_Delay>
}
 801139e:	bf00      	nop
 80113a0:	3708      	adds	r7, #8
 80113a2:	46bd      	mov	sp, r7
 80113a4:	bd80      	pop	{r7, pc}
 80113a6:	bf00      	nop
 80113a8:	58021000 	.word	0x58021000

080113ac <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80113ac:	b580      	push	{r7, lr}
 80113ae:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */
#ifdef W25Qxx
    SCB->VTOR = QSPI_BASE;
  #endif
	MPU_Config();
 80113b0:	f7ff ff26 	bl	8011200 <MPU_Config>
	CPU_CACHE_Enable();
 80113b4:	f7ff ff6c 	bl	8011290 <CPU_CACHE_Enable>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80113b8:	f7f1 fa88 	bl	80028cc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80113bc:	f000 f85a 	bl	8011474 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80113c0:	f000 f8e6 	bl	8011590 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80113c4:	f7ff fa32 	bl	801082c <MX_GPIO_Init>
	MX_RTC_Init();
 80113c8:	f000 f922 	bl	8011610 <MX_RTC_Init>
	MX_SPI4_Init();
 80113cc:	f000 fc22 	bl	8011c14 <MX_SPI4_Init>
	MX_TIM1_Init();
 80113d0:	f000 ff44 	bl	801225c <MX_TIM1_Init>
	MX_ADC1_Init();
 80113d4:	f7fe fe68 	bl	80100a8 <MX_ADC1_Init>
	MX_LPTIM1_Init();
 80113d8:	f7ff fc78 	bl	8010ccc <MX_LPTIM1_Init>
	MX_LPTIM2_Init();
 80113dc:	f7ff fcaa 	bl	8010d34 <MX_LPTIM2_Init>
	MX_SPI1_Init();
 80113e0:	f000 fb6c 	bl	8011abc <MX_SPI1_Init>
	MX_SPI2_Init();
 80113e4:	f000 fbc0 	bl	8011b68 <MX_SPI2_Init>
	MX_TIM8_Init();
 80113e8:	f000 ffe4 	bl	80123b4 <MX_TIM8_Init>
	MX_LPTIM3_Init();
 80113ec:	f7ff fcd6 	bl	8010d9c <MX_LPTIM3_Init>
	MX_I2C1_Init();
 80113f0:	f7ff fb22 	bl	8010a38 <MX_I2C1_Init>
	MX_LPTIM4_Init();
 80113f4:	f7ff fcfc 	bl	8010df0 <MX_LPTIM4_Init>
	MX_LPTIM5_Init();
 80113f8:	f7ff fd22 	bl	8010e40 <MX_LPTIM5_Init>
	MX_ADC3_Init();
 80113fc:	f7ff f820 	bl	8010440 <MX_ADC3_Init>
	MX_I2C4_Init();
 8011400:	f7ff fb5a 	bl	8010ab8 <MX_I2C4_Init>
	MX_SDMMC1_SD_Init();
 8011404:	f000 faca 	bl	801199c <MX_SDMMC1_SD_Init>
	MX_TIM15_Init();
 8011408:	f001 f870 	bl	80124ec <MX_TIM15_Init>
	MX_ADC2_Init();
 801140c:	f7fe ffae 	bl	801036c <MX_ADC2_Init>
	MX_FATFS_Init();
 8011410:	f7ff f9fa 	bl	8010808 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */
	Motor_Init();
 8011414:	f7fd fe9a 	bl	800f14c <Motor_Init>
	Custom_LCD_Clear();
 8011418:	f7ef fed2 	bl	80011c0 <Custom_LCD_Clear>
//	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
//	__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,10);
	HAL_GPIO_WritePin(E3_GPIO_Port, MARK_L_Pin | MARK_R_Pin | E3_Pin,
 801141c:	2201      	movs	r2, #1
 801141e:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8011422:	4812      	ldr	r0, [pc, #72]	@ (801146c <main+0xc0>)
 8011424:	f7f3 fbc0 	bl	8004ba8 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8011428:	2100      	movs	r1, #0
 801142a:	4811      	ldr	r0, [pc, #68]	@ (8011470 <main+0xc4>)
 801142c:	f7fb f8d4 	bl	800c5d8 <HAL_TIM_PWM_Start>
	__HAL_TIM_SetCompare(&htim15,TIM_CHANNEL_1, 5);
 8011430:	4b0f      	ldr	r3, [pc, #60]	@ (8011470 <main+0xc4>)
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	2205      	movs	r2, #5
 8011436:	635a      	str	r2, [r3, #52]	@ 0x34
	LCD_Test();
 8011438:	f7ef f99e 	bl	8000778 <LCD_Test>
	__HAL_TIM_SetCompare(&htim15, TIM_CHANNEL_1, 0);
 801143c:	4b0c      	ldr	r3, [pc, #48]	@ (8011470 <main+0xc4>)
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	2200      	movs	r2, #0
 8011442:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 8011444:	2100      	movs	r1, #0
 8011446:	480a      	ldr	r0, [pc, #40]	@ (8011470 <main+0xc4>)
 8011448:	f7fb f9d4 	bl	800c7f4 <HAL_TIM_PWM_Stop>
	Custom_LCD_Clear();
 801144c:	f7ef feb8 	bl	80011c0 <Custom_LCD_Clear>
	/* USER CODE BEGIN WHILE */
//	MCF8316C_Init();
//	uint8_t text[20];
//	RTC_DateTypeDef sdatestructureget;
//	RTC_TimeTypeDef stimestructureget;
	HAL_GPIO_WritePin(E3_GPIO_Port, MARK_L_Pin | MARK_R_Pin | E3_Pin,
 8011450:	2200      	movs	r2, #0
 8011452:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8011456:	4805      	ldr	r0, [pc, #20]	@ (801146c <main+0xc0>)
 8011458:	f7f3 fba6 	bl	8004ba8 <HAL_GPIO_WritePin>
//			sprintf((char *)&text,"Time: %02d %02d", stimestructureget.Hours, stimestructureget.Minutes);
//		LCD_ShowString(4, 58, 160, 16, 16, text);
//
//		sprintf((char *)&text,"Tick: %d ms",HAL_GetTick());
//		LCD_ShowString(4, 74, 160, 16, 16,text);
		HAL_Delay(500);
 801145c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011460:	f7f1 fac6 	bl	80029f0 <HAL_Delay>
		Init();
 8011464:	f7fd f884 	bl	800e570 <Init>
		HAL_Delay(500);
 8011468:	bf00      	nop
 801146a:	e7f7      	b.n	801145c <main+0xb0>
 801146c:	58021000 	.word	0x58021000
 8011470:	240010b8 	.word	0x240010b8

08011474 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8011474:	b580      	push	{r7, lr}
 8011476:	b09c      	sub	sp, #112	@ 0x70
 8011478:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 801147a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801147e:	224c      	movs	r2, #76	@ 0x4c
 8011480:	2100      	movs	r1, #0
 8011482:	4618      	mov	r0, r3
 8011484:	f002 f958 	bl	8013738 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8011488:	1d3b      	adds	r3, r7, #4
 801148a:	2220      	movs	r2, #32
 801148c:	2100      	movs	r1, #0
 801148e:	4618      	mov	r0, r3
 8011490:	f002 f952 	bl	8013738 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8011494:	2002      	movs	r0, #2
 8011496:	f7f4 fe3d 	bl	8006114 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 801149a:	2300      	movs	r3, #0
 801149c:	603b      	str	r3, [r7, #0]
 801149e:	4b39      	ldr	r3, [pc, #228]	@ (8011584 <SystemClock_Config+0x110>)
 80114a0:	699b      	ldr	r3, [r3, #24]
 80114a2:	4a38      	ldr	r2, [pc, #224]	@ (8011584 <SystemClock_Config+0x110>)
 80114a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80114a8:	6193      	str	r3, [r2, #24]
 80114aa:	4b36      	ldr	r3, [pc, #216]	@ (8011584 <SystemClock_Config+0x110>)
 80114ac:	699b      	ldr	r3, [r3, #24]
 80114ae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80114b2:	603b      	str	r3, [r7, #0]
 80114b4:	4b34      	ldr	r3, [pc, #208]	@ (8011588 <SystemClock_Config+0x114>)
 80114b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114b8:	4a33      	ldr	r2, [pc, #204]	@ (8011588 <SystemClock_Config+0x114>)
 80114ba:	f043 0301 	orr.w	r3, r3, #1
 80114be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80114c0:	4b31      	ldr	r3, [pc, #196]	@ (8011588 <SystemClock_Config+0x114>)
 80114c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114c4:	f003 0301 	and.w	r3, r3, #1
 80114c8:	603b      	str	r3, [r7, #0]
 80114ca:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 80114cc:	bf00      	nop
 80114ce:	4b2d      	ldr	r3, [pc, #180]	@ (8011584 <SystemClock_Config+0x110>)
 80114d0:	699b      	ldr	r3, [r3, #24]
 80114d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80114d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80114da:	d1f8      	bne.n	80114ce <SystemClock_Config+0x5a>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80114dc:	f7f4 fe0a 	bl	80060f4 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80114e0:	f7f1 faaa 	bl	8002a38 <HAL_GetREVID>
 80114e4:	4b29      	ldr	r3, [pc, #164]	@ (801158c <SystemClock_Config+0x118>)
 80114e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80114e8:	4a28      	ldr	r2, [pc, #160]	@ (801158c <SystemClock_Config+0x118>)
 80114ea:	f023 0318 	bic.w	r3, r3, #24
 80114ee:	6713      	str	r3, [r2, #112]	@ 0x70

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80114f0:	230f      	movs	r3, #15
 80114f2:	627b      	str	r3, [r7, #36]	@ 0x24
			| RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80114f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80114f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80114fa:	2301      	movs	r3, #1
 80114fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80114fe:	2301      	movs	r3, #1
 8011500:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8011502:	2340      	movs	r3, #64	@ 0x40
 8011504:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8011506:	2301      	movs	r3, #1
 8011508:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801150a:	2302      	movs	r3, #2
 801150c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801150e:	2302      	movs	r3, #2
 8011510:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 5;
 8011512:	2305      	movs	r3, #5
 8011514:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 192;
 8011516:	23c0      	movs	r3, #192	@ 0xc0
 8011518:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 801151a:	2302      	movs	r3, #2
 801151c:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 801151e:	2304      	movs	r3, #4
 8011520:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8011522:	2302      	movs	r3, #2
 8011524:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8011526:	2308      	movs	r3, #8
 8011528:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 801152a:	2300      	movs	r3, #0
 801152c:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 801152e:	2300      	movs	r3, #0
 8011530:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8011532:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011536:	4618      	mov	r0, r3
 8011538:	f7f4 fe26 	bl	8006188 <HAL_RCC_OscConfig>
 801153c:	4603      	mov	r3, r0
 801153e:	2b00      	cmp	r3, #0
 8011540:	d001      	beq.n	8011546 <SystemClock_Config+0xd2>
		Error_Handler();
 8011542:	f000 f85b 	bl	80115fc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8011546:	233f      	movs	r3, #63	@ 0x3f
 8011548:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801154a:	2303      	movs	r3, #3
 801154c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 801154e:	2300      	movs	r3, #0
 8011550:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8011552:	2308      	movs	r3, #8
 8011554:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8011556:	2340      	movs	r3, #64	@ 0x40
 8011558:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 801155a:	2340      	movs	r3, #64	@ 0x40
 801155c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 801155e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011562:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8011564:	2340      	movs	r3, #64	@ 0x40
 8011566:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8011568:	1d3b      	adds	r3, r7, #4
 801156a:	2104      	movs	r1, #4
 801156c:	4618      	mov	r0, r3
 801156e:	f7f5 fa65 	bl	8006a3c <HAL_RCC_ClockConfig>
 8011572:	4603      	mov	r3, r0
 8011574:	2b00      	cmp	r3, #0
 8011576:	d001      	beq.n	801157c <SystemClock_Config+0x108>
		Error_Handler();
 8011578:	f000 f840 	bl	80115fc <Error_Handler>
	}
}
 801157c:	bf00      	nop
 801157e:	3770      	adds	r7, #112	@ 0x70
 8011580:	46bd      	mov	sp, r7
 8011582:	bd80      	pop	{r7, pc}
 8011584:	58024800 	.word	0x58024800
 8011588:	58000400 	.word	0x58000400
 801158c:	58024400 	.word	0x58024400

08011590 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8011590:	b580      	push	{r7, lr}
 8011592:	b0b0      	sub	sp, #192	@ 0xc0
 8011594:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8011596:	463b      	mov	r3, r7
 8011598:	22c0      	movs	r2, #192	@ 0xc0
 801159a:	2100      	movs	r1, #0
 801159c:	4618      	mov	r0, r3
 801159e:	f002 f8cb 	bl	8013738 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC
 80115a2:	4a15      	ldr	r2, [pc, #84]	@ (80115f8 <PeriphCommonClock_Config+0x68>)
 80115a4:	f04f 0300 	mov.w	r3, #0
 80115a8:	e9c7 2300 	strd	r2, r3, [r7]
			| RCC_PERIPHCLK_SDMMC | RCC_PERIPHCLK_CKPER;
	PeriphClkInitStruct.PLL2.PLL2M = 25;
 80115ac:	2319      	movs	r3, #25
 80115ae:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 200;
 80115b0:	23c8      	movs	r3, #200	@ 0xc8
 80115b2:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 2;
 80115b4:	2302      	movs	r3, #2
 80115b6:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 1;
 80115b8:	2301      	movs	r3, #1
 80115ba:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 8;
 80115bc:	2308      	movs	r3, #8
 80115be:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80115c0:	2300      	movs	r3, #0
 80115c2:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80115c4:	2300      	movs	r3, #0
 80115c6:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80115c8:	2300      	movs	r3, #0
 80115ca:	627b      	str	r3, [r7, #36]	@ 0x24
	PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80115cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80115d0:	653b      	str	r3, [r7, #80]	@ 0x50
	PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80115d2:	2300      	movs	r3, #0
 80115d4:	657b      	str	r3, [r7, #84]	@ 0x54
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80115d6:	2300      	movs	r3, #0
 80115d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80115dc:	463b      	mov	r3, r7
 80115de:	4618      	mov	r0, r3
 80115e0:	f7f5 fda2 	bl	8007128 <HAL_RCCEx_PeriphCLKConfig>
 80115e4:	4603      	mov	r3, r0
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d001      	beq.n	80115ee <PeriphCommonClock_Config+0x5e>
		Error_Handler();
 80115ea:	f000 f807 	bl	80115fc <Error_Handler>
	}
}
 80115ee:	bf00      	nop
 80115f0:	37c0      	adds	r7, #192	@ 0xc0
 80115f2:	46bd      	mov	sp, r7
 80115f4:	bd80      	pop	{r7, pc}
 80115f6:	bf00      	nop
 80115f8:	80090000 	.word	0x80090000

080115fc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80115fc:	b580      	push	{r7, lr}
 80115fe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	LED_Blink(500, 500);
 8011600:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8011604:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011608:	f7ff feb0 	bl	801136c <LED_Blink>

	/* USER CODE END Error_Handler_Debug */
}
 801160c:	bf00      	nop
 801160e:	bd80      	pop	{r7, pc}

08011610 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8011610:	b580      	push	{r7, lr}
 8011612:	b086      	sub	sp, #24
 8011614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8011616:	1d3b      	adds	r3, r7, #4
 8011618:	2200      	movs	r2, #0
 801161a:	601a      	str	r2, [r3, #0]
 801161c:	605a      	str	r2, [r3, #4]
 801161e:	609a      	str	r2, [r3, #8]
 8011620:	60da      	str	r2, [r3, #12]
 8011622:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8011624:	2300      	movs	r3, #0
 8011626:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8011628:	4b4d      	ldr	r3, [pc, #308]	@ (8011760 <MX_RTC_Init+0x150>)
 801162a:	4a4e      	ldr	r2, [pc, #312]	@ (8011764 <MX_RTC_Init+0x154>)
 801162c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 801162e:	4b4c      	ldr	r3, [pc, #304]	@ (8011760 <MX_RTC_Init+0x150>)
 8011630:	2200      	movs	r2, #0
 8011632:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8011634:	4b4a      	ldr	r3, [pc, #296]	@ (8011760 <MX_RTC_Init+0x150>)
 8011636:	227f      	movs	r2, #127	@ 0x7f
 8011638:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 801163a:	4b49      	ldr	r3, [pc, #292]	@ (8011760 <MX_RTC_Init+0x150>)
 801163c:	22ff      	movs	r2, #255	@ 0xff
 801163e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8011640:	4b47      	ldr	r3, [pc, #284]	@ (8011760 <MX_RTC_Init+0x150>)
 8011642:	2200      	movs	r2, #0
 8011644:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8011646:	4b46      	ldr	r3, [pc, #280]	@ (8011760 <MX_RTC_Init+0x150>)
 8011648:	2200      	movs	r2, #0
 801164a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 801164c:	4b44      	ldr	r3, [pc, #272]	@ (8011760 <MX_RTC_Init+0x150>)
 801164e:	2200      	movs	r2, #0
 8011650:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8011652:	4b43      	ldr	r3, [pc, #268]	@ (8011760 <MX_RTC_Init+0x150>)
 8011654:	2200      	movs	r2, #0
 8011656:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8011658:	4841      	ldr	r0, [pc, #260]	@ (8011760 <MX_RTC_Init+0x150>)
 801165a:	f7f8 fa63 	bl	8009b24 <HAL_RTC_Init>
 801165e:	4603      	mov	r3, r0
 8011660:	2b00      	cmp	r3, #0
 8011662:	d001      	beq.n	8011668 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8011664:	f7ff ffca 	bl	80115fc <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2)
 8011668:	2101      	movs	r1, #1
 801166a:	483d      	ldr	r0, [pc, #244]	@ (8011760 <MX_RTC_Init+0x150>)
 801166c:	f7f8 fcd0 	bl	800a010 <HAL_RTCEx_BKUPRead>
 8011670:	4603      	mov	r3, r0
 8011672:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8011676:	4293      	cmp	r3, r2
 8011678:	d019      	beq.n	80116ae <MX_RTC_Init+0x9e>
  {
    /* Configure RTC Calendar */
	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 801167a:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 801167e:	2101      	movs	r1, #1
 8011680:	4837      	ldr	r0, [pc, #220]	@ (8011760 <MX_RTC_Init+0x150>)
 8011682:	f7f8 fcad 	bl	8009fe0 <HAL_RTCEx_BKUPWrite>
  }
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 8011686:	2312      	movs	r3, #18
 8011688:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 801168a:	2300      	movs	r3, #0
 801168c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 801168e:	2300      	movs	r3, #0
 8011690:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8011692:	2300      	movs	r3, #0
 8011694:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8011696:	2300      	movs	r3, #0
 8011698:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 801169a:	1d3b      	adds	r3, r7, #4
 801169c:	2201      	movs	r2, #1
 801169e:	4619      	mov	r1, r3
 80116a0:	482f      	ldr	r0, [pc, #188]	@ (8011760 <MX_RTC_Init+0x150>)
 80116a2:	f7f8 fac1 	bl	8009c28 <HAL_RTC_SetTime>
 80116a6:	4603      	mov	r3, r0
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d043      	beq.n	8011734 <MX_RTC_Init+0x124>
 80116ac:	e040      	b.n	8011730 <MX_RTC_Init+0x120>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 80116ae:	4b2e      	ldr	r3, [pc, #184]	@ (8011768 <MX_RTC_Init+0x158>)
 80116b0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80116b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d00c      	beq.n	80116d6 <MX_RTC_Init+0xc6>
		 HAL_GPIO_WritePin(E3_GPIO_Port,E3_Pin,GPIO_PIN_SET);
 80116bc:	2201      	movs	r2, #1
 80116be:	2108      	movs	r1, #8
 80116c0:	482a      	ldr	r0, [pc, #168]	@ (801176c <MX_RTC_Init+0x15c>)
 80116c2:	f7f3 fa71 	bl	8004ba8 <HAL_GPIO_WritePin>
		 HAL_Delay(10-1);
 80116c6:	2009      	movs	r0, #9
 80116c8:	f7f1 f992 	bl	80029f0 <HAL_Delay>
		 HAL_GPIO_WritePin(E3_GPIO_Port,E3_Pin,GPIO_PIN_RESET);
 80116cc:	2200      	movs	r2, #0
 80116ce:	2108      	movs	r1, #8
 80116d0:	4826      	ldr	r0, [pc, #152]	@ (801176c <MX_RTC_Init+0x15c>)
 80116d2:	f7f3 fa69 	bl	8004ba8 <HAL_GPIO_WritePin>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 80116d6:	4b24      	ldr	r3, [pc, #144]	@ (8011768 <MX_RTC_Init+0x158>)
 80116d8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80116dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d01c      	beq.n	801171e <MX_RTC_Init+0x10e>
		 HAL_GPIO_WritePin(E3_GPIO_Port,E3_Pin,GPIO_PIN_SET);
 80116e4:	2201      	movs	r2, #1
 80116e6:	2108      	movs	r1, #8
 80116e8:	4820      	ldr	r0, [pc, #128]	@ (801176c <MX_RTC_Init+0x15c>)
 80116ea:	f7f3 fa5d 	bl	8004ba8 <HAL_GPIO_WritePin>
		 HAL_Delay(10-1);
 80116ee:	2009      	movs	r0, #9
 80116f0:	f7f1 f97e 	bl	80029f0 <HAL_Delay>
		 HAL_GPIO_WritePin(E3_GPIO_Port,E3_Pin,GPIO_PIN_RESET);
 80116f4:	2200      	movs	r2, #0
 80116f6:	2108      	movs	r1, #8
 80116f8:	481c      	ldr	r0, [pc, #112]	@ (801176c <MX_RTC_Init+0x15c>)
 80116fa:	f7f3 fa55 	bl	8004ba8 <HAL_GPIO_WritePin>
		 HAL_Delay(100-1);
 80116fe:	2063      	movs	r0, #99	@ 0x63
 8011700:	f7f1 f976 	bl	80029f0 <HAL_Delay>
		 HAL_GPIO_WritePin(E3_GPIO_Port,E3_Pin,GPIO_PIN_SET);
 8011704:	2201      	movs	r2, #1
 8011706:	2108      	movs	r1, #8
 8011708:	4818      	ldr	r0, [pc, #96]	@ (801176c <MX_RTC_Init+0x15c>)
 801170a:	f7f3 fa4d 	bl	8004ba8 <HAL_GPIO_WritePin>
		 HAL_Delay(10-1);
 801170e:	2009      	movs	r0, #9
 8011710:	f7f1 f96e 	bl	80029f0 <HAL_Delay>
		 HAL_GPIO_WritePin(E3_GPIO_Port,E3_Pin,GPIO_PIN_RESET);
 8011714:	2200      	movs	r2, #0
 8011716:	2108      	movs	r1, #8
 8011718:	4814      	ldr	r0, [pc, #80]	@ (801176c <MX_RTC_Init+0x15c>)
 801171a:	f7f3 fa45 	bl	8004ba8 <HAL_GPIO_WritePin>
    __HAL_RCC_CLEAR_RESET_FLAGS();
 801171e:	4b12      	ldr	r3, [pc, #72]	@ (8011768 <MX_RTC_Init+0x158>)
 8011720:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8011724:	4a10      	ldr	r2, [pc, #64]	@ (8011768 <MX_RTC_Init+0x158>)
 8011726:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801172a:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
 801172e:	e014      	b.n	801175a <MX_RTC_Init+0x14a>
  {
    Error_Handler();
 8011730:	f7ff ff64 	bl	80115fc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8011734:	2301      	movs	r3, #1
 8011736:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JUNE;
 8011738:	2306      	movs	r3, #6
 801173a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 801173c:	2301      	movs	r3, #1
 801173e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x20;
 8011740:	2320      	movs	r3, #32
 8011742:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8011744:	463b      	mov	r3, r7
 8011746:	2201      	movs	r2, #1
 8011748:	4619      	mov	r1, r3
 801174a:	4805      	ldr	r0, [pc, #20]	@ (8011760 <MX_RTC_Init+0x150>)
 801174c:	f7f8 fb0a 	bl	8009d64 <HAL_RTC_SetDate>
 8011750:	4603      	mov	r3, r0
 8011752:	2b00      	cmp	r3, #0
 8011754:	d001      	beq.n	801175a <MX_RTC_Init+0x14a>
  {
    Error_Handler();
 8011756:	f7ff ff51 	bl	80115fc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 801175a:	3718      	adds	r7, #24
 801175c:	46bd      	mov	sp, r7
 801175e:	bd80      	pop	{r7, pc}
 8011760:	24000de4 	.word	0x24000de4
 8011764:	58004000 	.word	0x58004000
 8011768:	58024400 	.word	0x58024400
 801176c:	58021000 	.word	0x58021000

08011770 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8011770:	b580      	push	{r7, lr}
 8011772:	b0b2      	sub	sp, #200	@ 0xc8
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011778:	f107 0308 	add.w	r3, r7, #8
 801177c:	22c0      	movs	r2, #192	@ 0xc0
 801177e:	2100      	movs	r1, #0
 8011780:	4618      	mov	r0, r3
 8011782:	f001 ffd9 	bl	8013738 <memset>
  if(rtcHandle->Instance==RTC)
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	4a10      	ldr	r2, [pc, #64]	@ (80117cc <HAL_RTC_MspInit+0x5c>)
 801178c:	4293      	cmp	r3, r2
 801178e:	d119      	bne.n	80117c4 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8011790:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8011794:	f04f 0300 	mov.w	r3, #0
 8011798:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 801179c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80117a0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80117a4:	f107 0308 	add.w	r3, r7, #8
 80117a8:	4618      	mov	r0, r3
 80117aa:	f7f5 fcbd 	bl	8007128 <HAL_RCCEx_PeriphCLKConfig>
 80117ae:	4603      	mov	r3, r0
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d001      	beq.n	80117b8 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80117b4:	f7ff ff22 	bl	80115fc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80117b8:	4b05      	ldr	r3, [pc, #20]	@ (80117d0 <HAL_RTC_MspInit+0x60>)
 80117ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80117bc:	4a04      	ldr	r2, [pc, #16]	@ (80117d0 <HAL_RTC_MspInit+0x60>)
 80117be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80117c2:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80117c4:	bf00      	nop
 80117c6:	37c8      	adds	r7, #200	@ 0xc8
 80117c8:	46bd      	mov	sp, r7
 80117ca:	bd80      	pop	{r7, pc}
 80117cc:	58004000 	.word	0x58004000
 80117d0:	58024400 	.word	0x58024400

080117d4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80117d4:	b580      	push	{r7, lr}
 80117d6:	b082      	sub	sp, #8
 80117d8:	af00      	add	r7, sp, #0
 80117da:	4603      	mov	r3, r0
 80117dc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80117de:	4b0b      	ldr	r3, [pc, #44]	@ (801180c <SD_CheckStatus+0x38>)
 80117e0:	2201      	movs	r2, #1
 80117e2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80117e4:	f7fe ffe4 	bl	80107b0 <BSP_SD_GetCardState>
 80117e8:	4603      	mov	r3, r0
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d107      	bne.n	80117fe <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80117ee:	4b07      	ldr	r3, [pc, #28]	@ (801180c <SD_CheckStatus+0x38>)
 80117f0:	781b      	ldrb	r3, [r3, #0]
 80117f2:	b2db      	uxtb	r3, r3
 80117f4:	f023 0301 	bic.w	r3, r3, #1
 80117f8:	b2da      	uxtb	r2, r3
 80117fa:	4b04      	ldr	r3, [pc, #16]	@ (801180c <SD_CheckStatus+0x38>)
 80117fc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80117fe:	4b03      	ldr	r3, [pc, #12]	@ (801180c <SD_CheckStatus+0x38>)
 8011800:	781b      	ldrb	r3, [r3, #0]
 8011802:	b2db      	uxtb	r3, r3
}
 8011804:	4618      	mov	r0, r3
 8011806:	3708      	adds	r7, #8
 8011808:	46bd      	mov	sp, r7
 801180a:	bd80      	pop	{r7, pc}
 801180c:	24000385 	.word	0x24000385

08011810 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011810:	b580      	push	{r7, lr}
 8011812:	b082      	sub	sp, #8
 8011814:	af00      	add	r7, sp, #0
 8011816:	4603      	mov	r3, r0
 8011818:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 801181a:	4b0b      	ldr	r3, [pc, #44]	@ (8011848 <SD_initialize+0x38>)
 801181c:	2201      	movs	r2, #1
 801181e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8011820:	f7fe ff64 	bl	80106ec <BSP_SD_Init>
 8011824:	4603      	mov	r3, r0
 8011826:	2b00      	cmp	r3, #0
 8011828:	d107      	bne.n	801183a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 801182a:	79fb      	ldrb	r3, [r7, #7]
 801182c:	4618      	mov	r0, r3
 801182e:	f7ff ffd1 	bl	80117d4 <SD_CheckStatus>
 8011832:	4603      	mov	r3, r0
 8011834:	461a      	mov	r2, r3
 8011836:	4b04      	ldr	r3, [pc, #16]	@ (8011848 <SD_initialize+0x38>)
 8011838:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 801183a:	4b03      	ldr	r3, [pc, #12]	@ (8011848 <SD_initialize+0x38>)
 801183c:	781b      	ldrb	r3, [r3, #0]
 801183e:	b2db      	uxtb	r3, r3
}
 8011840:	4618      	mov	r0, r3
 8011842:	3708      	adds	r7, #8
 8011844:	46bd      	mov	sp, r7
 8011846:	bd80      	pop	{r7, pc}
 8011848:	24000385 	.word	0x24000385

0801184c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801184c:	b580      	push	{r7, lr}
 801184e:	b082      	sub	sp, #8
 8011850:	af00      	add	r7, sp, #0
 8011852:	4603      	mov	r3, r0
 8011854:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8011856:	79fb      	ldrb	r3, [r7, #7]
 8011858:	4618      	mov	r0, r3
 801185a:	f7ff ffbb 	bl	80117d4 <SD_CheckStatus>
 801185e:	4603      	mov	r3, r0
}
 8011860:	4618      	mov	r0, r3
 8011862:	3708      	adds	r7, #8
 8011864:	46bd      	mov	sp, r7
 8011866:	bd80      	pop	{r7, pc}

08011868 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011868:	b580      	push	{r7, lr}
 801186a:	b086      	sub	sp, #24
 801186c:	af00      	add	r7, sp, #0
 801186e:	60b9      	str	r1, [r7, #8]
 8011870:	607a      	str	r2, [r7, #4]
 8011872:	603b      	str	r3, [r7, #0]
 8011874:	4603      	mov	r3, r0
 8011876:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011878:	2301      	movs	r3, #1
 801187a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 801187c:	f04f 33ff 	mov.w	r3, #4294967295
 8011880:	683a      	ldr	r2, [r7, #0]
 8011882:	6879      	ldr	r1, [r7, #4]
 8011884:	68b8      	ldr	r0, [r7, #8]
 8011886:	f7fe ff57 	bl	8010738 <BSP_SD_ReadBlocks>
 801188a:	4603      	mov	r3, r0
 801188c:	2b00      	cmp	r3, #0
 801188e:	d107      	bne.n	80118a0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8011890:	bf00      	nop
 8011892:	f7fe ff8d 	bl	80107b0 <BSP_SD_GetCardState>
 8011896:	4603      	mov	r3, r0
 8011898:	2b00      	cmp	r3, #0
 801189a:	d1fa      	bne.n	8011892 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 801189c:	2300      	movs	r3, #0
 801189e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80118a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80118a2:	4618      	mov	r0, r3
 80118a4:	3718      	adds	r7, #24
 80118a6:	46bd      	mov	sp, r7
 80118a8:	bd80      	pop	{r7, pc}

080118aa <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80118aa:	b580      	push	{r7, lr}
 80118ac:	b086      	sub	sp, #24
 80118ae:	af00      	add	r7, sp, #0
 80118b0:	60b9      	str	r1, [r7, #8]
 80118b2:	607a      	str	r2, [r7, #4]
 80118b4:	603b      	str	r3, [r7, #0]
 80118b6:	4603      	mov	r3, r0
 80118b8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80118ba:	2301      	movs	r3, #1
 80118bc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80118be:	f04f 33ff 	mov.w	r3, #4294967295
 80118c2:	683a      	ldr	r2, [r7, #0]
 80118c4:	6879      	ldr	r1, [r7, #4]
 80118c6:	68b8      	ldr	r0, [r7, #8]
 80118c8:	f7fe ff54 	bl	8010774 <BSP_SD_WriteBlocks>
 80118cc:	4603      	mov	r3, r0
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d107      	bne.n	80118e2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80118d2:	bf00      	nop
 80118d4:	f7fe ff6c 	bl	80107b0 <BSP_SD_GetCardState>
 80118d8:	4603      	mov	r3, r0
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d1fa      	bne.n	80118d4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80118de:	2300      	movs	r3, #0
 80118e0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80118e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80118e4:	4618      	mov	r0, r3
 80118e6:	3718      	adds	r7, #24
 80118e8:	46bd      	mov	sp, r7
 80118ea:	bd80      	pop	{r7, pc}

080118ec <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b08c      	sub	sp, #48	@ 0x30
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	4603      	mov	r3, r0
 80118f4:	603a      	str	r2, [r7, #0]
 80118f6:	71fb      	strb	r3, [r7, #7]
 80118f8:	460b      	mov	r3, r1
 80118fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80118fc:	2301      	movs	r3, #1
 80118fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011902:	4b25      	ldr	r3, [pc, #148]	@ (8011998 <SD_ioctl+0xac>)
 8011904:	781b      	ldrb	r3, [r3, #0]
 8011906:	b2db      	uxtb	r3, r3
 8011908:	f003 0301 	and.w	r3, r3, #1
 801190c:	2b00      	cmp	r3, #0
 801190e:	d001      	beq.n	8011914 <SD_ioctl+0x28>
 8011910:	2303      	movs	r3, #3
 8011912:	e03c      	b.n	801198e <SD_ioctl+0xa2>

  switch (cmd)
 8011914:	79bb      	ldrb	r3, [r7, #6]
 8011916:	2b03      	cmp	r3, #3
 8011918:	d834      	bhi.n	8011984 <SD_ioctl+0x98>
 801191a:	a201      	add	r2, pc, #4	@ (adr r2, 8011920 <SD_ioctl+0x34>)
 801191c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011920:	08011931 	.word	0x08011931
 8011924:	08011939 	.word	0x08011939
 8011928:	08011951 	.word	0x08011951
 801192c:	0801196b 	.word	0x0801196b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011930:	2300      	movs	r3, #0
 8011932:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011936:	e028      	b.n	801198a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011938:	f107 0308 	add.w	r3, r7, #8
 801193c:	4618      	mov	r0, r3
 801193e:	f7fe ff47 	bl	80107d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011942:	6a3a      	ldr	r2, [r7, #32]
 8011944:	683b      	ldr	r3, [r7, #0]
 8011946:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011948:	2300      	movs	r3, #0
 801194a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801194e:	e01c      	b.n	801198a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011950:	f107 0308 	add.w	r3, r7, #8
 8011954:	4618      	mov	r0, r3
 8011956:	f7fe ff3b 	bl	80107d0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801195a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801195c:	b29a      	uxth	r2, r3
 801195e:	683b      	ldr	r3, [r7, #0]
 8011960:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011962:	2300      	movs	r3, #0
 8011964:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011968:	e00f      	b.n	801198a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801196a:	f107 0308 	add.w	r3, r7, #8
 801196e:	4618      	mov	r0, r3
 8011970:	f7fe ff2e 	bl	80107d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011976:	0a5a      	lsrs	r2, r3, #9
 8011978:	683b      	ldr	r3, [r7, #0]
 801197a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801197c:	2300      	movs	r3, #0
 801197e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011982:	e002      	b.n	801198a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011984:	2304      	movs	r3, #4
 8011986:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 801198a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801198e:	4618      	mov	r0, r3
 8011990:	3730      	adds	r7, #48	@ 0x30
 8011992:	46bd      	mov	sp, r7
 8011994:	bd80      	pop	{r7, pc}
 8011996:	bf00      	nop
 8011998:	24000385 	.word	0x24000385

0801199c <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 801199c:	b580      	push	{r7, lr}
 801199e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80119a0:	4b0e      	ldr	r3, [pc, #56]	@ (80119dc <MX_SDMMC1_SD_Init+0x40>)
 80119a2:	4a0f      	ldr	r2, [pc, #60]	@ (80119e0 <MX_SDMMC1_SD_Init+0x44>)
 80119a4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80119a6:	4b0d      	ldr	r3, [pc, #52]	@ (80119dc <MX_SDMMC1_SD_Init+0x40>)
 80119a8:	2200      	movs	r2, #0
 80119aa:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80119ac:	4b0b      	ldr	r3, [pc, #44]	@ (80119dc <MX_SDMMC1_SD_Init+0x40>)
 80119ae:	2200      	movs	r2, #0
 80119b0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80119b2:	4b0a      	ldr	r3, [pc, #40]	@ (80119dc <MX_SDMMC1_SD_Init+0x40>)
 80119b4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80119b8:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80119ba:	4b08      	ldr	r3, [pc, #32]	@ (80119dc <MX_SDMMC1_SD_Init+0x40>)
 80119bc:	2200      	movs	r2, #0
 80119be:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80119c0:	4b06      	ldr	r3, [pc, #24]	@ (80119dc <MX_SDMMC1_SD_Init+0x40>)
 80119c2:	2200      	movs	r2, #0
 80119c4:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80119c6:	4805      	ldr	r0, [pc, #20]	@ (80119dc <MX_SDMMC1_SD_Init+0x40>)
 80119c8:	f7f8 fb38 	bl	800a03c <HAL_SD_Init>
 80119cc:	4603      	mov	r3, r0
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d001      	beq.n	80119d6 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 80119d2:	f7ff fe13 	bl	80115fc <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80119d6:	bf00      	nop
 80119d8:	bd80      	pop	{r7, pc}
 80119da:	bf00      	nop
 80119dc:	24000e08 	.word	0x24000e08
 80119e0:	52007000 	.word	0x52007000

080119e4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b08a      	sub	sp, #40	@ 0x28
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80119ec:	f107 0314 	add.w	r3, r7, #20
 80119f0:	2200      	movs	r2, #0
 80119f2:	601a      	str	r2, [r3, #0]
 80119f4:	605a      	str	r2, [r3, #4]
 80119f6:	609a      	str	r2, [r3, #8]
 80119f8:	60da      	str	r2, [r3, #12]
 80119fa:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	4a2a      	ldr	r2, [pc, #168]	@ (8011aac <HAL_SD_MspInit+0xc8>)
 8011a02:	4293      	cmp	r3, r2
 8011a04:	d14d      	bne.n	8011aa2 <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8011a06:	4b2a      	ldr	r3, [pc, #168]	@ (8011ab0 <HAL_SD_MspInit+0xcc>)
 8011a08:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8011a0c:	4a28      	ldr	r2, [pc, #160]	@ (8011ab0 <HAL_SD_MspInit+0xcc>)
 8011a0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011a12:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8011a16:	4b26      	ldr	r3, [pc, #152]	@ (8011ab0 <HAL_SD_MspInit+0xcc>)
 8011a18:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8011a1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011a20:	613b      	str	r3, [r7, #16]
 8011a22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011a24:	4b22      	ldr	r3, [pc, #136]	@ (8011ab0 <HAL_SD_MspInit+0xcc>)
 8011a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011a2a:	4a21      	ldr	r2, [pc, #132]	@ (8011ab0 <HAL_SD_MspInit+0xcc>)
 8011a2c:	f043 0304 	orr.w	r3, r3, #4
 8011a30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011a34:	4b1e      	ldr	r3, [pc, #120]	@ (8011ab0 <HAL_SD_MspInit+0xcc>)
 8011a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011a3a:	f003 0304 	and.w	r3, r3, #4
 8011a3e:	60fb      	str	r3, [r7, #12]
 8011a40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8011a42:	4b1b      	ldr	r3, [pc, #108]	@ (8011ab0 <HAL_SD_MspInit+0xcc>)
 8011a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011a48:	4a19      	ldr	r2, [pc, #100]	@ (8011ab0 <HAL_SD_MspInit+0xcc>)
 8011a4a:	f043 0308 	orr.w	r3, r3, #8
 8011a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011a52:	4b17      	ldr	r3, [pc, #92]	@ (8011ab0 <HAL_SD_MspInit+0xcc>)
 8011a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011a58:	f003 0308 	and.w	r3, r3, #8
 8011a5c:	60bb      	str	r3, [r7, #8]
 8011a5e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8011a60:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8011a64:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011a66:	2302      	movs	r3, #2
 8011a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011a6e:	2303      	movs	r3, #3
 8011a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8011a72:	230c      	movs	r3, #12
 8011a74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011a76:	f107 0314 	add.w	r3, r7, #20
 8011a7a:	4619      	mov	r1, r3
 8011a7c:	480d      	ldr	r0, [pc, #52]	@ (8011ab4 <HAL_SD_MspInit+0xd0>)
 8011a7e:	f7f2 fecb 	bl	8004818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8011a82:	2304      	movs	r3, #4
 8011a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011a86:	2302      	movs	r3, #2
 8011a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011a8e:	2303      	movs	r3, #3
 8011a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8011a92:	230c      	movs	r3, #12
 8011a94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011a96:	f107 0314 	add.w	r3, r7, #20
 8011a9a:	4619      	mov	r1, r3
 8011a9c:	4806      	ldr	r0, [pc, #24]	@ (8011ab8 <HAL_SD_MspInit+0xd4>)
 8011a9e:	f7f2 febb 	bl	8004818 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8011aa2:	bf00      	nop
 8011aa4:	3728      	adds	r7, #40	@ 0x28
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd80      	pop	{r7, pc}
 8011aaa:	bf00      	nop
 8011aac:	52007000 	.word	0x52007000
 8011ab0:	58024400 	.word	0x58024400
 8011ab4:	58020800 	.word	0x58020800
 8011ab8:	58020c00 	.word	0x58020c00

08011abc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8011ac0:	4b27      	ldr	r3, [pc, #156]	@ (8011b60 <MX_SPI1_Init+0xa4>)
 8011ac2:	4a28      	ldr	r2, [pc, #160]	@ (8011b64 <MX_SPI1_Init+0xa8>)
 8011ac4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8011ac6:	4b26      	ldr	r3, [pc, #152]	@ (8011b60 <MX_SPI1_Init+0xa4>)
 8011ac8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8011acc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8011ace:	4b24      	ldr	r3, [pc, #144]	@ (8011b60 <MX_SPI1_Init+0xa4>)
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8011ad4:	4b22      	ldr	r3, [pc, #136]	@ (8011b60 <MX_SPI1_Init+0xa4>)
 8011ad6:	2203      	movs	r2, #3
 8011ad8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8011ada:	4b21      	ldr	r3, [pc, #132]	@ (8011b60 <MX_SPI1_Init+0xa4>)
 8011adc:	2200      	movs	r2, #0
 8011ade:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8011ae0:	4b1f      	ldr	r3, [pc, #124]	@ (8011b60 <MX_SPI1_Init+0xa4>)
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8011ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8011b60 <MX_SPI1_Init+0xa4>)
 8011ae8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8011aec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011aee:	4b1c      	ldr	r3, [pc, #112]	@ (8011b60 <MX_SPI1_Init+0xa4>)
 8011af0:	2200      	movs	r2, #0
 8011af2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011af4:	4b1a      	ldr	r3, [pc, #104]	@ (8011b60 <MX_SPI1_Init+0xa4>)
 8011af6:	2200      	movs	r2, #0
 8011af8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8011afa:	4b19      	ldr	r3, [pc, #100]	@ (8011b60 <MX_SPI1_Init+0xa4>)
 8011afc:	2200      	movs	r2, #0
 8011afe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011b00:	4b17      	ldr	r3, [pc, #92]	@ (8011b60 <MX_SPI1_Init+0xa4>)
 8011b02:	2200      	movs	r2, #0
 8011b04:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8011b06:	4b16      	ldr	r3, [pc, #88]	@ (8011b60 <MX_SPI1_Init+0xa4>)
 8011b08:	2200      	movs	r2, #0
 8011b0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8011b0c:	4b14      	ldr	r3, [pc, #80]	@ (8011b60 <MX_SPI1_Init+0xa4>)
 8011b0e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8011b12:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8011b14:	4b12      	ldr	r3, [pc, #72]	@ (8011b60 <MX_SPI1_Init+0xa4>)
 8011b16:	2200      	movs	r2, #0
 8011b18:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8011b1a:	4b11      	ldr	r3, [pc, #68]	@ (8011b60 <MX_SPI1_Init+0xa4>)
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8011b20:	4b0f      	ldr	r3, [pc, #60]	@ (8011b60 <MX_SPI1_Init+0xa4>)
 8011b22:	2200      	movs	r2, #0
 8011b24:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8011b26:	4b0e      	ldr	r3, [pc, #56]	@ (8011b60 <MX_SPI1_Init+0xa4>)
 8011b28:	2200      	movs	r2, #0
 8011b2a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8011b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8011b60 <MX_SPI1_Init+0xa4>)
 8011b2e:	2200      	movs	r2, #0
 8011b30:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8011b32:	4b0b      	ldr	r3, [pc, #44]	@ (8011b60 <MX_SPI1_Init+0xa4>)
 8011b34:	2200      	movs	r2, #0
 8011b36:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8011b38:	4b09      	ldr	r3, [pc, #36]	@ (8011b60 <MX_SPI1_Init+0xa4>)
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8011b3e:	4b08      	ldr	r3, [pc, #32]	@ (8011b60 <MX_SPI1_Init+0xa4>)
 8011b40:	2200      	movs	r2, #0
 8011b42:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8011b44:	4b06      	ldr	r3, [pc, #24]	@ (8011b60 <MX_SPI1_Init+0xa4>)
 8011b46:	2200      	movs	r2, #0
 8011b48:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8011b4a:	4805      	ldr	r0, [pc, #20]	@ (8011b60 <MX_SPI1_Init+0xa4>)
 8011b4c:	f7f9 fe28 	bl	800b7a0 <HAL_SPI_Init>
 8011b50:	4603      	mov	r3, r0
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d001      	beq.n	8011b5a <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8011b56:	f7ff fd51 	bl	80115fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8011b5a:	bf00      	nop
 8011b5c:	bd80      	pop	{r7, pc}
 8011b5e:	bf00      	nop
 8011b60:	24000e84 	.word	0x24000e84
 8011b64:	40013000 	.word	0x40013000

08011b68 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8011b6c:	4b27      	ldr	r3, [pc, #156]	@ (8011c0c <MX_SPI2_Init+0xa4>)
 8011b6e:	4a28      	ldr	r2, [pc, #160]	@ (8011c10 <MX_SPI2_Init+0xa8>)
 8011b70:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8011b72:	4b26      	ldr	r3, [pc, #152]	@ (8011c0c <MX_SPI2_Init+0xa4>)
 8011b74:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8011b78:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8011b7a:	4b24      	ldr	r3, [pc, #144]	@ (8011c0c <MX_SPI2_Init+0xa4>)
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8011b80:	4b22      	ldr	r3, [pc, #136]	@ (8011c0c <MX_SPI2_Init+0xa4>)
 8011b82:	2207      	movs	r2, #7
 8011b84:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8011b86:	4b21      	ldr	r3, [pc, #132]	@ (8011c0c <MX_SPI2_Init+0xa4>)
 8011b88:	2200      	movs	r2, #0
 8011b8a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8011b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8011c0c <MX_SPI2_Init+0xa4>)
 8011b8e:	2200      	movs	r2, #0
 8011b90:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8011b92:	4b1e      	ldr	r3, [pc, #120]	@ (8011c0c <MX_SPI2_Init+0xa4>)
 8011b94:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8011b98:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8011b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8011c0c <MX_SPI2_Init+0xa4>)
 8011b9c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8011ba0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011ba2:	4b1a      	ldr	r3, [pc, #104]	@ (8011c0c <MX_SPI2_Init+0xa4>)
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8011ba8:	4b18      	ldr	r3, [pc, #96]	@ (8011c0c <MX_SPI2_Init+0xa4>)
 8011baa:	2200      	movs	r2, #0
 8011bac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011bae:	4b17      	ldr	r3, [pc, #92]	@ (8011c0c <MX_SPI2_Init+0xa4>)
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8011bb4:	4b15      	ldr	r3, [pc, #84]	@ (8011c0c <MX_SPI2_Init+0xa4>)
 8011bb6:	2200      	movs	r2, #0
 8011bb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8011bba:	4b14      	ldr	r3, [pc, #80]	@ (8011c0c <MX_SPI2_Init+0xa4>)
 8011bbc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8011bc0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8011bc2:	4b12      	ldr	r3, [pc, #72]	@ (8011c0c <MX_SPI2_Init+0xa4>)
 8011bc4:	2200      	movs	r2, #0
 8011bc6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8011bc8:	4b10      	ldr	r3, [pc, #64]	@ (8011c0c <MX_SPI2_Init+0xa4>)
 8011bca:	2200      	movs	r2, #0
 8011bcc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8011bce:	4b0f      	ldr	r3, [pc, #60]	@ (8011c0c <MX_SPI2_Init+0xa4>)
 8011bd0:	2200      	movs	r2, #0
 8011bd2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8011bd4:	4b0d      	ldr	r3, [pc, #52]	@ (8011c0c <MX_SPI2_Init+0xa4>)
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8011bda:	4b0c      	ldr	r3, [pc, #48]	@ (8011c0c <MX_SPI2_Init+0xa4>)
 8011bdc:	2200      	movs	r2, #0
 8011bde:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8011be0:	4b0a      	ldr	r3, [pc, #40]	@ (8011c0c <MX_SPI2_Init+0xa4>)
 8011be2:	2200      	movs	r2, #0
 8011be4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8011be6:	4b09      	ldr	r3, [pc, #36]	@ (8011c0c <MX_SPI2_Init+0xa4>)
 8011be8:	2200      	movs	r2, #0
 8011bea:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8011bec:	4b07      	ldr	r3, [pc, #28]	@ (8011c0c <MX_SPI2_Init+0xa4>)
 8011bee:	2200      	movs	r2, #0
 8011bf0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8011bf2:	4b06      	ldr	r3, [pc, #24]	@ (8011c0c <MX_SPI2_Init+0xa4>)
 8011bf4:	2200      	movs	r2, #0
 8011bf6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8011bf8:	4804      	ldr	r0, [pc, #16]	@ (8011c0c <MX_SPI2_Init+0xa4>)
 8011bfa:	f7f9 fdd1 	bl	800b7a0 <HAL_SPI_Init>
 8011bfe:	4603      	mov	r3, r0
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d001      	beq.n	8011c08 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8011c04:	f7ff fcfa 	bl	80115fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8011c08:	bf00      	nop
 8011c0a:	bd80      	pop	{r7, pc}
 8011c0c:	24000f0c 	.word	0x24000f0c
 8011c10:	40003800 	.word	0x40003800

08011c14 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8011c18:	4b28      	ldr	r3, [pc, #160]	@ (8011cbc <MX_SPI4_Init+0xa8>)
 8011c1a:	4a29      	ldr	r2, [pc, #164]	@ (8011cc0 <MX_SPI4_Init+0xac>)
 8011c1c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8011c1e:	4b27      	ldr	r3, [pc, #156]	@ (8011cbc <MX_SPI4_Init+0xa8>)
 8011c20:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8011c24:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8011c26:	4b25      	ldr	r3, [pc, #148]	@ (8011cbc <MX_SPI4_Init+0xa8>)
 8011c28:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8011c2c:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8011c2e:	4b23      	ldr	r3, [pc, #140]	@ (8011cbc <MX_SPI4_Init+0xa8>)
 8011c30:	2207      	movs	r2, #7
 8011c32:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8011c34:	4b21      	ldr	r3, [pc, #132]	@ (8011cbc <MX_SPI4_Init+0xa8>)
 8011c36:	2200      	movs	r2, #0
 8011c38:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8011c3a:	4b20      	ldr	r3, [pc, #128]	@ (8011cbc <MX_SPI4_Init+0xa8>)
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8011c40:	4b1e      	ldr	r3, [pc, #120]	@ (8011cbc <MX_SPI4_Init+0xa8>)
 8011c42:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8011c46:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8011c48:	4b1c      	ldr	r3, [pc, #112]	@ (8011cbc <MX_SPI4_Init+0xa8>)
 8011c4a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8011c4e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011c50:	4b1a      	ldr	r3, [pc, #104]	@ (8011cbc <MX_SPI4_Init+0xa8>)
 8011c52:	2200      	movs	r2, #0
 8011c54:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8011c56:	4b19      	ldr	r3, [pc, #100]	@ (8011cbc <MX_SPI4_Init+0xa8>)
 8011c58:	2200      	movs	r2, #0
 8011c5a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011c5c:	4b17      	ldr	r3, [pc, #92]	@ (8011cbc <MX_SPI4_Init+0xa8>)
 8011c5e:	2200      	movs	r2, #0
 8011c60:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8011c62:	4b16      	ldr	r3, [pc, #88]	@ (8011cbc <MX_SPI4_Init+0xa8>)
 8011c64:	2200      	movs	r2, #0
 8011c66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8011c68:	4b14      	ldr	r3, [pc, #80]	@ (8011cbc <MX_SPI4_Init+0xa8>)
 8011c6a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8011c6e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8011c70:	4b12      	ldr	r3, [pc, #72]	@ (8011cbc <MX_SPI4_Init+0xa8>)
 8011c72:	2200      	movs	r2, #0
 8011c74:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8011c76:	4b11      	ldr	r3, [pc, #68]	@ (8011cbc <MX_SPI4_Init+0xa8>)
 8011c78:	2200      	movs	r2, #0
 8011c7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8011c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8011cbc <MX_SPI4_Init+0xa8>)
 8011c7e:	2200      	movs	r2, #0
 8011c80:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8011c82:	4b0e      	ldr	r3, [pc, #56]	@ (8011cbc <MX_SPI4_Init+0xa8>)
 8011c84:	2200      	movs	r2, #0
 8011c86:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8011c88:	4b0c      	ldr	r3, [pc, #48]	@ (8011cbc <MX_SPI4_Init+0xa8>)
 8011c8a:	2200      	movs	r2, #0
 8011c8c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8011c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8011cbc <MX_SPI4_Init+0xa8>)
 8011c90:	2200      	movs	r2, #0
 8011c92:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8011c94:	4b09      	ldr	r3, [pc, #36]	@ (8011cbc <MX_SPI4_Init+0xa8>)
 8011c96:	2200      	movs	r2, #0
 8011c98:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8011c9a:	4b08      	ldr	r3, [pc, #32]	@ (8011cbc <MX_SPI4_Init+0xa8>)
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8011ca0:	4b06      	ldr	r3, [pc, #24]	@ (8011cbc <MX_SPI4_Init+0xa8>)
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8011ca6:	4805      	ldr	r0, [pc, #20]	@ (8011cbc <MX_SPI4_Init+0xa8>)
 8011ca8:	f7f9 fd7a 	bl	800b7a0 <HAL_SPI_Init>
 8011cac:	4603      	mov	r3, r0
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d001      	beq.n	8011cb6 <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 8011cb2:	f7ff fca3 	bl	80115fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8011cb6:	bf00      	nop
 8011cb8:	bd80      	pop	{r7, pc}
 8011cba:	bf00      	nop
 8011cbc:	24000f94 	.word	0x24000f94
 8011cc0:	40013400 	.word	0x40013400

08011cc4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b0c0      	sub	sp, #256	@ 0x100
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011ccc:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	601a      	str	r2, [r3, #0]
 8011cd4:	605a      	str	r2, [r3, #4]
 8011cd6:	609a      	str	r2, [r3, #8]
 8011cd8:	60da      	str	r2, [r3, #12]
 8011cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011cdc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011ce0:	22c0      	movs	r2, #192	@ 0xc0
 8011ce2:	2100      	movs	r1, #0
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f001 fd27 	bl	8013738 <memset>
  if(spiHandle->Instance==SPI1)
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	4a87      	ldr	r2, [pc, #540]	@ (8011f0c <HAL_SPI_MspInit+0x248>)
 8011cf0:	4293      	cmp	r3, r2
 8011cf2:	d16b      	bne.n	8011dcc <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8011cf4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8011cf8:	f04f 0300 	mov.w	r3, #0
 8011cfc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8011d00:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8011d04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011d08:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	f7f5 fa0b 	bl	8007128 <HAL_RCCEx_PeriphCLKConfig>
 8011d12:	4603      	mov	r3, r0
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d001      	beq.n	8011d1c <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8011d18:	f7ff fc70 	bl	80115fc <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8011d1c:	4b7c      	ldr	r3, [pc, #496]	@ (8011f10 <HAL_SPI_MspInit+0x24c>)
 8011d1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8011d22:	4a7b      	ldr	r2, [pc, #492]	@ (8011f10 <HAL_SPI_MspInit+0x24c>)
 8011d24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8011d28:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8011d2c:	4b78      	ldr	r3, [pc, #480]	@ (8011f10 <HAL_SPI_MspInit+0x24c>)
 8011d2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8011d32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8011d36:	627b      	str	r3, [r7, #36]	@ 0x24
 8011d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8011d3a:	4b75      	ldr	r3, [pc, #468]	@ (8011f10 <HAL_SPI_MspInit+0x24c>)
 8011d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011d40:	4a73      	ldr	r2, [pc, #460]	@ (8011f10 <HAL_SPI_MspInit+0x24c>)
 8011d42:	f043 0308 	orr.w	r3, r3, #8
 8011d46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011d4a:	4b71      	ldr	r3, [pc, #452]	@ (8011f10 <HAL_SPI_MspInit+0x24c>)
 8011d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011d50:	f003 0308 	and.w	r3, r3, #8
 8011d54:	623b      	str	r3, [r7, #32]
 8011d56:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011d58:	4b6d      	ldr	r3, [pc, #436]	@ (8011f10 <HAL_SPI_MspInit+0x24c>)
 8011d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011d5e:	4a6c      	ldr	r2, [pc, #432]	@ (8011f10 <HAL_SPI_MspInit+0x24c>)
 8011d60:	f043 0302 	orr.w	r3, r3, #2
 8011d64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011d68:	4b69      	ldr	r3, [pc, #420]	@ (8011f10 <HAL_SPI_MspInit+0x24c>)
 8011d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011d6e:	f003 0302 	and.w	r3, r3, #2
 8011d72:	61fb      	str	r3, [r7, #28]
 8011d74:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8011d76:	2380      	movs	r3, #128	@ 0x80
 8011d78:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011d7c:	2302      	movs	r3, #2
 8011d7e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d82:	2300      	movs	r3, #0
 8011d84:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011d88:	2300      	movs	r3, #0
 8011d8a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8011d8e:	2305      	movs	r3, #5
 8011d90:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011d94:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8011d98:	4619      	mov	r1, r3
 8011d9a:	485e      	ldr	r0, [pc, #376]	@ (8011f14 <HAL_SPI_MspInit+0x250>)
 8011d9c:	f7f2 fd3c 	bl	8004818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8011da0:	2318      	movs	r3, #24
 8011da2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011da6:	2302      	movs	r3, #2
 8011da8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011dac:	2300      	movs	r3, #0
 8011dae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011db2:	2300      	movs	r3, #0
 8011db4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8011db8:	2305      	movs	r3, #5
 8011dba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011dbe:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8011dc2:	4619      	mov	r1, r3
 8011dc4:	4854      	ldr	r0, [pc, #336]	@ (8011f18 <HAL_SPI_MspInit+0x254>)
 8011dc6:	f7f2 fd27 	bl	8004818 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8011dca:	e09a      	b.n	8011f02 <HAL_SPI_MspInit+0x23e>
  else if(spiHandle->Instance==SPI2)
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	4a52      	ldr	r2, [pc, #328]	@ (8011f1c <HAL_SPI_MspInit+0x258>)
 8011dd2:	4293      	cmp	r3, r2
 8011dd4:	d148      	bne.n	8011e68 <HAL_SPI_MspInit+0x1a4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8011dd6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8011dda:	f04f 0300 	mov.w	r3, #0
 8011dde:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8011de2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8011de6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011dea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011dee:	4618      	mov	r0, r3
 8011df0:	f7f5 f99a 	bl	8007128 <HAL_RCCEx_PeriphCLKConfig>
 8011df4:	4603      	mov	r3, r0
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d001      	beq.n	8011dfe <HAL_SPI_MspInit+0x13a>
      Error_Handler();
 8011dfa:	f7ff fbff 	bl	80115fc <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8011dfe:	4b44      	ldr	r3, [pc, #272]	@ (8011f10 <HAL_SPI_MspInit+0x24c>)
 8011e00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8011e04:	4a42      	ldr	r2, [pc, #264]	@ (8011f10 <HAL_SPI_MspInit+0x24c>)
 8011e06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8011e0a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8011e0e:	4b40      	ldr	r3, [pc, #256]	@ (8011f10 <HAL_SPI_MspInit+0x24c>)
 8011e10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8011e14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011e18:	61bb      	str	r3, [r7, #24]
 8011e1a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011e1c:	4b3c      	ldr	r3, [pc, #240]	@ (8011f10 <HAL_SPI_MspInit+0x24c>)
 8011e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011e22:	4a3b      	ldr	r2, [pc, #236]	@ (8011f10 <HAL_SPI_MspInit+0x24c>)
 8011e24:	f043 0302 	orr.w	r3, r3, #2
 8011e28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011e2c:	4b38      	ldr	r3, [pc, #224]	@ (8011f10 <HAL_SPI_MspInit+0x24c>)
 8011e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011e32:	f003 0302 	and.w	r3, r3, #2
 8011e36:	617b      	str	r3, [r7, #20]
 8011e38:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8011e3a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8011e3e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011e42:	2302      	movs	r3, #2
 8011e44:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011e48:	2300      	movs	r3, #0
 8011e4a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011e4e:	2300      	movs	r3, #0
 8011e50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8011e54:	2305      	movs	r3, #5
 8011e56:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011e5a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8011e5e:	4619      	mov	r1, r3
 8011e60:	482d      	ldr	r0, [pc, #180]	@ (8011f18 <HAL_SPI_MspInit+0x254>)
 8011e62:	f7f2 fcd9 	bl	8004818 <HAL_GPIO_Init>
}
 8011e66:	e04c      	b.n	8011f02 <HAL_SPI_MspInit+0x23e>
  else if(spiHandle->Instance==SPI4)
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	4a2c      	ldr	r2, [pc, #176]	@ (8011f20 <HAL_SPI_MspInit+0x25c>)
 8011e6e:	4293      	cmp	r3, r2
 8011e70:	d147      	bne.n	8011f02 <HAL_SPI_MspInit+0x23e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8011e72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8011e76:	f04f 0300 	mov.w	r3, #0
 8011e7a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_HSI;
 8011e7e:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8011e82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011e86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	f7f5 f94c 	bl	8007128 <HAL_RCCEx_PeriphCLKConfig>
 8011e90:	4603      	mov	r3, r0
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d001      	beq.n	8011e9a <HAL_SPI_MspInit+0x1d6>
      Error_Handler();
 8011e96:	f7ff fbb1 	bl	80115fc <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8011e9a:	4b1d      	ldr	r3, [pc, #116]	@ (8011f10 <HAL_SPI_MspInit+0x24c>)
 8011e9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8011ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8011f10 <HAL_SPI_MspInit+0x24c>)
 8011ea2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8011ea6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8011eaa:	4b19      	ldr	r3, [pc, #100]	@ (8011f10 <HAL_SPI_MspInit+0x24c>)
 8011eac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8011eb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011eb4:	613b      	str	r3, [r7, #16]
 8011eb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8011eb8:	4b15      	ldr	r3, [pc, #84]	@ (8011f10 <HAL_SPI_MspInit+0x24c>)
 8011eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011ebe:	4a14      	ldr	r2, [pc, #80]	@ (8011f10 <HAL_SPI_MspInit+0x24c>)
 8011ec0:	f043 0310 	orr.w	r3, r3, #16
 8011ec4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011ec8:	4b11      	ldr	r3, [pc, #68]	@ (8011f10 <HAL_SPI_MspInit+0x24c>)
 8011eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011ece:	f003 0310 	and.w	r3, r3, #16
 8011ed2:	60fb      	str	r3, [r7, #12]
 8011ed4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8011ed6:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8011eda:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011ede:	2302      	movs	r3, #2
 8011ee0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011eea:	2302      	movs	r3, #2
 8011eec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8011ef0:	2305      	movs	r3, #5
 8011ef2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8011ef6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8011efa:	4619      	mov	r1, r3
 8011efc:	4809      	ldr	r0, [pc, #36]	@ (8011f24 <HAL_SPI_MspInit+0x260>)
 8011efe:	f7f2 fc8b 	bl	8004818 <HAL_GPIO_Init>
}
 8011f02:	bf00      	nop
 8011f04:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8011f08:	46bd      	mov	sp, r7
 8011f0a:	bd80      	pop	{r7, pc}
 8011f0c:	40013000 	.word	0x40013000
 8011f10:	58024400 	.word	0x58024400
 8011f14:	58020c00 	.word	0x58020c00
 8011f18:	58020400 	.word	0x58020400
 8011f1c:	40003800 	.word	0x40003800
 8011f20:	40013400 	.word	0x40013400
 8011f24:	58021000 	.word	0x58021000

08011f28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8011f28:	b480      	push	{r7}
 8011f2a:	b083      	sub	sp, #12
 8011f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8011f58 <HAL_MspInit+0x30>)
 8011f30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8011f34:	4a08      	ldr	r2, [pc, #32]	@ (8011f58 <HAL_MspInit+0x30>)
 8011f36:	f043 0302 	orr.w	r3, r3, #2
 8011f3a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8011f3e:	4b06      	ldr	r3, [pc, #24]	@ (8011f58 <HAL_MspInit+0x30>)
 8011f40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8011f44:	f003 0302 	and.w	r3, r3, #2
 8011f48:	607b      	str	r3, [r7, #4]
 8011f4a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8011f4c:	bf00      	nop
 8011f4e:	370c      	adds	r7, #12
 8011f50:	46bd      	mov	sp, r7
 8011f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f56:	4770      	bx	lr
 8011f58:	58024400 	.word	0x58024400

08011f5c <NMI_Handler>:
/*           Cortex Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8011f5c:	b480      	push	{r7}
 8011f5e:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8011f60:	bf00      	nop
 8011f62:	46bd      	mov	sp, r7
 8011f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f68:	4770      	bx	lr

08011f6a <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8011f6a:	b480      	push	{r7}
 8011f6c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8011f6e:	bf00      	nop
 8011f70:	e7fd      	b.n	8011f6e <HardFault_Handler+0x4>

08011f72 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8011f72:	b480      	push	{r7}
 8011f74:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8011f76:	bf00      	nop
 8011f78:	e7fd      	b.n	8011f76 <MemManage_Handler+0x4>

08011f7a <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8011f7a:	b480      	push	{r7}
 8011f7c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8011f7e:	bf00      	nop
 8011f80:	e7fd      	b.n	8011f7e <BusFault_Handler+0x4>

08011f82 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8011f82:	b480      	push	{r7}
 8011f84:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8011f86:	bf00      	nop
 8011f88:	e7fd      	b.n	8011f86 <UsageFault_Handler+0x4>

08011f8a <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8011f8a:	b480      	push	{r7}
 8011f8c:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8011f8e:	bf00      	nop
 8011f90:	46bd      	mov	sp, r7
 8011f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f96:	4770      	bx	lr

08011f98 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8011f98:	b480      	push	{r7}
 8011f9a:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8011f9c:	bf00      	nop
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa4:	4770      	bx	lr

08011fa6 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8011fa6:	b480      	push	{r7}
 8011fa8:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8011faa:	bf00      	nop
 8011fac:	46bd      	mov	sp, r7
 8011fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb2:	4770      	bx	lr

08011fb4 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8011fb8:	f7f0 fcfa 	bl	80029b0 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8011fbc:	bf00      	nop
 8011fbe:	bd80      	pop	{r7, pc}

08011fc0 <LPTIM3_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles LPTIM3 global interrupt.
 */
void LPTIM3_IRQHandler(void) {
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN LPTIM3_IRQn 0 */
	Sensor_LPTIM3_IRQ();
 8011fc4:	f7fd fbaa 	bl	800f71c <Sensor_LPTIM3_IRQ>
	Marker_LPTIM3_IRQ();
 8011fc8:	f7fd fcb4 	bl	800f934 <Marker_LPTIM3_IRQ>
	/* USER CODE END LPTIM3_IRQn 0 */
	HAL_LPTIM_IRQHandler(&hlptim3);
 8011fcc:	4802      	ldr	r0, [pc, #8]	@ (8011fd8 <LPTIM3_IRQHandler+0x18>)
 8011fce:	f7f3 fda0 	bl	8005b12 <HAL_LPTIM_IRQHandler>
	/* USER CODE BEGIN LPTIM3_IRQn 1 */

	/* USER CODE END LPTIM3_IRQn 1 */
}
 8011fd2:	bf00      	nop
 8011fd4:	bd80      	pop	{r7, pc}
 8011fd6:	bf00      	nop
 8011fd8:	24000d3c 	.word	0x24000d3c

08011fdc <LPTIM4_IRQHandler>:

/**
 * @brief This function handles LPTIM4 global interrupt.
 */
void LPTIM4_IRQHandler(void) {
 8011fdc:	b580      	push	{r7, lr}
 8011fde:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN LPTIM4_IRQn 0 */
	Motor_LPTIM4_IRQ();
 8011fe0:	f7fd f9dc 	bl	800f39c <Motor_LPTIM4_IRQ>
	/* USER CODE END LPTIM4_IRQn 0 */
	HAL_LPTIM_IRQHandler(&hlptim4);
 8011fe4:	4802      	ldr	r0, [pc, #8]	@ (8011ff0 <LPTIM4_IRQHandler+0x14>)
 8011fe6:	f7f3 fd94 	bl	8005b12 <HAL_LPTIM_IRQHandler>
	/* USER CODE BEGIN LPTIM4_IRQn 1 */

	/* USER CODE END LPTIM4_IRQn 1 */
}
 8011fea:	bf00      	nop
 8011fec:	bd80      	pop	{r7, pc}
 8011fee:	bf00      	nop
 8011ff0:	24000d74 	.word	0x24000d74

08011ff4 <LPTIM5_IRQHandler>:

/**
 * @brief This function handles LPTIM5 global interrupt.
 */
void LPTIM5_IRQHandler(void) {
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN LPTIM5_IRQn 0 */
	ADC_Battery_LPTIM5_IRQ();
 8011ff8:	f7fd ff9a 	bl	800ff30 <ADC_Battery_LPTIM5_IRQ>

	/* USER CODE END LPTIM5_IRQn 0 */
	HAL_LPTIM_IRQHandler(&hlptim5);
 8011ffc:	4802      	ldr	r0, [pc, #8]	@ (8012008 <LPTIM5_IRQHandler+0x14>)
 8011ffe:	f7f3 fd88 	bl	8005b12 <HAL_LPTIM_IRQHandler>
	/* USER CODE BEGIN LPTIM5_IRQn 1 */

	/* USER CODE END LPTIM5_IRQn 1 */
}
 8012002:	bf00      	nop
 8012004:	bd80      	pop	{r7, pc}
 8012006:	bf00      	nop
 8012008:	24000dac 	.word	0x24000dac

0801200c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 801200c:	b480      	push	{r7}
 801200e:	af00      	add	r7, sp, #0
  return 1;
 8012010:	2301      	movs	r3, #1
}
 8012012:	4618      	mov	r0, r3
 8012014:	46bd      	mov	sp, r7
 8012016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801201a:	4770      	bx	lr

0801201c <_kill>:

int _kill(int pid, int sig)
{
 801201c:	b580      	push	{r7, lr}
 801201e:	b082      	sub	sp, #8
 8012020:	af00      	add	r7, sp, #0
 8012022:	6078      	str	r0, [r7, #4]
 8012024:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8012026:	f001 fbd9 	bl	80137dc <__errno>
 801202a:	4603      	mov	r3, r0
 801202c:	2216      	movs	r2, #22
 801202e:	601a      	str	r2, [r3, #0]
  return -1;
 8012030:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012034:	4618      	mov	r0, r3
 8012036:	3708      	adds	r7, #8
 8012038:	46bd      	mov	sp, r7
 801203a:	bd80      	pop	{r7, pc}

0801203c <_exit>:

void _exit (int status)
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b082      	sub	sp, #8
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8012044:	f04f 31ff 	mov.w	r1, #4294967295
 8012048:	6878      	ldr	r0, [r7, #4]
 801204a:	f7ff ffe7 	bl	801201c <_kill>
  while (1) {}    /* Make sure we hang here */
 801204e:	bf00      	nop
 8012050:	e7fd      	b.n	801204e <_exit+0x12>

08012052 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8012052:	b580      	push	{r7, lr}
 8012054:	b086      	sub	sp, #24
 8012056:	af00      	add	r7, sp, #0
 8012058:	60f8      	str	r0, [r7, #12]
 801205a:	60b9      	str	r1, [r7, #8]
 801205c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801205e:	2300      	movs	r3, #0
 8012060:	617b      	str	r3, [r7, #20]
 8012062:	e00a      	b.n	801207a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8012064:	f3af 8000 	nop.w
 8012068:	4601      	mov	r1, r0
 801206a:	68bb      	ldr	r3, [r7, #8]
 801206c:	1c5a      	adds	r2, r3, #1
 801206e:	60ba      	str	r2, [r7, #8]
 8012070:	b2ca      	uxtb	r2, r1
 8012072:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012074:	697b      	ldr	r3, [r7, #20]
 8012076:	3301      	adds	r3, #1
 8012078:	617b      	str	r3, [r7, #20]
 801207a:	697a      	ldr	r2, [r7, #20]
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	429a      	cmp	r2, r3
 8012080:	dbf0      	blt.n	8012064 <_read+0x12>
  }

  return len;
 8012082:	687b      	ldr	r3, [r7, #4]
}
 8012084:	4618      	mov	r0, r3
 8012086:	3718      	adds	r7, #24
 8012088:	46bd      	mov	sp, r7
 801208a:	bd80      	pop	{r7, pc}

0801208c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801208c:	b580      	push	{r7, lr}
 801208e:	b086      	sub	sp, #24
 8012090:	af00      	add	r7, sp, #0
 8012092:	60f8      	str	r0, [r7, #12]
 8012094:	60b9      	str	r1, [r7, #8]
 8012096:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012098:	2300      	movs	r3, #0
 801209a:	617b      	str	r3, [r7, #20]
 801209c:	e009      	b.n	80120b2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 801209e:	68bb      	ldr	r3, [r7, #8]
 80120a0:	1c5a      	adds	r2, r3, #1
 80120a2:	60ba      	str	r2, [r7, #8]
 80120a4:	781b      	ldrb	r3, [r3, #0]
 80120a6:	4618      	mov	r0, r3
 80120a8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80120ac:	697b      	ldr	r3, [r7, #20]
 80120ae:	3301      	adds	r3, #1
 80120b0:	617b      	str	r3, [r7, #20]
 80120b2:	697a      	ldr	r2, [r7, #20]
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	429a      	cmp	r2, r3
 80120b8:	dbf1      	blt.n	801209e <_write+0x12>
  }
  return len;
 80120ba:	687b      	ldr	r3, [r7, #4]
}
 80120bc:	4618      	mov	r0, r3
 80120be:	3718      	adds	r7, #24
 80120c0:	46bd      	mov	sp, r7
 80120c2:	bd80      	pop	{r7, pc}

080120c4 <_close>:

int _close(int file)
{
 80120c4:	b480      	push	{r7}
 80120c6:	b083      	sub	sp, #12
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80120cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80120d0:	4618      	mov	r0, r3
 80120d2:	370c      	adds	r7, #12
 80120d4:	46bd      	mov	sp, r7
 80120d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120da:	4770      	bx	lr

080120dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80120dc:	b480      	push	{r7}
 80120de:	b083      	sub	sp, #12
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	6078      	str	r0, [r7, #4]
 80120e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80120e6:	683b      	ldr	r3, [r7, #0]
 80120e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80120ec:	605a      	str	r2, [r3, #4]
  return 0;
 80120ee:	2300      	movs	r3, #0
}
 80120f0:	4618      	mov	r0, r3
 80120f2:	370c      	adds	r7, #12
 80120f4:	46bd      	mov	sp, r7
 80120f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120fa:	4770      	bx	lr

080120fc <_isatty>:

int _isatty(int file)
{
 80120fc:	b480      	push	{r7}
 80120fe:	b083      	sub	sp, #12
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8012104:	2301      	movs	r3, #1
}
 8012106:	4618      	mov	r0, r3
 8012108:	370c      	adds	r7, #12
 801210a:	46bd      	mov	sp, r7
 801210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012110:	4770      	bx	lr

08012112 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8012112:	b480      	push	{r7}
 8012114:	b085      	sub	sp, #20
 8012116:	af00      	add	r7, sp, #0
 8012118:	60f8      	str	r0, [r7, #12]
 801211a:	60b9      	str	r1, [r7, #8]
 801211c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 801211e:	2300      	movs	r3, #0
}
 8012120:	4618      	mov	r0, r3
 8012122:	3714      	adds	r7, #20
 8012124:	46bd      	mov	sp, r7
 8012126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801212a:	4770      	bx	lr

0801212c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 801212c:	b580      	push	{r7, lr}
 801212e:	b086      	sub	sp, #24
 8012130:	af00      	add	r7, sp, #0
 8012132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8012134:	4a14      	ldr	r2, [pc, #80]	@ (8012188 <_sbrk+0x5c>)
 8012136:	4b15      	ldr	r3, [pc, #84]	@ (801218c <_sbrk+0x60>)
 8012138:	1ad3      	subs	r3, r2, r3
 801213a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 801213c:	697b      	ldr	r3, [r7, #20]
 801213e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8012140:	4b13      	ldr	r3, [pc, #76]	@ (8012190 <_sbrk+0x64>)
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d102      	bne.n	801214e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8012148:	4b11      	ldr	r3, [pc, #68]	@ (8012190 <_sbrk+0x64>)
 801214a:	4a12      	ldr	r2, [pc, #72]	@ (8012194 <_sbrk+0x68>)
 801214c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801214e:	4b10      	ldr	r3, [pc, #64]	@ (8012190 <_sbrk+0x64>)
 8012150:	681a      	ldr	r2, [r3, #0]
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	4413      	add	r3, r2
 8012156:	693a      	ldr	r2, [r7, #16]
 8012158:	429a      	cmp	r2, r3
 801215a:	d207      	bcs.n	801216c <_sbrk+0x40>
  {
    errno = ENOMEM;
 801215c:	f001 fb3e 	bl	80137dc <__errno>
 8012160:	4603      	mov	r3, r0
 8012162:	220c      	movs	r2, #12
 8012164:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8012166:	f04f 33ff 	mov.w	r3, #4294967295
 801216a:	e009      	b.n	8012180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 801216c:	4b08      	ldr	r3, [pc, #32]	@ (8012190 <_sbrk+0x64>)
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8012172:	4b07      	ldr	r3, [pc, #28]	@ (8012190 <_sbrk+0x64>)
 8012174:	681a      	ldr	r2, [r3, #0]
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	4413      	add	r3, r2
 801217a:	4a05      	ldr	r2, [pc, #20]	@ (8012190 <_sbrk+0x64>)
 801217c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801217e:	68fb      	ldr	r3, [r7, #12]
}
 8012180:	4618      	mov	r0, r3
 8012182:	3718      	adds	r7, #24
 8012184:	46bd      	mov	sp, r7
 8012186:	bd80      	pop	{r7, pc}
 8012188:	24080000 	.word	0x24080000
 801218c:	00000400 	.word	0x00000400
 8012190:	2400101c 	.word	0x2400101c
 8012194:	24001250 	.word	0x24001250

08012198 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8012198:	b480      	push	{r7}
 801219a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 801219c:	4b29      	ldr	r3, [pc, #164]	@ (8012244 <SystemInit+0xac>)
 801219e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80121a2:	4a28      	ldr	r2, [pc, #160]	@ (8012244 <SystemInit+0xac>)
 80121a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80121a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80121ac:	4b26      	ldr	r3, [pc, #152]	@ (8012248 <SystemInit+0xb0>)
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	4a25      	ldr	r2, [pc, #148]	@ (8012248 <SystemInit+0xb0>)
 80121b2:	f043 0301 	orr.w	r3, r3, #1
 80121b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80121b8:	4b23      	ldr	r3, [pc, #140]	@ (8012248 <SystemInit+0xb0>)
 80121ba:	2200      	movs	r2, #0
 80121bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80121be:	4b22      	ldr	r3, [pc, #136]	@ (8012248 <SystemInit+0xb0>)
 80121c0:	681a      	ldr	r2, [r3, #0]
 80121c2:	4921      	ldr	r1, [pc, #132]	@ (8012248 <SystemInit+0xb0>)
 80121c4:	4b21      	ldr	r3, [pc, #132]	@ (801224c <SystemInit+0xb4>)
 80121c6:	4013      	ands	r3, r2
 80121c8:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80121ca:	4b1f      	ldr	r3, [pc, #124]	@ (8012248 <SystemInit+0xb0>)
 80121cc:	2200      	movs	r2, #0
 80121ce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80121d0:	4b1d      	ldr	r3, [pc, #116]	@ (8012248 <SystemInit+0xb0>)
 80121d2:	2200      	movs	r2, #0
 80121d4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80121d6:	4b1c      	ldr	r3, [pc, #112]	@ (8012248 <SystemInit+0xb0>)
 80121d8:	2200      	movs	r2, #0
 80121da:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80121dc:	4b1a      	ldr	r3, [pc, #104]	@ (8012248 <SystemInit+0xb0>)
 80121de:	2200      	movs	r2, #0
 80121e0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80121e2:	4b19      	ldr	r3, [pc, #100]	@ (8012248 <SystemInit+0xb0>)
 80121e4:	2200      	movs	r2, #0
 80121e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80121e8:	4b17      	ldr	r3, [pc, #92]	@ (8012248 <SystemInit+0xb0>)
 80121ea:	2200      	movs	r2, #0
 80121ec:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80121ee:	4b16      	ldr	r3, [pc, #88]	@ (8012248 <SystemInit+0xb0>)
 80121f0:	2200      	movs	r2, #0
 80121f2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80121f4:	4b14      	ldr	r3, [pc, #80]	@ (8012248 <SystemInit+0xb0>)
 80121f6:	2200      	movs	r2, #0
 80121f8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80121fa:	4b13      	ldr	r3, [pc, #76]	@ (8012248 <SystemInit+0xb0>)
 80121fc:	2200      	movs	r2, #0
 80121fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8012200:	4b11      	ldr	r3, [pc, #68]	@ (8012248 <SystemInit+0xb0>)
 8012202:	2200      	movs	r2, #0
 8012204:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8012206:	4b10      	ldr	r3, [pc, #64]	@ (8012248 <SystemInit+0xb0>)
 8012208:	2200      	movs	r2, #0
 801220a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 801220c:	4b0e      	ldr	r3, [pc, #56]	@ (8012248 <SystemInit+0xb0>)
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	4a0d      	ldr	r2, [pc, #52]	@ (8012248 <SystemInit+0xb0>)
 8012212:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8012216:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8012218:	4b0b      	ldr	r3, [pc, #44]	@ (8012248 <SystemInit+0xb0>)
 801221a:	2200      	movs	r2, #0
 801221c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 801221e:	4b0c      	ldr	r3, [pc, #48]	@ (8012250 <SystemInit+0xb8>)
 8012220:	681a      	ldr	r2, [r3, #0]
 8012222:	4b0c      	ldr	r3, [pc, #48]	@ (8012254 <SystemInit+0xbc>)
 8012224:	4013      	ands	r3, r2
 8012226:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801222a:	d202      	bcs.n	8012232 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 801222c:	4b0a      	ldr	r3, [pc, #40]	@ (8012258 <SystemInit+0xc0>)
 801222e:	2201      	movs	r2, #1
 8012230:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8012232:	4b04      	ldr	r3, [pc, #16]	@ (8012244 <SystemInit+0xac>)
 8012234:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8012238:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 801223a:	bf00      	nop
 801223c:	46bd      	mov	sp, r7
 801223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012242:	4770      	bx	lr
 8012244:	e000ed00 	.word	0xe000ed00
 8012248:	58024400 	.word	0x58024400
 801224c:	eaf6ed7f 	.word	0xeaf6ed7f
 8012250:	5c001000 	.word	0x5c001000
 8012254:	ffff0000 	.word	0xffff0000
 8012258:	51008108 	.word	0x51008108

0801225c <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 801225c:	b580      	push	{r7, lr}
 801225e:	b09a      	sub	sp, #104	@ 0x68
 8012260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8012262:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8012266:	2200      	movs	r2, #0
 8012268:	601a      	str	r2, [r3, #0]
 801226a:	605a      	str	r2, [r3, #4]
 801226c:	609a      	str	r2, [r3, #8]
 801226e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8012270:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012274:	2200      	movs	r2, #0
 8012276:	601a      	str	r2, [r3, #0]
 8012278:	605a      	str	r2, [r3, #4]
 801227a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801227c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8012280:	2200      	movs	r2, #0
 8012282:	601a      	str	r2, [r3, #0]
 8012284:	605a      	str	r2, [r3, #4]
 8012286:	609a      	str	r2, [r3, #8]
 8012288:	60da      	str	r2, [r3, #12]
 801228a:	611a      	str	r2, [r3, #16]
 801228c:	615a      	str	r2, [r3, #20]
 801228e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8012290:	1d3b      	adds	r3, r7, #4
 8012292:	222c      	movs	r2, #44	@ 0x2c
 8012294:	2100      	movs	r1, #0
 8012296:	4618      	mov	r0, r3
 8012298:	f001 fa4e 	bl	8013738 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 801229c:	4b43      	ldr	r3, [pc, #268]	@ (80123ac <MX_TIM1_Init+0x150>)
 801229e:	4a44      	ldr	r2, [pc, #272]	@ (80123b0 <MX_TIM1_Init+0x154>)
 80122a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 11;
 80122a2:	4b42      	ldr	r3, [pc, #264]	@ (80123ac <MX_TIM1_Init+0x150>)
 80122a4:	220b      	movs	r2, #11
 80122a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80122a8:	4b40      	ldr	r3, [pc, #256]	@ (80123ac <MX_TIM1_Init+0x150>)
 80122aa:	2200      	movs	r2, #0
 80122ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80122ae:	4b3f      	ldr	r3, [pc, #252]	@ (80123ac <MX_TIM1_Init+0x150>)
 80122b0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80122b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80122b6:	4b3d      	ldr	r3, [pc, #244]	@ (80123ac <MX_TIM1_Init+0x150>)
 80122b8:	2200      	movs	r2, #0
 80122ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80122bc:	4b3b      	ldr	r3, [pc, #236]	@ (80123ac <MX_TIM1_Init+0x150>)
 80122be:	2200      	movs	r2, #0
 80122c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80122c2:	4b3a      	ldr	r3, [pc, #232]	@ (80123ac <MX_TIM1_Init+0x150>)
 80122c4:	2280      	movs	r2, #128	@ 0x80
 80122c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80122c8:	4838      	ldr	r0, [pc, #224]	@ (80123ac <MX_TIM1_Init+0x150>)
 80122ca:	f7fa f8d6 	bl	800c47a <HAL_TIM_Base_Init>
 80122ce:	4603      	mov	r3, r0
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d001      	beq.n	80122d8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80122d4:	f7ff f992 	bl	80115fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80122d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80122dc:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80122de:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80122e2:	4619      	mov	r1, r3
 80122e4:	4831      	ldr	r0, [pc, #196]	@ (80123ac <MX_TIM1_Init+0x150>)
 80122e6:	f7fa fc2f 	bl	800cb48 <HAL_TIM_ConfigClockSource>
 80122ea:	4603      	mov	r3, r0
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d001      	beq.n	80122f4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80122f0:	f7ff f984 	bl	80115fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80122f4:	482d      	ldr	r0, [pc, #180]	@ (80123ac <MX_TIM1_Init+0x150>)
 80122f6:	f7fa f917 	bl	800c528 <HAL_TIM_PWM_Init>
 80122fa:	4603      	mov	r3, r0
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d001      	beq.n	8012304 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8012300:	f7ff f97c 	bl	80115fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012304:	2300      	movs	r3, #0
 8012306:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8012308:	2300      	movs	r3, #0
 801230a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801230c:	2300      	movs	r3, #0
 801230e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8012310:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012314:	4619      	mov	r1, r3
 8012316:	4825      	ldr	r0, [pc, #148]	@ (80123ac <MX_TIM1_Init+0x150>)
 8012318:	f7fb fa0a 	bl	800d730 <HAL_TIMEx_MasterConfigSynchronization>
 801231c:	4603      	mov	r3, r0
 801231e:	2b00      	cmp	r3, #0
 8012320:	d001      	beq.n	8012326 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8012322:	f7ff f96b 	bl	80115fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8012326:	2370      	movs	r3, #112	@ 0x70
 8012328:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 801232a:	2300      	movs	r3, #0
 801232c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801232e:	2300      	movs	r3, #0
 8012330:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8012332:	2300      	movs	r3, #0
 8012334:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8012336:	2300      	movs	r3, #0
 8012338:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801233a:	2300      	movs	r3, #0
 801233c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801233e:	2300      	movs	r3, #0
 8012340:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8012342:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8012346:	2204      	movs	r2, #4
 8012348:	4619      	mov	r1, r3
 801234a:	4818      	ldr	r0, [pc, #96]	@ (80123ac <MX_TIM1_Init+0x150>)
 801234c:	f7fa fae8 	bl	800c920 <HAL_TIM_PWM_ConfigChannel>
 8012350:	4603      	mov	r3, r0
 8012352:	2b00      	cmp	r3, #0
 8012354:	d001      	beq.n	801235a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8012356:	f7ff f951 	bl	80115fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 801235a:	2300      	movs	r3, #0
 801235c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 801235e:	2300      	movs	r3, #0
 8012360:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8012362:	2300      	movs	r3, #0
 8012364:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8012366:	2300      	movs	r3, #0
 8012368:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 801236a:	2300      	movs	r3, #0
 801236c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801236e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8012372:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8012374:	2300      	movs	r3, #0
 8012376:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8012378:	2300      	movs	r3, #0
 801237a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 801237c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8012380:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8012382:	2300      	movs	r3, #0
 8012384:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8012386:	2300      	movs	r3, #0
 8012388:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 801238a:	1d3b      	adds	r3, r7, #4
 801238c:	4619      	mov	r1, r3
 801238e:	4807      	ldr	r0, [pc, #28]	@ (80123ac <MX_TIM1_Init+0x150>)
 8012390:	f7fb fa5c 	bl	800d84c <HAL_TIMEx_ConfigBreakDeadTime>
 8012394:	4603      	mov	r3, r0
 8012396:	2b00      	cmp	r3, #0
 8012398:	d001      	beq.n	801239e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 801239a:	f7ff f92f 	bl	80115fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 801239e:	4803      	ldr	r0, [pc, #12]	@ (80123ac <MX_TIM1_Init+0x150>)
 80123a0:	f000 f992 	bl	80126c8 <HAL_TIM_MspPostInit>

}
 80123a4:	bf00      	nop
 80123a6:	3768      	adds	r7, #104	@ 0x68
 80123a8:	46bd      	mov	sp, r7
 80123aa:	bd80      	pop	{r7, pc}
 80123ac:	24001020 	.word	0x24001020
 80123b0:	40010000 	.word	0x40010000

080123b4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b096      	sub	sp, #88	@ 0x58
 80123b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80123ba:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80123be:	2200      	movs	r2, #0
 80123c0:	601a      	str	r2, [r3, #0]
 80123c2:	605a      	str	r2, [r3, #4]
 80123c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80123c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80123ca:	2200      	movs	r2, #0
 80123cc:	601a      	str	r2, [r3, #0]
 80123ce:	605a      	str	r2, [r3, #4]
 80123d0:	609a      	str	r2, [r3, #8]
 80123d2:	60da      	str	r2, [r3, #12]
 80123d4:	611a      	str	r2, [r3, #16]
 80123d6:	615a      	str	r2, [r3, #20]
 80123d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80123da:	1d3b      	adds	r3, r7, #4
 80123dc:	222c      	movs	r2, #44	@ 0x2c
 80123de:	2100      	movs	r1, #0
 80123e0:	4618      	mov	r0, r3
 80123e2:	f001 f9a9 	bl	8013738 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80123e6:	4b3f      	ldr	r3, [pc, #252]	@ (80124e4 <MX_TIM8_Init+0x130>)
 80123e8:	4a3f      	ldr	r2, [pc, #252]	@ (80124e8 <MX_TIM8_Init+0x134>)
 80123ea:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80123ec:	4b3d      	ldr	r3, [pc, #244]	@ (80124e4 <MX_TIM8_Init+0x130>)
 80123ee:	2200      	movs	r2, #0
 80123f0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80123f2:	4b3c      	ldr	r3, [pc, #240]	@ (80124e4 <MX_TIM8_Init+0x130>)
 80123f4:	2200      	movs	r2, #0
 80123f6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9599;
 80123f8:	4b3a      	ldr	r3, [pc, #232]	@ (80124e4 <MX_TIM8_Init+0x130>)
 80123fa:	f242 527f 	movw	r2, #9599	@ 0x257f
 80123fe:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8012400:	4b38      	ldr	r3, [pc, #224]	@ (80124e4 <MX_TIM8_Init+0x130>)
 8012402:	2200      	movs	r2, #0
 8012404:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8012406:	4b37      	ldr	r3, [pc, #220]	@ (80124e4 <MX_TIM8_Init+0x130>)
 8012408:	2200      	movs	r2, #0
 801240a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 801240c:	4b35      	ldr	r3, [pc, #212]	@ (80124e4 <MX_TIM8_Init+0x130>)
 801240e:	2280      	movs	r2, #128	@ 0x80
 8012410:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8012412:	4834      	ldr	r0, [pc, #208]	@ (80124e4 <MX_TIM8_Init+0x130>)
 8012414:	f7fa f888 	bl	800c528 <HAL_TIM_PWM_Init>
 8012418:	4603      	mov	r3, r0
 801241a:	2b00      	cmp	r3, #0
 801241c:	d001      	beq.n	8012422 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 801241e:	f7ff f8ed 	bl	80115fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012422:	2300      	movs	r3, #0
 8012424:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8012426:	2300      	movs	r3, #0
 8012428:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801242a:	2300      	movs	r3, #0
 801242c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 801242e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012432:	4619      	mov	r1, r3
 8012434:	482b      	ldr	r0, [pc, #172]	@ (80124e4 <MX_TIM8_Init+0x130>)
 8012436:	f7fb f97b 	bl	800d730 <HAL_TIMEx_MasterConfigSynchronization>
 801243a:	4603      	mov	r3, r0
 801243c:	2b00      	cmp	r3, #0
 801243e:	d001      	beq.n	8012444 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8012440:	f7ff f8dc 	bl	80115fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8012444:	2360      	movs	r3, #96	@ 0x60
 8012446:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8012448:	2300      	movs	r3, #0
 801244a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801244c:	2300      	movs	r3, #0
 801244e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8012450:	2300      	movs	r3, #0
 8012452:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8012454:	2300      	movs	r3, #0
 8012456:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8012458:	2300      	movs	r3, #0
 801245a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801245c:	2300      	movs	r3, #0
 801245e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8012460:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8012464:	2200      	movs	r2, #0
 8012466:	4619      	mov	r1, r3
 8012468:	481e      	ldr	r0, [pc, #120]	@ (80124e4 <MX_TIM8_Init+0x130>)
 801246a:	f7fa fa59 	bl	800c920 <HAL_TIM_PWM_ConfigChannel>
 801246e:	4603      	mov	r3, r0
 8012470:	2b00      	cmp	r3, #0
 8012472:	d001      	beq.n	8012478 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8012474:	f7ff f8c2 	bl	80115fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8012478:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801247c:	2204      	movs	r2, #4
 801247e:	4619      	mov	r1, r3
 8012480:	4818      	ldr	r0, [pc, #96]	@ (80124e4 <MX_TIM8_Init+0x130>)
 8012482:	f7fa fa4d 	bl	800c920 <HAL_TIM_PWM_ConfigChannel>
 8012486:	4603      	mov	r3, r0
 8012488:	2b00      	cmp	r3, #0
 801248a:	d001      	beq.n	8012490 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 801248c:	f7ff f8b6 	bl	80115fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8012490:	2300      	movs	r3, #0
 8012492:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8012494:	2300      	movs	r3, #0
 8012496:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8012498:	2300      	movs	r3, #0
 801249a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 801249c:	2300      	movs	r3, #0
 801249e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80124a0:	2300      	movs	r3, #0
 80124a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80124a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80124a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80124aa:	2300      	movs	r3, #0
 80124ac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80124ae:	2300      	movs	r3, #0
 80124b0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80124b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80124b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80124b8:	2300      	movs	r3, #0
 80124ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 80124bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80124c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80124c2:	1d3b      	adds	r3, r7, #4
 80124c4:	4619      	mov	r1, r3
 80124c6:	4807      	ldr	r0, [pc, #28]	@ (80124e4 <MX_TIM8_Init+0x130>)
 80124c8:	f7fb f9c0 	bl	800d84c <HAL_TIMEx_ConfigBreakDeadTime>
 80124cc:	4603      	mov	r3, r0
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d001      	beq.n	80124d6 <MX_TIM8_Init+0x122>
  {
    Error_Handler();
 80124d2:	f7ff f893 	bl	80115fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80124d6:	4803      	ldr	r0, [pc, #12]	@ (80124e4 <MX_TIM8_Init+0x130>)
 80124d8:	f000 f8f6 	bl	80126c8 <HAL_TIM_MspPostInit>

}
 80124dc:	bf00      	nop
 80124de:	3758      	adds	r7, #88	@ 0x58
 80124e0:	46bd      	mov	sp, r7
 80124e2:	bd80      	pop	{r7, pc}
 80124e4:	2400106c 	.word	0x2400106c
 80124e8:	40010400 	.word	0x40010400

080124ec <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b096      	sub	sp, #88	@ 0x58
 80124f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80124f2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80124f6:	2200      	movs	r2, #0
 80124f8:	601a      	str	r2, [r3, #0]
 80124fa:	605a      	str	r2, [r3, #4]
 80124fc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80124fe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8012502:	2200      	movs	r2, #0
 8012504:	601a      	str	r2, [r3, #0]
 8012506:	605a      	str	r2, [r3, #4]
 8012508:	609a      	str	r2, [r3, #8]
 801250a:	60da      	str	r2, [r3, #12]
 801250c:	611a      	str	r2, [r3, #16]
 801250e:	615a      	str	r2, [r3, #20]
 8012510:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8012512:	1d3b      	adds	r3, r7, #4
 8012514:	222c      	movs	r2, #44	@ 0x2c
 8012516:	2100      	movs	r1, #0
 8012518:	4618      	mov	r0, r3
 801251a:	f001 f90d 	bl	8013738 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 801251e:	4b3a      	ldr	r3, [pc, #232]	@ (8012608 <MX_TIM15_Init+0x11c>)
 8012520:	4a3a      	ldr	r2, [pc, #232]	@ (801260c <MX_TIM15_Init+0x120>)
 8012522:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 249;
 8012524:	4b38      	ldr	r3, [pc, #224]	@ (8012608 <MX_TIM15_Init+0x11c>)
 8012526:	22f9      	movs	r2, #249	@ 0xf9
 8012528:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 801252a:	4b37      	ldr	r3, [pc, #220]	@ (8012608 <MX_TIM15_Init+0x11c>)
 801252c:	2200      	movs	r2, #0
 801252e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 319;
 8012530:	4b35      	ldr	r3, [pc, #212]	@ (8012608 <MX_TIM15_Init+0x11c>)
 8012532:	f240 123f 	movw	r2, #319	@ 0x13f
 8012536:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8012538:	4b33      	ldr	r3, [pc, #204]	@ (8012608 <MX_TIM15_Init+0x11c>)
 801253a:	2200      	movs	r2, #0
 801253c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 801253e:	4b32      	ldr	r3, [pc, #200]	@ (8012608 <MX_TIM15_Init+0x11c>)
 8012540:	2200      	movs	r2, #0
 8012542:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012544:	4b30      	ldr	r3, [pc, #192]	@ (8012608 <MX_TIM15_Init+0x11c>)
 8012546:	2200      	movs	r2, #0
 8012548:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 801254a:	482f      	ldr	r0, [pc, #188]	@ (8012608 <MX_TIM15_Init+0x11c>)
 801254c:	f7f9 ffec 	bl	800c528 <HAL_TIM_PWM_Init>
 8012550:	4603      	mov	r3, r0
 8012552:	2b00      	cmp	r3, #0
 8012554:	d001      	beq.n	801255a <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8012556:	f7ff f851 	bl	80115fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801255a:	2300      	movs	r3, #0
 801255c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801255e:	2300      	movs	r3, #0
 8012560:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8012562:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012566:	4619      	mov	r1, r3
 8012568:	4827      	ldr	r0, [pc, #156]	@ (8012608 <MX_TIM15_Init+0x11c>)
 801256a:	f7fb f8e1 	bl	800d730 <HAL_TIMEx_MasterConfigSynchronization>
 801256e:	4603      	mov	r3, r0
 8012570:	2b00      	cmp	r3, #0
 8012572:	d001      	beq.n	8012578 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8012574:	f7ff f842 	bl	80115fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8012578:	2360      	movs	r3, #96	@ 0x60
 801257a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 801257c:	2300      	movs	r3, #0
 801257e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8012580:	2300      	movs	r3, #0
 8012582:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8012584:	2300      	movs	r3, #0
 8012586:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8012588:	2300      	movs	r3, #0
 801258a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801258c:	2300      	movs	r3, #0
 801258e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8012590:	2300      	movs	r3, #0
 8012592:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8012594:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8012598:	2200      	movs	r2, #0
 801259a:	4619      	mov	r1, r3
 801259c:	481a      	ldr	r0, [pc, #104]	@ (8012608 <MX_TIM15_Init+0x11c>)
 801259e:	f7fa f9bf 	bl	800c920 <HAL_TIM_PWM_ConfigChannel>
 80125a2:	4603      	mov	r3, r0
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d001      	beq.n	80125ac <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80125a8:	f7ff f828 	bl	80115fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80125ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80125b0:	2204      	movs	r2, #4
 80125b2:	4619      	mov	r1, r3
 80125b4:	4814      	ldr	r0, [pc, #80]	@ (8012608 <MX_TIM15_Init+0x11c>)
 80125b6:	f7fa f9b3 	bl	800c920 <HAL_TIM_PWM_ConfigChannel>
 80125ba:	4603      	mov	r3, r0
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d001      	beq.n	80125c4 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 80125c0:	f7ff f81c 	bl	80115fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80125c4:	2300      	movs	r3, #0
 80125c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80125c8:	2300      	movs	r3, #0
 80125ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80125cc:	2300      	movs	r3, #0
 80125ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80125d0:	2300      	movs	r3, #0
 80125d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80125d4:	2300      	movs	r3, #0
 80125d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80125d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80125dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80125de:	2300      	movs	r3, #0
 80125e0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80125e2:	2300      	movs	r3, #0
 80125e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80125e6:	1d3b      	adds	r3, r7, #4
 80125e8:	4619      	mov	r1, r3
 80125ea:	4807      	ldr	r0, [pc, #28]	@ (8012608 <MX_TIM15_Init+0x11c>)
 80125ec:	f7fb f92e 	bl	800d84c <HAL_TIMEx_ConfigBreakDeadTime>
 80125f0:	4603      	mov	r3, r0
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d001      	beq.n	80125fa <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 80125f6:	f7ff f801 	bl	80115fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80125fa:	4803      	ldr	r0, [pc, #12]	@ (8012608 <MX_TIM15_Init+0x11c>)
 80125fc:	f000 f864 	bl	80126c8 <HAL_TIM_MspPostInit>

}
 8012600:	bf00      	nop
 8012602:	3758      	adds	r7, #88	@ 0x58
 8012604:	46bd      	mov	sp, r7
 8012606:	bd80      	pop	{r7, pc}
 8012608:	240010b8 	.word	0x240010b8
 801260c:	40014000 	.word	0x40014000

08012610 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8012610:	b480      	push	{r7}
 8012612:	b085      	sub	sp, #20
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	4a0b      	ldr	r2, [pc, #44]	@ (801264c <HAL_TIM_Base_MspInit+0x3c>)
 801261e:	4293      	cmp	r3, r2
 8012620:	d10e      	bne.n	8012640 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8012622:	4b0b      	ldr	r3, [pc, #44]	@ (8012650 <HAL_TIM_Base_MspInit+0x40>)
 8012624:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012628:	4a09      	ldr	r2, [pc, #36]	@ (8012650 <HAL_TIM_Base_MspInit+0x40>)
 801262a:	f043 0301 	orr.w	r3, r3, #1
 801262e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8012632:	4b07      	ldr	r3, [pc, #28]	@ (8012650 <HAL_TIM_Base_MspInit+0x40>)
 8012634:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012638:	f003 0301 	and.w	r3, r3, #1
 801263c:	60fb      	str	r3, [r7, #12]
 801263e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8012640:	bf00      	nop
 8012642:	3714      	adds	r7, #20
 8012644:	46bd      	mov	sp, r7
 8012646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264a:	4770      	bx	lr
 801264c:	40010000 	.word	0x40010000
 8012650:	58024400 	.word	0x58024400

08012654 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8012654:	b480      	push	{r7}
 8012656:	b085      	sub	sp, #20
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	4a16      	ldr	r2, [pc, #88]	@ (80126bc <HAL_TIM_PWM_MspInit+0x68>)
 8012662:	4293      	cmp	r3, r2
 8012664:	d10f      	bne.n	8012686 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8012666:	4b16      	ldr	r3, [pc, #88]	@ (80126c0 <HAL_TIM_PWM_MspInit+0x6c>)
 8012668:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801266c:	4a14      	ldr	r2, [pc, #80]	@ (80126c0 <HAL_TIM_PWM_MspInit+0x6c>)
 801266e:	f043 0302 	orr.w	r3, r3, #2
 8012672:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8012676:	4b12      	ldr	r3, [pc, #72]	@ (80126c0 <HAL_TIM_PWM_MspInit+0x6c>)
 8012678:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801267c:	f003 0302 	and.w	r3, r3, #2
 8012680:	60fb      	str	r3, [r7, #12]
 8012682:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8012684:	e013      	b.n	80126ae <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM15)
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	4a0e      	ldr	r2, [pc, #56]	@ (80126c4 <HAL_TIM_PWM_MspInit+0x70>)
 801268c:	4293      	cmp	r3, r2
 801268e:	d10e      	bne.n	80126ae <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8012690:	4b0b      	ldr	r3, [pc, #44]	@ (80126c0 <HAL_TIM_PWM_MspInit+0x6c>)
 8012692:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012696:	4a0a      	ldr	r2, [pc, #40]	@ (80126c0 <HAL_TIM_PWM_MspInit+0x6c>)
 8012698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801269c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80126a0:	4b07      	ldr	r3, [pc, #28]	@ (80126c0 <HAL_TIM_PWM_MspInit+0x6c>)
 80126a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80126a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80126aa:	60bb      	str	r3, [r7, #8]
 80126ac:	68bb      	ldr	r3, [r7, #8]
}
 80126ae:	bf00      	nop
 80126b0:	3714      	adds	r7, #20
 80126b2:	46bd      	mov	sp, r7
 80126b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b8:	4770      	bx	lr
 80126ba:	bf00      	nop
 80126bc:	40010400 	.word	0x40010400
 80126c0:	58024400 	.word	0x58024400
 80126c4:	40014000 	.word	0x40014000

080126c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b08a      	sub	sp, #40	@ 0x28
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80126d0:	f107 0314 	add.w	r3, r7, #20
 80126d4:	2200      	movs	r2, #0
 80126d6:	601a      	str	r2, [r3, #0]
 80126d8:	605a      	str	r2, [r3, #4]
 80126da:	609a      	str	r2, [r3, #8]
 80126dc:	60da      	str	r2, [r3, #12]
 80126de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	4a38      	ldr	r2, [pc, #224]	@ (80127c8 <HAL_TIM_MspPostInit+0x100>)
 80126e6:	4293      	cmp	r3, r2
 80126e8:	d120      	bne.n	801272c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80126ea:	4b38      	ldr	r3, [pc, #224]	@ (80127cc <HAL_TIM_MspPostInit+0x104>)
 80126ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80126f0:	4a36      	ldr	r2, [pc, #216]	@ (80127cc <HAL_TIM_MspPostInit+0x104>)
 80126f2:	f043 0310 	orr.w	r3, r3, #16
 80126f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80126fa:	4b34      	ldr	r3, [pc, #208]	@ (80127cc <HAL_TIM_MspPostInit+0x104>)
 80126fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012700:	f003 0310 	and.w	r3, r3, #16
 8012704:	613b      	str	r3, [r7, #16]
 8012706:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE10     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8012708:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801270c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801270e:	2302      	movs	r3, #2
 8012710:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012712:	2300      	movs	r3, #0
 8012714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012716:	2300      	movs	r3, #0
 8012718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 801271a:	2301      	movs	r3, #1
 801271c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801271e:	f107 0314 	add.w	r3, r7, #20
 8012722:	4619      	mov	r1, r3
 8012724:	482a      	ldr	r0, [pc, #168]	@ (80127d0 <HAL_TIM_MspPostInit+0x108>)
 8012726:	f7f2 f877 	bl	8004818 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 801272a:	e048      	b.n	80127be <HAL_TIM_MspPostInit+0xf6>
  else if(timHandle->Instance==TIM8)
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	4a28      	ldr	r2, [pc, #160]	@ (80127d4 <HAL_TIM_MspPostInit+0x10c>)
 8012732:	4293      	cmp	r3, r2
 8012734:	d11f      	bne.n	8012776 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012736:	4b25      	ldr	r3, [pc, #148]	@ (80127cc <HAL_TIM_MspPostInit+0x104>)
 8012738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801273c:	4a23      	ldr	r2, [pc, #140]	@ (80127cc <HAL_TIM_MspPostInit+0x104>)
 801273e:	f043 0304 	orr.w	r3, r3, #4
 8012742:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8012746:	4b21      	ldr	r3, [pc, #132]	@ (80127cc <HAL_TIM_MspPostInit+0x104>)
 8012748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801274c:	f003 0304 	and.w	r3, r3, #4
 8012750:	60fb      	str	r3, [r7, #12]
 8012752:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_L_PWM_Pin|Motor_R_PWM_Pin;
 8012754:	23c0      	movs	r3, #192	@ 0xc0
 8012756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012758:	2302      	movs	r3, #2
 801275a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801275c:	2300      	movs	r3, #0
 801275e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012760:	2300      	movs	r3, #0
 8012762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8012764:	2303      	movs	r3, #3
 8012766:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012768:	f107 0314 	add.w	r3, r7, #20
 801276c:	4619      	mov	r1, r3
 801276e:	481a      	ldr	r0, [pc, #104]	@ (80127d8 <HAL_TIM_MspPostInit+0x110>)
 8012770:	f7f2 f852 	bl	8004818 <HAL_GPIO_Init>
}
 8012774:	e023      	b.n	80127be <HAL_TIM_MspPostInit+0xf6>
  else if(timHandle->Instance==TIM15)
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	4a18      	ldr	r2, [pc, #96]	@ (80127dc <HAL_TIM_MspPostInit+0x114>)
 801277c:	4293      	cmp	r3, r2
 801277e:	d11e      	bne.n	80127be <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8012780:	4b12      	ldr	r3, [pc, #72]	@ (80127cc <HAL_TIM_MspPostInit+0x104>)
 8012782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012786:	4a11      	ldr	r2, [pc, #68]	@ (80127cc <HAL_TIM_MspPostInit+0x104>)
 8012788:	f043 0310 	orr.w	r3, r3, #16
 801278c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8012790:	4b0e      	ldr	r3, [pc, #56]	@ (80127cc <HAL_TIM_MspPostInit+0x104>)
 8012792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012796:	f003 0310 	and.w	r3, r3, #16
 801279a:	60bb      	str	r3, [r7, #8]
 801279c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 801279e:	2360      	movs	r3, #96	@ 0x60
 80127a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80127a2:	2302      	movs	r3, #2
 80127a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80127a6:	2300      	movs	r3, #0
 80127a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80127aa:	2300      	movs	r3, #0
 80127ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80127ae:	2304      	movs	r3, #4
 80127b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80127b2:	f107 0314 	add.w	r3, r7, #20
 80127b6:	4619      	mov	r1, r3
 80127b8:	4805      	ldr	r0, [pc, #20]	@ (80127d0 <HAL_TIM_MspPostInit+0x108>)
 80127ba:	f7f2 f82d 	bl	8004818 <HAL_GPIO_Init>
}
 80127be:	bf00      	nop
 80127c0:	3728      	adds	r7, #40	@ 0x28
 80127c2:	46bd      	mov	sp, r7
 80127c4:	bd80      	pop	{r7, pc}
 80127c6:	bf00      	nop
 80127c8:	40010000 	.word	0x40010000
 80127cc:	58024400 	.word	0x58024400
 80127d0:	58021000 	.word	0x58021000
 80127d4:	40010400 	.word	0x40010400
 80127d8:	58020800 	.word	0x58020800
 80127dc:	40014000 	.word	0x40014000

080127e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80127e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8012818 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80127e4:	f7ff fcd8 	bl	8012198 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80127e8:	480c      	ldr	r0, [pc, #48]	@ (801281c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80127ea:	490d      	ldr	r1, [pc, #52]	@ (8012820 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80127ec:	4a0d      	ldr	r2, [pc, #52]	@ (8012824 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80127ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80127f0:	e002      	b.n	80127f8 <LoopCopyDataInit>

080127f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80127f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80127f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80127f6:	3304      	adds	r3, #4

080127f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80127f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80127fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80127fc:	d3f9      	bcc.n	80127f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80127fe:	4a0a      	ldr	r2, [pc, #40]	@ (8012828 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8012800:	4c0a      	ldr	r4, [pc, #40]	@ (801282c <LoopFillZerobss+0x22>)
  movs r3, #0
 8012802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8012804:	e001      	b.n	801280a <LoopFillZerobss>

08012806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8012806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8012808:	3204      	adds	r2, #4

0801280a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801280a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801280c:	d3fb      	bcc.n	8012806 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 801280e:	f000 ffeb 	bl	80137e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8012812:	f7fe fdcb 	bl	80113ac <main>
  bx  lr
 8012816:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8012818:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 801281c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8012820:	24000558 	.word	0x24000558
  ldr r2, =_sidata
 8012824:	0801e2f4 	.word	0x0801e2f4
  ldr r2, =_sbss
 8012828:	24000558 	.word	0x24000558
  ldr r4, =_ebss
 801282c:	24001250 	.word	0x24001250

08012830 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8012830:	e7fe      	b.n	8012830 <ADC3_IRQHandler>

08012832 <__cvt>:
 8012832:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012834:	ed2d 8b02 	vpush	{d8}
 8012838:	eeb0 8b40 	vmov.f64	d8, d0
 801283c:	b085      	sub	sp, #20
 801283e:	4617      	mov	r7, r2
 8012840:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8012842:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012844:	ee18 2a90 	vmov	r2, s17
 8012848:	f025 0520 	bic.w	r5, r5, #32
 801284c:	2a00      	cmp	r2, #0
 801284e:	bfb6      	itet	lt
 8012850:	222d      	movlt	r2, #45	@ 0x2d
 8012852:	2200      	movge	r2, #0
 8012854:	eeb1 8b40 	vneglt.f64	d8, d0
 8012858:	2d46      	cmp	r5, #70	@ 0x46
 801285a:	460c      	mov	r4, r1
 801285c:	701a      	strb	r2, [r3, #0]
 801285e:	d004      	beq.n	801286a <__cvt+0x38>
 8012860:	2d45      	cmp	r5, #69	@ 0x45
 8012862:	d100      	bne.n	8012866 <__cvt+0x34>
 8012864:	3401      	adds	r4, #1
 8012866:	2102      	movs	r1, #2
 8012868:	e000      	b.n	801286c <__cvt+0x3a>
 801286a:	2103      	movs	r1, #3
 801286c:	ab03      	add	r3, sp, #12
 801286e:	9301      	str	r3, [sp, #4]
 8012870:	ab02      	add	r3, sp, #8
 8012872:	9300      	str	r3, [sp, #0]
 8012874:	4622      	mov	r2, r4
 8012876:	4633      	mov	r3, r6
 8012878:	eeb0 0b48 	vmov.f64	d0, d8
 801287c:	f001 f86c 	bl	8013958 <_dtoa_r>
 8012880:	2d47      	cmp	r5, #71	@ 0x47
 8012882:	d114      	bne.n	80128ae <__cvt+0x7c>
 8012884:	07fb      	lsls	r3, r7, #31
 8012886:	d50a      	bpl.n	801289e <__cvt+0x6c>
 8012888:	1902      	adds	r2, r0, r4
 801288a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801288e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012892:	bf08      	it	eq
 8012894:	9203      	streq	r2, [sp, #12]
 8012896:	2130      	movs	r1, #48	@ 0x30
 8012898:	9b03      	ldr	r3, [sp, #12]
 801289a:	4293      	cmp	r3, r2
 801289c:	d319      	bcc.n	80128d2 <__cvt+0xa0>
 801289e:	9b03      	ldr	r3, [sp, #12]
 80128a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80128a2:	1a1b      	subs	r3, r3, r0
 80128a4:	6013      	str	r3, [r2, #0]
 80128a6:	b005      	add	sp, #20
 80128a8:	ecbd 8b02 	vpop	{d8}
 80128ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128ae:	2d46      	cmp	r5, #70	@ 0x46
 80128b0:	eb00 0204 	add.w	r2, r0, r4
 80128b4:	d1e9      	bne.n	801288a <__cvt+0x58>
 80128b6:	7803      	ldrb	r3, [r0, #0]
 80128b8:	2b30      	cmp	r3, #48	@ 0x30
 80128ba:	d107      	bne.n	80128cc <__cvt+0x9a>
 80128bc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80128c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128c4:	bf1c      	itt	ne
 80128c6:	f1c4 0401 	rsbne	r4, r4, #1
 80128ca:	6034      	strne	r4, [r6, #0]
 80128cc:	6833      	ldr	r3, [r6, #0]
 80128ce:	441a      	add	r2, r3
 80128d0:	e7db      	b.n	801288a <__cvt+0x58>
 80128d2:	1c5c      	adds	r4, r3, #1
 80128d4:	9403      	str	r4, [sp, #12]
 80128d6:	7019      	strb	r1, [r3, #0]
 80128d8:	e7de      	b.n	8012898 <__cvt+0x66>

080128da <__exponent>:
 80128da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80128dc:	2900      	cmp	r1, #0
 80128de:	bfba      	itte	lt
 80128e0:	4249      	neglt	r1, r1
 80128e2:	232d      	movlt	r3, #45	@ 0x2d
 80128e4:	232b      	movge	r3, #43	@ 0x2b
 80128e6:	2909      	cmp	r1, #9
 80128e8:	7002      	strb	r2, [r0, #0]
 80128ea:	7043      	strb	r3, [r0, #1]
 80128ec:	dd29      	ble.n	8012942 <__exponent+0x68>
 80128ee:	f10d 0307 	add.w	r3, sp, #7
 80128f2:	461d      	mov	r5, r3
 80128f4:	270a      	movs	r7, #10
 80128f6:	461a      	mov	r2, r3
 80128f8:	fbb1 f6f7 	udiv	r6, r1, r7
 80128fc:	fb07 1416 	mls	r4, r7, r6, r1
 8012900:	3430      	adds	r4, #48	@ 0x30
 8012902:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012906:	460c      	mov	r4, r1
 8012908:	2c63      	cmp	r4, #99	@ 0x63
 801290a:	f103 33ff 	add.w	r3, r3, #4294967295
 801290e:	4631      	mov	r1, r6
 8012910:	dcf1      	bgt.n	80128f6 <__exponent+0x1c>
 8012912:	3130      	adds	r1, #48	@ 0x30
 8012914:	1e94      	subs	r4, r2, #2
 8012916:	f803 1c01 	strb.w	r1, [r3, #-1]
 801291a:	1c41      	adds	r1, r0, #1
 801291c:	4623      	mov	r3, r4
 801291e:	42ab      	cmp	r3, r5
 8012920:	d30a      	bcc.n	8012938 <__exponent+0x5e>
 8012922:	f10d 0309 	add.w	r3, sp, #9
 8012926:	1a9b      	subs	r3, r3, r2
 8012928:	42ac      	cmp	r4, r5
 801292a:	bf88      	it	hi
 801292c:	2300      	movhi	r3, #0
 801292e:	3302      	adds	r3, #2
 8012930:	4403      	add	r3, r0
 8012932:	1a18      	subs	r0, r3, r0
 8012934:	b003      	add	sp, #12
 8012936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012938:	f813 6b01 	ldrb.w	r6, [r3], #1
 801293c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012940:	e7ed      	b.n	801291e <__exponent+0x44>
 8012942:	2330      	movs	r3, #48	@ 0x30
 8012944:	3130      	adds	r1, #48	@ 0x30
 8012946:	7083      	strb	r3, [r0, #2]
 8012948:	70c1      	strb	r1, [r0, #3]
 801294a:	1d03      	adds	r3, r0, #4
 801294c:	e7f1      	b.n	8012932 <__exponent+0x58>
	...

08012950 <_printf_float>:
 8012950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012954:	b08d      	sub	sp, #52	@ 0x34
 8012956:	460c      	mov	r4, r1
 8012958:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801295c:	4616      	mov	r6, r2
 801295e:	461f      	mov	r7, r3
 8012960:	4605      	mov	r5, r0
 8012962:	f000 fef1 	bl	8013748 <_localeconv_r>
 8012966:	f8d0 b000 	ldr.w	fp, [r0]
 801296a:	4658      	mov	r0, fp
 801296c:	f7ed fd08 	bl	8000380 <strlen>
 8012970:	2300      	movs	r3, #0
 8012972:	930a      	str	r3, [sp, #40]	@ 0x28
 8012974:	f8d8 3000 	ldr.w	r3, [r8]
 8012978:	f894 9018 	ldrb.w	r9, [r4, #24]
 801297c:	6822      	ldr	r2, [r4, #0]
 801297e:	9005      	str	r0, [sp, #20]
 8012980:	3307      	adds	r3, #7
 8012982:	f023 0307 	bic.w	r3, r3, #7
 8012986:	f103 0108 	add.w	r1, r3, #8
 801298a:	f8c8 1000 	str.w	r1, [r8]
 801298e:	ed93 0b00 	vldr	d0, [r3]
 8012992:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8012bf0 <_printf_float+0x2a0>
 8012996:	eeb0 7bc0 	vabs.f64	d7, d0
 801299a:	eeb4 7b46 	vcmp.f64	d7, d6
 801299e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129a2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80129a6:	dd24      	ble.n	80129f2 <_printf_float+0xa2>
 80129a8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80129ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129b0:	d502      	bpl.n	80129b8 <_printf_float+0x68>
 80129b2:	232d      	movs	r3, #45	@ 0x2d
 80129b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80129b8:	498f      	ldr	r1, [pc, #572]	@ (8012bf8 <_printf_float+0x2a8>)
 80129ba:	4b90      	ldr	r3, [pc, #576]	@ (8012bfc <_printf_float+0x2ac>)
 80129bc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80129c0:	bf8c      	ite	hi
 80129c2:	4688      	movhi	r8, r1
 80129c4:	4698      	movls	r8, r3
 80129c6:	f022 0204 	bic.w	r2, r2, #4
 80129ca:	2303      	movs	r3, #3
 80129cc:	6123      	str	r3, [r4, #16]
 80129ce:	6022      	str	r2, [r4, #0]
 80129d0:	f04f 0a00 	mov.w	sl, #0
 80129d4:	9700      	str	r7, [sp, #0]
 80129d6:	4633      	mov	r3, r6
 80129d8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80129da:	4621      	mov	r1, r4
 80129dc:	4628      	mov	r0, r5
 80129de:	f000 f9d1 	bl	8012d84 <_printf_common>
 80129e2:	3001      	adds	r0, #1
 80129e4:	f040 8089 	bne.w	8012afa <_printf_float+0x1aa>
 80129e8:	f04f 30ff 	mov.w	r0, #4294967295
 80129ec:	b00d      	add	sp, #52	@ 0x34
 80129ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129f2:	eeb4 0b40 	vcmp.f64	d0, d0
 80129f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129fa:	d709      	bvc.n	8012a10 <_printf_float+0xc0>
 80129fc:	ee10 3a90 	vmov	r3, s1
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	bfbc      	itt	lt
 8012a04:	232d      	movlt	r3, #45	@ 0x2d
 8012a06:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012a0a:	497d      	ldr	r1, [pc, #500]	@ (8012c00 <_printf_float+0x2b0>)
 8012a0c:	4b7d      	ldr	r3, [pc, #500]	@ (8012c04 <_printf_float+0x2b4>)
 8012a0e:	e7d5      	b.n	80129bc <_printf_float+0x6c>
 8012a10:	6863      	ldr	r3, [r4, #4]
 8012a12:	1c59      	adds	r1, r3, #1
 8012a14:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8012a18:	d139      	bne.n	8012a8e <_printf_float+0x13e>
 8012a1a:	2306      	movs	r3, #6
 8012a1c:	6063      	str	r3, [r4, #4]
 8012a1e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8012a22:	2300      	movs	r3, #0
 8012a24:	6022      	str	r2, [r4, #0]
 8012a26:	9303      	str	r3, [sp, #12]
 8012a28:	ab0a      	add	r3, sp, #40	@ 0x28
 8012a2a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8012a2e:	ab09      	add	r3, sp, #36	@ 0x24
 8012a30:	9300      	str	r3, [sp, #0]
 8012a32:	6861      	ldr	r1, [r4, #4]
 8012a34:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012a38:	4628      	mov	r0, r5
 8012a3a:	f7ff fefa 	bl	8012832 <__cvt>
 8012a3e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012a42:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012a44:	4680      	mov	r8, r0
 8012a46:	d129      	bne.n	8012a9c <_printf_float+0x14c>
 8012a48:	1cc8      	adds	r0, r1, #3
 8012a4a:	db02      	blt.n	8012a52 <_printf_float+0x102>
 8012a4c:	6863      	ldr	r3, [r4, #4]
 8012a4e:	4299      	cmp	r1, r3
 8012a50:	dd41      	ble.n	8012ad6 <_printf_float+0x186>
 8012a52:	f1a9 0902 	sub.w	r9, r9, #2
 8012a56:	fa5f f989 	uxtb.w	r9, r9
 8012a5a:	3901      	subs	r1, #1
 8012a5c:	464a      	mov	r2, r9
 8012a5e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012a62:	9109      	str	r1, [sp, #36]	@ 0x24
 8012a64:	f7ff ff39 	bl	80128da <__exponent>
 8012a68:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012a6a:	1813      	adds	r3, r2, r0
 8012a6c:	2a01      	cmp	r2, #1
 8012a6e:	4682      	mov	sl, r0
 8012a70:	6123      	str	r3, [r4, #16]
 8012a72:	dc02      	bgt.n	8012a7a <_printf_float+0x12a>
 8012a74:	6822      	ldr	r2, [r4, #0]
 8012a76:	07d2      	lsls	r2, r2, #31
 8012a78:	d501      	bpl.n	8012a7e <_printf_float+0x12e>
 8012a7a:	3301      	adds	r3, #1
 8012a7c:	6123      	str	r3, [r4, #16]
 8012a7e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d0a6      	beq.n	80129d4 <_printf_float+0x84>
 8012a86:	232d      	movs	r3, #45	@ 0x2d
 8012a88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012a8c:	e7a2      	b.n	80129d4 <_printf_float+0x84>
 8012a8e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012a92:	d1c4      	bne.n	8012a1e <_printf_float+0xce>
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d1c2      	bne.n	8012a1e <_printf_float+0xce>
 8012a98:	2301      	movs	r3, #1
 8012a9a:	e7bf      	b.n	8012a1c <_printf_float+0xcc>
 8012a9c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8012aa0:	d9db      	bls.n	8012a5a <_printf_float+0x10a>
 8012aa2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8012aa6:	d118      	bne.n	8012ada <_printf_float+0x18a>
 8012aa8:	2900      	cmp	r1, #0
 8012aaa:	6863      	ldr	r3, [r4, #4]
 8012aac:	dd0b      	ble.n	8012ac6 <_printf_float+0x176>
 8012aae:	6121      	str	r1, [r4, #16]
 8012ab0:	b913      	cbnz	r3, 8012ab8 <_printf_float+0x168>
 8012ab2:	6822      	ldr	r2, [r4, #0]
 8012ab4:	07d0      	lsls	r0, r2, #31
 8012ab6:	d502      	bpl.n	8012abe <_printf_float+0x16e>
 8012ab8:	3301      	adds	r3, #1
 8012aba:	440b      	add	r3, r1
 8012abc:	6123      	str	r3, [r4, #16]
 8012abe:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012ac0:	f04f 0a00 	mov.w	sl, #0
 8012ac4:	e7db      	b.n	8012a7e <_printf_float+0x12e>
 8012ac6:	b913      	cbnz	r3, 8012ace <_printf_float+0x17e>
 8012ac8:	6822      	ldr	r2, [r4, #0]
 8012aca:	07d2      	lsls	r2, r2, #31
 8012acc:	d501      	bpl.n	8012ad2 <_printf_float+0x182>
 8012ace:	3302      	adds	r3, #2
 8012ad0:	e7f4      	b.n	8012abc <_printf_float+0x16c>
 8012ad2:	2301      	movs	r3, #1
 8012ad4:	e7f2      	b.n	8012abc <_printf_float+0x16c>
 8012ad6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8012ada:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012adc:	4299      	cmp	r1, r3
 8012ade:	db05      	blt.n	8012aec <_printf_float+0x19c>
 8012ae0:	6823      	ldr	r3, [r4, #0]
 8012ae2:	6121      	str	r1, [r4, #16]
 8012ae4:	07d8      	lsls	r0, r3, #31
 8012ae6:	d5ea      	bpl.n	8012abe <_printf_float+0x16e>
 8012ae8:	1c4b      	adds	r3, r1, #1
 8012aea:	e7e7      	b.n	8012abc <_printf_float+0x16c>
 8012aec:	2900      	cmp	r1, #0
 8012aee:	bfd4      	ite	le
 8012af0:	f1c1 0202 	rsble	r2, r1, #2
 8012af4:	2201      	movgt	r2, #1
 8012af6:	4413      	add	r3, r2
 8012af8:	e7e0      	b.n	8012abc <_printf_float+0x16c>
 8012afa:	6823      	ldr	r3, [r4, #0]
 8012afc:	055a      	lsls	r2, r3, #21
 8012afe:	d407      	bmi.n	8012b10 <_printf_float+0x1c0>
 8012b00:	6923      	ldr	r3, [r4, #16]
 8012b02:	4642      	mov	r2, r8
 8012b04:	4631      	mov	r1, r6
 8012b06:	4628      	mov	r0, r5
 8012b08:	47b8      	blx	r7
 8012b0a:	3001      	adds	r0, #1
 8012b0c:	d12a      	bne.n	8012b64 <_printf_float+0x214>
 8012b0e:	e76b      	b.n	80129e8 <_printf_float+0x98>
 8012b10:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8012b14:	f240 80e0 	bls.w	8012cd8 <_printf_float+0x388>
 8012b18:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8012b1c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b24:	d133      	bne.n	8012b8e <_printf_float+0x23e>
 8012b26:	4a38      	ldr	r2, [pc, #224]	@ (8012c08 <_printf_float+0x2b8>)
 8012b28:	2301      	movs	r3, #1
 8012b2a:	4631      	mov	r1, r6
 8012b2c:	4628      	mov	r0, r5
 8012b2e:	47b8      	blx	r7
 8012b30:	3001      	adds	r0, #1
 8012b32:	f43f af59 	beq.w	80129e8 <_printf_float+0x98>
 8012b36:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012b3a:	4543      	cmp	r3, r8
 8012b3c:	db02      	blt.n	8012b44 <_printf_float+0x1f4>
 8012b3e:	6823      	ldr	r3, [r4, #0]
 8012b40:	07d8      	lsls	r0, r3, #31
 8012b42:	d50f      	bpl.n	8012b64 <_printf_float+0x214>
 8012b44:	9b05      	ldr	r3, [sp, #20]
 8012b46:	465a      	mov	r2, fp
 8012b48:	4631      	mov	r1, r6
 8012b4a:	4628      	mov	r0, r5
 8012b4c:	47b8      	blx	r7
 8012b4e:	3001      	adds	r0, #1
 8012b50:	f43f af4a 	beq.w	80129e8 <_printf_float+0x98>
 8012b54:	f04f 0900 	mov.w	r9, #0
 8012b58:	f108 38ff 	add.w	r8, r8, #4294967295
 8012b5c:	f104 0a1a 	add.w	sl, r4, #26
 8012b60:	45c8      	cmp	r8, r9
 8012b62:	dc09      	bgt.n	8012b78 <_printf_float+0x228>
 8012b64:	6823      	ldr	r3, [r4, #0]
 8012b66:	079b      	lsls	r3, r3, #30
 8012b68:	f100 8107 	bmi.w	8012d7a <_printf_float+0x42a>
 8012b6c:	68e0      	ldr	r0, [r4, #12]
 8012b6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012b70:	4298      	cmp	r0, r3
 8012b72:	bfb8      	it	lt
 8012b74:	4618      	movlt	r0, r3
 8012b76:	e739      	b.n	80129ec <_printf_float+0x9c>
 8012b78:	2301      	movs	r3, #1
 8012b7a:	4652      	mov	r2, sl
 8012b7c:	4631      	mov	r1, r6
 8012b7e:	4628      	mov	r0, r5
 8012b80:	47b8      	blx	r7
 8012b82:	3001      	adds	r0, #1
 8012b84:	f43f af30 	beq.w	80129e8 <_printf_float+0x98>
 8012b88:	f109 0901 	add.w	r9, r9, #1
 8012b8c:	e7e8      	b.n	8012b60 <_printf_float+0x210>
 8012b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	dc3b      	bgt.n	8012c0c <_printf_float+0x2bc>
 8012b94:	4a1c      	ldr	r2, [pc, #112]	@ (8012c08 <_printf_float+0x2b8>)
 8012b96:	2301      	movs	r3, #1
 8012b98:	4631      	mov	r1, r6
 8012b9a:	4628      	mov	r0, r5
 8012b9c:	47b8      	blx	r7
 8012b9e:	3001      	adds	r0, #1
 8012ba0:	f43f af22 	beq.w	80129e8 <_printf_float+0x98>
 8012ba4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012ba8:	ea59 0303 	orrs.w	r3, r9, r3
 8012bac:	d102      	bne.n	8012bb4 <_printf_float+0x264>
 8012bae:	6823      	ldr	r3, [r4, #0]
 8012bb0:	07d9      	lsls	r1, r3, #31
 8012bb2:	d5d7      	bpl.n	8012b64 <_printf_float+0x214>
 8012bb4:	9b05      	ldr	r3, [sp, #20]
 8012bb6:	465a      	mov	r2, fp
 8012bb8:	4631      	mov	r1, r6
 8012bba:	4628      	mov	r0, r5
 8012bbc:	47b8      	blx	r7
 8012bbe:	3001      	adds	r0, #1
 8012bc0:	f43f af12 	beq.w	80129e8 <_printf_float+0x98>
 8012bc4:	f04f 0a00 	mov.w	sl, #0
 8012bc8:	f104 0b1a 	add.w	fp, r4, #26
 8012bcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012bce:	425b      	negs	r3, r3
 8012bd0:	4553      	cmp	r3, sl
 8012bd2:	dc01      	bgt.n	8012bd8 <_printf_float+0x288>
 8012bd4:	464b      	mov	r3, r9
 8012bd6:	e794      	b.n	8012b02 <_printf_float+0x1b2>
 8012bd8:	2301      	movs	r3, #1
 8012bda:	465a      	mov	r2, fp
 8012bdc:	4631      	mov	r1, r6
 8012bde:	4628      	mov	r0, r5
 8012be0:	47b8      	blx	r7
 8012be2:	3001      	adds	r0, #1
 8012be4:	f43f af00 	beq.w	80129e8 <_printf_float+0x98>
 8012be8:	f10a 0a01 	add.w	sl, sl, #1
 8012bec:	e7ee      	b.n	8012bcc <_printf_float+0x27c>
 8012bee:	bf00      	nop
 8012bf0:	ffffffff 	.word	0xffffffff
 8012bf4:	7fefffff 	.word	0x7fefffff
 8012bf8:	0801debc 	.word	0x0801debc
 8012bfc:	0801deb8 	.word	0x0801deb8
 8012c00:	0801dec4 	.word	0x0801dec4
 8012c04:	0801dec0 	.word	0x0801dec0
 8012c08:	0801dec8 	.word	0x0801dec8
 8012c0c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012c0e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012c12:	4553      	cmp	r3, sl
 8012c14:	bfa8      	it	ge
 8012c16:	4653      	movge	r3, sl
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	4699      	mov	r9, r3
 8012c1c:	dc37      	bgt.n	8012c8e <_printf_float+0x33e>
 8012c1e:	2300      	movs	r3, #0
 8012c20:	9307      	str	r3, [sp, #28]
 8012c22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012c26:	f104 021a 	add.w	r2, r4, #26
 8012c2a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012c2c:	9907      	ldr	r1, [sp, #28]
 8012c2e:	9306      	str	r3, [sp, #24]
 8012c30:	eba3 0309 	sub.w	r3, r3, r9
 8012c34:	428b      	cmp	r3, r1
 8012c36:	dc31      	bgt.n	8012c9c <_printf_float+0x34c>
 8012c38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c3a:	459a      	cmp	sl, r3
 8012c3c:	dc3b      	bgt.n	8012cb6 <_printf_float+0x366>
 8012c3e:	6823      	ldr	r3, [r4, #0]
 8012c40:	07da      	lsls	r2, r3, #31
 8012c42:	d438      	bmi.n	8012cb6 <_printf_float+0x366>
 8012c44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c46:	ebaa 0903 	sub.w	r9, sl, r3
 8012c4a:	9b06      	ldr	r3, [sp, #24]
 8012c4c:	ebaa 0303 	sub.w	r3, sl, r3
 8012c50:	4599      	cmp	r9, r3
 8012c52:	bfa8      	it	ge
 8012c54:	4699      	movge	r9, r3
 8012c56:	f1b9 0f00 	cmp.w	r9, #0
 8012c5a:	dc34      	bgt.n	8012cc6 <_printf_float+0x376>
 8012c5c:	f04f 0800 	mov.w	r8, #0
 8012c60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012c64:	f104 0b1a 	add.w	fp, r4, #26
 8012c68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c6a:	ebaa 0303 	sub.w	r3, sl, r3
 8012c6e:	eba3 0309 	sub.w	r3, r3, r9
 8012c72:	4543      	cmp	r3, r8
 8012c74:	f77f af76 	ble.w	8012b64 <_printf_float+0x214>
 8012c78:	2301      	movs	r3, #1
 8012c7a:	465a      	mov	r2, fp
 8012c7c:	4631      	mov	r1, r6
 8012c7e:	4628      	mov	r0, r5
 8012c80:	47b8      	blx	r7
 8012c82:	3001      	adds	r0, #1
 8012c84:	f43f aeb0 	beq.w	80129e8 <_printf_float+0x98>
 8012c88:	f108 0801 	add.w	r8, r8, #1
 8012c8c:	e7ec      	b.n	8012c68 <_printf_float+0x318>
 8012c8e:	4642      	mov	r2, r8
 8012c90:	4631      	mov	r1, r6
 8012c92:	4628      	mov	r0, r5
 8012c94:	47b8      	blx	r7
 8012c96:	3001      	adds	r0, #1
 8012c98:	d1c1      	bne.n	8012c1e <_printf_float+0x2ce>
 8012c9a:	e6a5      	b.n	80129e8 <_printf_float+0x98>
 8012c9c:	2301      	movs	r3, #1
 8012c9e:	4631      	mov	r1, r6
 8012ca0:	4628      	mov	r0, r5
 8012ca2:	9206      	str	r2, [sp, #24]
 8012ca4:	47b8      	blx	r7
 8012ca6:	3001      	adds	r0, #1
 8012ca8:	f43f ae9e 	beq.w	80129e8 <_printf_float+0x98>
 8012cac:	9b07      	ldr	r3, [sp, #28]
 8012cae:	9a06      	ldr	r2, [sp, #24]
 8012cb0:	3301      	adds	r3, #1
 8012cb2:	9307      	str	r3, [sp, #28]
 8012cb4:	e7b9      	b.n	8012c2a <_printf_float+0x2da>
 8012cb6:	9b05      	ldr	r3, [sp, #20]
 8012cb8:	465a      	mov	r2, fp
 8012cba:	4631      	mov	r1, r6
 8012cbc:	4628      	mov	r0, r5
 8012cbe:	47b8      	blx	r7
 8012cc0:	3001      	adds	r0, #1
 8012cc2:	d1bf      	bne.n	8012c44 <_printf_float+0x2f4>
 8012cc4:	e690      	b.n	80129e8 <_printf_float+0x98>
 8012cc6:	9a06      	ldr	r2, [sp, #24]
 8012cc8:	464b      	mov	r3, r9
 8012cca:	4442      	add	r2, r8
 8012ccc:	4631      	mov	r1, r6
 8012cce:	4628      	mov	r0, r5
 8012cd0:	47b8      	blx	r7
 8012cd2:	3001      	adds	r0, #1
 8012cd4:	d1c2      	bne.n	8012c5c <_printf_float+0x30c>
 8012cd6:	e687      	b.n	80129e8 <_printf_float+0x98>
 8012cd8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8012cdc:	f1b9 0f01 	cmp.w	r9, #1
 8012ce0:	dc01      	bgt.n	8012ce6 <_printf_float+0x396>
 8012ce2:	07db      	lsls	r3, r3, #31
 8012ce4:	d536      	bpl.n	8012d54 <_printf_float+0x404>
 8012ce6:	2301      	movs	r3, #1
 8012ce8:	4642      	mov	r2, r8
 8012cea:	4631      	mov	r1, r6
 8012cec:	4628      	mov	r0, r5
 8012cee:	47b8      	blx	r7
 8012cf0:	3001      	adds	r0, #1
 8012cf2:	f43f ae79 	beq.w	80129e8 <_printf_float+0x98>
 8012cf6:	9b05      	ldr	r3, [sp, #20]
 8012cf8:	465a      	mov	r2, fp
 8012cfa:	4631      	mov	r1, r6
 8012cfc:	4628      	mov	r0, r5
 8012cfe:	47b8      	blx	r7
 8012d00:	3001      	adds	r0, #1
 8012d02:	f43f ae71 	beq.w	80129e8 <_printf_float+0x98>
 8012d06:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8012d0a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d12:	f109 39ff 	add.w	r9, r9, #4294967295
 8012d16:	d018      	beq.n	8012d4a <_printf_float+0x3fa>
 8012d18:	464b      	mov	r3, r9
 8012d1a:	f108 0201 	add.w	r2, r8, #1
 8012d1e:	4631      	mov	r1, r6
 8012d20:	4628      	mov	r0, r5
 8012d22:	47b8      	blx	r7
 8012d24:	3001      	adds	r0, #1
 8012d26:	d10c      	bne.n	8012d42 <_printf_float+0x3f2>
 8012d28:	e65e      	b.n	80129e8 <_printf_float+0x98>
 8012d2a:	2301      	movs	r3, #1
 8012d2c:	465a      	mov	r2, fp
 8012d2e:	4631      	mov	r1, r6
 8012d30:	4628      	mov	r0, r5
 8012d32:	47b8      	blx	r7
 8012d34:	3001      	adds	r0, #1
 8012d36:	f43f ae57 	beq.w	80129e8 <_printf_float+0x98>
 8012d3a:	f108 0801 	add.w	r8, r8, #1
 8012d3e:	45c8      	cmp	r8, r9
 8012d40:	dbf3      	blt.n	8012d2a <_printf_float+0x3da>
 8012d42:	4653      	mov	r3, sl
 8012d44:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012d48:	e6dc      	b.n	8012b04 <_printf_float+0x1b4>
 8012d4a:	f04f 0800 	mov.w	r8, #0
 8012d4e:	f104 0b1a 	add.w	fp, r4, #26
 8012d52:	e7f4      	b.n	8012d3e <_printf_float+0x3ee>
 8012d54:	2301      	movs	r3, #1
 8012d56:	4642      	mov	r2, r8
 8012d58:	e7e1      	b.n	8012d1e <_printf_float+0x3ce>
 8012d5a:	2301      	movs	r3, #1
 8012d5c:	464a      	mov	r2, r9
 8012d5e:	4631      	mov	r1, r6
 8012d60:	4628      	mov	r0, r5
 8012d62:	47b8      	blx	r7
 8012d64:	3001      	adds	r0, #1
 8012d66:	f43f ae3f 	beq.w	80129e8 <_printf_float+0x98>
 8012d6a:	f108 0801 	add.w	r8, r8, #1
 8012d6e:	68e3      	ldr	r3, [r4, #12]
 8012d70:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012d72:	1a5b      	subs	r3, r3, r1
 8012d74:	4543      	cmp	r3, r8
 8012d76:	dcf0      	bgt.n	8012d5a <_printf_float+0x40a>
 8012d78:	e6f8      	b.n	8012b6c <_printf_float+0x21c>
 8012d7a:	f04f 0800 	mov.w	r8, #0
 8012d7e:	f104 0919 	add.w	r9, r4, #25
 8012d82:	e7f4      	b.n	8012d6e <_printf_float+0x41e>

08012d84 <_printf_common>:
 8012d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d88:	4616      	mov	r6, r2
 8012d8a:	4698      	mov	r8, r3
 8012d8c:	688a      	ldr	r2, [r1, #8]
 8012d8e:	690b      	ldr	r3, [r1, #16]
 8012d90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012d94:	4293      	cmp	r3, r2
 8012d96:	bfb8      	it	lt
 8012d98:	4613      	movlt	r3, r2
 8012d9a:	6033      	str	r3, [r6, #0]
 8012d9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012da0:	4607      	mov	r7, r0
 8012da2:	460c      	mov	r4, r1
 8012da4:	b10a      	cbz	r2, 8012daa <_printf_common+0x26>
 8012da6:	3301      	adds	r3, #1
 8012da8:	6033      	str	r3, [r6, #0]
 8012daa:	6823      	ldr	r3, [r4, #0]
 8012dac:	0699      	lsls	r1, r3, #26
 8012dae:	bf42      	ittt	mi
 8012db0:	6833      	ldrmi	r3, [r6, #0]
 8012db2:	3302      	addmi	r3, #2
 8012db4:	6033      	strmi	r3, [r6, #0]
 8012db6:	6825      	ldr	r5, [r4, #0]
 8012db8:	f015 0506 	ands.w	r5, r5, #6
 8012dbc:	d106      	bne.n	8012dcc <_printf_common+0x48>
 8012dbe:	f104 0a19 	add.w	sl, r4, #25
 8012dc2:	68e3      	ldr	r3, [r4, #12]
 8012dc4:	6832      	ldr	r2, [r6, #0]
 8012dc6:	1a9b      	subs	r3, r3, r2
 8012dc8:	42ab      	cmp	r3, r5
 8012dca:	dc26      	bgt.n	8012e1a <_printf_common+0x96>
 8012dcc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012dd0:	6822      	ldr	r2, [r4, #0]
 8012dd2:	3b00      	subs	r3, #0
 8012dd4:	bf18      	it	ne
 8012dd6:	2301      	movne	r3, #1
 8012dd8:	0692      	lsls	r2, r2, #26
 8012dda:	d42b      	bmi.n	8012e34 <_printf_common+0xb0>
 8012ddc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012de0:	4641      	mov	r1, r8
 8012de2:	4638      	mov	r0, r7
 8012de4:	47c8      	blx	r9
 8012de6:	3001      	adds	r0, #1
 8012de8:	d01e      	beq.n	8012e28 <_printf_common+0xa4>
 8012dea:	6823      	ldr	r3, [r4, #0]
 8012dec:	6922      	ldr	r2, [r4, #16]
 8012dee:	f003 0306 	and.w	r3, r3, #6
 8012df2:	2b04      	cmp	r3, #4
 8012df4:	bf02      	ittt	eq
 8012df6:	68e5      	ldreq	r5, [r4, #12]
 8012df8:	6833      	ldreq	r3, [r6, #0]
 8012dfa:	1aed      	subeq	r5, r5, r3
 8012dfc:	68a3      	ldr	r3, [r4, #8]
 8012dfe:	bf0c      	ite	eq
 8012e00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012e04:	2500      	movne	r5, #0
 8012e06:	4293      	cmp	r3, r2
 8012e08:	bfc4      	itt	gt
 8012e0a:	1a9b      	subgt	r3, r3, r2
 8012e0c:	18ed      	addgt	r5, r5, r3
 8012e0e:	2600      	movs	r6, #0
 8012e10:	341a      	adds	r4, #26
 8012e12:	42b5      	cmp	r5, r6
 8012e14:	d11a      	bne.n	8012e4c <_printf_common+0xc8>
 8012e16:	2000      	movs	r0, #0
 8012e18:	e008      	b.n	8012e2c <_printf_common+0xa8>
 8012e1a:	2301      	movs	r3, #1
 8012e1c:	4652      	mov	r2, sl
 8012e1e:	4641      	mov	r1, r8
 8012e20:	4638      	mov	r0, r7
 8012e22:	47c8      	blx	r9
 8012e24:	3001      	adds	r0, #1
 8012e26:	d103      	bne.n	8012e30 <_printf_common+0xac>
 8012e28:	f04f 30ff 	mov.w	r0, #4294967295
 8012e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e30:	3501      	adds	r5, #1
 8012e32:	e7c6      	b.n	8012dc2 <_printf_common+0x3e>
 8012e34:	18e1      	adds	r1, r4, r3
 8012e36:	1c5a      	adds	r2, r3, #1
 8012e38:	2030      	movs	r0, #48	@ 0x30
 8012e3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012e3e:	4422      	add	r2, r4
 8012e40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012e44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012e48:	3302      	adds	r3, #2
 8012e4a:	e7c7      	b.n	8012ddc <_printf_common+0x58>
 8012e4c:	2301      	movs	r3, #1
 8012e4e:	4622      	mov	r2, r4
 8012e50:	4641      	mov	r1, r8
 8012e52:	4638      	mov	r0, r7
 8012e54:	47c8      	blx	r9
 8012e56:	3001      	adds	r0, #1
 8012e58:	d0e6      	beq.n	8012e28 <_printf_common+0xa4>
 8012e5a:	3601      	adds	r6, #1
 8012e5c:	e7d9      	b.n	8012e12 <_printf_common+0x8e>
	...

08012e60 <_printf_i>:
 8012e60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012e64:	7e0f      	ldrb	r7, [r1, #24]
 8012e66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012e68:	2f78      	cmp	r7, #120	@ 0x78
 8012e6a:	4691      	mov	r9, r2
 8012e6c:	4680      	mov	r8, r0
 8012e6e:	460c      	mov	r4, r1
 8012e70:	469a      	mov	sl, r3
 8012e72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012e76:	d807      	bhi.n	8012e88 <_printf_i+0x28>
 8012e78:	2f62      	cmp	r7, #98	@ 0x62
 8012e7a:	d80a      	bhi.n	8012e92 <_printf_i+0x32>
 8012e7c:	2f00      	cmp	r7, #0
 8012e7e:	f000 80d1 	beq.w	8013024 <_printf_i+0x1c4>
 8012e82:	2f58      	cmp	r7, #88	@ 0x58
 8012e84:	f000 80b8 	beq.w	8012ff8 <_printf_i+0x198>
 8012e88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012e8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012e90:	e03a      	b.n	8012f08 <_printf_i+0xa8>
 8012e92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012e96:	2b15      	cmp	r3, #21
 8012e98:	d8f6      	bhi.n	8012e88 <_printf_i+0x28>
 8012e9a:	a101      	add	r1, pc, #4	@ (adr r1, 8012ea0 <_printf_i+0x40>)
 8012e9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012ea0:	08012ef9 	.word	0x08012ef9
 8012ea4:	08012f0d 	.word	0x08012f0d
 8012ea8:	08012e89 	.word	0x08012e89
 8012eac:	08012e89 	.word	0x08012e89
 8012eb0:	08012e89 	.word	0x08012e89
 8012eb4:	08012e89 	.word	0x08012e89
 8012eb8:	08012f0d 	.word	0x08012f0d
 8012ebc:	08012e89 	.word	0x08012e89
 8012ec0:	08012e89 	.word	0x08012e89
 8012ec4:	08012e89 	.word	0x08012e89
 8012ec8:	08012e89 	.word	0x08012e89
 8012ecc:	0801300b 	.word	0x0801300b
 8012ed0:	08012f37 	.word	0x08012f37
 8012ed4:	08012fc5 	.word	0x08012fc5
 8012ed8:	08012e89 	.word	0x08012e89
 8012edc:	08012e89 	.word	0x08012e89
 8012ee0:	0801302d 	.word	0x0801302d
 8012ee4:	08012e89 	.word	0x08012e89
 8012ee8:	08012f37 	.word	0x08012f37
 8012eec:	08012e89 	.word	0x08012e89
 8012ef0:	08012e89 	.word	0x08012e89
 8012ef4:	08012fcd 	.word	0x08012fcd
 8012ef8:	6833      	ldr	r3, [r6, #0]
 8012efa:	1d1a      	adds	r2, r3, #4
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	6032      	str	r2, [r6, #0]
 8012f00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012f04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012f08:	2301      	movs	r3, #1
 8012f0a:	e09c      	b.n	8013046 <_printf_i+0x1e6>
 8012f0c:	6833      	ldr	r3, [r6, #0]
 8012f0e:	6820      	ldr	r0, [r4, #0]
 8012f10:	1d19      	adds	r1, r3, #4
 8012f12:	6031      	str	r1, [r6, #0]
 8012f14:	0606      	lsls	r6, r0, #24
 8012f16:	d501      	bpl.n	8012f1c <_printf_i+0xbc>
 8012f18:	681d      	ldr	r5, [r3, #0]
 8012f1a:	e003      	b.n	8012f24 <_printf_i+0xc4>
 8012f1c:	0645      	lsls	r5, r0, #25
 8012f1e:	d5fb      	bpl.n	8012f18 <_printf_i+0xb8>
 8012f20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012f24:	2d00      	cmp	r5, #0
 8012f26:	da03      	bge.n	8012f30 <_printf_i+0xd0>
 8012f28:	232d      	movs	r3, #45	@ 0x2d
 8012f2a:	426d      	negs	r5, r5
 8012f2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012f30:	4858      	ldr	r0, [pc, #352]	@ (8013094 <_printf_i+0x234>)
 8012f32:	230a      	movs	r3, #10
 8012f34:	e011      	b.n	8012f5a <_printf_i+0xfa>
 8012f36:	6821      	ldr	r1, [r4, #0]
 8012f38:	6833      	ldr	r3, [r6, #0]
 8012f3a:	0608      	lsls	r0, r1, #24
 8012f3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8012f40:	d402      	bmi.n	8012f48 <_printf_i+0xe8>
 8012f42:	0649      	lsls	r1, r1, #25
 8012f44:	bf48      	it	mi
 8012f46:	b2ad      	uxthmi	r5, r5
 8012f48:	2f6f      	cmp	r7, #111	@ 0x6f
 8012f4a:	4852      	ldr	r0, [pc, #328]	@ (8013094 <_printf_i+0x234>)
 8012f4c:	6033      	str	r3, [r6, #0]
 8012f4e:	bf14      	ite	ne
 8012f50:	230a      	movne	r3, #10
 8012f52:	2308      	moveq	r3, #8
 8012f54:	2100      	movs	r1, #0
 8012f56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012f5a:	6866      	ldr	r6, [r4, #4]
 8012f5c:	60a6      	str	r6, [r4, #8]
 8012f5e:	2e00      	cmp	r6, #0
 8012f60:	db05      	blt.n	8012f6e <_printf_i+0x10e>
 8012f62:	6821      	ldr	r1, [r4, #0]
 8012f64:	432e      	orrs	r6, r5
 8012f66:	f021 0104 	bic.w	r1, r1, #4
 8012f6a:	6021      	str	r1, [r4, #0]
 8012f6c:	d04b      	beq.n	8013006 <_printf_i+0x1a6>
 8012f6e:	4616      	mov	r6, r2
 8012f70:	fbb5 f1f3 	udiv	r1, r5, r3
 8012f74:	fb03 5711 	mls	r7, r3, r1, r5
 8012f78:	5dc7      	ldrb	r7, [r0, r7]
 8012f7a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012f7e:	462f      	mov	r7, r5
 8012f80:	42bb      	cmp	r3, r7
 8012f82:	460d      	mov	r5, r1
 8012f84:	d9f4      	bls.n	8012f70 <_printf_i+0x110>
 8012f86:	2b08      	cmp	r3, #8
 8012f88:	d10b      	bne.n	8012fa2 <_printf_i+0x142>
 8012f8a:	6823      	ldr	r3, [r4, #0]
 8012f8c:	07df      	lsls	r7, r3, #31
 8012f8e:	d508      	bpl.n	8012fa2 <_printf_i+0x142>
 8012f90:	6923      	ldr	r3, [r4, #16]
 8012f92:	6861      	ldr	r1, [r4, #4]
 8012f94:	4299      	cmp	r1, r3
 8012f96:	bfde      	ittt	le
 8012f98:	2330      	movle	r3, #48	@ 0x30
 8012f9a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012f9e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012fa2:	1b92      	subs	r2, r2, r6
 8012fa4:	6122      	str	r2, [r4, #16]
 8012fa6:	f8cd a000 	str.w	sl, [sp]
 8012faa:	464b      	mov	r3, r9
 8012fac:	aa03      	add	r2, sp, #12
 8012fae:	4621      	mov	r1, r4
 8012fb0:	4640      	mov	r0, r8
 8012fb2:	f7ff fee7 	bl	8012d84 <_printf_common>
 8012fb6:	3001      	adds	r0, #1
 8012fb8:	d14a      	bne.n	8013050 <_printf_i+0x1f0>
 8012fba:	f04f 30ff 	mov.w	r0, #4294967295
 8012fbe:	b004      	add	sp, #16
 8012fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fc4:	6823      	ldr	r3, [r4, #0]
 8012fc6:	f043 0320 	orr.w	r3, r3, #32
 8012fca:	6023      	str	r3, [r4, #0]
 8012fcc:	4832      	ldr	r0, [pc, #200]	@ (8013098 <_printf_i+0x238>)
 8012fce:	2778      	movs	r7, #120	@ 0x78
 8012fd0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012fd4:	6823      	ldr	r3, [r4, #0]
 8012fd6:	6831      	ldr	r1, [r6, #0]
 8012fd8:	061f      	lsls	r7, r3, #24
 8012fda:	f851 5b04 	ldr.w	r5, [r1], #4
 8012fde:	d402      	bmi.n	8012fe6 <_printf_i+0x186>
 8012fe0:	065f      	lsls	r7, r3, #25
 8012fe2:	bf48      	it	mi
 8012fe4:	b2ad      	uxthmi	r5, r5
 8012fe6:	6031      	str	r1, [r6, #0]
 8012fe8:	07d9      	lsls	r1, r3, #31
 8012fea:	bf44      	itt	mi
 8012fec:	f043 0320 	orrmi.w	r3, r3, #32
 8012ff0:	6023      	strmi	r3, [r4, #0]
 8012ff2:	b11d      	cbz	r5, 8012ffc <_printf_i+0x19c>
 8012ff4:	2310      	movs	r3, #16
 8012ff6:	e7ad      	b.n	8012f54 <_printf_i+0xf4>
 8012ff8:	4826      	ldr	r0, [pc, #152]	@ (8013094 <_printf_i+0x234>)
 8012ffa:	e7e9      	b.n	8012fd0 <_printf_i+0x170>
 8012ffc:	6823      	ldr	r3, [r4, #0]
 8012ffe:	f023 0320 	bic.w	r3, r3, #32
 8013002:	6023      	str	r3, [r4, #0]
 8013004:	e7f6      	b.n	8012ff4 <_printf_i+0x194>
 8013006:	4616      	mov	r6, r2
 8013008:	e7bd      	b.n	8012f86 <_printf_i+0x126>
 801300a:	6833      	ldr	r3, [r6, #0]
 801300c:	6825      	ldr	r5, [r4, #0]
 801300e:	6961      	ldr	r1, [r4, #20]
 8013010:	1d18      	adds	r0, r3, #4
 8013012:	6030      	str	r0, [r6, #0]
 8013014:	062e      	lsls	r6, r5, #24
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	d501      	bpl.n	801301e <_printf_i+0x1be>
 801301a:	6019      	str	r1, [r3, #0]
 801301c:	e002      	b.n	8013024 <_printf_i+0x1c4>
 801301e:	0668      	lsls	r0, r5, #25
 8013020:	d5fb      	bpl.n	801301a <_printf_i+0x1ba>
 8013022:	8019      	strh	r1, [r3, #0]
 8013024:	2300      	movs	r3, #0
 8013026:	6123      	str	r3, [r4, #16]
 8013028:	4616      	mov	r6, r2
 801302a:	e7bc      	b.n	8012fa6 <_printf_i+0x146>
 801302c:	6833      	ldr	r3, [r6, #0]
 801302e:	1d1a      	adds	r2, r3, #4
 8013030:	6032      	str	r2, [r6, #0]
 8013032:	681e      	ldr	r6, [r3, #0]
 8013034:	6862      	ldr	r2, [r4, #4]
 8013036:	2100      	movs	r1, #0
 8013038:	4630      	mov	r0, r6
 801303a:	f7ed f951 	bl	80002e0 <memchr>
 801303e:	b108      	cbz	r0, 8013044 <_printf_i+0x1e4>
 8013040:	1b80      	subs	r0, r0, r6
 8013042:	6060      	str	r0, [r4, #4]
 8013044:	6863      	ldr	r3, [r4, #4]
 8013046:	6123      	str	r3, [r4, #16]
 8013048:	2300      	movs	r3, #0
 801304a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801304e:	e7aa      	b.n	8012fa6 <_printf_i+0x146>
 8013050:	6923      	ldr	r3, [r4, #16]
 8013052:	4632      	mov	r2, r6
 8013054:	4649      	mov	r1, r9
 8013056:	4640      	mov	r0, r8
 8013058:	47d0      	blx	sl
 801305a:	3001      	adds	r0, #1
 801305c:	d0ad      	beq.n	8012fba <_printf_i+0x15a>
 801305e:	6823      	ldr	r3, [r4, #0]
 8013060:	079b      	lsls	r3, r3, #30
 8013062:	d413      	bmi.n	801308c <_printf_i+0x22c>
 8013064:	68e0      	ldr	r0, [r4, #12]
 8013066:	9b03      	ldr	r3, [sp, #12]
 8013068:	4298      	cmp	r0, r3
 801306a:	bfb8      	it	lt
 801306c:	4618      	movlt	r0, r3
 801306e:	e7a6      	b.n	8012fbe <_printf_i+0x15e>
 8013070:	2301      	movs	r3, #1
 8013072:	4632      	mov	r2, r6
 8013074:	4649      	mov	r1, r9
 8013076:	4640      	mov	r0, r8
 8013078:	47d0      	blx	sl
 801307a:	3001      	adds	r0, #1
 801307c:	d09d      	beq.n	8012fba <_printf_i+0x15a>
 801307e:	3501      	adds	r5, #1
 8013080:	68e3      	ldr	r3, [r4, #12]
 8013082:	9903      	ldr	r1, [sp, #12]
 8013084:	1a5b      	subs	r3, r3, r1
 8013086:	42ab      	cmp	r3, r5
 8013088:	dcf2      	bgt.n	8013070 <_printf_i+0x210>
 801308a:	e7eb      	b.n	8013064 <_printf_i+0x204>
 801308c:	2500      	movs	r5, #0
 801308e:	f104 0619 	add.w	r6, r4, #25
 8013092:	e7f5      	b.n	8013080 <_printf_i+0x220>
 8013094:	0801deca 	.word	0x0801deca
 8013098:	0801dedb 	.word	0x0801dedb

0801309c <_scanf_float>:
 801309c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130a0:	b087      	sub	sp, #28
 80130a2:	4691      	mov	r9, r2
 80130a4:	9303      	str	r3, [sp, #12]
 80130a6:	688b      	ldr	r3, [r1, #8]
 80130a8:	1e5a      	subs	r2, r3, #1
 80130aa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80130ae:	bf81      	itttt	hi
 80130b0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80130b4:	eb03 0b05 	addhi.w	fp, r3, r5
 80130b8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80130bc:	608b      	strhi	r3, [r1, #8]
 80130be:	680b      	ldr	r3, [r1, #0]
 80130c0:	460a      	mov	r2, r1
 80130c2:	f04f 0500 	mov.w	r5, #0
 80130c6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80130ca:	f842 3b1c 	str.w	r3, [r2], #28
 80130ce:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80130d2:	4680      	mov	r8, r0
 80130d4:	460c      	mov	r4, r1
 80130d6:	bf98      	it	ls
 80130d8:	f04f 0b00 	movls.w	fp, #0
 80130dc:	9201      	str	r2, [sp, #4]
 80130de:	4616      	mov	r6, r2
 80130e0:	46aa      	mov	sl, r5
 80130e2:	462f      	mov	r7, r5
 80130e4:	9502      	str	r5, [sp, #8]
 80130e6:	68a2      	ldr	r2, [r4, #8]
 80130e8:	b15a      	cbz	r2, 8013102 <_scanf_float+0x66>
 80130ea:	f8d9 3000 	ldr.w	r3, [r9]
 80130ee:	781b      	ldrb	r3, [r3, #0]
 80130f0:	2b4e      	cmp	r3, #78	@ 0x4e
 80130f2:	d863      	bhi.n	80131bc <_scanf_float+0x120>
 80130f4:	2b40      	cmp	r3, #64	@ 0x40
 80130f6:	d83b      	bhi.n	8013170 <_scanf_float+0xd4>
 80130f8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80130fc:	b2c8      	uxtb	r0, r1
 80130fe:	280e      	cmp	r0, #14
 8013100:	d939      	bls.n	8013176 <_scanf_float+0xda>
 8013102:	b11f      	cbz	r7, 801310c <_scanf_float+0x70>
 8013104:	6823      	ldr	r3, [r4, #0]
 8013106:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801310a:	6023      	str	r3, [r4, #0]
 801310c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013110:	f1ba 0f01 	cmp.w	sl, #1
 8013114:	f200 8114 	bhi.w	8013340 <_scanf_float+0x2a4>
 8013118:	9b01      	ldr	r3, [sp, #4]
 801311a:	429e      	cmp	r6, r3
 801311c:	f200 8105 	bhi.w	801332a <_scanf_float+0x28e>
 8013120:	2001      	movs	r0, #1
 8013122:	b007      	add	sp, #28
 8013124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013128:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801312c:	2a0d      	cmp	r2, #13
 801312e:	d8e8      	bhi.n	8013102 <_scanf_float+0x66>
 8013130:	a101      	add	r1, pc, #4	@ (adr r1, 8013138 <_scanf_float+0x9c>)
 8013132:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013136:	bf00      	nop
 8013138:	08013281 	.word	0x08013281
 801313c:	08013103 	.word	0x08013103
 8013140:	08013103 	.word	0x08013103
 8013144:	08013103 	.word	0x08013103
 8013148:	080132dd 	.word	0x080132dd
 801314c:	080132b7 	.word	0x080132b7
 8013150:	08013103 	.word	0x08013103
 8013154:	08013103 	.word	0x08013103
 8013158:	0801328f 	.word	0x0801328f
 801315c:	08013103 	.word	0x08013103
 8013160:	08013103 	.word	0x08013103
 8013164:	08013103 	.word	0x08013103
 8013168:	08013103 	.word	0x08013103
 801316c:	0801324b 	.word	0x0801324b
 8013170:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8013174:	e7da      	b.n	801312c <_scanf_float+0x90>
 8013176:	290e      	cmp	r1, #14
 8013178:	d8c3      	bhi.n	8013102 <_scanf_float+0x66>
 801317a:	a001      	add	r0, pc, #4	@ (adr r0, 8013180 <_scanf_float+0xe4>)
 801317c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8013180:	0801323b 	.word	0x0801323b
 8013184:	08013103 	.word	0x08013103
 8013188:	0801323b 	.word	0x0801323b
 801318c:	080132cb 	.word	0x080132cb
 8013190:	08013103 	.word	0x08013103
 8013194:	080131dd 	.word	0x080131dd
 8013198:	08013221 	.word	0x08013221
 801319c:	08013221 	.word	0x08013221
 80131a0:	08013221 	.word	0x08013221
 80131a4:	08013221 	.word	0x08013221
 80131a8:	08013221 	.word	0x08013221
 80131ac:	08013221 	.word	0x08013221
 80131b0:	08013221 	.word	0x08013221
 80131b4:	08013221 	.word	0x08013221
 80131b8:	08013221 	.word	0x08013221
 80131bc:	2b6e      	cmp	r3, #110	@ 0x6e
 80131be:	d809      	bhi.n	80131d4 <_scanf_float+0x138>
 80131c0:	2b60      	cmp	r3, #96	@ 0x60
 80131c2:	d8b1      	bhi.n	8013128 <_scanf_float+0x8c>
 80131c4:	2b54      	cmp	r3, #84	@ 0x54
 80131c6:	d07b      	beq.n	80132c0 <_scanf_float+0x224>
 80131c8:	2b59      	cmp	r3, #89	@ 0x59
 80131ca:	d19a      	bne.n	8013102 <_scanf_float+0x66>
 80131cc:	2d07      	cmp	r5, #7
 80131ce:	d198      	bne.n	8013102 <_scanf_float+0x66>
 80131d0:	2508      	movs	r5, #8
 80131d2:	e02f      	b.n	8013234 <_scanf_float+0x198>
 80131d4:	2b74      	cmp	r3, #116	@ 0x74
 80131d6:	d073      	beq.n	80132c0 <_scanf_float+0x224>
 80131d8:	2b79      	cmp	r3, #121	@ 0x79
 80131da:	e7f6      	b.n	80131ca <_scanf_float+0x12e>
 80131dc:	6821      	ldr	r1, [r4, #0]
 80131de:	05c8      	lsls	r0, r1, #23
 80131e0:	d51e      	bpl.n	8013220 <_scanf_float+0x184>
 80131e2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80131e6:	6021      	str	r1, [r4, #0]
 80131e8:	3701      	adds	r7, #1
 80131ea:	f1bb 0f00 	cmp.w	fp, #0
 80131ee:	d003      	beq.n	80131f8 <_scanf_float+0x15c>
 80131f0:	3201      	adds	r2, #1
 80131f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80131f6:	60a2      	str	r2, [r4, #8]
 80131f8:	68a3      	ldr	r3, [r4, #8]
 80131fa:	3b01      	subs	r3, #1
 80131fc:	60a3      	str	r3, [r4, #8]
 80131fe:	6923      	ldr	r3, [r4, #16]
 8013200:	3301      	adds	r3, #1
 8013202:	6123      	str	r3, [r4, #16]
 8013204:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013208:	3b01      	subs	r3, #1
 801320a:	2b00      	cmp	r3, #0
 801320c:	f8c9 3004 	str.w	r3, [r9, #4]
 8013210:	f340 8082 	ble.w	8013318 <_scanf_float+0x27c>
 8013214:	f8d9 3000 	ldr.w	r3, [r9]
 8013218:	3301      	adds	r3, #1
 801321a:	f8c9 3000 	str.w	r3, [r9]
 801321e:	e762      	b.n	80130e6 <_scanf_float+0x4a>
 8013220:	eb1a 0105 	adds.w	r1, sl, r5
 8013224:	f47f af6d 	bne.w	8013102 <_scanf_float+0x66>
 8013228:	6822      	ldr	r2, [r4, #0]
 801322a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801322e:	6022      	str	r2, [r4, #0]
 8013230:	460d      	mov	r5, r1
 8013232:	468a      	mov	sl, r1
 8013234:	f806 3b01 	strb.w	r3, [r6], #1
 8013238:	e7de      	b.n	80131f8 <_scanf_float+0x15c>
 801323a:	6822      	ldr	r2, [r4, #0]
 801323c:	0610      	lsls	r0, r2, #24
 801323e:	f57f af60 	bpl.w	8013102 <_scanf_float+0x66>
 8013242:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8013246:	6022      	str	r2, [r4, #0]
 8013248:	e7f4      	b.n	8013234 <_scanf_float+0x198>
 801324a:	f1ba 0f00 	cmp.w	sl, #0
 801324e:	d10c      	bne.n	801326a <_scanf_float+0x1ce>
 8013250:	b977      	cbnz	r7, 8013270 <_scanf_float+0x1d4>
 8013252:	6822      	ldr	r2, [r4, #0]
 8013254:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8013258:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801325c:	d108      	bne.n	8013270 <_scanf_float+0x1d4>
 801325e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8013262:	6022      	str	r2, [r4, #0]
 8013264:	f04f 0a01 	mov.w	sl, #1
 8013268:	e7e4      	b.n	8013234 <_scanf_float+0x198>
 801326a:	f1ba 0f02 	cmp.w	sl, #2
 801326e:	d050      	beq.n	8013312 <_scanf_float+0x276>
 8013270:	2d01      	cmp	r5, #1
 8013272:	d002      	beq.n	801327a <_scanf_float+0x1de>
 8013274:	2d04      	cmp	r5, #4
 8013276:	f47f af44 	bne.w	8013102 <_scanf_float+0x66>
 801327a:	3501      	adds	r5, #1
 801327c:	b2ed      	uxtb	r5, r5
 801327e:	e7d9      	b.n	8013234 <_scanf_float+0x198>
 8013280:	f1ba 0f01 	cmp.w	sl, #1
 8013284:	f47f af3d 	bne.w	8013102 <_scanf_float+0x66>
 8013288:	f04f 0a02 	mov.w	sl, #2
 801328c:	e7d2      	b.n	8013234 <_scanf_float+0x198>
 801328e:	b975      	cbnz	r5, 80132ae <_scanf_float+0x212>
 8013290:	2f00      	cmp	r7, #0
 8013292:	f47f af37 	bne.w	8013104 <_scanf_float+0x68>
 8013296:	6822      	ldr	r2, [r4, #0]
 8013298:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801329c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80132a0:	f040 80fc 	bne.w	801349c <_scanf_float+0x400>
 80132a4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80132a8:	6022      	str	r2, [r4, #0]
 80132aa:	2501      	movs	r5, #1
 80132ac:	e7c2      	b.n	8013234 <_scanf_float+0x198>
 80132ae:	2d03      	cmp	r5, #3
 80132b0:	d0e3      	beq.n	801327a <_scanf_float+0x1de>
 80132b2:	2d05      	cmp	r5, #5
 80132b4:	e7df      	b.n	8013276 <_scanf_float+0x1da>
 80132b6:	2d02      	cmp	r5, #2
 80132b8:	f47f af23 	bne.w	8013102 <_scanf_float+0x66>
 80132bc:	2503      	movs	r5, #3
 80132be:	e7b9      	b.n	8013234 <_scanf_float+0x198>
 80132c0:	2d06      	cmp	r5, #6
 80132c2:	f47f af1e 	bne.w	8013102 <_scanf_float+0x66>
 80132c6:	2507      	movs	r5, #7
 80132c8:	e7b4      	b.n	8013234 <_scanf_float+0x198>
 80132ca:	6822      	ldr	r2, [r4, #0]
 80132cc:	0591      	lsls	r1, r2, #22
 80132ce:	f57f af18 	bpl.w	8013102 <_scanf_float+0x66>
 80132d2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80132d6:	6022      	str	r2, [r4, #0]
 80132d8:	9702      	str	r7, [sp, #8]
 80132da:	e7ab      	b.n	8013234 <_scanf_float+0x198>
 80132dc:	6822      	ldr	r2, [r4, #0]
 80132de:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80132e2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80132e6:	d005      	beq.n	80132f4 <_scanf_float+0x258>
 80132e8:	0550      	lsls	r0, r2, #21
 80132ea:	f57f af0a 	bpl.w	8013102 <_scanf_float+0x66>
 80132ee:	2f00      	cmp	r7, #0
 80132f0:	f000 80d4 	beq.w	801349c <_scanf_float+0x400>
 80132f4:	0591      	lsls	r1, r2, #22
 80132f6:	bf58      	it	pl
 80132f8:	9902      	ldrpl	r1, [sp, #8]
 80132fa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80132fe:	bf58      	it	pl
 8013300:	1a79      	subpl	r1, r7, r1
 8013302:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8013306:	bf58      	it	pl
 8013308:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801330c:	6022      	str	r2, [r4, #0]
 801330e:	2700      	movs	r7, #0
 8013310:	e790      	b.n	8013234 <_scanf_float+0x198>
 8013312:	f04f 0a03 	mov.w	sl, #3
 8013316:	e78d      	b.n	8013234 <_scanf_float+0x198>
 8013318:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801331c:	4649      	mov	r1, r9
 801331e:	4640      	mov	r0, r8
 8013320:	4798      	blx	r3
 8013322:	2800      	cmp	r0, #0
 8013324:	f43f aedf 	beq.w	80130e6 <_scanf_float+0x4a>
 8013328:	e6eb      	b.n	8013102 <_scanf_float+0x66>
 801332a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801332e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013332:	464a      	mov	r2, r9
 8013334:	4640      	mov	r0, r8
 8013336:	4798      	blx	r3
 8013338:	6923      	ldr	r3, [r4, #16]
 801333a:	3b01      	subs	r3, #1
 801333c:	6123      	str	r3, [r4, #16]
 801333e:	e6eb      	b.n	8013118 <_scanf_float+0x7c>
 8013340:	1e6b      	subs	r3, r5, #1
 8013342:	2b06      	cmp	r3, #6
 8013344:	d824      	bhi.n	8013390 <_scanf_float+0x2f4>
 8013346:	2d02      	cmp	r5, #2
 8013348:	d836      	bhi.n	80133b8 <_scanf_float+0x31c>
 801334a:	9b01      	ldr	r3, [sp, #4]
 801334c:	429e      	cmp	r6, r3
 801334e:	f67f aee7 	bls.w	8013120 <_scanf_float+0x84>
 8013352:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013356:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801335a:	464a      	mov	r2, r9
 801335c:	4640      	mov	r0, r8
 801335e:	4798      	blx	r3
 8013360:	6923      	ldr	r3, [r4, #16]
 8013362:	3b01      	subs	r3, #1
 8013364:	6123      	str	r3, [r4, #16]
 8013366:	e7f0      	b.n	801334a <_scanf_float+0x2ae>
 8013368:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801336c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8013370:	464a      	mov	r2, r9
 8013372:	4640      	mov	r0, r8
 8013374:	4798      	blx	r3
 8013376:	6923      	ldr	r3, [r4, #16]
 8013378:	3b01      	subs	r3, #1
 801337a:	6123      	str	r3, [r4, #16]
 801337c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013380:	fa5f fa8a 	uxtb.w	sl, sl
 8013384:	f1ba 0f02 	cmp.w	sl, #2
 8013388:	d1ee      	bne.n	8013368 <_scanf_float+0x2cc>
 801338a:	3d03      	subs	r5, #3
 801338c:	b2ed      	uxtb	r5, r5
 801338e:	1b76      	subs	r6, r6, r5
 8013390:	6823      	ldr	r3, [r4, #0]
 8013392:	05da      	lsls	r2, r3, #23
 8013394:	d530      	bpl.n	80133f8 <_scanf_float+0x35c>
 8013396:	055b      	lsls	r3, r3, #21
 8013398:	d511      	bpl.n	80133be <_scanf_float+0x322>
 801339a:	9b01      	ldr	r3, [sp, #4]
 801339c:	429e      	cmp	r6, r3
 801339e:	f67f aebf 	bls.w	8013120 <_scanf_float+0x84>
 80133a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80133a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80133aa:	464a      	mov	r2, r9
 80133ac:	4640      	mov	r0, r8
 80133ae:	4798      	blx	r3
 80133b0:	6923      	ldr	r3, [r4, #16]
 80133b2:	3b01      	subs	r3, #1
 80133b4:	6123      	str	r3, [r4, #16]
 80133b6:	e7f0      	b.n	801339a <_scanf_float+0x2fe>
 80133b8:	46aa      	mov	sl, r5
 80133ba:	46b3      	mov	fp, r6
 80133bc:	e7de      	b.n	801337c <_scanf_float+0x2e0>
 80133be:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80133c2:	6923      	ldr	r3, [r4, #16]
 80133c4:	2965      	cmp	r1, #101	@ 0x65
 80133c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80133ca:	f106 35ff 	add.w	r5, r6, #4294967295
 80133ce:	6123      	str	r3, [r4, #16]
 80133d0:	d00c      	beq.n	80133ec <_scanf_float+0x350>
 80133d2:	2945      	cmp	r1, #69	@ 0x45
 80133d4:	d00a      	beq.n	80133ec <_scanf_float+0x350>
 80133d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80133da:	464a      	mov	r2, r9
 80133dc:	4640      	mov	r0, r8
 80133de:	4798      	blx	r3
 80133e0:	6923      	ldr	r3, [r4, #16]
 80133e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80133e6:	3b01      	subs	r3, #1
 80133e8:	1eb5      	subs	r5, r6, #2
 80133ea:	6123      	str	r3, [r4, #16]
 80133ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80133f0:	464a      	mov	r2, r9
 80133f2:	4640      	mov	r0, r8
 80133f4:	4798      	blx	r3
 80133f6:	462e      	mov	r6, r5
 80133f8:	6822      	ldr	r2, [r4, #0]
 80133fa:	f012 0210 	ands.w	r2, r2, #16
 80133fe:	d001      	beq.n	8013404 <_scanf_float+0x368>
 8013400:	2000      	movs	r0, #0
 8013402:	e68e      	b.n	8013122 <_scanf_float+0x86>
 8013404:	7032      	strb	r2, [r6, #0]
 8013406:	6823      	ldr	r3, [r4, #0]
 8013408:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801340c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013410:	d123      	bne.n	801345a <_scanf_float+0x3be>
 8013412:	9b02      	ldr	r3, [sp, #8]
 8013414:	429f      	cmp	r7, r3
 8013416:	d00a      	beq.n	801342e <_scanf_float+0x392>
 8013418:	1bda      	subs	r2, r3, r7
 801341a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801341e:	429e      	cmp	r6, r3
 8013420:	bf28      	it	cs
 8013422:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8013426:	491e      	ldr	r1, [pc, #120]	@ (80134a0 <_scanf_float+0x404>)
 8013428:	4630      	mov	r0, r6
 801342a:	f000 f8ff 	bl	801362c <siprintf>
 801342e:	9901      	ldr	r1, [sp, #4]
 8013430:	2200      	movs	r2, #0
 8013432:	4640      	mov	r0, r8
 8013434:	f002 fb4a 	bl	8015acc <_strtod_r>
 8013438:	9b03      	ldr	r3, [sp, #12]
 801343a:	6821      	ldr	r1, [r4, #0]
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	f011 0f02 	tst.w	r1, #2
 8013442:	f103 0204 	add.w	r2, r3, #4
 8013446:	d015      	beq.n	8013474 <_scanf_float+0x3d8>
 8013448:	9903      	ldr	r1, [sp, #12]
 801344a:	600a      	str	r2, [r1, #0]
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	ed83 0b00 	vstr	d0, [r3]
 8013452:	68e3      	ldr	r3, [r4, #12]
 8013454:	3301      	adds	r3, #1
 8013456:	60e3      	str	r3, [r4, #12]
 8013458:	e7d2      	b.n	8013400 <_scanf_float+0x364>
 801345a:	9b04      	ldr	r3, [sp, #16]
 801345c:	2b00      	cmp	r3, #0
 801345e:	d0e6      	beq.n	801342e <_scanf_float+0x392>
 8013460:	9905      	ldr	r1, [sp, #20]
 8013462:	230a      	movs	r3, #10
 8013464:	3101      	adds	r1, #1
 8013466:	4640      	mov	r0, r8
 8013468:	f002 fbb0 	bl	8015bcc <_strtol_r>
 801346c:	9b04      	ldr	r3, [sp, #16]
 801346e:	9e05      	ldr	r6, [sp, #20]
 8013470:	1ac2      	subs	r2, r0, r3
 8013472:	e7d2      	b.n	801341a <_scanf_float+0x37e>
 8013474:	f011 0f04 	tst.w	r1, #4
 8013478:	9903      	ldr	r1, [sp, #12]
 801347a:	600a      	str	r2, [r1, #0]
 801347c:	d1e6      	bne.n	801344c <_scanf_float+0x3b0>
 801347e:	eeb4 0b40 	vcmp.f64	d0, d0
 8013482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013486:	681d      	ldr	r5, [r3, #0]
 8013488:	d705      	bvc.n	8013496 <_scanf_float+0x3fa>
 801348a:	4806      	ldr	r0, [pc, #24]	@ (80134a4 <_scanf_float+0x408>)
 801348c:	f000 f9d4 	bl	8013838 <nanf>
 8013490:	ed85 0a00 	vstr	s0, [r5]
 8013494:	e7dd      	b.n	8013452 <_scanf_float+0x3b6>
 8013496:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801349a:	e7f9      	b.n	8013490 <_scanf_float+0x3f4>
 801349c:	2700      	movs	r7, #0
 801349e:	e635      	b.n	801310c <_scanf_float+0x70>
 80134a0:	0801deec 	.word	0x0801deec
 80134a4:	0801e02d 	.word	0x0801e02d

080134a8 <std>:
 80134a8:	2300      	movs	r3, #0
 80134aa:	b510      	push	{r4, lr}
 80134ac:	4604      	mov	r4, r0
 80134ae:	e9c0 3300 	strd	r3, r3, [r0]
 80134b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80134b6:	6083      	str	r3, [r0, #8]
 80134b8:	8181      	strh	r1, [r0, #12]
 80134ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80134bc:	81c2      	strh	r2, [r0, #14]
 80134be:	6183      	str	r3, [r0, #24]
 80134c0:	4619      	mov	r1, r3
 80134c2:	2208      	movs	r2, #8
 80134c4:	305c      	adds	r0, #92	@ 0x5c
 80134c6:	f000 f937 	bl	8013738 <memset>
 80134ca:	4b0d      	ldr	r3, [pc, #52]	@ (8013500 <std+0x58>)
 80134cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80134ce:	4b0d      	ldr	r3, [pc, #52]	@ (8013504 <std+0x5c>)
 80134d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80134d2:	4b0d      	ldr	r3, [pc, #52]	@ (8013508 <std+0x60>)
 80134d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80134d6:	4b0d      	ldr	r3, [pc, #52]	@ (801350c <std+0x64>)
 80134d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80134da:	4b0d      	ldr	r3, [pc, #52]	@ (8013510 <std+0x68>)
 80134dc:	6224      	str	r4, [r4, #32]
 80134de:	429c      	cmp	r4, r3
 80134e0:	d006      	beq.n	80134f0 <std+0x48>
 80134e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80134e6:	4294      	cmp	r4, r2
 80134e8:	d002      	beq.n	80134f0 <std+0x48>
 80134ea:	33d0      	adds	r3, #208	@ 0xd0
 80134ec:	429c      	cmp	r4, r3
 80134ee:	d105      	bne.n	80134fc <std+0x54>
 80134f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80134f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80134f8:	f000 b99a 	b.w	8013830 <__retarget_lock_init_recursive>
 80134fc:	bd10      	pop	{r4, pc}
 80134fe:	bf00      	nop
 8013500:	08013671 	.word	0x08013671
 8013504:	08013693 	.word	0x08013693
 8013508:	080136cb 	.word	0x080136cb
 801350c:	080136ef 	.word	0x080136ef
 8013510:	24001104 	.word	0x24001104

08013514 <stdio_exit_handler>:
 8013514:	4a02      	ldr	r2, [pc, #8]	@ (8013520 <stdio_exit_handler+0xc>)
 8013516:	4903      	ldr	r1, [pc, #12]	@ (8013524 <stdio_exit_handler+0x10>)
 8013518:	4803      	ldr	r0, [pc, #12]	@ (8013528 <stdio_exit_handler+0x14>)
 801351a:	f000 b869 	b.w	80135f0 <_fwalk_sglue>
 801351e:	bf00      	nop
 8013520:	24000390 	.word	0x24000390
 8013524:	08015f89 	.word	0x08015f89
 8013528:	240003a0 	.word	0x240003a0

0801352c <cleanup_stdio>:
 801352c:	6841      	ldr	r1, [r0, #4]
 801352e:	4b0c      	ldr	r3, [pc, #48]	@ (8013560 <cleanup_stdio+0x34>)
 8013530:	4299      	cmp	r1, r3
 8013532:	b510      	push	{r4, lr}
 8013534:	4604      	mov	r4, r0
 8013536:	d001      	beq.n	801353c <cleanup_stdio+0x10>
 8013538:	f002 fd26 	bl	8015f88 <_fflush_r>
 801353c:	68a1      	ldr	r1, [r4, #8]
 801353e:	4b09      	ldr	r3, [pc, #36]	@ (8013564 <cleanup_stdio+0x38>)
 8013540:	4299      	cmp	r1, r3
 8013542:	d002      	beq.n	801354a <cleanup_stdio+0x1e>
 8013544:	4620      	mov	r0, r4
 8013546:	f002 fd1f 	bl	8015f88 <_fflush_r>
 801354a:	68e1      	ldr	r1, [r4, #12]
 801354c:	4b06      	ldr	r3, [pc, #24]	@ (8013568 <cleanup_stdio+0x3c>)
 801354e:	4299      	cmp	r1, r3
 8013550:	d004      	beq.n	801355c <cleanup_stdio+0x30>
 8013552:	4620      	mov	r0, r4
 8013554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013558:	f002 bd16 	b.w	8015f88 <_fflush_r>
 801355c:	bd10      	pop	{r4, pc}
 801355e:	bf00      	nop
 8013560:	24001104 	.word	0x24001104
 8013564:	2400116c 	.word	0x2400116c
 8013568:	240011d4 	.word	0x240011d4

0801356c <global_stdio_init.part.0>:
 801356c:	b510      	push	{r4, lr}
 801356e:	4b0b      	ldr	r3, [pc, #44]	@ (801359c <global_stdio_init.part.0+0x30>)
 8013570:	4c0b      	ldr	r4, [pc, #44]	@ (80135a0 <global_stdio_init.part.0+0x34>)
 8013572:	4a0c      	ldr	r2, [pc, #48]	@ (80135a4 <global_stdio_init.part.0+0x38>)
 8013574:	601a      	str	r2, [r3, #0]
 8013576:	4620      	mov	r0, r4
 8013578:	2200      	movs	r2, #0
 801357a:	2104      	movs	r1, #4
 801357c:	f7ff ff94 	bl	80134a8 <std>
 8013580:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013584:	2201      	movs	r2, #1
 8013586:	2109      	movs	r1, #9
 8013588:	f7ff ff8e 	bl	80134a8 <std>
 801358c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013590:	2202      	movs	r2, #2
 8013592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013596:	2112      	movs	r1, #18
 8013598:	f7ff bf86 	b.w	80134a8 <std>
 801359c:	2400123c 	.word	0x2400123c
 80135a0:	24001104 	.word	0x24001104
 80135a4:	08013515 	.word	0x08013515

080135a8 <__sfp_lock_acquire>:
 80135a8:	4801      	ldr	r0, [pc, #4]	@ (80135b0 <__sfp_lock_acquire+0x8>)
 80135aa:	f000 b942 	b.w	8013832 <__retarget_lock_acquire_recursive>
 80135ae:	bf00      	nop
 80135b0:	24001245 	.word	0x24001245

080135b4 <__sfp_lock_release>:
 80135b4:	4801      	ldr	r0, [pc, #4]	@ (80135bc <__sfp_lock_release+0x8>)
 80135b6:	f000 b93d 	b.w	8013834 <__retarget_lock_release_recursive>
 80135ba:	bf00      	nop
 80135bc:	24001245 	.word	0x24001245

080135c0 <__sinit>:
 80135c0:	b510      	push	{r4, lr}
 80135c2:	4604      	mov	r4, r0
 80135c4:	f7ff fff0 	bl	80135a8 <__sfp_lock_acquire>
 80135c8:	6a23      	ldr	r3, [r4, #32]
 80135ca:	b11b      	cbz	r3, 80135d4 <__sinit+0x14>
 80135cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80135d0:	f7ff bff0 	b.w	80135b4 <__sfp_lock_release>
 80135d4:	4b04      	ldr	r3, [pc, #16]	@ (80135e8 <__sinit+0x28>)
 80135d6:	6223      	str	r3, [r4, #32]
 80135d8:	4b04      	ldr	r3, [pc, #16]	@ (80135ec <__sinit+0x2c>)
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d1f5      	bne.n	80135cc <__sinit+0xc>
 80135e0:	f7ff ffc4 	bl	801356c <global_stdio_init.part.0>
 80135e4:	e7f2      	b.n	80135cc <__sinit+0xc>
 80135e6:	bf00      	nop
 80135e8:	0801352d 	.word	0x0801352d
 80135ec:	2400123c 	.word	0x2400123c

080135f0 <_fwalk_sglue>:
 80135f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80135f4:	4607      	mov	r7, r0
 80135f6:	4688      	mov	r8, r1
 80135f8:	4614      	mov	r4, r2
 80135fa:	2600      	movs	r6, #0
 80135fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013600:	f1b9 0901 	subs.w	r9, r9, #1
 8013604:	d505      	bpl.n	8013612 <_fwalk_sglue+0x22>
 8013606:	6824      	ldr	r4, [r4, #0]
 8013608:	2c00      	cmp	r4, #0
 801360a:	d1f7      	bne.n	80135fc <_fwalk_sglue+0xc>
 801360c:	4630      	mov	r0, r6
 801360e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013612:	89ab      	ldrh	r3, [r5, #12]
 8013614:	2b01      	cmp	r3, #1
 8013616:	d907      	bls.n	8013628 <_fwalk_sglue+0x38>
 8013618:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801361c:	3301      	adds	r3, #1
 801361e:	d003      	beq.n	8013628 <_fwalk_sglue+0x38>
 8013620:	4629      	mov	r1, r5
 8013622:	4638      	mov	r0, r7
 8013624:	47c0      	blx	r8
 8013626:	4306      	orrs	r6, r0
 8013628:	3568      	adds	r5, #104	@ 0x68
 801362a:	e7e9      	b.n	8013600 <_fwalk_sglue+0x10>

0801362c <siprintf>:
 801362c:	b40e      	push	{r1, r2, r3}
 801362e:	b510      	push	{r4, lr}
 8013630:	b09d      	sub	sp, #116	@ 0x74
 8013632:	ab1f      	add	r3, sp, #124	@ 0x7c
 8013634:	9002      	str	r0, [sp, #8]
 8013636:	9006      	str	r0, [sp, #24]
 8013638:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801363c:	480a      	ldr	r0, [pc, #40]	@ (8013668 <siprintf+0x3c>)
 801363e:	9107      	str	r1, [sp, #28]
 8013640:	9104      	str	r1, [sp, #16]
 8013642:	490a      	ldr	r1, [pc, #40]	@ (801366c <siprintf+0x40>)
 8013644:	f853 2b04 	ldr.w	r2, [r3], #4
 8013648:	9105      	str	r1, [sp, #20]
 801364a:	2400      	movs	r4, #0
 801364c:	a902      	add	r1, sp, #8
 801364e:	6800      	ldr	r0, [r0, #0]
 8013650:	9301      	str	r3, [sp, #4]
 8013652:	941b      	str	r4, [sp, #108]	@ 0x6c
 8013654:	f002 fb18 	bl	8015c88 <_svfiprintf_r>
 8013658:	9b02      	ldr	r3, [sp, #8]
 801365a:	701c      	strb	r4, [r3, #0]
 801365c:	b01d      	add	sp, #116	@ 0x74
 801365e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013662:	b003      	add	sp, #12
 8013664:	4770      	bx	lr
 8013666:	bf00      	nop
 8013668:	2400039c 	.word	0x2400039c
 801366c:	ffff0208 	.word	0xffff0208

08013670 <__sread>:
 8013670:	b510      	push	{r4, lr}
 8013672:	460c      	mov	r4, r1
 8013674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013678:	f000 f88c 	bl	8013794 <_read_r>
 801367c:	2800      	cmp	r0, #0
 801367e:	bfab      	itete	ge
 8013680:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013682:	89a3      	ldrhlt	r3, [r4, #12]
 8013684:	181b      	addge	r3, r3, r0
 8013686:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801368a:	bfac      	ite	ge
 801368c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801368e:	81a3      	strhlt	r3, [r4, #12]
 8013690:	bd10      	pop	{r4, pc}

08013692 <__swrite>:
 8013692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013696:	461f      	mov	r7, r3
 8013698:	898b      	ldrh	r3, [r1, #12]
 801369a:	05db      	lsls	r3, r3, #23
 801369c:	4605      	mov	r5, r0
 801369e:	460c      	mov	r4, r1
 80136a0:	4616      	mov	r6, r2
 80136a2:	d505      	bpl.n	80136b0 <__swrite+0x1e>
 80136a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136a8:	2302      	movs	r3, #2
 80136aa:	2200      	movs	r2, #0
 80136ac:	f000 f860 	bl	8013770 <_lseek_r>
 80136b0:	89a3      	ldrh	r3, [r4, #12]
 80136b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80136b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80136ba:	81a3      	strh	r3, [r4, #12]
 80136bc:	4632      	mov	r2, r6
 80136be:	463b      	mov	r3, r7
 80136c0:	4628      	mov	r0, r5
 80136c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80136c6:	f000 b877 	b.w	80137b8 <_write_r>

080136ca <__sseek>:
 80136ca:	b510      	push	{r4, lr}
 80136cc:	460c      	mov	r4, r1
 80136ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136d2:	f000 f84d 	bl	8013770 <_lseek_r>
 80136d6:	1c43      	adds	r3, r0, #1
 80136d8:	89a3      	ldrh	r3, [r4, #12]
 80136da:	bf15      	itete	ne
 80136dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80136de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80136e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80136e6:	81a3      	strheq	r3, [r4, #12]
 80136e8:	bf18      	it	ne
 80136ea:	81a3      	strhne	r3, [r4, #12]
 80136ec:	bd10      	pop	{r4, pc}

080136ee <__sclose>:
 80136ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136f2:	f000 b82d 	b.w	8013750 <_close_r>
	...

080136f8 <_vsiprintf_r>:
 80136f8:	b510      	push	{r4, lr}
 80136fa:	b09a      	sub	sp, #104	@ 0x68
 80136fc:	2400      	movs	r4, #0
 80136fe:	9100      	str	r1, [sp, #0]
 8013700:	9104      	str	r1, [sp, #16]
 8013702:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013706:	9105      	str	r1, [sp, #20]
 8013708:	9102      	str	r1, [sp, #8]
 801370a:	4905      	ldr	r1, [pc, #20]	@ (8013720 <_vsiprintf_r+0x28>)
 801370c:	9103      	str	r1, [sp, #12]
 801370e:	4669      	mov	r1, sp
 8013710:	9419      	str	r4, [sp, #100]	@ 0x64
 8013712:	f002 fab9 	bl	8015c88 <_svfiprintf_r>
 8013716:	9b00      	ldr	r3, [sp, #0]
 8013718:	701c      	strb	r4, [r3, #0]
 801371a:	b01a      	add	sp, #104	@ 0x68
 801371c:	bd10      	pop	{r4, pc}
 801371e:	bf00      	nop
 8013720:	ffff0208 	.word	0xffff0208

08013724 <vsiprintf>:
 8013724:	4613      	mov	r3, r2
 8013726:	460a      	mov	r2, r1
 8013728:	4601      	mov	r1, r0
 801372a:	4802      	ldr	r0, [pc, #8]	@ (8013734 <vsiprintf+0x10>)
 801372c:	6800      	ldr	r0, [r0, #0]
 801372e:	f7ff bfe3 	b.w	80136f8 <_vsiprintf_r>
 8013732:	bf00      	nop
 8013734:	2400039c 	.word	0x2400039c

08013738 <memset>:
 8013738:	4402      	add	r2, r0
 801373a:	4603      	mov	r3, r0
 801373c:	4293      	cmp	r3, r2
 801373e:	d100      	bne.n	8013742 <memset+0xa>
 8013740:	4770      	bx	lr
 8013742:	f803 1b01 	strb.w	r1, [r3], #1
 8013746:	e7f9      	b.n	801373c <memset+0x4>

08013748 <_localeconv_r>:
 8013748:	4800      	ldr	r0, [pc, #0]	@ (801374c <_localeconv_r+0x4>)
 801374a:	4770      	bx	lr
 801374c:	240004dc 	.word	0x240004dc

08013750 <_close_r>:
 8013750:	b538      	push	{r3, r4, r5, lr}
 8013752:	4d06      	ldr	r5, [pc, #24]	@ (801376c <_close_r+0x1c>)
 8013754:	2300      	movs	r3, #0
 8013756:	4604      	mov	r4, r0
 8013758:	4608      	mov	r0, r1
 801375a:	602b      	str	r3, [r5, #0]
 801375c:	f7fe fcb2 	bl	80120c4 <_close>
 8013760:	1c43      	adds	r3, r0, #1
 8013762:	d102      	bne.n	801376a <_close_r+0x1a>
 8013764:	682b      	ldr	r3, [r5, #0]
 8013766:	b103      	cbz	r3, 801376a <_close_r+0x1a>
 8013768:	6023      	str	r3, [r4, #0]
 801376a:	bd38      	pop	{r3, r4, r5, pc}
 801376c:	24001240 	.word	0x24001240

08013770 <_lseek_r>:
 8013770:	b538      	push	{r3, r4, r5, lr}
 8013772:	4d07      	ldr	r5, [pc, #28]	@ (8013790 <_lseek_r+0x20>)
 8013774:	4604      	mov	r4, r0
 8013776:	4608      	mov	r0, r1
 8013778:	4611      	mov	r1, r2
 801377a:	2200      	movs	r2, #0
 801377c:	602a      	str	r2, [r5, #0]
 801377e:	461a      	mov	r2, r3
 8013780:	f7fe fcc7 	bl	8012112 <_lseek>
 8013784:	1c43      	adds	r3, r0, #1
 8013786:	d102      	bne.n	801378e <_lseek_r+0x1e>
 8013788:	682b      	ldr	r3, [r5, #0]
 801378a:	b103      	cbz	r3, 801378e <_lseek_r+0x1e>
 801378c:	6023      	str	r3, [r4, #0]
 801378e:	bd38      	pop	{r3, r4, r5, pc}
 8013790:	24001240 	.word	0x24001240

08013794 <_read_r>:
 8013794:	b538      	push	{r3, r4, r5, lr}
 8013796:	4d07      	ldr	r5, [pc, #28]	@ (80137b4 <_read_r+0x20>)
 8013798:	4604      	mov	r4, r0
 801379a:	4608      	mov	r0, r1
 801379c:	4611      	mov	r1, r2
 801379e:	2200      	movs	r2, #0
 80137a0:	602a      	str	r2, [r5, #0]
 80137a2:	461a      	mov	r2, r3
 80137a4:	f7fe fc55 	bl	8012052 <_read>
 80137a8:	1c43      	adds	r3, r0, #1
 80137aa:	d102      	bne.n	80137b2 <_read_r+0x1e>
 80137ac:	682b      	ldr	r3, [r5, #0]
 80137ae:	b103      	cbz	r3, 80137b2 <_read_r+0x1e>
 80137b0:	6023      	str	r3, [r4, #0]
 80137b2:	bd38      	pop	{r3, r4, r5, pc}
 80137b4:	24001240 	.word	0x24001240

080137b8 <_write_r>:
 80137b8:	b538      	push	{r3, r4, r5, lr}
 80137ba:	4d07      	ldr	r5, [pc, #28]	@ (80137d8 <_write_r+0x20>)
 80137bc:	4604      	mov	r4, r0
 80137be:	4608      	mov	r0, r1
 80137c0:	4611      	mov	r1, r2
 80137c2:	2200      	movs	r2, #0
 80137c4:	602a      	str	r2, [r5, #0]
 80137c6:	461a      	mov	r2, r3
 80137c8:	f7fe fc60 	bl	801208c <_write>
 80137cc:	1c43      	adds	r3, r0, #1
 80137ce:	d102      	bne.n	80137d6 <_write_r+0x1e>
 80137d0:	682b      	ldr	r3, [r5, #0]
 80137d2:	b103      	cbz	r3, 80137d6 <_write_r+0x1e>
 80137d4:	6023      	str	r3, [r4, #0]
 80137d6:	bd38      	pop	{r3, r4, r5, pc}
 80137d8:	24001240 	.word	0x24001240

080137dc <__errno>:
 80137dc:	4b01      	ldr	r3, [pc, #4]	@ (80137e4 <__errno+0x8>)
 80137de:	6818      	ldr	r0, [r3, #0]
 80137e0:	4770      	bx	lr
 80137e2:	bf00      	nop
 80137e4:	2400039c 	.word	0x2400039c

080137e8 <__libc_init_array>:
 80137e8:	b570      	push	{r4, r5, r6, lr}
 80137ea:	4d0d      	ldr	r5, [pc, #52]	@ (8013820 <__libc_init_array+0x38>)
 80137ec:	4c0d      	ldr	r4, [pc, #52]	@ (8013824 <__libc_init_array+0x3c>)
 80137ee:	1b64      	subs	r4, r4, r5
 80137f0:	10a4      	asrs	r4, r4, #2
 80137f2:	2600      	movs	r6, #0
 80137f4:	42a6      	cmp	r6, r4
 80137f6:	d109      	bne.n	801380c <__libc_init_array+0x24>
 80137f8:	4d0b      	ldr	r5, [pc, #44]	@ (8013828 <__libc_init_array+0x40>)
 80137fa:	4c0c      	ldr	r4, [pc, #48]	@ (801382c <__libc_init_array+0x44>)
 80137fc:	f003 fab6 	bl	8016d6c <_init>
 8013800:	1b64      	subs	r4, r4, r5
 8013802:	10a4      	asrs	r4, r4, #2
 8013804:	2600      	movs	r6, #0
 8013806:	42a6      	cmp	r6, r4
 8013808:	d105      	bne.n	8013816 <__libc_init_array+0x2e>
 801380a:	bd70      	pop	{r4, r5, r6, pc}
 801380c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013810:	4798      	blx	r3
 8013812:	3601      	adds	r6, #1
 8013814:	e7ee      	b.n	80137f4 <__libc_init_array+0xc>
 8013816:	f855 3b04 	ldr.w	r3, [r5], #4
 801381a:	4798      	blx	r3
 801381c:	3601      	adds	r6, #1
 801381e:	e7f2      	b.n	8013806 <__libc_init_array+0x1e>
 8013820:	0801e2ec 	.word	0x0801e2ec
 8013824:	0801e2ec 	.word	0x0801e2ec
 8013828:	0801e2ec 	.word	0x0801e2ec
 801382c:	0801e2f0 	.word	0x0801e2f0

08013830 <__retarget_lock_init_recursive>:
 8013830:	4770      	bx	lr

08013832 <__retarget_lock_acquire_recursive>:
 8013832:	4770      	bx	lr

08013834 <__retarget_lock_release_recursive>:
 8013834:	4770      	bx	lr
	...

08013838 <nanf>:
 8013838:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8013840 <nanf+0x8>
 801383c:	4770      	bx	lr
 801383e:	bf00      	nop
 8013840:	7fc00000 	.word	0x7fc00000

08013844 <quorem>:
 8013844:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013848:	6903      	ldr	r3, [r0, #16]
 801384a:	690c      	ldr	r4, [r1, #16]
 801384c:	42a3      	cmp	r3, r4
 801384e:	4607      	mov	r7, r0
 8013850:	db7e      	blt.n	8013950 <quorem+0x10c>
 8013852:	3c01      	subs	r4, #1
 8013854:	f101 0814 	add.w	r8, r1, #20
 8013858:	00a3      	lsls	r3, r4, #2
 801385a:	f100 0514 	add.w	r5, r0, #20
 801385e:	9300      	str	r3, [sp, #0]
 8013860:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013864:	9301      	str	r3, [sp, #4]
 8013866:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801386a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801386e:	3301      	adds	r3, #1
 8013870:	429a      	cmp	r2, r3
 8013872:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013876:	fbb2 f6f3 	udiv	r6, r2, r3
 801387a:	d32e      	bcc.n	80138da <quorem+0x96>
 801387c:	f04f 0a00 	mov.w	sl, #0
 8013880:	46c4      	mov	ip, r8
 8013882:	46ae      	mov	lr, r5
 8013884:	46d3      	mov	fp, sl
 8013886:	f85c 3b04 	ldr.w	r3, [ip], #4
 801388a:	b298      	uxth	r0, r3
 801388c:	fb06 a000 	mla	r0, r6, r0, sl
 8013890:	0c02      	lsrs	r2, r0, #16
 8013892:	0c1b      	lsrs	r3, r3, #16
 8013894:	fb06 2303 	mla	r3, r6, r3, r2
 8013898:	f8de 2000 	ldr.w	r2, [lr]
 801389c:	b280      	uxth	r0, r0
 801389e:	b292      	uxth	r2, r2
 80138a0:	1a12      	subs	r2, r2, r0
 80138a2:	445a      	add	r2, fp
 80138a4:	f8de 0000 	ldr.w	r0, [lr]
 80138a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80138ac:	b29b      	uxth	r3, r3
 80138ae:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80138b2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80138b6:	b292      	uxth	r2, r2
 80138b8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80138bc:	45e1      	cmp	r9, ip
 80138be:	f84e 2b04 	str.w	r2, [lr], #4
 80138c2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80138c6:	d2de      	bcs.n	8013886 <quorem+0x42>
 80138c8:	9b00      	ldr	r3, [sp, #0]
 80138ca:	58eb      	ldr	r3, [r5, r3]
 80138cc:	b92b      	cbnz	r3, 80138da <quorem+0x96>
 80138ce:	9b01      	ldr	r3, [sp, #4]
 80138d0:	3b04      	subs	r3, #4
 80138d2:	429d      	cmp	r5, r3
 80138d4:	461a      	mov	r2, r3
 80138d6:	d32f      	bcc.n	8013938 <quorem+0xf4>
 80138d8:	613c      	str	r4, [r7, #16]
 80138da:	4638      	mov	r0, r7
 80138dc:	f001 f956 	bl	8014b8c <__mcmp>
 80138e0:	2800      	cmp	r0, #0
 80138e2:	db25      	blt.n	8013930 <quorem+0xec>
 80138e4:	4629      	mov	r1, r5
 80138e6:	2000      	movs	r0, #0
 80138e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80138ec:	f8d1 c000 	ldr.w	ip, [r1]
 80138f0:	fa1f fe82 	uxth.w	lr, r2
 80138f4:	fa1f f38c 	uxth.w	r3, ip
 80138f8:	eba3 030e 	sub.w	r3, r3, lr
 80138fc:	4403      	add	r3, r0
 80138fe:	0c12      	lsrs	r2, r2, #16
 8013900:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8013904:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8013908:	b29b      	uxth	r3, r3
 801390a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801390e:	45c1      	cmp	r9, r8
 8013910:	f841 3b04 	str.w	r3, [r1], #4
 8013914:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013918:	d2e6      	bcs.n	80138e8 <quorem+0xa4>
 801391a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801391e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013922:	b922      	cbnz	r2, 801392e <quorem+0xea>
 8013924:	3b04      	subs	r3, #4
 8013926:	429d      	cmp	r5, r3
 8013928:	461a      	mov	r2, r3
 801392a:	d30b      	bcc.n	8013944 <quorem+0x100>
 801392c:	613c      	str	r4, [r7, #16]
 801392e:	3601      	adds	r6, #1
 8013930:	4630      	mov	r0, r6
 8013932:	b003      	add	sp, #12
 8013934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013938:	6812      	ldr	r2, [r2, #0]
 801393a:	3b04      	subs	r3, #4
 801393c:	2a00      	cmp	r2, #0
 801393e:	d1cb      	bne.n	80138d8 <quorem+0x94>
 8013940:	3c01      	subs	r4, #1
 8013942:	e7c6      	b.n	80138d2 <quorem+0x8e>
 8013944:	6812      	ldr	r2, [r2, #0]
 8013946:	3b04      	subs	r3, #4
 8013948:	2a00      	cmp	r2, #0
 801394a:	d1ef      	bne.n	801392c <quorem+0xe8>
 801394c:	3c01      	subs	r4, #1
 801394e:	e7ea      	b.n	8013926 <quorem+0xe2>
 8013950:	2000      	movs	r0, #0
 8013952:	e7ee      	b.n	8013932 <quorem+0xee>
 8013954:	0000      	movs	r0, r0
	...

08013958 <_dtoa_r>:
 8013958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801395c:	ed2d 8b02 	vpush	{d8}
 8013960:	69c7      	ldr	r7, [r0, #28]
 8013962:	b091      	sub	sp, #68	@ 0x44
 8013964:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013968:	ec55 4b10 	vmov	r4, r5, d0
 801396c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801396e:	9107      	str	r1, [sp, #28]
 8013970:	4681      	mov	r9, r0
 8013972:	9209      	str	r2, [sp, #36]	@ 0x24
 8013974:	930d      	str	r3, [sp, #52]	@ 0x34
 8013976:	b97f      	cbnz	r7, 8013998 <_dtoa_r+0x40>
 8013978:	2010      	movs	r0, #16
 801397a:	f000 fd95 	bl	80144a8 <malloc>
 801397e:	4602      	mov	r2, r0
 8013980:	f8c9 001c 	str.w	r0, [r9, #28]
 8013984:	b920      	cbnz	r0, 8013990 <_dtoa_r+0x38>
 8013986:	4ba0      	ldr	r3, [pc, #640]	@ (8013c08 <_dtoa_r+0x2b0>)
 8013988:	21ef      	movs	r1, #239	@ 0xef
 801398a:	48a0      	ldr	r0, [pc, #640]	@ (8013c0c <_dtoa_r+0x2b4>)
 801398c:	f002 fb78 	bl	8016080 <__assert_func>
 8013990:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013994:	6007      	str	r7, [r0, #0]
 8013996:	60c7      	str	r7, [r0, #12]
 8013998:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801399c:	6819      	ldr	r1, [r3, #0]
 801399e:	b159      	cbz	r1, 80139b8 <_dtoa_r+0x60>
 80139a0:	685a      	ldr	r2, [r3, #4]
 80139a2:	604a      	str	r2, [r1, #4]
 80139a4:	2301      	movs	r3, #1
 80139a6:	4093      	lsls	r3, r2
 80139a8:	608b      	str	r3, [r1, #8]
 80139aa:	4648      	mov	r0, r9
 80139ac:	f000 fe72 	bl	8014694 <_Bfree>
 80139b0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80139b4:	2200      	movs	r2, #0
 80139b6:	601a      	str	r2, [r3, #0]
 80139b8:	1e2b      	subs	r3, r5, #0
 80139ba:	bfbb      	ittet	lt
 80139bc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80139c0:	9303      	strlt	r3, [sp, #12]
 80139c2:	2300      	movge	r3, #0
 80139c4:	2201      	movlt	r2, #1
 80139c6:	bfac      	ite	ge
 80139c8:	6033      	strge	r3, [r6, #0]
 80139ca:	6032      	strlt	r2, [r6, #0]
 80139cc:	4b90      	ldr	r3, [pc, #576]	@ (8013c10 <_dtoa_r+0x2b8>)
 80139ce:	9e03      	ldr	r6, [sp, #12]
 80139d0:	43b3      	bics	r3, r6
 80139d2:	d110      	bne.n	80139f6 <_dtoa_r+0x9e>
 80139d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80139d6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80139da:	6013      	str	r3, [r2, #0]
 80139dc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80139e0:	4323      	orrs	r3, r4
 80139e2:	f000 84e6 	beq.w	80143b2 <_dtoa_r+0xa5a>
 80139e6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80139e8:	4f8a      	ldr	r7, [pc, #552]	@ (8013c14 <_dtoa_r+0x2bc>)
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	f000 84e8 	beq.w	80143c0 <_dtoa_r+0xa68>
 80139f0:	1cfb      	adds	r3, r7, #3
 80139f2:	f000 bce3 	b.w	80143bc <_dtoa_r+0xa64>
 80139f6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80139fa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80139fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a02:	d10a      	bne.n	8013a1a <_dtoa_r+0xc2>
 8013a04:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013a06:	2301      	movs	r3, #1
 8013a08:	6013      	str	r3, [r2, #0]
 8013a0a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013a0c:	b113      	cbz	r3, 8013a14 <_dtoa_r+0xbc>
 8013a0e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013a10:	4b81      	ldr	r3, [pc, #516]	@ (8013c18 <_dtoa_r+0x2c0>)
 8013a12:	6013      	str	r3, [r2, #0]
 8013a14:	4f81      	ldr	r7, [pc, #516]	@ (8013c1c <_dtoa_r+0x2c4>)
 8013a16:	f000 bcd3 	b.w	80143c0 <_dtoa_r+0xa68>
 8013a1a:	aa0e      	add	r2, sp, #56	@ 0x38
 8013a1c:	a90f      	add	r1, sp, #60	@ 0x3c
 8013a1e:	4648      	mov	r0, r9
 8013a20:	eeb0 0b48 	vmov.f64	d0, d8
 8013a24:	f001 f9d2 	bl	8014dcc <__d2b>
 8013a28:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8013a2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013a2e:	9001      	str	r0, [sp, #4]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d045      	beq.n	8013ac0 <_dtoa_r+0x168>
 8013a34:	eeb0 7b48 	vmov.f64	d7, d8
 8013a38:	ee18 1a90 	vmov	r1, s17
 8013a3c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8013a40:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8013a44:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8013a48:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8013a4c:	2500      	movs	r5, #0
 8013a4e:	ee07 1a90 	vmov	s15, r1
 8013a52:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8013a56:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8013bf0 <_dtoa_r+0x298>
 8013a5a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013a5e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8013bf8 <_dtoa_r+0x2a0>
 8013a62:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013a66:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8013c00 <_dtoa_r+0x2a8>
 8013a6a:	ee07 3a90 	vmov	s15, r3
 8013a6e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8013a72:	eeb0 7b46 	vmov.f64	d7, d6
 8013a76:	eea4 7b05 	vfma.f64	d7, d4, d5
 8013a7a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8013a7e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8013a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a86:	ee16 8a90 	vmov	r8, s13
 8013a8a:	d508      	bpl.n	8013a9e <_dtoa_r+0x146>
 8013a8c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8013a90:	eeb4 6b47 	vcmp.f64	d6, d7
 8013a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a98:	bf18      	it	ne
 8013a9a:	f108 38ff 	addne.w	r8, r8, #4294967295
 8013a9e:	f1b8 0f16 	cmp.w	r8, #22
 8013aa2:	d82b      	bhi.n	8013afc <_dtoa_r+0x1a4>
 8013aa4:	495e      	ldr	r1, [pc, #376]	@ (8013c20 <_dtoa_r+0x2c8>)
 8013aa6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8013aaa:	ed91 7b00 	vldr	d7, [r1]
 8013aae:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ab6:	d501      	bpl.n	8013abc <_dtoa_r+0x164>
 8013ab8:	f108 38ff 	add.w	r8, r8, #4294967295
 8013abc:	2100      	movs	r1, #0
 8013abe:	e01e      	b.n	8013afe <_dtoa_r+0x1a6>
 8013ac0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013ac2:	4413      	add	r3, r2
 8013ac4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8013ac8:	2920      	cmp	r1, #32
 8013aca:	bfc1      	itttt	gt
 8013acc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8013ad0:	408e      	lslgt	r6, r1
 8013ad2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8013ad6:	fa24 f101 	lsrgt.w	r1, r4, r1
 8013ada:	bfd6      	itet	le
 8013adc:	f1c1 0120 	rsble	r1, r1, #32
 8013ae0:	4331      	orrgt	r1, r6
 8013ae2:	fa04 f101 	lslle.w	r1, r4, r1
 8013ae6:	ee07 1a90 	vmov	s15, r1
 8013aea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013aee:	3b01      	subs	r3, #1
 8013af0:	ee17 1a90 	vmov	r1, s15
 8013af4:	2501      	movs	r5, #1
 8013af6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8013afa:	e7a8      	b.n	8013a4e <_dtoa_r+0xf6>
 8013afc:	2101      	movs	r1, #1
 8013afe:	1ad2      	subs	r2, r2, r3
 8013b00:	1e53      	subs	r3, r2, #1
 8013b02:	9306      	str	r3, [sp, #24]
 8013b04:	bf45      	ittet	mi
 8013b06:	f1c2 0301 	rsbmi	r3, r2, #1
 8013b0a:	9304      	strmi	r3, [sp, #16]
 8013b0c:	2300      	movpl	r3, #0
 8013b0e:	2300      	movmi	r3, #0
 8013b10:	bf4c      	ite	mi
 8013b12:	9306      	strmi	r3, [sp, #24]
 8013b14:	9304      	strpl	r3, [sp, #16]
 8013b16:	f1b8 0f00 	cmp.w	r8, #0
 8013b1a:	910c      	str	r1, [sp, #48]	@ 0x30
 8013b1c:	db18      	blt.n	8013b50 <_dtoa_r+0x1f8>
 8013b1e:	9b06      	ldr	r3, [sp, #24]
 8013b20:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8013b24:	4443      	add	r3, r8
 8013b26:	9306      	str	r3, [sp, #24]
 8013b28:	2300      	movs	r3, #0
 8013b2a:	9a07      	ldr	r2, [sp, #28]
 8013b2c:	2a09      	cmp	r2, #9
 8013b2e:	d845      	bhi.n	8013bbc <_dtoa_r+0x264>
 8013b30:	2a05      	cmp	r2, #5
 8013b32:	bfc4      	itt	gt
 8013b34:	3a04      	subgt	r2, #4
 8013b36:	9207      	strgt	r2, [sp, #28]
 8013b38:	9a07      	ldr	r2, [sp, #28]
 8013b3a:	f1a2 0202 	sub.w	r2, r2, #2
 8013b3e:	bfcc      	ite	gt
 8013b40:	2400      	movgt	r4, #0
 8013b42:	2401      	movle	r4, #1
 8013b44:	2a03      	cmp	r2, #3
 8013b46:	d844      	bhi.n	8013bd2 <_dtoa_r+0x27a>
 8013b48:	e8df f002 	tbb	[pc, r2]
 8013b4c:	0b173634 	.word	0x0b173634
 8013b50:	9b04      	ldr	r3, [sp, #16]
 8013b52:	2200      	movs	r2, #0
 8013b54:	eba3 0308 	sub.w	r3, r3, r8
 8013b58:	9304      	str	r3, [sp, #16]
 8013b5a:	920a      	str	r2, [sp, #40]	@ 0x28
 8013b5c:	f1c8 0300 	rsb	r3, r8, #0
 8013b60:	e7e3      	b.n	8013b2a <_dtoa_r+0x1d2>
 8013b62:	2201      	movs	r2, #1
 8013b64:	9208      	str	r2, [sp, #32]
 8013b66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013b68:	eb08 0b02 	add.w	fp, r8, r2
 8013b6c:	f10b 0a01 	add.w	sl, fp, #1
 8013b70:	4652      	mov	r2, sl
 8013b72:	2a01      	cmp	r2, #1
 8013b74:	bfb8      	it	lt
 8013b76:	2201      	movlt	r2, #1
 8013b78:	e006      	b.n	8013b88 <_dtoa_r+0x230>
 8013b7a:	2201      	movs	r2, #1
 8013b7c:	9208      	str	r2, [sp, #32]
 8013b7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013b80:	2a00      	cmp	r2, #0
 8013b82:	dd29      	ble.n	8013bd8 <_dtoa_r+0x280>
 8013b84:	4693      	mov	fp, r2
 8013b86:	4692      	mov	sl, r2
 8013b88:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8013b8c:	2100      	movs	r1, #0
 8013b8e:	2004      	movs	r0, #4
 8013b90:	f100 0614 	add.w	r6, r0, #20
 8013b94:	4296      	cmp	r6, r2
 8013b96:	d926      	bls.n	8013be6 <_dtoa_r+0x28e>
 8013b98:	6079      	str	r1, [r7, #4]
 8013b9a:	4648      	mov	r0, r9
 8013b9c:	9305      	str	r3, [sp, #20]
 8013b9e:	f000 fd39 	bl	8014614 <_Balloc>
 8013ba2:	9b05      	ldr	r3, [sp, #20]
 8013ba4:	4607      	mov	r7, r0
 8013ba6:	2800      	cmp	r0, #0
 8013ba8:	d13e      	bne.n	8013c28 <_dtoa_r+0x2d0>
 8013baa:	4b1e      	ldr	r3, [pc, #120]	@ (8013c24 <_dtoa_r+0x2cc>)
 8013bac:	4602      	mov	r2, r0
 8013bae:	f240 11af 	movw	r1, #431	@ 0x1af
 8013bb2:	e6ea      	b.n	801398a <_dtoa_r+0x32>
 8013bb4:	2200      	movs	r2, #0
 8013bb6:	e7e1      	b.n	8013b7c <_dtoa_r+0x224>
 8013bb8:	2200      	movs	r2, #0
 8013bba:	e7d3      	b.n	8013b64 <_dtoa_r+0x20c>
 8013bbc:	2401      	movs	r4, #1
 8013bbe:	2200      	movs	r2, #0
 8013bc0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8013bc4:	f04f 3bff 	mov.w	fp, #4294967295
 8013bc8:	2100      	movs	r1, #0
 8013bca:	46da      	mov	sl, fp
 8013bcc:	2212      	movs	r2, #18
 8013bce:	9109      	str	r1, [sp, #36]	@ 0x24
 8013bd0:	e7da      	b.n	8013b88 <_dtoa_r+0x230>
 8013bd2:	2201      	movs	r2, #1
 8013bd4:	9208      	str	r2, [sp, #32]
 8013bd6:	e7f5      	b.n	8013bc4 <_dtoa_r+0x26c>
 8013bd8:	f04f 0b01 	mov.w	fp, #1
 8013bdc:	46da      	mov	sl, fp
 8013bde:	465a      	mov	r2, fp
 8013be0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8013be4:	e7d0      	b.n	8013b88 <_dtoa_r+0x230>
 8013be6:	3101      	adds	r1, #1
 8013be8:	0040      	lsls	r0, r0, #1
 8013bea:	e7d1      	b.n	8013b90 <_dtoa_r+0x238>
 8013bec:	f3af 8000 	nop.w
 8013bf0:	636f4361 	.word	0x636f4361
 8013bf4:	3fd287a7 	.word	0x3fd287a7
 8013bf8:	8b60c8b3 	.word	0x8b60c8b3
 8013bfc:	3fc68a28 	.word	0x3fc68a28
 8013c00:	509f79fb 	.word	0x509f79fb
 8013c04:	3fd34413 	.word	0x3fd34413
 8013c08:	0801defe 	.word	0x0801defe
 8013c0c:	0801df15 	.word	0x0801df15
 8013c10:	7ff00000 	.word	0x7ff00000
 8013c14:	0801defa 	.word	0x0801defa
 8013c18:	0801dec9 	.word	0x0801dec9
 8013c1c:	0801dec8 	.word	0x0801dec8
 8013c20:	0801e0c8 	.word	0x0801e0c8
 8013c24:	0801df6d 	.word	0x0801df6d
 8013c28:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8013c2c:	f1ba 0f0e 	cmp.w	sl, #14
 8013c30:	6010      	str	r0, [r2, #0]
 8013c32:	d86e      	bhi.n	8013d12 <_dtoa_r+0x3ba>
 8013c34:	2c00      	cmp	r4, #0
 8013c36:	d06c      	beq.n	8013d12 <_dtoa_r+0x3ba>
 8013c38:	f1b8 0f00 	cmp.w	r8, #0
 8013c3c:	f340 80b4 	ble.w	8013da8 <_dtoa_r+0x450>
 8013c40:	4ac8      	ldr	r2, [pc, #800]	@ (8013f64 <_dtoa_r+0x60c>)
 8013c42:	f008 010f 	and.w	r1, r8, #15
 8013c46:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8013c4a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8013c4e:	ed92 7b00 	vldr	d7, [r2]
 8013c52:	ea4f 1128 	mov.w	r1, r8, asr #4
 8013c56:	f000 809b 	beq.w	8013d90 <_dtoa_r+0x438>
 8013c5a:	4ac3      	ldr	r2, [pc, #780]	@ (8013f68 <_dtoa_r+0x610>)
 8013c5c:	ed92 6b08 	vldr	d6, [r2, #32]
 8013c60:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8013c64:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013c68:	f001 010f 	and.w	r1, r1, #15
 8013c6c:	2203      	movs	r2, #3
 8013c6e:	48be      	ldr	r0, [pc, #760]	@ (8013f68 <_dtoa_r+0x610>)
 8013c70:	2900      	cmp	r1, #0
 8013c72:	f040 808f 	bne.w	8013d94 <_dtoa_r+0x43c>
 8013c76:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013c7a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013c7e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013c82:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013c84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013c88:	2900      	cmp	r1, #0
 8013c8a:	f000 80b3 	beq.w	8013df4 <_dtoa_r+0x49c>
 8013c8e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8013c92:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c9a:	f140 80ab 	bpl.w	8013df4 <_dtoa_r+0x49c>
 8013c9e:	f1ba 0f00 	cmp.w	sl, #0
 8013ca2:	f000 80a7 	beq.w	8013df4 <_dtoa_r+0x49c>
 8013ca6:	f1bb 0f00 	cmp.w	fp, #0
 8013caa:	dd30      	ble.n	8013d0e <_dtoa_r+0x3b6>
 8013cac:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8013cb0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013cb4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013cb8:	f108 31ff 	add.w	r1, r8, #4294967295
 8013cbc:	9105      	str	r1, [sp, #20]
 8013cbe:	3201      	adds	r2, #1
 8013cc0:	465c      	mov	r4, fp
 8013cc2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013cc6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8013cca:	ee07 2a90 	vmov	s15, r2
 8013cce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013cd2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8013cd6:	ee15 2a90 	vmov	r2, s11
 8013cda:	ec51 0b15 	vmov	r0, r1, d5
 8013cde:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8013ce2:	2c00      	cmp	r4, #0
 8013ce4:	f040 808a 	bne.w	8013dfc <_dtoa_r+0x4a4>
 8013ce8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8013cec:	ee36 6b47 	vsub.f64	d6, d6, d7
 8013cf0:	ec41 0b17 	vmov	d7, r0, r1
 8013cf4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cfc:	f300 826a 	bgt.w	80141d4 <_dtoa_r+0x87c>
 8013d00:	eeb1 7b47 	vneg.f64	d7, d7
 8013d04:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d0c:	d423      	bmi.n	8013d56 <_dtoa_r+0x3fe>
 8013d0e:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013d12:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013d14:	2a00      	cmp	r2, #0
 8013d16:	f2c0 8129 	blt.w	8013f6c <_dtoa_r+0x614>
 8013d1a:	f1b8 0f0e 	cmp.w	r8, #14
 8013d1e:	f300 8125 	bgt.w	8013f6c <_dtoa_r+0x614>
 8013d22:	4b90      	ldr	r3, [pc, #576]	@ (8013f64 <_dtoa_r+0x60c>)
 8013d24:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013d28:	ed93 6b00 	vldr	d6, [r3]
 8013d2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	f280 80c8 	bge.w	8013ec4 <_dtoa_r+0x56c>
 8013d34:	f1ba 0f00 	cmp.w	sl, #0
 8013d38:	f300 80c4 	bgt.w	8013ec4 <_dtoa_r+0x56c>
 8013d3c:	d10b      	bne.n	8013d56 <_dtoa_r+0x3fe>
 8013d3e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8013d42:	ee26 6b07 	vmul.f64	d6, d6, d7
 8013d46:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013d4a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d52:	f2c0 823c 	blt.w	80141ce <_dtoa_r+0x876>
 8013d56:	2400      	movs	r4, #0
 8013d58:	4625      	mov	r5, r4
 8013d5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d5c:	43db      	mvns	r3, r3
 8013d5e:	9305      	str	r3, [sp, #20]
 8013d60:	463e      	mov	r6, r7
 8013d62:	f04f 0800 	mov.w	r8, #0
 8013d66:	4621      	mov	r1, r4
 8013d68:	4648      	mov	r0, r9
 8013d6a:	f000 fc93 	bl	8014694 <_Bfree>
 8013d6e:	2d00      	cmp	r5, #0
 8013d70:	f000 80a2 	beq.w	8013eb8 <_dtoa_r+0x560>
 8013d74:	f1b8 0f00 	cmp.w	r8, #0
 8013d78:	d005      	beq.n	8013d86 <_dtoa_r+0x42e>
 8013d7a:	45a8      	cmp	r8, r5
 8013d7c:	d003      	beq.n	8013d86 <_dtoa_r+0x42e>
 8013d7e:	4641      	mov	r1, r8
 8013d80:	4648      	mov	r0, r9
 8013d82:	f000 fc87 	bl	8014694 <_Bfree>
 8013d86:	4629      	mov	r1, r5
 8013d88:	4648      	mov	r0, r9
 8013d8a:	f000 fc83 	bl	8014694 <_Bfree>
 8013d8e:	e093      	b.n	8013eb8 <_dtoa_r+0x560>
 8013d90:	2202      	movs	r2, #2
 8013d92:	e76c      	b.n	8013c6e <_dtoa_r+0x316>
 8013d94:	07cc      	lsls	r4, r1, #31
 8013d96:	d504      	bpl.n	8013da2 <_dtoa_r+0x44a>
 8013d98:	ed90 6b00 	vldr	d6, [r0]
 8013d9c:	3201      	adds	r2, #1
 8013d9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013da2:	1049      	asrs	r1, r1, #1
 8013da4:	3008      	adds	r0, #8
 8013da6:	e763      	b.n	8013c70 <_dtoa_r+0x318>
 8013da8:	d022      	beq.n	8013df0 <_dtoa_r+0x498>
 8013daa:	f1c8 0100 	rsb	r1, r8, #0
 8013dae:	4a6d      	ldr	r2, [pc, #436]	@ (8013f64 <_dtoa_r+0x60c>)
 8013db0:	f001 000f 	and.w	r0, r1, #15
 8013db4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8013db8:	ed92 7b00 	vldr	d7, [r2]
 8013dbc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8013dc0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013dc4:	4868      	ldr	r0, [pc, #416]	@ (8013f68 <_dtoa_r+0x610>)
 8013dc6:	1109      	asrs	r1, r1, #4
 8013dc8:	2400      	movs	r4, #0
 8013dca:	2202      	movs	r2, #2
 8013dcc:	b929      	cbnz	r1, 8013dda <_dtoa_r+0x482>
 8013dce:	2c00      	cmp	r4, #0
 8013dd0:	f43f af57 	beq.w	8013c82 <_dtoa_r+0x32a>
 8013dd4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013dd8:	e753      	b.n	8013c82 <_dtoa_r+0x32a>
 8013dda:	07ce      	lsls	r6, r1, #31
 8013ddc:	d505      	bpl.n	8013dea <_dtoa_r+0x492>
 8013dde:	ed90 6b00 	vldr	d6, [r0]
 8013de2:	3201      	adds	r2, #1
 8013de4:	2401      	movs	r4, #1
 8013de6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013dea:	1049      	asrs	r1, r1, #1
 8013dec:	3008      	adds	r0, #8
 8013dee:	e7ed      	b.n	8013dcc <_dtoa_r+0x474>
 8013df0:	2202      	movs	r2, #2
 8013df2:	e746      	b.n	8013c82 <_dtoa_r+0x32a>
 8013df4:	f8cd 8014 	str.w	r8, [sp, #20]
 8013df8:	4654      	mov	r4, sl
 8013dfa:	e762      	b.n	8013cc2 <_dtoa_r+0x36a>
 8013dfc:	4a59      	ldr	r2, [pc, #356]	@ (8013f64 <_dtoa_r+0x60c>)
 8013dfe:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8013e02:	ed12 4b02 	vldr	d4, [r2, #-8]
 8013e06:	9a08      	ldr	r2, [sp, #32]
 8013e08:	ec41 0b17 	vmov	d7, r0, r1
 8013e0c:	443c      	add	r4, r7
 8013e0e:	b34a      	cbz	r2, 8013e64 <_dtoa_r+0x50c>
 8013e10:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8013e14:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8013e18:	463e      	mov	r6, r7
 8013e1a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8013e1e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8013e22:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013e26:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013e2a:	ee14 2a90 	vmov	r2, s9
 8013e2e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013e32:	3230      	adds	r2, #48	@ 0x30
 8013e34:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013e38:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e40:	f806 2b01 	strb.w	r2, [r6], #1
 8013e44:	d438      	bmi.n	8013eb8 <_dtoa_r+0x560>
 8013e46:	ee32 5b46 	vsub.f64	d5, d2, d6
 8013e4a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8013e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e52:	d46e      	bmi.n	8013f32 <_dtoa_r+0x5da>
 8013e54:	42a6      	cmp	r6, r4
 8013e56:	f43f af5a 	beq.w	8013d0e <_dtoa_r+0x3b6>
 8013e5a:	ee27 7b03 	vmul.f64	d7, d7, d3
 8013e5e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013e62:	e7e0      	b.n	8013e26 <_dtoa_r+0x4ce>
 8013e64:	4621      	mov	r1, r4
 8013e66:	463e      	mov	r6, r7
 8013e68:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013e6c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8013e70:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013e74:	ee14 2a90 	vmov	r2, s9
 8013e78:	3230      	adds	r2, #48	@ 0x30
 8013e7a:	f806 2b01 	strb.w	r2, [r6], #1
 8013e7e:	42a6      	cmp	r6, r4
 8013e80:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013e84:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013e88:	d119      	bne.n	8013ebe <_dtoa_r+0x566>
 8013e8a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8013e8e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8013e92:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8013e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e9a:	dc4a      	bgt.n	8013f32 <_dtoa_r+0x5da>
 8013e9c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8013ea0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8013ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ea8:	f57f af31 	bpl.w	8013d0e <_dtoa_r+0x3b6>
 8013eac:	460e      	mov	r6, r1
 8013eae:	3901      	subs	r1, #1
 8013eb0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013eb4:	2b30      	cmp	r3, #48	@ 0x30
 8013eb6:	d0f9      	beq.n	8013eac <_dtoa_r+0x554>
 8013eb8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8013ebc:	e027      	b.n	8013f0e <_dtoa_r+0x5b6>
 8013ebe:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013ec2:	e7d5      	b.n	8013e70 <_dtoa_r+0x518>
 8013ec4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013ec8:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8013ecc:	463e      	mov	r6, r7
 8013ece:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8013ed2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8013ed6:	ee15 3a10 	vmov	r3, s10
 8013eda:	3330      	adds	r3, #48	@ 0x30
 8013edc:	f806 3b01 	strb.w	r3, [r6], #1
 8013ee0:	1bf3      	subs	r3, r6, r7
 8013ee2:	459a      	cmp	sl, r3
 8013ee4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013ee8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8013eec:	d132      	bne.n	8013f54 <_dtoa_r+0x5fc>
 8013eee:	ee37 7b07 	vadd.f64	d7, d7, d7
 8013ef2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013efa:	dc18      	bgt.n	8013f2e <_dtoa_r+0x5d6>
 8013efc:	eeb4 7b46 	vcmp.f64	d7, d6
 8013f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f04:	d103      	bne.n	8013f0e <_dtoa_r+0x5b6>
 8013f06:	ee15 3a10 	vmov	r3, s10
 8013f0a:	07db      	lsls	r3, r3, #31
 8013f0c:	d40f      	bmi.n	8013f2e <_dtoa_r+0x5d6>
 8013f0e:	9901      	ldr	r1, [sp, #4]
 8013f10:	4648      	mov	r0, r9
 8013f12:	f000 fbbf 	bl	8014694 <_Bfree>
 8013f16:	2300      	movs	r3, #0
 8013f18:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013f1a:	7033      	strb	r3, [r6, #0]
 8013f1c:	f108 0301 	add.w	r3, r8, #1
 8013f20:	6013      	str	r3, [r2, #0]
 8013f22:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	f000 824b 	beq.w	80143c0 <_dtoa_r+0xa68>
 8013f2a:	601e      	str	r6, [r3, #0]
 8013f2c:	e248      	b.n	80143c0 <_dtoa_r+0xa68>
 8013f2e:	f8cd 8014 	str.w	r8, [sp, #20]
 8013f32:	4633      	mov	r3, r6
 8013f34:	461e      	mov	r6, r3
 8013f36:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013f3a:	2a39      	cmp	r2, #57	@ 0x39
 8013f3c:	d106      	bne.n	8013f4c <_dtoa_r+0x5f4>
 8013f3e:	429f      	cmp	r7, r3
 8013f40:	d1f8      	bne.n	8013f34 <_dtoa_r+0x5dc>
 8013f42:	9a05      	ldr	r2, [sp, #20]
 8013f44:	3201      	adds	r2, #1
 8013f46:	9205      	str	r2, [sp, #20]
 8013f48:	2230      	movs	r2, #48	@ 0x30
 8013f4a:	703a      	strb	r2, [r7, #0]
 8013f4c:	781a      	ldrb	r2, [r3, #0]
 8013f4e:	3201      	adds	r2, #1
 8013f50:	701a      	strb	r2, [r3, #0]
 8013f52:	e7b1      	b.n	8013eb8 <_dtoa_r+0x560>
 8013f54:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013f58:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f60:	d1b5      	bne.n	8013ece <_dtoa_r+0x576>
 8013f62:	e7d4      	b.n	8013f0e <_dtoa_r+0x5b6>
 8013f64:	0801e0c8 	.word	0x0801e0c8
 8013f68:	0801e0a0 	.word	0x0801e0a0
 8013f6c:	9908      	ldr	r1, [sp, #32]
 8013f6e:	2900      	cmp	r1, #0
 8013f70:	f000 80e9 	beq.w	8014146 <_dtoa_r+0x7ee>
 8013f74:	9907      	ldr	r1, [sp, #28]
 8013f76:	2901      	cmp	r1, #1
 8013f78:	f300 80cb 	bgt.w	8014112 <_dtoa_r+0x7ba>
 8013f7c:	2d00      	cmp	r5, #0
 8013f7e:	f000 80c4 	beq.w	801410a <_dtoa_r+0x7b2>
 8013f82:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8013f86:	9e04      	ldr	r6, [sp, #16]
 8013f88:	461c      	mov	r4, r3
 8013f8a:	9305      	str	r3, [sp, #20]
 8013f8c:	9b04      	ldr	r3, [sp, #16]
 8013f8e:	4413      	add	r3, r2
 8013f90:	9304      	str	r3, [sp, #16]
 8013f92:	9b06      	ldr	r3, [sp, #24]
 8013f94:	2101      	movs	r1, #1
 8013f96:	4413      	add	r3, r2
 8013f98:	4648      	mov	r0, r9
 8013f9a:	9306      	str	r3, [sp, #24]
 8013f9c:	f000 fc78 	bl	8014890 <__i2b>
 8013fa0:	9b05      	ldr	r3, [sp, #20]
 8013fa2:	4605      	mov	r5, r0
 8013fa4:	b166      	cbz	r6, 8013fc0 <_dtoa_r+0x668>
 8013fa6:	9a06      	ldr	r2, [sp, #24]
 8013fa8:	2a00      	cmp	r2, #0
 8013faa:	dd09      	ble.n	8013fc0 <_dtoa_r+0x668>
 8013fac:	42b2      	cmp	r2, r6
 8013fae:	9904      	ldr	r1, [sp, #16]
 8013fb0:	bfa8      	it	ge
 8013fb2:	4632      	movge	r2, r6
 8013fb4:	1a89      	subs	r1, r1, r2
 8013fb6:	9104      	str	r1, [sp, #16]
 8013fb8:	9906      	ldr	r1, [sp, #24]
 8013fba:	1ab6      	subs	r6, r6, r2
 8013fbc:	1a8a      	subs	r2, r1, r2
 8013fbe:	9206      	str	r2, [sp, #24]
 8013fc0:	b30b      	cbz	r3, 8014006 <_dtoa_r+0x6ae>
 8013fc2:	9a08      	ldr	r2, [sp, #32]
 8013fc4:	2a00      	cmp	r2, #0
 8013fc6:	f000 80c5 	beq.w	8014154 <_dtoa_r+0x7fc>
 8013fca:	2c00      	cmp	r4, #0
 8013fcc:	f000 80bf 	beq.w	801414e <_dtoa_r+0x7f6>
 8013fd0:	4629      	mov	r1, r5
 8013fd2:	4622      	mov	r2, r4
 8013fd4:	4648      	mov	r0, r9
 8013fd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013fd8:	f000 fd12 	bl	8014a00 <__pow5mult>
 8013fdc:	9a01      	ldr	r2, [sp, #4]
 8013fde:	4601      	mov	r1, r0
 8013fe0:	4605      	mov	r5, r0
 8013fe2:	4648      	mov	r0, r9
 8013fe4:	f000 fc6a 	bl	80148bc <__multiply>
 8013fe8:	9901      	ldr	r1, [sp, #4]
 8013fea:	9005      	str	r0, [sp, #20]
 8013fec:	4648      	mov	r0, r9
 8013fee:	f000 fb51 	bl	8014694 <_Bfree>
 8013ff2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013ff4:	1b1b      	subs	r3, r3, r4
 8013ff6:	f000 80b0 	beq.w	801415a <_dtoa_r+0x802>
 8013ffa:	9905      	ldr	r1, [sp, #20]
 8013ffc:	461a      	mov	r2, r3
 8013ffe:	4648      	mov	r0, r9
 8014000:	f000 fcfe 	bl	8014a00 <__pow5mult>
 8014004:	9001      	str	r0, [sp, #4]
 8014006:	2101      	movs	r1, #1
 8014008:	4648      	mov	r0, r9
 801400a:	f000 fc41 	bl	8014890 <__i2b>
 801400e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014010:	4604      	mov	r4, r0
 8014012:	2b00      	cmp	r3, #0
 8014014:	f000 81da 	beq.w	80143cc <_dtoa_r+0xa74>
 8014018:	461a      	mov	r2, r3
 801401a:	4601      	mov	r1, r0
 801401c:	4648      	mov	r0, r9
 801401e:	f000 fcef 	bl	8014a00 <__pow5mult>
 8014022:	9b07      	ldr	r3, [sp, #28]
 8014024:	2b01      	cmp	r3, #1
 8014026:	4604      	mov	r4, r0
 8014028:	f300 80a0 	bgt.w	801416c <_dtoa_r+0x814>
 801402c:	9b02      	ldr	r3, [sp, #8]
 801402e:	2b00      	cmp	r3, #0
 8014030:	f040 8096 	bne.w	8014160 <_dtoa_r+0x808>
 8014034:	9b03      	ldr	r3, [sp, #12]
 8014036:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801403a:	2a00      	cmp	r2, #0
 801403c:	f040 8092 	bne.w	8014164 <_dtoa_r+0x80c>
 8014040:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8014044:	0d12      	lsrs	r2, r2, #20
 8014046:	0512      	lsls	r2, r2, #20
 8014048:	2a00      	cmp	r2, #0
 801404a:	f000 808d 	beq.w	8014168 <_dtoa_r+0x810>
 801404e:	9b04      	ldr	r3, [sp, #16]
 8014050:	3301      	adds	r3, #1
 8014052:	9304      	str	r3, [sp, #16]
 8014054:	9b06      	ldr	r3, [sp, #24]
 8014056:	3301      	adds	r3, #1
 8014058:	9306      	str	r3, [sp, #24]
 801405a:	2301      	movs	r3, #1
 801405c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801405e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014060:	2b00      	cmp	r3, #0
 8014062:	f000 81b9 	beq.w	80143d8 <_dtoa_r+0xa80>
 8014066:	6922      	ldr	r2, [r4, #16]
 8014068:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801406c:	6910      	ldr	r0, [r2, #16]
 801406e:	f000 fbc3 	bl	80147f8 <__hi0bits>
 8014072:	f1c0 0020 	rsb	r0, r0, #32
 8014076:	9b06      	ldr	r3, [sp, #24]
 8014078:	4418      	add	r0, r3
 801407a:	f010 001f 	ands.w	r0, r0, #31
 801407e:	f000 8081 	beq.w	8014184 <_dtoa_r+0x82c>
 8014082:	f1c0 0220 	rsb	r2, r0, #32
 8014086:	2a04      	cmp	r2, #4
 8014088:	dd73      	ble.n	8014172 <_dtoa_r+0x81a>
 801408a:	9b04      	ldr	r3, [sp, #16]
 801408c:	f1c0 001c 	rsb	r0, r0, #28
 8014090:	4403      	add	r3, r0
 8014092:	9304      	str	r3, [sp, #16]
 8014094:	9b06      	ldr	r3, [sp, #24]
 8014096:	4406      	add	r6, r0
 8014098:	4403      	add	r3, r0
 801409a:	9306      	str	r3, [sp, #24]
 801409c:	9b04      	ldr	r3, [sp, #16]
 801409e:	2b00      	cmp	r3, #0
 80140a0:	dd05      	ble.n	80140ae <_dtoa_r+0x756>
 80140a2:	9901      	ldr	r1, [sp, #4]
 80140a4:	461a      	mov	r2, r3
 80140a6:	4648      	mov	r0, r9
 80140a8:	f000 fd04 	bl	8014ab4 <__lshift>
 80140ac:	9001      	str	r0, [sp, #4]
 80140ae:	9b06      	ldr	r3, [sp, #24]
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	dd05      	ble.n	80140c0 <_dtoa_r+0x768>
 80140b4:	4621      	mov	r1, r4
 80140b6:	461a      	mov	r2, r3
 80140b8:	4648      	mov	r0, r9
 80140ba:	f000 fcfb 	bl	8014ab4 <__lshift>
 80140be:	4604      	mov	r4, r0
 80140c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d060      	beq.n	8014188 <_dtoa_r+0x830>
 80140c6:	9801      	ldr	r0, [sp, #4]
 80140c8:	4621      	mov	r1, r4
 80140ca:	f000 fd5f 	bl	8014b8c <__mcmp>
 80140ce:	2800      	cmp	r0, #0
 80140d0:	da5a      	bge.n	8014188 <_dtoa_r+0x830>
 80140d2:	f108 33ff 	add.w	r3, r8, #4294967295
 80140d6:	9305      	str	r3, [sp, #20]
 80140d8:	9901      	ldr	r1, [sp, #4]
 80140da:	2300      	movs	r3, #0
 80140dc:	220a      	movs	r2, #10
 80140de:	4648      	mov	r0, r9
 80140e0:	f000 fafa 	bl	80146d8 <__multadd>
 80140e4:	9b08      	ldr	r3, [sp, #32]
 80140e6:	9001      	str	r0, [sp, #4]
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	f000 8177 	beq.w	80143dc <_dtoa_r+0xa84>
 80140ee:	4629      	mov	r1, r5
 80140f0:	2300      	movs	r3, #0
 80140f2:	220a      	movs	r2, #10
 80140f4:	4648      	mov	r0, r9
 80140f6:	f000 faef 	bl	80146d8 <__multadd>
 80140fa:	f1bb 0f00 	cmp.w	fp, #0
 80140fe:	4605      	mov	r5, r0
 8014100:	dc6e      	bgt.n	80141e0 <_dtoa_r+0x888>
 8014102:	9b07      	ldr	r3, [sp, #28]
 8014104:	2b02      	cmp	r3, #2
 8014106:	dc48      	bgt.n	801419a <_dtoa_r+0x842>
 8014108:	e06a      	b.n	80141e0 <_dtoa_r+0x888>
 801410a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801410c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8014110:	e739      	b.n	8013f86 <_dtoa_r+0x62e>
 8014112:	f10a 34ff 	add.w	r4, sl, #4294967295
 8014116:	42a3      	cmp	r3, r4
 8014118:	db07      	blt.n	801412a <_dtoa_r+0x7d2>
 801411a:	f1ba 0f00 	cmp.w	sl, #0
 801411e:	eba3 0404 	sub.w	r4, r3, r4
 8014122:	db0b      	blt.n	801413c <_dtoa_r+0x7e4>
 8014124:	9e04      	ldr	r6, [sp, #16]
 8014126:	4652      	mov	r2, sl
 8014128:	e72f      	b.n	8013f8a <_dtoa_r+0x632>
 801412a:	1ae2      	subs	r2, r4, r3
 801412c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801412e:	9e04      	ldr	r6, [sp, #16]
 8014130:	4413      	add	r3, r2
 8014132:	930a      	str	r3, [sp, #40]	@ 0x28
 8014134:	4652      	mov	r2, sl
 8014136:	4623      	mov	r3, r4
 8014138:	2400      	movs	r4, #0
 801413a:	e726      	b.n	8013f8a <_dtoa_r+0x632>
 801413c:	9a04      	ldr	r2, [sp, #16]
 801413e:	eba2 060a 	sub.w	r6, r2, sl
 8014142:	2200      	movs	r2, #0
 8014144:	e721      	b.n	8013f8a <_dtoa_r+0x632>
 8014146:	9e04      	ldr	r6, [sp, #16]
 8014148:	9d08      	ldr	r5, [sp, #32]
 801414a:	461c      	mov	r4, r3
 801414c:	e72a      	b.n	8013fa4 <_dtoa_r+0x64c>
 801414e:	9a01      	ldr	r2, [sp, #4]
 8014150:	9205      	str	r2, [sp, #20]
 8014152:	e752      	b.n	8013ffa <_dtoa_r+0x6a2>
 8014154:	9901      	ldr	r1, [sp, #4]
 8014156:	461a      	mov	r2, r3
 8014158:	e751      	b.n	8013ffe <_dtoa_r+0x6a6>
 801415a:	9b05      	ldr	r3, [sp, #20]
 801415c:	9301      	str	r3, [sp, #4]
 801415e:	e752      	b.n	8014006 <_dtoa_r+0x6ae>
 8014160:	2300      	movs	r3, #0
 8014162:	e77b      	b.n	801405c <_dtoa_r+0x704>
 8014164:	9b02      	ldr	r3, [sp, #8]
 8014166:	e779      	b.n	801405c <_dtoa_r+0x704>
 8014168:	920b      	str	r2, [sp, #44]	@ 0x2c
 801416a:	e778      	b.n	801405e <_dtoa_r+0x706>
 801416c:	2300      	movs	r3, #0
 801416e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014170:	e779      	b.n	8014066 <_dtoa_r+0x70e>
 8014172:	d093      	beq.n	801409c <_dtoa_r+0x744>
 8014174:	9b04      	ldr	r3, [sp, #16]
 8014176:	321c      	adds	r2, #28
 8014178:	4413      	add	r3, r2
 801417a:	9304      	str	r3, [sp, #16]
 801417c:	9b06      	ldr	r3, [sp, #24]
 801417e:	4416      	add	r6, r2
 8014180:	4413      	add	r3, r2
 8014182:	e78a      	b.n	801409a <_dtoa_r+0x742>
 8014184:	4602      	mov	r2, r0
 8014186:	e7f5      	b.n	8014174 <_dtoa_r+0x81c>
 8014188:	f1ba 0f00 	cmp.w	sl, #0
 801418c:	f8cd 8014 	str.w	r8, [sp, #20]
 8014190:	46d3      	mov	fp, sl
 8014192:	dc21      	bgt.n	80141d8 <_dtoa_r+0x880>
 8014194:	9b07      	ldr	r3, [sp, #28]
 8014196:	2b02      	cmp	r3, #2
 8014198:	dd1e      	ble.n	80141d8 <_dtoa_r+0x880>
 801419a:	f1bb 0f00 	cmp.w	fp, #0
 801419e:	f47f addc 	bne.w	8013d5a <_dtoa_r+0x402>
 80141a2:	4621      	mov	r1, r4
 80141a4:	465b      	mov	r3, fp
 80141a6:	2205      	movs	r2, #5
 80141a8:	4648      	mov	r0, r9
 80141aa:	f000 fa95 	bl	80146d8 <__multadd>
 80141ae:	4601      	mov	r1, r0
 80141b0:	4604      	mov	r4, r0
 80141b2:	9801      	ldr	r0, [sp, #4]
 80141b4:	f000 fcea 	bl	8014b8c <__mcmp>
 80141b8:	2800      	cmp	r0, #0
 80141ba:	f77f adce 	ble.w	8013d5a <_dtoa_r+0x402>
 80141be:	463e      	mov	r6, r7
 80141c0:	2331      	movs	r3, #49	@ 0x31
 80141c2:	f806 3b01 	strb.w	r3, [r6], #1
 80141c6:	9b05      	ldr	r3, [sp, #20]
 80141c8:	3301      	adds	r3, #1
 80141ca:	9305      	str	r3, [sp, #20]
 80141cc:	e5c9      	b.n	8013d62 <_dtoa_r+0x40a>
 80141ce:	f8cd 8014 	str.w	r8, [sp, #20]
 80141d2:	4654      	mov	r4, sl
 80141d4:	4625      	mov	r5, r4
 80141d6:	e7f2      	b.n	80141be <_dtoa_r+0x866>
 80141d8:	9b08      	ldr	r3, [sp, #32]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	f000 8102 	beq.w	80143e4 <_dtoa_r+0xa8c>
 80141e0:	2e00      	cmp	r6, #0
 80141e2:	dd05      	ble.n	80141f0 <_dtoa_r+0x898>
 80141e4:	4629      	mov	r1, r5
 80141e6:	4632      	mov	r2, r6
 80141e8:	4648      	mov	r0, r9
 80141ea:	f000 fc63 	bl	8014ab4 <__lshift>
 80141ee:	4605      	mov	r5, r0
 80141f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d058      	beq.n	80142a8 <_dtoa_r+0x950>
 80141f6:	6869      	ldr	r1, [r5, #4]
 80141f8:	4648      	mov	r0, r9
 80141fa:	f000 fa0b 	bl	8014614 <_Balloc>
 80141fe:	4606      	mov	r6, r0
 8014200:	b928      	cbnz	r0, 801420e <_dtoa_r+0x8b6>
 8014202:	4b82      	ldr	r3, [pc, #520]	@ (801440c <_dtoa_r+0xab4>)
 8014204:	4602      	mov	r2, r0
 8014206:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801420a:	f7ff bbbe 	b.w	801398a <_dtoa_r+0x32>
 801420e:	692a      	ldr	r2, [r5, #16]
 8014210:	3202      	adds	r2, #2
 8014212:	0092      	lsls	r2, r2, #2
 8014214:	f105 010c 	add.w	r1, r5, #12
 8014218:	300c      	adds	r0, #12
 801421a:	f001 ff19 	bl	8016050 <memcpy>
 801421e:	2201      	movs	r2, #1
 8014220:	4631      	mov	r1, r6
 8014222:	4648      	mov	r0, r9
 8014224:	f000 fc46 	bl	8014ab4 <__lshift>
 8014228:	1c7b      	adds	r3, r7, #1
 801422a:	9304      	str	r3, [sp, #16]
 801422c:	eb07 030b 	add.w	r3, r7, fp
 8014230:	9309      	str	r3, [sp, #36]	@ 0x24
 8014232:	9b02      	ldr	r3, [sp, #8]
 8014234:	f003 0301 	and.w	r3, r3, #1
 8014238:	46a8      	mov	r8, r5
 801423a:	9308      	str	r3, [sp, #32]
 801423c:	4605      	mov	r5, r0
 801423e:	9b04      	ldr	r3, [sp, #16]
 8014240:	9801      	ldr	r0, [sp, #4]
 8014242:	4621      	mov	r1, r4
 8014244:	f103 3bff 	add.w	fp, r3, #4294967295
 8014248:	f7ff fafc 	bl	8013844 <quorem>
 801424c:	4641      	mov	r1, r8
 801424e:	9002      	str	r0, [sp, #8]
 8014250:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8014254:	9801      	ldr	r0, [sp, #4]
 8014256:	f000 fc99 	bl	8014b8c <__mcmp>
 801425a:	462a      	mov	r2, r5
 801425c:	9006      	str	r0, [sp, #24]
 801425e:	4621      	mov	r1, r4
 8014260:	4648      	mov	r0, r9
 8014262:	f000 fcaf 	bl	8014bc4 <__mdiff>
 8014266:	68c2      	ldr	r2, [r0, #12]
 8014268:	4606      	mov	r6, r0
 801426a:	b9fa      	cbnz	r2, 80142ac <_dtoa_r+0x954>
 801426c:	4601      	mov	r1, r0
 801426e:	9801      	ldr	r0, [sp, #4]
 8014270:	f000 fc8c 	bl	8014b8c <__mcmp>
 8014274:	4602      	mov	r2, r0
 8014276:	4631      	mov	r1, r6
 8014278:	4648      	mov	r0, r9
 801427a:	920a      	str	r2, [sp, #40]	@ 0x28
 801427c:	f000 fa0a 	bl	8014694 <_Bfree>
 8014280:	9b07      	ldr	r3, [sp, #28]
 8014282:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014284:	9e04      	ldr	r6, [sp, #16]
 8014286:	ea42 0103 	orr.w	r1, r2, r3
 801428a:	9b08      	ldr	r3, [sp, #32]
 801428c:	4319      	orrs	r1, r3
 801428e:	d10f      	bne.n	80142b0 <_dtoa_r+0x958>
 8014290:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8014294:	d028      	beq.n	80142e8 <_dtoa_r+0x990>
 8014296:	9b06      	ldr	r3, [sp, #24]
 8014298:	2b00      	cmp	r3, #0
 801429a:	dd02      	ble.n	80142a2 <_dtoa_r+0x94a>
 801429c:	9b02      	ldr	r3, [sp, #8]
 801429e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80142a2:	f88b a000 	strb.w	sl, [fp]
 80142a6:	e55e      	b.n	8013d66 <_dtoa_r+0x40e>
 80142a8:	4628      	mov	r0, r5
 80142aa:	e7bd      	b.n	8014228 <_dtoa_r+0x8d0>
 80142ac:	2201      	movs	r2, #1
 80142ae:	e7e2      	b.n	8014276 <_dtoa_r+0x91e>
 80142b0:	9b06      	ldr	r3, [sp, #24]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	db04      	blt.n	80142c0 <_dtoa_r+0x968>
 80142b6:	9907      	ldr	r1, [sp, #28]
 80142b8:	430b      	orrs	r3, r1
 80142ba:	9908      	ldr	r1, [sp, #32]
 80142bc:	430b      	orrs	r3, r1
 80142be:	d120      	bne.n	8014302 <_dtoa_r+0x9aa>
 80142c0:	2a00      	cmp	r2, #0
 80142c2:	ddee      	ble.n	80142a2 <_dtoa_r+0x94a>
 80142c4:	9901      	ldr	r1, [sp, #4]
 80142c6:	2201      	movs	r2, #1
 80142c8:	4648      	mov	r0, r9
 80142ca:	f000 fbf3 	bl	8014ab4 <__lshift>
 80142ce:	4621      	mov	r1, r4
 80142d0:	9001      	str	r0, [sp, #4]
 80142d2:	f000 fc5b 	bl	8014b8c <__mcmp>
 80142d6:	2800      	cmp	r0, #0
 80142d8:	dc03      	bgt.n	80142e2 <_dtoa_r+0x98a>
 80142da:	d1e2      	bne.n	80142a2 <_dtoa_r+0x94a>
 80142dc:	f01a 0f01 	tst.w	sl, #1
 80142e0:	d0df      	beq.n	80142a2 <_dtoa_r+0x94a>
 80142e2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80142e6:	d1d9      	bne.n	801429c <_dtoa_r+0x944>
 80142e8:	2339      	movs	r3, #57	@ 0x39
 80142ea:	f88b 3000 	strb.w	r3, [fp]
 80142ee:	4633      	mov	r3, r6
 80142f0:	461e      	mov	r6, r3
 80142f2:	3b01      	subs	r3, #1
 80142f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80142f8:	2a39      	cmp	r2, #57	@ 0x39
 80142fa:	d052      	beq.n	80143a2 <_dtoa_r+0xa4a>
 80142fc:	3201      	adds	r2, #1
 80142fe:	701a      	strb	r2, [r3, #0]
 8014300:	e531      	b.n	8013d66 <_dtoa_r+0x40e>
 8014302:	2a00      	cmp	r2, #0
 8014304:	dd07      	ble.n	8014316 <_dtoa_r+0x9be>
 8014306:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801430a:	d0ed      	beq.n	80142e8 <_dtoa_r+0x990>
 801430c:	f10a 0301 	add.w	r3, sl, #1
 8014310:	f88b 3000 	strb.w	r3, [fp]
 8014314:	e527      	b.n	8013d66 <_dtoa_r+0x40e>
 8014316:	9b04      	ldr	r3, [sp, #16]
 8014318:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801431a:	f803 ac01 	strb.w	sl, [r3, #-1]
 801431e:	4293      	cmp	r3, r2
 8014320:	d029      	beq.n	8014376 <_dtoa_r+0xa1e>
 8014322:	9901      	ldr	r1, [sp, #4]
 8014324:	2300      	movs	r3, #0
 8014326:	220a      	movs	r2, #10
 8014328:	4648      	mov	r0, r9
 801432a:	f000 f9d5 	bl	80146d8 <__multadd>
 801432e:	45a8      	cmp	r8, r5
 8014330:	9001      	str	r0, [sp, #4]
 8014332:	f04f 0300 	mov.w	r3, #0
 8014336:	f04f 020a 	mov.w	r2, #10
 801433a:	4641      	mov	r1, r8
 801433c:	4648      	mov	r0, r9
 801433e:	d107      	bne.n	8014350 <_dtoa_r+0x9f8>
 8014340:	f000 f9ca 	bl	80146d8 <__multadd>
 8014344:	4680      	mov	r8, r0
 8014346:	4605      	mov	r5, r0
 8014348:	9b04      	ldr	r3, [sp, #16]
 801434a:	3301      	adds	r3, #1
 801434c:	9304      	str	r3, [sp, #16]
 801434e:	e776      	b.n	801423e <_dtoa_r+0x8e6>
 8014350:	f000 f9c2 	bl	80146d8 <__multadd>
 8014354:	4629      	mov	r1, r5
 8014356:	4680      	mov	r8, r0
 8014358:	2300      	movs	r3, #0
 801435a:	220a      	movs	r2, #10
 801435c:	4648      	mov	r0, r9
 801435e:	f000 f9bb 	bl	80146d8 <__multadd>
 8014362:	4605      	mov	r5, r0
 8014364:	e7f0      	b.n	8014348 <_dtoa_r+0x9f0>
 8014366:	f1bb 0f00 	cmp.w	fp, #0
 801436a:	bfcc      	ite	gt
 801436c:	465e      	movgt	r6, fp
 801436e:	2601      	movle	r6, #1
 8014370:	443e      	add	r6, r7
 8014372:	f04f 0800 	mov.w	r8, #0
 8014376:	9901      	ldr	r1, [sp, #4]
 8014378:	2201      	movs	r2, #1
 801437a:	4648      	mov	r0, r9
 801437c:	f000 fb9a 	bl	8014ab4 <__lshift>
 8014380:	4621      	mov	r1, r4
 8014382:	9001      	str	r0, [sp, #4]
 8014384:	f000 fc02 	bl	8014b8c <__mcmp>
 8014388:	2800      	cmp	r0, #0
 801438a:	dcb0      	bgt.n	80142ee <_dtoa_r+0x996>
 801438c:	d102      	bne.n	8014394 <_dtoa_r+0xa3c>
 801438e:	f01a 0f01 	tst.w	sl, #1
 8014392:	d1ac      	bne.n	80142ee <_dtoa_r+0x996>
 8014394:	4633      	mov	r3, r6
 8014396:	461e      	mov	r6, r3
 8014398:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801439c:	2a30      	cmp	r2, #48	@ 0x30
 801439e:	d0fa      	beq.n	8014396 <_dtoa_r+0xa3e>
 80143a0:	e4e1      	b.n	8013d66 <_dtoa_r+0x40e>
 80143a2:	429f      	cmp	r7, r3
 80143a4:	d1a4      	bne.n	80142f0 <_dtoa_r+0x998>
 80143a6:	9b05      	ldr	r3, [sp, #20]
 80143a8:	3301      	adds	r3, #1
 80143aa:	9305      	str	r3, [sp, #20]
 80143ac:	2331      	movs	r3, #49	@ 0x31
 80143ae:	703b      	strb	r3, [r7, #0]
 80143b0:	e4d9      	b.n	8013d66 <_dtoa_r+0x40e>
 80143b2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80143b4:	4f16      	ldr	r7, [pc, #88]	@ (8014410 <_dtoa_r+0xab8>)
 80143b6:	b11b      	cbz	r3, 80143c0 <_dtoa_r+0xa68>
 80143b8:	f107 0308 	add.w	r3, r7, #8
 80143bc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80143be:	6013      	str	r3, [r2, #0]
 80143c0:	4638      	mov	r0, r7
 80143c2:	b011      	add	sp, #68	@ 0x44
 80143c4:	ecbd 8b02 	vpop	{d8}
 80143c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143cc:	9b07      	ldr	r3, [sp, #28]
 80143ce:	2b01      	cmp	r3, #1
 80143d0:	f77f ae2c 	ble.w	801402c <_dtoa_r+0x6d4>
 80143d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80143d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80143d8:	2001      	movs	r0, #1
 80143da:	e64c      	b.n	8014076 <_dtoa_r+0x71e>
 80143dc:	f1bb 0f00 	cmp.w	fp, #0
 80143e0:	f77f aed8 	ble.w	8014194 <_dtoa_r+0x83c>
 80143e4:	463e      	mov	r6, r7
 80143e6:	9801      	ldr	r0, [sp, #4]
 80143e8:	4621      	mov	r1, r4
 80143ea:	f7ff fa2b 	bl	8013844 <quorem>
 80143ee:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80143f2:	f806 ab01 	strb.w	sl, [r6], #1
 80143f6:	1bf2      	subs	r2, r6, r7
 80143f8:	4593      	cmp	fp, r2
 80143fa:	ddb4      	ble.n	8014366 <_dtoa_r+0xa0e>
 80143fc:	9901      	ldr	r1, [sp, #4]
 80143fe:	2300      	movs	r3, #0
 8014400:	220a      	movs	r2, #10
 8014402:	4648      	mov	r0, r9
 8014404:	f000 f968 	bl	80146d8 <__multadd>
 8014408:	9001      	str	r0, [sp, #4]
 801440a:	e7ec      	b.n	80143e6 <_dtoa_r+0xa8e>
 801440c:	0801df6d 	.word	0x0801df6d
 8014410:	0801def1 	.word	0x0801def1

08014414 <_free_r>:
 8014414:	b538      	push	{r3, r4, r5, lr}
 8014416:	4605      	mov	r5, r0
 8014418:	2900      	cmp	r1, #0
 801441a:	d041      	beq.n	80144a0 <_free_r+0x8c>
 801441c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014420:	1f0c      	subs	r4, r1, #4
 8014422:	2b00      	cmp	r3, #0
 8014424:	bfb8      	it	lt
 8014426:	18e4      	addlt	r4, r4, r3
 8014428:	f000 f8e8 	bl	80145fc <__malloc_lock>
 801442c:	4a1d      	ldr	r2, [pc, #116]	@ (80144a4 <_free_r+0x90>)
 801442e:	6813      	ldr	r3, [r2, #0]
 8014430:	b933      	cbnz	r3, 8014440 <_free_r+0x2c>
 8014432:	6063      	str	r3, [r4, #4]
 8014434:	6014      	str	r4, [r2, #0]
 8014436:	4628      	mov	r0, r5
 8014438:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801443c:	f000 b8e4 	b.w	8014608 <__malloc_unlock>
 8014440:	42a3      	cmp	r3, r4
 8014442:	d908      	bls.n	8014456 <_free_r+0x42>
 8014444:	6820      	ldr	r0, [r4, #0]
 8014446:	1821      	adds	r1, r4, r0
 8014448:	428b      	cmp	r3, r1
 801444a:	bf01      	itttt	eq
 801444c:	6819      	ldreq	r1, [r3, #0]
 801444e:	685b      	ldreq	r3, [r3, #4]
 8014450:	1809      	addeq	r1, r1, r0
 8014452:	6021      	streq	r1, [r4, #0]
 8014454:	e7ed      	b.n	8014432 <_free_r+0x1e>
 8014456:	461a      	mov	r2, r3
 8014458:	685b      	ldr	r3, [r3, #4]
 801445a:	b10b      	cbz	r3, 8014460 <_free_r+0x4c>
 801445c:	42a3      	cmp	r3, r4
 801445e:	d9fa      	bls.n	8014456 <_free_r+0x42>
 8014460:	6811      	ldr	r1, [r2, #0]
 8014462:	1850      	adds	r0, r2, r1
 8014464:	42a0      	cmp	r0, r4
 8014466:	d10b      	bne.n	8014480 <_free_r+0x6c>
 8014468:	6820      	ldr	r0, [r4, #0]
 801446a:	4401      	add	r1, r0
 801446c:	1850      	adds	r0, r2, r1
 801446e:	4283      	cmp	r3, r0
 8014470:	6011      	str	r1, [r2, #0]
 8014472:	d1e0      	bne.n	8014436 <_free_r+0x22>
 8014474:	6818      	ldr	r0, [r3, #0]
 8014476:	685b      	ldr	r3, [r3, #4]
 8014478:	6053      	str	r3, [r2, #4]
 801447a:	4408      	add	r0, r1
 801447c:	6010      	str	r0, [r2, #0]
 801447e:	e7da      	b.n	8014436 <_free_r+0x22>
 8014480:	d902      	bls.n	8014488 <_free_r+0x74>
 8014482:	230c      	movs	r3, #12
 8014484:	602b      	str	r3, [r5, #0]
 8014486:	e7d6      	b.n	8014436 <_free_r+0x22>
 8014488:	6820      	ldr	r0, [r4, #0]
 801448a:	1821      	adds	r1, r4, r0
 801448c:	428b      	cmp	r3, r1
 801448e:	bf04      	itt	eq
 8014490:	6819      	ldreq	r1, [r3, #0]
 8014492:	685b      	ldreq	r3, [r3, #4]
 8014494:	6063      	str	r3, [r4, #4]
 8014496:	bf04      	itt	eq
 8014498:	1809      	addeq	r1, r1, r0
 801449a:	6021      	streq	r1, [r4, #0]
 801449c:	6054      	str	r4, [r2, #4]
 801449e:	e7ca      	b.n	8014436 <_free_r+0x22>
 80144a0:	bd38      	pop	{r3, r4, r5, pc}
 80144a2:	bf00      	nop
 80144a4:	2400124c 	.word	0x2400124c

080144a8 <malloc>:
 80144a8:	4b02      	ldr	r3, [pc, #8]	@ (80144b4 <malloc+0xc>)
 80144aa:	4601      	mov	r1, r0
 80144ac:	6818      	ldr	r0, [r3, #0]
 80144ae:	f000 b825 	b.w	80144fc <_malloc_r>
 80144b2:	bf00      	nop
 80144b4:	2400039c 	.word	0x2400039c

080144b8 <sbrk_aligned>:
 80144b8:	b570      	push	{r4, r5, r6, lr}
 80144ba:	4e0f      	ldr	r6, [pc, #60]	@ (80144f8 <sbrk_aligned+0x40>)
 80144bc:	460c      	mov	r4, r1
 80144be:	6831      	ldr	r1, [r6, #0]
 80144c0:	4605      	mov	r5, r0
 80144c2:	b911      	cbnz	r1, 80144ca <sbrk_aligned+0x12>
 80144c4:	f001 fdb4 	bl	8016030 <_sbrk_r>
 80144c8:	6030      	str	r0, [r6, #0]
 80144ca:	4621      	mov	r1, r4
 80144cc:	4628      	mov	r0, r5
 80144ce:	f001 fdaf 	bl	8016030 <_sbrk_r>
 80144d2:	1c43      	adds	r3, r0, #1
 80144d4:	d103      	bne.n	80144de <sbrk_aligned+0x26>
 80144d6:	f04f 34ff 	mov.w	r4, #4294967295
 80144da:	4620      	mov	r0, r4
 80144dc:	bd70      	pop	{r4, r5, r6, pc}
 80144de:	1cc4      	adds	r4, r0, #3
 80144e0:	f024 0403 	bic.w	r4, r4, #3
 80144e4:	42a0      	cmp	r0, r4
 80144e6:	d0f8      	beq.n	80144da <sbrk_aligned+0x22>
 80144e8:	1a21      	subs	r1, r4, r0
 80144ea:	4628      	mov	r0, r5
 80144ec:	f001 fda0 	bl	8016030 <_sbrk_r>
 80144f0:	3001      	adds	r0, #1
 80144f2:	d1f2      	bne.n	80144da <sbrk_aligned+0x22>
 80144f4:	e7ef      	b.n	80144d6 <sbrk_aligned+0x1e>
 80144f6:	bf00      	nop
 80144f8:	24001248 	.word	0x24001248

080144fc <_malloc_r>:
 80144fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014500:	1ccd      	adds	r5, r1, #3
 8014502:	f025 0503 	bic.w	r5, r5, #3
 8014506:	3508      	adds	r5, #8
 8014508:	2d0c      	cmp	r5, #12
 801450a:	bf38      	it	cc
 801450c:	250c      	movcc	r5, #12
 801450e:	2d00      	cmp	r5, #0
 8014510:	4606      	mov	r6, r0
 8014512:	db01      	blt.n	8014518 <_malloc_r+0x1c>
 8014514:	42a9      	cmp	r1, r5
 8014516:	d904      	bls.n	8014522 <_malloc_r+0x26>
 8014518:	230c      	movs	r3, #12
 801451a:	6033      	str	r3, [r6, #0]
 801451c:	2000      	movs	r0, #0
 801451e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014522:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80145f8 <_malloc_r+0xfc>
 8014526:	f000 f869 	bl	80145fc <__malloc_lock>
 801452a:	f8d8 3000 	ldr.w	r3, [r8]
 801452e:	461c      	mov	r4, r3
 8014530:	bb44      	cbnz	r4, 8014584 <_malloc_r+0x88>
 8014532:	4629      	mov	r1, r5
 8014534:	4630      	mov	r0, r6
 8014536:	f7ff ffbf 	bl	80144b8 <sbrk_aligned>
 801453a:	1c43      	adds	r3, r0, #1
 801453c:	4604      	mov	r4, r0
 801453e:	d158      	bne.n	80145f2 <_malloc_r+0xf6>
 8014540:	f8d8 4000 	ldr.w	r4, [r8]
 8014544:	4627      	mov	r7, r4
 8014546:	2f00      	cmp	r7, #0
 8014548:	d143      	bne.n	80145d2 <_malloc_r+0xd6>
 801454a:	2c00      	cmp	r4, #0
 801454c:	d04b      	beq.n	80145e6 <_malloc_r+0xea>
 801454e:	6823      	ldr	r3, [r4, #0]
 8014550:	4639      	mov	r1, r7
 8014552:	4630      	mov	r0, r6
 8014554:	eb04 0903 	add.w	r9, r4, r3
 8014558:	f001 fd6a 	bl	8016030 <_sbrk_r>
 801455c:	4581      	cmp	r9, r0
 801455e:	d142      	bne.n	80145e6 <_malloc_r+0xea>
 8014560:	6821      	ldr	r1, [r4, #0]
 8014562:	1a6d      	subs	r5, r5, r1
 8014564:	4629      	mov	r1, r5
 8014566:	4630      	mov	r0, r6
 8014568:	f7ff ffa6 	bl	80144b8 <sbrk_aligned>
 801456c:	3001      	adds	r0, #1
 801456e:	d03a      	beq.n	80145e6 <_malloc_r+0xea>
 8014570:	6823      	ldr	r3, [r4, #0]
 8014572:	442b      	add	r3, r5
 8014574:	6023      	str	r3, [r4, #0]
 8014576:	f8d8 3000 	ldr.w	r3, [r8]
 801457a:	685a      	ldr	r2, [r3, #4]
 801457c:	bb62      	cbnz	r2, 80145d8 <_malloc_r+0xdc>
 801457e:	f8c8 7000 	str.w	r7, [r8]
 8014582:	e00f      	b.n	80145a4 <_malloc_r+0xa8>
 8014584:	6822      	ldr	r2, [r4, #0]
 8014586:	1b52      	subs	r2, r2, r5
 8014588:	d420      	bmi.n	80145cc <_malloc_r+0xd0>
 801458a:	2a0b      	cmp	r2, #11
 801458c:	d917      	bls.n	80145be <_malloc_r+0xc2>
 801458e:	1961      	adds	r1, r4, r5
 8014590:	42a3      	cmp	r3, r4
 8014592:	6025      	str	r5, [r4, #0]
 8014594:	bf18      	it	ne
 8014596:	6059      	strne	r1, [r3, #4]
 8014598:	6863      	ldr	r3, [r4, #4]
 801459a:	bf08      	it	eq
 801459c:	f8c8 1000 	streq.w	r1, [r8]
 80145a0:	5162      	str	r2, [r4, r5]
 80145a2:	604b      	str	r3, [r1, #4]
 80145a4:	4630      	mov	r0, r6
 80145a6:	f000 f82f 	bl	8014608 <__malloc_unlock>
 80145aa:	f104 000b 	add.w	r0, r4, #11
 80145ae:	1d23      	adds	r3, r4, #4
 80145b0:	f020 0007 	bic.w	r0, r0, #7
 80145b4:	1ac2      	subs	r2, r0, r3
 80145b6:	bf1c      	itt	ne
 80145b8:	1a1b      	subne	r3, r3, r0
 80145ba:	50a3      	strne	r3, [r4, r2]
 80145bc:	e7af      	b.n	801451e <_malloc_r+0x22>
 80145be:	6862      	ldr	r2, [r4, #4]
 80145c0:	42a3      	cmp	r3, r4
 80145c2:	bf0c      	ite	eq
 80145c4:	f8c8 2000 	streq.w	r2, [r8]
 80145c8:	605a      	strne	r2, [r3, #4]
 80145ca:	e7eb      	b.n	80145a4 <_malloc_r+0xa8>
 80145cc:	4623      	mov	r3, r4
 80145ce:	6864      	ldr	r4, [r4, #4]
 80145d0:	e7ae      	b.n	8014530 <_malloc_r+0x34>
 80145d2:	463c      	mov	r4, r7
 80145d4:	687f      	ldr	r7, [r7, #4]
 80145d6:	e7b6      	b.n	8014546 <_malloc_r+0x4a>
 80145d8:	461a      	mov	r2, r3
 80145da:	685b      	ldr	r3, [r3, #4]
 80145dc:	42a3      	cmp	r3, r4
 80145de:	d1fb      	bne.n	80145d8 <_malloc_r+0xdc>
 80145e0:	2300      	movs	r3, #0
 80145e2:	6053      	str	r3, [r2, #4]
 80145e4:	e7de      	b.n	80145a4 <_malloc_r+0xa8>
 80145e6:	230c      	movs	r3, #12
 80145e8:	6033      	str	r3, [r6, #0]
 80145ea:	4630      	mov	r0, r6
 80145ec:	f000 f80c 	bl	8014608 <__malloc_unlock>
 80145f0:	e794      	b.n	801451c <_malloc_r+0x20>
 80145f2:	6005      	str	r5, [r0, #0]
 80145f4:	e7d6      	b.n	80145a4 <_malloc_r+0xa8>
 80145f6:	bf00      	nop
 80145f8:	2400124c 	.word	0x2400124c

080145fc <__malloc_lock>:
 80145fc:	4801      	ldr	r0, [pc, #4]	@ (8014604 <__malloc_lock+0x8>)
 80145fe:	f7ff b918 	b.w	8013832 <__retarget_lock_acquire_recursive>
 8014602:	bf00      	nop
 8014604:	24001244 	.word	0x24001244

08014608 <__malloc_unlock>:
 8014608:	4801      	ldr	r0, [pc, #4]	@ (8014610 <__malloc_unlock+0x8>)
 801460a:	f7ff b913 	b.w	8013834 <__retarget_lock_release_recursive>
 801460e:	bf00      	nop
 8014610:	24001244 	.word	0x24001244

08014614 <_Balloc>:
 8014614:	b570      	push	{r4, r5, r6, lr}
 8014616:	69c6      	ldr	r6, [r0, #28]
 8014618:	4604      	mov	r4, r0
 801461a:	460d      	mov	r5, r1
 801461c:	b976      	cbnz	r6, 801463c <_Balloc+0x28>
 801461e:	2010      	movs	r0, #16
 8014620:	f7ff ff42 	bl	80144a8 <malloc>
 8014624:	4602      	mov	r2, r0
 8014626:	61e0      	str	r0, [r4, #28]
 8014628:	b920      	cbnz	r0, 8014634 <_Balloc+0x20>
 801462a:	4b18      	ldr	r3, [pc, #96]	@ (801468c <_Balloc+0x78>)
 801462c:	4818      	ldr	r0, [pc, #96]	@ (8014690 <_Balloc+0x7c>)
 801462e:	216b      	movs	r1, #107	@ 0x6b
 8014630:	f001 fd26 	bl	8016080 <__assert_func>
 8014634:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014638:	6006      	str	r6, [r0, #0]
 801463a:	60c6      	str	r6, [r0, #12]
 801463c:	69e6      	ldr	r6, [r4, #28]
 801463e:	68f3      	ldr	r3, [r6, #12]
 8014640:	b183      	cbz	r3, 8014664 <_Balloc+0x50>
 8014642:	69e3      	ldr	r3, [r4, #28]
 8014644:	68db      	ldr	r3, [r3, #12]
 8014646:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801464a:	b9b8      	cbnz	r0, 801467c <_Balloc+0x68>
 801464c:	2101      	movs	r1, #1
 801464e:	fa01 f605 	lsl.w	r6, r1, r5
 8014652:	1d72      	adds	r2, r6, #5
 8014654:	0092      	lsls	r2, r2, #2
 8014656:	4620      	mov	r0, r4
 8014658:	f001 fd30 	bl	80160bc <_calloc_r>
 801465c:	b160      	cbz	r0, 8014678 <_Balloc+0x64>
 801465e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014662:	e00e      	b.n	8014682 <_Balloc+0x6e>
 8014664:	2221      	movs	r2, #33	@ 0x21
 8014666:	2104      	movs	r1, #4
 8014668:	4620      	mov	r0, r4
 801466a:	f001 fd27 	bl	80160bc <_calloc_r>
 801466e:	69e3      	ldr	r3, [r4, #28]
 8014670:	60f0      	str	r0, [r6, #12]
 8014672:	68db      	ldr	r3, [r3, #12]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d1e4      	bne.n	8014642 <_Balloc+0x2e>
 8014678:	2000      	movs	r0, #0
 801467a:	bd70      	pop	{r4, r5, r6, pc}
 801467c:	6802      	ldr	r2, [r0, #0]
 801467e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014682:	2300      	movs	r3, #0
 8014684:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014688:	e7f7      	b.n	801467a <_Balloc+0x66>
 801468a:	bf00      	nop
 801468c:	0801defe 	.word	0x0801defe
 8014690:	0801df7e 	.word	0x0801df7e

08014694 <_Bfree>:
 8014694:	b570      	push	{r4, r5, r6, lr}
 8014696:	69c6      	ldr	r6, [r0, #28]
 8014698:	4605      	mov	r5, r0
 801469a:	460c      	mov	r4, r1
 801469c:	b976      	cbnz	r6, 80146bc <_Bfree+0x28>
 801469e:	2010      	movs	r0, #16
 80146a0:	f7ff ff02 	bl	80144a8 <malloc>
 80146a4:	4602      	mov	r2, r0
 80146a6:	61e8      	str	r0, [r5, #28]
 80146a8:	b920      	cbnz	r0, 80146b4 <_Bfree+0x20>
 80146aa:	4b09      	ldr	r3, [pc, #36]	@ (80146d0 <_Bfree+0x3c>)
 80146ac:	4809      	ldr	r0, [pc, #36]	@ (80146d4 <_Bfree+0x40>)
 80146ae:	218f      	movs	r1, #143	@ 0x8f
 80146b0:	f001 fce6 	bl	8016080 <__assert_func>
 80146b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80146b8:	6006      	str	r6, [r0, #0]
 80146ba:	60c6      	str	r6, [r0, #12]
 80146bc:	b13c      	cbz	r4, 80146ce <_Bfree+0x3a>
 80146be:	69eb      	ldr	r3, [r5, #28]
 80146c0:	6862      	ldr	r2, [r4, #4]
 80146c2:	68db      	ldr	r3, [r3, #12]
 80146c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80146c8:	6021      	str	r1, [r4, #0]
 80146ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80146ce:	bd70      	pop	{r4, r5, r6, pc}
 80146d0:	0801defe 	.word	0x0801defe
 80146d4:	0801df7e 	.word	0x0801df7e

080146d8 <__multadd>:
 80146d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146dc:	690d      	ldr	r5, [r1, #16]
 80146de:	4607      	mov	r7, r0
 80146e0:	460c      	mov	r4, r1
 80146e2:	461e      	mov	r6, r3
 80146e4:	f101 0c14 	add.w	ip, r1, #20
 80146e8:	2000      	movs	r0, #0
 80146ea:	f8dc 3000 	ldr.w	r3, [ip]
 80146ee:	b299      	uxth	r1, r3
 80146f0:	fb02 6101 	mla	r1, r2, r1, r6
 80146f4:	0c1e      	lsrs	r6, r3, #16
 80146f6:	0c0b      	lsrs	r3, r1, #16
 80146f8:	fb02 3306 	mla	r3, r2, r6, r3
 80146fc:	b289      	uxth	r1, r1
 80146fe:	3001      	adds	r0, #1
 8014700:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014704:	4285      	cmp	r5, r0
 8014706:	f84c 1b04 	str.w	r1, [ip], #4
 801470a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801470e:	dcec      	bgt.n	80146ea <__multadd+0x12>
 8014710:	b30e      	cbz	r6, 8014756 <__multadd+0x7e>
 8014712:	68a3      	ldr	r3, [r4, #8]
 8014714:	42ab      	cmp	r3, r5
 8014716:	dc19      	bgt.n	801474c <__multadd+0x74>
 8014718:	6861      	ldr	r1, [r4, #4]
 801471a:	4638      	mov	r0, r7
 801471c:	3101      	adds	r1, #1
 801471e:	f7ff ff79 	bl	8014614 <_Balloc>
 8014722:	4680      	mov	r8, r0
 8014724:	b928      	cbnz	r0, 8014732 <__multadd+0x5a>
 8014726:	4602      	mov	r2, r0
 8014728:	4b0c      	ldr	r3, [pc, #48]	@ (801475c <__multadd+0x84>)
 801472a:	480d      	ldr	r0, [pc, #52]	@ (8014760 <__multadd+0x88>)
 801472c:	21ba      	movs	r1, #186	@ 0xba
 801472e:	f001 fca7 	bl	8016080 <__assert_func>
 8014732:	6922      	ldr	r2, [r4, #16]
 8014734:	3202      	adds	r2, #2
 8014736:	f104 010c 	add.w	r1, r4, #12
 801473a:	0092      	lsls	r2, r2, #2
 801473c:	300c      	adds	r0, #12
 801473e:	f001 fc87 	bl	8016050 <memcpy>
 8014742:	4621      	mov	r1, r4
 8014744:	4638      	mov	r0, r7
 8014746:	f7ff ffa5 	bl	8014694 <_Bfree>
 801474a:	4644      	mov	r4, r8
 801474c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014750:	3501      	adds	r5, #1
 8014752:	615e      	str	r6, [r3, #20]
 8014754:	6125      	str	r5, [r4, #16]
 8014756:	4620      	mov	r0, r4
 8014758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801475c:	0801df6d 	.word	0x0801df6d
 8014760:	0801df7e 	.word	0x0801df7e

08014764 <__s2b>:
 8014764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014768:	460c      	mov	r4, r1
 801476a:	4615      	mov	r5, r2
 801476c:	461f      	mov	r7, r3
 801476e:	2209      	movs	r2, #9
 8014770:	3308      	adds	r3, #8
 8014772:	4606      	mov	r6, r0
 8014774:	fb93 f3f2 	sdiv	r3, r3, r2
 8014778:	2100      	movs	r1, #0
 801477a:	2201      	movs	r2, #1
 801477c:	429a      	cmp	r2, r3
 801477e:	db09      	blt.n	8014794 <__s2b+0x30>
 8014780:	4630      	mov	r0, r6
 8014782:	f7ff ff47 	bl	8014614 <_Balloc>
 8014786:	b940      	cbnz	r0, 801479a <__s2b+0x36>
 8014788:	4602      	mov	r2, r0
 801478a:	4b19      	ldr	r3, [pc, #100]	@ (80147f0 <__s2b+0x8c>)
 801478c:	4819      	ldr	r0, [pc, #100]	@ (80147f4 <__s2b+0x90>)
 801478e:	21d3      	movs	r1, #211	@ 0xd3
 8014790:	f001 fc76 	bl	8016080 <__assert_func>
 8014794:	0052      	lsls	r2, r2, #1
 8014796:	3101      	adds	r1, #1
 8014798:	e7f0      	b.n	801477c <__s2b+0x18>
 801479a:	9b08      	ldr	r3, [sp, #32]
 801479c:	6143      	str	r3, [r0, #20]
 801479e:	2d09      	cmp	r5, #9
 80147a0:	f04f 0301 	mov.w	r3, #1
 80147a4:	6103      	str	r3, [r0, #16]
 80147a6:	dd16      	ble.n	80147d6 <__s2b+0x72>
 80147a8:	f104 0909 	add.w	r9, r4, #9
 80147ac:	46c8      	mov	r8, r9
 80147ae:	442c      	add	r4, r5
 80147b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80147b4:	4601      	mov	r1, r0
 80147b6:	3b30      	subs	r3, #48	@ 0x30
 80147b8:	220a      	movs	r2, #10
 80147ba:	4630      	mov	r0, r6
 80147bc:	f7ff ff8c 	bl	80146d8 <__multadd>
 80147c0:	45a0      	cmp	r8, r4
 80147c2:	d1f5      	bne.n	80147b0 <__s2b+0x4c>
 80147c4:	f1a5 0408 	sub.w	r4, r5, #8
 80147c8:	444c      	add	r4, r9
 80147ca:	1b2d      	subs	r5, r5, r4
 80147cc:	1963      	adds	r3, r4, r5
 80147ce:	42bb      	cmp	r3, r7
 80147d0:	db04      	blt.n	80147dc <__s2b+0x78>
 80147d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147d6:	340a      	adds	r4, #10
 80147d8:	2509      	movs	r5, #9
 80147da:	e7f6      	b.n	80147ca <__s2b+0x66>
 80147dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80147e0:	4601      	mov	r1, r0
 80147e2:	3b30      	subs	r3, #48	@ 0x30
 80147e4:	220a      	movs	r2, #10
 80147e6:	4630      	mov	r0, r6
 80147e8:	f7ff ff76 	bl	80146d8 <__multadd>
 80147ec:	e7ee      	b.n	80147cc <__s2b+0x68>
 80147ee:	bf00      	nop
 80147f0:	0801df6d 	.word	0x0801df6d
 80147f4:	0801df7e 	.word	0x0801df7e

080147f8 <__hi0bits>:
 80147f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80147fc:	4603      	mov	r3, r0
 80147fe:	bf36      	itet	cc
 8014800:	0403      	lslcc	r3, r0, #16
 8014802:	2000      	movcs	r0, #0
 8014804:	2010      	movcc	r0, #16
 8014806:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801480a:	bf3c      	itt	cc
 801480c:	021b      	lslcc	r3, r3, #8
 801480e:	3008      	addcc	r0, #8
 8014810:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014814:	bf3c      	itt	cc
 8014816:	011b      	lslcc	r3, r3, #4
 8014818:	3004      	addcc	r0, #4
 801481a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801481e:	bf3c      	itt	cc
 8014820:	009b      	lslcc	r3, r3, #2
 8014822:	3002      	addcc	r0, #2
 8014824:	2b00      	cmp	r3, #0
 8014826:	db05      	blt.n	8014834 <__hi0bits+0x3c>
 8014828:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801482c:	f100 0001 	add.w	r0, r0, #1
 8014830:	bf08      	it	eq
 8014832:	2020      	moveq	r0, #32
 8014834:	4770      	bx	lr

08014836 <__lo0bits>:
 8014836:	6803      	ldr	r3, [r0, #0]
 8014838:	4602      	mov	r2, r0
 801483a:	f013 0007 	ands.w	r0, r3, #7
 801483e:	d00b      	beq.n	8014858 <__lo0bits+0x22>
 8014840:	07d9      	lsls	r1, r3, #31
 8014842:	d421      	bmi.n	8014888 <__lo0bits+0x52>
 8014844:	0798      	lsls	r0, r3, #30
 8014846:	bf49      	itett	mi
 8014848:	085b      	lsrmi	r3, r3, #1
 801484a:	089b      	lsrpl	r3, r3, #2
 801484c:	2001      	movmi	r0, #1
 801484e:	6013      	strmi	r3, [r2, #0]
 8014850:	bf5c      	itt	pl
 8014852:	6013      	strpl	r3, [r2, #0]
 8014854:	2002      	movpl	r0, #2
 8014856:	4770      	bx	lr
 8014858:	b299      	uxth	r1, r3
 801485a:	b909      	cbnz	r1, 8014860 <__lo0bits+0x2a>
 801485c:	0c1b      	lsrs	r3, r3, #16
 801485e:	2010      	movs	r0, #16
 8014860:	b2d9      	uxtb	r1, r3
 8014862:	b909      	cbnz	r1, 8014868 <__lo0bits+0x32>
 8014864:	3008      	adds	r0, #8
 8014866:	0a1b      	lsrs	r3, r3, #8
 8014868:	0719      	lsls	r1, r3, #28
 801486a:	bf04      	itt	eq
 801486c:	091b      	lsreq	r3, r3, #4
 801486e:	3004      	addeq	r0, #4
 8014870:	0799      	lsls	r1, r3, #30
 8014872:	bf04      	itt	eq
 8014874:	089b      	lsreq	r3, r3, #2
 8014876:	3002      	addeq	r0, #2
 8014878:	07d9      	lsls	r1, r3, #31
 801487a:	d403      	bmi.n	8014884 <__lo0bits+0x4e>
 801487c:	085b      	lsrs	r3, r3, #1
 801487e:	f100 0001 	add.w	r0, r0, #1
 8014882:	d003      	beq.n	801488c <__lo0bits+0x56>
 8014884:	6013      	str	r3, [r2, #0]
 8014886:	4770      	bx	lr
 8014888:	2000      	movs	r0, #0
 801488a:	4770      	bx	lr
 801488c:	2020      	movs	r0, #32
 801488e:	4770      	bx	lr

08014890 <__i2b>:
 8014890:	b510      	push	{r4, lr}
 8014892:	460c      	mov	r4, r1
 8014894:	2101      	movs	r1, #1
 8014896:	f7ff febd 	bl	8014614 <_Balloc>
 801489a:	4602      	mov	r2, r0
 801489c:	b928      	cbnz	r0, 80148aa <__i2b+0x1a>
 801489e:	4b05      	ldr	r3, [pc, #20]	@ (80148b4 <__i2b+0x24>)
 80148a0:	4805      	ldr	r0, [pc, #20]	@ (80148b8 <__i2b+0x28>)
 80148a2:	f240 1145 	movw	r1, #325	@ 0x145
 80148a6:	f001 fbeb 	bl	8016080 <__assert_func>
 80148aa:	2301      	movs	r3, #1
 80148ac:	6144      	str	r4, [r0, #20]
 80148ae:	6103      	str	r3, [r0, #16]
 80148b0:	bd10      	pop	{r4, pc}
 80148b2:	bf00      	nop
 80148b4:	0801df6d 	.word	0x0801df6d
 80148b8:	0801df7e 	.word	0x0801df7e

080148bc <__multiply>:
 80148bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148c0:	4617      	mov	r7, r2
 80148c2:	690a      	ldr	r2, [r1, #16]
 80148c4:	693b      	ldr	r3, [r7, #16]
 80148c6:	429a      	cmp	r2, r3
 80148c8:	bfa8      	it	ge
 80148ca:	463b      	movge	r3, r7
 80148cc:	4689      	mov	r9, r1
 80148ce:	bfa4      	itt	ge
 80148d0:	460f      	movge	r7, r1
 80148d2:	4699      	movge	r9, r3
 80148d4:	693d      	ldr	r5, [r7, #16]
 80148d6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80148da:	68bb      	ldr	r3, [r7, #8]
 80148dc:	6879      	ldr	r1, [r7, #4]
 80148de:	eb05 060a 	add.w	r6, r5, sl
 80148e2:	42b3      	cmp	r3, r6
 80148e4:	b085      	sub	sp, #20
 80148e6:	bfb8      	it	lt
 80148e8:	3101      	addlt	r1, #1
 80148ea:	f7ff fe93 	bl	8014614 <_Balloc>
 80148ee:	b930      	cbnz	r0, 80148fe <__multiply+0x42>
 80148f0:	4602      	mov	r2, r0
 80148f2:	4b41      	ldr	r3, [pc, #260]	@ (80149f8 <__multiply+0x13c>)
 80148f4:	4841      	ldr	r0, [pc, #260]	@ (80149fc <__multiply+0x140>)
 80148f6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80148fa:	f001 fbc1 	bl	8016080 <__assert_func>
 80148fe:	f100 0414 	add.w	r4, r0, #20
 8014902:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8014906:	4623      	mov	r3, r4
 8014908:	2200      	movs	r2, #0
 801490a:	4573      	cmp	r3, lr
 801490c:	d320      	bcc.n	8014950 <__multiply+0x94>
 801490e:	f107 0814 	add.w	r8, r7, #20
 8014912:	f109 0114 	add.w	r1, r9, #20
 8014916:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801491a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801491e:	9302      	str	r3, [sp, #8]
 8014920:	1beb      	subs	r3, r5, r7
 8014922:	3b15      	subs	r3, #21
 8014924:	f023 0303 	bic.w	r3, r3, #3
 8014928:	3304      	adds	r3, #4
 801492a:	3715      	adds	r7, #21
 801492c:	42bd      	cmp	r5, r7
 801492e:	bf38      	it	cc
 8014930:	2304      	movcc	r3, #4
 8014932:	9301      	str	r3, [sp, #4]
 8014934:	9b02      	ldr	r3, [sp, #8]
 8014936:	9103      	str	r1, [sp, #12]
 8014938:	428b      	cmp	r3, r1
 801493a:	d80c      	bhi.n	8014956 <__multiply+0x9a>
 801493c:	2e00      	cmp	r6, #0
 801493e:	dd03      	ble.n	8014948 <__multiply+0x8c>
 8014940:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8014944:	2b00      	cmp	r3, #0
 8014946:	d055      	beq.n	80149f4 <__multiply+0x138>
 8014948:	6106      	str	r6, [r0, #16]
 801494a:	b005      	add	sp, #20
 801494c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014950:	f843 2b04 	str.w	r2, [r3], #4
 8014954:	e7d9      	b.n	801490a <__multiply+0x4e>
 8014956:	f8b1 a000 	ldrh.w	sl, [r1]
 801495a:	f1ba 0f00 	cmp.w	sl, #0
 801495e:	d01f      	beq.n	80149a0 <__multiply+0xe4>
 8014960:	46c4      	mov	ip, r8
 8014962:	46a1      	mov	r9, r4
 8014964:	2700      	movs	r7, #0
 8014966:	f85c 2b04 	ldr.w	r2, [ip], #4
 801496a:	f8d9 3000 	ldr.w	r3, [r9]
 801496e:	fa1f fb82 	uxth.w	fp, r2
 8014972:	b29b      	uxth	r3, r3
 8014974:	fb0a 330b 	mla	r3, sl, fp, r3
 8014978:	443b      	add	r3, r7
 801497a:	f8d9 7000 	ldr.w	r7, [r9]
 801497e:	0c12      	lsrs	r2, r2, #16
 8014980:	0c3f      	lsrs	r7, r7, #16
 8014982:	fb0a 7202 	mla	r2, sl, r2, r7
 8014986:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801498a:	b29b      	uxth	r3, r3
 801498c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014990:	4565      	cmp	r5, ip
 8014992:	f849 3b04 	str.w	r3, [r9], #4
 8014996:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801499a:	d8e4      	bhi.n	8014966 <__multiply+0xaa>
 801499c:	9b01      	ldr	r3, [sp, #4]
 801499e:	50e7      	str	r7, [r4, r3]
 80149a0:	9b03      	ldr	r3, [sp, #12]
 80149a2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80149a6:	3104      	adds	r1, #4
 80149a8:	f1b9 0f00 	cmp.w	r9, #0
 80149ac:	d020      	beq.n	80149f0 <__multiply+0x134>
 80149ae:	6823      	ldr	r3, [r4, #0]
 80149b0:	4647      	mov	r7, r8
 80149b2:	46a4      	mov	ip, r4
 80149b4:	f04f 0a00 	mov.w	sl, #0
 80149b8:	f8b7 b000 	ldrh.w	fp, [r7]
 80149bc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80149c0:	fb09 220b 	mla	r2, r9, fp, r2
 80149c4:	4452      	add	r2, sl
 80149c6:	b29b      	uxth	r3, r3
 80149c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80149cc:	f84c 3b04 	str.w	r3, [ip], #4
 80149d0:	f857 3b04 	ldr.w	r3, [r7], #4
 80149d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80149d8:	f8bc 3000 	ldrh.w	r3, [ip]
 80149dc:	fb09 330a 	mla	r3, r9, sl, r3
 80149e0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80149e4:	42bd      	cmp	r5, r7
 80149e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80149ea:	d8e5      	bhi.n	80149b8 <__multiply+0xfc>
 80149ec:	9a01      	ldr	r2, [sp, #4]
 80149ee:	50a3      	str	r3, [r4, r2]
 80149f0:	3404      	adds	r4, #4
 80149f2:	e79f      	b.n	8014934 <__multiply+0x78>
 80149f4:	3e01      	subs	r6, #1
 80149f6:	e7a1      	b.n	801493c <__multiply+0x80>
 80149f8:	0801df6d 	.word	0x0801df6d
 80149fc:	0801df7e 	.word	0x0801df7e

08014a00 <__pow5mult>:
 8014a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a04:	4615      	mov	r5, r2
 8014a06:	f012 0203 	ands.w	r2, r2, #3
 8014a0a:	4607      	mov	r7, r0
 8014a0c:	460e      	mov	r6, r1
 8014a0e:	d007      	beq.n	8014a20 <__pow5mult+0x20>
 8014a10:	4c25      	ldr	r4, [pc, #148]	@ (8014aa8 <__pow5mult+0xa8>)
 8014a12:	3a01      	subs	r2, #1
 8014a14:	2300      	movs	r3, #0
 8014a16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014a1a:	f7ff fe5d 	bl	80146d8 <__multadd>
 8014a1e:	4606      	mov	r6, r0
 8014a20:	10ad      	asrs	r5, r5, #2
 8014a22:	d03d      	beq.n	8014aa0 <__pow5mult+0xa0>
 8014a24:	69fc      	ldr	r4, [r7, #28]
 8014a26:	b97c      	cbnz	r4, 8014a48 <__pow5mult+0x48>
 8014a28:	2010      	movs	r0, #16
 8014a2a:	f7ff fd3d 	bl	80144a8 <malloc>
 8014a2e:	4602      	mov	r2, r0
 8014a30:	61f8      	str	r0, [r7, #28]
 8014a32:	b928      	cbnz	r0, 8014a40 <__pow5mult+0x40>
 8014a34:	4b1d      	ldr	r3, [pc, #116]	@ (8014aac <__pow5mult+0xac>)
 8014a36:	481e      	ldr	r0, [pc, #120]	@ (8014ab0 <__pow5mult+0xb0>)
 8014a38:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8014a3c:	f001 fb20 	bl	8016080 <__assert_func>
 8014a40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014a44:	6004      	str	r4, [r0, #0]
 8014a46:	60c4      	str	r4, [r0, #12]
 8014a48:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014a4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014a50:	b94c      	cbnz	r4, 8014a66 <__pow5mult+0x66>
 8014a52:	f240 2171 	movw	r1, #625	@ 0x271
 8014a56:	4638      	mov	r0, r7
 8014a58:	f7ff ff1a 	bl	8014890 <__i2b>
 8014a5c:	2300      	movs	r3, #0
 8014a5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014a62:	4604      	mov	r4, r0
 8014a64:	6003      	str	r3, [r0, #0]
 8014a66:	f04f 0900 	mov.w	r9, #0
 8014a6a:	07eb      	lsls	r3, r5, #31
 8014a6c:	d50a      	bpl.n	8014a84 <__pow5mult+0x84>
 8014a6e:	4631      	mov	r1, r6
 8014a70:	4622      	mov	r2, r4
 8014a72:	4638      	mov	r0, r7
 8014a74:	f7ff ff22 	bl	80148bc <__multiply>
 8014a78:	4631      	mov	r1, r6
 8014a7a:	4680      	mov	r8, r0
 8014a7c:	4638      	mov	r0, r7
 8014a7e:	f7ff fe09 	bl	8014694 <_Bfree>
 8014a82:	4646      	mov	r6, r8
 8014a84:	106d      	asrs	r5, r5, #1
 8014a86:	d00b      	beq.n	8014aa0 <__pow5mult+0xa0>
 8014a88:	6820      	ldr	r0, [r4, #0]
 8014a8a:	b938      	cbnz	r0, 8014a9c <__pow5mult+0x9c>
 8014a8c:	4622      	mov	r2, r4
 8014a8e:	4621      	mov	r1, r4
 8014a90:	4638      	mov	r0, r7
 8014a92:	f7ff ff13 	bl	80148bc <__multiply>
 8014a96:	6020      	str	r0, [r4, #0]
 8014a98:	f8c0 9000 	str.w	r9, [r0]
 8014a9c:	4604      	mov	r4, r0
 8014a9e:	e7e4      	b.n	8014a6a <__pow5mult+0x6a>
 8014aa0:	4630      	mov	r0, r6
 8014aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014aa6:	bf00      	nop
 8014aa8:	0801e090 	.word	0x0801e090
 8014aac:	0801defe 	.word	0x0801defe
 8014ab0:	0801df7e 	.word	0x0801df7e

08014ab4 <__lshift>:
 8014ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ab8:	460c      	mov	r4, r1
 8014aba:	6849      	ldr	r1, [r1, #4]
 8014abc:	6923      	ldr	r3, [r4, #16]
 8014abe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014ac2:	68a3      	ldr	r3, [r4, #8]
 8014ac4:	4607      	mov	r7, r0
 8014ac6:	4691      	mov	r9, r2
 8014ac8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014acc:	f108 0601 	add.w	r6, r8, #1
 8014ad0:	42b3      	cmp	r3, r6
 8014ad2:	db0b      	blt.n	8014aec <__lshift+0x38>
 8014ad4:	4638      	mov	r0, r7
 8014ad6:	f7ff fd9d 	bl	8014614 <_Balloc>
 8014ada:	4605      	mov	r5, r0
 8014adc:	b948      	cbnz	r0, 8014af2 <__lshift+0x3e>
 8014ade:	4602      	mov	r2, r0
 8014ae0:	4b28      	ldr	r3, [pc, #160]	@ (8014b84 <__lshift+0xd0>)
 8014ae2:	4829      	ldr	r0, [pc, #164]	@ (8014b88 <__lshift+0xd4>)
 8014ae4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014ae8:	f001 faca 	bl	8016080 <__assert_func>
 8014aec:	3101      	adds	r1, #1
 8014aee:	005b      	lsls	r3, r3, #1
 8014af0:	e7ee      	b.n	8014ad0 <__lshift+0x1c>
 8014af2:	2300      	movs	r3, #0
 8014af4:	f100 0114 	add.w	r1, r0, #20
 8014af8:	f100 0210 	add.w	r2, r0, #16
 8014afc:	4618      	mov	r0, r3
 8014afe:	4553      	cmp	r3, sl
 8014b00:	db33      	blt.n	8014b6a <__lshift+0xb6>
 8014b02:	6920      	ldr	r0, [r4, #16]
 8014b04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014b08:	f104 0314 	add.w	r3, r4, #20
 8014b0c:	f019 091f 	ands.w	r9, r9, #31
 8014b10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014b14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014b18:	d02b      	beq.n	8014b72 <__lshift+0xbe>
 8014b1a:	f1c9 0e20 	rsb	lr, r9, #32
 8014b1e:	468a      	mov	sl, r1
 8014b20:	2200      	movs	r2, #0
 8014b22:	6818      	ldr	r0, [r3, #0]
 8014b24:	fa00 f009 	lsl.w	r0, r0, r9
 8014b28:	4310      	orrs	r0, r2
 8014b2a:	f84a 0b04 	str.w	r0, [sl], #4
 8014b2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b32:	459c      	cmp	ip, r3
 8014b34:	fa22 f20e 	lsr.w	r2, r2, lr
 8014b38:	d8f3      	bhi.n	8014b22 <__lshift+0x6e>
 8014b3a:	ebac 0304 	sub.w	r3, ip, r4
 8014b3e:	3b15      	subs	r3, #21
 8014b40:	f023 0303 	bic.w	r3, r3, #3
 8014b44:	3304      	adds	r3, #4
 8014b46:	f104 0015 	add.w	r0, r4, #21
 8014b4a:	4560      	cmp	r0, ip
 8014b4c:	bf88      	it	hi
 8014b4e:	2304      	movhi	r3, #4
 8014b50:	50ca      	str	r2, [r1, r3]
 8014b52:	b10a      	cbz	r2, 8014b58 <__lshift+0xa4>
 8014b54:	f108 0602 	add.w	r6, r8, #2
 8014b58:	3e01      	subs	r6, #1
 8014b5a:	4638      	mov	r0, r7
 8014b5c:	612e      	str	r6, [r5, #16]
 8014b5e:	4621      	mov	r1, r4
 8014b60:	f7ff fd98 	bl	8014694 <_Bfree>
 8014b64:	4628      	mov	r0, r5
 8014b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8014b6e:	3301      	adds	r3, #1
 8014b70:	e7c5      	b.n	8014afe <__lshift+0x4a>
 8014b72:	3904      	subs	r1, #4
 8014b74:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b78:	f841 2f04 	str.w	r2, [r1, #4]!
 8014b7c:	459c      	cmp	ip, r3
 8014b7e:	d8f9      	bhi.n	8014b74 <__lshift+0xc0>
 8014b80:	e7ea      	b.n	8014b58 <__lshift+0xa4>
 8014b82:	bf00      	nop
 8014b84:	0801df6d 	.word	0x0801df6d
 8014b88:	0801df7e 	.word	0x0801df7e

08014b8c <__mcmp>:
 8014b8c:	690a      	ldr	r2, [r1, #16]
 8014b8e:	4603      	mov	r3, r0
 8014b90:	6900      	ldr	r0, [r0, #16]
 8014b92:	1a80      	subs	r0, r0, r2
 8014b94:	b530      	push	{r4, r5, lr}
 8014b96:	d10e      	bne.n	8014bb6 <__mcmp+0x2a>
 8014b98:	3314      	adds	r3, #20
 8014b9a:	3114      	adds	r1, #20
 8014b9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014ba0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014ba4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014ba8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014bac:	4295      	cmp	r5, r2
 8014bae:	d003      	beq.n	8014bb8 <__mcmp+0x2c>
 8014bb0:	d205      	bcs.n	8014bbe <__mcmp+0x32>
 8014bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8014bb6:	bd30      	pop	{r4, r5, pc}
 8014bb8:	42a3      	cmp	r3, r4
 8014bba:	d3f3      	bcc.n	8014ba4 <__mcmp+0x18>
 8014bbc:	e7fb      	b.n	8014bb6 <__mcmp+0x2a>
 8014bbe:	2001      	movs	r0, #1
 8014bc0:	e7f9      	b.n	8014bb6 <__mcmp+0x2a>
	...

08014bc4 <__mdiff>:
 8014bc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bc8:	4689      	mov	r9, r1
 8014bca:	4606      	mov	r6, r0
 8014bcc:	4611      	mov	r1, r2
 8014bce:	4648      	mov	r0, r9
 8014bd0:	4614      	mov	r4, r2
 8014bd2:	f7ff ffdb 	bl	8014b8c <__mcmp>
 8014bd6:	1e05      	subs	r5, r0, #0
 8014bd8:	d112      	bne.n	8014c00 <__mdiff+0x3c>
 8014bda:	4629      	mov	r1, r5
 8014bdc:	4630      	mov	r0, r6
 8014bde:	f7ff fd19 	bl	8014614 <_Balloc>
 8014be2:	4602      	mov	r2, r0
 8014be4:	b928      	cbnz	r0, 8014bf2 <__mdiff+0x2e>
 8014be6:	4b3f      	ldr	r3, [pc, #252]	@ (8014ce4 <__mdiff+0x120>)
 8014be8:	f240 2137 	movw	r1, #567	@ 0x237
 8014bec:	483e      	ldr	r0, [pc, #248]	@ (8014ce8 <__mdiff+0x124>)
 8014bee:	f001 fa47 	bl	8016080 <__assert_func>
 8014bf2:	2301      	movs	r3, #1
 8014bf4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014bf8:	4610      	mov	r0, r2
 8014bfa:	b003      	add	sp, #12
 8014bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c00:	bfbc      	itt	lt
 8014c02:	464b      	movlt	r3, r9
 8014c04:	46a1      	movlt	r9, r4
 8014c06:	4630      	mov	r0, r6
 8014c08:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014c0c:	bfba      	itte	lt
 8014c0e:	461c      	movlt	r4, r3
 8014c10:	2501      	movlt	r5, #1
 8014c12:	2500      	movge	r5, #0
 8014c14:	f7ff fcfe 	bl	8014614 <_Balloc>
 8014c18:	4602      	mov	r2, r0
 8014c1a:	b918      	cbnz	r0, 8014c24 <__mdiff+0x60>
 8014c1c:	4b31      	ldr	r3, [pc, #196]	@ (8014ce4 <__mdiff+0x120>)
 8014c1e:	f240 2145 	movw	r1, #581	@ 0x245
 8014c22:	e7e3      	b.n	8014bec <__mdiff+0x28>
 8014c24:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014c28:	6926      	ldr	r6, [r4, #16]
 8014c2a:	60c5      	str	r5, [r0, #12]
 8014c2c:	f109 0310 	add.w	r3, r9, #16
 8014c30:	f109 0514 	add.w	r5, r9, #20
 8014c34:	f104 0e14 	add.w	lr, r4, #20
 8014c38:	f100 0b14 	add.w	fp, r0, #20
 8014c3c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014c40:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014c44:	9301      	str	r3, [sp, #4]
 8014c46:	46d9      	mov	r9, fp
 8014c48:	f04f 0c00 	mov.w	ip, #0
 8014c4c:	9b01      	ldr	r3, [sp, #4]
 8014c4e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014c52:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014c56:	9301      	str	r3, [sp, #4]
 8014c58:	fa1f f38a 	uxth.w	r3, sl
 8014c5c:	4619      	mov	r1, r3
 8014c5e:	b283      	uxth	r3, r0
 8014c60:	1acb      	subs	r3, r1, r3
 8014c62:	0c00      	lsrs	r0, r0, #16
 8014c64:	4463      	add	r3, ip
 8014c66:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014c6a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014c6e:	b29b      	uxth	r3, r3
 8014c70:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014c74:	4576      	cmp	r6, lr
 8014c76:	f849 3b04 	str.w	r3, [r9], #4
 8014c7a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014c7e:	d8e5      	bhi.n	8014c4c <__mdiff+0x88>
 8014c80:	1b33      	subs	r3, r6, r4
 8014c82:	3b15      	subs	r3, #21
 8014c84:	f023 0303 	bic.w	r3, r3, #3
 8014c88:	3415      	adds	r4, #21
 8014c8a:	3304      	adds	r3, #4
 8014c8c:	42a6      	cmp	r6, r4
 8014c8e:	bf38      	it	cc
 8014c90:	2304      	movcc	r3, #4
 8014c92:	441d      	add	r5, r3
 8014c94:	445b      	add	r3, fp
 8014c96:	461e      	mov	r6, r3
 8014c98:	462c      	mov	r4, r5
 8014c9a:	4544      	cmp	r4, r8
 8014c9c:	d30e      	bcc.n	8014cbc <__mdiff+0xf8>
 8014c9e:	f108 0103 	add.w	r1, r8, #3
 8014ca2:	1b49      	subs	r1, r1, r5
 8014ca4:	f021 0103 	bic.w	r1, r1, #3
 8014ca8:	3d03      	subs	r5, #3
 8014caa:	45a8      	cmp	r8, r5
 8014cac:	bf38      	it	cc
 8014cae:	2100      	movcc	r1, #0
 8014cb0:	440b      	add	r3, r1
 8014cb2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014cb6:	b191      	cbz	r1, 8014cde <__mdiff+0x11a>
 8014cb8:	6117      	str	r7, [r2, #16]
 8014cba:	e79d      	b.n	8014bf8 <__mdiff+0x34>
 8014cbc:	f854 1b04 	ldr.w	r1, [r4], #4
 8014cc0:	46e6      	mov	lr, ip
 8014cc2:	0c08      	lsrs	r0, r1, #16
 8014cc4:	fa1c fc81 	uxtah	ip, ip, r1
 8014cc8:	4471      	add	r1, lr
 8014cca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014cce:	b289      	uxth	r1, r1
 8014cd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014cd4:	f846 1b04 	str.w	r1, [r6], #4
 8014cd8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014cdc:	e7dd      	b.n	8014c9a <__mdiff+0xd6>
 8014cde:	3f01      	subs	r7, #1
 8014ce0:	e7e7      	b.n	8014cb2 <__mdiff+0xee>
 8014ce2:	bf00      	nop
 8014ce4:	0801df6d 	.word	0x0801df6d
 8014ce8:	0801df7e 	.word	0x0801df7e

08014cec <__ulp>:
 8014cec:	b082      	sub	sp, #8
 8014cee:	ed8d 0b00 	vstr	d0, [sp]
 8014cf2:	9a01      	ldr	r2, [sp, #4]
 8014cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8014d34 <__ulp+0x48>)
 8014cf6:	4013      	ands	r3, r2
 8014cf8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	dc08      	bgt.n	8014d12 <__ulp+0x26>
 8014d00:	425b      	negs	r3, r3
 8014d02:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8014d06:	ea4f 5223 	mov.w	r2, r3, asr #20
 8014d0a:	da04      	bge.n	8014d16 <__ulp+0x2a>
 8014d0c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8014d10:	4113      	asrs	r3, r2
 8014d12:	2200      	movs	r2, #0
 8014d14:	e008      	b.n	8014d28 <__ulp+0x3c>
 8014d16:	f1a2 0314 	sub.w	r3, r2, #20
 8014d1a:	2b1e      	cmp	r3, #30
 8014d1c:	bfda      	itte	le
 8014d1e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8014d22:	40da      	lsrle	r2, r3
 8014d24:	2201      	movgt	r2, #1
 8014d26:	2300      	movs	r3, #0
 8014d28:	4619      	mov	r1, r3
 8014d2a:	4610      	mov	r0, r2
 8014d2c:	ec41 0b10 	vmov	d0, r0, r1
 8014d30:	b002      	add	sp, #8
 8014d32:	4770      	bx	lr
 8014d34:	7ff00000 	.word	0x7ff00000

08014d38 <__b2d>:
 8014d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d3c:	6906      	ldr	r6, [r0, #16]
 8014d3e:	f100 0814 	add.w	r8, r0, #20
 8014d42:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8014d46:	1f37      	subs	r7, r6, #4
 8014d48:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014d4c:	4610      	mov	r0, r2
 8014d4e:	f7ff fd53 	bl	80147f8 <__hi0bits>
 8014d52:	f1c0 0320 	rsb	r3, r0, #32
 8014d56:	280a      	cmp	r0, #10
 8014d58:	600b      	str	r3, [r1, #0]
 8014d5a:	491b      	ldr	r1, [pc, #108]	@ (8014dc8 <__b2d+0x90>)
 8014d5c:	dc15      	bgt.n	8014d8a <__b2d+0x52>
 8014d5e:	f1c0 0c0b 	rsb	ip, r0, #11
 8014d62:	fa22 f30c 	lsr.w	r3, r2, ip
 8014d66:	45b8      	cmp	r8, r7
 8014d68:	ea43 0501 	orr.w	r5, r3, r1
 8014d6c:	bf34      	ite	cc
 8014d6e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014d72:	2300      	movcs	r3, #0
 8014d74:	3015      	adds	r0, #21
 8014d76:	fa02 f000 	lsl.w	r0, r2, r0
 8014d7a:	fa23 f30c 	lsr.w	r3, r3, ip
 8014d7e:	4303      	orrs	r3, r0
 8014d80:	461c      	mov	r4, r3
 8014d82:	ec45 4b10 	vmov	d0, r4, r5
 8014d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d8a:	45b8      	cmp	r8, r7
 8014d8c:	bf3a      	itte	cc
 8014d8e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014d92:	f1a6 0708 	subcc.w	r7, r6, #8
 8014d96:	2300      	movcs	r3, #0
 8014d98:	380b      	subs	r0, #11
 8014d9a:	d012      	beq.n	8014dc2 <__b2d+0x8a>
 8014d9c:	f1c0 0120 	rsb	r1, r0, #32
 8014da0:	fa23 f401 	lsr.w	r4, r3, r1
 8014da4:	4082      	lsls	r2, r0
 8014da6:	4322      	orrs	r2, r4
 8014da8:	4547      	cmp	r7, r8
 8014daa:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8014dae:	bf8c      	ite	hi
 8014db0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8014db4:	2200      	movls	r2, #0
 8014db6:	4083      	lsls	r3, r0
 8014db8:	40ca      	lsrs	r2, r1
 8014dba:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8014dbe:	4313      	orrs	r3, r2
 8014dc0:	e7de      	b.n	8014d80 <__b2d+0x48>
 8014dc2:	ea42 0501 	orr.w	r5, r2, r1
 8014dc6:	e7db      	b.n	8014d80 <__b2d+0x48>
 8014dc8:	3ff00000 	.word	0x3ff00000

08014dcc <__d2b>:
 8014dcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014dd0:	460f      	mov	r7, r1
 8014dd2:	2101      	movs	r1, #1
 8014dd4:	ec59 8b10 	vmov	r8, r9, d0
 8014dd8:	4616      	mov	r6, r2
 8014dda:	f7ff fc1b 	bl	8014614 <_Balloc>
 8014dde:	4604      	mov	r4, r0
 8014de0:	b930      	cbnz	r0, 8014df0 <__d2b+0x24>
 8014de2:	4602      	mov	r2, r0
 8014de4:	4b23      	ldr	r3, [pc, #140]	@ (8014e74 <__d2b+0xa8>)
 8014de6:	4824      	ldr	r0, [pc, #144]	@ (8014e78 <__d2b+0xac>)
 8014de8:	f240 310f 	movw	r1, #783	@ 0x30f
 8014dec:	f001 f948 	bl	8016080 <__assert_func>
 8014df0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014df4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014df8:	b10d      	cbz	r5, 8014dfe <__d2b+0x32>
 8014dfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014dfe:	9301      	str	r3, [sp, #4]
 8014e00:	f1b8 0300 	subs.w	r3, r8, #0
 8014e04:	d023      	beq.n	8014e4e <__d2b+0x82>
 8014e06:	4668      	mov	r0, sp
 8014e08:	9300      	str	r3, [sp, #0]
 8014e0a:	f7ff fd14 	bl	8014836 <__lo0bits>
 8014e0e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014e12:	b1d0      	cbz	r0, 8014e4a <__d2b+0x7e>
 8014e14:	f1c0 0320 	rsb	r3, r0, #32
 8014e18:	fa02 f303 	lsl.w	r3, r2, r3
 8014e1c:	430b      	orrs	r3, r1
 8014e1e:	40c2      	lsrs	r2, r0
 8014e20:	6163      	str	r3, [r4, #20]
 8014e22:	9201      	str	r2, [sp, #4]
 8014e24:	9b01      	ldr	r3, [sp, #4]
 8014e26:	61a3      	str	r3, [r4, #24]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	bf0c      	ite	eq
 8014e2c:	2201      	moveq	r2, #1
 8014e2e:	2202      	movne	r2, #2
 8014e30:	6122      	str	r2, [r4, #16]
 8014e32:	b1a5      	cbz	r5, 8014e5e <__d2b+0x92>
 8014e34:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014e38:	4405      	add	r5, r0
 8014e3a:	603d      	str	r5, [r7, #0]
 8014e3c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014e40:	6030      	str	r0, [r6, #0]
 8014e42:	4620      	mov	r0, r4
 8014e44:	b003      	add	sp, #12
 8014e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e4a:	6161      	str	r1, [r4, #20]
 8014e4c:	e7ea      	b.n	8014e24 <__d2b+0x58>
 8014e4e:	a801      	add	r0, sp, #4
 8014e50:	f7ff fcf1 	bl	8014836 <__lo0bits>
 8014e54:	9b01      	ldr	r3, [sp, #4]
 8014e56:	6163      	str	r3, [r4, #20]
 8014e58:	3020      	adds	r0, #32
 8014e5a:	2201      	movs	r2, #1
 8014e5c:	e7e8      	b.n	8014e30 <__d2b+0x64>
 8014e5e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014e62:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8014e66:	6038      	str	r0, [r7, #0]
 8014e68:	6918      	ldr	r0, [r3, #16]
 8014e6a:	f7ff fcc5 	bl	80147f8 <__hi0bits>
 8014e6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014e72:	e7e5      	b.n	8014e40 <__d2b+0x74>
 8014e74:	0801df6d 	.word	0x0801df6d
 8014e78:	0801df7e 	.word	0x0801df7e

08014e7c <__ratio>:
 8014e7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e80:	4688      	mov	r8, r1
 8014e82:	4669      	mov	r1, sp
 8014e84:	4681      	mov	r9, r0
 8014e86:	f7ff ff57 	bl	8014d38 <__b2d>
 8014e8a:	a901      	add	r1, sp, #4
 8014e8c:	4640      	mov	r0, r8
 8014e8e:	ec55 4b10 	vmov	r4, r5, d0
 8014e92:	f7ff ff51 	bl	8014d38 <__b2d>
 8014e96:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014e9a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8014e9e:	1ad2      	subs	r2, r2, r3
 8014ea0:	e9dd 3100 	ldrd	r3, r1, [sp]
 8014ea4:	1a5b      	subs	r3, r3, r1
 8014ea6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8014eaa:	ec57 6b10 	vmov	r6, r7, d0
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	bfd6      	itet	le
 8014eb2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014eb6:	462a      	movgt	r2, r5
 8014eb8:	463a      	movle	r2, r7
 8014eba:	46ab      	mov	fp, r5
 8014ebc:	46a2      	mov	sl, r4
 8014ebe:	bfce      	itee	gt
 8014ec0:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8014ec4:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8014ec8:	ee00 3a90 	vmovle	s1, r3
 8014ecc:	ec4b ab17 	vmov	d7, sl, fp
 8014ed0:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8014ed4:	b003      	add	sp, #12
 8014ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014eda <__copybits>:
 8014eda:	3901      	subs	r1, #1
 8014edc:	b570      	push	{r4, r5, r6, lr}
 8014ede:	1149      	asrs	r1, r1, #5
 8014ee0:	6914      	ldr	r4, [r2, #16]
 8014ee2:	3101      	adds	r1, #1
 8014ee4:	f102 0314 	add.w	r3, r2, #20
 8014ee8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014eec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014ef0:	1f05      	subs	r5, r0, #4
 8014ef2:	42a3      	cmp	r3, r4
 8014ef4:	d30c      	bcc.n	8014f10 <__copybits+0x36>
 8014ef6:	1aa3      	subs	r3, r4, r2
 8014ef8:	3b11      	subs	r3, #17
 8014efa:	f023 0303 	bic.w	r3, r3, #3
 8014efe:	3211      	adds	r2, #17
 8014f00:	42a2      	cmp	r2, r4
 8014f02:	bf88      	it	hi
 8014f04:	2300      	movhi	r3, #0
 8014f06:	4418      	add	r0, r3
 8014f08:	2300      	movs	r3, #0
 8014f0a:	4288      	cmp	r0, r1
 8014f0c:	d305      	bcc.n	8014f1a <__copybits+0x40>
 8014f0e:	bd70      	pop	{r4, r5, r6, pc}
 8014f10:	f853 6b04 	ldr.w	r6, [r3], #4
 8014f14:	f845 6f04 	str.w	r6, [r5, #4]!
 8014f18:	e7eb      	b.n	8014ef2 <__copybits+0x18>
 8014f1a:	f840 3b04 	str.w	r3, [r0], #4
 8014f1e:	e7f4      	b.n	8014f0a <__copybits+0x30>

08014f20 <__any_on>:
 8014f20:	f100 0214 	add.w	r2, r0, #20
 8014f24:	6900      	ldr	r0, [r0, #16]
 8014f26:	114b      	asrs	r3, r1, #5
 8014f28:	4298      	cmp	r0, r3
 8014f2a:	b510      	push	{r4, lr}
 8014f2c:	db11      	blt.n	8014f52 <__any_on+0x32>
 8014f2e:	dd0a      	ble.n	8014f46 <__any_on+0x26>
 8014f30:	f011 011f 	ands.w	r1, r1, #31
 8014f34:	d007      	beq.n	8014f46 <__any_on+0x26>
 8014f36:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014f3a:	fa24 f001 	lsr.w	r0, r4, r1
 8014f3e:	fa00 f101 	lsl.w	r1, r0, r1
 8014f42:	428c      	cmp	r4, r1
 8014f44:	d10b      	bne.n	8014f5e <__any_on+0x3e>
 8014f46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014f4a:	4293      	cmp	r3, r2
 8014f4c:	d803      	bhi.n	8014f56 <__any_on+0x36>
 8014f4e:	2000      	movs	r0, #0
 8014f50:	bd10      	pop	{r4, pc}
 8014f52:	4603      	mov	r3, r0
 8014f54:	e7f7      	b.n	8014f46 <__any_on+0x26>
 8014f56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014f5a:	2900      	cmp	r1, #0
 8014f5c:	d0f5      	beq.n	8014f4a <__any_on+0x2a>
 8014f5e:	2001      	movs	r0, #1
 8014f60:	e7f6      	b.n	8014f50 <__any_on+0x30>

08014f62 <sulp>:
 8014f62:	b570      	push	{r4, r5, r6, lr}
 8014f64:	4604      	mov	r4, r0
 8014f66:	460d      	mov	r5, r1
 8014f68:	4616      	mov	r6, r2
 8014f6a:	ec45 4b10 	vmov	d0, r4, r5
 8014f6e:	f7ff febd 	bl	8014cec <__ulp>
 8014f72:	b17e      	cbz	r6, 8014f94 <sulp+0x32>
 8014f74:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014f78:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	dd09      	ble.n	8014f94 <sulp+0x32>
 8014f80:	051b      	lsls	r3, r3, #20
 8014f82:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8014f86:	2000      	movs	r0, #0
 8014f88:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8014f8c:	ec41 0b17 	vmov	d7, r0, r1
 8014f90:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014f94:	bd70      	pop	{r4, r5, r6, pc}
	...

08014f98 <_strtod_l>:
 8014f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f9c:	ed2d 8b0a 	vpush	{d8-d12}
 8014fa0:	b097      	sub	sp, #92	@ 0x5c
 8014fa2:	4688      	mov	r8, r1
 8014fa4:	920e      	str	r2, [sp, #56]	@ 0x38
 8014fa6:	2200      	movs	r2, #0
 8014fa8:	9212      	str	r2, [sp, #72]	@ 0x48
 8014faa:	9005      	str	r0, [sp, #20]
 8014fac:	f04f 0a00 	mov.w	sl, #0
 8014fb0:	f04f 0b00 	mov.w	fp, #0
 8014fb4:	460a      	mov	r2, r1
 8014fb6:	9211      	str	r2, [sp, #68]	@ 0x44
 8014fb8:	7811      	ldrb	r1, [r2, #0]
 8014fba:	292b      	cmp	r1, #43	@ 0x2b
 8014fbc:	d04c      	beq.n	8015058 <_strtod_l+0xc0>
 8014fbe:	d839      	bhi.n	8015034 <_strtod_l+0x9c>
 8014fc0:	290d      	cmp	r1, #13
 8014fc2:	d833      	bhi.n	801502c <_strtod_l+0x94>
 8014fc4:	2908      	cmp	r1, #8
 8014fc6:	d833      	bhi.n	8015030 <_strtod_l+0x98>
 8014fc8:	2900      	cmp	r1, #0
 8014fca:	d03c      	beq.n	8015046 <_strtod_l+0xae>
 8014fcc:	2200      	movs	r2, #0
 8014fce:	9208      	str	r2, [sp, #32]
 8014fd0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8014fd2:	782a      	ldrb	r2, [r5, #0]
 8014fd4:	2a30      	cmp	r2, #48	@ 0x30
 8014fd6:	f040 80b7 	bne.w	8015148 <_strtod_l+0x1b0>
 8014fda:	786a      	ldrb	r2, [r5, #1]
 8014fdc:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8014fe0:	2a58      	cmp	r2, #88	@ 0x58
 8014fe2:	d170      	bne.n	80150c6 <_strtod_l+0x12e>
 8014fe4:	9302      	str	r3, [sp, #8]
 8014fe6:	9b08      	ldr	r3, [sp, #32]
 8014fe8:	9301      	str	r3, [sp, #4]
 8014fea:	ab12      	add	r3, sp, #72	@ 0x48
 8014fec:	9300      	str	r3, [sp, #0]
 8014fee:	4a90      	ldr	r2, [pc, #576]	@ (8015230 <_strtod_l+0x298>)
 8014ff0:	9805      	ldr	r0, [sp, #20]
 8014ff2:	ab13      	add	r3, sp, #76	@ 0x4c
 8014ff4:	a911      	add	r1, sp, #68	@ 0x44
 8014ff6:	f001 f8dd 	bl	80161b4 <__gethex>
 8014ffa:	f010 060f 	ands.w	r6, r0, #15
 8014ffe:	4604      	mov	r4, r0
 8015000:	d005      	beq.n	801500e <_strtod_l+0x76>
 8015002:	2e06      	cmp	r6, #6
 8015004:	d12a      	bne.n	801505c <_strtod_l+0xc4>
 8015006:	3501      	adds	r5, #1
 8015008:	2300      	movs	r3, #0
 801500a:	9511      	str	r5, [sp, #68]	@ 0x44
 801500c:	9308      	str	r3, [sp, #32]
 801500e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015010:	2b00      	cmp	r3, #0
 8015012:	f040 8537 	bne.w	8015a84 <_strtod_l+0xaec>
 8015016:	9b08      	ldr	r3, [sp, #32]
 8015018:	ec4b ab10 	vmov	d0, sl, fp
 801501c:	b1cb      	cbz	r3, 8015052 <_strtod_l+0xba>
 801501e:	eeb1 0b40 	vneg.f64	d0, d0
 8015022:	b017      	add	sp, #92	@ 0x5c
 8015024:	ecbd 8b0a 	vpop	{d8-d12}
 8015028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801502c:	2920      	cmp	r1, #32
 801502e:	d1cd      	bne.n	8014fcc <_strtod_l+0x34>
 8015030:	3201      	adds	r2, #1
 8015032:	e7c0      	b.n	8014fb6 <_strtod_l+0x1e>
 8015034:	292d      	cmp	r1, #45	@ 0x2d
 8015036:	d1c9      	bne.n	8014fcc <_strtod_l+0x34>
 8015038:	2101      	movs	r1, #1
 801503a:	9108      	str	r1, [sp, #32]
 801503c:	1c51      	adds	r1, r2, #1
 801503e:	9111      	str	r1, [sp, #68]	@ 0x44
 8015040:	7852      	ldrb	r2, [r2, #1]
 8015042:	2a00      	cmp	r2, #0
 8015044:	d1c4      	bne.n	8014fd0 <_strtod_l+0x38>
 8015046:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015048:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 801504c:	2b00      	cmp	r3, #0
 801504e:	f040 8517 	bne.w	8015a80 <_strtod_l+0xae8>
 8015052:	ec4b ab10 	vmov	d0, sl, fp
 8015056:	e7e4      	b.n	8015022 <_strtod_l+0x8a>
 8015058:	2100      	movs	r1, #0
 801505a:	e7ee      	b.n	801503a <_strtod_l+0xa2>
 801505c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801505e:	b13a      	cbz	r2, 8015070 <_strtod_l+0xd8>
 8015060:	2135      	movs	r1, #53	@ 0x35
 8015062:	a814      	add	r0, sp, #80	@ 0x50
 8015064:	f7ff ff39 	bl	8014eda <__copybits>
 8015068:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801506a:	9805      	ldr	r0, [sp, #20]
 801506c:	f7ff fb12 	bl	8014694 <_Bfree>
 8015070:	1e73      	subs	r3, r6, #1
 8015072:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015074:	2b04      	cmp	r3, #4
 8015076:	d806      	bhi.n	8015086 <_strtod_l+0xee>
 8015078:	e8df f003 	tbb	[pc, r3]
 801507c:	201d0314 	.word	0x201d0314
 8015080:	14          	.byte	0x14
 8015081:	00          	.byte	0x00
 8015082:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8015086:	05e3      	lsls	r3, r4, #23
 8015088:	bf48      	it	mi
 801508a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801508e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015092:	0d1b      	lsrs	r3, r3, #20
 8015094:	051b      	lsls	r3, r3, #20
 8015096:	2b00      	cmp	r3, #0
 8015098:	d1b9      	bne.n	801500e <_strtod_l+0x76>
 801509a:	f7fe fb9f 	bl	80137dc <__errno>
 801509e:	2322      	movs	r3, #34	@ 0x22
 80150a0:	6003      	str	r3, [r0, #0]
 80150a2:	e7b4      	b.n	801500e <_strtod_l+0x76>
 80150a4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 80150a8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80150ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80150b0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80150b4:	e7e7      	b.n	8015086 <_strtod_l+0xee>
 80150b6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8015238 <_strtod_l+0x2a0>
 80150ba:	e7e4      	b.n	8015086 <_strtod_l+0xee>
 80150bc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80150c0:	f04f 3aff 	mov.w	sl, #4294967295
 80150c4:	e7df      	b.n	8015086 <_strtod_l+0xee>
 80150c6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80150c8:	1c5a      	adds	r2, r3, #1
 80150ca:	9211      	str	r2, [sp, #68]	@ 0x44
 80150cc:	785b      	ldrb	r3, [r3, #1]
 80150ce:	2b30      	cmp	r3, #48	@ 0x30
 80150d0:	d0f9      	beq.n	80150c6 <_strtod_l+0x12e>
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d09b      	beq.n	801500e <_strtod_l+0x76>
 80150d6:	2301      	movs	r3, #1
 80150d8:	9307      	str	r3, [sp, #28]
 80150da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80150dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80150de:	2300      	movs	r3, #0
 80150e0:	9306      	str	r3, [sp, #24]
 80150e2:	4699      	mov	r9, r3
 80150e4:	461d      	mov	r5, r3
 80150e6:	220a      	movs	r2, #10
 80150e8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80150ea:	7804      	ldrb	r4, [r0, #0]
 80150ec:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80150f0:	b2d9      	uxtb	r1, r3
 80150f2:	2909      	cmp	r1, #9
 80150f4:	d92a      	bls.n	801514c <_strtod_l+0x1b4>
 80150f6:	494f      	ldr	r1, [pc, #316]	@ (8015234 <_strtod_l+0x29c>)
 80150f8:	2201      	movs	r2, #1
 80150fa:	f000 ff87 	bl	801600c <strncmp>
 80150fe:	b398      	cbz	r0, 8015168 <_strtod_l+0x1d0>
 8015100:	2000      	movs	r0, #0
 8015102:	4622      	mov	r2, r4
 8015104:	462b      	mov	r3, r5
 8015106:	4607      	mov	r7, r0
 8015108:	4601      	mov	r1, r0
 801510a:	2a65      	cmp	r2, #101	@ 0x65
 801510c:	d001      	beq.n	8015112 <_strtod_l+0x17a>
 801510e:	2a45      	cmp	r2, #69	@ 0x45
 8015110:	d118      	bne.n	8015144 <_strtod_l+0x1ac>
 8015112:	b91b      	cbnz	r3, 801511c <_strtod_l+0x184>
 8015114:	9b07      	ldr	r3, [sp, #28]
 8015116:	4303      	orrs	r3, r0
 8015118:	d095      	beq.n	8015046 <_strtod_l+0xae>
 801511a:	2300      	movs	r3, #0
 801511c:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8015120:	f108 0201 	add.w	r2, r8, #1
 8015124:	9211      	str	r2, [sp, #68]	@ 0x44
 8015126:	f898 2001 	ldrb.w	r2, [r8, #1]
 801512a:	2a2b      	cmp	r2, #43	@ 0x2b
 801512c:	d074      	beq.n	8015218 <_strtod_l+0x280>
 801512e:	2a2d      	cmp	r2, #45	@ 0x2d
 8015130:	d07a      	beq.n	8015228 <_strtod_l+0x290>
 8015132:	f04f 0e00 	mov.w	lr, #0
 8015136:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 801513a:	2c09      	cmp	r4, #9
 801513c:	f240 8082 	bls.w	8015244 <_strtod_l+0x2ac>
 8015140:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8015144:	2400      	movs	r4, #0
 8015146:	e09d      	b.n	8015284 <_strtod_l+0x2ec>
 8015148:	2300      	movs	r3, #0
 801514a:	e7c5      	b.n	80150d8 <_strtod_l+0x140>
 801514c:	2d08      	cmp	r5, #8
 801514e:	bfc8      	it	gt
 8015150:	9906      	ldrgt	r1, [sp, #24]
 8015152:	f100 0001 	add.w	r0, r0, #1
 8015156:	bfca      	itet	gt
 8015158:	fb02 3301 	mlagt	r3, r2, r1, r3
 801515c:	fb02 3909 	mlale	r9, r2, r9, r3
 8015160:	9306      	strgt	r3, [sp, #24]
 8015162:	3501      	adds	r5, #1
 8015164:	9011      	str	r0, [sp, #68]	@ 0x44
 8015166:	e7bf      	b.n	80150e8 <_strtod_l+0x150>
 8015168:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801516a:	1c5a      	adds	r2, r3, #1
 801516c:	9211      	str	r2, [sp, #68]	@ 0x44
 801516e:	785a      	ldrb	r2, [r3, #1]
 8015170:	b3bd      	cbz	r5, 80151e2 <_strtod_l+0x24a>
 8015172:	4607      	mov	r7, r0
 8015174:	462b      	mov	r3, r5
 8015176:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801517a:	2909      	cmp	r1, #9
 801517c:	d912      	bls.n	80151a4 <_strtod_l+0x20c>
 801517e:	2101      	movs	r1, #1
 8015180:	e7c3      	b.n	801510a <_strtod_l+0x172>
 8015182:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015184:	1c5a      	adds	r2, r3, #1
 8015186:	9211      	str	r2, [sp, #68]	@ 0x44
 8015188:	785a      	ldrb	r2, [r3, #1]
 801518a:	3001      	adds	r0, #1
 801518c:	2a30      	cmp	r2, #48	@ 0x30
 801518e:	d0f8      	beq.n	8015182 <_strtod_l+0x1ea>
 8015190:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8015194:	2b08      	cmp	r3, #8
 8015196:	f200 847a 	bhi.w	8015a8e <_strtod_l+0xaf6>
 801519a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801519c:	930a      	str	r3, [sp, #40]	@ 0x28
 801519e:	4607      	mov	r7, r0
 80151a0:	2000      	movs	r0, #0
 80151a2:	4603      	mov	r3, r0
 80151a4:	3a30      	subs	r2, #48	@ 0x30
 80151a6:	f100 0101 	add.w	r1, r0, #1
 80151aa:	d014      	beq.n	80151d6 <_strtod_l+0x23e>
 80151ac:	440f      	add	r7, r1
 80151ae:	469c      	mov	ip, r3
 80151b0:	f04f 0e0a 	mov.w	lr, #10
 80151b4:	f10c 0401 	add.w	r4, ip, #1
 80151b8:	1ae6      	subs	r6, r4, r3
 80151ba:	42b1      	cmp	r1, r6
 80151bc:	dc13      	bgt.n	80151e6 <_strtod_l+0x24e>
 80151be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80151c2:	1819      	adds	r1, r3, r0
 80151c4:	2908      	cmp	r1, #8
 80151c6:	f103 0301 	add.w	r3, r3, #1
 80151ca:	4403      	add	r3, r0
 80151cc:	dc19      	bgt.n	8015202 <_strtod_l+0x26a>
 80151ce:	210a      	movs	r1, #10
 80151d0:	fb01 2909 	mla	r9, r1, r9, r2
 80151d4:	2100      	movs	r1, #0
 80151d6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80151d8:	1c50      	adds	r0, r2, #1
 80151da:	9011      	str	r0, [sp, #68]	@ 0x44
 80151dc:	7852      	ldrb	r2, [r2, #1]
 80151de:	4608      	mov	r0, r1
 80151e0:	e7c9      	b.n	8015176 <_strtod_l+0x1de>
 80151e2:	4628      	mov	r0, r5
 80151e4:	e7d2      	b.n	801518c <_strtod_l+0x1f4>
 80151e6:	f1bc 0f08 	cmp.w	ip, #8
 80151ea:	dc03      	bgt.n	80151f4 <_strtod_l+0x25c>
 80151ec:	fb0e f909 	mul.w	r9, lr, r9
 80151f0:	46a4      	mov	ip, r4
 80151f2:	e7df      	b.n	80151b4 <_strtod_l+0x21c>
 80151f4:	2c10      	cmp	r4, #16
 80151f6:	bfde      	ittt	le
 80151f8:	9e06      	ldrle	r6, [sp, #24]
 80151fa:	fb0e f606 	mulle.w	r6, lr, r6
 80151fe:	9606      	strle	r6, [sp, #24]
 8015200:	e7f6      	b.n	80151f0 <_strtod_l+0x258>
 8015202:	290f      	cmp	r1, #15
 8015204:	bfdf      	itttt	le
 8015206:	9806      	ldrle	r0, [sp, #24]
 8015208:	210a      	movle	r1, #10
 801520a:	fb01 2200 	mlale	r2, r1, r0, r2
 801520e:	9206      	strle	r2, [sp, #24]
 8015210:	e7e0      	b.n	80151d4 <_strtod_l+0x23c>
 8015212:	2700      	movs	r7, #0
 8015214:	2101      	movs	r1, #1
 8015216:	e77d      	b.n	8015114 <_strtod_l+0x17c>
 8015218:	f04f 0e00 	mov.w	lr, #0
 801521c:	f108 0202 	add.w	r2, r8, #2
 8015220:	9211      	str	r2, [sp, #68]	@ 0x44
 8015222:	f898 2002 	ldrb.w	r2, [r8, #2]
 8015226:	e786      	b.n	8015136 <_strtod_l+0x19e>
 8015228:	f04f 0e01 	mov.w	lr, #1
 801522c:	e7f6      	b.n	801521c <_strtod_l+0x284>
 801522e:	bf00      	nop
 8015230:	0801e1a4 	.word	0x0801e1a4
 8015234:	0801dfd7 	.word	0x0801dfd7
 8015238:	7ff00000 	.word	0x7ff00000
 801523c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801523e:	1c54      	adds	r4, r2, #1
 8015240:	9411      	str	r4, [sp, #68]	@ 0x44
 8015242:	7852      	ldrb	r2, [r2, #1]
 8015244:	2a30      	cmp	r2, #48	@ 0x30
 8015246:	d0f9      	beq.n	801523c <_strtod_l+0x2a4>
 8015248:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 801524c:	2c08      	cmp	r4, #8
 801524e:	f63f af79 	bhi.w	8015144 <_strtod_l+0x1ac>
 8015252:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8015256:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015258:	9209      	str	r2, [sp, #36]	@ 0x24
 801525a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801525c:	1c54      	adds	r4, r2, #1
 801525e:	9411      	str	r4, [sp, #68]	@ 0x44
 8015260:	7852      	ldrb	r2, [r2, #1]
 8015262:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 8015266:	2e09      	cmp	r6, #9
 8015268:	d937      	bls.n	80152da <_strtod_l+0x342>
 801526a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801526c:	1ba4      	subs	r4, r4, r6
 801526e:	2c08      	cmp	r4, #8
 8015270:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8015274:	dc02      	bgt.n	801527c <_strtod_l+0x2e4>
 8015276:	4564      	cmp	r4, ip
 8015278:	bfa8      	it	ge
 801527a:	4664      	movge	r4, ip
 801527c:	f1be 0f00 	cmp.w	lr, #0
 8015280:	d000      	beq.n	8015284 <_strtod_l+0x2ec>
 8015282:	4264      	negs	r4, r4
 8015284:	2b00      	cmp	r3, #0
 8015286:	d14d      	bne.n	8015324 <_strtod_l+0x38c>
 8015288:	9b07      	ldr	r3, [sp, #28]
 801528a:	4318      	orrs	r0, r3
 801528c:	f47f aebf 	bne.w	801500e <_strtod_l+0x76>
 8015290:	2900      	cmp	r1, #0
 8015292:	f47f aed8 	bne.w	8015046 <_strtod_l+0xae>
 8015296:	2a69      	cmp	r2, #105	@ 0x69
 8015298:	d027      	beq.n	80152ea <_strtod_l+0x352>
 801529a:	dc24      	bgt.n	80152e6 <_strtod_l+0x34e>
 801529c:	2a49      	cmp	r2, #73	@ 0x49
 801529e:	d024      	beq.n	80152ea <_strtod_l+0x352>
 80152a0:	2a4e      	cmp	r2, #78	@ 0x4e
 80152a2:	f47f aed0 	bne.w	8015046 <_strtod_l+0xae>
 80152a6:	4997      	ldr	r1, [pc, #604]	@ (8015504 <_strtod_l+0x56c>)
 80152a8:	a811      	add	r0, sp, #68	@ 0x44
 80152aa:	f001 f9a5 	bl	80165f8 <__match>
 80152ae:	2800      	cmp	r0, #0
 80152b0:	f43f aec9 	beq.w	8015046 <_strtod_l+0xae>
 80152b4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80152b6:	781b      	ldrb	r3, [r3, #0]
 80152b8:	2b28      	cmp	r3, #40	@ 0x28
 80152ba:	d12d      	bne.n	8015318 <_strtod_l+0x380>
 80152bc:	4992      	ldr	r1, [pc, #584]	@ (8015508 <_strtod_l+0x570>)
 80152be:	aa14      	add	r2, sp, #80	@ 0x50
 80152c0:	a811      	add	r0, sp, #68	@ 0x44
 80152c2:	f001 f9ad 	bl	8016620 <__hexnan>
 80152c6:	2805      	cmp	r0, #5
 80152c8:	d126      	bne.n	8015318 <_strtod_l+0x380>
 80152ca:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80152cc:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 80152d0:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80152d4:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80152d8:	e699      	b.n	801500e <_strtod_l+0x76>
 80152da:	240a      	movs	r4, #10
 80152dc:	fb04 2c0c 	mla	ip, r4, ip, r2
 80152e0:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 80152e4:	e7b9      	b.n	801525a <_strtod_l+0x2c2>
 80152e6:	2a6e      	cmp	r2, #110	@ 0x6e
 80152e8:	e7db      	b.n	80152a2 <_strtod_l+0x30a>
 80152ea:	4988      	ldr	r1, [pc, #544]	@ (801550c <_strtod_l+0x574>)
 80152ec:	a811      	add	r0, sp, #68	@ 0x44
 80152ee:	f001 f983 	bl	80165f8 <__match>
 80152f2:	2800      	cmp	r0, #0
 80152f4:	f43f aea7 	beq.w	8015046 <_strtod_l+0xae>
 80152f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80152fa:	4985      	ldr	r1, [pc, #532]	@ (8015510 <_strtod_l+0x578>)
 80152fc:	3b01      	subs	r3, #1
 80152fe:	a811      	add	r0, sp, #68	@ 0x44
 8015300:	9311      	str	r3, [sp, #68]	@ 0x44
 8015302:	f001 f979 	bl	80165f8 <__match>
 8015306:	b910      	cbnz	r0, 801530e <_strtod_l+0x376>
 8015308:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801530a:	3301      	adds	r3, #1
 801530c:	9311      	str	r3, [sp, #68]	@ 0x44
 801530e:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8015524 <_strtod_l+0x58c>
 8015312:	f04f 0a00 	mov.w	sl, #0
 8015316:	e67a      	b.n	801500e <_strtod_l+0x76>
 8015318:	487e      	ldr	r0, [pc, #504]	@ (8015514 <_strtod_l+0x57c>)
 801531a:	f000 fea9 	bl	8016070 <nan>
 801531e:	ec5b ab10 	vmov	sl, fp, d0
 8015322:	e674      	b.n	801500e <_strtod_l+0x76>
 8015324:	ee07 9a90 	vmov	s15, r9
 8015328:	1be2      	subs	r2, r4, r7
 801532a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801532e:	2d00      	cmp	r5, #0
 8015330:	bf08      	it	eq
 8015332:	461d      	moveq	r5, r3
 8015334:	2b10      	cmp	r3, #16
 8015336:	9209      	str	r2, [sp, #36]	@ 0x24
 8015338:	461a      	mov	r2, r3
 801533a:	bfa8      	it	ge
 801533c:	2210      	movge	r2, #16
 801533e:	2b09      	cmp	r3, #9
 8015340:	ec5b ab17 	vmov	sl, fp, d7
 8015344:	dc15      	bgt.n	8015372 <_strtod_l+0x3da>
 8015346:	1be1      	subs	r1, r4, r7
 8015348:	2900      	cmp	r1, #0
 801534a:	f43f ae60 	beq.w	801500e <_strtod_l+0x76>
 801534e:	eba4 0107 	sub.w	r1, r4, r7
 8015352:	dd72      	ble.n	801543a <_strtod_l+0x4a2>
 8015354:	2916      	cmp	r1, #22
 8015356:	dc59      	bgt.n	801540c <_strtod_l+0x474>
 8015358:	4b6f      	ldr	r3, [pc, #444]	@ (8015518 <_strtod_l+0x580>)
 801535a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801535c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015360:	ed93 7b00 	vldr	d7, [r3]
 8015364:	ec4b ab16 	vmov	d6, sl, fp
 8015368:	ee27 7b06 	vmul.f64	d7, d7, d6
 801536c:	ec5b ab17 	vmov	sl, fp, d7
 8015370:	e64d      	b.n	801500e <_strtod_l+0x76>
 8015372:	4969      	ldr	r1, [pc, #420]	@ (8015518 <_strtod_l+0x580>)
 8015374:	eddd 6a06 	vldr	s13, [sp, #24]
 8015378:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801537c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8015380:	2b0f      	cmp	r3, #15
 8015382:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8015386:	eea7 6b05 	vfma.f64	d6, d7, d5
 801538a:	ec5b ab16 	vmov	sl, fp, d6
 801538e:	ddda      	ble.n	8015346 <_strtod_l+0x3ae>
 8015390:	1a9a      	subs	r2, r3, r2
 8015392:	1be1      	subs	r1, r4, r7
 8015394:	440a      	add	r2, r1
 8015396:	2a00      	cmp	r2, #0
 8015398:	f340 8094 	ble.w	80154c4 <_strtod_l+0x52c>
 801539c:	f012 000f 	ands.w	r0, r2, #15
 80153a0:	d00a      	beq.n	80153b8 <_strtod_l+0x420>
 80153a2:	495d      	ldr	r1, [pc, #372]	@ (8015518 <_strtod_l+0x580>)
 80153a4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80153a8:	ed91 7b00 	vldr	d7, [r1]
 80153ac:	ec4b ab16 	vmov	d6, sl, fp
 80153b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80153b4:	ec5b ab17 	vmov	sl, fp, d7
 80153b8:	f032 020f 	bics.w	r2, r2, #15
 80153bc:	d073      	beq.n	80154a6 <_strtod_l+0x50e>
 80153be:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 80153c2:	dd47      	ble.n	8015454 <_strtod_l+0x4bc>
 80153c4:	2400      	movs	r4, #0
 80153c6:	4625      	mov	r5, r4
 80153c8:	9407      	str	r4, [sp, #28]
 80153ca:	4626      	mov	r6, r4
 80153cc:	9a05      	ldr	r2, [sp, #20]
 80153ce:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8015524 <_strtod_l+0x58c>
 80153d2:	2322      	movs	r3, #34	@ 0x22
 80153d4:	6013      	str	r3, [r2, #0]
 80153d6:	f04f 0a00 	mov.w	sl, #0
 80153da:	9b07      	ldr	r3, [sp, #28]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	f43f ae16 	beq.w	801500e <_strtod_l+0x76>
 80153e2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80153e4:	9805      	ldr	r0, [sp, #20]
 80153e6:	f7ff f955 	bl	8014694 <_Bfree>
 80153ea:	9805      	ldr	r0, [sp, #20]
 80153ec:	4631      	mov	r1, r6
 80153ee:	f7ff f951 	bl	8014694 <_Bfree>
 80153f2:	9805      	ldr	r0, [sp, #20]
 80153f4:	4629      	mov	r1, r5
 80153f6:	f7ff f94d 	bl	8014694 <_Bfree>
 80153fa:	9907      	ldr	r1, [sp, #28]
 80153fc:	9805      	ldr	r0, [sp, #20]
 80153fe:	f7ff f949 	bl	8014694 <_Bfree>
 8015402:	9805      	ldr	r0, [sp, #20]
 8015404:	4621      	mov	r1, r4
 8015406:	f7ff f945 	bl	8014694 <_Bfree>
 801540a:	e600      	b.n	801500e <_strtod_l+0x76>
 801540c:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8015410:	1be0      	subs	r0, r4, r7
 8015412:	4281      	cmp	r1, r0
 8015414:	dbbc      	blt.n	8015390 <_strtod_l+0x3f8>
 8015416:	4a40      	ldr	r2, [pc, #256]	@ (8015518 <_strtod_l+0x580>)
 8015418:	f1c3 030f 	rsb	r3, r3, #15
 801541c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8015420:	ed91 7b00 	vldr	d7, [r1]
 8015424:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015426:	ec4b ab16 	vmov	d6, sl, fp
 801542a:	1acb      	subs	r3, r1, r3
 801542c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8015430:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015434:	ed92 6b00 	vldr	d6, [r2]
 8015438:	e796      	b.n	8015368 <_strtod_l+0x3d0>
 801543a:	3116      	adds	r1, #22
 801543c:	dba8      	blt.n	8015390 <_strtod_l+0x3f8>
 801543e:	4b36      	ldr	r3, [pc, #216]	@ (8015518 <_strtod_l+0x580>)
 8015440:	1b3c      	subs	r4, r7, r4
 8015442:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8015446:	ed94 7b00 	vldr	d7, [r4]
 801544a:	ec4b ab16 	vmov	d6, sl, fp
 801544e:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015452:	e78b      	b.n	801536c <_strtod_l+0x3d4>
 8015454:	2000      	movs	r0, #0
 8015456:	ec4b ab17 	vmov	d7, sl, fp
 801545a:	4e30      	ldr	r6, [pc, #192]	@ (801551c <_strtod_l+0x584>)
 801545c:	1112      	asrs	r2, r2, #4
 801545e:	4601      	mov	r1, r0
 8015460:	2a01      	cmp	r2, #1
 8015462:	dc23      	bgt.n	80154ac <_strtod_l+0x514>
 8015464:	b108      	cbz	r0, 801546a <_strtod_l+0x4d2>
 8015466:	ec5b ab17 	vmov	sl, fp, d7
 801546a:	4a2c      	ldr	r2, [pc, #176]	@ (801551c <_strtod_l+0x584>)
 801546c:	482c      	ldr	r0, [pc, #176]	@ (8015520 <_strtod_l+0x588>)
 801546e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8015472:	ed92 7b00 	vldr	d7, [r2]
 8015476:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801547a:	ec4b ab16 	vmov	d6, sl, fp
 801547e:	4a29      	ldr	r2, [pc, #164]	@ (8015524 <_strtod_l+0x58c>)
 8015480:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015484:	ee17 1a90 	vmov	r1, s15
 8015488:	400a      	ands	r2, r1
 801548a:	4282      	cmp	r2, r0
 801548c:	ec5b ab17 	vmov	sl, fp, d7
 8015490:	d898      	bhi.n	80153c4 <_strtod_l+0x42c>
 8015492:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8015496:	4282      	cmp	r2, r0
 8015498:	bf86      	itte	hi
 801549a:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8015528 <_strtod_l+0x590>
 801549e:	f04f 3aff 	movhi.w	sl, #4294967295
 80154a2:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 80154a6:	2200      	movs	r2, #0
 80154a8:	9206      	str	r2, [sp, #24]
 80154aa:	e076      	b.n	801559a <_strtod_l+0x602>
 80154ac:	f012 0f01 	tst.w	r2, #1
 80154b0:	d004      	beq.n	80154bc <_strtod_l+0x524>
 80154b2:	ed96 6b00 	vldr	d6, [r6]
 80154b6:	2001      	movs	r0, #1
 80154b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80154bc:	3101      	adds	r1, #1
 80154be:	1052      	asrs	r2, r2, #1
 80154c0:	3608      	adds	r6, #8
 80154c2:	e7cd      	b.n	8015460 <_strtod_l+0x4c8>
 80154c4:	d0ef      	beq.n	80154a6 <_strtod_l+0x50e>
 80154c6:	4252      	negs	r2, r2
 80154c8:	f012 000f 	ands.w	r0, r2, #15
 80154cc:	d00a      	beq.n	80154e4 <_strtod_l+0x54c>
 80154ce:	4912      	ldr	r1, [pc, #72]	@ (8015518 <_strtod_l+0x580>)
 80154d0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80154d4:	ed91 7b00 	vldr	d7, [r1]
 80154d8:	ec4b ab16 	vmov	d6, sl, fp
 80154dc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80154e0:	ec5b ab17 	vmov	sl, fp, d7
 80154e4:	1112      	asrs	r2, r2, #4
 80154e6:	d0de      	beq.n	80154a6 <_strtod_l+0x50e>
 80154e8:	2a1f      	cmp	r2, #31
 80154ea:	dd1f      	ble.n	801552c <_strtod_l+0x594>
 80154ec:	2400      	movs	r4, #0
 80154ee:	4625      	mov	r5, r4
 80154f0:	9407      	str	r4, [sp, #28]
 80154f2:	4626      	mov	r6, r4
 80154f4:	9a05      	ldr	r2, [sp, #20]
 80154f6:	2322      	movs	r3, #34	@ 0x22
 80154f8:	f04f 0a00 	mov.w	sl, #0
 80154fc:	f04f 0b00 	mov.w	fp, #0
 8015500:	6013      	str	r3, [r2, #0]
 8015502:	e76a      	b.n	80153da <_strtod_l+0x442>
 8015504:	0801dec5 	.word	0x0801dec5
 8015508:	0801e190 	.word	0x0801e190
 801550c:	0801debd 	.word	0x0801debd
 8015510:	0801def4 	.word	0x0801def4
 8015514:	0801e02d 	.word	0x0801e02d
 8015518:	0801e0c8 	.word	0x0801e0c8
 801551c:	0801e0a0 	.word	0x0801e0a0
 8015520:	7ca00000 	.word	0x7ca00000
 8015524:	7ff00000 	.word	0x7ff00000
 8015528:	7fefffff 	.word	0x7fefffff
 801552c:	f012 0110 	ands.w	r1, r2, #16
 8015530:	bf18      	it	ne
 8015532:	216a      	movne	r1, #106	@ 0x6a
 8015534:	9106      	str	r1, [sp, #24]
 8015536:	ec4b ab17 	vmov	d7, sl, fp
 801553a:	49af      	ldr	r1, [pc, #700]	@ (80157f8 <_strtod_l+0x860>)
 801553c:	2000      	movs	r0, #0
 801553e:	07d6      	lsls	r6, r2, #31
 8015540:	d504      	bpl.n	801554c <_strtod_l+0x5b4>
 8015542:	ed91 6b00 	vldr	d6, [r1]
 8015546:	2001      	movs	r0, #1
 8015548:	ee27 7b06 	vmul.f64	d7, d7, d6
 801554c:	1052      	asrs	r2, r2, #1
 801554e:	f101 0108 	add.w	r1, r1, #8
 8015552:	d1f4      	bne.n	801553e <_strtod_l+0x5a6>
 8015554:	b108      	cbz	r0, 801555a <_strtod_l+0x5c2>
 8015556:	ec5b ab17 	vmov	sl, fp, d7
 801555a:	9a06      	ldr	r2, [sp, #24]
 801555c:	b1b2      	cbz	r2, 801558c <_strtod_l+0x5f4>
 801555e:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8015562:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8015566:	2a00      	cmp	r2, #0
 8015568:	4658      	mov	r0, fp
 801556a:	dd0f      	ble.n	801558c <_strtod_l+0x5f4>
 801556c:	2a1f      	cmp	r2, #31
 801556e:	dd55      	ble.n	801561c <_strtod_l+0x684>
 8015570:	2a34      	cmp	r2, #52	@ 0x34
 8015572:	bfde      	ittt	le
 8015574:	f04f 32ff 	movle.w	r2, #4294967295
 8015578:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 801557c:	408a      	lslle	r2, r1
 801557e:	f04f 0a00 	mov.w	sl, #0
 8015582:	bfcc      	ite	gt
 8015584:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8015588:	ea02 0b00 	andle.w	fp, r2, r0
 801558c:	ec4b ab17 	vmov	d7, sl, fp
 8015590:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015598:	d0a8      	beq.n	80154ec <_strtod_l+0x554>
 801559a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801559c:	9805      	ldr	r0, [sp, #20]
 801559e:	f8cd 9000 	str.w	r9, [sp]
 80155a2:	462a      	mov	r2, r5
 80155a4:	f7ff f8de 	bl	8014764 <__s2b>
 80155a8:	9007      	str	r0, [sp, #28]
 80155aa:	2800      	cmp	r0, #0
 80155ac:	f43f af0a 	beq.w	80153c4 <_strtod_l+0x42c>
 80155b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80155b2:	1b3f      	subs	r7, r7, r4
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	bfb4      	ite	lt
 80155b8:	463b      	movlt	r3, r7
 80155ba:	2300      	movge	r3, #0
 80155bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80155be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80155c0:	ed9f bb89 	vldr	d11, [pc, #548]	@ 80157e8 <_strtod_l+0x850>
 80155c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80155c8:	2400      	movs	r4, #0
 80155ca:	930d      	str	r3, [sp, #52]	@ 0x34
 80155cc:	4625      	mov	r5, r4
 80155ce:	9b07      	ldr	r3, [sp, #28]
 80155d0:	9805      	ldr	r0, [sp, #20]
 80155d2:	6859      	ldr	r1, [r3, #4]
 80155d4:	f7ff f81e 	bl	8014614 <_Balloc>
 80155d8:	4606      	mov	r6, r0
 80155da:	2800      	cmp	r0, #0
 80155dc:	f43f aef6 	beq.w	80153cc <_strtod_l+0x434>
 80155e0:	9b07      	ldr	r3, [sp, #28]
 80155e2:	691a      	ldr	r2, [r3, #16]
 80155e4:	ec4b ab19 	vmov	d9, sl, fp
 80155e8:	3202      	adds	r2, #2
 80155ea:	f103 010c 	add.w	r1, r3, #12
 80155ee:	0092      	lsls	r2, r2, #2
 80155f0:	300c      	adds	r0, #12
 80155f2:	f000 fd2d 	bl	8016050 <memcpy>
 80155f6:	eeb0 0b49 	vmov.f64	d0, d9
 80155fa:	9805      	ldr	r0, [sp, #20]
 80155fc:	aa14      	add	r2, sp, #80	@ 0x50
 80155fe:	a913      	add	r1, sp, #76	@ 0x4c
 8015600:	f7ff fbe4 	bl	8014dcc <__d2b>
 8015604:	9012      	str	r0, [sp, #72]	@ 0x48
 8015606:	2800      	cmp	r0, #0
 8015608:	f43f aee0 	beq.w	80153cc <_strtod_l+0x434>
 801560c:	9805      	ldr	r0, [sp, #20]
 801560e:	2101      	movs	r1, #1
 8015610:	f7ff f93e 	bl	8014890 <__i2b>
 8015614:	4605      	mov	r5, r0
 8015616:	b940      	cbnz	r0, 801562a <_strtod_l+0x692>
 8015618:	2500      	movs	r5, #0
 801561a:	e6d7      	b.n	80153cc <_strtod_l+0x434>
 801561c:	f04f 31ff 	mov.w	r1, #4294967295
 8015620:	fa01 f202 	lsl.w	r2, r1, r2
 8015624:	ea02 0a0a 	and.w	sl, r2, sl
 8015628:	e7b0      	b.n	801558c <_strtod_l+0x5f4>
 801562a:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 801562c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801562e:	2f00      	cmp	r7, #0
 8015630:	bfab      	itete	ge
 8015632:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8015634:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8015636:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 801563a:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 801563e:	bfac      	ite	ge
 8015640:	eb07 0903 	addge.w	r9, r7, r3
 8015644:	eba3 0807 	sublt.w	r8, r3, r7
 8015648:	9b06      	ldr	r3, [sp, #24]
 801564a:	1aff      	subs	r7, r7, r3
 801564c:	4417      	add	r7, r2
 801564e:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8015652:	4a6a      	ldr	r2, [pc, #424]	@ (80157fc <_strtod_l+0x864>)
 8015654:	3f01      	subs	r7, #1
 8015656:	4297      	cmp	r7, r2
 8015658:	da51      	bge.n	80156fe <_strtod_l+0x766>
 801565a:	1bd1      	subs	r1, r2, r7
 801565c:	291f      	cmp	r1, #31
 801565e:	eba3 0301 	sub.w	r3, r3, r1
 8015662:	f04f 0201 	mov.w	r2, #1
 8015666:	dc3e      	bgt.n	80156e6 <_strtod_l+0x74e>
 8015668:	408a      	lsls	r2, r1
 801566a:	920c      	str	r2, [sp, #48]	@ 0x30
 801566c:	2200      	movs	r2, #0
 801566e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8015670:	eb09 0703 	add.w	r7, r9, r3
 8015674:	4498      	add	r8, r3
 8015676:	9b06      	ldr	r3, [sp, #24]
 8015678:	45b9      	cmp	r9, r7
 801567a:	4498      	add	r8, r3
 801567c:	464b      	mov	r3, r9
 801567e:	bfa8      	it	ge
 8015680:	463b      	movge	r3, r7
 8015682:	4543      	cmp	r3, r8
 8015684:	bfa8      	it	ge
 8015686:	4643      	movge	r3, r8
 8015688:	2b00      	cmp	r3, #0
 801568a:	bfc2      	ittt	gt
 801568c:	1aff      	subgt	r7, r7, r3
 801568e:	eba8 0803 	subgt.w	r8, r8, r3
 8015692:	eba9 0903 	subgt.w	r9, r9, r3
 8015696:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015698:	2b00      	cmp	r3, #0
 801569a:	dd16      	ble.n	80156ca <_strtod_l+0x732>
 801569c:	4629      	mov	r1, r5
 801569e:	9805      	ldr	r0, [sp, #20]
 80156a0:	461a      	mov	r2, r3
 80156a2:	f7ff f9ad 	bl	8014a00 <__pow5mult>
 80156a6:	4605      	mov	r5, r0
 80156a8:	2800      	cmp	r0, #0
 80156aa:	d0b5      	beq.n	8015618 <_strtod_l+0x680>
 80156ac:	4601      	mov	r1, r0
 80156ae:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80156b0:	9805      	ldr	r0, [sp, #20]
 80156b2:	f7ff f903 	bl	80148bc <__multiply>
 80156b6:	900f      	str	r0, [sp, #60]	@ 0x3c
 80156b8:	2800      	cmp	r0, #0
 80156ba:	f43f ae87 	beq.w	80153cc <_strtod_l+0x434>
 80156be:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80156c0:	9805      	ldr	r0, [sp, #20]
 80156c2:	f7fe ffe7 	bl	8014694 <_Bfree>
 80156c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80156c8:	9312      	str	r3, [sp, #72]	@ 0x48
 80156ca:	2f00      	cmp	r7, #0
 80156cc:	dc1b      	bgt.n	8015706 <_strtod_l+0x76e>
 80156ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	dd21      	ble.n	8015718 <_strtod_l+0x780>
 80156d4:	4631      	mov	r1, r6
 80156d6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80156d8:	9805      	ldr	r0, [sp, #20]
 80156da:	f7ff f991 	bl	8014a00 <__pow5mult>
 80156de:	4606      	mov	r6, r0
 80156e0:	b9d0      	cbnz	r0, 8015718 <_strtod_l+0x780>
 80156e2:	2600      	movs	r6, #0
 80156e4:	e672      	b.n	80153cc <_strtod_l+0x434>
 80156e6:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 80156ea:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 80156ee:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 80156f2:	37e2      	adds	r7, #226	@ 0xe2
 80156f4:	fa02 f107 	lsl.w	r1, r2, r7
 80156f8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80156fa:	920c      	str	r2, [sp, #48]	@ 0x30
 80156fc:	e7b8      	b.n	8015670 <_strtod_l+0x6d8>
 80156fe:	2200      	movs	r2, #0
 8015700:	920b      	str	r2, [sp, #44]	@ 0x2c
 8015702:	2201      	movs	r2, #1
 8015704:	e7f9      	b.n	80156fa <_strtod_l+0x762>
 8015706:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015708:	9805      	ldr	r0, [sp, #20]
 801570a:	463a      	mov	r2, r7
 801570c:	f7ff f9d2 	bl	8014ab4 <__lshift>
 8015710:	9012      	str	r0, [sp, #72]	@ 0x48
 8015712:	2800      	cmp	r0, #0
 8015714:	d1db      	bne.n	80156ce <_strtod_l+0x736>
 8015716:	e659      	b.n	80153cc <_strtod_l+0x434>
 8015718:	f1b8 0f00 	cmp.w	r8, #0
 801571c:	dd07      	ble.n	801572e <_strtod_l+0x796>
 801571e:	4631      	mov	r1, r6
 8015720:	9805      	ldr	r0, [sp, #20]
 8015722:	4642      	mov	r2, r8
 8015724:	f7ff f9c6 	bl	8014ab4 <__lshift>
 8015728:	4606      	mov	r6, r0
 801572a:	2800      	cmp	r0, #0
 801572c:	d0d9      	beq.n	80156e2 <_strtod_l+0x74a>
 801572e:	f1b9 0f00 	cmp.w	r9, #0
 8015732:	dd08      	ble.n	8015746 <_strtod_l+0x7ae>
 8015734:	4629      	mov	r1, r5
 8015736:	9805      	ldr	r0, [sp, #20]
 8015738:	464a      	mov	r2, r9
 801573a:	f7ff f9bb 	bl	8014ab4 <__lshift>
 801573e:	4605      	mov	r5, r0
 8015740:	2800      	cmp	r0, #0
 8015742:	f43f ae43 	beq.w	80153cc <_strtod_l+0x434>
 8015746:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015748:	9805      	ldr	r0, [sp, #20]
 801574a:	4632      	mov	r2, r6
 801574c:	f7ff fa3a 	bl	8014bc4 <__mdiff>
 8015750:	4604      	mov	r4, r0
 8015752:	2800      	cmp	r0, #0
 8015754:	f43f ae3a 	beq.w	80153cc <_strtod_l+0x434>
 8015758:	2300      	movs	r3, #0
 801575a:	f8d0 800c 	ldr.w	r8, [r0, #12]
 801575e:	60c3      	str	r3, [r0, #12]
 8015760:	4629      	mov	r1, r5
 8015762:	f7ff fa13 	bl	8014b8c <__mcmp>
 8015766:	2800      	cmp	r0, #0
 8015768:	da4c      	bge.n	8015804 <_strtod_l+0x86c>
 801576a:	ea58 080a 	orrs.w	r8, r8, sl
 801576e:	d172      	bne.n	8015856 <_strtod_l+0x8be>
 8015770:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015774:	2b00      	cmp	r3, #0
 8015776:	d16e      	bne.n	8015856 <_strtod_l+0x8be>
 8015778:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801577c:	0d1b      	lsrs	r3, r3, #20
 801577e:	051b      	lsls	r3, r3, #20
 8015780:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8015784:	d967      	bls.n	8015856 <_strtod_l+0x8be>
 8015786:	6963      	ldr	r3, [r4, #20]
 8015788:	b913      	cbnz	r3, 8015790 <_strtod_l+0x7f8>
 801578a:	6923      	ldr	r3, [r4, #16]
 801578c:	2b01      	cmp	r3, #1
 801578e:	dd62      	ble.n	8015856 <_strtod_l+0x8be>
 8015790:	4621      	mov	r1, r4
 8015792:	2201      	movs	r2, #1
 8015794:	9805      	ldr	r0, [sp, #20]
 8015796:	f7ff f98d 	bl	8014ab4 <__lshift>
 801579a:	4629      	mov	r1, r5
 801579c:	4604      	mov	r4, r0
 801579e:	f7ff f9f5 	bl	8014b8c <__mcmp>
 80157a2:	2800      	cmp	r0, #0
 80157a4:	dd57      	ble.n	8015856 <_strtod_l+0x8be>
 80157a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80157aa:	9a06      	ldr	r2, [sp, #24]
 80157ac:	0d1b      	lsrs	r3, r3, #20
 80157ae:	051b      	lsls	r3, r3, #20
 80157b0:	2a00      	cmp	r2, #0
 80157b2:	d06e      	beq.n	8015892 <_strtod_l+0x8fa>
 80157b4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80157b8:	d86b      	bhi.n	8015892 <_strtod_l+0x8fa>
 80157ba:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80157be:	f67f ae99 	bls.w	80154f4 <_strtod_l+0x55c>
 80157c2:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 80157f0 <_strtod_l+0x858>
 80157c6:	ec4b ab16 	vmov	d6, sl, fp
 80157ca:	4b0d      	ldr	r3, [pc, #52]	@ (8015800 <_strtod_l+0x868>)
 80157cc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80157d0:	ee17 2a90 	vmov	r2, s15
 80157d4:	4013      	ands	r3, r2
 80157d6:	ec5b ab17 	vmov	sl, fp, d7
 80157da:	2b00      	cmp	r3, #0
 80157dc:	f47f ae01 	bne.w	80153e2 <_strtod_l+0x44a>
 80157e0:	9a05      	ldr	r2, [sp, #20]
 80157e2:	2322      	movs	r3, #34	@ 0x22
 80157e4:	6013      	str	r3, [r2, #0]
 80157e6:	e5fc      	b.n	80153e2 <_strtod_l+0x44a>
 80157e8:	ffc00000 	.word	0xffc00000
 80157ec:	41dfffff 	.word	0x41dfffff
 80157f0:	00000000 	.word	0x00000000
 80157f4:	39500000 	.word	0x39500000
 80157f8:	0801e1b8 	.word	0x0801e1b8
 80157fc:	fffffc02 	.word	0xfffffc02
 8015800:	7ff00000 	.word	0x7ff00000
 8015804:	46d9      	mov	r9, fp
 8015806:	d15d      	bne.n	80158c4 <_strtod_l+0x92c>
 8015808:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801580c:	f1b8 0f00 	cmp.w	r8, #0
 8015810:	d02a      	beq.n	8015868 <_strtod_l+0x8d0>
 8015812:	4aa9      	ldr	r2, [pc, #676]	@ (8015ab8 <_strtod_l+0xb20>)
 8015814:	4293      	cmp	r3, r2
 8015816:	d12a      	bne.n	801586e <_strtod_l+0x8d6>
 8015818:	9b06      	ldr	r3, [sp, #24]
 801581a:	4652      	mov	r2, sl
 801581c:	b1fb      	cbz	r3, 801585e <_strtod_l+0x8c6>
 801581e:	4ba7      	ldr	r3, [pc, #668]	@ (8015abc <_strtod_l+0xb24>)
 8015820:	ea0b 0303 	and.w	r3, fp, r3
 8015824:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8015828:	f04f 31ff 	mov.w	r1, #4294967295
 801582c:	d81a      	bhi.n	8015864 <_strtod_l+0x8cc>
 801582e:	0d1b      	lsrs	r3, r3, #20
 8015830:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8015834:	fa01 f303 	lsl.w	r3, r1, r3
 8015838:	429a      	cmp	r2, r3
 801583a:	d118      	bne.n	801586e <_strtod_l+0x8d6>
 801583c:	4ba0      	ldr	r3, [pc, #640]	@ (8015ac0 <_strtod_l+0xb28>)
 801583e:	4599      	cmp	r9, r3
 8015840:	d102      	bne.n	8015848 <_strtod_l+0x8b0>
 8015842:	3201      	adds	r2, #1
 8015844:	f43f adc2 	beq.w	80153cc <_strtod_l+0x434>
 8015848:	4b9c      	ldr	r3, [pc, #624]	@ (8015abc <_strtod_l+0xb24>)
 801584a:	ea09 0303 	and.w	r3, r9, r3
 801584e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8015852:	f04f 0a00 	mov.w	sl, #0
 8015856:	9b06      	ldr	r3, [sp, #24]
 8015858:	2b00      	cmp	r3, #0
 801585a:	d1b2      	bne.n	80157c2 <_strtod_l+0x82a>
 801585c:	e5c1      	b.n	80153e2 <_strtod_l+0x44a>
 801585e:	f04f 33ff 	mov.w	r3, #4294967295
 8015862:	e7e9      	b.n	8015838 <_strtod_l+0x8a0>
 8015864:	460b      	mov	r3, r1
 8015866:	e7e7      	b.n	8015838 <_strtod_l+0x8a0>
 8015868:	ea53 030a 	orrs.w	r3, r3, sl
 801586c:	d09b      	beq.n	80157a6 <_strtod_l+0x80e>
 801586e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015870:	b1c3      	cbz	r3, 80158a4 <_strtod_l+0x90c>
 8015872:	ea13 0f09 	tst.w	r3, r9
 8015876:	d0ee      	beq.n	8015856 <_strtod_l+0x8be>
 8015878:	9a06      	ldr	r2, [sp, #24]
 801587a:	4650      	mov	r0, sl
 801587c:	4659      	mov	r1, fp
 801587e:	f1b8 0f00 	cmp.w	r8, #0
 8015882:	d013      	beq.n	80158ac <_strtod_l+0x914>
 8015884:	f7ff fb6d 	bl	8014f62 <sulp>
 8015888:	ee39 7b00 	vadd.f64	d7, d9, d0
 801588c:	ec5b ab17 	vmov	sl, fp, d7
 8015890:	e7e1      	b.n	8015856 <_strtod_l+0x8be>
 8015892:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8015896:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801589a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801589e:	f04f 3aff 	mov.w	sl, #4294967295
 80158a2:	e7d8      	b.n	8015856 <_strtod_l+0x8be>
 80158a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80158a6:	ea13 0f0a 	tst.w	r3, sl
 80158aa:	e7e4      	b.n	8015876 <_strtod_l+0x8de>
 80158ac:	f7ff fb59 	bl	8014f62 <sulp>
 80158b0:	ee39 0b40 	vsub.f64	d0, d9, d0
 80158b4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80158b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158bc:	ec5b ab10 	vmov	sl, fp, d0
 80158c0:	d1c9      	bne.n	8015856 <_strtod_l+0x8be>
 80158c2:	e617      	b.n	80154f4 <_strtod_l+0x55c>
 80158c4:	4629      	mov	r1, r5
 80158c6:	4620      	mov	r0, r4
 80158c8:	f7ff fad8 	bl	8014e7c <__ratio>
 80158cc:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 80158d0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80158d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158d8:	d85d      	bhi.n	8015996 <_strtod_l+0x9fe>
 80158da:	f1b8 0f00 	cmp.w	r8, #0
 80158de:	d164      	bne.n	80159aa <_strtod_l+0xa12>
 80158e0:	f1ba 0f00 	cmp.w	sl, #0
 80158e4:	d14b      	bne.n	801597e <_strtod_l+0x9e6>
 80158e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80158ea:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d160      	bne.n	80159b4 <_strtod_l+0xa1c>
 80158f2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 80158f6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80158fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158fe:	d401      	bmi.n	8015904 <_strtod_l+0x96c>
 8015900:	ee20 8b08 	vmul.f64	d8, d0, d8
 8015904:	eeb1 ab48 	vneg.f64	d10, d8
 8015908:	486c      	ldr	r0, [pc, #432]	@ (8015abc <_strtod_l+0xb24>)
 801590a:	496e      	ldr	r1, [pc, #440]	@ (8015ac4 <_strtod_l+0xb2c>)
 801590c:	ea09 0700 	and.w	r7, r9, r0
 8015910:	428f      	cmp	r7, r1
 8015912:	ec53 2b1a 	vmov	r2, r3, d10
 8015916:	d17d      	bne.n	8015a14 <_strtod_l+0xa7c>
 8015918:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 801591c:	ec4b ab1c 	vmov	d12, sl, fp
 8015920:	eeb0 0b4c 	vmov.f64	d0, d12
 8015924:	f7ff f9e2 	bl	8014cec <__ulp>
 8015928:	4864      	ldr	r0, [pc, #400]	@ (8015abc <_strtod_l+0xb24>)
 801592a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 801592e:	ee1c 3a90 	vmov	r3, s25
 8015932:	4a65      	ldr	r2, [pc, #404]	@ (8015ac8 <_strtod_l+0xb30>)
 8015934:	ea03 0100 	and.w	r1, r3, r0
 8015938:	4291      	cmp	r1, r2
 801593a:	ec5b ab1c 	vmov	sl, fp, d12
 801593e:	d93c      	bls.n	80159ba <_strtod_l+0xa22>
 8015940:	ee19 2a90 	vmov	r2, s19
 8015944:	4b5e      	ldr	r3, [pc, #376]	@ (8015ac0 <_strtod_l+0xb28>)
 8015946:	429a      	cmp	r2, r3
 8015948:	d104      	bne.n	8015954 <_strtod_l+0x9bc>
 801594a:	ee19 3a10 	vmov	r3, s18
 801594e:	3301      	adds	r3, #1
 8015950:	f43f ad3c 	beq.w	80153cc <_strtod_l+0x434>
 8015954:	f8df b168 	ldr.w	fp, [pc, #360]	@ 8015ac0 <_strtod_l+0xb28>
 8015958:	f04f 3aff 	mov.w	sl, #4294967295
 801595c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801595e:	9805      	ldr	r0, [sp, #20]
 8015960:	f7fe fe98 	bl	8014694 <_Bfree>
 8015964:	9805      	ldr	r0, [sp, #20]
 8015966:	4631      	mov	r1, r6
 8015968:	f7fe fe94 	bl	8014694 <_Bfree>
 801596c:	9805      	ldr	r0, [sp, #20]
 801596e:	4629      	mov	r1, r5
 8015970:	f7fe fe90 	bl	8014694 <_Bfree>
 8015974:	9805      	ldr	r0, [sp, #20]
 8015976:	4621      	mov	r1, r4
 8015978:	f7fe fe8c 	bl	8014694 <_Bfree>
 801597c:	e627      	b.n	80155ce <_strtod_l+0x636>
 801597e:	f1ba 0f01 	cmp.w	sl, #1
 8015982:	d103      	bne.n	801598c <_strtod_l+0x9f4>
 8015984:	f1bb 0f00 	cmp.w	fp, #0
 8015988:	f43f adb4 	beq.w	80154f4 <_strtod_l+0x55c>
 801598c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8015990:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8015994:	e7b8      	b.n	8015908 <_strtod_l+0x970>
 8015996:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801599a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801599e:	f1b8 0f00 	cmp.w	r8, #0
 80159a2:	d0af      	beq.n	8015904 <_strtod_l+0x96c>
 80159a4:	eeb0 ab48 	vmov.f64	d10, d8
 80159a8:	e7ae      	b.n	8015908 <_strtod_l+0x970>
 80159aa:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 80159ae:	eeb0 8b4a 	vmov.f64	d8, d10
 80159b2:	e7a9      	b.n	8015908 <_strtod_l+0x970>
 80159b4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80159b8:	e7a6      	b.n	8015908 <_strtod_l+0x970>
 80159ba:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80159be:	9b06      	ldr	r3, [sp, #24]
 80159c0:	46d9      	mov	r9, fp
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d1ca      	bne.n	801595c <_strtod_l+0x9c4>
 80159c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80159ca:	0d1b      	lsrs	r3, r3, #20
 80159cc:	051b      	lsls	r3, r3, #20
 80159ce:	429f      	cmp	r7, r3
 80159d0:	d1c4      	bne.n	801595c <_strtod_l+0x9c4>
 80159d2:	ec51 0b18 	vmov	r0, r1, d8
 80159d6:	f7ea fe97 	bl	8000708 <__aeabi_d2lz>
 80159da:	f7ea fe67 	bl	80006ac <__aeabi_l2d>
 80159de:	f3cb 0913 	ubfx	r9, fp, #0, #20
 80159e2:	ec41 0b17 	vmov	d7, r0, r1
 80159e6:	ea49 090a 	orr.w	r9, r9, sl
 80159ea:	ea59 0908 	orrs.w	r9, r9, r8
 80159ee:	ee38 8b47 	vsub.f64	d8, d8, d7
 80159f2:	d03c      	beq.n	8015a6e <_strtod_l+0xad6>
 80159f4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8015aa0 <_strtod_l+0xb08>
 80159f8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80159fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a00:	f53f acef 	bmi.w	80153e2 <_strtod_l+0x44a>
 8015a04:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8015aa8 <_strtod_l+0xb10>
 8015a08:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a10:	dda4      	ble.n	801595c <_strtod_l+0x9c4>
 8015a12:	e4e6      	b.n	80153e2 <_strtod_l+0x44a>
 8015a14:	9906      	ldr	r1, [sp, #24]
 8015a16:	b1e1      	cbz	r1, 8015a52 <_strtod_l+0xaba>
 8015a18:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8015a1c:	d819      	bhi.n	8015a52 <_strtod_l+0xaba>
 8015a1e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8015a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a26:	d811      	bhi.n	8015a4c <_strtod_l+0xab4>
 8015a28:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8015a2c:	ee18 3a10 	vmov	r3, s16
 8015a30:	2b01      	cmp	r3, #1
 8015a32:	bf38      	it	cc
 8015a34:	2301      	movcc	r3, #1
 8015a36:	ee08 3a10 	vmov	s16, r3
 8015a3a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8015a3e:	f1b8 0f00 	cmp.w	r8, #0
 8015a42:	d111      	bne.n	8015a68 <_strtod_l+0xad0>
 8015a44:	eeb1 7b48 	vneg.f64	d7, d8
 8015a48:	ec53 2b17 	vmov	r2, r3, d7
 8015a4c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8015a50:	1bcb      	subs	r3, r1, r7
 8015a52:	eeb0 0b49 	vmov.f64	d0, d9
 8015a56:	ec43 2b1a 	vmov	d10, r2, r3
 8015a5a:	f7ff f947 	bl	8014cec <__ulp>
 8015a5e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8015a62:	ec5b ab19 	vmov	sl, fp, d9
 8015a66:	e7aa      	b.n	80159be <_strtod_l+0xa26>
 8015a68:	eeb0 7b48 	vmov.f64	d7, d8
 8015a6c:	e7ec      	b.n	8015a48 <_strtod_l+0xab0>
 8015a6e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8015ab0 <_strtod_l+0xb18>
 8015a72:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a7a:	f57f af6f 	bpl.w	801595c <_strtod_l+0x9c4>
 8015a7e:	e4b0      	b.n	80153e2 <_strtod_l+0x44a>
 8015a80:	2300      	movs	r3, #0
 8015a82:	9308      	str	r3, [sp, #32]
 8015a84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015a86:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015a88:	6013      	str	r3, [r2, #0]
 8015a8a:	f7ff bac4 	b.w	8015016 <_strtod_l+0x7e>
 8015a8e:	2a65      	cmp	r2, #101	@ 0x65
 8015a90:	f43f abbf 	beq.w	8015212 <_strtod_l+0x27a>
 8015a94:	2a45      	cmp	r2, #69	@ 0x45
 8015a96:	f43f abbc 	beq.w	8015212 <_strtod_l+0x27a>
 8015a9a:	2101      	movs	r1, #1
 8015a9c:	f7ff bbf4 	b.w	8015288 <_strtod_l+0x2f0>
 8015aa0:	94a03595 	.word	0x94a03595
 8015aa4:	3fdfffff 	.word	0x3fdfffff
 8015aa8:	35afe535 	.word	0x35afe535
 8015aac:	3fe00000 	.word	0x3fe00000
 8015ab0:	94a03595 	.word	0x94a03595
 8015ab4:	3fcfffff 	.word	0x3fcfffff
 8015ab8:	000fffff 	.word	0x000fffff
 8015abc:	7ff00000 	.word	0x7ff00000
 8015ac0:	7fefffff 	.word	0x7fefffff
 8015ac4:	7fe00000 	.word	0x7fe00000
 8015ac8:	7c9fffff 	.word	0x7c9fffff

08015acc <_strtod_r>:
 8015acc:	4b01      	ldr	r3, [pc, #4]	@ (8015ad4 <_strtod_r+0x8>)
 8015ace:	f7ff ba63 	b.w	8014f98 <_strtod_l>
 8015ad2:	bf00      	nop
 8015ad4:	240003ec 	.word	0x240003ec

08015ad8 <_strtol_l.isra.0>:
 8015ad8:	2b24      	cmp	r3, #36	@ 0x24
 8015ada:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ade:	4686      	mov	lr, r0
 8015ae0:	4690      	mov	r8, r2
 8015ae2:	d801      	bhi.n	8015ae8 <_strtol_l.isra.0+0x10>
 8015ae4:	2b01      	cmp	r3, #1
 8015ae6:	d106      	bne.n	8015af6 <_strtol_l.isra.0+0x1e>
 8015ae8:	f7fd fe78 	bl	80137dc <__errno>
 8015aec:	2316      	movs	r3, #22
 8015aee:	6003      	str	r3, [r0, #0]
 8015af0:	2000      	movs	r0, #0
 8015af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015af6:	4834      	ldr	r0, [pc, #208]	@ (8015bc8 <_strtol_l.isra.0+0xf0>)
 8015af8:	460d      	mov	r5, r1
 8015afa:	462a      	mov	r2, r5
 8015afc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015b00:	5d06      	ldrb	r6, [r0, r4]
 8015b02:	f016 0608 	ands.w	r6, r6, #8
 8015b06:	d1f8      	bne.n	8015afa <_strtol_l.isra.0+0x22>
 8015b08:	2c2d      	cmp	r4, #45	@ 0x2d
 8015b0a:	d110      	bne.n	8015b2e <_strtol_l.isra.0+0x56>
 8015b0c:	782c      	ldrb	r4, [r5, #0]
 8015b0e:	2601      	movs	r6, #1
 8015b10:	1c95      	adds	r5, r2, #2
 8015b12:	f033 0210 	bics.w	r2, r3, #16
 8015b16:	d115      	bne.n	8015b44 <_strtol_l.isra.0+0x6c>
 8015b18:	2c30      	cmp	r4, #48	@ 0x30
 8015b1a:	d10d      	bne.n	8015b38 <_strtol_l.isra.0+0x60>
 8015b1c:	782a      	ldrb	r2, [r5, #0]
 8015b1e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8015b22:	2a58      	cmp	r2, #88	@ 0x58
 8015b24:	d108      	bne.n	8015b38 <_strtol_l.isra.0+0x60>
 8015b26:	786c      	ldrb	r4, [r5, #1]
 8015b28:	3502      	adds	r5, #2
 8015b2a:	2310      	movs	r3, #16
 8015b2c:	e00a      	b.n	8015b44 <_strtol_l.isra.0+0x6c>
 8015b2e:	2c2b      	cmp	r4, #43	@ 0x2b
 8015b30:	bf04      	itt	eq
 8015b32:	782c      	ldrbeq	r4, [r5, #0]
 8015b34:	1c95      	addeq	r5, r2, #2
 8015b36:	e7ec      	b.n	8015b12 <_strtol_l.isra.0+0x3a>
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d1f6      	bne.n	8015b2a <_strtol_l.isra.0+0x52>
 8015b3c:	2c30      	cmp	r4, #48	@ 0x30
 8015b3e:	bf14      	ite	ne
 8015b40:	230a      	movne	r3, #10
 8015b42:	2308      	moveq	r3, #8
 8015b44:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8015b48:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015b4c:	2200      	movs	r2, #0
 8015b4e:	fbbc f9f3 	udiv	r9, ip, r3
 8015b52:	4610      	mov	r0, r2
 8015b54:	fb03 ca19 	mls	sl, r3, r9, ip
 8015b58:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8015b5c:	2f09      	cmp	r7, #9
 8015b5e:	d80f      	bhi.n	8015b80 <_strtol_l.isra.0+0xa8>
 8015b60:	463c      	mov	r4, r7
 8015b62:	42a3      	cmp	r3, r4
 8015b64:	dd1b      	ble.n	8015b9e <_strtol_l.isra.0+0xc6>
 8015b66:	1c57      	adds	r7, r2, #1
 8015b68:	d007      	beq.n	8015b7a <_strtol_l.isra.0+0xa2>
 8015b6a:	4581      	cmp	r9, r0
 8015b6c:	d314      	bcc.n	8015b98 <_strtol_l.isra.0+0xc0>
 8015b6e:	d101      	bne.n	8015b74 <_strtol_l.isra.0+0x9c>
 8015b70:	45a2      	cmp	sl, r4
 8015b72:	db11      	blt.n	8015b98 <_strtol_l.isra.0+0xc0>
 8015b74:	fb00 4003 	mla	r0, r0, r3, r4
 8015b78:	2201      	movs	r2, #1
 8015b7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015b7e:	e7eb      	b.n	8015b58 <_strtol_l.isra.0+0x80>
 8015b80:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8015b84:	2f19      	cmp	r7, #25
 8015b86:	d801      	bhi.n	8015b8c <_strtol_l.isra.0+0xb4>
 8015b88:	3c37      	subs	r4, #55	@ 0x37
 8015b8a:	e7ea      	b.n	8015b62 <_strtol_l.isra.0+0x8a>
 8015b8c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8015b90:	2f19      	cmp	r7, #25
 8015b92:	d804      	bhi.n	8015b9e <_strtol_l.isra.0+0xc6>
 8015b94:	3c57      	subs	r4, #87	@ 0x57
 8015b96:	e7e4      	b.n	8015b62 <_strtol_l.isra.0+0x8a>
 8015b98:	f04f 32ff 	mov.w	r2, #4294967295
 8015b9c:	e7ed      	b.n	8015b7a <_strtol_l.isra.0+0xa2>
 8015b9e:	1c53      	adds	r3, r2, #1
 8015ba0:	d108      	bne.n	8015bb4 <_strtol_l.isra.0+0xdc>
 8015ba2:	2322      	movs	r3, #34	@ 0x22
 8015ba4:	f8ce 3000 	str.w	r3, [lr]
 8015ba8:	4660      	mov	r0, ip
 8015baa:	f1b8 0f00 	cmp.w	r8, #0
 8015bae:	d0a0      	beq.n	8015af2 <_strtol_l.isra.0+0x1a>
 8015bb0:	1e69      	subs	r1, r5, #1
 8015bb2:	e006      	b.n	8015bc2 <_strtol_l.isra.0+0xea>
 8015bb4:	b106      	cbz	r6, 8015bb8 <_strtol_l.isra.0+0xe0>
 8015bb6:	4240      	negs	r0, r0
 8015bb8:	f1b8 0f00 	cmp.w	r8, #0
 8015bbc:	d099      	beq.n	8015af2 <_strtol_l.isra.0+0x1a>
 8015bbe:	2a00      	cmp	r2, #0
 8015bc0:	d1f6      	bne.n	8015bb0 <_strtol_l.isra.0+0xd8>
 8015bc2:	f8c8 1000 	str.w	r1, [r8]
 8015bc6:	e794      	b.n	8015af2 <_strtol_l.isra.0+0x1a>
 8015bc8:	0801e1e1 	.word	0x0801e1e1

08015bcc <_strtol_r>:
 8015bcc:	f7ff bf84 	b.w	8015ad8 <_strtol_l.isra.0>

08015bd0 <__ssputs_r>:
 8015bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015bd4:	688e      	ldr	r6, [r1, #8]
 8015bd6:	461f      	mov	r7, r3
 8015bd8:	42be      	cmp	r6, r7
 8015bda:	680b      	ldr	r3, [r1, #0]
 8015bdc:	4682      	mov	sl, r0
 8015bde:	460c      	mov	r4, r1
 8015be0:	4690      	mov	r8, r2
 8015be2:	d82d      	bhi.n	8015c40 <__ssputs_r+0x70>
 8015be4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015be8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015bec:	d026      	beq.n	8015c3c <__ssputs_r+0x6c>
 8015bee:	6965      	ldr	r5, [r4, #20]
 8015bf0:	6909      	ldr	r1, [r1, #16]
 8015bf2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015bf6:	eba3 0901 	sub.w	r9, r3, r1
 8015bfa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015bfe:	1c7b      	adds	r3, r7, #1
 8015c00:	444b      	add	r3, r9
 8015c02:	106d      	asrs	r5, r5, #1
 8015c04:	429d      	cmp	r5, r3
 8015c06:	bf38      	it	cc
 8015c08:	461d      	movcc	r5, r3
 8015c0a:	0553      	lsls	r3, r2, #21
 8015c0c:	d527      	bpl.n	8015c5e <__ssputs_r+0x8e>
 8015c0e:	4629      	mov	r1, r5
 8015c10:	f7fe fc74 	bl	80144fc <_malloc_r>
 8015c14:	4606      	mov	r6, r0
 8015c16:	b360      	cbz	r0, 8015c72 <__ssputs_r+0xa2>
 8015c18:	6921      	ldr	r1, [r4, #16]
 8015c1a:	464a      	mov	r2, r9
 8015c1c:	f000 fa18 	bl	8016050 <memcpy>
 8015c20:	89a3      	ldrh	r3, [r4, #12]
 8015c22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015c26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015c2a:	81a3      	strh	r3, [r4, #12]
 8015c2c:	6126      	str	r6, [r4, #16]
 8015c2e:	6165      	str	r5, [r4, #20]
 8015c30:	444e      	add	r6, r9
 8015c32:	eba5 0509 	sub.w	r5, r5, r9
 8015c36:	6026      	str	r6, [r4, #0]
 8015c38:	60a5      	str	r5, [r4, #8]
 8015c3a:	463e      	mov	r6, r7
 8015c3c:	42be      	cmp	r6, r7
 8015c3e:	d900      	bls.n	8015c42 <__ssputs_r+0x72>
 8015c40:	463e      	mov	r6, r7
 8015c42:	6820      	ldr	r0, [r4, #0]
 8015c44:	4632      	mov	r2, r6
 8015c46:	4641      	mov	r1, r8
 8015c48:	f000 f9c6 	bl	8015fd8 <memmove>
 8015c4c:	68a3      	ldr	r3, [r4, #8]
 8015c4e:	1b9b      	subs	r3, r3, r6
 8015c50:	60a3      	str	r3, [r4, #8]
 8015c52:	6823      	ldr	r3, [r4, #0]
 8015c54:	4433      	add	r3, r6
 8015c56:	6023      	str	r3, [r4, #0]
 8015c58:	2000      	movs	r0, #0
 8015c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c5e:	462a      	mov	r2, r5
 8015c60:	f000 fd8b 	bl	801677a <_realloc_r>
 8015c64:	4606      	mov	r6, r0
 8015c66:	2800      	cmp	r0, #0
 8015c68:	d1e0      	bne.n	8015c2c <__ssputs_r+0x5c>
 8015c6a:	6921      	ldr	r1, [r4, #16]
 8015c6c:	4650      	mov	r0, sl
 8015c6e:	f7fe fbd1 	bl	8014414 <_free_r>
 8015c72:	230c      	movs	r3, #12
 8015c74:	f8ca 3000 	str.w	r3, [sl]
 8015c78:	89a3      	ldrh	r3, [r4, #12]
 8015c7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015c7e:	81a3      	strh	r3, [r4, #12]
 8015c80:	f04f 30ff 	mov.w	r0, #4294967295
 8015c84:	e7e9      	b.n	8015c5a <__ssputs_r+0x8a>
	...

08015c88 <_svfiprintf_r>:
 8015c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c8c:	4698      	mov	r8, r3
 8015c8e:	898b      	ldrh	r3, [r1, #12]
 8015c90:	061b      	lsls	r3, r3, #24
 8015c92:	b09d      	sub	sp, #116	@ 0x74
 8015c94:	4607      	mov	r7, r0
 8015c96:	460d      	mov	r5, r1
 8015c98:	4614      	mov	r4, r2
 8015c9a:	d510      	bpl.n	8015cbe <_svfiprintf_r+0x36>
 8015c9c:	690b      	ldr	r3, [r1, #16]
 8015c9e:	b973      	cbnz	r3, 8015cbe <_svfiprintf_r+0x36>
 8015ca0:	2140      	movs	r1, #64	@ 0x40
 8015ca2:	f7fe fc2b 	bl	80144fc <_malloc_r>
 8015ca6:	6028      	str	r0, [r5, #0]
 8015ca8:	6128      	str	r0, [r5, #16]
 8015caa:	b930      	cbnz	r0, 8015cba <_svfiprintf_r+0x32>
 8015cac:	230c      	movs	r3, #12
 8015cae:	603b      	str	r3, [r7, #0]
 8015cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8015cb4:	b01d      	add	sp, #116	@ 0x74
 8015cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cba:	2340      	movs	r3, #64	@ 0x40
 8015cbc:	616b      	str	r3, [r5, #20]
 8015cbe:	2300      	movs	r3, #0
 8015cc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8015cc2:	2320      	movs	r3, #32
 8015cc4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015cc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8015ccc:	2330      	movs	r3, #48	@ 0x30
 8015cce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015e6c <_svfiprintf_r+0x1e4>
 8015cd2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015cd6:	f04f 0901 	mov.w	r9, #1
 8015cda:	4623      	mov	r3, r4
 8015cdc:	469a      	mov	sl, r3
 8015cde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015ce2:	b10a      	cbz	r2, 8015ce8 <_svfiprintf_r+0x60>
 8015ce4:	2a25      	cmp	r2, #37	@ 0x25
 8015ce6:	d1f9      	bne.n	8015cdc <_svfiprintf_r+0x54>
 8015ce8:	ebba 0b04 	subs.w	fp, sl, r4
 8015cec:	d00b      	beq.n	8015d06 <_svfiprintf_r+0x7e>
 8015cee:	465b      	mov	r3, fp
 8015cf0:	4622      	mov	r2, r4
 8015cf2:	4629      	mov	r1, r5
 8015cf4:	4638      	mov	r0, r7
 8015cf6:	f7ff ff6b 	bl	8015bd0 <__ssputs_r>
 8015cfa:	3001      	adds	r0, #1
 8015cfc:	f000 80a7 	beq.w	8015e4e <_svfiprintf_r+0x1c6>
 8015d00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015d02:	445a      	add	r2, fp
 8015d04:	9209      	str	r2, [sp, #36]	@ 0x24
 8015d06:	f89a 3000 	ldrb.w	r3, [sl]
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	f000 809f 	beq.w	8015e4e <_svfiprintf_r+0x1c6>
 8015d10:	2300      	movs	r3, #0
 8015d12:	f04f 32ff 	mov.w	r2, #4294967295
 8015d16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015d1a:	f10a 0a01 	add.w	sl, sl, #1
 8015d1e:	9304      	str	r3, [sp, #16]
 8015d20:	9307      	str	r3, [sp, #28]
 8015d22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015d26:	931a      	str	r3, [sp, #104]	@ 0x68
 8015d28:	4654      	mov	r4, sl
 8015d2a:	2205      	movs	r2, #5
 8015d2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d30:	484e      	ldr	r0, [pc, #312]	@ (8015e6c <_svfiprintf_r+0x1e4>)
 8015d32:	f7ea fad5 	bl	80002e0 <memchr>
 8015d36:	9a04      	ldr	r2, [sp, #16]
 8015d38:	b9d8      	cbnz	r0, 8015d72 <_svfiprintf_r+0xea>
 8015d3a:	06d0      	lsls	r0, r2, #27
 8015d3c:	bf44      	itt	mi
 8015d3e:	2320      	movmi	r3, #32
 8015d40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015d44:	0711      	lsls	r1, r2, #28
 8015d46:	bf44      	itt	mi
 8015d48:	232b      	movmi	r3, #43	@ 0x2b
 8015d4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015d4e:	f89a 3000 	ldrb.w	r3, [sl]
 8015d52:	2b2a      	cmp	r3, #42	@ 0x2a
 8015d54:	d015      	beq.n	8015d82 <_svfiprintf_r+0xfa>
 8015d56:	9a07      	ldr	r2, [sp, #28]
 8015d58:	4654      	mov	r4, sl
 8015d5a:	2000      	movs	r0, #0
 8015d5c:	f04f 0c0a 	mov.w	ip, #10
 8015d60:	4621      	mov	r1, r4
 8015d62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015d66:	3b30      	subs	r3, #48	@ 0x30
 8015d68:	2b09      	cmp	r3, #9
 8015d6a:	d94b      	bls.n	8015e04 <_svfiprintf_r+0x17c>
 8015d6c:	b1b0      	cbz	r0, 8015d9c <_svfiprintf_r+0x114>
 8015d6e:	9207      	str	r2, [sp, #28]
 8015d70:	e014      	b.n	8015d9c <_svfiprintf_r+0x114>
 8015d72:	eba0 0308 	sub.w	r3, r0, r8
 8015d76:	fa09 f303 	lsl.w	r3, r9, r3
 8015d7a:	4313      	orrs	r3, r2
 8015d7c:	9304      	str	r3, [sp, #16]
 8015d7e:	46a2      	mov	sl, r4
 8015d80:	e7d2      	b.n	8015d28 <_svfiprintf_r+0xa0>
 8015d82:	9b03      	ldr	r3, [sp, #12]
 8015d84:	1d19      	adds	r1, r3, #4
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	9103      	str	r1, [sp, #12]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	bfbb      	ittet	lt
 8015d8e:	425b      	neglt	r3, r3
 8015d90:	f042 0202 	orrlt.w	r2, r2, #2
 8015d94:	9307      	strge	r3, [sp, #28]
 8015d96:	9307      	strlt	r3, [sp, #28]
 8015d98:	bfb8      	it	lt
 8015d9a:	9204      	strlt	r2, [sp, #16]
 8015d9c:	7823      	ldrb	r3, [r4, #0]
 8015d9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8015da0:	d10a      	bne.n	8015db8 <_svfiprintf_r+0x130>
 8015da2:	7863      	ldrb	r3, [r4, #1]
 8015da4:	2b2a      	cmp	r3, #42	@ 0x2a
 8015da6:	d132      	bne.n	8015e0e <_svfiprintf_r+0x186>
 8015da8:	9b03      	ldr	r3, [sp, #12]
 8015daa:	1d1a      	adds	r2, r3, #4
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	9203      	str	r2, [sp, #12]
 8015db0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015db4:	3402      	adds	r4, #2
 8015db6:	9305      	str	r3, [sp, #20]
 8015db8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015e7c <_svfiprintf_r+0x1f4>
 8015dbc:	7821      	ldrb	r1, [r4, #0]
 8015dbe:	2203      	movs	r2, #3
 8015dc0:	4650      	mov	r0, sl
 8015dc2:	f7ea fa8d 	bl	80002e0 <memchr>
 8015dc6:	b138      	cbz	r0, 8015dd8 <_svfiprintf_r+0x150>
 8015dc8:	9b04      	ldr	r3, [sp, #16]
 8015dca:	eba0 000a 	sub.w	r0, r0, sl
 8015dce:	2240      	movs	r2, #64	@ 0x40
 8015dd0:	4082      	lsls	r2, r0
 8015dd2:	4313      	orrs	r3, r2
 8015dd4:	3401      	adds	r4, #1
 8015dd6:	9304      	str	r3, [sp, #16]
 8015dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ddc:	4824      	ldr	r0, [pc, #144]	@ (8015e70 <_svfiprintf_r+0x1e8>)
 8015dde:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015de2:	2206      	movs	r2, #6
 8015de4:	f7ea fa7c 	bl	80002e0 <memchr>
 8015de8:	2800      	cmp	r0, #0
 8015dea:	d036      	beq.n	8015e5a <_svfiprintf_r+0x1d2>
 8015dec:	4b21      	ldr	r3, [pc, #132]	@ (8015e74 <_svfiprintf_r+0x1ec>)
 8015dee:	bb1b      	cbnz	r3, 8015e38 <_svfiprintf_r+0x1b0>
 8015df0:	9b03      	ldr	r3, [sp, #12]
 8015df2:	3307      	adds	r3, #7
 8015df4:	f023 0307 	bic.w	r3, r3, #7
 8015df8:	3308      	adds	r3, #8
 8015dfa:	9303      	str	r3, [sp, #12]
 8015dfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015dfe:	4433      	add	r3, r6
 8015e00:	9309      	str	r3, [sp, #36]	@ 0x24
 8015e02:	e76a      	b.n	8015cda <_svfiprintf_r+0x52>
 8015e04:	fb0c 3202 	mla	r2, ip, r2, r3
 8015e08:	460c      	mov	r4, r1
 8015e0a:	2001      	movs	r0, #1
 8015e0c:	e7a8      	b.n	8015d60 <_svfiprintf_r+0xd8>
 8015e0e:	2300      	movs	r3, #0
 8015e10:	3401      	adds	r4, #1
 8015e12:	9305      	str	r3, [sp, #20]
 8015e14:	4619      	mov	r1, r3
 8015e16:	f04f 0c0a 	mov.w	ip, #10
 8015e1a:	4620      	mov	r0, r4
 8015e1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015e20:	3a30      	subs	r2, #48	@ 0x30
 8015e22:	2a09      	cmp	r2, #9
 8015e24:	d903      	bls.n	8015e2e <_svfiprintf_r+0x1a6>
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d0c6      	beq.n	8015db8 <_svfiprintf_r+0x130>
 8015e2a:	9105      	str	r1, [sp, #20]
 8015e2c:	e7c4      	b.n	8015db8 <_svfiprintf_r+0x130>
 8015e2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015e32:	4604      	mov	r4, r0
 8015e34:	2301      	movs	r3, #1
 8015e36:	e7f0      	b.n	8015e1a <_svfiprintf_r+0x192>
 8015e38:	ab03      	add	r3, sp, #12
 8015e3a:	9300      	str	r3, [sp, #0]
 8015e3c:	462a      	mov	r2, r5
 8015e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8015e78 <_svfiprintf_r+0x1f0>)
 8015e40:	a904      	add	r1, sp, #16
 8015e42:	4638      	mov	r0, r7
 8015e44:	f7fc fd84 	bl	8012950 <_printf_float>
 8015e48:	1c42      	adds	r2, r0, #1
 8015e4a:	4606      	mov	r6, r0
 8015e4c:	d1d6      	bne.n	8015dfc <_svfiprintf_r+0x174>
 8015e4e:	89ab      	ldrh	r3, [r5, #12]
 8015e50:	065b      	lsls	r3, r3, #25
 8015e52:	f53f af2d 	bmi.w	8015cb0 <_svfiprintf_r+0x28>
 8015e56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015e58:	e72c      	b.n	8015cb4 <_svfiprintf_r+0x2c>
 8015e5a:	ab03      	add	r3, sp, #12
 8015e5c:	9300      	str	r3, [sp, #0]
 8015e5e:	462a      	mov	r2, r5
 8015e60:	4b05      	ldr	r3, [pc, #20]	@ (8015e78 <_svfiprintf_r+0x1f0>)
 8015e62:	a904      	add	r1, sp, #16
 8015e64:	4638      	mov	r0, r7
 8015e66:	f7fc fffb 	bl	8012e60 <_printf_i>
 8015e6a:	e7ed      	b.n	8015e48 <_svfiprintf_r+0x1c0>
 8015e6c:	0801dfd9 	.word	0x0801dfd9
 8015e70:	0801dfe3 	.word	0x0801dfe3
 8015e74:	08012951 	.word	0x08012951
 8015e78:	08015bd1 	.word	0x08015bd1
 8015e7c:	0801dfdf 	.word	0x0801dfdf

08015e80 <__sflush_r>:
 8015e80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e88:	0716      	lsls	r6, r2, #28
 8015e8a:	4605      	mov	r5, r0
 8015e8c:	460c      	mov	r4, r1
 8015e8e:	d454      	bmi.n	8015f3a <__sflush_r+0xba>
 8015e90:	684b      	ldr	r3, [r1, #4]
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	dc02      	bgt.n	8015e9c <__sflush_r+0x1c>
 8015e96:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	dd48      	ble.n	8015f2e <__sflush_r+0xae>
 8015e9c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015e9e:	2e00      	cmp	r6, #0
 8015ea0:	d045      	beq.n	8015f2e <__sflush_r+0xae>
 8015ea2:	2300      	movs	r3, #0
 8015ea4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015ea8:	682f      	ldr	r7, [r5, #0]
 8015eaa:	6a21      	ldr	r1, [r4, #32]
 8015eac:	602b      	str	r3, [r5, #0]
 8015eae:	d030      	beq.n	8015f12 <__sflush_r+0x92>
 8015eb0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015eb2:	89a3      	ldrh	r3, [r4, #12]
 8015eb4:	0759      	lsls	r1, r3, #29
 8015eb6:	d505      	bpl.n	8015ec4 <__sflush_r+0x44>
 8015eb8:	6863      	ldr	r3, [r4, #4]
 8015eba:	1ad2      	subs	r2, r2, r3
 8015ebc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015ebe:	b10b      	cbz	r3, 8015ec4 <__sflush_r+0x44>
 8015ec0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015ec2:	1ad2      	subs	r2, r2, r3
 8015ec4:	2300      	movs	r3, #0
 8015ec6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015ec8:	6a21      	ldr	r1, [r4, #32]
 8015eca:	4628      	mov	r0, r5
 8015ecc:	47b0      	blx	r6
 8015ece:	1c43      	adds	r3, r0, #1
 8015ed0:	89a3      	ldrh	r3, [r4, #12]
 8015ed2:	d106      	bne.n	8015ee2 <__sflush_r+0x62>
 8015ed4:	6829      	ldr	r1, [r5, #0]
 8015ed6:	291d      	cmp	r1, #29
 8015ed8:	d82b      	bhi.n	8015f32 <__sflush_r+0xb2>
 8015eda:	4a2a      	ldr	r2, [pc, #168]	@ (8015f84 <__sflush_r+0x104>)
 8015edc:	40ca      	lsrs	r2, r1
 8015ede:	07d6      	lsls	r6, r2, #31
 8015ee0:	d527      	bpl.n	8015f32 <__sflush_r+0xb2>
 8015ee2:	2200      	movs	r2, #0
 8015ee4:	6062      	str	r2, [r4, #4]
 8015ee6:	04d9      	lsls	r1, r3, #19
 8015ee8:	6922      	ldr	r2, [r4, #16]
 8015eea:	6022      	str	r2, [r4, #0]
 8015eec:	d504      	bpl.n	8015ef8 <__sflush_r+0x78>
 8015eee:	1c42      	adds	r2, r0, #1
 8015ef0:	d101      	bne.n	8015ef6 <__sflush_r+0x76>
 8015ef2:	682b      	ldr	r3, [r5, #0]
 8015ef4:	b903      	cbnz	r3, 8015ef8 <__sflush_r+0x78>
 8015ef6:	6560      	str	r0, [r4, #84]	@ 0x54
 8015ef8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015efa:	602f      	str	r7, [r5, #0]
 8015efc:	b1b9      	cbz	r1, 8015f2e <__sflush_r+0xae>
 8015efe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015f02:	4299      	cmp	r1, r3
 8015f04:	d002      	beq.n	8015f0c <__sflush_r+0x8c>
 8015f06:	4628      	mov	r0, r5
 8015f08:	f7fe fa84 	bl	8014414 <_free_r>
 8015f0c:	2300      	movs	r3, #0
 8015f0e:	6363      	str	r3, [r4, #52]	@ 0x34
 8015f10:	e00d      	b.n	8015f2e <__sflush_r+0xae>
 8015f12:	2301      	movs	r3, #1
 8015f14:	4628      	mov	r0, r5
 8015f16:	47b0      	blx	r6
 8015f18:	4602      	mov	r2, r0
 8015f1a:	1c50      	adds	r0, r2, #1
 8015f1c:	d1c9      	bne.n	8015eb2 <__sflush_r+0x32>
 8015f1e:	682b      	ldr	r3, [r5, #0]
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d0c6      	beq.n	8015eb2 <__sflush_r+0x32>
 8015f24:	2b1d      	cmp	r3, #29
 8015f26:	d001      	beq.n	8015f2c <__sflush_r+0xac>
 8015f28:	2b16      	cmp	r3, #22
 8015f2a:	d11e      	bne.n	8015f6a <__sflush_r+0xea>
 8015f2c:	602f      	str	r7, [r5, #0]
 8015f2e:	2000      	movs	r0, #0
 8015f30:	e022      	b.n	8015f78 <__sflush_r+0xf8>
 8015f32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015f36:	b21b      	sxth	r3, r3
 8015f38:	e01b      	b.n	8015f72 <__sflush_r+0xf2>
 8015f3a:	690f      	ldr	r7, [r1, #16]
 8015f3c:	2f00      	cmp	r7, #0
 8015f3e:	d0f6      	beq.n	8015f2e <__sflush_r+0xae>
 8015f40:	0793      	lsls	r3, r2, #30
 8015f42:	680e      	ldr	r6, [r1, #0]
 8015f44:	bf08      	it	eq
 8015f46:	694b      	ldreq	r3, [r1, #20]
 8015f48:	600f      	str	r7, [r1, #0]
 8015f4a:	bf18      	it	ne
 8015f4c:	2300      	movne	r3, #0
 8015f4e:	eba6 0807 	sub.w	r8, r6, r7
 8015f52:	608b      	str	r3, [r1, #8]
 8015f54:	f1b8 0f00 	cmp.w	r8, #0
 8015f58:	dde9      	ble.n	8015f2e <__sflush_r+0xae>
 8015f5a:	6a21      	ldr	r1, [r4, #32]
 8015f5c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8015f5e:	4643      	mov	r3, r8
 8015f60:	463a      	mov	r2, r7
 8015f62:	4628      	mov	r0, r5
 8015f64:	47b0      	blx	r6
 8015f66:	2800      	cmp	r0, #0
 8015f68:	dc08      	bgt.n	8015f7c <__sflush_r+0xfc>
 8015f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015f6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015f72:	81a3      	strh	r3, [r4, #12]
 8015f74:	f04f 30ff 	mov.w	r0, #4294967295
 8015f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f7c:	4407      	add	r7, r0
 8015f7e:	eba8 0800 	sub.w	r8, r8, r0
 8015f82:	e7e7      	b.n	8015f54 <__sflush_r+0xd4>
 8015f84:	20400001 	.word	0x20400001

08015f88 <_fflush_r>:
 8015f88:	b538      	push	{r3, r4, r5, lr}
 8015f8a:	690b      	ldr	r3, [r1, #16]
 8015f8c:	4605      	mov	r5, r0
 8015f8e:	460c      	mov	r4, r1
 8015f90:	b913      	cbnz	r3, 8015f98 <_fflush_r+0x10>
 8015f92:	2500      	movs	r5, #0
 8015f94:	4628      	mov	r0, r5
 8015f96:	bd38      	pop	{r3, r4, r5, pc}
 8015f98:	b118      	cbz	r0, 8015fa2 <_fflush_r+0x1a>
 8015f9a:	6a03      	ldr	r3, [r0, #32]
 8015f9c:	b90b      	cbnz	r3, 8015fa2 <_fflush_r+0x1a>
 8015f9e:	f7fd fb0f 	bl	80135c0 <__sinit>
 8015fa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d0f3      	beq.n	8015f92 <_fflush_r+0xa>
 8015faa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015fac:	07d0      	lsls	r0, r2, #31
 8015fae:	d404      	bmi.n	8015fba <_fflush_r+0x32>
 8015fb0:	0599      	lsls	r1, r3, #22
 8015fb2:	d402      	bmi.n	8015fba <_fflush_r+0x32>
 8015fb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015fb6:	f7fd fc3c 	bl	8013832 <__retarget_lock_acquire_recursive>
 8015fba:	4628      	mov	r0, r5
 8015fbc:	4621      	mov	r1, r4
 8015fbe:	f7ff ff5f 	bl	8015e80 <__sflush_r>
 8015fc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015fc4:	07da      	lsls	r2, r3, #31
 8015fc6:	4605      	mov	r5, r0
 8015fc8:	d4e4      	bmi.n	8015f94 <_fflush_r+0xc>
 8015fca:	89a3      	ldrh	r3, [r4, #12]
 8015fcc:	059b      	lsls	r3, r3, #22
 8015fce:	d4e1      	bmi.n	8015f94 <_fflush_r+0xc>
 8015fd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015fd2:	f7fd fc2f 	bl	8013834 <__retarget_lock_release_recursive>
 8015fd6:	e7dd      	b.n	8015f94 <_fflush_r+0xc>

08015fd8 <memmove>:
 8015fd8:	4288      	cmp	r0, r1
 8015fda:	b510      	push	{r4, lr}
 8015fdc:	eb01 0402 	add.w	r4, r1, r2
 8015fe0:	d902      	bls.n	8015fe8 <memmove+0x10>
 8015fe2:	4284      	cmp	r4, r0
 8015fe4:	4623      	mov	r3, r4
 8015fe6:	d807      	bhi.n	8015ff8 <memmove+0x20>
 8015fe8:	1e43      	subs	r3, r0, #1
 8015fea:	42a1      	cmp	r1, r4
 8015fec:	d008      	beq.n	8016000 <memmove+0x28>
 8015fee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015ff2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015ff6:	e7f8      	b.n	8015fea <memmove+0x12>
 8015ff8:	4402      	add	r2, r0
 8015ffa:	4601      	mov	r1, r0
 8015ffc:	428a      	cmp	r2, r1
 8015ffe:	d100      	bne.n	8016002 <memmove+0x2a>
 8016000:	bd10      	pop	{r4, pc}
 8016002:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016006:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801600a:	e7f7      	b.n	8015ffc <memmove+0x24>

0801600c <strncmp>:
 801600c:	b510      	push	{r4, lr}
 801600e:	b16a      	cbz	r2, 801602c <strncmp+0x20>
 8016010:	3901      	subs	r1, #1
 8016012:	1884      	adds	r4, r0, r2
 8016014:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016018:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801601c:	429a      	cmp	r2, r3
 801601e:	d103      	bne.n	8016028 <strncmp+0x1c>
 8016020:	42a0      	cmp	r0, r4
 8016022:	d001      	beq.n	8016028 <strncmp+0x1c>
 8016024:	2a00      	cmp	r2, #0
 8016026:	d1f5      	bne.n	8016014 <strncmp+0x8>
 8016028:	1ad0      	subs	r0, r2, r3
 801602a:	bd10      	pop	{r4, pc}
 801602c:	4610      	mov	r0, r2
 801602e:	e7fc      	b.n	801602a <strncmp+0x1e>

08016030 <_sbrk_r>:
 8016030:	b538      	push	{r3, r4, r5, lr}
 8016032:	4d06      	ldr	r5, [pc, #24]	@ (801604c <_sbrk_r+0x1c>)
 8016034:	2300      	movs	r3, #0
 8016036:	4604      	mov	r4, r0
 8016038:	4608      	mov	r0, r1
 801603a:	602b      	str	r3, [r5, #0]
 801603c:	f7fc f876 	bl	801212c <_sbrk>
 8016040:	1c43      	adds	r3, r0, #1
 8016042:	d102      	bne.n	801604a <_sbrk_r+0x1a>
 8016044:	682b      	ldr	r3, [r5, #0]
 8016046:	b103      	cbz	r3, 801604a <_sbrk_r+0x1a>
 8016048:	6023      	str	r3, [r4, #0]
 801604a:	bd38      	pop	{r3, r4, r5, pc}
 801604c:	24001240 	.word	0x24001240

08016050 <memcpy>:
 8016050:	440a      	add	r2, r1
 8016052:	4291      	cmp	r1, r2
 8016054:	f100 33ff 	add.w	r3, r0, #4294967295
 8016058:	d100      	bne.n	801605c <memcpy+0xc>
 801605a:	4770      	bx	lr
 801605c:	b510      	push	{r4, lr}
 801605e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016062:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016066:	4291      	cmp	r1, r2
 8016068:	d1f9      	bne.n	801605e <memcpy+0xe>
 801606a:	bd10      	pop	{r4, pc}
 801606c:	0000      	movs	r0, r0
	...

08016070 <nan>:
 8016070:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016078 <nan+0x8>
 8016074:	4770      	bx	lr
 8016076:	bf00      	nop
 8016078:	00000000 	.word	0x00000000
 801607c:	7ff80000 	.word	0x7ff80000

08016080 <__assert_func>:
 8016080:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016082:	4614      	mov	r4, r2
 8016084:	461a      	mov	r2, r3
 8016086:	4b09      	ldr	r3, [pc, #36]	@ (80160ac <__assert_func+0x2c>)
 8016088:	681b      	ldr	r3, [r3, #0]
 801608a:	4605      	mov	r5, r0
 801608c:	68d8      	ldr	r0, [r3, #12]
 801608e:	b14c      	cbz	r4, 80160a4 <__assert_func+0x24>
 8016090:	4b07      	ldr	r3, [pc, #28]	@ (80160b0 <__assert_func+0x30>)
 8016092:	9100      	str	r1, [sp, #0]
 8016094:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016098:	4906      	ldr	r1, [pc, #24]	@ (80160b4 <__assert_func+0x34>)
 801609a:	462b      	mov	r3, r5
 801609c:	f000 fba8 	bl	80167f0 <fiprintf>
 80160a0:	f000 fbb8 	bl	8016814 <abort>
 80160a4:	4b04      	ldr	r3, [pc, #16]	@ (80160b8 <__assert_func+0x38>)
 80160a6:	461c      	mov	r4, r3
 80160a8:	e7f3      	b.n	8016092 <__assert_func+0x12>
 80160aa:	bf00      	nop
 80160ac:	2400039c 	.word	0x2400039c
 80160b0:	0801dff2 	.word	0x0801dff2
 80160b4:	0801dfff 	.word	0x0801dfff
 80160b8:	0801e02d 	.word	0x0801e02d

080160bc <_calloc_r>:
 80160bc:	b570      	push	{r4, r5, r6, lr}
 80160be:	fba1 5402 	umull	r5, r4, r1, r2
 80160c2:	b934      	cbnz	r4, 80160d2 <_calloc_r+0x16>
 80160c4:	4629      	mov	r1, r5
 80160c6:	f7fe fa19 	bl	80144fc <_malloc_r>
 80160ca:	4606      	mov	r6, r0
 80160cc:	b928      	cbnz	r0, 80160da <_calloc_r+0x1e>
 80160ce:	4630      	mov	r0, r6
 80160d0:	bd70      	pop	{r4, r5, r6, pc}
 80160d2:	220c      	movs	r2, #12
 80160d4:	6002      	str	r2, [r0, #0]
 80160d6:	2600      	movs	r6, #0
 80160d8:	e7f9      	b.n	80160ce <_calloc_r+0x12>
 80160da:	462a      	mov	r2, r5
 80160dc:	4621      	mov	r1, r4
 80160de:	f7fd fb2b 	bl	8013738 <memset>
 80160e2:	e7f4      	b.n	80160ce <_calloc_r+0x12>

080160e4 <rshift>:
 80160e4:	6903      	ldr	r3, [r0, #16]
 80160e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80160ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80160ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 80160f2:	f100 0414 	add.w	r4, r0, #20
 80160f6:	dd45      	ble.n	8016184 <rshift+0xa0>
 80160f8:	f011 011f 	ands.w	r1, r1, #31
 80160fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016100:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016104:	d10c      	bne.n	8016120 <rshift+0x3c>
 8016106:	f100 0710 	add.w	r7, r0, #16
 801610a:	4629      	mov	r1, r5
 801610c:	42b1      	cmp	r1, r6
 801610e:	d334      	bcc.n	801617a <rshift+0x96>
 8016110:	1a9b      	subs	r3, r3, r2
 8016112:	009b      	lsls	r3, r3, #2
 8016114:	1eea      	subs	r2, r5, #3
 8016116:	4296      	cmp	r6, r2
 8016118:	bf38      	it	cc
 801611a:	2300      	movcc	r3, #0
 801611c:	4423      	add	r3, r4
 801611e:	e015      	b.n	801614c <rshift+0x68>
 8016120:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016124:	f1c1 0820 	rsb	r8, r1, #32
 8016128:	40cf      	lsrs	r7, r1
 801612a:	f105 0e04 	add.w	lr, r5, #4
 801612e:	46a1      	mov	r9, r4
 8016130:	4576      	cmp	r6, lr
 8016132:	46f4      	mov	ip, lr
 8016134:	d815      	bhi.n	8016162 <rshift+0x7e>
 8016136:	1a9a      	subs	r2, r3, r2
 8016138:	0092      	lsls	r2, r2, #2
 801613a:	3a04      	subs	r2, #4
 801613c:	3501      	adds	r5, #1
 801613e:	42ae      	cmp	r6, r5
 8016140:	bf38      	it	cc
 8016142:	2200      	movcc	r2, #0
 8016144:	18a3      	adds	r3, r4, r2
 8016146:	50a7      	str	r7, [r4, r2]
 8016148:	b107      	cbz	r7, 801614c <rshift+0x68>
 801614a:	3304      	adds	r3, #4
 801614c:	1b1a      	subs	r2, r3, r4
 801614e:	42a3      	cmp	r3, r4
 8016150:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016154:	bf08      	it	eq
 8016156:	2300      	moveq	r3, #0
 8016158:	6102      	str	r2, [r0, #16]
 801615a:	bf08      	it	eq
 801615c:	6143      	streq	r3, [r0, #20]
 801615e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016162:	f8dc c000 	ldr.w	ip, [ip]
 8016166:	fa0c fc08 	lsl.w	ip, ip, r8
 801616a:	ea4c 0707 	orr.w	r7, ip, r7
 801616e:	f849 7b04 	str.w	r7, [r9], #4
 8016172:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016176:	40cf      	lsrs	r7, r1
 8016178:	e7da      	b.n	8016130 <rshift+0x4c>
 801617a:	f851 cb04 	ldr.w	ip, [r1], #4
 801617e:	f847 cf04 	str.w	ip, [r7, #4]!
 8016182:	e7c3      	b.n	801610c <rshift+0x28>
 8016184:	4623      	mov	r3, r4
 8016186:	e7e1      	b.n	801614c <rshift+0x68>

08016188 <__hexdig_fun>:
 8016188:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801618c:	2b09      	cmp	r3, #9
 801618e:	d802      	bhi.n	8016196 <__hexdig_fun+0xe>
 8016190:	3820      	subs	r0, #32
 8016192:	b2c0      	uxtb	r0, r0
 8016194:	4770      	bx	lr
 8016196:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801619a:	2b05      	cmp	r3, #5
 801619c:	d801      	bhi.n	80161a2 <__hexdig_fun+0x1a>
 801619e:	3847      	subs	r0, #71	@ 0x47
 80161a0:	e7f7      	b.n	8016192 <__hexdig_fun+0xa>
 80161a2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80161a6:	2b05      	cmp	r3, #5
 80161a8:	d801      	bhi.n	80161ae <__hexdig_fun+0x26>
 80161aa:	3827      	subs	r0, #39	@ 0x27
 80161ac:	e7f1      	b.n	8016192 <__hexdig_fun+0xa>
 80161ae:	2000      	movs	r0, #0
 80161b0:	4770      	bx	lr
	...

080161b4 <__gethex>:
 80161b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161b8:	b085      	sub	sp, #20
 80161ba:	468a      	mov	sl, r1
 80161bc:	9302      	str	r3, [sp, #8]
 80161be:	680b      	ldr	r3, [r1, #0]
 80161c0:	9001      	str	r0, [sp, #4]
 80161c2:	4690      	mov	r8, r2
 80161c4:	1c9c      	adds	r4, r3, #2
 80161c6:	46a1      	mov	r9, r4
 80161c8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80161cc:	2830      	cmp	r0, #48	@ 0x30
 80161ce:	d0fa      	beq.n	80161c6 <__gethex+0x12>
 80161d0:	eba9 0303 	sub.w	r3, r9, r3
 80161d4:	f1a3 0b02 	sub.w	fp, r3, #2
 80161d8:	f7ff ffd6 	bl	8016188 <__hexdig_fun>
 80161dc:	4605      	mov	r5, r0
 80161de:	2800      	cmp	r0, #0
 80161e0:	d168      	bne.n	80162b4 <__gethex+0x100>
 80161e2:	49a0      	ldr	r1, [pc, #640]	@ (8016464 <__gethex+0x2b0>)
 80161e4:	2201      	movs	r2, #1
 80161e6:	4648      	mov	r0, r9
 80161e8:	f7ff ff10 	bl	801600c <strncmp>
 80161ec:	4607      	mov	r7, r0
 80161ee:	2800      	cmp	r0, #0
 80161f0:	d167      	bne.n	80162c2 <__gethex+0x10e>
 80161f2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80161f6:	4626      	mov	r6, r4
 80161f8:	f7ff ffc6 	bl	8016188 <__hexdig_fun>
 80161fc:	2800      	cmp	r0, #0
 80161fe:	d062      	beq.n	80162c6 <__gethex+0x112>
 8016200:	4623      	mov	r3, r4
 8016202:	7818      	ldrb	r0, [r3, #0]
 8016204:	2830      	cmp	r0, #48	@ 0x30
 8016206:	4699      	mov	r9, r3
 8016208:	f103 0301 	add.w	r3, r3, #1
 801620c:	d0f9      	beq.n	8016202 <__gethex+0x4e>
 801620e:	f7ff ffbb 	bl	8016188 <__hexdig_fun>
 8016212:	fab0 f580 	clz	r5, r0
 8016216:	096d      	lsrs	r5, r5, #5
 8016218:	f04f 0b01 	mov.w	fp, #1
 801621c:	464a      	mov	r2, r9
 801621e:	4616      	mov	r6, r2
 8016220:	3201      	adds	r2, #1
 8016222:	7830      	ldrb	r0, [r6, #0]
 8016224:	f7ff ffb0 	bl	8016188 <__hexdig_fun>
 8016228:	2800      	cmp	r0, #0
 801622a:	d1f8      	bne.n	801621e <__gethex+0x6a>
 801622c:	498d      	ldr	r1, [pc, #564]	@ (8016464 <__gethex+0x2b0>)
 801622e:	2201      	movs	r2, #1
 8016230:	4630      	mov	r0, r6
 8016232:	f7ff feeb 	bl	801600c <strncmp>
 8016236:	2800      	cmp	r0, #0
 8016238:	d13f      	bne.n	80162ba <__gethex+0x106>
 801623a:	b944      	cbnz	r4, 801624e <__gethex+0x9a>
 801623c:	1c74      	adds	r4, r6, #1
 801623e:	4622      	mov	r2, r4
 8016240:	4616      	mov	r6, r2
 8016242:	3201      	adds	r2, #1
 8016244:	7830      	ldrb	r0, [r6, #0]
 8016246:	f7ff ff9f 	bl	8016188 <__hexdig_fun>
 801624a:	2800      	cmp	r0, #0
 801624c:	d1f8      	bne.n	8016240 <__gethex+0x8c>
 801624e:	1ba4      	subs	r4, r4, r6
 8016250:	00a7      	lsls	r7, r4, #2
 8016252:	7833      	ldrb	r3, [r6, #0]
 8016254:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8016258:	2b50      	cmp	r3, #80	@ 0x50
 801625a:	d13e      	bne.n	80162da <__gethex+0x126>
 801625c:	7873      	ldrb	r3, [r6, #1]
 801625e:	2b2b      	cmp	r3, #43	@ 0x2b
 8016260:	d033      	beq.n	80162ca <__gethex+0x116>
 8016262:	2b2d      	cmp	r3, #45	@ 0x2d
 8016264:	d034      	beq.n	80162d0 <__gethex+0x11c>
 8016266:	1c71      	adds	r1, r6, #1
 8016268:	2400      	movs	r4, #0
 801626a:	7808      	ldrb	r0, [r1, #0]
 801626c:	f7ff ff8c 	bl	8016188 <__hexdig_fun>
 8016270:	1e43      	subs	r3, r0, #1
 8016272:	b2db      	uxtb	r3, r3
 8016274:	2b18      	cmp	r3, #24
 8016276:	d830      	bhi.n	80162da <__gethex+0x126>
 8016278:	f1a0 0210 	sub.w	r2, r0, #16
 801627c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016280:	f7ff ff82 	bl	8016188 <__hexdig_fun>
 8016284:	f100 3cff 	add.w	ip, r0, #4294967295
 8016288:	fa5f fc8c 	uxtb.w	ip, ip
 801628c:	f1bc 0f18 	cmp.w	ip, #24
 8016290:	f04f 030a 	mov.w	r3, #10
 8016294:	d91e      	bls.n	80162d4 <__gethex+0x120>
 8016296:	b104      	cbz	r4, 801629a <__gethex+0xe6>
 8016298:	4252      	negs	r2, r2
 801629a:	4417      	add	r7, r2
 801629c:	f8ca 1000 	str.w	r1, [sl]
 80162a0:	b1ed      	cbz	r5, 80162de <__gethex+0x12a>
 80162a2:	f1bb 0f00 	cmp.w	fp, #0
 80162a6:	bf0c      	ite	eq
 80162a8:	2506      	moveq	r5, #6
 80162aa:	2500      	movne	r5, #0
 80162ac:	4628      	mov	r0, r5
 80162ae:	b005      	add	sp, #20
 80162b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162b4:	2500      	movs	r5, #0
 80162b6:	462c      	mov	r4, r5
 80162b8:	e7b0      	b.n	801621c <__gethex+0x68>
 80162ba:	2c00      	cmp	r4, #0
 80162bc:	d1c7      	bne.n	801624e <__gethex+0x9a>
 80162be:	4627      	mov	r7, r4
 80162c0:	e7c7      	b.n	8016252 <__gethex+0x9e>
 80162c2:	464e      	mov	r6, r9
 80162c4:	462f      	mov	r7, r5
 80162c6:	2501      	movs	r5, #1
 80162c8:	e7c3      	b.n	8016252 <__gethex+0x9e>
 80162ca:	2400      	movs	r4, #0
 80162cc:	1cb1      	adds	r1, r6, #2
 80162ce:	e7cc      	b.n	801626a <__gethex+0xb6>
 80162d0:	2401      	movs	r4, #1
 80162d2:	e7fb      	b.n	80162cc <__gethex+0x118>
 80162d4:	fb03 0002 	mla	r0, r3, r2, r0
 80162d8:	e7ce      	b.n	8016278 <__gethex+0xc4>
 80162da:	4631      	mov	r1, r6
 80162dc:	e7de      	b.n	801629c <__gethex+0xe8>
 80162de:	eba6 0309 	sub.w	r3, r6, r9
 80162e2:	3b01      	subs	r3, #1
 80162e4:	4629      	mov	r1, r5
 80162e6:	2b07      	cmp	r3, #7
 80162e8:	dc0a      	bgt.n	8016300 <__gethex+0x14c>
 80162ea:	9801      	ldr	r0, [sp, #4]
 80162ec:	f7fe f992 	bl	8014614 <_Balloc>
 80162f0:	4604      	mov	r4, r0
 80162f2:	b940      	cbnz	r0, 8016306 <__gethex+0x152>
 80162f4:	4b5c      	ldr	r3, [pc, #368]	@ (8016468 <__gethex+0x2b4>)
 80162f6:	4602      	mov	r2, r0
 80162f8:	21e4      	movs	r1, #228	@ 0xe4
 80162fa:	485c      	ldr	r0, [pc, #368]	@ (801646c <__gethex+0x2b8>)
 80162fc:	f7ff fec0 	bl	8016080 <__assert_func>
 8016300:	3101      	adds	r1, #1
 8016302:	105b      	asrs	r3, r3, #1
 8016304:	e7ef      	b.n	80162e6 <__gethex+0x132>
 8016306:	f100 0a14 	add.w	sl, r0, #20
 801630a:	2300      	movs	r3, #0
 801630c:	4655      	mov	r5, sl
 801630e:	469b      	mov	fp, r3
 8016310:	45b1      	cmp	r9, r6
 8016312:	d337      	bcc.n	8016384 <__gethex+0x1d0>
 8016314:	f845 bb04 	str.w	fp, [r5], #4
 8016318:	eba5 050a 	sub.w	r5, r5, sl
 801631c:	10ad      	asrs	r5, r5, #2
 801631e:	6125      	str	r5, [r4, #16]
 8016320:	4658      	mov	r0, fp
 8016322:	f7fe fa69 	bl	80147f8 <__hi0bits>
 8016326:	016d      	lsls	r5, r5, #5
 8016328:	f8d8 6000 	ldr.w	r6, [r8]
 801632c:	1a2d      	subs	r5, r5, r0
 801632e:	42b5      	cmp	r5, r6
 8016330:	dd54      	ble.n	80163dc <__gethex+0x228>
 8016332:	1bad      	subs	r5, r5, r6
 8016334:	4629      	mov	r1, r5
 8016336:	4620      	mov	r0, r4
 8016338:	f7fe fdf2 	bl	8014f20 <__any_on>
 801633c:	4681      	mov	r9, r0
 801633e:	b178      	cbz	r0, 8016360 <__gethex+0x1ac>
 8016340:	1e6b      	subs	r3, r5, #1
 8016342:	1159      	asrs	r1, r3, #5
 8016344:	f003 021f 	and.w	r2, r3, #31
 8016348:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801634c:	f04f 0901 	mov.w	r9, #1
 8016350:	fa09 f202 	lsl.w	r2, r9, r2
 8016354:	420a      	tst	r2, r1
 8016356:	d003      	beq.n	8016360 <__gethex+0x1ac>
 8016358:	454b      	cmp	r3, r9
 801635a:	dc36      	bgt.n	80163ca <__gethex+0x216>
 801635c:	f04f 0902 	mov.w	r9, #2
 8016360:	4629      	mov	r1, r5
 8016362:	4620      	mov	r0, r4
 8016364:	f7ff febe 	bl	80160e4 <rshift>
 8016368:	442f      	add	r7, r5
 801636a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801636e:	42bb      	cmp	r3, r7
 8016370:	da42      	bge.n	80163f8 <__gethex+0x244>
 8016372:	9801      	ldr	r0, [sp, #4]
 8016374:	4621      	mov	r1, r4
 8016376:	f7fe f98d 	bl	8014694 <_Bfree>
 801637a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801637c:	2300      	movs	r3, #0
 801637e:	6013      	str	r3, [r2, #0]
 8016380:	25a3      	movs	r5, #163	@ 0xa3
 8016382:	e793      	b.n	80162ac <__gethex+0xf8>
 8016384:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8016388:	2a2e      	cmp	r2, #46	@ 0x2e
 801638a:	d012      	beq.n	80163b2 <__gethex+0x1fe>
 801638c:	2b20      	cmp	r3, #32
 801638e:	d104      	bne.n	801639a <__gethex+0x1e6>
 8016390:	f845 bb04 	str.w	fp, [r5], #4
 8016394:	f04f 0b00 	mov.w	fp, #0
 8016398:	465b      	mov	r3, fp
 801639a:	7830      	ldrb	r0, [r6, #0]
 801639c:	9303      	str	r3, [sp, #12]
 801639e:	f7ff fef3 	bl	8016188 <__hexdig_fun>
 80163a2:	9b03      	ldr	r3, [sp, #12]
 80163a4:	f000 000f 	and.w	r0, r0, #15
 80163a8:	4098      	lsls	r0, r3
 80163aa:	ea4b 0b00 	orr.w	fp, fp, r0
 80163ae:	3304      	adds	r3, #4
 80163b0:	e7ae      	b.n	8016310 <__gethex+0x15c>
 80163b2:	45b1      	cmp	r9, r6
 80163b4:	d8ea      	bhi.n	801638c <__gethex+0x1d8>
 80163b6:	492b      	ldr	r1, [pc, #172]	@ (8016464 <__gethex+0x2b0>)
 80163b8:	9303      	str	r3, [sp, #12]
 80163ba:	2201      	movs	r2, #1
 80163bc:	4630      	mov	r0, r6
 80163be:	f7ff fe25 	bl	801600c <strncmp>
 80163c2:	9b03      	ldr	r3, [sp, #12]
 80163c4:	2800      	cmp	r0, #0
 80163c6:	d1e1      	bne.n	801638c <__gethex+0x1d8>
 80163c8:	e7a2      	b.n	8016310 <__gethex+0x15c>
 80163ca:	1ea9      	subs	r1, r5, #2
 80163cc:	4620      	mov	r0, r4
 80163ce:	f7fe fda7 	bl	8014f20 <__any_on>
 80163d2:	2800      	cmp	r0, #0
 80163d4:	d0c2      	beq.n	801635c <__gethex+0x1a8>
 80163d6:	f04f 0903 	mov.w	r9, #3
 80163da:	e7c1      	b.n	8016360 <__gethex+0x1ac>
 80163dc:	da09      	bge.n	80163f2 <__gethex+0x23e>
 80163de:	1b75      	subs	r5, r6, r5
 80163e0:	4621      	mov	r1, r4
 80163e2:	9801      	ldr	r0, [sp, #4]
 80163e4:	462a      	mov	r2, r5
 80163e6:	f7fe fb65 	bl	8014ab4 <__lshift>
 80163ea:	1b7f      	subs	r7, r7, r5
 80163ec:	4604      	mov	r4, r0
 80163ee:	f100 0a14 	add.w	sl, r0, #20
 80163f2:	f04f 0900 	mov.w	r9, #0
 80163f6:	e7b8      	b.n	801636a <__gethex+0x1b6>
 80163f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80163fc:	42bd      	cmp	r5, r7
 80163fe:	dd6f      	ble.n	80164e0 <__gethex+0x32c>
 8016400:	1bed      	subs	r5, r5, r7
 8016402:	42ae      	cmp	r6, r5
 8016404:	dc34      	bgt.n	8016470 <__gethex+0x2bc>
 8016406:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801640a:	2b02      	cmp	r3, #2
 801640c:	d022      	beq.n	8016454 <__gethex+0x2a0>
 801640e:	2b03      	cmp	r3, #3
 8016410:	d024      	beq.n	801645c <__gethex+0x2a8>
 8016412:	2b01      	cmp	r3, #1
 8016414:	d115      	bne.n	8016442 <__gethex+0x28e>
 8016416:	42ae      	cmp	r6, r5
 8016418:	d113      	bne.n	8016442 <__gethex+0x28e>
 801641a:	2e01      	cmp	r6, #1
 801641c:	d10b      	bne.n	8016436 <__gethex+0x282>
 801641e:	9a02      	ldr	r2, [sp, #8]
 8016420:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016424:	6013      	str	r3, [r2, #0]
 8016426:	2301      	movs	r3, #1
 8016428:	6123      	str	r3, [r4, #16]
 801642a:	f8ca 3000 	str.w	r3, [sl]
 801642e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016430:	2562      	movs	r5, #98	@ 0x62
 8016432:	601c      	str	r4, [r3, #0]
 8016434:	e73a      	b.n	80162ac <__gethex+0xf8>
 8016436:	1e71      	subs	r1, r6, #1
 8016438:	4620      	mov	r0, r4
 801643a:	f7fe fd71 	bl	8014f20 <__any_on>
 801643e:	2800      	cmp	r0, #0
 8016440:	d1ed      	bne.n	801641e <__gethex+0x26a>
 8016442:	9801      	ldr	r0, [sp, #4]
 8016444:	4621      	mov	r1, r4
 8016446:	f7fe f925 	bl	8014694 <_Bfree>
 801644a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801644c:	2300      	movs	r3, #0
 801644e:	6013      	str	r3, [r2, #0]
 8016450:	2550      	movs	r5, #80	@ 0x50
 8016452:	e72b      	b.n	80162ac <__gethex+0xf8>
 8016454:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016456:	2b00      	cmp	r3, #0
 8016458:	d1f3      	bne.n	8016442 <__gethex+0x28e>
 801645a:	e7e0      	b.n	801641e <__gethex+0x26a>
 801645c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801645e:	2b00      	cmp	r3, #0
 8016460:	d1dd      	bne.n	801641e <__gethex+0x26a>
 8016462:	e7ee      	b.n	8016442 <__gethex+0x28e>
 8016464:	0801dfd7 	.word	0x0801dfd7
 8016468:	0801df6d 	.word	0x0801df6d
 801646c:	0801e02e 	.word	0x0801e02e
 8016470:	1e6f      	subs	r7, r5, #1
 8016472:	f1b9 0f00 	cmp.w	r9, #0
 8016476:	d130      	bne.n	80164da <__gethex+0x326>
 8016478:	b127      	cbz	r7, 8016484 <__gethex+0x2d0>
 801647a:	4639      	mov	r1, r7
 801647c:	4620      	mov	r0, r4
 801647e:	f7fe fd4f 	bl	8014f20 <__any_on>
 8016482:	4681      	mov	r9, r0
 8016484:	117a      	asrs	r2, r7, #5
 8016486:	2301      	movs	r3, #1
 8016488:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801648c:	f007 071f 	and.w	r7, r7, #31
 8016490:	40bb      	lsls	r3, r7
 8016492:	4213      	tst	r3, r2
 8016494:	4629      	mov	r1, r5
 8016496:	4620      	mov	r0, r4
 8016498:	bf18      	it	ne
 801649a:	f049 0902 	orrne.w	r9, r9, #2
 801649e:	f7ff fe21 	bl	80160e4 <rshift>
 80164a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80164a6:	1b76      	subs	r6, r6, r5
 80164a8:	2502      	movs	r5, #2
 80164aa:	f1b9 0f00 	cmp.w	r9, #0
 80164ae:	d047      	beq.n	8016540 <__gethex+0x38c>
 80164b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80164b4:	2b02      	cmp	r3, #2
 80164b6:	d015      	beq.n	80164e4 <__gethex+0x330>
 80164b8:	2b03      	cmp	r3, #3
 80164ba:	d017      	beq.n	80164ec <__gethex+0x338>
 80164bc:	2b01      	cmp	r3, #1
 80164be:	d109      	bne.n	80164d4 <__gethex+0x320>
 80164c0:	f019 0f02 	tst.w	r9, #2
 80164c4:	d006      	beq.n	80164d4 <__gethex+0x320>
 80164c6:	f8da 3000 	ldr.w	r3, [sl]
 80164ca:	ea49 0903 	orr.w	r9, r9, r3
 80164ce:	f019 0f01 	tst.w	r9, #1
 80164d2:	d10e      	bne.n	80164f2 <__gethex+0x33e>
 80164d4:	f045 0510 	orr.w	r5, r5, #16
 80164d8:	e032      	b.n	8016540 <__gethex+0x38c>
 80164da:	f04f 0901 	mov.w	r9, #1
 80164de:	e7d1      	b.n	8016484 <__gethex+0x2d0>
 80164e0:	2501      	movs	r5, #1
 80164e2:	e7e2      	b.n	80164aa <__gethex+0x2f6>
 80164e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80164e6:	f1c3 0301 	rsb	r3, r3, #1
 80164ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80164ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d0f0      	beq.n	80164d4 <__gethex+0x320>
 80164f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80164f6:	f104 0314 	add.w	r3, r4, #20
 80164fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80164fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8016502:	f04f 0c00 	mov.w	ip, #0
 8016506:	4618      	mov	r0, r3
 8016508:	f853 2b04 	ldr.w	r2, [r3], #4
 801650c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016510:	d01b      	beq.n	801654a <__gethex+0x396>
 8016512:	3201      	adds	r2, #1
 8016514:	6002      	str	r2, [r0, #0]
 8016516:	2d02      	cmp	r5, #2
 8016518:	f104 0314 	add.w	r3, r4, #20
 801651c:	d13c      	bne.n	8016598 <__gethex+0x3e4>
 801651e:	f8d8 2000 	ldr.w	r2, [r8]
 8016522:	3a01      	subs	r2, #1
 8016524:	42b2      	cmp	r2, r6
 8016526:	d109      	bne.n	801653c <__gethex+0x388>
 8016528:	1171      	asrs	r1, r6, #5
 801652a:	2201      	movs	r2, #1
 801652c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016530:	f006 061f 	and.w	r6, r6, #31
 8016534:	fa02 f606 	lsl.w	r6, r2, r6
 8016538:	421e      	tst	r6, r3
 801653a:	d13a      	bne.n	80165b2 <__gethex+0x3fe>
 801653c:	f045 0520 	orr.w	r5, r5, #32
 8016540:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016542:	601c      	str	r4, [r3, #0]
 8016544:	9b02      	ldr	r3, [sp, #8]
 8016546:	601f      	str	r7, [r3, #0]
 8016548:	e6b0      	b.n	80162ac <__gethex+0xf8>
 801654a:	4299      	cmp	r1, r3
 801654c:	f843 cc04 	str.w	ip, [r3, #-4]
 8016550:	d8d9      	bhi.n	8016506 <__gethex+0x352>
 8016552:	68a3      	ldr	r3, [r4, #8]
 8016554:	459b      	cmp	fp, r3
 8016556:	db17      	blt.n	8016588 <__gethex+0x3d4>
 8016558:	6861      	ldr	r1, [r4, #4]
 801655a:	9801      	ldr	r0, [sp, #4]
 801655c:	3101      	adds	r1, #1
 801655e:	f7fe f859 	bl	8014614 <_Balloc>
 8016562:	4681      	mov	r9, r0
 8016564:	b918      	cbnz	r0, 801656e <__gethex+0x3ba>
 8016566:	4b1a      	ldr	r3, [pc, #104]	@ (80165d0 <__gethex+0x41c>)
 8016568:	4602      	mov	r2, r0
 801656a:	2184      	movs	r1, #132	@ 0x84
 801656c:	e6c5      	b.n	80162fa <__gethex+0x146>
 801656e:	6922      	ldr	r2, [r4, #16]
 8016570:	3202      	adds	r2, #2
 8016572:	f104 010c 	add.w	r1, r4, #12
 8016576:	0092      	lsls	r2, r2, #2
 8016578:	300c      	adds	r0, #12
 801657a:	f7ff fd69 	bl	8016050 <memcpy>
 801657e:	4621      	mov	r1, r4
 8016580:	9801      	ldr	r0, [sp, #4]
 8016582:	f7fe f887 	bl	8014694 <_Bfree>
 8016586:	464c      	mov	r4, r9
 8016588:	6923      	ldr	r3, [r4, #16]
 801658a:	1c5a      	adds	r2, r3, #1
 801658c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016590:	6122      	str	r2, [r4, #16]
 8016592:	2201      	movs	r2, #1
 8016594:	615a      	str	r2, [r3, #20]
 8016596:	e7be      	b.n	8016516 <__gethex+0x362>
 8016598:	6922      	ldr	r2, [r4, #16]
 801659a:	455a      	cmp	r2, fp
 801659c:	dd0b      	ble.n	80165b6 <__gethex+0x402>
 801659e:	2101      	movs	r1, #1
 80165a0:	4620      	mov	r0, r4
 80165a2:	f7ff fd9f 	bl	80160e4 <rshift>
 80165a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80165aa:	3701      	adds	r7, #1
 80165ac:	42bb      	cmp	r3, r7
 80165ae:	f6ff aee0 	blt.w	8016372 <__gethex+0x1be>
 80165b2:	2501      	movs	r5, #1
 80165b4:	e7c2      	b.n	801653c <__gethex+0x388>
 80165b6:	f016 061f 	ands.w	r6, r6, #31
 80165ba:	d0fa      	beq.n	80165b2 <__gethex+0x3fe>
 80165bc:	4453      	add	r3, sl
 80165be:	f1c6 0620 	rsb	r6, r6, #32
 80165c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80165c6:	f7fe f917 	bl	80147f8 <__hi0bits>
 80165ca:	42b0      	cmp	r0, r6
 80165cc:	dbe7      	blt.n	801659e <__gethex+0x3ea>
 80165ce:	e7f0      	b.n	80165b2 <__gethex+0x3fe>
 80165d0:	0801df6d 	.word	0x0801df6d

080165d4 <L_shift>:
 80165d4:	f1c2 0208 	rsb	r2, r2, #8
 80165d8:	0092      	lsls	r2, r2, #2
 80165da:	b570      	push	{r4, r5, r6, lr}
 80165dc:	f1c2 0620 	rsb	r6, r2, #32
 80165e0:	6843      	ldr	r3, [r0, #4]
 80165e2:	6804      	ldr	r4, [r0, #0]
 80165e4:	fa03 f506 	lsl.w	r5, r3, r6
 80165e8:	432c      	orrs	r4, r5
 80165ea:	40d3      	lsrs	r3, r2
 80165ec:	6004      	str	r4, [r0, #0]
 80165ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80165f2:	4288      	cmp	r0, r1
 80165f4:	d3f4      	bcc.n	80165e0 <L_shift+0xc>
 80165f6:	bd70      	pop	{r4, r5, r6, pc}

080165f8 <__match>:
 80165f8:	b530      	push	{r4, r5, lr}
 80165fa:	6803      	ldr	r3, [r0, #0]
 80165fc:	3301      	adds	r3, #1
 80165fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016602:	b914      	cbnz	r4, 801660a <__match+0x12>
 8016604:	6003      	str	r3, [r0, #0]
 8016606:	2001      	movs	r0, #1
 8016608:	bd30      	pop	{r4, r5, pc}
 801660a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801660e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8016612:	2d19      	cmp	r5, #25
 8016614:	bf98      	it	ls
 8016616:	3220      	addls	r2, #32
 8016618:	42a2      	cmp	r2, r4
 801661a:	d0f0      	beq.n	80165fe <__match+0x6>
 801661c:	2000      	movs	r0, #0
 801661e:	e7f3      	b.n	8016608 <__match+0x10>

08016620 <__hexnan>:
 8016620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016624:	680b      	ldr	r3, [r1, #0]
 8016626:	6801      	ldr	r1, [r0, #0]
 8016628:	115e      	asrs	r6, r3, #5
 801662a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801662e:	f013 031f 	ands.w	r3, r3, #31
 8016632:	b087      	sub	sp, #28
 8016634:	bf18      	it	ne
 8016636:	3604      	addne	r6, #4
 8016638:	2500      	movs	r5, #0
 801663a:	1f37      	subs	r7, r6, #4
 801663c:	4682      	mov	sl, r0
 801663e:	4690      	mov	r8, r2
 8016640:	9301      	str	r3, [sp, #4]
 8016642:	f846 5c04 	str.w	r5, [r6, #-4]
 8016646:	46b9      	mov	r9, r7
 8016648:	463c      	mov	r4, r7
 801664a:	9502      	str	r5, [sp, #8]
 801664c:	46ab      	mov	fp, r5
 801664e:	784a      	ldrb	r2, [r1, #1]
 8016650:	1c4b      	adds	r3, r1, #1
 8016652:	9303      	str	r3, [sp, #12]
 8016654:	b342      	cbz	r2, 80166a8 <__hexnan+0x88>
 8016656:	4610      	mov	r0, r2
 8016658:	9105      	str	r1, [sp, #20]
 801665a:	9204      	str	r2, [sp, #16]
 801665c:	f7ff fd94 	bl	8016188 <__hexdig_fun>
 8016660:	2800      	cmp	r0, #0
 8016662:	d151      	bne.n	8016708 <__hexnan+0xe8>
 8016664:	9a04      	ldr	r2, [sp, #16]
 8016666:	9905      	ldr	r1, [sp, #20]
 8016668:	2a20      	cmp	r2, #32
 801666a:	d818      	bhi.n	801669e <__hexnan+0x7e>
 801666c:	9b02      	ldr	r3, [sp, #8]
 801666e:	459b      	cmp	fp, r3
 8016670:	dd13      	ble.n	801669a <__hexnan+0x7a>
 8016672:	454c      	cmp	r4, r9
 8016674:	d206      	bcs.n	8016684 <__hexnan+0x64>
 8016676:	2d07      	cmp	r5, #7
 8016678:	dc04      	bgt.n	8016684 <__hexnan+0x64>
 801667a:	462a      	mov	r2, r5
 801667c:	4649      	mov	r1, r9
 801667e:	4620      	mov	r0, r4
 8016680:	f7ff ffa8 	bl	80165d4 <L_shift>
 8016684:	4544      	cmp	r4, r8
 8016686:	d952      	bls.n	801672e <__hexnan+0x10e>
 8016688:	2300      	movs	r3, #0
 801668a:	f1a4 0904 	sub.w	r9, r4, #4
 801668e:	f844 3c04 	str.w	r3, [r4, #-4]
 8016692:	f8cd b008 	str.w	fp, [sp, #8]
 8016696:	464c      	mov	r4, r9
 8016698:	461d      	mov	r5, r3
 801669a:	9903      	ldr	r1, [sp, #12]
 801669c:	e7d7      	b.n	801664e <__hexnan+0x2e>
 801669e:	2a29      	cmp	r2, #41	@ 0x29
 80166a0:	d157      	bne.n	8016752 <__hexnan+0x132>
 80166a2:	3102      	adds	r1, #2
 80166a4:	f8ca 1000 	str.w	r1, [sl]
 80166a8:	f1bb 0f00 	cmp.w	fp, #0
 80166ac:	d051      	beq.n	8016752 <__hexnan+0x132>
 80166ae:	454c      	cmp	r4, r9
 80166b0:	d206      	bcs.n	80166c0 <__hexnan+0xa0>
 80166b2:	2d07      	cmp	r5, #7
 80166b4:	dc04      	bgt.n	80166c0 <__hexnan+0xa0>
 80166b6:	462a      	mov	r2, r5
 80166b8:	4649      	mov	r1, r9
 80166ba:	4620      	mov	r0, r4
 80166bc:	f7ff ff8a 	bl	80165d4 <L_shift>
 80166c0:	4544      	cmp	r4, r8
 80166c2:	d936      	bls.n	8016732 <__hexnan+0x112>
 80166c4:	f1a8 0204 	sub.w	r2, r8, #4
 80166c8:	4623      	mov	r3, r4
 80166ca:	f853 1b04 	ldr.w	r1, [r3], #4
 80166ce:	f842 1f04 	str.w	r1, [r2, #4]!
 80166d2:	429f      	cmp	r7, r3
 80166d4:	d2f9      	bcs.n	80166ca <__hexnan+0xaa>
 80166d6:	1b3b      	subs	r3, r7, r4
 80166d8:	f023 0303 	bic.w	r3, r3, #3
 80166dc:	3304      	adds	r3, #4
 80166de:	3401      	adds	r4, #1
 80166e0:	3e03      	subs	r6, #3
 80166e2:	42b4      	cmp	r4, r6
 80166e4:	bf88      	it	hi
 80166e6:	2304      	movhi	r3, #4
 80166e8:	4443      	add	r3, r8
 80166ea:	2200      	movs	r2, #0
 80166ec:	f843 2b04 	str.w	r2, [r3], #4
 80166f0:	429f      	cmp	r7, r3
 80166f2:	d2fb      	bcs.n	80166ec <__hexnan+0xcc>
 80166f4:	683b      	ldr	r3, [r7, #0]
 80166f6:	b91b      	cbnz	r3, 8016700 <__hexnan+0xe0>
 80166f8:	4547      	cmp	r7, r8
 80166fa:	d128      	bne.n	801674e <__hexnan+0x12e>
 80166fc:	2301      	movs	r3, #1
 80166fe:	603b      	str	r3, [r7, #0]
 8016700:	2005      	movs	r0, #5
 8016702:	b007      	add	sp, #28
 8016704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016708:	3501      	adds	r5, #1
 801670a:	2d08      	cmp	r5, #8
 801670c:	f10b 0b01 	add.w	fp, fp, #1
 8016710:	dd06      	ble.n	8016720 <__hexnan+0x100>
 8016712:	4544      	cmp	r4, r8
 8016714:	d9c1      	bls.n	801669a <__hexnan+0x7a>
 8016716:	2300      	movs	r3, #0
 8016718:	f844 3c04 	str.w	r3, [r4, #-4]
 801671c:	2501      	movs	r5, #1
 801671e:	3c04      	subs	r4, #4
 8016720:	6822      	ldr	r2, [r4, #0]
 8016722:	f000 000f 	and.w	r0, r0, #15
 8016726:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801672a:	6020      	str	r0, [r4, #0]
 801672c:	e7b5      	b.n	801669a <__hexnan+0x7a>
 801672e:	2508      	movs	r5, #8
 8016730:	e7b3      	b.n	801669a <__hexnan+0x7a>
 8016732:	9b01      	ldr	r3, [sp, #4]
 8016734:	2b00      	cmp	r3, #0
 8016736:	d0dd      	beq.n	80166f4 <__hexnan+0xd4>
 8016738:	f1c3 0320 	rsb	r3, r3, #32
 801673c:	f04f 32ff 	mov.w	r2, #4294967295
 8016740:	40da      	lsrs	r2, r3
 8016742:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8016746:	4013      	ands	r3, r2
 8016748:	f846 3c04 	str.w	r3, [r6, #-4]
 801674c:	e7d2      	b.n	80166f4 <__hexnan+0xd4>
 801674e:	3f04      	subs	r7, #4
 8016750:	e7d0      	b.n	80166f4 <__hexnan+0xd4>
 8016752:	2004      	movs	r0, #4
 8016754:	e7d5      	b.n	8016702 <__hexnan+0xe2>

08016756 <__ascii_mbtowc>:
 8016756:	b082      	sub	sp, #8
 8016758:	b901      	cbnz	r1, 801675c <__ascii_mbtowc+0x6>
 801675a:	a901      	add	r1, sp, #4
 801675c:	b142      	cbz	r2, 8016770 <__ascii_mbtowc+0x1a>
 801675e:	b14b      	cbz	r3, 8016774 <__ascii_mbtowc+0x1e>
 8016760:	7813      	ldrb	r3, [r2, #0]
 8016762:	600b      	str	r3, [r1, #0]
 8016764:	7812      	ldrb	r2, [r2, #0]
 8016766:	1e10      	subs	r0, r2, #0
 8016768:	bf18      	it	ne
 801676a:	2001      	movne	r0, #1
 801676c:	b002      	add	sp, #8
 801676e:	4770      	bx	lr
 8016770:	4610      	mov	r0, r2
 8016772:	e7fb      	b.n	801676c <__ascii_mbtowc+0x16>
 8016774:	f06f 0001 	mvn.w	r0, #1
 8016778:	e7f8      	b.n	801676c <__ascii_mbtowc+0x16>

0801677a <_realloc_r>:
 801677a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801677e:	4607      	mov	r7, r0
 8016780:	4614      	mov	r4, r2
 8016782:	460d      	mov	r5, r1
 8016784:	b921      	cbnz	r1, 8016790 <_realloc_r+0x16>
 8016786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801678a:	4611      	mov	r1, r2
 801678c:	f7fd beb6 	b.w	80144fc <_malloc_r>
 8016790:	b92a      	cbnz	r2, 801679e <_realloc_r+0x24>
 8016792:	f7fd fe3f 	bl	8014414 <_free_r>
 8016796:	4625      	mov	r5, r4
 8016798:	4628      	mov	r0, r5
 801679a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801679e:	f000 f840 	bl	8016822 <_malloc_usable_size_r>
 80167a2:	4284      	cmp	r4, r0
 80167a4:	4606      	mov	r6, r0
 80167a6:	d802      	bhi.n	80167ae <_realloc_r+0x34>
 80167a8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80167ac:	d8f4      	bhi.n	8016798 <_realloc_r+0x1e>
 80167ae:	4621      	mov	r1, r4
 80167b0:	4638      	mov	r0, r7
 80167b2:	f7fd fea3 	bl	80144fc <_malloc_r>
 80167b6:	4680      	mov	r8, r0
 80167b8:	b908      	cbnz	r0, 80167be <_realloc_r+0x44>
 80167ba:	4645      	mov	r5, r8
 80167bc:	e7ec      	b.n	8016798 <_realloc_r+0x1e>
 80167be:	42b4      	cmp	r4, r6
 80167c0:	4622      	mov	r2, r4
 80167c2:	4629      	mov	r1, r5
 80167c4:	bf28      	it	cs
 80167c6:	4632      	movcs	r2, r6
 80167c8:	f7ff fc42 	bl	8016050 <memcpy>
 80167cc:	4629      	mov	r1, r5
 80167ce:	4638      	mov	r0, r7
 80167d0:	f7fd fe20 	bl	8014414 <_free_r>
 80167d4:	e7f1      	b.n	80167ba <_realloc_r+0x40>

080167d6 <__ascii_wctomb>:
 80167d6:	4603      	mov	r3, r0
 80167d8:	4608      	mov	r0, r1
 80167da:	b141      	cbz	r1, 80167ee <__ascii_wctomb+0x18>
 80167dc:	2aff      	cmp	r2, #255	@ 0xff
 80167de:	d904      	bls.n	80167ea <__ascii_wctomb+0x14>
 80167e0:	228a      	movs	r2, #138	@ 0x8a
 80167e2:	601a      	str	r2, [r3, #0]
 80167e4:	f04f 30ff 	mov.w	r0, #4294967295
 80167e8:	4770      	bx	lr
 80167ea:	700a      	strb	r2, [r1, #0]
 80167ec:	2001      	movs	r0, #1
 80167ee:	4770      	bx	lr

080167f0 <fiprintf>:
 80167f0:	b40e      	push	{r1, r2, r3}
 80167f2:	b503      	push	{r0, r1, lr}
 80167f4:	4601      	mov	r1, r0
 80167f6:	ab03      	add	r3, sp, #12
 80167f8:	4805      	ldr	r0, [pc, #20]	@ (8016810 <fiprintf+0x20>)
 80167fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80167fe:	6800      	ldr	r0, [r0, #0]
 8016800:	9301      	str	r3, [sp, #4]
 8016802:	f000 f83f 	bl	8016884 <_vfiprintf_r>
 8016806:	b002      	add	sp, #8
 8016808:	f85d eb04 	ldr.w	lr, [sp], #4
 801680c:	b003      	add	sp, #12
 801680e:	4770      	bx	lr
 8016810:	2400039c 	.word	0x2400039c

08016814 <abort>:
 8016814:	b508      	push	{r3, lr}
 8016816:	2006      	movs	r0, #6
 8016818:	f000 fa08 	bl	8016c2c <raise>
 801681c:	2001      	movs	r0, #1
 801681e:	f7fb fc0d 	bl	801203c <_exit>

08016822 <_malloc_usable_size_r>:
 8016822:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016826:	1f18      	subs	r0, r3, #4
 8016828:	2b00      	cmp	r3, #0
 801682a:	bfbc      	itt	lt
 801682c:	580b      	ldrlt	r3, [r1, r0]
 801682e:	18c0      	addlt	r0, r0, r3
 8016830:	4770      	bx	lr

08016832 <__sfputc_r>:
 8016832:	6893      	ldr	r3, [r2, #8]
 8016834:	3b01      	subs	r3, #1
 8016836:	2b00      	cmp	r3, #0
 8016838:	b410      	push	{r4}
 801683a:	6093      	str	r3, [r2, #8]
 801683c:	da08      	bge.n	8016850 <__sfputc_r+0x1e>
 801683e:	6994      	ldr	r4, [r2, #24]
 8016840:	42a3      	cmp	r3, r4
 8016842:	db01      	blt.n	8016848 <__sfputc_r+0x16>
 8016844:	290a      	cmp	r1, #10
 8016846:	d103      	bne.n	8016850 <__sfputc_r+0x1e>
 8016848:	f85d 4b04 	ldr.w	r4, [sp], #4
 801684c:	f000 b932 	b.w	8016ab4 <__swbuf_r>
 8016850:	6813      	ldr	r3, [r2, #0]
 8016852:	1c58      	adds	r0, r3, #1
 8016854:	6010      	str	r0, [r2, #0]
 8016856:	7019      	strb	r1, [r3, #0]
 8016858:	4608      	mov	r0, r1
 801685a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801685e:	4770      	bx	lr

08016860 <__sfputs_r>:
 8016860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016862:	4606      	mov	r6, r0
 8016864:	460f      	mov	r7, r1
 8016866:	4614      	mov	r4, r2
 8016868:	18d5      	adds	r5, r2, r3
 801686a:	42ac      	cmp	r4, r5
 801686c:	d101      	bne.n	8016872 <__sfputs_r+0x12>
 801686e:	2000      	movs	r0, #0
 8016870:	e007      	b.n	8016882 <__sfputs_r+0x22>
 8016872:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016876:	463a      	mov	r2, r7
 8016878:	4630      	mov	r0, r6
 801687a:	f7ff ffda 	bl	8016832 <__sfputc_r>
 801687e:	1c43      	adds	r3, r0, #1
 8016880:	d1f3      	bne.n	801686a <__sfputs_r+0xa>
 8016882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016884 <_vfiprintf_r>:
 8016884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016888:	460d      	mov	r5, r1
 801688a:	b09d      	sub	sp, #116	@ 0x74
 801688c:	4614      	mov	r4, r2
 801688e:	4698      	mov	r8, r3
 8016890:	4606      	mov	r6, r0
 8016892:	b118      	cbz	r0, 801689c <_vfiprintf_r+0x18>
 8016894:	6a03      	ldr	r3, [r0, #32]
 8016896:	b90b      	cbnz	r3, 801689c <_vfiprintf_r+0x18>
 8016898:	f7fc fe92 	bl	80135c0 <__sinit>
 801689c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801689e:	07d9      	lsls	r1, r3, #31
 80168a0:	d405      	bmi.n	80168ae <_vfiprintf_r+0x2a>
 80168a2:	89ab      	ldrh	r3, [r5, #12]
 80168a4:	059a      	lsls	r2, r3, #22
 80168a6:	d402      	bmi.n	80168ae <_vfiprintf_r+0x2a>
 80168a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80168aa:	f7fc ffc2 	bl	8013832 <__retarget_lock_acquire_recursive>
 80168ae:	89ab      	ldrh	r3, [r5, #12]
 80168b0:	071b      	lsls	r3, r3, #28
 80168b2:	d501      	bpl.n	80168b8 <_vfiprintf_r+0x34>
 80168b4:	692b      	ldr	r3, [r5, #16]
 80168b6:	b99b      	cbnz	r3, 80168e0 <_vfiprintf_r+0x5c>
 80168b8:	4629      	mov	r1, r5
 80168ba:	4630      	mov	r0, r6
 80168bc:	f000 f938 	bl	8016b30 <__swsetup_r>
 80168c0:	b170      	cbz	r0, 80168e0 <_vfiprintf_r+0x5c>
 80168c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80168c4:	07dc      	lsls	r4, r3, #31
 80168c6:	d504      	bpl.n	80168d2 <_vfiprintf_r+0x4e>
 80168c8:	f04f 30ff 	mov.w	r0, #4294967295
 80168cc:	b01d      	add	sp, #116	@ 0x74
 80168ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168d2:	89ab      	ldrh	r3, [r5, #12]
 80168d4:	0598      	lsls	r0, r3, #22
 80168d6:	d4f7      	bmi.n	80168c8 <_vfiprintf_r+0x44>
 80168d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80168da:	f7fc ffab 	bl	8013834 <__retarget_lock_release_recursive>
 80168de:	e7f3      	b.n	80168c8 <_vfiprintf_r+0x44>
 80168e0:	2300      	movs	r3, #0
 80168e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80168e4:	2320      	movs	r3, #32
 80168e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80168ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80168ee:	2330      	movs	r3, #48	@ 0x30
 80168f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016aa0 <_vfiprintf_r+0x21c>
 80168f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80168f8:	f04f 0901 	mov.w	r9, #1
 80168fc:	4623      	mov	r3, r4
 80168fe:	469a      	mov	sl, r3
 8016900:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016904:	b10a      	cbz	r2, 801690a <_vfiprintf_r+0x86>
 8016906:	2a25      	cmp	r2, #37	@ 0x25
 8016908:	d1f9      	bne.n	80168fe <_vfiprintf_r+0x7a>
 801690a:	ebba 0b04 	subs.w	fp, sl, r4
 801690e:	d00b      	beq.n	8016928 <_vfiprintf_r+0xa4>
 8016910:	465b      	mov	r3, fp
 8016912:	4622      	mov	r2, r4
 8016914:	4629      	mov	r1, r5
 8016916:	4630      	mov	r0, r6
 8016918:	f7ff ffa2 	bl	8016860 <__sfputs_r>
 801691c:	3001      	adds	r0, #1
 801691e:	f000 80a7 	beq.w	8016a70 <_vfiprintf_r+0x1ec>
 8016922:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016924:	445a      	add	r2, fp
 8016926:	9209      	str	r2, [sp, #36]	@ 0x24
 8016928:	f89a 3000 	ldrb.w	r3, [sl]
 801692c:	2b00      	cmp	r3, #0
 801692e:	f000 809f 	beq.w	8016a70 <_vfiprintf_r+0x1ec>
 8016932:	2300      	movs	r3, #0
 8016934:	f04f 32ff 	mov.w	r2, #4294967295
 8016938:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801693c:	f10a 0a01 	add.w	sl, sl, #1
 8016940:	9304      	str	r3, [sp, #16]
 8016942:	9307      	str	r3, [sp, #28]
 8016944:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016948:	931a      	str	r3, [sp, #104]	@ 0x68
 801694a:	4654      	mov	r4, sl
 801694c:	2205      	movs	r2, #5
 801694e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016952:	4853      	ldr	r0, [pc, #332]	@ (8016aa0 <_vfiprintf_r+0x21c>)
 8016954:	f7e9 fcc4 	bl	80002e0 <memchr>
 8016958:	9a04      	ldr	r2, [sp, #16]
 801695a:	b9d8      	cbnz	r0, 8016994 <_vfiprintf_r+0x110>
 801695c:	06d1      	lsls	r1, r2, #27
 801695e:	bf44      	itt	mi
 8016960:	2320      	movmi	r3, #32
 8016962:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016966:	0713      	lsls	r3, r2, #28
 8016968:	bf44      	itt	mi
 801696a:	232b      	movmi	r3, #43	@ 0x2b
 801696c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016970:	f89a 3000 	ldrb.w	r3, [sl]
 8016974:	2b2a      	cmp	r3, #42	@ 0x2a
 8016976:	d015      	beq.n	80169a4 <_vfiprintf_r+0x120>
 8016978:	9a07      	ldr	r2, [sp, #28]
 801697a:	4654      	mov	r4, sl
 801697c:	2000      	movs	r0, #0
 801697e:	f04f 0c0a 	mov.w	ip, #10
 8016982:	4621      	mov	r1, r4
 8016984:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016988:	3b30      	subs	r3, #48	@ 0x30
 801698a:	2b09      	cmp	r3, #9
 801698c:	d94b      	bls.n	8016a26 <_vfiprintf_r+0x1a2>
 801698e:	b1b0      	cbz	r0, 80169be <_vfiprintf_r+0x13a>
 8016990:	9207      	str	r2, [sp, #28]
 8016992:	e014      	b.n	80169be <_vfiprintf_r+0x13a>
 8016994:	eba0 0308 	sub.w	r3, r0, r8
 8016998:	fa09 f303 	lsl.w	r3, r9, r3
 801699c:	4313      	orrs	r3, r2
 801699e:	9304      	str	r3, [sp, #16]
 80169a0:	46a2      	mov	sl, r4
 80169a2:	e7d2      	b.n	801694a <_vfiprintf_r+0xc6>
 80169a4:	9b03      	ldr	r3, [sp, #12]
 80169a6:	1d19      	adds	r1, r3, #4
 80169a8:	681b      	ldr	r3, [r3, #0]
 80169aa:	9103      	str	r1, [sp, #12]
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	bfbb      	ittet	lt
 80169b0:	425b      	neglt	r3, r3
 80169b2:	f042 0202 	orrlt.w	r2, r2, #2
 80169b6:	9307      	strge	r3, [sp, #28]
 80169b8:	9307      	strlt	r3, [sp, #28]
 80169ba:	bfb8      	it	lt
 80169bc:	9204      	strlt	r2, [sp, #16]
 80169be:	7823      	ldrb	r3, [r4, #0]
 80169c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80169c2:	d10a      	bne.n	80169da <_vfiprintf_r+0x156>
 80169c4:	7863      	ldrb	r3, [r4, #1]
 80169c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80169c8:	d132      	bne.n	8016a30 <_vfiprintf_r+0x1ac>
 80169ca:	9b03      	ldr	r3, [sp, #12]
 80169cc:	1d1a      	adds	r2, r3, #4
 80169ce:	681b      	ldr	r3, [r3, #0]
 80169d0:	9203      	str	r2, [sp, #12]
 80169d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80169d6:	3402      	adds	r4, #2
 80169d8:	9305      	str	r3, [sp, #20]
 80169da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016ab0 <_vfiprintf_r+0x22c>
 80169de:	7821      	ldrb	r1, [r4, #0]
 80169e0:	2203      	movs	r2, #3
 80169e2:	4650      	mov	r0, sl
 80169e4:	f7e9 fc7c 	bl	80002e0 <memchr>
 80169e8:	b138      	cbz	r0, 80169fa <_vfiprintf_r+0x176>
 80169ea:	9b04      	ldr	r3, [sp, #16]
 80169ec:	eba0 000a 	sub.w	r0, r0, sl
 80169f0:	2240      	movs	r2, #64	@ 0x40
 80169f2:	4082      	lsls	r2, r0
 80169f4:	4313      	orrs	r3, r2
 80169f6:	3401      	adds	r4, #1
 80169f8:	9304      	str	r3, [sp, #16]
 80169fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80169fe:	4829      	ldr	r0, [pc, #164]	@ (8016aa4 <_vfiprintf_r+0x220>)
 8016a00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016a04:	2206      	movs	r2, #6
 8016a06:	f7e9 fc6b 	bl	80002e0 <memchr>
 8016a0a:	2800      	cmp	r0, #0
 8016a0c:	d03f      	beq.n	8016a8e <_vfiprintf_r+0x20a>
 8016a0e:	4b26      	ldr	r3, [pc, #152]	@ (8016aa8 <_vfiprintf_r+0x224>)
 8016a10:	bb1b      	cbnz	r3, 8016a5a <_vfiprintf_r+0x1d6>
 8016a12:	9b03      	ldr	r3, [sp, #12]
 8016a14:	3307      	adds	r3, #7
 8016a16:	f023 0307 	bic.w	r3, r3, #7
 8016a1a:	3308      	adds	r3, #8
 8016a1c:	9303      	str	r3, [sp, #12]
 8016a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016a20:	443b      	add	r3, r7
 8016a22:	9309      	str	r3, [sp, #36]	@ 0x24
 8016a24:	e76a      	b.n	80168fc <_vfiprintf_r+0x78>
 8016a26:	fb0c 3202 	mla	r2, ip, r2, r3
 8016a2a:	460c      	mov	r4, r1
 8016a2c:	2001      	movs	r0, #1
 8016a2e:	e7a8      	b.n	8016982 <_vfiprintf_r+0xfe>
 8016a30:	2300      	movs	r3, #0
 8016a32:	3401      	adds	r4, #1
 8016a34:	9305      	str	r3, [sp, #20]
 8016a36:	4619      	mov	r1, r3
 8016a38:	f04f 0c0a 	mov.w	ip, #10
 8016a3c:	4620      	mov	r0, r4
 8016a3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016a42:	3a30      	subs	r2, #48	@ 0x30
 8016a44:	2a09      	cmp	r2, #9
 8016a46:	d903      	bls.n	8016a50 <_vfiprintf_r+0x1cc>
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	d0c6      	beq.n	80169da <_vfiprintf_r+0x156>
 8016a4c:	9105      	str	r1, [sp, #20]
 8016a4e:	e7c4      	b.n	80169da <_vfiprintf_r+0x156>
 8016a50:	fb0c 2101 	mla	r1, ip, r1, r2
 8016a54:	4604      	mov	r4, r0
 8016a56:	2301      	movs	r3, #1
 8016a58:	e7f0      	b.n	8016a3c <_vfiprintf_r+0x1b8>
 8016a5a:	ab03      	add	r3, sp, #12
 8016a5c:	9300      	str	r3, [sp, #0]
 8016a5e:	462a      	mov	r2, r5
 8016a60:	4b12      	ldr	r3, [pc, #72]	@ (8016aac <_vfiprintf_r+0x228>)
 8016a62:	a904      	add	r1, sp, #16
 8016a64:	4630      	mov	r0, r6
 8016a66:	f7fb ff73 	bl	8012950 <_printf_float>
 8016a6a:	4607      	mov	r7, r0
 8016a6c:	1c78      	adds	r0, r7, #1
 8016a6e:	d1d6      	bne.n	8016a1e <_vfiprintf_r+0x19a>
 8016a70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016a72:	07d9      	lsls	r1, r3, #31
 8016a74:	d405      	bmi.n	8016a82 <_vfiprintf_r+0x1fe>
 8016a76:	89ab      	ldrh	r3, [r5, #12]
 8016a78:	059a      	lsls	r2, r3, #22
 8016a7a:	d402      	bmi.n	8016a82 <_vfiprintf_r+0x1fe>
 8016a7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016a7e:	f7fc fed9 	bl	8013834 <__retarget_lock_release_recursive>
 8016a82:	89ab      	ldrh	r3, [r5, #12]
 8016a84:	065b      	lsls	r3, r3, #25
 8016a86:	f53f af1f 	bmi.w	80168c8 <_vfiprintf_r+0x44>
 8016a8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016a8c:	e71e      	b.n	80168cc <_vfiprintf_r+0x48>
 8016a8e:	ab03      	add	r3, sp, #12
 8016a90:	9300      	str	r3, [sp, #0]
 8016a92:	462a      	mov	r2, r5
 8016a94:	4b05      	ldr	r3, [pc, #20]	@ (8016aac <_vfiprintf_r+0x228>)
 8016a96:	a904      	add	r1, sp, #16
 8016a98:	4630      	mov	r0, r6
 8016a9a:	f7fc f9e1 	bl	8012e60 <_printf_i>
 8016a9e:	e7e4      	b.n	8016a6a <_vfiprintf_r+0x1e6>
 8016aa0:	0801dfd9 	.word	0x0801dfd9
 8016aa4:	0801dfe3 	.word	0x0801dfe3
 8016aa8:	08012951 	.word	0x08012951
 8016aac:	08016861 	.word	0x08016861
 8016ab0:	0801dfdf 	.word	0x0801dfdf

08016ab4 <__swbuf_r>:
 8016ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ab6:	460e      	mov	r6, r1
 8016ab8:	4614      	mov	r4, r2
 8016aba:	4605      	mov	r5, r0
 8016abc:	b118      	cbz	r0, 8016ac6 <__swbuf_r+0x12>
 8016abe:	6a03      	ldr	r3, [r0, #32]
 8016ac0:	b90b      	cbnz	r3, 8016ac6 <__swbuf_r+0x12>
 8016ac2:	f7fc fd7d 	bl	80135c0 <__sinit>
 8016ac6:	69a3      	ldr	r3, [r4, #24]
 8016ac8:	60a3      	str	r3, [r4, #8]
 8016aca:	89a3      	ldrh	r3, [r4, #12]
 8016acc:	071a      	lsls	r2, r3, #28
 8016ace:	d501      	bpl.n	8016ad4 <__swbuf_r+0x20>
 8016ad0:	6923      	ldr	r3, [r4, #16]
 8016ad2:	b943      	cbnz	r3, 8016ae6 <__swbuf_r+0x32>
 8016ad4:	4621      	mov	r1, r4
 8016ad6:	4628      	mov	r0, r5
 8016ad8:	f000 f82a 	bl	8016b30 <__swsetup_r>
 8016adc:	b118      	cbz	r0, 8016ae6 <__swbuf_r+0x32>
 8016ade:	f04f 37ff 	mov.w	r7, #4294967295
 8016ae2:	4638      	mov	r0, r7
 8016ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ae6:	6823      	ldr	r3, [r4, #0]
 8016ae8:	6922      	ldr	r2, [r4, #16]
 8016aea:	1a98      	subs	r0, r3, r2
 8016aec:	6963      	ldr	r3, [r4, #20]
 8016aee:	b2f6      	uxtb	r6, r6
 8016af0:	4283      	cmp	r3, r0
 8016af2:	4637      	mov	r7, r6
 8016af4:	dc05      	bgt.n	8016b02 <__swbuf_r+0x4e>
 8016af6:	4621      	mov	r1, r4
 8016af8:	4628      	mov	r0, r5
 8016afa:	f7ff fa45 	bl	8015f88 <_fflush_r>
 8016afe:	2800      	cmp	r0, #0
 8016b00:	d1ed      	bne.n	8016ade <__swbuf_r+0x2a>
 8016b02:	68a3      	ldr	r3, [r4, #8]
 8016b04:	3b01      	subs	r3, #1
 8016b06:	60a3      	str	r3, [r4, #8]
 8016b08:	6823      	ldr	r3, [r4, #0]
 8016b0a:	1c5a      	adds	r2, r3, #1
 8016b0c:	6022      	str	r2, [r4, #0]
 8016b0e:	701e      	strb	r6, [r3, #0]
 8016b10:	6962      	ldr	r2, [r4, #20]
 8016b12:	1c43      	adds	r3, r0, #1
 8016b14:	429a      	cmp	r2, r3
 8016b16:	d004      	beq.n	8016b22 <__swbuf_r+0x6e>
 8016b18:	89a3      	ldrh	r3, [r4, #12]
 8016b1a:	07db      	lsls	r3, r3, #31
 8016b1c:	d5e1      	bpl.n	8016ae2 <__swbuf_r+0x2e>
 8016b1e:	2e0a      	cmp	r6, #10
 8016b20:	d1df      	bne.n	8016ae2 <__swbuf_r+0x2e>
 8016b22:	4621      	mov	r1, r4
 8016b24:	4628      	mov	r0, r5
 8016b26:	f7ff fa2f 	bl	8015f88 <_fflush_r>
 8016b2a:	2800      	cmp	r0, #0
 8016b2c:	d0d9      	beq.n	8016ae2 <__swbuf_r+0x2e>
 8016b2e:	e7d6      	b.n	8016ade <__swbuf_r+0x2a>

08016b30 <__swsetup_r>:
 8016b30:	b538      	push	{r3, r4, r5, lr}
 8016b32:	4b29      	ldr	r3, [pc, #164]	@ (8016bd8 <__swsetup_r+0xa8>)
 8016b34:	4605      	mov	r5, r0
 8016b36:	6818      	ldr	r0, [r3, #0]
 8016b38:	460c      	mov	r4, r1
 8016b3a:	b118      	cbz	r0, 8016b44 <__swsetup_r+0x14>
 8016b3c:	6a03      	ldr	r3, [r0, #32]
 8016b3e:	b90b      	cbnz	r3, 8016b44 <__swsetup_r+0x14>
 8016b40:	f7fc fd3e 	bl	80135c0 <__sinit>
 8016b44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b48:	0719      	lsls	r1, r3, #28
 8016b4a:	d422      	bmi.n	8016b92 <__swsetup_r+0x62>
 8016b4c:	06da      	lsls	r2, r3, #27
 8016b4e:	d407      	bmi.n	8016b60 <__swsetup_r+0x30>
 8016b50:	2209      	movs	r2, #9
 8016b52:	602a      	str	r2, [r5, #0]
 8016b54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016b58:	81a3      	strh	r3, [r4, #12]
 8016b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8016b5e:	e033      	b.n	8016bc8 <__swsetup_r+0x98>
 8016b60:	0758      	lsls	r0, r3, #29
 8016b62:	d512      	bpl.n	8016b8a <__swsetup_r+0x5a>
 8016b64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016b66:	b141      	cbz	r1, 8016b7a <__swsetup_r+0x4a>
 8016b68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016b6c:	4299      	cmp	r1, r3
 8016b6e:	d002      	beq.n	8016b76 <__swsetup_r+0x46>
 8016b70:	4628      	mov	r0, r5
 8016b72:	f7fd fc4f 	bl	8014414 <_free_r>
 8016b76:	2300      	movs	r3, #0
 8016b78:	6363      	str	r3, [r4, #52]	@ 0x34
 8016b7a:	89a3      	ldrh	r3, [r4, #12]
 8016b7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016b80:	81a3      	strh	r3, [r4, #12]
 8016b82:	2300      	movs	r3, #0
 8016b84:	6063      	str	r3, [r4, #4]
 8016b86:	6923      	ldr	r3, [r4, #16]
 8016b88:	6023      	str	r3, [r4, #0]
 8016b8a:	89a3      	ldrh	r3, [r4, #12]
 8016b8c:	f043 0308 	orr.w	r3, r3, #8
 8016b90:	81a3      	strh	r3, [r4, #12]
 8016b92:	6923      	ldr	r3, [r4, #16]
 8016b94:	b94b      	cbnz	r3, 8016baa <__swsetup_r+0x7a>
 8016b96:	89a3      	ldrh	r3, [r4, #12]
 8016b98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016b9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016ba0:	d003      	beq.n	8016baa <__swsetup_r+0x7a>
 8016ba2:	4621      	mov	r1, r4
 8016ba4:	4628      	mov	r0, r5
 8016ba6:	f000 f883 	bl	8016cb0 <__smakebuf_r>
 8016baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016bae:	f013 0201 	ands.w	r2, r3, #1
 8016bb2:	d00a      	beq.n	8016bca <__swsetup_r+0x9a>
 8016bb4:	2200      	movs	r2, #0
 8016bb6:	60a2      	str	r2, [r4, #8]
 8016bb8:	6962      	ldr	r2, [r4, #20]
 8016bba:	4252      	negs	r2, r2
 8016bbc:	61a2      	str	r2, [r4, #24]
 8016bbe:	6922      	ldr	r2, [r4, #16]
 8016bc0:	b942      	cbnz	r2, 8016bd4 <__swsetup_r+0xa4>
 8016bc2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016bc6:	d1c5      	bne.n	8016b54 <__swsetup_r+0x24>
 8016bc8:	bd38      	pop	{r3, r4, r5, pc}
 8016bca:	0799      	lsls	r1, r3, #30
 8016bcc:	bf58      	it	pl
 8016bce:	6962      	ldrpl	r2, [r4, #20]
 8016bd0:	60a2      	str	r2, [r4, #8]
 8016bd2:	e7f4      	b.n	8016bbe <__swsetup_r+0x8e>
 8016bd4:	2000      	movs	r0, #0
 8016bd6:	e7f7      	b.n	8016bc8 <__swsetup_r+0x98>
 8016bd8:	2400039c 	.word	0x2400039c

08016bdc <_raise_r>:
 8016bdc:	291f      	cmp	r1, #31
 8016bde:	b538      	push	{r3, r4, r5, lr}
 8016be0:	4605      	mov	r5, r0
 8016be2:	460c      	mov	r4, r1
 8016be4:	d904      	bls.n	8016bf0 <_raise_r+0x14>
 8016be6:	2316      	movs	r3, #22
 8016be8:	6003      	str	r3, [r0, #0]
 8016bea:	f04f 30ff 	mov.w	r0, #4294967295
 8016bee:	bd38      	pop	{r3, r4, r5, pc}
 8016bf0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016bf2:	b112      	cbz	r2, 8016bfa <_raise_r+0x1e>
 8016bf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016bf8:	b94b      	cbnz	r3, 8016c0e <_raise_r+0x32>
 8016bfa:	4628      	mov	r0, r5
 8016bfc:	f000 f830 	bl	8016c60 <_getpid_r>
 8016c00:	4622      	mov	r2, r4
 8016c02:	4601      	mov	r1, r0
 8016c04:	4628      	mov	r0, r5
 8016c06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016c0a:	f000 b817 	b.w	8016c3c <_kill_r>
 8016c0e:	2b01      	cmp	r3, #1
 8016c10:	d00a      	beq.n	8016c28 <_raise_r+0x4c>
 8016c12:	1c59      	adds	r1, r3, #1
 8016c14:	d103      	bne.n	8016c1e <_raise_r+0x42>
 8016c16:	2316      	movs	r3, #22
 8016c18:	6003      	str	r3, [r0, #0]
 8016c1a:	2001      	movs	r0, #1
 8016c1c:	e7e7      	b.n	8016bee <_raise_r+0x12>
 8016c1e:	2100      	movs	r1, #0
 8016c20:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8016c24:	4620      	mov	r0, r4
 8016c26:	4798      	blx	r3
 8016c28:	2000      	movs	r0, #0
 8016c2a:	e7e0      	b.n	8016bee <_raise_r+0x12>

08016c2c <raise>:
 8016c2c:	4b02      	ldr	r3, [pc, #8]	@ (8016c38 <raise+0xc>)
 8016c2e:	4601      	mov	r1, r0
 8016c30:	6818      	ldr	r0, [r3, #0]
 8016c32:	f7ff bfd3 	b.w	8016bdc <_raise_r>
 8016c36:	bf00      	nop
 8016c38:	2400039c 	.word	0x2400039c

08016c3c <_kill_r>:
 8016c3c:	b538      	push	{r3, r4, r5, lr}
 8016c3e:	4d07      	ldr	r5, [pc, #28]	@ (8016c5c <_kill_r+0x20>)
 8016c40:	2300      	movs	r3, #0
 8016c42:	4604      	mov	r4, r0
 8016c44:	4608      	mov	r0, r1
 8016c46:	4611      	mov	r1, r2
 8016c48:	602b      	str	r3, [r5, #0]
 8016c4a:	f7fb f9e7 	bl	801201c <_kill>
 8016c4e:	1c43      	adds	r3, r0, #1
 8016c50:	d102      	bne.n	8016c58 <_kill_r+0x1c>
 8016c52:	682b      	ldr	r3, [r5, #0]
 8016c54:	b103      	cbz	r3, 8016c58 <_kill_r+0x1c>
 8016c56:	6023      	str	r3, [r4, #0]
 8016c58:	bd38      	pop	{r3, r4, r5, pc}
 8016c5a:	bf00      	nop
 8016c5c:	24001240 	.word	0x24001240

08016c60 <_getpid_r>:
 8016c60:	f7fb b9d4 	b.w	801200c <_getpid>

08016c64 <__swhatbuf_r>:
 8016c64:	b570      	push	{r4, r5, r6, lr}
 8016c66:	460c      	mov	r4, r1
 8016c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c6c:	2900      	cmp	r1, #0
 8016c6e:	b096      	sub	sp, #88	@ 0x58
 8016c70:	4615      	mov	r5, r2
 8016c72:	461e      	mov	r6, r3
 8016c74:	da0d      	bge.n	8016c92 <__swhatbuf_r+0x2e>
 8016c76:	89a3      	ldrh	r3, [r4, #12]
 8016c78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016c7c:	f04f 0100 	mov.w	r1, #0
 8016c80:	bf14      	ite	ne
 8016c82:	2340      	movne	r3, #64	@ 0x40
 8016c84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016c88:	2000      	movs	r0, #0
 8016c8a:	6031      	str	r1, [r6, #0]
 8016c8c:	602b      	str	r3, [r5, #0]
 8016c8e:	b016      	add	sp, #88	@ 0x58
 8016c90:	bd70      	pop	{r4, r5, r6, pc}
 8016c92:	466a      	mov	r2, sp
 8016c94:	f000 f848 	bl	8016d28 <_fstat_r>
 8016c98:	2800      	cmp	r0, #0
 8016c9a:	dbec      	blt.n	8016c76 <__swhatbuf_r+0x12>
 8016c9c:	9901      	ldr	r1, [sp, #4]
 8016c9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016ca2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016ca6:	4259      	negs	r1, r3
 8016ca8:	4159      	adcs	r1, r3
 8016caa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016cae:	e7eb      	b.n	8016c88 <__swhatbuf_r+0x24>

08016cb0 <__smakebuf_r>:
 8016cb0:	898b      	ldrh	r3, [r1, #12]
 8016cb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016cb4:	079d      	lsls	r5, r3, #30
 8016cb6:	4606      	mov	r6, r0
 8016cb8:	460c      	mov	r4, r1
 8016cba:	d507      	bpl.n	8016ccc <__smakebuf_r+0x1c>
 8016cbc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016cc0:	6023      	str	r3, [r4, #0]
 8016cc2:	6123      	str	r3, [r4, #16]
 8016cc4:	2301      	movs	r3, #1
 8016cc6:	6163      	str	r3, [r4, #20]
 8016cc8:	b003      	add	sp, #12
 8016cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ccc:	ab01      	add	r3, sp, #4
 8016cce:	466a      	mov	r2, sp
 8016cd0:	f7ff ffc8 	bl	8016c64 <__swhatbuf_r>
 8016cd4:	9f00      	ldr	r7, [sp, #0]
 8016cd6:	4605      	mov	r5, r0
 8016cd8:	4639      	mov	r1, r7
 8016cda:	4630      	mov	r0, r6
 8016cdc:	f7fd fc0e 	bl	80144fc <_malloc_r>
 8016ce0:	b948      	cbnz	r0, 8016cf6 <__smakebuf_r+0x46>
 8016ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016ce6:	059a      	lsls	r2, r3, #22
 8016ce8:	d4ee      	bmi.n	8016cc8 <__smakebuf_r+0x18>
 8016cea:	f023 0303 	bic.w	r3, r3, #3
 8016cee:	f043 0302 	orr.w	r3, r3, #2
 8016cf2:	81a3      	strh	r3, [r4, #12]
 8016cf4:	e7e2      	b.n	8016cbc <__smakebuf_r+0xc>
 8016cf6:	89a3      	ldrh	r3, [r4, #12]
 8016cf8:	6020      	str	r0, [r4, #0]
 8016cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016cfe:	81a3      	strh	r3, [r4, #12]
 8016d00:	9b01      	ldr	r3, [sp, #4]
 8016d02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016d06:	b15b      	cbz	r3, 8016d20 <__smakebuf_r+0x70>
 8016d08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016d0c:	4630      	mov	r0, r6
 8016d0e:	f000 f81d 	bl	8016d4c <_isatty_r>
 8016d12:	b128      	cbz	r0, 8016d20 <__smakebuf_r+0x70>
 8016d14:	89a3      	ldrh	r3, [r4, #12]
 8016d16:	f023 0303 	bic.w	r3, r3, #3
 8016d1a:	f043 0301 	orr.w	r3, r3, #1
 8016d1e:	81a3      	strh	r3, [r4, #12]
 8016d20:	89a3      	ldrh	r3, [r4, #12]
 8016d22:	431d      	orrs	r5, r3
 8016d24:	81a5      	strh	r5, [r4, #12]
 8016d26:	e7cf      	b.n	8016cc8 <__smakebuf_r+0x18>

08016d28 <_fstat_r>:
 8016d28:	b538      	push	{r3, r4, r5, lr}
 8016d2a:	4d07      	ldr	r5, [pc, #28]	@ (8016d48 <_fstat_r+0x20>)
 8016d2c:	2300      	movs	r3, #0
 8016d2e:	4604      	mov	r4, r0
 8016d30:	4608      	mov	r0, r1
 8016d32:	4611      	mov	r1, r2
 8016d34:	602b      	str	r3, [r5, #0]
 8016d36:	f7fb f9d1 	bl	80120dc <_fstat>
 8016d3a:	1c43      	adds	r3, r0, #1
 8016d3c:	d102      	bne.n	8016d44 <_fstat_r+0x1c>
 8016d3e:	682b      	ldr	r3, [r5, #0]
 8016d40:	b103      	cbz	r3, 8016d44 <_fstat_r+0x1c>
 8016d42:	6023      	str	r3, [r4, #0]
 8016d44:	bd38      	pop	{r3, r4, r5, pc}
 8016d46:	bf00      	nop
 8016d48:	24001240 	.word	0x24001240

08016d4c <_isatty_r>:
 8016d4c:	b538      	push	{r3, r4, r5, lr}
 8016d4e:	4d06      	ldr	r5, [pc, #24]	@ (8016d68 <_isatty_r+0x1c>)
 8016d50:	2300      	movs	r3, #0
 8016d52:	4604      	mov	r4, r0
 8016d54:	4608      	mov	r0, r1
 8016d56:	602b      	str	r3, [r5, #0]
 8016d58:	f7fb f9d0 	bl	80120fc <_isatty>
 8016d5c:	1c43      	adds	r3, r0, #1
 8016d5e:	d102      	bne.n	8016d66 <_isatty_r+0x1a>
 8016d60:	682b      	ldr	r3, [r5, #0]
 8016d62:	b103      	cbz	r3, 8016d66 <_isatty_r+0x1a>
 8016d64:	6023      	str	r3, [r4, #0]
 8016d66:	bd38      	pop	{r3, r4, r5, pc}
 8016d68:	24001240 	.word	0x24001240

08016d6c <_init>:
 8016d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d6e:	bf00      	nop
 8016d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016d72:	bc08      	pop	{r3}
 8016d74:	469e      	mov	lr, r3
 8016d76:	4770      	bx	lr

08016d78 <_fini>:
 8016d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d7a:	bf00      	nop
 8016d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016d7e:	bc08      	pop	{r3}
 8016d80:	469e      	mov	lr, r3
 8016d82:	4770      	bx	lr
